
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/boot/boot.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000c4e memsz 0x00000c4e flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000004e  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d9  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000040  00000000  00000000  00000f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f9  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fe  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007dfe l    d  boot_end	00000000 boot_end
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 CMakeFiles/boot.dir/start.S.obj
00007c31 l       .text	00000000 read_loader
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c44 g     F .text	0000000a boot_entry
00007c00 g       .text	00000000 _start
00008c4e g       .text	00000000 __bss_start
00008c4e g       .text	00000000 _edata
00008c50 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16
 	.text
	.global _start

_start:
	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c0b:	8e e8                	mov    %ax,%gs

	mov $_start, %esp
    7c0d:	66 bc 00 7c 00 00    	mov    $0x7c00,%esp

	# 显示字符 int 10，ah = 0xe, al = 字符ascii
	mov $0xe, %ah
    7c13:	b4 0e                	mov    $0xe,%ah
	mov $'M', %al
    7c15:	b0 4d                	mov    $0x4d,%al
	int $0x10
    7c17:	cd 10                	int    $0x10
	mov $'I', %al
    7c19:	b0 49                	mov    $0x49,%al
	int $0x10
    7c1b:	cd 10                	int    $0x10
	mov $'N', %al
    7c1d:	b0 4e                	mov    $0x4e,%al
	int $0x10
    7c1f:	cd 10                	int    $0x10
	mov $'I', %al
    7c21:	b0 49                	mov    $0x49,%al
	int $0x10
    7c23:	cd 10                	int    $0x10
	mov $'-', %al
    7c25:	b0 2d                	mov    $0x2d,%al
	int $0x10
    7c27:	cd 10                	int    $0x10
	mov $'O', %al
    7c29:	b0 4f                	mov    $0x4f,%al
	int $0x10
    7c2b:	cd 10                	int    $0x10
	mov $'S', %al
    7c2d:	b0 53                	mov    $0x53,%al
	int $0x10
    7c2f:	cd 10                	int    $0x10

00007c31 <read_loader>:

read_loader:
	mov $0x8000, %bx # 缓冲区地址
    7c31:	bb 00 80             	mov    $0x8000,%bx
	mov $0x02,	 %ah 
    7c34:	b4 02                	mov    $0x2,%ah
	mov $0x02,	 %cx # CH 柱面， CL 扇区
    7c36:	b9 02 00             	mov    $0x2,%cx
	mov $64,	 %al # 64 = 32kb
    7c39:	b0 40                	mov    $0x40,%al
	mov $0x80,	 %dx # DH 磁头，DL 驱动器: 80H 硬盘
    7c3b:	ba 80 00             	mov    $0x80,%dx
	int $ 0x13
    7c3e:	cd 13                	int    $0x13
	jc read_loader   # 判断CF标志，如果为1就跳转
    7c40:	72 ef                	jb     7c31 <read_loader>

	jmp .
    7c42:	eb fe                	jmp    7c42 <read_loader+0x11>

00007c44 <boot_entry>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c44:	66 55                	push   %ebp
    7c46:	66 89 e5             	mov    %esp,%ebp
} 
    7c49:	90                   	nop
    7c4a:	66 5d                	pop    %ebp
    7c4c:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
