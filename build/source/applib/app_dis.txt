In archive E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/applib/libapp.a:

crt0.S.obj:     file format elf32-i386
rw-rw-rw- 0/0   1356 Mar 24 09:32 2023 crt0.S.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  3 .debug_line   00000072  00000000  00000000  00000044  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_info   000000a5  00000000  00000000  000000b6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 00000014  00000000  00000000  0000015b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00000170  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 g       .text	00000000 _start
00000000         *UND*	00000000 cstart



Disassembly of section .text:

00000000 <_start>:

    .text
    .global _start
    .extern cstart
_start:
	mov %ss, %ax
   0:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
   3:	8e d8                	mov    %eax,%ds
	# mov %ax, %ss
	mov %ax, %es
   5:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   7:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   9:	8e e8                	mov    %eax,%gs

   b:	e9 fc ff ff ff       	jmp    c <_start+0xc>
			c: R_386_PC32	cstart

cstart.c.obj:     file format elf32-i386
rw-rw-rw- 0/0   3556 Mar 31 12:34 2023 cstart.c.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f5  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000129  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000129  2**0
                  ALLOC
  3 .rodata       00000009  00000000  00000000  00000129  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   000001db  00000000  00000000  00000132  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 00000117  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00000424  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_line   000000bb  00000000  00000000  00000444  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_str    000001b3  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000012  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000000a0  00000000  00000000  000006c4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l     F .text	0000004c syscall
0000004c l     F .text	00000028 print_msg
00000074 l     F .text	00000022 exit
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000096 g     F .text	0000005f cstart
00000000         *UND*	00000000 main



Disassembly of section .text:

00000000 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	57                   	push   %edi
   4:	56                   	push   %esi
   5:	53                   	push   %ebx
   6:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
   9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
  17:	8b 45 08             	mov    0x8(%ebp),%eax
  1a:	8b 40 10             	mov    0x10(%eax),%eax
  1d:	8b 55 08             	mov    0x8(%ebp),%edx
  20:	8b 52 0c             	mov    0xc(%edx),%edx
  23:	8b 4d 08             	mov    0x8(%ebp),%ecx
  26:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
  29:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2c:	8b 5b 04             	mov    0x4(%ebx),%ebx
  2f:	8b 75 08             	mov    0x8(%ebp),%esi
  32:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
  34:	8d 7d e8             	lea    -0x18(%ebp),%edi
  37:	50                   	push   %eax
  38:	52                   	push   %edx
  39:	51                   	push   %ecx
  3a:	53                   	push   %ebx
  3b:	56                   	push   %esi
  3c:	ff 1f                	lcall  *(%edi)
  3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
  41:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  44:	83 c4 10             	add    $0x10,%esp
  47:	5b                   	pop    %ebx
  48:	5e                   	pop    %esi
  49:	5f                   	pop    %edi
  4a:	5d                   	pop    %ebp
  4b:	c3                   	ret    

0000004c <print_msg>:

    return syscall(&args);
}


static inline void print_msg(char* fmt, int arg) {
  4c:	55                   	push   %ebp
  4d:	89 e5                	mov    %esp,%ebp
  4f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
  52:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
  59:	8b 45 08             	mov    0x8(%ebp),%eax
  5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
  5f:	8b 45 0c             	mov    0xc(%ebp),%eax
  62:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
  65:	8d 45 ec             	lea    -0x14(%ebp),%eax
  68:	50                   	push   %eax
  69:	e8 92 ff ff ff       	call   0 <syscall>
  6e:	83 c4 04             	add    $0x4,%esp
}
  71:	90                   	nop
  72:	c9                   	leave  
  73:	c3                   	ret    

00000074 <exit>:
    args.arg2 = (int)env;

    return syscall(&args);
}

static inline void exit(int status) {
  74:	55                   	push   %ebp
  75:	89 e5                	mov    %esp,%ebp
  77:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
  7a:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    
    args.arg0 = status;
  81:	8b 45 08             	mov    0x8(%ebp),%eax
  84:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
  87:	8d 45 ec             	lea    -0x14(%ebp),%eax
  8a:	50                   	push   %eax
  8b:	e8 70 ff ff ff       	call   0 <syscall>
  90:	83 c4 04             	add    $0x4,%esp
}
  93:	90                   	nop
  94:	c9                   	leave  
  95:	c3                   	ret    

00000096 <cstart>:
#include "lib_syscall.h"

int main(int argc, char** argv);

void cstart(int argc, char** argv) {
  96:	55                   	push   %ebp
  97:	89 e5                	mov    %esp,%ebp
  99:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < argc; i++) {
  9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  a3:	eb 23                	jmp    c8 <cstart+0x32>
        print_msg("arg = %s", argv[i]);
  a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  af:	8b 45 0c             	mov    0xc(%ebp),%eax
  b2:	01 d0                	add    %edx,%eax
  b4:	8b 00                	mov    (%eax),%eax
  b6:	50                   	push   %eax
  b7:	68 00 00 00 00       	push   $0x0
			b8: R_386_32	.rodata
  bc:	e8 8b ff ff ff       	call   4c <print_msg>
  c1:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < argc; i++) {
  c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  cb:	3b 45 08             	cmp    0x8(%ebp),%eax
  ce:	7c d5                	jl     a5 <cstart+0xf>
    }
    int ret = main(argc, argv);
  d0:	83 ec 08             	sub    $0x8,%esp
  d3:	ff 75 0c             	pushl  0xc(%ebp)
  d6:	ff 75 08             	pushl  0x8(%ebp)
  d9:	e8 fc ff ff ff       	call   da <cstart+0x44>
			da: R_386_PC32	main
  de:	83 c4 10             	add    $0x10,%esp
  e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    exit(ret);
  e4:	83 ec 0c             	sub    $0xc,%esp
  e7:	ff 75 f0             	pushl  -0x10(%ebp)
  ea:	e8 85 ff ff ff       	call   74 <exit>
  ef:	83 c4 10             	add    $0x10,%esp
  f2:	90                   	nop
  f3:	c9                   	leave  
  f4:	c3                   	ret    
