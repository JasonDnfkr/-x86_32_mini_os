
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/shell/shell.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/shell/shell.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8100013a

Program Header:
    LOAD off    0x00001000 vaddr 0x81000000 paddr 0x81000000 align 2**12
         filesz 0x0000025d memsz 0x0000025d flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023f  81000000  81000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000001e  8100023f  8100023f  0000123f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_info   000004a0  00000000  00000000  0000125d  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_abbrev 0000025e  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00001960  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000228  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    00000227  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY
  8 .debug_frame  00000180  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
81000000 l    d  .text	00000000 .text
8100023f l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 main.c
81000000 l     F .text	0000004c syscall
8100004c l     F .text	0000002a msleep
81000076 l     F .text	0000001b getpid
81000091 l     F .text	00000028 print_msg
810000b9 l     F .text	0000001b fork
00000000 l    df *ABS*	00000000 cstart.c
8100014a l     F .text	0000004c syscall
81000196 l     F .text	00000028 print_msg
810001be l     F .text	00000022 exit
8100013a g       .text	00000000 _start
810001e0 g     F .text	0000005f cstart
810000d4 g     F .text	00000066 main



Disassembly of section .text:

81000000 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
81000000:	55                   	push   %ebp
81000001:	89 e5                	mov    %esp,%ebp
81000003:	57                   	push   %edi
81000004:	56                   	push   %esi
81000005:	53                   	push   %ebx
81000006:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
81000009:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
81000010:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
81000017:	8b 45 08             	mov    0x8(%ebp),%eax
8100001a:	8b 40 10             	mov    0x10(%eax),%eax
8100001d:	8b 55 08             	mov    0x8(%ebp),%edx
81000020:	8b 52 0c             	mov    0xc(%edx),%edx
81000023:	8b 4d 08             	mov    0x8(%ebp),%ecx
81000026:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
81000029:	8b 5d 08             	mov    0x8(%ebp),%ebx
8100002c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8100002f:	8b 75 08             	mov    0x8(%ebp),%esi
81000032:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
81000034:	8d 7d e8             	lea    -0x18(%ebp),%edi
81000037:	50                   	push   %eax
81000038:	52                   	push   %edx
81000039:	51                   	push   %ecx
8100003a:	53                   	push   %ebx
8100003b:	56                   	push   %esi
8100003c:	ff 1f                	lcall  *(%edi)
8100003e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
81000041:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
81000044:	83 c4 10             	add    $0x10,%esp
81000047:	5b                   	pop    %ebx
81000048:	5e                   	pop    %esi
81000049:	5f                   	pop    %edi
8100004a:	5d                   	pop    %ebp
8100004b:	c3                   	ret    

8100004c <msleep>:
 
static inline void msleep(int ms) {
8100004c:	55                   	push   %ebp
8100004d:	89 e5                	mov    %esp,%ebp
8100004f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
81000052:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
81000056:	7e 1b                	jle    81000073 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
81000058:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8100005f:	8b 45 08             	mov    0x8(%ebp),%eax
81000062:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
81000065:	8d 45 ec             	lea    -0x14(%ebp),%eax
81000068:	50                   	push   %eax
81000069:	e8 92 ff ff ff       	call   81000000 <syscall>
8100006e:	83 c4 04             	add    $0x4,%esp
81000071:	eb 01                	jmp    81000074 <msleep+0x28>
        return;
81000073:	90                   	nop
}
81000074:	c9                   	leave  
81000075:	c3                   	ret    

81000076 <getpid>:


static inline int getpid(void) {
81000076:	55                   	push   %ebp
81000077:	89 e5                	mov    %esp,%ebp
81000079:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8100007c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return syscall(&args);
81000083:	8d 45 ec             	lea    -0x14(%ebp),%eax
81000086:	50                   	push   %eax
81000087:	e8 74 ff ff ff       	call   81000000 <syscall>
8100008c:	83 c4 04             	add    $0x4,%esp
}
8100008f:	c9                   	leave  
81000090:	c3                   	ret    

81000091 <print_msg>:


static inline void print_msg(char* fmt, int arg) {
81000091:	55                   	push   %ebp
81000092:	89 e5                	mov    %esp,%ebp
81000094:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
81000097:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
8100009e:	8b 45 08             	mov    0x8(%ebp),%eax
810000a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
810000a4:	8b 45 0c             	mov    0xc(%ebp),%eax
810000a7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
810000aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
810000ad:	50                   	push   %eax
810000ae:	e8 4d ff ff ff       	call   81000000 <syscall>
810000b3:	83 c4 04             	add    $0x4,%esp
}
810000b6:	90                   	nop
810000b7:	c9                   	leave  
810000b8:	c3                   	ret    

810000b9 <fork>:


static inline int fork(void) {
810000b9:	55                   	push   %ebp
810000ba:	89 e5                	mov    %esp,%ebp
810000bc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
810000bf:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)

    return syscall(&args);
810000c6:	8d 45 ec             	lea    -0x14(%ebp),%eax
810000c9:	50                   	push   %eax
810000ca:	e8 31 ff ff ff       	call   81000000 <syscall>
810000cf:	83 c4 04             	add    $0x4,%esp
}
810000d2:	c9                   	leave  
810000d3:	c3                   	ret    

810000d4 <main>:
#include "lib_syscall.h"

int main(int argc, char** argv) {
810000d4:	55                   	push   %ebp
810000d5:	89 e5                	mov    %esp,%ebp
810000d7:	83 ec 10             	sub    $0x10,%esp

    for (int i = 0; i < argc; i++) {
810000da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
810000e1:	eb 23                	jmp    81000106 <main+0x32>
        print_msg("[arg]: %s", (int)argv[i]);
810000e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
810000e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
810000ed:	8b 45 0c             	mov    0xc(%ebp),%eax
810000f0:	01 d0                	add    %edx,%eax
810000f2:	8b 00                	mov    (%eax),%eax
810000f4:	50                   	push   %eax
810000f5:	68 3f 02 00 81       	push   $0x8100023f
810000fa:	e8 92 ff ff ff       	call   81000091 <print_msg>
810000ff:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < argc; i++) {
81000102:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
81000106:	8b 45 fc             	mov    -0x4(%ebp),%eax
81000109:	3b 45 08             	cmp    0x8(%ebp),%eax
8100010c:	7c d5                	jl     810000e3 <main+0xf>
    }

    fork();
8100010e:	e8 a6 ff ff ff       	call   810000b9 <fork>

    while (1) {
        // if (pid == 0) {
        //     print_msg("child pid in main.c: %d", getpid());
        // }
        print_msg("main.c: %d", getpid());
81000113:	e8 5e ff ff ff       	call   81000076 <getpid>
81000118:	50                   	push   %eax
81000119:	68 49 02 00 81       	push   $0x81000249
8100011e:	e8 6e ff ff ff       	call   81000091 <print_msg>
81000123:	83 c4 08             	add    $0x8,%esp
        msleep(3000);
81000126:	68 b8 0b 00 00       	push   $0xbb8
8100012b:	e8 1c ff ff ff       	call   8100004c <msleep>
81000130:	83 c4 04             	add    $0x4,%esp

        return 0;
81000133:	b8 00 00 00 00       	mov    $0x0,%eax
    }
    
81000138:	c9                   	leave  
81000139:	c3                   	ret    

8100013a <_start>:

    .text
    .global _start
    .extern cstart
_start:
	mov %ss, %ax
8100013a:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
8100013d:	8e d8                	mov    %eax,%ds
	# mov %ax, %ss
	mov %ax, %es
8100013f:	8e c0                	mov    %eax,%es
	mov %ax, %fs
81000141:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
81000143:	8e e8                	mov    %eax,%gs

81000145:	e9 96 00 00 00       	jmp    810001e0 <cstart>

8100014a <syscall>:
static inline int syscall(syscall_args_t* args) {
8100014a:	55                   	push   %ebp
8100014b:	89 e5                	mov    %esp,%ebp
8100014d:	57                   	push   %edi
8100014e:	56                   	push   %esi
8100014f:	53                   	push   %ebx
81000150:	83 ec 10             	sub    $0x10,%esp
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
81000153:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8100015a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
81000161:	8b 45 08             	mov    0x8(%ebp),%eax
81000164:	8b 40 10             	mov    0x10(%eax),%eax
81000167:	8b 55 08             	mov    0x8(%ebp),%edx
8100016a:	8b 52 0c             	mov    0xc(%edx),%edx
8100016d:	8b 4d 08             	mov    0x8(%ebp),%ecx
81000170:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
81000173:	8b 5d 08             	mov    0x8(%ebp),%ebx
81000176:	8b 5b 04             	mov    0x4(%ebx),%ebx
81000179:	8b 75 08             	mov    0x8(%ebp),%esi
8100017c:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
8100017e:	8d 7d e8             	lea    -0x18(%ebp),%edi
81000181:	50                   	push   %eax
81000182:	52                   	push   %edx
81000183:	51                   	push   %ecx
81000184:	53                   	push   %ebx
81000185:	56                   	push   %esi
81000186:	ff 1f                	lcall  *(%edi)
81000188:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return ret;
8100018b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
8100018e:	83 c4 10             	add    $0x10,%esp
81000191:	5b                   	pop    %ebx
81000192:	5e                   	pop    %esi
81000193:	5f                   	pop    %edi
81000194:	5d                   	pop    %ebp
81000195:	c3                   	ret    

81000196 <print_msg>:
static inline void print_msg(char* fmt, int arg) {
81000196:	55                   	push   %ebp
81000197:	89 e5                	mov    %esp,%ebp
81000199:	83 ec 20             	sub    $0x20,%esp
    args.id = SYS_print_msg;
8100019c:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
810001a3:	8b 45 08             	mov    0x8(%ebp),%eax
810001a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
810001a9:	8b 45 0c             	mov    0xc(%ebp),%eax
810001ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    syscall(&args);
810001af:	8d 45 ec             	lea    -0x14(%ebp),%eax
810001b2:	50                   	push   %eax
810001b3:	e8 92 ff ff ff       	call   8100014a <syscall>
810001b8:	83 c4 04             	add    $0x4,%esp
}
810001bb:	90                   	nop
810001bc:	c9                   	leave  
810001bd:	c3                   	ret    

810001be <exit>:
    args.arg2 = (int)env;

    return syscall(&args);
}

static inline void exit(int status) {
810001be:	55                   	push   %ebp
810001bf:	89 e5                	mov    %esp,%ebp
810001c1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
810001c4:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    
    args.arg0 = status;
810001cb:	8b 45 08             	mov    0x8(%ebp),%eax
810001ce:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
810001d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
810001d4:	50                   	push   %eax
810001d5:	e8 70 ff ff ff       	call   8100014a <syscall>
810001da:	83 c4 04             	add    $0x4,%esp
}
810001dd:	90                   	nop
810001de:	c9                   	leave  
810001df:	c3                   	ret    

810001e0 <cstart>:
#include "lib_syscall.h"

int main(int argc, char** argv);

void cstart(int argc, char** argv) {
810001e0:	55                   	push   %ebp
810001e1:	89 e5                	mov    %esp,%ebp
810001e3:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < argc; i++) {
810001e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
810001ed:	eb 23                	jmp    81000212 <cstart+0x32>
        print_msg("arg = %s", argv[i]);
810001ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
810001f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
810001f9:	8b 45 0c             	mov    0xc(%ebp),%eax
810001fc:	01 d0                	add    %edx,%eax
810001fe:	8b 00                	mov    (%eax),%eax
81000200:	50                   	push   %eax
81000201:	68 54 02 00 81       	push   $0x81000254
81000206:	e8 8b ff ff ff       	call   81000196 <print_msg>
8100020b:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < argc; i++) {
8100020e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
81000212:	8b 45 f4             	mov    -0xc(%ebp),%eax
81000215:	3b 45 08             	cmp    0x8(%ebp),%eax
81000218:	7c d5                	jl     810001ef <cstart+0xf>
    }
    int ret = main(argc, argv);
8100021a:	83 ec 08             	sub    $0x8,%esp
8100021d:	ff 75 0c             	pushl  0xc(%ebp)
81000220:	ff 75 08             	pushl  0x8(%ebp)
81000223:	e8 ac fe ff ff       	call   810000d4 <main>
81000228:	83 c4 10             	add    $0x10,%esp
8100022b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    exit(ret);
8100022e:	83 ec 0c             	sub    $0xc,%esp
81000231:	ff 75 f0             	pushl  -0x10(%ebp)
81000234:	e8 85 ff ff ff       	call   810001be <exit>
81000239:	83 c4 10             	add    $0x10,%esp
8100023c:	90                   	nop
8100023d:	c9                   	leave  
8100023e:	c3                   	ret    
