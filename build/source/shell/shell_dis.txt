
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/shell/shell.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/shell/shell.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x810000e7

Program Header:
    LOAD off    0x00001000 vaddr 0x81000000 paddr 0x81000000 align 2**12
         filesz 0x000001ca memsz 0x000001ca flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b9  81000000  81000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000011  810001b9  810001b9  000011b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_info   00000410  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_abbrev 00000244  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00001820  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000218  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    0000020f  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00001ca7  2**0
                  CONTENTS, READONLY
  8 .debug_frame  00000118  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
81000000 l    d  .text	00000000 .text
810001b9 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 main.c
81000000 l     F .text	0000004c syscall
8100004c l     F .text	0000002a msleep
81000076 l     F .text	00000028 print_msg
00000000 l    df *ABS*	00000000 cstart.c
810000f7 l     F .text	0000004c syscall
81000143 l     F .text	00000028 print_msg
810000e7 g       .text	00000000 _start
8100016b g     F .text	0000004e cstart
8100009e g     F .text	00000049 main



Disassembly of section .text:

81000000 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
81000000:	55                   	push   %ebp
81000001:	89 e5                	mov    %esp,%ebp
81000003:	57                   	push   %edi
81000004:	56                   	push   %esi
81000005:	53                   	push   %ebx
81000006:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
81000009:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
81000010:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
81000017:	8b 45 08             	mov    0x8(%ebp),%eax
8100001a:	8b 40 10             	mov    0x10(%eax),%eax
8100001d:	8b 55 08             	mov    0x8(%ebp),%edx
81000020:	8b 52 0c             	mov    0xc(%edx),%edx
81000023:	8b 4d 08             	mov    0x8(%ebp),%ecx
81000026:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
81000029:	8b 5d 08             	mov    0x8(%ebp),%ebx
8100002c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8100002f:	8b 75 08             	mov    0x8(%ebp),%esi
81000032:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
81000034:	8d 7d e8             	lea    -0x18(%ebp),%edi
81000037:	50                   	push   %eax
81000038:	52                   	push   %edx
81000039:	51                   	push   %ecx
8100003a:	53                   	push   %ebx
8100003b:	56                   	push   %esi
8100003c:	ff 1f                	lcall  *(%edi)
8100003e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
81000041:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
81000044:	83 c4 10             	add    $0x10,%esp
81000047:	5b                   	pop    %ebx
81000048:	5e                   	pop    %esi
81000049:	5f                   	pop    %edi
8100004a:	5d                   	pop    %ebp
8100004b:	c3                   	ret    

8100004c <msleep>:
 
static inline void msleep(int ms) {
8100004c:	55                   	push   %ebp
8100004d:	89 e5                	mov    %esp,%ebp
8100004f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
81000052:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
81000056:	7e 1b                	jle    81000073 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
81000058:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8100005f:	8b 45 08             	mov    0x8(%ebp),%eax
81000062:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
81000065:	8d 45 ec             	lea    -0x14(%ebp),%eax
81000068:	50                   	push   %eax
81000069:	e8 92 ff ff ff       	call   81000000 <syscall>
8100006e:	83 c4 04             	add    $0x4,%esp
81000071:	eb 01                	jmp    81000074 <msleep+0x28>
        return;
81000073:	90                   	nop
}
81000074:	c9                   	leave  
81000075:	c3                   	ret    

81000076 <print_msg>:

    return syscall(&args);
}


static inline void print_msg(char* fmt, int arg) {
81000076:	55                   	push   %ebp
81000077:	89 e5                	mov    %esp,%ebp
81000079:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
8100007c:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
81000083:	8b 45 08             	mov    0x8(%ebp),%eax
81000086:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
81000089:	8b 45 0c             	mov    0xc(%ebp),%eax
8100008c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
8100008f:	8d 45 ec             	lea    -0x14(%ebp),%eax
81000092:	50                   	push   %eax
81000093:	e8 68 ff ff ff       	call   81000000 <syscall>
81000098:	83 c4 04             	add    $0x4,%esp
}
8100009b:	90                   	nop
8100009c:	c9                   	leave  
8100009d:	c3                   	ret    

8100009e <main>:
#include "lib_syscall.h"

int main(int argc, char** argv) {
8100009e:	55                   	push   %ebp
8100009f:	89 e5                	mov    %esp,%ebp
810000a1:	83 ec 10             	sub    $0x10,%esp

    for (int i = 0; i < argc; i++) {
810000a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
810000ab:	eb 23                	jmp    810000d0 <main+0x32>
        print_msg("arg: %s", (int)argv[i]);
810000ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
810000b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
810000b7:	8b 45 0c             	mov    0xc(%ebp),%eax
810000ba:	01 d0                	add    %edx,%eax
810000bc:	8b 00                	mov    (%eax),%eax
810000be:	50                   	push   %eax
810000bf:	68 b9 01 00 81       	push   $0x810001b9
810000c4:	e8 ad ff ff ff       	call   81000076 <print_msg>
810000c9:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < argc; i++) {
810000cc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
810000d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
810000d3:	3b 45 08             	cmp    0x8(%ebp),%eax
810000d6:	7c d5                	jl     810000ad <main+0xf>
    }

    while (1) {
        msleep(1000);
810000d8:	68 e8 03 00 00       	push   $0x3e8
810000dd:	e8 6a ff ff ff       	call   8100004c <msleep>
810000e2:	83 c4 04             	add    $0x4,%esp
810000e5:	eb f1                	jmp    810000d8 <main+0x3a>

810000e7 <_start>:

    .text
    .global _start
    .extern cstart
_start:
	mov %ss, %ax
810000e7:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
810000ea:	8e d8                	mov    %eax,%ds
	# mov %ax, %ss
	mov %ax, %es
810000ec:	8e c0                	mov    %eax,%es
	mov %ax, %fs
810000ee:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
810000f0:	8e e8                	mov    %eax,%gs

810000f2:	e9 74 00 00 00       	jmp    8100016b <cstart>

810000f7 <syscall>:
static inline int syscall(syscall_args_t* args) {
810000f7:	55                   	push   %ebp
810000f8:	89 e5                	mov    %esp,%ebp
810000fa:	57                   	push   %edi
810000fb:	56                   	push   %esi
810000fc:	53                   	push   %ebx
810000fd:	83 ec 10             	sub    $0x10,%esp
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
81000100:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
81000107:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
8100010e:	8b 45 08             	mov    0x8(%ebp),%eax
81000111:	8b 40 10             	mov    0x10(%eax),%eax
81000114:	8b 55 08             	mov    0x8(%ebp),%edx
81000117:	8b 52 0c             	mov    0xc(%edx),%edx
8100011a:	8b 4d 08             	mov    0x8(%ebp),%ecx
8100011d:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
81000120:	8b 5d 08             	mov    0x8(%ebp),%ebx
81000123:	8b 5b 04             	mov    0x4(%ebx),%ebx
81000126:	8b 75 08             	mov    0x8(%ebp),%esi
81000129:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
8100012b:	8d 7d e8             	lea    -0x18(%ebp),%edi
8100012e:	50                   	push   %eax
8100012f:	52                   	push   %edx
81000130:	51                   	push   %ecx
81000131:	53                   	push   %ebx
81000132:	56                   	push   %esi
81000133:	ff 1f                	lcall  *(%edi)
81000135:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return ret;
81000138:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
8100013b:	83 c4 10             	add    $0x10,%esp
8100013e:	5b                   	pop    %ebx
8100013f:	5e                   	pop    %esi
81000140:	5f                   	pop    %edi
81000141:	5d                   	pop    %ebp
81000142:	c3                   	ret    

81000143 <print_msg>:
static inline void print_msg(char* fmt, int arg) {
81000143:	55                   	push   %ebp
81000144:	89 e5                	mov    %esp,%ebp
81000146:	83 ec 20             	sub    $0x20,%esp
    args.id = SYS_print_msg;
81000149:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
81000150:	8b 45 08             	mov    0x8(%ebp),%eax
81000153:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
81000156:	8b 45 0c             	mov    0xc(%ebp),%eax
81000159:	89 45 f4             	mov    %eax,-0xc(%ebp)
    syscall(&args);
8100015c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8100015f:	50                   	push   %eax
81000160:	e8 92 ff ff ff       	call   810000f7 <syscall>
81000165:	83 c4 04             	add    $0x4,%esp
}
81000168:	90                   	nop
81000169:	c9                   	leave  
8100016a:	c3                   	ret    

8100016b <cstart>:
#include "lib_syscall.h"

int main(int argc, char** argv);

void cstart(int argc, char** argv) {
8100016b:	55                   	push   %ebp
8100016c:	89 e5                	mov    %esp,%ebp
8100016e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < argc; i++) {
81000171:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
81000178:	eb 23                	jmp    8100019d <cstart+0x32>
        print_msg("arg = %s", argv[i]);
8100017a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8100017d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
81000184:	8b 45 0c             	mov    0xc(%ebp),%eax
81000187:	01 d0                	add    %edx,%eax
81000189:	8b 00                	mov    (%eax),%eax
8100018b:	50                   	push   %eax
8100018c:	68 c1 01 00 81       	push   $0x810001c1
81000191:	e8 ad ff ff ff       	call   81000143 <print_msg>
81000196:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < argc; i++) {
81000199:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8100019d:	8b 45 f4             	mov    -0xc(%ebp),%eax
810001a0:	3b 45 08             	cmp    0x8(%ebp),%eax
810001a3:	7c d5                	jl     8100017a <cstart+0xf>
    }
    main(argc, argv);
810001a5:	83 ec 08             	sub    $0x8,%esp
810001a8:	ff 75 0c             	pushl  0xc(%ebp)
810001ab:	ff 75 08             	pushl  0x8(%ebp)
810001ae:	e8 eb fe ff ff       	call   8100009e <main>
810001b3:	83 c4 10             	add    $0x10,%esp
810001b6:	90                   	nop
810001b7:	c9                   	leave  
810001b8:	c3                   	ret    
