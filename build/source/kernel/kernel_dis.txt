
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000381c memsz 0x0000381c flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006f40 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001af40 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee2  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000938  00012ee4  00012ee4  00003ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005f40  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000046  80000000  0001af40  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001cea  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004591  00000000  00000000  00007d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000121c  00000000  00000000  0000c2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011f6  00000000  00000000  0000d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000e8b6  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001304  00000000  00000000  0000e8c8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012ee4 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010368 l     F .text	0000005d addr_alloc_init
000103c5 l     F .text	00000067 addr_alloc_page
0001042c l     F .text	00000062 addr_free_page
0001048e l     F .text	00000066 show_mem_info
000104f4 l     F .text	0000003c total_mem_size
00010530 l     F .text	000000a0 test_alloc
00013018 l     O .rodata	00000012 __func__.2209
00014000 l     O .data	00000040 kernel_map.2221
0001302c l     O .rodata	0000000c __func__.2251
00000000 l    df *ABS*	00000000 task.c
00010a30 l     F .text	00000019 list_node_init
00010a49 l     F .text	0000000b list_node_next
00010a54 l     F .text	0000000b list_size
00010a5f l     F .text	0000000a list_first
00010a69 l     F .text	0000000c write_cr3
00010a75 l     F .text	00000017 write_tr
00010a8c l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000198 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010a9d l     F .text	00000158 tss_init
000130d4 l     O .rodata	0000000a __func__.2245
00010d04 l     F .text	00000005 idle_task_entry
000130e0 l     O .rodata	00000010 __func__.2271
00000000 l    df *ABS*	00000000 cpu.c
00011173 l     F .text	00000028 lgdt
0001119b l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
000113d1 l     F .text	0000001d inb
000113ee l     F .text	0000001f outb
0001140d l     F .text	00000007 cli
00011414 l     F .text	00000007 sti
0001141b l     F .text	00000028 lidt
00011443 l     F .text	00000011 read_cr2
00011454 l     F .text	00000007 hlt
0001145b l     F .text	00000010 read_eflags
0001146b l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
00011476 l     F .text	000000f0 dump_core_regs
00011566 l     F .text	0000003e do_default_handler
00011941 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011d45 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011d8c l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011e04 l     F .text	0000000b list_size
00011e0f l     F .text	0000000a list_first
00011e19 l     F .text	0000000b list_last
000137a8 l     O .rodata	0000000c __func__.2197
00018e20 l     O .bss	000000b4 first_task
000137b4 l     O .rodata	00000013 __func__.2230
00000000 l    df *ABS*	00000000 mutex.c
000120b0 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
0001224a l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000125d3 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012b30 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012d26 l     F .text	0000001d inb
00012d43 l     F .text	0000001f outb
00018ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
00011925 g     F .text	0000001c do_handler_control_protection_exception
000124cb g     F .text	0000003a bitmap_get_bit
00010f2c g     F .text	0000000a task_current
000115dc g     F .text	0000001c do_handler_debug_exception
00011909 g     F .text	0000001c do_handler_virtualization_exception
00011ce6 g     F .text	0000000b irq_enable_global
000116d8 g     F .text	0000001c do_handler_segment_not_present
00010e8a g     F .text	00000034 task_set_ready
00012621 g     F .text	00000070 kstrncpy
00012505 g     F .text	0000001b bitmap_is_set
00011e78 g     F .text	0000019c link_test
000115f8 g     F .text	0000001c do_handler_nmi_interrupt
000112ec g     F .text	00000023 cpu_init
00012d62 g     F .text	000000a2 log_init
00012055 g     F .text	0000005b init_main
00012795 g     F .text	00000041 kmemset
00011398 g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
00011bc9 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00012691 g     F .text	0000003b kstrlen
00011630 g     F .text	0000001c do_handler_overflow
00010680 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
00011710 g     F .text	000000b5 do_handler_general_protection
00012365 g     F .text	00000029 sem_count
80000012 g     F .first_task	00000028 first_task_main
0001164c g     F .text	0000001c do_handler_bound_range_exceed
000123f7 g     F .text	000000d4 bitmap_set_bit
000116a0 g     F .text	0000001c do_handler_double_fault
000117c5 g     F .text	000000d4 do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011cf1 g     F .text	0000002b pic_send_eoi
00010e80 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107d7 g     F .text	00000085 memory_create_uvm
00012278 g     F .text	0000006b sem_wait
00010a0e g     F .text	00000022 memory_alloc_page_for
00011d64 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
00012b66 g     F .text	0000005f list_insert_front
00018f40 g     O .bss	00002000 stack
0001111c g     F .text	00000057 sys_sleep
00012997 g     F .text	00000163 kvsprintf
0001af40 g       *ABS*	00000000 s_first_task
00010940 g     F .text	000000ce memory_alloc_for_page_dir
000122e3 g     F .text	00000082 sem_notify
00011668 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011dec g     F .text	00000018 timer_init
00010dbc g     F .text	000000c4 task_first_init
000118d1 g     F .text	0000001c do_handler_machine_check
00011684 g     F .text	0000001c do_handler_device_not_found
000110fc g     F .text	00000020 task_set_wakeup
00012bc5 g     F .text	00000063 list_insert_back
00011cdb g     F .text	0000000b irq_disable_global
00010f36 g     F .text	00000061 sys_sched_yield
0001af86 g       *ABS*	00000000 mem_free_start
00011e24 g     F .text	00000054 kernel_init
00012255 g     F .text	00000023 sem_init
00012973 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00010ebe g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001af40 g       .bss	00000000 e_data
00012834 g     F .text	0000013f kitoa
000125da g     F .text	00000047 kstrcpy
000126cc g     F .text	0000007a kstrncmp
000118b5 g     F .text	0000001c do_handler_aligment_check
000127d6 g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
000116bc g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001af86 g       *ABS*	00000000 e_first_task
000110cb g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
00011b94 g     F .text	00000035 irq_install
0001127f g     F .text	0000006d init_gdt
00011d1c g     F .text	00000018 irq_enter_protection
000120bb g     F .text	00000041 mutex_init
00011c54 g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
000115c0 g     F .text	0000001c do_handler_divide_error
0001238e g     F .text	00000016 bitmap_byte_count
00010f97 g     F .text	0000005b task_dispatch
00012014 g     F .text	00000041 move_to_first_task
00010ee9 g     F .text	00000043 task_next_run
00010707 g     F .text	000000d0 create_kernel_table
00012b43 g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
000115a4 g     F .text	0000001c do_handler_unknown
00010ce6 g     F .text	0000001e task_switch_from_to
000119d4 g     F .text	000001c0 irq_init
00011d34 g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
000111b5 g     F .text	00000083 segment_desc_set
0001381c g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
000123a4 g     F .text	00000053 bitmap_init
000118ed g     F .text	0000001c do_handler_simd_floating_point_exception
00012746 g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
00012520 g     F .text	000000b3 bitmap_alloc_nbits
00010d09 g     F .text	000000b3 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010ff2 g     F .text	000000d9 task_time_tick
0001085c g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
00012afa g     F .text	00000036 pannic
000116f4 g     F .text	0000001c do_handler_stack_segment_fault
00011614 g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
00011899 g     F .text	0000001c do_handler_floating_point_error
00012e04 g     F .text	000000de log_printf
00010bf5 g     F .text	000000f1 task_init
00012c28 g     F .text	00000079 list_remove_front
00011323 g     F .text	00000075 gdt_alloc_desc
0001218a g     F .text	000000c0 mutex_release
00012ca1 g     F .text	00000085 list_remove
0001130f g     F .text	00000014 swtch_to_tss
00011238 g     F .text	00000047 gate_desc_set
000120fc g     F .text	0000008e mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105d0 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 18 1e 00 00       	call   11e24 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 af 01 00       	mov    $0x1af40,%esp
    jmp init_main
   10026:	e9 2a 20 00 00       	jmp    12055 <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 68 15 00 00       	call   115a4 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 65 15 00 00       	call   115c0 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 62 15 00 00       	call   115dc <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 5f 15 00 00       	call   115f8 <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 5c 15 00 00       	call   11614 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 59 15 00 00       	call   11630 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 56 15 00 00       	call   1164c <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 53 15 00 00       	call   11668 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 50 15 00 00       	call   11684 <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 4f 15 00 00       	call   116a0 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 4e 15 00 00       	call   116bc <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 4d 15 00 00       	call   116d8 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 4a 15 00 00       	call   116f4 <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 49 15 00 00       	call   11710 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 e1 15 00 00       	call   117c5 <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 96 16 00 00       	call   11899 <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 95 16 00 00       	call   118b5 <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 92 16 00 00       	call   118d1 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 8f 16 00 00       	call   118ed <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 8c 16 00 00       	call   11909 <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 8b 16 00 00       	call   11925 <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 ab 1a 00 00       	call   11d64 <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <mmu_set_page_dir>:
 */
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}

static inline void mmu_set_page_dir(uint32_t paddr) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1035a:	ff 75 08             	pushl  0x8(%ebp)
   1035d:	e8 9e ff ff ff       	call   10300 <write_cr3>
   10362:	83 c4 04             	add    $0x4,%esp
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	83 ec 08             	sub    $0x8,%esp
   10374:	68 e4 2e 01 00       	push   $0x12ee4
   10379:	50                   	push   %eax
   1037a:	e8 3c 1d 00 00       	call   120bb <mutex_init>
   1037f:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	8b 55 10             	mov    0x10(%ebp),%edx
   10388:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	8b 55 14             	mov    0x14(%ebp),%edx
   10391:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 55 18             	mov    0x18(%ebp),%edx
   1039a:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 40 60             	mov    0x60(%eax),%eax
   103a3:	ba 00 00 00 00       	mov    $0x0,%edx
   103a8:	f7 75 18             	divl   0x18(%ebp)
   103ab:	89 c2                	mov    %eax,%edx
   103ad:	8b 45 08             	mov    0x8(%ebp),%eax
   103b0:	83 c0 54             	add    $0x54,%eax
   103b3:	6a 00                	push   $0x0
   103b5:	52                   	push   %edx
   103b6:	ff 75 0c             	pushl  0xc(%ebp)
   103b9:	50                   	push   %eax
   103ba:	e8 e5 1f 00 00       	call   123a4 <bitmap_init>
   103bf:	83 c4 10             	add    $0x10,%esp
}
   103c2:	90                   	nop
   103c3:	c9                   	leave  
   103c4:	c3                   	ret    

000103c5 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
   103c8:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	83 ec 0c             	sub    $0xc,%esp
   103d8:	50                   	push   %eax
   103d9:	e8 1e 1d 00 00       	call   120fc <mutex_acquire>
   103de:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	83 c0 54             	add    $0x54,%eax
   103e7:	83 ec 04             	sub    $0x4,%esp
   103ea:	ff 75 0c             	pushl  0xc(%ebp)
   103ed:	6a 00                	push   $0x0
   103ef:	50                   	push   %eax
   103f0:	e8 2b 21 00 00       	call   12520 <bitmap_alloc_nbits>
   103f5:	83 c4 10             	add    $0x10,%esp
   103f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103ff:	78 17                	js     10418 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	8b 50 5c             	mov    0x5c(%eax),%edx
   10407:	8b 45 08             	mov    0x8(%ebp),%eax
   1040a:	8b 48 64             	mov    0x64(%eax),%ecx
   1040d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10410:	0f af c1             	imul   %ecx,%eax
   10413:	01 d0                	add    %edx,%eax
   10415:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10418:	8b 45 08             	mov    0x8(%ebp),%eax
   1041b:	83 ec 0c             	sub    $0xc,%esp
   1041e:	50                   	push   %eax
   1041f:	e8 66 1d 00 00       	call   1218a <mutex_release>
   10424:	83 c4 10             	add    $0x10,%esp

    return addr;
   10427:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1042a:	c9                   	leave  
   1042b:	c3                   	ret    

0001042c <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   1042c:	55                   	push   %ebp
   1042d:	89 e5                	mov    %esp,%ebp
   1042f:	53                   	push   %ebx
   10430:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10433:	8b 45 08             	mov    0x8(%ebp),%eax
   10436:	83 ec 0c             	sub    $0xc,%esp
   10439:	50                   	push   %eax
   1043a:	e8 bd 1c 00 00       	call   120fc <mutex_acquire>
   1043f:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10442:	8b 45 08             	mov    0x8(%ebp),%eax
   10445:	8b 40 5c             	mov    0x5c(%eax),%eax
   10448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044b:	89 d1                	mov    %edx,%ecx
   1044d:	29 c1                	sub    %eax,%ecx
   1044f:	8b 45 08             	mov    0x8(%ebp),%eax
   10452:	8b 58 64             	mov    0x64(%eax),%ebx
   10455:	89 c8                	mov    %ecx,%eax
   10457:	ba 00 00 00 00       	mov    $0x0,%edx
   1045c:	f7 f3                	div    %ebx
   1045e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10461:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10464:	8b 55 08             	mov    0x8(%ebp),%edx
   10467:	83 c2 54             	add    $0x54,%edx
   1046a:	6a 00                	push   $0x0
   1046c:	ff 75 10             	pushl  0x10(%ebp)
   1046f:	50                   	push   %eax
   10470:	52                   	push   %edx
   10471:	e8 81 1f 00 00       	call   123f7 <bitmap_set_bit>
   10476:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	83 ec 0c             	sub    $0xc,%esp
   1047f:	50                   	push   %eax
   10480:	e8 05 1d 00 00       	call   1218a <mutex_release>
   10485:	83 c4 10             	add    $0x10,%esp
}
   10488:	90                   	nop
   10489:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1048c:	c9                   	leave  
   1048d:	c3                   	ret    

0001048e <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1048e:	55                   	push   %ebp
   1048f:	89 e5                	mov    %esp,%ebp
   10491:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10494:	83 ec 0c             	sub    $0xc,%esp
   10497:	68 f1 2e 01 00       	push   $0x12ef1
   1049c:	e8 63 29 00 00       	call   12e04 <log_printf>
   104a1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104ab:	eb 29                	jmp    104d6 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104ad:	8b 45 08             	mov    0x8(%ebp),%eax
   104b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104b3:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104bd:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c0:	52                   	push   %edx
   104c1:	50                   	push   %eax
   104c2:	ff 75 f4             	pushl  -0xc(%ebp)
   104c5:	68 fd 2e 01 00       	push   $0x12efd
   104ca:	e8 35 29 00 00       	call   12e04 <log_printf>
   104cf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d6:	8b 45 08             	mov    0x8(%ebp),%eax
   104d9:	8b 40 50             	mov    0x50(%eax),%eax
   104dc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104df:	7c cc                	jl     104ad <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	68 0b 2f 01 00       	push   $0x12f0b
   104e9:	e8 16 29 00 00       	call   12e04 <log_printf>
   104ee:	83 c4 10             	add    $0x10,%esp
}
   104f1:	90                   	nop
   104f2:	c9                   	leave  
   104f3:	c3                   	ret    

000104f4 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   104f4:	55                   	push   %ebp
   104f5:	89 e5                	mov    %esp,%ebp
   104f7:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10501:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10508:	eb 16                	jmp    10520 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10510:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10514:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10517:	01 d0                	add    %edx,%eax
   10519:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1051c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 40 50             	mov    0x50(%eax),%eax
   10526:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10529:	7c df                	jl     1050a <total_mem_size+0x16>
    }
    return mem_size;
   1052b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1052e:	c9                   	leave  
   1052f:	c3                   	ret    

00010530 <test_alloc>:


static void test_alloc(void) {
   10530:	55                   	push   %ebp
   10531:	89 e5                	mov    %esp,%ebp
   10533:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10539:	83 ec 0c             	sub    $0xc,%esp
   1053c:	68 00 10 00 00       	push   $0x1000
   10541:	68 00 00 04 00       	push   $0x40000
   10546:	68 00 10 00 00       	push   $0x1000
   1054b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10551:	50                   	push   %eax
   10552:	8d 45 80             	lea    -0x80(%ebp),%eax
   10555:	50                   	push   %eax
   10556:	e8 0d fe ff ff       	call   10368 <addr_alloc_init>
   1055b:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   1055e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10565:	eb 2b                	jmp    10592 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   10567:	83 ec 08             	sub    $0x8,%esp
   1056a:	6a 02                	push   $0x2
   1056c:	8d 45 80             	lea    -0x80(%ebp),%eax
   1056f:	50                   	push   %eax
   10570:	e8 50 fe ff ff       	call   103c5 <addr_alloc_page>
   10575:	83 c4 10             	add    $0x10,%esp
   10578:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   1057b:	83 ec 08             	sub    $0x8,%esp
   1057e:	ff 75 e8             	pushl  -0x18(%ebp)
   10581:	68 0d 2f 01 00       	push   $0x12f0d
   10586:	e8 79 28 00 00       	call   12e04 <log_printf>
   1058b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   1058e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10592:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10596:	7e cf                	jle    10567 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   10598:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   1059f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105a6:	eb 1f                	jmp    105c7 <test_alloc+0x97>
        addr += 4096 * 2;
   105a8:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105af:	83 ec 04             	sub    $0x4,%esp
   105b2:	6a 02                	push   $0x2
   105b4:	ff 75 f0             	pushl  -0x10(%ebp)
   105b7:	8d 45 80             	lea    -0x80(%ebp),%eax
   105ba:	50                   	push   %eax
   105bb:	e8 6c fe ff ff       	call   1042c <addr_free_page>
   105c0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105c3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105c7:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105cb:	7e db                	jle    105a8 <test_alloc+0x78>
    }
}
   105cd:	90                   	nop
   105ce:	c9                   	leave  
   105cf:	c3                   	ret    

000105d0 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105d0:	55                   	push   %ebp
   105d1:	89 e5                	mov    %esp,%ebp
   105d3:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105d6:	ff 75 0c             	pushl  0xc(%ebp)
   105d9:	e8 2e fd ff ff       	call   1030c <pde_index>
   105de:	83 c4 04             	add    $0x4,%esp
   105e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	01 d0                	add    %edx,%eax
   105ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   105f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f3:	0f b6 00             	movzbl (%eax),%eax
   105f6:	83 e0 01             	and    $0x1,%eax
   105f9:	84 c0                	test   %al,%al
   105fb:	74 10                	je     1060d <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   105fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10600:	e8 1b fd ff ff       	call   10320 <pde_paddr>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1060b:	eb 57                	jmp    10664 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1060d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10611:	75 07                	jne    1061a <find_pte+0x4a>
            return (pte_t*)0;
   10613:	b8 00 00 00 00       	mov    $0x0,%eax
   10618:	eb 64                	jmp    1067e <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1061a:	83 ec 08             	sub    $0x8,%esp
   1061d:	6a 01                	push   $0x1
   1061f:	68 00 50 01 00       	push   $0x15000
   10624:	e8 9c fd ff ff       	call   103c5 <addr_alloc_page>
   10629:	83 c4 10             	add    $0x10,%esp
   1062c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1062f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10633:	75 07                	jne    1063c <find_pte+0x6c>
            return (pte_t*)0;
   10635:	b8 00 00 00 00       	mov    $0x0,%eax
   1063a:	eb 42                	jmp    1067e <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   1063c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1063f:	83 c8 07             	or     $0x7,%eax
   10642:	89 c2                	mov    %eax,%edx
   10644:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10647:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10649:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1064c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1064f:	83 ec 04             	sub    $0x4,%esp
   10652:	68 00 10 00 00       	push   $0x1000
   10657:	6a 00                	push   $0x0
   10659:	ff 75 f4             	pushl  -0xc(%ebp)
   1065c:	e8 34 21 00 00       	call   12795 <kmemset>
   10661:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   10664:	83 ec 0c             	sub    $0xc,%esp
   10667:	ff 75 0c             	pushl  0xc(%ebp)
   1066a:	e8 d8 fc ff ff       	call   10347 <pte_index>
   1066f:	83 c4 10             	add    $0x10,%esp
   10672:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067c:	01 d0                	add    %edx,%eax
}
   1067e:	c9                   	leave  
   1067f:	c3                   	ret    

00010680 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   10680:	55                   	push   %ebp
   10681:	89 e5                	mov    %esp,%ebp
   10683:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068d:	eb 6e                	jmp    106fd <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   1068f:	83 ec 04             	sub    $0x4,%esp
   10692:	6a 01                	push   $0x1
   10694:	ff 75 0c             	pushl  0xc(%ebp)
   10697:	ff 75 08             	pushl  0x8(%ebp)
   1069a:	e8 31 ff ff ff       	call   105d0 <find_pte>
   1069f:	83 c4 10             	add    $0x10,%esp
   106a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106a9:	75 07                	jne    106b2 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106b0:	eb 53                	jmp    10705 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	0f b6 00             	movzbl (%eax),%eax
   106b8:	83 e0 01             	and    $0x1,%eax
   106bb:	84 c0                	test   %al,%al
   106bd:	74 1c                	je     106db <memory_create_map+0x5b>
   106bf:	68 1d 2f 01 00       	push   $0x12f1d
   106c4:	68 18 30 01 00       	push   $0x13018
   106c9:	68 a2 00 00 00       	push   $0xa2
   106ce:	68 30 2f 01 00       	push   $0x12f30
   106d3:	e8 22 24 00 00       	call   12afa <pannic>
   106d8:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   106db:	8b 45 10             	mov    0x10(%ebp),%eax
   106de:	0b 45 18             	or     0x18(%ebp),%eax
   106e1:	83 c8 01             	or     $0x1,%eax
   106e4:	89 c2                	mov    %eax,%edx
   106e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e9:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   106eb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106f2:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10700:	3b 45 14             	cmp    0x14(%ebp),%eax
   10703:	7c 8a                	jl     1068f <memory_create_map+0xf>
    }
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <create_kernel_table>:


void create_kernel_table(void) {
   10707:	55                   	push   %ebp
   10708:	89 e5                	mov    %esp,%ebp
   1070a:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1070d:	83 ec 04             	sub    $0x4,%esp
   10710:	68 00 10 00 00       	push   $0x1000
   10715:	6a 00                	push   $0x0
   10717:	68 00 60 01 00       	push   $0x16000
   1071c:	e8 74 20 00 00       	call   12795 <kmemset>
   10721:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1072b:	e9 98 00 00 00       	jmp    107c8 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10730:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10733:	c1 e0 04             	shl    $0x4,%eax
   10736:	05 00 40 01 00       	add    $0x14000,%eax
   1073b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1073e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10741:	8b 00                	mov    (%eax),%eax
   10743:	83 ec 08             	sub    $0x8,%esp
   10746:	68 00 10 00 00       	push   $0x1000
   1074b:	50                   	push   %eax
   1074c:	e8 a2 fb ff ff       	call   102f3 <down2>
   10751:	83 c4 10             	add    $0x10,%esp
   10754:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10757:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1075a:	8b 40 04             	mov    0x4(%eax),%eax
   1075d:	83 ec 08             	sub    $0x8,%esp
   10760:	68 00 10 00 00       	push   $0x1000
   10765:	50                   	push   %eax
   10766:	e8 71 fb ff ff       	call   102dc <up2>
   1076b:	83 c4 10             	add    $0x10,%esp
   1076e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10771:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10774:	8b 40 08             	mov    0x8(%eax),%eax
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	68 00 10 00 00       	push   $0x1000
   1077f:	50                   	push   %eax
   10780:	e8 6e fb ff ff       	call   102f3 <down2>
   10785:	83 c4 10             	add    $0x10,%esp
   10788:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   1078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1078e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10791:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   10797:	85 c0                	test   %eax,%eax
   10799:	0f 48 c2             	cmovs  %edx,%eax
   1079c:	c1 f8 0c             	sar    $0xc,%eax
   1079f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a5:	8b 48 0c             	mov    0xc(%eax),%ecx
   107a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ae:	83 ec 0c             	sub    $0xc,%esp
   107b1:	51                   	push   %ecx
   107b2:	ff 75 e0             	pushl  -0x20(%ebp)
   107b5:	52                   	push   %edx
   107b6:	50                   	push   %eax
   107b7:	68 00 60 01 00       	push   $0x16000
   107bc:	e8 bf fe ff ff       	call   10680 <memory_create_map>
   107c1:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107cb:	83 f8 03             	cmp    $0x3,%eax
   107ce:	0f 86 5c ff ff ff    	jbe    10730 <create_kernel_table+0x29>
    }
}
   107d4:	90                   	nop
   107d5:	c9                   	leave  
   107d6:	c3                   	ret    

000107d7 <memory_create_uvm>:

// 创建用户页表
uint32_t memory_create_uvm(void) {
   107d7:	55                   	push   %ebp
   107d8:	89 e5                	mov    %esp,%ebp
   107da:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	6a 01                	push   $0x1
   107e2:	68 00 50 01 00       	push   $0x15000
   107e7:	e8 d9 fb ff ff       	call   103c5 <addr_alloc_page>
   107ec:	83 c4 10             	add    $0x10,%esp
   107ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107f6:	75 07                	jne    107ff <memory_create_uvm+0x28>
        return 0;
   107f8:	b8 00 00 00 00       	mov    $0x0,%eax
   107fd:	eb 5b                	jmp    1085a <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   107ff:	83 ec 04             	sub    $0x4,%esp
   10802:	68 00 10 00 00       	push   $0x1000
   10807:	6a 00                	push   $0x0
   10809:	ff 75 f0             	pushl  -0x10(%ebp)
   1080c:	e8 84 1f 00 00       	call   12795 <kmemset>
   10811:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10814:	83 ec 0c             	sub    $0xc,%esp
   10817:	68 00 00 00 80       	push   $0x80000000
   1081c:	e8 eb fa ff ff       	call   1030c <pde_index>
   10821:	83 c4 10             	add    $0x10,%esp
   10824:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10827:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1082e:	eb 1f                	jmp    1084f <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10830:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10833:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1083a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083d:	01 c2                	add    %eax,%edx
   1083f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10842:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10849:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   1084b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1084f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10852:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10855:	77 d9                	ja     10830 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10857:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1085a:	c9                   	leave  
   1085b:	c3                   	ret    

0001085c <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   1085c:	55                   	push   %ebp
   1085d:	89 e5                	mov    %esp,%ebp
   1085f:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10862:	83 ec 0c             	sub    $0xc,%esp
   10865:	68 77 2f 01 00       	push   $0x12f77
   1086a:	e8 95 25 00 00       	call   12e04 <log_printf>
   1086f:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10872:	83 ec 0c             	sub    $0xc,%esp
   10875:	ff 75 08             	pushl  0x8(%ebp)
   10878:	e8 11 fc ff ff       	call   1048e <show_mem_info>
   1087d:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   10880:	c7 45 f4 86 af 01 00 	movl   $0x1af86,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10887:	83 ec 0c             	sub    $0xc,%esp
   1088a:	ff 75 08             	pushl  0x8(%ebp)
   1088d:	e8 62 fc ff ff       	call   104f4 <total_mem_size>
   10892:	83 c4 10             	add    $0x10,%esp
   10895:	2d 00 00 10 00       	sub    $0x100000,%eax
   1089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   1089d:	83 ec 08             	sub    $0x8,%esp
   108a0:	68 00 10 00 00       	push   $0x1000
   108a5:	ff 75 f0             	pushl  -0x10(%ebp)
   108a8:	e8 46 fa ff ff       	call   102f3 <down2>
   108ad:	83 c4 10             	add    $0x10,%esp
   108b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108b3:	83 ec 04             	sub    $0x4,%esp
   108b6:	ff 75 f0             	pushl  -0x10(%ebp)
   108b9:	68 00 00 10 00       	push   $0x100000
   108be:	68 81 2f 01 00       	push   $0x12f81
   108c3:	e8 3c 25 00 00       	call   12e04 <log_printf>
   108c8:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108cb:	83 ec 0c             	sub    $0xc,%esp
   108ce:	68 00 10 00 00       	push   $0x1000
   108d3:	ff 75 f0             	pushl  -0x10(%ebp)
   108d6:	68 00 00 10 00       	push   $0x100000
   108db:	ff 75 f4             	pushl  -0xc(%ebp)
   108de:	68 00 50 01 00       	push   $0x15000
   108e3:	e8 80 fa ff ff       	call   10368 <addr_alloc_init>
   108e8:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   108eb:	a1 60 50 01 00       	mov    0x15060,%eax
   108f0:	c1 e8 0c             	shr    $0xc,%eax
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	50                   	push   %eax
   108f7:	e8 92 1a 00 00       	call   1238e <bitmap_byte_count>
   108fc:	83 c4 10             	add    $0x10,%esp
   108ff:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10902:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10909:	76 1c                	jbe    10927 <memory_init+0xcb>
   1090b:	68 9c 2f 01 00       	push   $0x12f9c
   10910:	68 2c 30 01 00       	push   $0x1302c
   10915:	68 fa 00 00 00       	push   $0xfa
   1091a:	68 30 2f 01 00       	push   $0x12f30
   1091f:	e8 d6 21 00 00       	call   12afa <pannic>
   10924:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10927:	e8 db fd ff ff       	call   10707 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1092c:	b8 00 60 01 00       	mov    $0x16000,%eax
   10931:	83 ec 0c             	sub    $0xc,%esp
   10934:	50                   	push   %eax
   10935:	e8 1d fa ff ff       	call   10357 <mmu_set_page_dir>
   1093a:	83 c4 10             	add    $0x10,%esp
}
   1093d:	90                   	nop
   1093e:	c9                   	leave  
   1093f:	c3                   	ret    

00010940 <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10940:	55                   	push   %ebp
   10941:	89 e5                	mov    %esp,%ebp
   10943:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10946:	8b 45 0c             	mov    0xc(%ebp),%eax
   10949:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   1094c:	68 00 10 00 00       	push   $0x1000
   10951:	ff 75 10             	pushl  0x10(%ebp)
   10954:	e8 83 f9 ff ff       	call   102dc <up2>
   10959:	83 c4 08             	add    $0x8,%esp
   1095c:	c1 e8 0c             	shr    $0xc,%eax
   1095f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   10962:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10969:	e9 8d 00 00 00       	jmp    109fb <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   1096e:	83 ec 08             	sub    $0x8,%esp
   10971:	6a 01                	push   $0x1
   10973:	68 00 50 01 00       	push   $0x15000
   10978:	e8 48 fa ff ff       	call   103c5 <addr_alloc_page>
   1097d:	83 c4 10             	add    $0x10,%esp
   10980:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10983:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10987:	75 17                	jne    109a0 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   10989:	83 ec 0c             	sub    $0xc,%esp
   1098c:	68 c4 2f 01 00       	push   $0x12fc4
   10991:	e8 6e 24 00 00       	call   12e04 <log_printf>
   10996:	83 c4 10             	add    $0x10,%esp
            return 0;
   10999:	b8 00 00 00 00       	mov    $0x0,%eax
   1099e:	eb 6c                	jmp    10a0c <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	83 ec 0c             	sub    $0xc,%esp
   109a6:	ff 75 14             	pushl  0x14(%ebp)
   109a9:	6a 01                	push   $0x1
   109ab:	ff 75 e8             	pushl  -0x18(%ebp)
   109ae:	ff 75 f4             	pushl  -0xc(%ebp)
   109b1:	50                   	push   %eax
   109b2:	e8 c9 fc ff ff       	call   10680 <memory_create_map>
   109b7:	83 c4 20             	add    $0x20,%esp
   109ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   109bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   109c1:	79 2d                	jns    109f0 <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   109c3:	83 ec 0c             	sub    $0xc,%esp
   109c6:	68 e4 2f 01 00       	push   $0x12fe4
   109cb:	e8 34 24 00 00       	call   12e04 <log_printf>
   109d0:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   109d3:	83 ec 04             	sub    $0x4,%esp
   109d6:	ff 75 f0             	pushl  -0x10(%ebp)
   109d9:	ff 75 0c             	pushl  0xc(%ebp)
   109dc:	68 00 50 01 00       	push   $0x15000
   109e1:	e8 46 fa ff ff       	call   1042c <addr_free_page>
   109e6:	83 c4 10             	add    $0x10,%esp

            return 0;
   109e9:	b8 00 00 00 00       	mov    $0x0,%eax
   109ee:	eb 1c                	jmp    10a0c <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   109f0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   109f7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   109fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a01:	0f 8c 67 ff ff ff    	jl     1096e <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a07:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a0c:	c9                   	leave  
   10a0d:	c3                   	ret    

00010a0e <memory_alloc_page_for>:
// 给当前进程的页表，建立映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t addr, uint32_t size, uint32_t perm) {
   10a0e:	55                   	push   %ebp
   10a0f:	89 e5                	mov    %esp,%ebp
   10a11:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10a14:	e8 13 05 00 00       	call   10f2c <task_current>
   10a19:	8b 40 64             	mov    0x64(%eax),%eax
   10a1c:	ff 75 10             	pushl  0x10(%ebp)
   10a1f:	ff 75 0c             	pushl  0xc(%ebp)
   10a22:	ff 75 08             	pushl  0x8(%ebp)
   10a25:	50                   	push   %eax
   10a26:	e8 15 ff ff ff       	call   10940 <memory_alloc_for_page_dir>
   10a2b:	83 c4 10             	add    $0x10,%esp
   10a2e:	c9                   	leave  
   10a2f:	c3                   	ret    

00010a30 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10a30:	55                   	push   %ebp
   10a31:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10a33:	8b 45 08             	mov    0x8(%ebp),%eax
   10a36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10a46:	90                   	nop
   10a47:	5d                   	pop    %ebp
   10a48:	c3                   	ret    

00010a49 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10a49:	55                   	push   %ebp
   10a4a:	89 e5                	mov    %esp,%ebp
    return node->next;
   10a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4f:	8b 40 04             	mov    0x4(%eax),%eax
}
   10a52:	5d                   	pop    %ebp
   10a53:	c3                   	ret    

00010a54 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10a54:	55                   	push   %ebp
   10a55:	89 e5                	mov    %esp,%ebp
    return list->count;
   10a57:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5a:	8b 40 08             	mov    0x8(%eax),%eax
}
   10a5d:	5d                   	pop    %ebp
   10a5e:	c3                   	ret    

00010a5f <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10a5f:	55                   	push   %ebp
   10a60:	89 e5                	mov    %esp,%ebp
    return list->first;
   10a62:	8b 45 08             	mov    0x8(%ebp),%eax
   10a65:	8b 00                	mov    (%eax),%eax
}
   10a67:	5d                   	pop    %ebp
   10a68:	c3                   	ret    

00010a69 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10a69:	55                   	push   %ebp
   10a6a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6f:	0f 22 d8             	mov    %eax,%cr3
}
   10a72:	90                   	nop
   10a73:	5d                   	pop    %ebp
   10a74:	c3                   	ret    

00010a75 <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10a75:	55                   	push   %ebp
   10a76:	89 e5                	mov    %esp,%ebp
   10a78:	83 ec 04             	sub    $0x4,%esp
   10a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10a82:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10a86:	0f 00 d8             	ltr    %ax
}
   10a89:	90                   	nop
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10a8f:	ff 75 08             	pushl  0x8(%ebp)
   10a92:	e8 d2 ff ff ff       	call   10a69 <write_cr3>
   10a97:	83 c4 04             	add    $0x4,%esp
}
   10a9a:	90                   	nop
   10a9b:	c9                   	leave  
   10a9c:	c3                   	ret    

00010a9d <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   10a9d:	55                   	push   %ebp
   10a9e:	89 e5                	mov    %esp,%ebp
   10aa0:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   10aa3:	e8 7b 08 00 00       	call   11323 <gdt_alloc_desc>
   10aa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10aab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10aaf:	79 1a                	jns    10acb <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10ab1:	83 ec 0c             	sub    $0xc,%esp
   10ab4:	68 38 30 01 00       	push   $0x13038
   10ab9:	e8 46 23 00 00       	call   12e04 <log_printf>
   10abe:	83 c4 10             	add    $0x10,%esp
        return -1;
   10ac1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ac6:	e9 28 01 00 00       	jmp    10bf3 <tss_init+0x156>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10acb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ace:	83 c0 48             	add    $0x48,%eax
   10ad1:	68 89 00 00 00       	push   $0x89
   10ad6:	6a 68                	push   $0x68
   10ad8:	50                   	push   %eax
   10ad9:	ff 75 ec             	pushl  -0x14(%ebp)
   10adc:	e8 d4 06 00 00       	call   111b5 <segment_desc_set>
   10ae1:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae7:	83 c0 48             	add    $0x48,%eax
   10aea:	83 ec 04             	sub    $0x4,%esp
   10aed:	6a 68                	push   $0x68
   10aef:	6a 00                	push   $0x0
   10af1:	50                   	push   %eax
   10af2:	e8 9e 1c 00 00       	call   12795 <kmemset>
   10af7:	83 c4 10             	add    $0x10,%esp

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10afa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10afd:	83 e0 01             	and    $0x1,%eax
   10b00:	85 c0                	test   %eax,%eax
   10b02:	74 10                	je     10b14 <tss_init+0x77>
        code_sel = KERNEL_SELECTOR_CS;
   10b04:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10b0b:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10b12:	eb 16                	jmp    10b2a <tss_init+0x8d>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10b14:	a1 90 71 01 00       	mov    0x17190,%eax
   10b19:	83 c8 03             	or     $0x3,%eax
   10b1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10b1f:	a1 94 71 01 00       	mov    0x17194,%eax
   10b24:	83 c8 03             	or     $0x3,%eax
   10b27:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   10b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2d:	8b 55 10             	mov    0x10(%ebp),%edx
   10b30:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10b33:	8b 45 08             	mov    0x8(%ebp),%eax
   10b36:	8b 55 14             	mov    0x14(%ebp),%edx
   10b39:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   10b3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b42:	8b 55 14             	mov    0x14(%ebp),%edx
   10b45:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = data_sel;
   10b48:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b4b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   10b54:	8b 45 08             	mov    0x8(%ebp),%eax
   10b57:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b61:	8b 45 08             	mov    0x8(%ebp),%eax
   10b64:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10b6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6d:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10b73:	8b 45 08             	mov    0x8(%ebp),%eax
   10b76:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10b7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7f:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10b85:	8b 45 08             	mov    0x8(%ebp),%eax
   10b88:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10b8e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b91:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10b97:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9a:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = code_sel;
   10ba0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba6:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10bac:	8b 45 08             	mov    0x8(%ebp),%eax
   10baf:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10bb6:	e8 1c fc ff ff       	call   107d7 <memory_create_uvm>
   10bbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (uvm_pgtbl == 0) {
   10bbe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bc2:	75 15                	jne    10bd9 <tss_init+0x13c>
        gdt_free_sel(tss_sel);
   10bc4:	83 ec 0c             	sub    $0xc,%esp
   10bc7:	ff 75 ec             	pushl  -0x14(%ebp)
   10bca:	e8 c9 07 00 00       	call   11398 <gdt_free_sel>
   10bcf:	83 c4 10             	add    $0x10,%esp
        return -1;
   10bd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bd7:	eb 1a                	jmp    10bf3 <tss_init+0x156>
    }
    task->tss.cr3    = uvm_pgtbl;
   10bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdc:	8b 55 e8             	mov    -0x18(%ebp),%edx
   10bdf:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10be2:	8b 45 08             	mov    0x8(%ebp),%eax
   10be5:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10be8:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10bee:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bf3:	c9                   	leave  
   10bf4:	c3                   	ret    

00010bf5 <task_init>:


int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   10bf5:	55                   	push   %ebp
   10bf6:	89 e5                	mov    %esp,%ebp
   10bf8:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10bfb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10bff:	75 19                	jne    10c1a <task_init+0x25>
   10c01:	68 4a 30 01 00       	push   $0x1304a
   10c06:	68 d4 30 01 00       	push   $0x130d4
   10c0b:	6a 3e                	push   $0x3e
   10c0d:	68 60 30 01 00       	push   $0x13060
   10c12:	e8 e3 1e 00 00       	call   12afa <pannic>
   10c17:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   10c1a:	ff 75 18             	pushl  0x18(%ebp)
   10c1d:	ff 75 14             	pushl  0x14(%ebp)
   10c20:	ff 75 10             	pushl  0x10(%ebp)
   10c23:	ff 75 08             	pushl  0x8(%ebp)
   10c26:	e8 72 fe ff ff       	call   10a9d <tss_init>
   10c2b:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c31:	83 c0 04             	add    $0x4,%eax
   10c34:	83 ec 04             	sub    $0x4,%esp
   10c37:	6a 20                	push   $0x20
   10c39:	ff 75 0c             	pushl  0xc(%ebp)
   10c3c:	50                   	push   %eax
   10c3d:	e8 df 19 00 00       	call   12621 <kstrncpy>
   10c42:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10c45:	8b 45 08             	mov    0x8(%ebp),%eax
   10c48:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10c4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c51:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10c58:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5b:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10c62:	8b 45 08             	mov    0x8(%ebp),%eax
   10c65:	8b 50 40             	mov    0x40(%eax),%edx
   10c68:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6b:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10c6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c71:	83 c0 2c             	add    $0x2c,%eax
   10c74:	83 ec 0c             	sub    $0xc,%esp
   10c77:	50                   	push   %eax
   10c78:	e8 b3 fd ff ff       	call   10a30 <list_node_init>
   10c7d:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10c80:	8b 45 08             	mov    0x8(%ebp),%eax
   10c83:	83 c0 24             	add    $0x24,%eax
   10c86:	83 ec 0c             	sub    $0xc,%esp
   10c89:	50                   	push   %eax
   10c8a:	e8 a1 fd ff ff       	call   10a30 <list_node_init>
   10c8f:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10c92:	8b 45 08             	mov    0x8(%ebp),%eax
   10c95:	83 c0 34             	add    $0x34,%eax
   10c98:	83 ec 0c             	sub    $0xc,%esp
   10c9b:	50                   	push   %eax
   10c9c:	e8 8f fd ff ff       	call   10a30 <list_node_init>
   10ca1:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10ca4:	e8 73 10 00 00       	call   11d1c <irq_enter_protection>
   10ca9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10cac:	83 ec 0c             	sub    $0xc,%esp
   10caf:	ff 75 08             	pushl  0x8(%ebp)
   10cb2:	e8 d3 01 00 00       	call   10e8a <task_set_ready>
   10cb7:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10cba:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbd:	83 c0 2c             	add    $0x2c,%eax
   10cc0:	83 ec 08             	sub    $0x8,%esp
   10cc3:	50                   	push   %eax
   10cc4:	68 10 70 01 00       	push   $0x17010
   10cc9:	e8 f7 1e 00 00       	call   12bc5 <list_insert_back>
   10cce:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10cd1:	83 ec 0c             	sub    $0xc,%esp
   10cd4:	ff 75 f4             	pushl  -0xc(%ebp)
   10cd7:	e8 58 10 00 00       	call   11d34 <irq_leave_protection>
   10cdc:	83 c4 10             	add    $0x10,%esp

    return 0;
   10cdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ce4:	c9                   	leave  
   10ce5:	c3                   	ret    

00010ce6 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10ce6:	55                   	push   %ebp
   10ce7:	89 e5                	mov    %esp,%ebp
   10ce9:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10cec:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cef:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10cf5:	83 ec 0c             	sub    $0xc,%esp
   10cf8:	50                   	push   %eax
   10cf9:	e8 11 06 00 00       	call   1130f <swtch_to_tss>
   10cfe:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10d01:	90                   	nop
   10d02:	c9                   	leave  
   10d03:	c3                   	ret    

00010d04 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10d04:	55                   	push   %ebp
   10d05:	89 e5                	mov    %esp,%ebp
    while (1) {
   10d07:	eb fe                	jmp    10d07 <idle_task_entry+0x3>

00010d09 <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10d09:	55                   	push   %ebp
   10d0a:	89 e5                	mov    %esp,%ebp
   10d0c:	83 ec 18             	sub    $0x18,%esp
    // 初始化用户程序的 code selector
    int sel = gdt_alloc_desc();
   10d0f:	e8 0f 06 00 00       	call   11323 <gdt_alloc_desc>
   10d14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xffffffff, SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10d17:	68 fa 40 00 00       	push   $0x40fa
   10d1c:	6a ff                	push   $0xffffffff
   10d1e:	6a 00                	push   $0x0
   10d20:	ff 75 f4             	pushl  -0xc(%ebp)
   10d23:	e8 8d 04 00 00       	call   111b5 <segment_desc_set>
   10d28:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_sel = sel;
   10d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d2e:	a3 90 71 01 00       	mov    %eax,0x17190

    // 初始化用户程序的 data selector
    sel = gdt_alloc_desc();
   10d33:	e8 eb 05 00 00       	call   11323 <gdt_alloc_desc>
   10d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xffffffff, SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10d3b:	68 f2 40 00 00       	push   $0x40f2
   10d40:	6a ff                	push   $0xffffffff
   10d42:	6a 00                	push   $0x0
   10d44:	ff 75 f4             	pushl  -0xc(%ebp)
   10d47:	e8 69 04 00 00       	call   111b5 <segment_desc_set>
   10d4c:	83 c4 10             	add    $0x10,%esp
    task_manager.app_data_sel = sel;
   10d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d52:	a3 94 71 01 00       	mov    %eax,0x17194

    list_init(&task_manager.ready_list);
   10d57:	83 ec 0c             	sub    $0xc,%esp
   10d5a:	68 04 70 01 00       	push   $0x17004
   10d5f:	e8 df 1d 00 00       	call   12b43 <list_init>
   10d64:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10d67:	83 ec 0c             	sub    $0xc,%esp
   10d6a:	68 10 70 01 00       	push   $0x17010
   10d6f:	e8 cf 1d 00 00       	call   12b43 <list_init>
   10d74:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10d77:	83 ec 0c             	sub    $0xc,%esp
   10d7a:	68 1c 70 01 00       	push   $0x1701c
   10d7f:	e8 bf 1d 00 00       	call   12b43 <list_init>
   10d84:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10d87:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10d8e:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   10d91:	b8 a0 71 01 00       	mov    $0x171a0,%eax
    task_init(&task_manager.idle_task, 
   10d96:	05 00 04 00 00       	add    $0x400,%eax
   10d9b:	ba 04 0d 01 00       	mov    $0x10d04,%edx
   10da0:	83 ec 0c             	sub    $0xc,%esp
   10da3:	50                   	push   %eax
   10da4:	52                   	push   %edx
   10da5:	6a 01                	push   $0x1
   10da7:	68 a5 30 01 00       	push   $0x130a5
   10dac:	68 dc 70 01 00       	push   $0x170dc
   10db1:	e8 3f fe ff ff       	call   10bf5 <task_init>
   10db6:	83 c4 20             	add    $0x20,%esp
    );
}
   10db9:	90                   	nop
   10dba:	c9                   	leave  
   10dbb:	c3                   	ret    

00010dbc <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10dbc:	55                   	push   %ebp
   10dbd:	89 e5                	mov    %esp,%ebp
   10dbf:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10dc2:	ba 86 af 01 00       	mov    $0x1af86,%edx
   10dc7:	b8 40 af 01 00       	mov    $0x1af40,%eax
   10dcc:	29 c2                	sub    %eax,%edx
   10dce:	89 d0                	mov    %edx,%eax
   10dd0:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10dd3:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10dda:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   10dde:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10de1:	77 1c                	ja     10dff <task_first_init+0x43>
   10de3:	68 af 30 01 00       	push   $0x130af
   10de8:	68 e0 30 01 00       	push   $0x130e0
   10ded:	68 8b 00 00 00       	push   $0x8b
   10df2:	68 60 30 01 00       	push   $0x13060
   10df7:	e8 fe 1c 00 00       	call   12afa <pannic>
   10dfc:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10dff:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    task_init(&task_manager.first_task, "first task", 0, (uint32_t)first_start, 0);
   10e06:	83 ec 0c             	sub    $0xc,%esp
   10e09:	6a 00                	push   $0x0
   10e0b:	ff 75 ec             	pushl  -0x14(%ebp)
   10e0e:	6a 00                	push   $0x0
   10e10:	68 c6 30 01 00       	push   $0x130c6
   10e15:	68 28 70 01 00       	push   $0x17028
   10e1a:	e8 d6 fd ff ff       	call   10bf5 <task_init>
   10e1f:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10e22:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10e27:	0f b7 c0             	movzwl %ax,%eax
   10e2a:	83 ec 0c             	sub    $0xc,%esp
   10e2d:	50                   	push   %eax
   10e2e:	e8 42 fc ff ff       	call   10a75 <write_tr>
   10e33:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10e36:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10e3d:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10e40:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10e45:	83 ec 0c             	sub    $0xc,%esp
   10e48:	50                   	push   %eax
   10e49:	e8 3e fc ff ff       	call   10a8c <mmu_set_page_dir>
   10e4e:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W);
   10e51:	83 ec 04             	sub    $0x4,%esp
   10e54:	6a 03                	push   $0x3
   10e56:	ff 75 f0             	pushl  -0x10(%ebp)
   10e59:	ff 75 ec             	pushl  -0x14(%ebp)
   10e5c:	e8 ad fb ff ff       	call   10a0e <memory_alloc_page_for>
   10e61:	83 c4 10             	add    $0x10,%esp

    kmemcpy((void*)first_start, s_first_task, copy_size);
   10e64:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   10e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e6b:	83 ec 04             	sub    $0x4,%esp
   10e6e:	52                   	push   %edx
   10e6f:	68 40 af 01 00       	push   $0x1af40
   10e74:	50                   	push   %eax
   10e75:	e8 cc 18 00 00       	call   12746 <kmemcpy>
   10e7a:	83 c4 10             	add    $0x10,%esp
}
   10e7d:	90                   	nop
   10e7e:	c9                   	leave  
   10e7f:	c3                   	ret    

00010e80 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10e80:	55                   	push   %ebp
   10e81:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10e83:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10e88:	5d                   	pop    %ebp
   10e89:	c3                   	ret    

00010e8a <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10e8a:	55                   	push   %ebp
   10e8b:	89 e5                	mov    %esp,%ebp
   10e8d:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10e90:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10e97:	74 22                	je     10ebb <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10e99:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9c:	83 c0 24             	add    $0x24,%eax
   10e9f:	83 ec 08             	sub    $0x8,%esp
   10ea2:	50                   	push   %eax
   10ea3:	68 04 70 01 00       	push   $0x17004
   10ea8:	e8 18 1d 00 00       	call   12bc5 <list_insert_back>
   10ead:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10eb0:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb3:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10eb9:	eb 01                	jmp    10ebc <task_set_ready+0x32>
        return;
   10ebb:	90                   	nop
}
   10ebc:	c9                   	leave  
   10ebd:	c3                   	ret    

00010ebe <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   10ebe:	55                   	push   %ebp
   10ebf:	89 e5                	mov    %esp,%ebp
   10ec1:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10ec4:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10ecb:	74 19                	je     10ee6 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10ecd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed0:	83 c0 24             	add    $0x24,%eax
   10ed3:	83 ec 08             	sub    $0x8,%esp
   10ed6:	50                   	push   %eax
   10ed7:	68 04 70 01 00       	push   $0x17004
   10edc:	e8 c0 1d 00 00       	call   12ca1 <list_remove>
   10ee1:	83 c4 10             	add    $0x10,%esp
   10ee4:	eb 01                	jmp    10ee7 <task_set_blocked+0x29>
        return;
   10ee6:	90                   	nop
}
   10ee7:	c9                   	leave  
   10ee8:	c3                   	ret    

00010ee9 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10ee9:	55                   	push   %ebp
   10eea:	89 e5                	mov    %esp,%ebp
   10eec:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   10eef:	68 04 70 01 00       	push   $0x17004
   10ef4:	e8 5b fb ff ff       	call   10a54 <list_size>
   10ef9:	83 c4 04             	add    $0x4,%esp
   10efc:	85 c0                	test   %eax,%eax
   10efe:	75 07                	jne    10f07 <task_next_run+0x1e>
        return &task_manager.idle_task;
   10f00:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10f05:	eb 23                	jmp    10f2a <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   10f07:	68 04 70 01 00       	push   $0x17004
   10f0c:	e8 4e fb ff ff       	call   10a5f <list_first>
   10f11:	83 c4 04             	add    $0x4,%esp
   10f14:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10f17:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10f1b:	74 08                	je     10f25 <task_next_run+0x3c>
   10f1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f20:	83 e8 24             	sub    $0x24,%eax
   10f23:	eb 05                	jmp    10f2a <task_next_run+0x41>
   10f25:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f2a:	c9                   	leave  
   10f2b:	c3                   	ret    

00010f2c <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   10f2c:	55                   	push   %ebp
   10f2d:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10f2f:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10f34:	5d                   	pop    %ebp
   10f35:	c3                   	ret    

00010f36 <sys_sched_yield>:


int sys_sched_yield(void) {
   10f36:	55                   	push   %ebp
   10f37:	89 e5                	mov    %esp,%ebp
   10f39:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f3c:	e8 db 0d 00 00       	call   11d1c <irq_enter_protection>
   10f41:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   10f44:	83 ec 0c             	sub    $0xc,%esp
   10f47:	68 04 70 01 00       	push   $0x17004
   10f4c:	e8 03 fb ff ff       	call   10a54 <list_size>
   10f51:	83 c4 10             	add    $0x10,%esp
   10f54:	83 f8 01             	cmp    $0x1,%eax
   10f57:	7e 29                	jle    10f82 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   10f59:	e8 ce ff ff ff       	call   10f2c <task_current>
   10f5e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   10f61:	83 ec 0c             	sub    $0xc,%esp
   10f64:	ff 75 f0             	pushl  -0x10(%ebp)
   10f67:	e8 52 ff ff ff       	call   10ebe <task_set_blocked>
   10f6c:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10f6f:	83 ec 0c             	sub    $0xc,%esp
   10f72:	ff 75 f0             	pushl  -0x10(%ebp)
   10f75:	e8 10 ff ff ff       	call   10e8a <task_set_ready>
   10f7a:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10f7d:	e8 15 00 00 00       	call   10f97 <task_dispatch>
    }

    irq_leave_protection(state);
   10f82:	83 ec 0c             	sub    $0xc,%esp
   10f85:	ff 75 f4             	pushl  -0xc(%ebp)
   10f88:	e8 a7 0d 00 00       	call   11d34 <irq_leave_protection>
   10f8d:	83 c4 10             	add    $0x10,%esp

    return 0;
   10f90:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f95:	c9                   	leave  
   10f96:	c3                   	ret    

00010f97 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10f97:	55                   	push   %ebp
   10f98:	89 e5                	mov    %esp,%ebp
   10f9a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f9d:	e8 7a 0d 00 00       	call   11d1c <irq_enter_protection>
   10fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10fa5:	e8 3f ff ff ff       	call   10ee9 <task_next_run>
   10faa:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10fad:	a1 00 70 01 00       	mov    0x17000,%eax
   10fb2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10fb5:	74 2a                	je     10fe1 <task_dispatch+0x4a>
        task_t* from = task_current();
   10fb7:	e8 70 ff ff ff       	call   10f2c <task_current>
   10fbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10fbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fc2:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   10fc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fca:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10fd0:	83 ec 08             	sub    $0x8,%esp
   10fd3:	ff 75 f0             	pushl  -0x10(%ebp)
   10fd6:	ff 75 ec             	pushl  -0x14(%ebp)
   10fd9:	e8 08 fd ff ff       	call   10ce6 <task_switch_from_to>
   10fde:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10fe1:	83 ec 0c             	sub    $0xc,%esp
   10fe4:	ff 75 f4             	pushl  -0xc(%ebp)
   10fe7:	e8 48 0d 00 00       	call   11d34 <irq_leave_protection>
   10fec:	83 c4 10             	add    $0x10,%esp
}
   10fef:	90                   	nop
   10ff0:	c9                   	leave  
   10ff1:	c3                   	ret    

00010ff2 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10ff2:	55                   	push   %ebp
   10ff3:	89 e5                	mov    %esp,%ebp
   10ff5:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10ff8:	e8 2f ff ff ff       	call   10f2c <task_current>
   10ffd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   11000:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11003:	8b 40 44             	mov    0x44(%eax),%eax
   11006:	8d 50 ff             	lea    -0x1(%eax),%edx
   11009:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1100c:	89 50 44             	mov    %edx,0x44(%eax)
   1100f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11012:	8b 40 44             	mov    0x44(%eax),%eax
   11015:	85 c0                	test   %eax,%eax
   11017:	75 2d                	jne    11046 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   11019:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1101c:	8b 50 40             	mov    0x40(%eax),%edx
   1101f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11022:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   11025:	83 ec 0c             	sub    $0xc,%esp
   11028:	ff 75 f0             	pushl  -0x10(%ebp)
   1102b:	e8 8e fe ff ff       	call   10ebe <task_set_blocked>
   11030:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11033:	83 ec 0c             	sub    $0xc,%esp
   11036:	ff 75 f0             	pushl  -0x10(%ebp)
   11039:	e8 4c fe ff ff       	call   10e8a <task_set_ready>
   1103e:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11041:	e8 51 ff ff ff       	call   10f97 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   11046:	83 ec 0c             	sub    $0xc,%esp
   11049:	68 1c 70 01 00       	push   $0x1701c
   1104e:	e8 0c fa ff ff       	call   10a5f <list_first>
   11053:	83 c4 10             	add    $0x10,%esp
   11056:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11059:	eb 62                	jmp    110bd <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   1105b:	83 ec 0c             	sub    $0xc,%esp
   1105e:	ff 75 f4             	pushl  -0xc(%ebp)
   11061:	e8 e3 f9 ff ff       	call   10a49 <list_node_next>
   11066:	83 c4 10             	add    $0x10,%esp
   11069:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   1106c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11070:	74 08                	je     1107a <task_time_tick+0x88>
   11072:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11075:	83 e8 24             	sub    $0x24,%eax
   11078:	eb 05                	jmp    1107f <task_time_tick+0x8d>
   1107a:	b8 00 00 00 00       	mov    $0x0,%eax
   1107f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   11082:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11085:	8b 40 3c             	mov    0x3c(%eax),%eax
   11088:	8d 50 ff             	lea    -0x1(%eax),%edx
   1108b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1108e:	89 50 3c             	mov    %edx,0x3c(%eax)
   11091:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11094:	8b 40 3c             	mov    0x3c(%eax),%eax
   11097:	85 c0                	test   %eax,%eax
   11099:	75 1c                	jne    110b7 <task_time_tick+0xc5>
            task_set_wakeup(task);
   1109b:	83 ec 0c             	sub    $0xc,%esp
   1109e:	ff 75 e8             	pushl  -0x18(%ebp)
   110a1:	e8 56 00 00 00       	call   110fc <task_set_wakeup>
   110a6:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   110a9:	83 ec 0c             	sub    $0xc,%esp
   110ac:	ff 75 e8             	pushl  -0x18(%ebp)
   110af:	e8 d6 fd ff ff       	call   10e8a <task_set_ready>
   110b4:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   110b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   110bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   110c1:	75 98                	jne    1105b <task_time_tick+0x69>
    }

    task_dispatch();
   110c3:	e8 cf fe ff ff       	call   10f97 <task_dispatch>
}
   110c8:	90                   	nop
   110c9:	c9                   	leave  
   110ca:	c3                   	ret    

000110cb <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   110cb:	55                   	push   %ebp
   110cc:	89 e5                	mov    %esp,%ebp
   110ce:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   110d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110d5:	74 22                	je     110f9 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   110d7:	8b 55 0c             	mov    0xc(%ebp),%edx
   110da:	8b 45 08             	mov    0x8(%ebp),%eax
   110dd:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   110e0:	8b 45 08             	mov    0x8(%ebp),%eax
   110e3:	83 c0 24             	add    $0x24,%eax
   110e6:	83 ec 08             	sub    $0x8,%esp
   110e9:	50                   	push   %eax
   110ea:	68 1c 70 01 00       	push   $0x1701c
   110ef:	e8 d1 1a 00 00       	call   12bc5 <list_insert_back>
   110f4:	83 c4 10             	add    $0x10,%esp
   110f7:	eb 01                	jmp    110fa <task_set_sleep+0x2f>
        return;
   110f9:	90                   	nop
}
   110fa:	c9                   	leave  
   110fb:	c3                   	ret    

000110fc <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   110fc:	55                   	push   %ebp
   110fd:	89 e5                	mov    %esp,%ebp
   110ff:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	83 c0 24             	add    $0x24,%eax
   11108:	83 ec 08             	sub    $0x8,%esp
   1110b:	50                   	push   %eax
   1110c:	68 1c 70 01 00       	push   $0x1701c
   11111:	e8 8b 1b 00 00       	call   12ca1 <list_remove>
   11116:	83 c4 10             	add    $0x10,%esp
}
   11119:	90                   	nop
   1111a:	c9                   	leave  
   1111b:	c3                   	ret    

0001111c <sys_sleep>:


void sys_sleep(uint32_t ms) {
   1111c:	55                   	push   %ebp
   1111d:	89 e5                	mov    %esp,%ebp
   1111f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11122:	e8 f5 0b 00 00       	call   11d1c <irq_enter_protection>
   11127:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   1112a:	a1 00 70 01 00       	mov    0x17000,%eax
   1112f:	83 ec 0c             	sub    $0xc,%esp
   11132:	50                   	push   %eax
   11133:	e8 86 fd ff ff       	call   10ebe <task_set_blocked>
   11138:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	83 c0 09             	add    $0x9,%eax
   11141:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11146:	f7 e2                	mul    %edx
   11148:	c1 ea 03             	shr    $0x3,%edx
   1114b:	a1 00 70 01 00       	mov    0x17000,%eax
   11150:	83 ec 08             	sub    $0x8,%esp
   11153:	52                   	push   %edx
   11154:	50                   	push   %eax
   11155:	e8 71 ff ff ff       	call   110cb <task_set_sleep>
   1115a:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   1115d:	e8 35 fe ff ff       	call   10f97 <task_dispatch>

    irq_leave_protection(state);
   11162:	83 ec 0c             	sub    $0xc,%esp
   11165:	ff 75 f4             	pushl  -0xc(%ebp)
   11168:	e8 c7 0b 00 00       	call   11d34 <irq_leave_protection>
   1116d:	83 c4 10             	add    $0x10,%esp
   11170:	90                   	nop
   11171:	c9                   	leave  
   11172:	c3                   	ret    

00011173 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11173:	55                   	push   %ebp
   11174:	89 e5                	mov    %esp,%ebp
   11176:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11179:	8b 45 08             	mov    0x8(%ebp),%eax
   1117c:	c1 e8 10             	shr    $0x10,%eax
   1117f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   11183:	8b 45 08             	mov    0x8(%ebp),%eax
   11186:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   1118a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1118d:	83 e8 01             	sub    $0x1,%eax
   11190:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   11194:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11198:	90                   	nop
   11199:	c9                   	leave  
   1119a:	c3                   	ret    

0001119b <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1119b:	55                   	push   %ebp
   1119c:	89 e5                	mov    %esp,%ebp
   1119e:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   111a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   111a4:	89 45 f8             	mov    %eax,-0x8(%ebp)
   111a7:	8b 45 08             	mov    0x8(%ebp),%eax
   111aa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   111ad:	8d 45 f8             	lea    -0x8(%ebp),%eax
   111b0:	ff 28                	ljmp   *(%eax)
}
   111b2:	90                   	nop
   111b3:	c9                   	leave  
   111b4:	c3                   	ret    

000111b5 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   111b5:	55                   	push   %ebp
   111b6:	89 e5                	mov    %esp,%ebp
   111b8:	83 ec 14             	sub    $0x14,%esp
   111bb:	8b 45 14             	mov    0x14(%ebp),%eax
   111be:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   111c2:	8b 45 08             	mov    0x8(%ebp),%eax
   111c5:	83 e0 f8             	and    $0xfffffff8,%eax
   111c8:	05 a0 81 01 00       	add    $0x181a0,%eax
   111cd:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   111d0:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   111d7:	76 0f                	jbe    111e8 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   111d9:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   111df:	8b 45 10             	mov    0x10(%ebp),%eax
   111e2:	c1 e8 0c             	shr    $0xc,%eax
   111e5:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   111e8:	8b 45 10             	mov    0x10(%ebp),%eax
   111eb:	89 c2                	mov    %eax,%edx
   111ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111f0:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   111f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   111f6:	89 c2                	mov    %eax,%edx
   111f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111fb:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   111ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   11202:	c1 e8 10             	shr    $0x10,%eax
   11205:	89 c2                	mov    %eax,%edx
   11207:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1120a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   1120d:	8b 45 10             	mov    0x10(%ebp),%eax
   11210:	c1 e8 10             	shr    $0x10,%eax
   11213:	c1 e0 08             	shl    $0x8,%eax
   11216:	66 25 00 0f          	and    $0xf00,%ax
   1121a:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1121e:	89 c2                	mov    %eax,%edx
   11220:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11223:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11227:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122a:	c1 e8 18             	shr    $0x18,%eax
   1122d:	89 c2                	mov    %eax,%edx
   1122f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11232:	88 50 07             	mov    %dl,0x7(%eax)
}
   11235:	90                   	nop
   11236:	c9                   	leave  
   11237:	c3                   	ret    

00011238 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   11238:	55                   	push   %ebp
   11239:	89 e5                	mov    %esp,%ebp
   1123b:	83 ec 08             	sub    $0x8,%esp
   1123e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11241:	8b 45 14             	mov    0x14(%ebp),%eax
   11244:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11248:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   1124c:	8b 45 10             	mov    0x10(%ebp),%eax
   1124f:	89 c2                	mov    %eax,%edx
   11251:	8b 45 08             	mov    0x8(%ebp),%eax
   11254:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1125e:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11262:	8b 45 08             	mov    0x8(%ebp),%eax
   11265:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11269:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   1126d:	8b 45 10             	mov    0x10(%ebp),%eax
   11270:	c1 e8 10             	shr    $0x10,%eax
   11273:	89 c2                	mov    %eax,%edx
   11275:	8b 45 08             	mov    0x8(%ebp),%eax
   11278:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1127c:	90                   	nop
   1127d:	c9                   	leave  
   1127e:	c3                   	ret    

0001127f <init_gdt>:


void init_gdt(void) {
   1127f:	55                   	push   %ebp
   11280:	89 e5                	mov    %esp,%ebp
   11282:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11285:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1128c:	eb 19                	jmp    112a7 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1128e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11291:	c1 e0 03             	shl    $0x3,%eax
   11294:	6a 00                	push   $0x0
   11296:	6a 00                	push   $0x0
   11298:	6a 00                	push   $0x0
   1129a:	50                   	push   %eax
   1129b:	e8 15 ff ff ff       	call   111b5 <segment_desc_set>
   112a0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   112a3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   112a7:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   112ae:	7e de                	jle    1128e <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   112b0:	68 92 40 00 00       	push   $0x4092
   112b5:	6a ff                	push   $0xffffffff
   112b7:	6a 00                	push   $0x0
   112b9:	6a 10                	push   $0x10
   112bb:	e8 f5 fe ff ff       	call   111b5 <segment_desc_set>
   112c0:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   112c3:	68 9a 40 00 00       	push   $0x409a
   112c8:	6a ff                	push   $0xffffffff
   112ca:	6a 00                	push   $0x0
   112cc:	6a 08                	push   $0x8
   112ce:	e8 e2 fe ff ff       	call   111b5 <segment_desc_set>
   112d3:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   112d6:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   112db:	68 00 08 00 00       	push   $0x800
   112e0:	50                   	push   %eax
   112e1:	e8 8d fe ff ff       	call   11173 <lgdt>
   112e6:	83 c4 08             	add    $0x8,%esp
}
   112e9:	90                   	nop
   112ea:	c9                   	leave  
   112eb:	c3                   	ret    

000112ec <cpu_init>:


void cpu_init(void) {
   112ec:	55                   	push   %ebp
   112ed:	89 e5                	mov    %esp,%ebp
   112ef:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   112f2:	83 ec 08             	sub    $0x8,%esp
   112f5:	68 f0 30 01 00       	push   $0x130f0
   112fa:	68 a0 89 01 00       	push   $0x189a0
   112ff:	e8 b7 0d 00 00       	call   120bb <mutex_init>
   11304:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11307:	e8 73 ff ff ff       	call   1127f <init_gdt>
}
   1130c:	90                   	nop
   1130d:	c9                   	leave  
   1130e:	c3                   	ret    

0001130f <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   1130f:	55                   	push   %ebp
   11310:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   11312:	8b 45 08             	mov    0x8(%ebp),%eax
   11315:	6a 00                	push   $0x0
   11317:	50                   	push   %eax
   11318:	e8 7e fe ff ff       	call   1119b <far_jump>
   1131d:	83 c4 08             	add    $0x8,%esp
}
   11320:	90                   	nop
   11321:	c9                   	leave  
   11322:	c3                   	ret    

00011323 <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   11323:	55                   	push   %ebp
   11324:	89 e5                	mov    %esp,%ebp
   11326:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   11329:	83 ec 0c             	sub    $0xc,%esp
   1132c:	68 a0 89 01 00       	push   $0x189a0
   11331:	e8 c6 0d 00 00       	call   120fc <mutex_acquire>
   11336:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11339:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11340:	eb 36                	jmp    11378 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   11342:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11345:	c1 e0 03             	shl    $0x3,%eax
   11348:	05 a0 81 01 00       	add    $0x181a0,%eax
   1134d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   11350:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11353:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11357:	66 85 c0             	test   %ax,%ax
   1135a:	75 18                	jne    11374 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   1135c:	83 ec 0c             	sub    $0xc,%esp
   1135f:	68 a0 89 01 00       	push   $0x189a0
   11364:	e8 21 0e 00 00       	call   1218a <mutex_release>
   11369:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   1136c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1136f:	c1 e0 03             	shl    $0x3,%eax
   11372:	eb 22                	jmp    11396 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11374:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11378:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1137f:	7e c1                	jle    11342 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11381:	83 ec 0c             	sub    $0xc,%esp
   11384:	68 a0 89 01 00       	push   $0x189a0
   11389:	e8 fc 0d 00 00       	call   1218a <mutex_release>
   1138e:	83 c4 10             	add    $0x10,%esp

    return -1;
   11391:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11396:	c9                   	leave  
   11397:	c3                   	ret    

00011398 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   11398:	55                   	push   %ebp
   11399:	89 e5                	mov    %esp,%ebp
   1139b:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   1139e:	83 ec 0c             	sub    $0xc,%esp
   113a1:	68 a0 89 01 00       	push   $0x189a0
   113a6:	e8 51 0d 00 00       	call   120fc <mutex_acquire>
   113ab:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   113ae:	8b 45 08             	mov    0x8(%ebp),%eax
   113b1:	c1 e8 03             	shr    $0x3,%eax
   113b4:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   113bb:	00 00 00 

    mutex_release(&mutex);
   113be:	83 ec 0c             	sub    $0xc,%esp
   113c1:	68 a0 89 01 00       	push   $0x189a0
   113c6:	e8 bf 0d 00 00       	call   1218a <mutex_release>
   113cb:	83 c4 10             	add    $0x10,%esp
   113ce:	90                   	nop
   113cf:	c9                   	leave  
   113d0:	c3                   	ret    

000113d1 <inb>:
static inline uint8_t inb(uint16_t port) {
   113d1:	55                   	push   %ebp
   113d2:	89 e5                	mov    %esp,%ebp
   113d4:	83 ec 14             	sub    $0x14,%esp
   113d7:	8b 45 08             	mov    0x8(%ebp),%eax
   113da:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   113de:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   113e2:	89 c2                	mov    %eax,%edx
   113e4:	ec                   	in     (%dx),%al
   113e5:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   113e8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   113ec:	c9                   	leave  
   113ed:	c3                   	ret    

000113ee <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   113ee:	55                   	push   %ebp
   113ef:	89 e5                	mov    %esp,%ebp
   113f1:	83 ec 08             	sub    $0x8,%esp
   113f4:	8b 55 08             	mov    0x8(%ebp),%edx
   113f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   113fa:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113fe:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11401:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11405:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11409:	ee                   	out    %al,(%dx)
}
   1140a:	90                   	nop
   1140b:	c9                   	leave  
   1140c:	c3                   	ret    

0001140d <cli>:
static inline void cli(void) {
   1140d:	55                   	push   %ebp
   1140e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   11410:	fa                   	cli    
}
   11411:	90                   	nop
   11412:	5d                   	pop    %ebp
   11413:	c3                   	ret    

00011414 <sti>:
static inline void sti(void) {
   11414:	55                   	push   %ebp
   11415:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11417:	fb                   	sti    
}
   11418:	90                   	nop
   11419:	5d                   	pop    %ebp
   1141a:	c3                   	ret    

0001141b <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1141b:	55                   	push   %ebp
   1141c:	89 e5                	mov    %esp,%ebp
   1141e:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11421:	8b 45 08             	mov    0x8(%ebp),%eax
   11424:	c1 e8 10             	shr    $0x10,%eax
   11427:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   1142b:	8b 45 08             	mov    0x8(%ebp),%eax
   1142e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   11432:	8b 45 0c             	mov    0xc(%ebp),%eax
   11435:	83 e8 01             	sub    $0x1,%eax
   11438:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   1143c:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11440:	90                   	nop
   11441:	c9                   	leave  
   11442:	c3                   	ret    

00011443 <read_cr2>:
static inline uint32_t read_cr2() {
   11443:	55                   	push   %ebp
   11444:	89 e5                	mov    %esp,%ebp
   11446:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   11449:	0f 20 d0             	mov    %cr2,%eax
   1144c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   1144f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11452:	c9                   	leave  
   11453:	c3                   	ret    

00011454 <hlt>:
static inline void hlt(void) {
   11454:	55                   	push   %ebp
   11455:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11457:	f4                   	hlt    
}
   11458:	90                   	nop
   11459:	5d                   	pop    %ebp
   1145a:	c3                   	ret    

0001145b <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   1145b:	55                   	push   %ebp
   1145c:	89 e5                	mov    %esp,%ebp
   1145e:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11461:	9c                   	pushf  
   11462:	58                   	pop    %eax
   11463:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11466:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11469:	c9                   	leave  
   1146a:	c3                   	ret    

0001146b <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   1146b:	55                   	push   %ebp
   1146c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   1146e:	8b 45 08             	mov    0x8(%ebp),%eax
   11471:	50                   	push   %eax
   11472:	9d                   	popf   
}
   11473:	90                   	nop
   11474:	5d                   	pop    %ebp
   11475:	c3                   	ret    

00011476 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   11476:	55                   	push   %ebp
   11477:	89 e5                	mov    %esp,%ebp
   11479:	57                   	push   %edi
   1147a:	56                   	push   %esi
   1147b:	53                   	push   %ebx
   1147c:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   1147f:	8b 45 08             	mov    0x8(%ebp),%eax
   11482:	8b 40 3c             	mov    0x3c(%eax),%eax
   11485:	83 e0 07             	and    $0x7,%eax
   11488:	85 c0                	test   %eax,%eax
   1148a:	74 14                	je     114a0 <dump_core_regs+0x2a>
        ss = frame->ds;
   1148c:	8b 45 08             	mov    0x8(%ebp),%eax
   1148f:	8b 40 0c             	mov    0xc(%eax),%eax
   11492:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   11495:	8b 45 08             	mov    0x8(%ebp),%eax
   11498:	8b 40 1c             	mov    0x1c(%eax),%eax
   1149b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1149e:	eb 12                	jmp    114b2 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   114a0:	8b 45 08             	mov    0x8(%ebp),%eax
   114a3:	8b 40 48             	mov    0x48(%eax),%eax
   114a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   114a9:	8b 45 08             	mov    0x8(%ebp),%eax
   114ac:	8b 40 44             	mov    0x44(%eax),%eax
   114af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   114b2:	8b 45 08             	mov    0x8(%ebp),%eax
   114b5:	8b 50 34             	mov    0x34(%eax),%edx
   114b8:	8b 45 08             	mov    0x8(%ebp),%eax
   114bb:	8b 40 30             	mov    0x30(%eax),%eax
   114be:	83 ec 04             	sub    $0x4,%esp
   114c1:	52                   	push   %edx
   114c2:	50                   	push   %eax
   114c3:	68 fc 30 01 00       	push   $0x130fc
   114c8:	e8 37 19 00 00       	call   12e04 <log_printf>
   114cd:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   114d0:	8b 45 08             	mov    0x8(%ebp),%eax
   114d3:	8b 30                	mov    (%eax),%esi
   114d5:	8b 45 08             	mov    0x8(%ebp),%eax
   114d8:	8b 58 04             	mov    0x4(%eax),%ebx
   114db:	8b 45 08             	mov    0x8(%ebp),%eax
   114de:	8b 48 08             	mov    0x8(%eax),%ecx
   114e1:	8b 45 08             	mov    0x8(%ebp),%eax
   114e4:	8b 50 0c             	mov    0xc(%eax),%edx
   114e7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ea:	8b 40 3c             	mov    0x3c(%eax),%eax
   114ed:	83 ec 04             	sub    $0x4,%esp
   114f0:	56                   	push   %esi
   114f1:	53                   	push   %ebx
   114f2:	ff 75 e0             	pushl  -0x20(%ebp)
   114f5:	51                   	push   %ecx
   114f6:	52                   	push   %edx
   114f7:	50                   	push   %eax
   114f8:	68 14 31 01 00       	push   $0x13114
   114fd:	e8 02 19 00 00       	call   12e04 <log_printf>
   11502:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   11505:	8b 45 08             	mov    0x8(%ebp),%eax
   11508:	8b 78 18             	mov    0x18(%eax),%edi
   1150b:	8b 45 08             	mov    0x8(%ebp),%eax
   1150e:	8b 70 14             	mov    0x14(%eax),%esi
   11511:	8b 45 08             	mov    0x8(%ebp),%eax
   11514:	8b 58 10             	mov    0x10(%eax),%ebx
   11517:	8b 45 08             	mov    0x8(%ebp),%eax
   1151a:	8b 48 24             	mov    0x24(%eax),%ecx
   1151d:	8b 45 08             	mov    0x8(%ebp),%eax
   11520:	8b 50 20             	mov    0x20(%eax),%edx
   11523:	8b 45 08             	mov    0x8(%ebp),%eax
   11526:	8b 40 2c             	mov    0x2c(%eax),%eax
   11529:	ff 75 e4             	pushl  -0x1c(%ebp)
   1152c:	57                   	push   %edi
   1152d:	56                   	push   %esi
   1152e:	53                   	push   %ebx
   1152f:	51                   	push   %ecx
   11530:	52                   	push   %edx
   11531:	50                   	push   %eax
   11532:	68 40 31 01 00       	push   $0x13140
   11537:	e8 c8 18 00 00       	call   12e04 <log_printf>
   1153c:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   1153f:	8b 45 08             	mov    0x8(%ebp),%eax
   11542:	8b 50 40             	mov    0x40(%eax),%edx
   11545:	8b 45 08             	mov    0x8(%ebp),%eax
   11548:	8b 40 38             	mov    0x38(%eax),%eax
   1154b:	83 ec 04             	sub    $0x4,%esp
   1154e:	52                   	push   %edx
   1154f:	50                   	push   %eax
   11550:	68 79 31 01 00       	push   $0x13179
   11555:	e8 aa 18 00 00       	call   12e04 <log_printf>
   1155a:	83 c4 10             	add    $0x10,%esp
}
   1155d:	90                   	nop
   1155e:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11561:	5b                   	pop    %ebx
   11562:	5e                   	pop    %esi
   11563:	5f                   	pop    %edi
   11564:	5d                   	pop    %ebp
   11565:	c3                   	ret    

00011566 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   11566:	55                   	push   %ebp
   11567:	89 e5                	mov    %esp,%ebp
   11569:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   1156c:	83 ec 0c             	sub    $0xc,%esp
   1156f:	68 90 31 01 00       	push   $0x13190
   11574:	e8 8b 18 00 00       	call   12e04 <log_printf>
   11579:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   1157c:	83 ec 08             	sub    $0x8,%esp
   1157f:	ff 75 0c             	pushl  0xc(%ebp)
   11582:	68 bb 31 01 00       	push   $0x131bb
   11587:	e8 78 18 00 00       	call   12e04 <log_printf>
   1158c:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1158f:	83 ec 0c             	sub    $0xc,%esp
   11592:	ff 75 08             	pushl  0x8(%ebp)
   11595:	e8 dc fe ff ff       	call   11476 <dump_core_regs>
   1159a:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   1159d:	e8 b2 fe ff ff       	call   11454 <hlt>
   115a2:	eb f9                	jmp    1159d <do_default_handler+0x37>

000115a4 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   115a4:	55                   	push   %ebp
   115a5:	89 e5                	mov    %esp,%ebp
   115a7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   115aa:	83 ec 08             	sub    $0x8,%esp
   115ad:	68 cd 31 01 00       	push   $0x131cd
   115b2:	ff 75 08             	pushl  0x8(%ebp)
   115b5:	e8 ac ff ff ff       	call   11566 <do_default_handler>
   115ba:	83 c4 10             	add    $0x10,%esp
}
   115bd:	90                   	nop
   115be:	c9                   	leave  
   115bf:	c3                   	ret    

000115c0 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   115c0:	55                   	push   %ebp
   115c1:	89 e5                	mov    %esp,%ebp
   115c3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   115c6:	83 ec 08             	sub    $0x8,%esp
   115c9:	68 df 31 01 00       	push   $0x131df
   115ce:	ff 75 08             	pushl  0x8(%ebp)
   115d1:	e8 90 ff ff ff       	call   11566 <do_default_handler>
   115d6:	83 c4 10             	add    $0x10,%esp
}
   115d9:	90                   	nop
   115da:	c9                   	leave  
   115db:	c3                   	ret    

000115dc <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   115dc:	55                   	push   %ebp
   115dd:	89 e5                	mov    %esp,%ebp
   115df:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   115e2:	83 ec 08             	sub    $0x8,%esp
   115e5:	68 f9 31 01 00       	push   $0x131f9
   115ea:	ff 75 08             	pushl  0x8(%ebp)
   115ed:	e8 74 ff ff ff       	call   11566 <do_default_handler>
   115f2:	83 c4 10             	add    $0x10,%esp
}   
   115f5:	90                   	nop
   115f6:	c9                   	leave  
   115f7:	c3                   	ret    

000115f8 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   115f8:	55                   	push   %ebp
   115f9:	89 e5                	mov    %esp,%ebp
   115fb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   115fe:	83 ec 08             	sub    $0x8,%esp
   11601:	68 14 32 01 00       	push   $0x13214
   11606:	ff 75 08             	pushl  0x8(%ebp)
   11609:	e8 58 ff ff ff       	call   11566 <do_default_handler>
   1160e:	83 c4 10             	add    $0x10,%esp
}   
   11611:	90                   	nop
   11612:	c9                   	leave  
   11613:	c3                   	ret    

00011614 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   11614:	55                   	push   %ebp
   11615:	89 e5                	mov    %esp,%ebp
   11617:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   1161a:	83 ec 08             	sub    $0x8,%esp
   1161d:	68 2d 32 01 00       	push   $0x1322d
   11622:	ff 75 08             	pushl  0x8(%ebp)
   11625:	e8 3c ff ff ff       	call   11566 <do_default_handler>
   1162a:	83 c4 10             	add    $0x10,%esp
}   
   1162d:	90                   	nop
   1162e:	c9                   	leave  
   1162f:	c3                   	ret    

00011630 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   11630:	55                   	push   %ebp
   11631:	89 e5                	mov    %esp,%ebp
   11633:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   11636:	83 ec 08             	sub    $0x8,%esp
   11639:	68 43 32 01 00       	push   $0x13243
   1163e:	ff 75 08             	pushl  0x8(%ebp)
   11641:	e8 20 ff ff ff       	call   11566 <do_default_handler>
   11646:	83 c4 10             	add    $0x10,%esp
}   
   11649:	90                   	nop
   1164a:	c9                   	leave  
   1164b:	c3                   	ret    

0001164c <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   1164c:	55                   	push   %ebp
   1164d:	89 e5                	mov    %esp,%ebp
   1164f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   11652:	83 ec 08             	sub    $0x8,%esp
   11655:	68 57 32 01 00       	push   $0x13257
   1165a:	ff 75 08             	pushl  0x8(%ebp)
   1165d:	e8 04 ff ff ff       	call   11566 <do_default_handler>
   11662:	83 c4 10             	add    $0x10,%esp
}   
   11665:	90                   	nop
   11666:	c9                   	leave  
   11667:	c3                   	ret    

00011668 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   11668:	55                   	push   %ebp
   11669:	89 e5                	mov    %esp,%ebp
   1166b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   1166e:	83 ec 08             	sub    $0x8,%esp
   11671:	68 75 32 01 00       	push   $0x13275
   11676:	ff 75 08             	pushl  0x8(%ebp)
   11679:	e8 e8 fe ff ff       	call   11566 <do_default_handler>
   1167e:	83 c4 10             	add    $0x10,%esp
}   
   11681:	90                   	nop
   11682:	c9                   	leave  
   11683:	c3                   	ret    

00011684 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11684:	55                   	push   %ebp
   11685:	89 e5                	mov    %esp,%ebp
   11687:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   1168a:	83 ec 08             	sub    $0x8,%esp
   1168d:	68 8f 32 01 00       	push   $0x1328f
   11692:	ff 75 08             	pushl  0x8(%ebp)
   11695:	e8 cc fe ff ff       	call   11566 <do_default_handler>
   1169a:	83 c4 10             	add    $0x10,%esp
}   
   1169d:	90                   	nop
   1169e:	c9                   	leave  
   1169f:	c3                   	ret    

000116a0 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   116a0:	55                   	push   %ebp
   116a1:	89 e5                	mov    %esp,%ebp
   116a3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   116a6:	83 ec 08             	sub    $0x8,%esp
   116a9:	68 ab 32 01 00       	push   $0x132ab
   116ae:	ff 75 08             	pushl  0x8(%ebp)
   116b1:	e8 b0 fe ff ff       	call   11566 <do_default_handler>
   116b6:	83 c4 10             	add    $0x10,%esp
}   
   116b9:	90                   	nop
   116ba:	c9                   	leave  
   116bb:	c3                   	ret    

000116bc <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   116bc:	55                   	push   %ebp
   116bd:	89 e5                	mov    %esp,%ebp
   116bf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   116c2:	83 ec 08             	sub    $0x8,%esp
   116c5:	68 c3 32 01 00       	push   $0x132c3
   116ca:	ff 75 08             	pushl  0x8(%ebp)
   116cd:	e8 94 fe ff ff       	call   11566 <do_default_handler>
   116d2:	83 c4 10             	add    $0x10,%esp
}   
   116d5:	90                   	nop
   116d6:	c9                   	leave  
   116d7:	c3                   	ret    

000116d8 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   116d8:	55                   	push   %ebp
   116d9:	89 e5                	mov    %esp,%ebp
   116db:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   116de:	83 ec 08             	sub    $0x8,%esp
   116e1:	68 dc 32 01 00       	push   $0x132dc
   116e6:	ff 75 08             	pushl  0x8(%ebp)
   116e9:	e8 78 fe ff ff       	call   11566 <do_default_handler>
   116ee:	83 c4 10             	add    $0x10,%esp
}   
   116f1:	90                   	nop
   116f2:	c9                   	leave  
   116f3:	c3                   	ret    

000116f4 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   116f4:	55                   	push   %ebp
   116f5:	89 e5                	mov    %esp,%ebp
   116f7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   116fa:	83 ec 08             	sub    $0x8,%esp
   116fd:	68 fc 32 01 00       	push   $0x132fc
   11702:	ff 75 08             	pushl  0x8(%ebp)
   11705:	e8 5c fe ff ff       	call   11566 <do_default_handler>
   1170a:	83 c4 10             	add    $0x10,%esp
}   
   1170d:	90                   	nop
   1170e:	c9                   	leave  
   1170f:	c3                   	ret    

00011710 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   11710:	55                   	push   %ebp
   11711:	89 e5                	mov    %esp,%ebp
   11713:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11716:	83 ec 0c             	sub    $0xc,%esp
   11719:	68 1c 33 01 00       	push   $0x1331c
   1171e:	e8 e1 16 00 00       	call   12e04 <log_printf>
   11723:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11726:	83 ec 0c             	sub    $0xc,%esp
   11729:	68 40 33 01 00       	push   $0x13340
   1172e:	e8 d1 16 00 00       	call   12e04 <log_printf>
   11733:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11736:	8b 45 08             	mov    0x8(%ebp),%eax
   11739:	8b 40 34             	mov    0x34(%eax),%eax
   1173c:	83 e0 01             	and    $0x1,%eax
   1173f:	85 c0                	test   %eax,%eax
   11741:	74 12                	je     11755 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   11743:	83 ec 0c             	sub    $0xc,%esp
   11746:	68 6c 33 01 00       	push   $0x1336c
   1174b:	e8 b4 16 00 00       	call   12e04 <log_printf>
   11750:	83 c4 10             	add    $0x10,%esp
   11753:	eb 10                	jmp    11765 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   11755:	83 ec 0c             	sub    $0xc,%esp
   11758:	68 e8 33 01 00       	push   $0x133e8
   1175d:	e8 a2 16 00 00       	call   12e04 <log_printf>
   11762:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   11765:	8b 45 08             	mov    0x8(%ebp),%eax
   11768:	8b 40 34             	mov    0x34(%eax),%eax
   1176b:	83 e0 02             	and    $0x2,%eax
   1176e:	85 c0                	test   %eax,%eax
   11770:	74 12                	je     11784 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11772:	83 ec 0c             	sub    $0xc,%esp
   11775:	68 40 34 01 00       	push   $0x13440
   1177a:	e8 85 16 00 00       	call   12e04 <log_printf>
   1177f:	83 c4 10             	add    $0x10,%esp
   11782:	eb 10                	jmp    11794 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   11784:	83 ec 0c             	sub    $0xc,%esp
   11787:	68 8c 34 01 00       	push   $0x1348c
   1178c:	e8 73 16 00 00       	call   12e04 <log_printf>
   11791:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11794:	8b 45 08             	mov    0x8(%ebp),%eax
   11797:	8b 40 34             	mov    0x34(%eax),%eax
   1179a:	25 f8 ff 00 00       	and    $0xfff8,%eax
   1179f:	83 ec 08             	sub    $0x8,%esp
   117a2:	50                   	push   %eax
   117a3:	68 b8 34 01 00       	push   $0x134b8
   117a8:	e8 57 16 00 00       	call   12e04 <log_printf>
   117ad:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   117b0:	83 ec 0c             	sub    $0xc,%esp
   117b3:	ff 75 08             	pushl  0x8(%ebp)
   117b6:	e8 bb fc ff ff       	call   11476 <dump_core_regs>
   117bb:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   117be:	e8 91 fc ff ff       	call   11454 <hlt>
   117c3:	eb f9                	jmp    117be <do_handler_general_protection+0xae>

000117c5 <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   117c5:	55                   	push   %ebp
   117c6:	89 e5                	mov    %esp,%ebp
   117c8:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   117cb:	83 ec 0c             	sub    $0xc,%esp
   117ce:	68 1c 33 01 00       	push   $0x1331c
   117d3:	e8 2c 16 00 00       	call   12e04 <log_printf>
   117d8:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   117db:	83 ec 0c             	sub    $0xc,%esp
   117de:	68 ca 34 01 00       	push   $0x134ca
   117e3:	e8 1c 16 00 00       	call   12e04 <log_printf>
   117e8:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   117eb:	8b 45 08             	mov    0x8(%ebp),%eax
   117ee:	8b 40 34             	mov    0x34(%eax),%eax
   117f1:	83 e0 01             	and    $0x1,%eax
   117f4:	85 c0                	test   %eax,%eax
   117f6:	74 18                	je     11810 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   117f8:	e8 46 fc ff ff       	call   11443 <read_cr2>
   117fd:	83 ec 08             	sub    $0x8,%esp
   11800:	50                   	push   %eax
   11801:	68 e8 34 01 00       	push   $0x134e8
   11806:	e8 f9 15 00 00       	call   12e04 <log_printf>
   1180b:	83 c4 10             	add    $0x10,%esp
   1180e:	eb 16                	jmp    11826 <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   11810:	e8 2e fc ff ff       	call   11443 <read_cr2>
   11815:	83 ec 08             	sub    $0x8,%esp
   11818:	50                   	push   %eax
   11819:	68 10 35 01 00       	push   $0x13510
   1181e:	e8 e1 15 00 00       	call   12e04 <log_printf>
   11823:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11826:	8b 45 08             	mov    0x8(%ebp),%eax
   11829:	8b 40 34             	mov    0x34(%eax),%eax
   1182c:	83 e0 02             	and    $0x2,%eax
   1182f:	85 c0                	test   %eax,%eax
   11831:	74 12                	je     11845 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   11833:	83 ec 0c             	sub    $0xc,%esp
   11836:	68 40 35 01 00       	push   $0x13540
   1183b:	e8 c4 15 00 00       	call   12e04 <log_printf>
   11840:	83 c4 10             	add    $0x10,%esp
   11843:	eb 10                	jmp    11855 <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   11845:	83 ec 0c             	sub    $0xc,%esp
   11848:	68 6c 35 01 00       	push   $0x1356c
   1184d:	e8 b2 15 00 00       	call   12e04 <log_printf>
   11852:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11855:	8b 45 08             	mov    0x8(%ebp),%eax
   11858:	8b 40 34             	mov    0x34(%eax),%eax
   1185b:	83 e0 02             	and    $0x2,%eax
   1185e:	85 c0                	test   %eax,%eax
   11860:	74 12                	je     11874 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   11862:	83 ec 0c             	sub    $0xc,%esp
   11865:	68 98 35 01 00       	push   $0x13598
   1186a:	e8 95 15 00 00       	call   12e04 <log_printf>
   1186f:	83 c4 10             	add    $0x10,%esp
   11872:	eb 10                	jmp    11884 <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   11874:	83 ec 0c             	sub    $0xc,%esp
   11877:	68 c4 35 01 00       	push   $0x135c4
   1187c:	e8 83 15 00 00       	call   12e04 <log_printf>
   11881:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11884:	83 ec 0c             	sub    $0xc,%esp
   11887:	ff 75 08             	pushl  0x8(%ebp)
   1188a:	e8 e7 fb ff ff       	call   11476 <dump_core_regs>
   1188f:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11892:	e8 bd fb ff ff       	call   11454 <hlt>
   11897:	eb f9                	jmp    11892 <do_handler_page_fault+0xcd>

00011899 <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11899:	55                   	push   %ebp
   1189a:	89 e5                	mov    %esp,%ebp
   1189c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   1189f:	83 ec 08             	sub    $0x8,%esp
   118a2:	68 ec 35 01 00       	push   $0x135ec
   118a7:	ff 75 08             	pushl  0x8(%ebp)
   118aa:	e8 b7 fc ff ff       	call   11566 <do_default_handler>
   118af:	83 c4 10             	add    $0x10,%esp
}   
   118b2:	90                   	nop
   118b3:	c9                   	leave  
   118b4:	c3                   	ret    

000118b5 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   118b5:	55                   	push   %ebp
   118b6:	89 e5                	mov    %esp,%ebp
   118b8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   118bb:	83 ec 08             	sub    $0x8,%esp
   118be:	68 0c 36 01 00       	push   $0x1360c
   118c3:	ff 75 08             	pushl  0x8(%ebp)
   118c6:	e8 9b fc ff ff       	call   11566 <do_default_handler>
   118cb:	83 c4 10             	add    $0x10,%esp
}   
   118ce:	90                   	nop
   118cf:	c9                   	leave  
   118d0:	c3                   	ret    

000118d1 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   118d1:	55                   	push   %ebp
   118d2:	89 e5                	mov    %esp,%ebp
   118d4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   118d7:	83 ec 08             	sub    $0x8,%esp
   118da:	68 26 36 01 00       	push   $0x13626
   118df:	ff 75 08             	pushl  0x8(%ebp)
   118e2:	e8 7f fc ff ff       	call   11566 <do_default_handler>
   118e7:	83 c4 10             	add    $0x10,%esp
}   
   118ea:	90                   	nop
   118eb:	c9                   	leave  
   118ec:	c3                   	ret    

000118ed <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   118ed:	55                   	push   %ebp
   118ee:	89 e5                	mov    %esp,%ebp
   118f0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   118f3:	83 ec 08             	sub    $0x8,%esp
   118f6:	68 40 36 01 00       	push   $0x13640
   118fb:	ff 75 08             	pushl  0x8(%ebp)
   118fe:	e8 63 fc ff ff       	call   11566 <do_default_handler>
   11903:	83 c4 10             	add    $0x10,%esp
}
   11906:	90                   	nop
   11907:	c9                   	leave  
   11908:	c3                   	ret    

00011909 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11909:	55                   	push   %ebp
   1190a:	89 e5                	mov    %esp,%ebp
   1190c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   1190f:	83 ec 08             	sub    $0x8,%esp
   11912:	68 6c 36 01 00       	push   $0x1366c
   11917:	ff 75 08             	pushl  0x8(%ebp)
   1191a:	e8 47 fc ff ff       	call   11566 <do_default_handler>
   1191f:	83 c4 10             	add    $0x10,%esp
}
   11922:	90                   	nop
   11923:	c9                   	leave  
   11924:	c3                   	ret    

00011925 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11925:	55                   	push   %ebp
   11926:	89 e5                	mov    %esp,%ebp
   11928:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   1192b:	83 ec 08             	sub    $0x8,%esp
   1192e:	68 90 36 01 00       	push   $0x13690
   11933:	ff 75 08             	pushl  0x8(%ebp)
   11936:	e8 2b fc ff ff       	call   11566 <do_default_handler>
   1193b:	83 c4 10             	add    $0x10,%esp
}
   1193e:	90                   	nop
   1193f:	c9                   	leave  
   11940:	c3                   	ret    

00011941 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11941:	55                   	push   %ebp
   11942:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11944:	6a 11                	push   $0x11
   11946:	6a 20                	push   $0x20
   11948:	e8 a1 fa ff ff       	call   113ee <outb>
   1194d:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11950:	6a 20                	push   $0x20
   11952:	6a 21                	push   $0x21
   11954:	e8 95 fa ff ff       	call   113ee <outb>
   11959:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   1195c:	6a 04                	push   $0x4
   1195e:	6a 21                	push   $0x21
   11960:	e8 89 fa ff ff       	call   113ee <outb>
   11965:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11968:	6a 01                	push   $0x1
   1196a:	6a 21                	push   $0x21
   1196c:	e8 7d fa ff ff       	call   113ee <outb>
   11971:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11974:	6a 11                	push   $0x11
   11976:	68 a0 00 00 00       	push   $0xa0
   1197b:	e8 6e fa ff ff       	call   113ee <outb>
   11980:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11983:	6a 28                	push   $0x28
   11985:	68 a1 00 00 00       	push   $0xa1
   1198a:	e8 5f fa ff ff       	call   113ee <outb>
   1198f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11992:	6a 02                	push   $0x2
   11994:	68 a1 00 00 00       	push   $0xa1
   11999:	e8 50 fa ff ff       	call   113ee <outb>
   1199e:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   119a1:	6a 01                	push   $0x1
   119a3:	68 a1 00 00 00       	push   $0xa1
   119a8:	e8 41 fa ff ff       	call   113ee <outb>
   119ad:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   119b0:	68 fb 00 00 00       	push   $0xfb
   119b5:	6a 21                	push   $0x21
   119b7:	e8 32 fa ff ff       	call   113ee <outb>
   119bc:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   119bf:	68 ff 00 00 00       	push   $0xff
   119c4:	68 a1 00 00 00       	push   $0xa1
   119c9:	e8 20 fa ff ff       	call   113ee <outb>
   119ce:	83 c4 08             	add    $0x8,%esp
}
   119d1:	90                   	nop
   119d2:	c9                   	leave  
   119d3:	c3                   	ret    

000119d4 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   119d4:	55                   	push   %ebp
   119d5:	89 e5                	mov    %esp,%ebp
   119d7:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   119da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   119e1:	eb 25                	jmp    11a08 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   119e3:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   119e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119eb:	c1 e0 03             	shl    $0x3,%eax
   119ee:	05 00 8a 01 00       	add    $0x18a00,%eax
   119f3:	68 00 8e 00 00       	push   $0x8e00
   119f8:	52                   	push   %edx
   119f9:	6a 08                	push   $0x8
   119fb:	50                   	push   %eax
   119fc:	e8 37 f8 ff ff       	call   11238 <gate_desc_set>
   11a01:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11a04:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a08:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11a0c:	7e d5                	jle    119e3 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11a0e:	83 ec 08             	sub    $0x8,%esp
   11a11:	68 4a 00 01 00       	push   $0x1004a
   11a16:	6a 00                	push   $0x0
   11a18:	e8 77 01 00 00       	call   11b94 <irq_install>
   11a1d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11a20:	83 ec 08             	sub    $0x8,%esp
   11a23:	68 69 00 01 00       	push   $0x10069
   11a28:	6a 01                	push   $0x1
   11a2a:	e8 65 01 00 00       	call   11b94 <irq_install>
   11a2f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11a32:	83 ec 08             	sub    $0x8,%esp
   11a35:	68 88 00 01 00       	push   $0x10088
   11a3a:	6a 02                	push   $0x2
   11a3c:	e8 53 01 00 00       	call   11b94 <irq_install>
   11a41:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11a44:	83 ec 08             	sub    $0x8,%esp
   11a47:	68 a7 00 01 00       	push   $0x100a7
   11a4c:	6a 03                	push   $0x3
   11a4e:	e8 41 01 00 00       	call   11b94 <irq_install>
   11a53:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   11a56:	83 ec 08             	sub    $0x8,%esp
   11a59:	68 c6 00 01 00       	push   $0x100c6
   11a5e:	6a 04                	push   $0x4
   11a60:	e8 2f 01 00 00       	call   11b94 <irq_install>
   11a65:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11a68:	83 ec 08             	sub    $0x8,%esp
   11a6b:	68 e5 00 01 00       	push   $0x100e5
   11a70:	6a 05                	push   $0x5
   11a72:	e8 1d 01 00 00       	call   11b94 <irq_install>
   11a77:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11a7a:	83 ec 08             	sub    $0x8,%esp
   11a7d:	68 04 01 01 00       	push   $0x10104
   11a82:	6a 06                	push   $0x6
   11a84:	e8 0b 01 00 00       	call   11b94 <irq_install>
   11a89:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11a8c:	83 ec 08             	sub    $0x8,%esp
   11a8f:	68 23 01 01 00       	push   $0x10123
   11a94:	6a 07                	push   $0x7
   11a96:	e8 f9 00 00 00       	call   11b94 <irq_install>
   11a9b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11a9e:	83 ec 08             	sub    $0x8,%esp
   11aa1:	68 42 01 01 00       	push   $0x10142
   11aa6:	6a 08                	push   $0x8
   11aa8:	e8 e7 00 00 00       	call   11b94 <irq_install>
   11aad:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11ab0:	83 ec 08             	sub    $0x8,%esp
   11ab3:	68 5f 01 01 00       	push   $0x1015f
   11ab8:	6a 0a                	push   $0xa
   11aba:	e8 d5 00 00 00       	call   11b94 <irq_install>
   11abf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11ac2:	83 ec 08             	sub    $0x8,%esp
   11ac5:	68 7c 01 01 00       	push   $0x1017c
   11aca:	6a 0b                	push   $0xb
   11acc:	e8 c3 00 00 00       	call   11b94 <irq_install>
   11ad1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11ad4:	83 ec 08             	sub    $0x8,%esp
   11ad7:	68 99 01 01 00       	push   $0x10199
   11adc:	6a 0c                	push   $0xc
   11ade:	e8 b1 00 00 00       	call   11b94 <irq_install>
   11ae3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11ae6:	83 ec 08             	sub    $0x8,%esp
   11ae9:	68 b8 01 01 00       	push   $0x101b8
   11aee:	6a 0d                	push   $0xd
   11af0:	e8 9f 00 00 00       	call   11b94 <irq_install>
   11af5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11af8:	83 ec 08             	sub    $0x8,%esp
   11afb:	68 d5 01 01 00       	push   $0x101d5
   11b00:	6a 0e                	push   $0xe
   11b02:	e8 8d 00 00 00       	call   11b94 <irq_install>
   11b07:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11b0a:	83 ec 08             	sub    $0x8,%esp
   11b0d:	68 f2 01 01 00       	push   $0x101f2
   11b12:	6a 10                	push   $0x10
   11b14:	e8 7b 00 00 00       	call   11b94 <irq_install>
   11b19:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11b1c:	83 ec 08             	sub    $0x8,%esp
   11b1f:	68 11 02 01 00       	push   $0x10211
   11b24:	6a 11                	push   $0x11
   11b26:	e8 69 00 00 00       	call   11b94 <irq_install>
   11b2b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11b2e:	83 ec 08             	sub    $0x8,%esp
   11b31:	68 2e 02 01 00       	push   $0x1022e
   11b36:	6a 12                	push   $0x12
   11b38:	e8 57 00 00 00       	call   11b94 <irq_install>
   11b3d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11b40:	83 ec 08             	sub    $0x8,%esp
   11b43:	68 4d 02 01 00       	push   $0x1024d
   11b48:	6a 13                	push   $0x13
   11b4a:	e8 45 00 00 00       	call   11b94 <irq_install>
   11b4f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11b52:	83 ec 08             	sub    $0x8,%esp
   11b55:	68 6c 02 01 00       	push   $0x1026c
   11b5a:	6a 14                	push   $0x14
   11b5c:	e8 33 00 00 00       	call   11b94 <irq_install>
   11b61:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11b64:	83 ec 08             	sub    $0x8,%esp
   11b67:	68 8b 02 01 00       	push   $0x1028b
   11b6c:	6a 15                	push   $0x15
   11b6e:	e8 21 00 00 00       	call   11b94 <irq_install>
   11b73:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11b76:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11b7b:	83 ec 08             	sub    $0x8,%esp
   11b7e:	68 00 04 00 00       	push   $0x400
   11b83:	50                   	push   %eax
   11b84:	e8 92 f8 ff ff       	call   1141b <lidt>
   11b89:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11b8c:	e8 b0 fd ff ff       	call   11941 <init_pic>
}
   11b91:	90                   	nop
   11b92:	c9                   	leave  
   11b93:	c3                   	ret    

00011b94 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11b94:	55                   	push   %ebp
   11b95:	89 e5                	mov    %esp,%ebp
   11b97:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11b9a:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11b9e:	7e 07                	jle    11ba7 <irq_install+0x13>
        return -1;
   11ba0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ba5:	eb 20                	jmp    11bc7 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11ba7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11baa:	8b 55 08             	mov    0x8(%ebp),%edx
   11bad:	c1 e2 03             	shl    $0x3,%edx
   11bb0:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11bb6:	68 00 8e 00 00       	push   $0x8e00
   11bbb:	50                   	push   %eax
   11bbc:	6a 08                	push   $0x8
   11bbe:	52                   	push   %edx
   11bbf:	e8 74 f6 ff ff       	call   11238 <gate_desc_set>
   11bc4:	83 c4 10             	add    $0x10,%esp
}
   11bc7:	c9                   	leave  
   11bc8:	c3                   	ret    

00011bc9 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11bc9:	55                   	push   %ebp
   11bca:	89 e5                	mov    %esp,%ebp
   11bcc:	53                   	push   %ebx
   11bcd:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11bd0:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11bd4:	7e 78                	jle    11c4e <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11bd6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11bda:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11bde:	7f 32                	jg     11c12 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11be0:	6a 21                	push   $0x21
   11be2:	e8 ea f7 ff ff       	call   113d1 <inb>
   11be7:	83 c4 04             	add    $0x4,%esp
   11bea:	89 c2                	mov    %eax,%edx
   11bec:	8b 45 08             	mov    0x8(%ebp),%eax
   11bef:	bb 01 00 00 00       	mov    $0x1,%ebx
   11bf4:	89 c1                	mov    %eax,%ecx
   11bf6:	d3 e3                	shl    %cl,%ebx
   11bf8:	89 d8                	mov    %ebx,%eax
   11bfa:	f7 d0                	not    %eax
   11bfc:	21 d0                	and    %edx,%eax
   11bfe:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11c01:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11c05:	50                   	push   %eax
   11c06:	6a 21                	push   $0x21
   11c08:	e8 e1 f7 ff ff       	call   113ee <outb>
   11c0d:	83 c4 08             	add    $0x8,%esp
   11c10:	eb 3d                	jmp    11c4f <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11c12:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11c16:	68 a1 00 00 00       	push   $0xa1
   11c1b:	e8 b1 f7 ff ff       	call   113d1 <inb>
   11c20:	83 c4 04             	add    $0x4,%esp
   11c23:	89 c2                	mov    %eax,%edx
   11c25:	8b 45 08             	mov    0x8(%ebp),%eax
   11c28:	bb 01 00 00 00       	mov    $0x1,%ebx
   11c2d:	89 c1                	mov    %eax,%ecx
   11c2f:	d3 e3                	shl    %cl,%ebx
   11c31:	89 d8                	mov    %ebx,%eax
   11c33:	f7 d0                	not    %eax
   11c35:	21 d0                	and    %edx,%eax
   11c37:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11c3a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11c3e:	50                   	push   %eax
   11c3f:	68 a1 00 00 00       	push   $0xa1
   11c44:	e8 a5 f7 ff ff       	call   113ee <outb>
   11c49:	83 c4 08             	add    $0x8,%esp
   11c4c:	eb 01                	jmp    11c4f <irq_enable+0x86>
        return;
   11c4e:	90                   	nop
    }
}
   11c4f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11c52:	c9                   	leave  
   11c53:	c3                   	ret    

00011c54 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11c54:	55                   	push   %ebp
   11c55:	89 e5                	mov    %esp,%ebp
   11c57:	53                   	push   %ebx
   11c58:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11c5b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11c5f:	7e 74                	jle    11cd5 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11c61:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11c65:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11c69:	7f 30                	jg     11c9b <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11c6b:	6a 21                	push   $0x21
   11c6d:	e8 5f f7 ff ff       	call   113d1 <inb>
   11c72:	83 c4 04             	add    $0x4,%esp
   11c75:	89 c3                	mov    %eax,%ebx
   11c77:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7a:	ba 01 00 00 00       	mov    $0x1,%edx
   11c7f:	89 c1                	mov    %eax,%ecx
   11c81:	d3 e2                	shl    %cl,%edx
   11c83:	89 d0                	mov    %edx,%eax
   11c85:	09 d8                	or     %ebx,%eax
   11c87:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11c8a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11c8e:	50                   	push   %eax
   11c8f:	6a 21                	push   $0x21
   11c91:	e8 58 f7 ff ff       	call   113ee <outb>
   11c96:	83 c4 08             	add    $0x8,%esp
   11c99:	eb 3b                	jmp    11cd6 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11c9b:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11c9f:	68 a1 00 00 00       	push   $0xa1
   11ca4:	e8 28 f7 ff ff       	call   113d1 <inb>
   11ca9:	83 c4 04             	add    $0x4,%esp
   11cac:	89 c3                	mov    %eax,%ebx
   11cae:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb1:	ba 01 00 00 00       	mov    $0x1,%edx
   11cb6:	89 c1                	mov    %eax,%ecx
   11cb8:	d3 e2                	shl    %cl,%edx
   11cba:	89 d0                	mov    %edx,%eax
   11cbc:	09 d8                	or     %ebx,%eax
   11cbe:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11cc1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11cc5:	50                   	push   %eax
   11cc6:	68 a1 00 00 00       	push   $0xa1
   11ccb:	e8 1e f7 ff ff       	call   113ee <outb>
   11cd0:	83 c4 08             	add    $0x8,%esp
   11cd3:	eb 01                	jmp    11cd6 <irq_disable+0x82>
        return;
   11cd5:	90                   	nop
    }
}
   11cd6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11cd9:	c9                   	leave  
   11cda:	c3                   	ret    

00011cdb <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11cdb:	55                   	push   %ebp
   11cdc:	89 e5                	mov    %esp,%ebp
    cli();
   11cde:	e8 2a f7 ff ff       	call   1140d <cli>
}
   11ce3:	90                   	nop
   11ce4:	5d                   	pop    %ebp
   11ce5:	c3                   	ret    

00011ce6 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11ce6:	55                   	push   %ebp
   11ce7:	89 e5                	mov    %esp,%ebp
    sti();
   11ce9:	e8 26 f7 ff ff       	call   11414 <sti>
}
   11cee:	90                   	nop
   11cef:	5d                   	pop    %ebp
   11cf0:	c3                   	ret    

00011cf1 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11cf1:	55                   	push   %ebp
   11cf2:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11cf4:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11cf8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11cfc:	7e 0f                	jle    11d0d <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11cfe:	6a 20                	push   $0x20
   11d00:	68 a0 00 00 00       	push   $0xa0
   11d05:	e8 e4 f6 ff ff       	call   113ee <outb>
   11d0a:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11d0d:	6a 20                	push   $0x20
   11d0f:	6a 20                	push   $0x20
   11d11:	e8 d8 f6 ff ff       	call   113ee <outb>
   11d16:	83 c4 08             	add    $0x8,%esp
}
   11d19:	90                   	nop
   11d1a:	c9                   	leave  
   11d1b:	c3                   	ret    

00011d1c <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11d1c:	55                   	push   %ebp
   11d1d:	89 e5                	mov    %esp,%ebp
   11d1f:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11d22:	e8 34 f7 ff ff       	call   1145b <read_eflags>
   11d27:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11d2a:	e8 ac ff ff ff       	call   11cdb <irq_disable_global>
    return state;
   11d2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d32:	c9                   	leave  
   11d33:	c3                   	ret    

00011d34 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11d34:	55                   	push   %ebp
   11d35:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11d37:	ff 75 08             	pushl  0x8(%ebp)
   11d3a:	e8 2c f7 ff ff       	call   1146b <write_eflags>
   11d3f:	83 c4 04             	add    $0x4,%esp
   11d42:	90                   	nop
   11d43:	c9                   	leave  
   11d44:	c3                   	ret    

00011d45 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11d45:	55                   	push   %ebp
   11d46:	89 e5                	mov    %esp,%ebp
   11d48:	83 ec 08             	sub    $0x8,%esp
   11d4b:	8b 55 08             	mov    0x8(%ebp),%edx
   11d4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d51:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11d55:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11d58:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11d5c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11d60:	ee                   	out    %al,(%dx)
}
   11d61:	90                   	nop
   11d62:	c9                   	leave  
   11d63:	c3                   	ret    

00011d64 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11d64:	55                   	push   %ebp
   11d65:	89 e5                	mov    %esp,%ebp
   11d67:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11d6a:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11d6f:	83 c0 01             	add    $0x1,%eax
   11d72:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11d77:	83 ec 0c             	sub    $0xc,%esp
   11d7a:	6a 20                	push   $0x20
   11d7c:	e8 70 ff ff ff       	call   11cf1 <pic_send_eoi>
   11d81:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11d84:	e8 69 f2 ff ff       	call   10ff2 <task_time_tick>
}
   11d89:	90                   	nop
   11d8a:	c9                   	leave  
   11d8b:	c3                   	ret    

00011d8c <init_pit>:


static void init_pit(void) {
   11d8c:	55                   	push   %ebp
   11d8d:	89 e5                	mov    %esp,%ebp
   11d8f:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11d92:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11d99:	6a 36                	push   $0x36
   11d9b:	6a 43                	push   $0x43
   11d9d:	e8 a3 ff ff ff       	call   11d45 <outb>
   11da2:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11da8:	0f b6 c0             	movzbl %al,%eax
   11dab:	50                   	push   %eax
   11dac:	6a 40                	push   $0x40
   11dae:	e8 92 ff ff ff       	call   11d45 <outb>
   11db3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11db9:	c1 e8 08             	shr    $0x8,%eax
   11dbc:	0f b6 c0             	movzbl %al,%eax
   11dbf:	50                   	push   %eax
   11dc0:	6a 40                	push   $0x40
   11dc2:	e8 7e ff ff ff       	call   11d45 <outb>
   11dc7:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11dca:	83 ec 08             	sub    $0x8,%esp
   11dcd:	68 a8 02 01 00       	push   $0x102a8
   11dd2:	6a 20                	push   $0x20
   11dd4:	e8 bb fd ff ff       	call   11b94 <irq_install>
   11dd9:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11ddc:	83 ec 0c             	sub    $0xc,%esp
   11ddf:	6a 20                	push   $0x20
   11de1:	e8 e3 fd ff ff       	call   11bc9 <irq_enable>
   11de6:	83 c4 10             	add    $0x10,%esp
}
   11de9:	90                   	nop
   11dea:	c9                   	leave  
   11deb:	c3                   	ret    

00011dec <timer_init>:

void timer_init(void) {
   11dec:	55                   	push   %ebp
   11ded:	89 e5                	mov    %esp,%ebp
   11def:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11df2:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   11df9:	00 00 00 
    init_pit();
   11dfc:	e8 8b ff ff ff       	call   11d8c <init_pit>
   11e01:	90                   	nop
   11e02:	c9                   	leave  
   11e03:	c3                   	ret    

00011e04 <list_size>:
static inline int list_size(list_t* list) {
   11e04:	55                   	push   %ebp
   11e05:	89 e5                	mov    %esp,%ebp
    return list->count;
   11e07:	8b 45 08             	mov    0x8(%ebp),%eax
   11e0a:	8b 40 08             	mov    0x8(%eax),%eax
}
   11e0d:	5d                   	pop    %ebp
   11e0e:	c3                   	ret    

00011e0f <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11e0f:	55                   	push   %ebp
   11e10:	89 e5                	mov    %esp,%ebp
    return list->first;
   11e12:	8b 45 08             	mov    0x8(%ebp),%eax
   11e15:	8b 00                	mov    (%eax),%eax
}
   11e17:	5d                   	pop    %ebp
   11e18:	c3                   	ret    

00011e19 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11e19:	55                   	push   %ebp
   11e1a:	89 e5                	mov    %esp,%ebp
    return list->last;
   11e1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1f:	8b 40 04             	mov    0x4(%eax),%eax
}
   11e22:	5d                   	pop    %ebp
   11e23:	c3                   	ret    

00011e24 <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   11e24:	55                   	push   %ebp
   11e25:	89 e5                	mov    %esp,%ebp
   11e27:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11e2a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2d:	8b 40 50             	mov    0x50(%eax),%eax
   11e30:	85 c0                	test   %eax,%eax
   11e32:	75 19                	jne    11e4d <kernel_init+0x29>
   11e34:	68 b8 36 01 00       	push   $0x136b8
   11e39:	68 a8 37 01 00       	push   $0x137a8
   11e3e:	6a 12                	push   $0x12
   11e40:	68 dc 36 01 00       	push   $0x136dc
   11e45:	e8 b0 0c 00 00       	call   12afa <pannic>
   11e4a:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11e4d:	90                   	nop


    log_init();
   11e4e:	e8 0f 0f 00 00       	call   12d62 <log_init>

    memory_init(boot_info);
   11e53:	83 ec 0c             	sub    $0xc,%esp
   11e56:	ff 75 08             	pushl  0x8(%ebp)
   11e59:	e8 fe e9 ff ff       	call   1085c <memory_init>
   11e5e:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11e61:	e8 86 f4 ff ff       	call   112ec <cpu_init>


    irq_init();
   11e66:	e8 69 fb ff ff       	call   119d4 <irq_init>
    timer_init();
   11e6b:	e8 7c ff ff ff       	call   11dec <timer_init>

    task_manager_init();
   11e70:	e8 94 ee ff ff       	call   10d09 <task_manager_init>
}
   11e75:	90                   	nop
   11e76:	c9                   	leave  
   11e77:	c3                   	ret    

00011e78 <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   11e78:	55                   	push   %ebp
   11e79:	89 e5                	mov    %esp,%ebp
   11e7b:	56                   	push   %esi
   11e7c:	53                   	push   %ebx
   11e7d:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11e80:	83 ec 0c             	sub    $0xc,%esp
   11e83:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11e86:	50                   	push   %eax
   11e87:	e8 b7 0c 00 00       	call   12b43 <list_init>
   11e8c:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11e8f:	83 ec 0c             	sub    $0xc,%esp
   11e92:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11e95:	50                   	push   %eax
   11e96:	e8 69 ff ff ff       	call   11e04 <list_size>
   11e9b:	83 c4 10             	add    $0x10,%esp
   11e9e:	89 c6                	mov    %eax,%esi
   11ea0:	83 ec 0c             	sub    $0xc,%esp
   11ea3:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11ea6:	50                   	push   %eax
   11ea7:	e8 6d ff ff ff       	call   11e19 <list_last>
   11eac:	83 c4 10             	add    $0x10,%esp
   11eaf:	89 c3                	mov    %eax,%ebx
   11eb1:	83 ec 0c             	sub    $0xc,%esp
   11eb4:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11eb7:	50                   	push   %eax
   11eb8:	e8 52 ff ff ff       	call   11e0f <list_first>
   11ebd:	83 c4 10             	add    $0x10,%esp
   11ec0:	56                   	push   %esi
   11ec1:	53                   	push   %ebx
   11ec2:	50                   	push   %eax
   11ec3:	68 24 37 01 00       	push   $0x13724
   11ec8:	e8 37 0f 00 00       	call   12e04 <log_printf>
   11ecd:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11ed0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ed7:	eb 3b                	jmp    11f14 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   11ed9:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11edc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11edf:	c1 e2 03             	shl    $0x3,%edx
   11ee2:	01 d0                	add    %edx,%eax
   11ee4:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11ee7:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11eea:	83 ec 04             	sub    $0x4,%esp
   11eed:	50                   	push   %eax
   11eee:	ff 75 f4             	pushl  -0xc(%ebp)
   11ef1:	68 4d 37 01 00       	push   $0x1374d
   11ef6:	e8 09 0f 00 00       	call   12e04 <log_printf>
   11efb:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11efe:	83 ec 08             	sub    $0x8,%esp
   11f01:	ff 75 dc             	pushl  -0x24(%ebp)
   11f04:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11f07:	50                   	push   %eax
   11f08:	e8 59 0c 00 00       	call   12b66 <list_insert_front>
   11f0d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11f10:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f14:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11f18:	7e bf                	jle    11ed9 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   11f1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f21:	eb 33                	jmp    11f56 <link_test+0xde>
        list_remove_front(&list);
   11f23:	83 ec 0c             	sub    $0xc,%esp
   11f26:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11f29:	50                   	push   %eax
   11f2a:	e8 f9 0c 00 00       	call   12c28 <list_remove_front>
   11f2f:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   11f32:	83 ec 0c             	sub    $0xc,%esp
   11f35:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11f38:	50                   	push   %eax
   11f39:	e8 c6 fe ff ff       	call   11e04 <list_size>
   11f3e:	83 c4 10             	add    $0x10,%esp
   11f41:	83 ec 08             	sub    $0x8,%esp
   11f44:	50                   	push   %eax
   11f45:	68 55 37 01 00       	push   $0x13755
   11f4a:	e8 b5 0e 00 00       	call   12e04 <log_printf>
   11f4f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11f52:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f56:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11f5a:	7e c7                	jle    11f23 <link_test+0xab>
    }

    list_init(&list);
   11f5c:	83 ec 0c             	sub    $0xc,%esp
   11f5f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11f62:	50                   	push   %eax
   11f63:	e8 db 0b 00 00       	call   12b43 <list_init>
   11f68:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11f6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11f72:	eb 3b                	jmp    11faf <link_test+0x137>
        list_node_t* node = &nodes[i];
   11f74:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11f77:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11f7a:	c1 e2 03             	shl    $0x3,%edx
   11f7d:	01 d0                	add    %edx,%eax
   11f7f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11f82:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11f85:	83 ec 04             	sub    $0x4,%esp
   11f88:	50                   	push   %eax
   11f89:	ff 75 ec             	pushl  -0x14(%ebp)
   11f8c:	68 4d 37 01 00       	push   $0x1374d
   11f91:	e8 6e 0e 00 00       	call   12e04 <log_printf>
   11f96:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11f99:	83 ec 08             	sub    $0x8,%esp
   11f9c:	ff 75 e0             	pushl  -0x20(%ebp)
   11f9f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11fa2:	50                   	push   %eax
   11fa3:	e8 1d 0c 00 00       	call   12bc5 <list_insert_back>
   11fa8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11fab:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11faf:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11fb3:	7e bf                	jle    11f74 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11fb5:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11fbc:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11fc3:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11fca:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11fd1:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11fd4:	83 c0 04             	add    $0x4,%eax
   11fd7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11fda:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11fde:	74 08                	je     11fe8 <link_test+0x170>
   11fe0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11fe3:	83 e8 04             	sub    $0x4,%eax
   11fe6:	eb 05                	jmp    11fed <link_test+0x175>
   11fe8:	b8 00 00 00 00       	mov    $0x0,%eax
   11fed:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11ff0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ff3:	8b 00                	mov    (%eax),%eax
   11ff5:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11ffa:	74 10                	je     1200c <link_test+0x194>
        log_printf("error!");
   11ffc:	83 ec 0c             	sub    $0xc,%esp
   11fff:	68 5a 37 01 00       	push   $0x1375a
   12004:	e8 fb 0d 00 00       	call   12e04 <log_printf>
   12009:	83 c4 10             	add    $0x10,%esp
    }

}
   1200c:	90                   	nop
   1200d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12010:	5b                   	pop    %ebx
   12011:	5e                   	pop    %esi
   12012:	5d                   	pop    %ebp
   12013:	c3                   	ret    

00012014 <move_to_first_task>:


void move_to_first_task(void) {
   12014:	55                   	push   %ebp
   12015:	89 e5                	mov    %esp,%ebp
   12017:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   1201a:	e8 0d ef ff ff       	call   10f2c <task_current>
   1201f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   12022:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12026:	75 19                	jne    12041 <move_to_first_task+0x2d>
   12028:	68 61 37 01 00       	push   $0x13761
   1202d:	68 b4 37 01 00       	push   $0x137b4
   12032:	6a 68                	push   $0x68
   12034:	68 dc 36 01 00       	push   $0x136dc
   12039:	e8 bc 0a 00 00       	call   12afa <pannic>
   1203e:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   12041:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12044:	83 c0 48             	add    $0x48,%eax
   12047:	89 45 f0             	mov    %eax,-0x10(%ebp)

    __asm__ __volatile__(
        "jmp *%[ip]"::[ip]"r"(tss->eip)
   1204a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1204d:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   12050:	ff e0                	jmp    *%eax
    );

    // far_jump((uint32_t)tss, 0);
}
   12052:	90                   	nop
   12053:	c9                   	leave  
   12054:	c3                   	ret    

00012055 <init_main>:


void init_main(void) {
   12055:	55                   	push   %ebp
   12056:	89 e5                	mov    %esp,%ebp
   12058:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   1205b:	83 ec 0c             	sub    $0xc,%esp
   1205e:	68 6b 37 01 00       	push   $0x1376b
   12063:	e8 9c 0d 00 00       	call   12e04 <log_printf>
   12068:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   1206b:	83 ec 04             	sub    $0x4,%esp
   1206e:	68 81 37 01 00       	push   $0x13781
   12073:	68 86 37 01 00       	push   $0x13786
   12078:	68 8c 37 01 00       	push   $0x1378c
   1207d:	e8 82 0d 00 00       	call   12e04 <log_printf>
   12082:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   12085:	83 ec 0c             	sub    $0xc,%esp
   12088:	6a 61                	push   $0x61
   1208a:	68 56 34 12 00       	push   $0x123456
   1208f:	6a 85                	push   $0xffffff85
   12091:	68 39 30 00 00       	push   $0x3039
   12096:	68 9b 37 01 00       	push   $0x1379b
   1209b:	e8 64 0d 00 00       	call   12e04 <log_printf>
   120a0:	83 c4 20             	add    $0x20,%esp

    //
    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
    //

    task_first_init();
   120a3:	e8 14 ed ff ff       	call   10dbc <task_first_init>
    move_to_first_task();
   120a8:	e8 67 ff ff ff       	call   12014 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   120ad:	90                   	nop
   120ae:	c9                   	leave  
   120af:	c3                   	ret    

000120b0 <list_size>:
static inline int list_size(list_t* list) {
   120b0:	55                   	push   %ebp
   120b1:	89 e5                	mov    %esp,%ebp
    return list->count;
   120b3:	8b 45 08             	mov    0x8(%ebp),%eax
   120b6:	8b 40 08             	mov    0x8(%eax),%eax
}
   120b9:	5d                   	pop    %ebp
   120ba:	c3                   	ret    

000120bb <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   120bb:	55                   	push   %ebp
   120bc:	89 e5                	mov    %esp,%ebp
   120be:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   120c1:	8b 45 08             	mov    0x8(%ebp),%eax
   120c4:	83 ec 08             	sub    $0x8,%esp
   120c7:	ff 75 0c             	pushl  0xc(%ebp)
   120ca:	50                   	push   %eax
   120cb:	e8 0a 05 00 00       	call   125da <kstrcpy>
   120d0:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   120d3:	8b 45 08             	mov    0x8(%ebp),%eax
   120d6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   120dd:	8b 45 08             	mov    0x8(%ebp),%eax
   120e0:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   120e7:	8b 45 08             	mov    0x8(%ebp),%eax
   120ea:	83 c0 48             	add    $0x48,%eax
   120ed:	83 ec 0c             	sub    $0xc,%esp
   120f0:	50                   	push   %eax
   120f1:	e8 4d 0a 00 00       	call   12b43 <list_init>
   120f6:	83 c4 10             	add    $0x10,%esp
}
   120f9:	90                   	nop
   120fa:	c9                   	leave  
   120fb:	c3                   	ret    

000120fc <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   120fc:	55                   	push   %ebp
   120fd:	89 e5                	mov    %esp,%ebp
   120ff:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12102:	e8 15 fc ff ff       	call   11d1c <irq_enter_protection>
   12107:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   1210a:	e8 1d ee ff ff       	call   10f2c <task_current>
   1210f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   12112:	8b 45 08             	mov    0x8(%ebp),%eax
   12115:	8b 40 44             	mov    0x44(%eax),%eax
   12118:	85 c0                	test   %eax,%eax
   1211a:	75 15                	jne    12131 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   1211c:	8b 45 08             	mov    0x8(%ebp),%eax
   1211f:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   12126:	8b 45 08             	mov    0x8(%ebp),%eax
   12129:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1212c:	89 50 40             	mov    %edx,0x40(%eax)
   1212f:	eb 48                	jmp    12179 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   12131:	8b 45 08             	mov    0x8(%ebp),%eax
   12134:	8b 40 40             	mov    0x40(%eax),%eax
   12137:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1213a:	75 11                	jne    1214d <mutex_acquire+0x51>
        mutex->locked_count++;
   1213c:	8b 45 08             	mov    0x8(%ebp),%eax
   1213f:	8b 40 44             	mov    0x44(%eax),%eax
   12142:	8d 50 01             	lea    0x1(%eax),%edx
   12145:	8b 45 08             	mov    0x8(%ebp),%eax
   12148:	89 50 44             	mov    %edx,0x44(%eax)
   1214b:	eb 2c                	jmp    12179 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   1214d:	83 ec 0c             	sub    $0xc,%esp
   12150:	ff 75 f0             	pushl  -0x10(%ebp)
   12153:	e8 66 ed ff ff       	call   10ebe <task_set_blocked>
   12158:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   1215b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1215e:	8d 50 34             	lea    0x34(%eax),%edx
   12161:	8b 45 08             	mov    0x8(%ebp),%eax
   12164:	83 c0 48             	add    $0x48,%eax
   12167:	83 ec 08             	sub    $0x8,%esp
   1216a:	52                   	push   %edx
   1216b:	50                   	push   %eax
   1216c:	e8 54 0a 00 00       	call   12bc5 <list_insert_back>
   12171:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12174:	e8 1e ee ff ff       	call   10f97 <task_dispatch>
    }

    irq_leave_protection(state);
   12179:	83 ec 0c             	sub    $0xc,%esp
   1217c:	ff 75 f4             	pushl  -0xc(%ebp)
   1217f:	e8 b0 fb ff ff       	call   11d34 <irq_leave_protection>
   12184:	83 c4 10             	add    $0x10,%esp
}
   12187:	90                   	nop
   12188:	c9                   	leave  
   12189:	c3                   	ret    

0001218a <mutex_release>:

void mutex_release(mutex_t* mutex) {
   1218a:	55                   	push   %ebp
   1218b:	89 e5                	mov    %esp,%ebp
   1218d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12190:	e8 87 fb ff ff       	call   11d1c <irq_enter_protection>
   12195:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12198:	e8 8f ed ff ff       	call   10f2c <task_current>
   1219d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   121a0:	8b 45 08             	mov    0x8(%ebp),%eax
   121a3:	8b 40 40             	mov    0x40(%eax),%eax
   121a6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121a9:	0f 85 8a 00 00 00    	jne    12239 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   121af:	8b 45 08             	mov    0x8(%ebp),%eax
   121b2:	8b 40 44             	mov    0x44(%eax),%eax
   121b5:	8d 50 ff             	lea    -0x1(%eax),%edx
   121b8:	8b 45 08             	mov    0x8(%ebp),%eax
   121bb:	89 50 44             	mov    %edx,0x44(%eax)
   121be:	8b 45 08             	mov    0x8(%ebp),%eax
   121c1:	8b 40 44             	mov    0x44(%eax),%eax
   121c4:	85 c0                	test   %eax,%eax
   121c6:	75 71                	jne    12239 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   121c8:	8b 45 08             	mov    0x8(%ebp),%eax
   121cb:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   121d2:	8b 45 08             	mov    0x8(%ebp),%eax
   121d5:	83 c0 48             	add    $0x48,%eax
   121d8:	83 ec 0c             	sub    $0xc,%esp
   121db:	50                   	push   %eax
   121dc:	e8 cf fe ff ff       	call   120b0 <list_size>
   121e1:	83 c4 10             	add    $0x10,%esp
   121e4:	85 c0                	test   %eax,%eax
   121e6:	74 51                	je     12239 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   121e8:	8b 45 08             	mov    0x8(%ebp),%eax
   121eb:	83 c0 48             	add    $0x48,%eax
   121ee:	83 ec 0c             	sub    $0xc,%esp
   121f1:	50                   	push   %eax
   121f2:	e8 31 0a 00 00       	call   12c28 <list_remove_front>
   121f7:	83 c4 10             	add    $0x10,%esp
   121fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   121fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12201:	74 08                	je     1220b <mutex_release+0x81>
   12203:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12206:	83 e8 34             	sub    $0x34,%eax
   12209:	eb 05                	jmp    12210 <mutex_release+0x86>
   1220b:	b8 00 00 00 00       	mov    $0x0,%eax
   12210:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12213:	83 ec 0c             	sub    $0xc,%esp
   12216:	ff 75 e8             	pushl  -0x18(%ebp)
   12219:	e8 6c ec ff ff       	call   10e8a <task_set_ready>
   1221e:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12221:	8b 45 08             	mov    0x8(%ebp),%eax
   12224:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12227:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   1222a:	8b 45 08             	mov    0x8(%ebp),%eax
   1222d:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   12234:	e8 5e ed ff ff       	call   10f97 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   12239:	83 ec 0c             	sub    $0xc,%esp
   1223c:	ff 75 f4             	pushl  -0xc(%ebp)
   1223f:	e8 f0 fa ff ff       	call   11d34 <irq_leave_protection>
   12244:	83 c4 10             	add    $0x10,%esp
   12247:	90                   	nop
   12248:	c9                   	leave  
   12249:	c3                   	ret    

0001224a <list_size>:
static inline int list_size(list_t* list) {
   1224a:	55                   	push   %ebp
   1224b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1224d:	8b 45 08             	mov    0x8(%ebp),%eax
   12250:	8b 40 08             	mov    0x8(%eax),%eax
}
   12253:	5d                   	pop    %ebp
   12254:	c3                   	ret    

00012255 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   12255:	55                   	push   %ebp
   12256:	89 e5                	mov    %esp,%ebp
   12258:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1225b:	8b 45 08             	mov    0x8(%ebp),%eax
   1225e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12261:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   12263:	8b 45 08             	mov    0x8(%ebp),%eax
   12266:	83 c0 04             	add    $0x4,%eax
   12269:	83 ec 0c             	sub    $0xc,%esp
   1226c:	50                   	push   %eax
   1226d:	e8 d1 08 00 00       	call   12b43 <list_init>
   12272:	83 c4 10             	add    $0x10,%esp
}
   12275:	90                   	nop
   12276:	c9                   	leave  
   12277:	c3                   	ret    

00012278 <sem_wait>:


void sem_wait(sem_t* sem) {
   12278:	55                   	push   %ebp
   12279:	89 e5                	mov    %esp,%ebp
   1227b:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   1227e:	e8 99 fa ff ff       	call   11d1c <irq_enter_protection>
   12283:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   12286:	8b 45 08             	mov    0x8(%ebp),%eax
   12289:	8b 00                	mov    (%eax),%eax
   1228b:	85 c0                	test   %eax,%eax
   1228d:	7e 0f                	jle    1229e <sem_wait+0x26>
        sem->count--;
   1228f:	8b 45 08             	mov    0x8(%ebp),%eax
   12292:	8b 00                	mov    (%eax),%eax
   12294:	8d 50 ff             	lea    -0x1(%eax),%edx
   12297:	8b 45 08             	mov    0x8(%ebp),%eax
   1229a:	89 10                	mov    %edx,(%eax)
   1229c:	eb 34                	jmp    122d2 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   1229e:	e8 89 ec ff ff       	call   10f2c <task_current>
   122a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   122a6:	83 ec 0c             	sub    $0xc,%esp
   122a9:	ff 75 f0             	pushl  -0x10(%ebp)
   122ac:	e8 0d ec ff ff       	call   10ebe <task_set_blocked>
   122b1:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   122b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122b7:	8d 50 34             	lea    0x34(%eax),%edx
   122ba:	8b 45 08             	mov    0x8(%ebp),%eax
   122bd:	83 c0 04             	add    $0x4,%eax
   122c0:	83 ec 08             	sub    $0x8,%esp
   122c3:	52                   	push   %edx
   122c4:	50                   	push   %eax
   122c5:	e8 fb 08 00 00       	call   12bc5 <list_insert_back>
   122ca:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   122cd:	e8 c5 ec ff ff       	call   10f97 <task_dispatch>
    }

    irq_leave_protection(state);
   122d2:	83 ec 0c             	sub    $0xc,%esp
   122d5:	ff 75 f4             	pushl  -0xc(%ebp)
   122d8:	e8 57 fa ff ff       	call   11d34 <irq_leave_protection>
   122dd:	83 c4 10             	add    $0x10,%esp
}
   122e0:	90                   	nop
   122e1:	c9                   	leave  
   122e2:	c3                   	ret    

000122e3 <sem_notify>:


void sem_notify(sem_t* sem) {
   122e3:	55                   	push   %ebp
   122e4:	89 e5                	mov    %esp,%ebp
   122e6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   122e9:	e8 2e fa ff ff       	call   11d1c <irq_enter_protection>
   122ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   122f1:	8b 45 08             	mov    0x8(%ebp),%eax
   122f4:	83 c0 04             	add    $0x4,%eax
   122f7:	83 ec 0c             	sub    $0xc,%esp
   122fa:	50                   	push   %eax
   122fb:	e8 4a ff ff ff       	call   1224a <list_size>
   12300:	83 c4 10             	add    $0x10,%esp
   12303:	85 c0                	test   %eax,%eax
   12305:	74 40                	je     12347 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   12307:	8b 45 08             	mov    0x8(%ebp),%eax
   1230a:	83 c0 04             	add    $0x4,%eax
   1230d:	83 ec 0c             	sub    $0xc,%esp
   12310:	50                   	push   %eax
   12311:	e8 12 09 00 00       	call   12c28 <list_remove_front>
   12316:	83 c4 10             	add    $0x10,%esp
   12319:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   1231c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12320:	74 08                	je     1232a <sem_notify+0x47>
   12322:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12325:	83 e8 34             	sub    $0x34,%eax
   12328:	eb 05                	jmp    1232f <sem_notify+0x4c>
   1232a:	b8 00 00 00 00       	mov    $0x0,%eax
   1232f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12332:	83 ec 0c             	sub    $0xc,%esp
   12335:	ff 75 ec             	pushl  -0x14(%ebp)
   12338:	e8 4d eb ff ff       	call   10e8a <task_set_ready>
   1233d:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12340:	e8 52 ec ff ff       	call   10f97 <task_dispatch>
   12345:	eb 0d                	jmp    12354 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   12347:	8b 45 08             	mov    0x8(%ebp),%eax
   1234a:	8b 00                	mov    (%eax),%eax
   1234c:	8d 50 01             	lea    0x1(%eax),%edx
   1234f:	8b 45 08             	mov    0x8(%ebp),%eax
   12352:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   12354:	83 ec 0c             	sub    $0xc,%esp
   12357:	ff 75 f4             	pushl  -0xc(%ebp)
   1235a:	e8 d5 f9 ff ff       	call   11d34 <irq_leave_protection>
   1235f:	83 c4 10             	add    $0x10,%esp
}
   12362:	90                   	nop
   12363:	c9                   	leave  
   12364:	c3                   	ret    

00012365 <sem_count>:

int sem_count(sem_t* sem) {
   12365:	55                   	push   %ebp
   12366:	89 e5                	mov    %esp,%ebp
   12368:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1236b:	e8 ac f9 ff ff       	call   11d1c <irq_enter_protection>
   12370:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   12373:	8b 45 08             	mov    0x8(%ebp),%eax
   12376:	8b 00                	mov    (%eax),%eax
   12378:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   1237b:	83 ec 0c             	sub    $0xc,%esp
   1237e:	ff 75 f4             	pushl  -0xc(%ebp)
   12381:	e8 ae f9 ff ff       	call   11d34 <irq_leave_protection>
   12386:	83 c4 10             	add    $0x10,%esp

    return count;
   12389:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1238c:	c9                   	leave  
   1238d:	c3                   	ret    

0001238e <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   1238e:	55                   	push   %ebp
   1238f:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   12391:	8b 45 08             	mov    0x8(%ebp),%eax
   12394:	83 c0 07             	add    $0x7,%eax
   12397:	8d 50 07             	lea    0x7(%eax),%edx
   1239a:	85 c0                	test   %eax,%eax
   1239c:	0f 48 c2             	cmovs  %edx,%eax
   1239f:	c1 f8 03             	sar    $0x3,%eax
}
   123a2:	5d                   	pop    %ebp
   123a3:	c3                   	ret    

000123a4 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   123a4:	55                   	push   %ebp
   123a5:	89 e5                	mov    %esp,%ebp
   123a7:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   123aa:	8b 45 08             	mov    0x8(%ebp),%eax
   123ad:	8b 55 10             	mov    0x10(%ebp),%edx
   123b0:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   123b2:	8b 45 08             	mov    0x8(%ebp),%eax
   123b5:	8b 55 0c             	mov    0xc(%ebp),%edx
   123b8:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   123bb:	8b 45 08             	mov    0x8(%ebp),%eax
   123be:	8b 00                	mov    (%eax),%eax
   123c0:	50                   	push   %eax
   123c1:	e8 c8 ff ff ff       	call   1238e <bitmap_byte_count>
   123c6:	83 c4 04             	add    $0x4,%esp
   123c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   123cc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   123d0:	74 07                	je     123d9 <bitmap_init+0x35>
   123d2:	ba ff 00 00 00       	mov    $0xff,%edx
   123d7:	eb 05                	jmp    123de <bitmap_init+0x3a>
   123d9:	ba 00 00 00 00       	mov    $0x0,%edx
   123de:	8b 45 08             	mov    0x8(%ebp),%eax
   123e1:	8b 40 04             	mov    0x4(%eax),%eax
   123e4:	83 ec 04             	sub    $0x4,%esp
   123e7:	ff 75 f4             	pushl  -0xc(%ebp)
   123ea:	52                   	push   %edx
   123eb:	50                   	push   %eax
   123ec:	e8 a4 03 00 00       	call   12795 <kmemset>
   123f1:	83 c4 10             	add    $0x10,%esp
}
   123f4:	90                   	nop
   123f5:	c9                   	leave  
   123f6:	c3                   	ret    

000123f7 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   123f7:	55                   	push   %ebp
   123f8:	89 e5                	mov    %esp,%ebp
   123fa:	56                   	push   %esi
   123fb:	53                   	push   %ebx
   123fc:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   123ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12406:	e9 a2 00 00 00       	jmp    124ad <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   1240b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1240f:	74 4a                	je     1245b <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12411:	8b 45 08             	mov    0x8(%ebp),%eax
   12414:	8b 50 04             	mov    0x4(%eax),%edx
   12417:	8b 45 0c             	mov    0xc(%ebp),%eax
   1241a:	8d 48 07             	lea    0x7(%eax),%ecx
   1241d:	85 c0                	test   %eax,%eax
   1241f:	0f 48 c1             	cmovs  %ecx,%eax
   12422:	c1 f8 03             	sar    $0x3,%eax
   12425:	89 c3                	mov    %eax,%ebx
   12427:	89 d8                	mov    %ebx,%eax
   12429:	01 d0                	add    %edx,%eax
   1242b:	0f b6 00             	movzbl (%eax),%eax
   1242e:	89 c6                	mov    %eax,%esi
   12430:	8b 45 0c             	mov    0xc(%ebp),%eax
   12433:	99                   	cltd   
   12434:	c1 ea 1d             	shr    $0x1d,%edx
   12437:	01 d0                	add    %edx,%eax
   12439:	83 e0 07             	and    $0x7,%eax
   1243c:	29 d0                	sub    %edx,%eax
   1243e:	ba 01 00 00 00       	mov    $0x1,%edx
   12443:	89 c1                	mov    %eax,%ecx
   12445:	d3 e2                	shl    %cl,%edx
   12447:	89 d0                	mov    %edx,%eax
   12449:	89 f2                	mov    %esi,%edx
   1244b:	09 c2                	or     %eax,%edx
   1244d:	8b 45 08             	mov    0x8(%ebp),%eax
   12450:	8b 40 04             	mov    0x4(%eax),%eax
   12453:	89 d9                	mov    %ebx,%ecx
   12455:	01 c8                	add    %ecx,%eax
   12457:	88 10                	mov    %dl,(%eax)
   12459:	eb 4a                	jmp    124a5 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1245b:	8b 45 08             	mov    0x8(%ebp),%eax
   1245e:	8b 50 04             	mov    0x4(%eax),%edx
   12461:	8b 45 0c             	mov    0xc(%ebp),%eax
   12464:	8d 48 07             	lea    0x7(%eax),%ecx
   12467:	85 c0                	test   %eax,%eax
   12469:	0f 48 c1             	cmovs  %ecx,%eax
   1246c:	c1 f8 03             	sar    $0x3,%eax
   1246f:	89 c3                	mov    %eax,%ebx
   12471:	89 d8                	mov    %ebx,%eax
   12473:	01 d0                	add    %edx,%eax
   12475:	0f b6 00             	movzbl (%eax),%eax
   12478:	89 c6                	mov    %eax,%esi
   1247a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1247d:	99                   	cltd   
   1247e:	c1 ea 1d             	shr    $0x1d,%edx
   12481:	01 d0                	add    %edx,%eax
   12483:	83 e0 07             	and    $0x7,%eax
   12486:	29 d0                	sub    %edx,%eax
   12488:	ba 01 00 00 00       	mov    $0x1,%edx
   1248d:	89 c1                	mov    %eax,%ecx
   1248f:	d3 e2                	shl    %cl,%edx
   12491:	89 d0                	mov    %edx,%eax
   12493:	f7 d0                	not    %eax
   12495:	89 f2                	mov    %esi,%edx
   12497:	21 c2                	and    %eax,%edx
   12499:	8b 45 08             	mov    0x8(%ebp),%eax
   1249c:	8b 40 04             	mov    0x4(%eax),%eax
   1249f:	89 d9                	mov    %ebx,%ecx
   124a1:	01 c8                	add    %ecx,%eax
   124a3:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   124a5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124a9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   124ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124b0:	3b 45 10             	cmp    0x10(%ebp),%eax
   124b3:	7d 0e                	jge    124c3 <bitmap_set_bit+0xcc>
   124b5:	8b 45 08             	mov    0x8(%ebp),%eax
   124b8:	8b 00                	mov    (%eax),%eax
   124ba:	39 45 0c             	cmp    %eax,0xc(%ebp)
   124bd:	0f 8c 48 ff ff ff    	jl     1240b <bitmap_set_bit+0x14>
        }
    }
}
   124c3:	90                   	nop
   124c4:	83 c4 10             	add    $0x10,%esp
   124c7:	5b                   	pop    %ebx
   124c8:	5e                   	pop    %esi
   124c9:	5d                   	pop    %ebp
   124ca:	c3                   	ret    

000124cb <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   124cb:	55                   	push   %ebp
   124cc:	89 e5                	mov    %esp,%ebp
   124ce:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   124cf:	8b 45 08             	mov    0x8(%ebp),%eax
   124d2:	8b 50 04             	mov    0x4(%eax),%edx
   124d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   124d8:	8d 48 07             	lea    0x7(%eax),%ecx
   124db:	85 c0                	test   %eax,%eax
   124dd:	0f 48 c1             	cmovs  %ecx,%eax
   124e0:	c1 f8 03             	sar    $0x3,%eax
   124e3:	01 d0                	add    %edx,%eax
   124e5:	0f b6 00             	movzbl (%eax),%eax
   124e8:	0f b6 d8             	movzbl %al,%ebx
   124eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ee:	99                   	cltd   
   124ef:	c1 ea 1d             	shr    $0x1d,%edx
   124f2:	01 d0                	add    %edx,%eax
   124f4:	83 e0 07             	and    $0x7,%eax
   124f7:	29 d0                	sub    %edx,%eax
   124f9:	89 c1                	mov    %eax,%ecx
   124fb:	d3 fb                	sar    %cl,%ebx
   124fd:	89 d8                	mov    %ebx,%eax
   124ff:	83 e0 01             	and    $0x1,%eax
}
   12502:	5b                   	pop    %ebx
   12503:	5d                   	pop    %ebp
   12504:	c3                   	ret    

00012505 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   12505:	55                   	push   %ebp
   12506:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12508:	ff 75 0c             	pushl  0xc(%ebp)
   1250b:	ff 75 08             	pushl  0x8(%ebp)
   1250e:	e8 b8 ff ff ff       	call   124cb <bitmap_get_bit>
   12513:	83 c4 08             	add    $0x8,%esp
   12516:	85 c0                	test   %eax,%eax
   12518:	0f 95 c0             	setne  %al
   1251b:	0f b6 c0             	movzbl %al,%eax
}
   1251e:	c9                   	leave  
   1251f:	c3                   	ret    

00012520 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12520:	55                   	push   %ebp
   12521:	89 e5                	mov    %esp,%ebp
   12523:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12526:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1252d:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   12534:	e9 85 00 00 00       	jmp    125be <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12539:	ff 75 fc             	pushl  -0x4(%ebp)
   1253c:	ff 75 08             	pushl  0x8(%ebp)
   1253f:	e8 87 ff ff ff       	call   124cb <bitmap_get_bit>
   12544:	83 c4 08             	add    $0x8,%esp
   12547:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1254a:	74 06                	je     12552 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   1254c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12550:	eb 6c                	jmp    125be <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   12552:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12555:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12558:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1255f:	eb 27                	jmp    12588 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12561:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12564:	8d 50 01             	lea    0x1(%eax),%edx
   12567:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1256a:	50                   	push   %eax
   1256b:	ff 75 08             	pushl  0x8(%ebp)
   1256e:	e8 58 ff ff ff       	call   124cb <bitmap_get_bit>
   12573:	83 c4 08             	add    $0x8,%esp
   12576:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12579:	74 09                	je     12584 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   1257b:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12582:	eb 16                	jmp    1259a <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12584:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12588:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1258b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1258e:	7d 0a                	jge    1259a <bitmap_alloc_nbits+0x7a>
   12590:	8b 45 08             	mov    0x8(%ebp),%eax
   12593:	8b 00                	mov    (%eax),%eax
   12595:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12598:	7c c7                	jl     12561 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   1259a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1259d:	3b 45 10             	cmp    0x10(%ebp),%eax
   125a0:	7c 1c                	jl     125be <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   125a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a5:	f7 d0                	not    %eax
   125a7:	50                   	push   %eax
   125a8:	ff 75 10             	pushl  0x10(%ebp)
   125ab:	ff 75 f8             	pushl  -0x8(%ebp)
   125ae:	ff 75 08             	pushl  0x8(%ebp)
   125b1:	e8 41 fe ff ff       	call   123f7 <bitmap_set_bit>
   125b6:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   125b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125bc:	eb 13                	jmp    125d1 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   125be:	8b 45 08             	mov    0x8(%ebp),%eax
   125c1:	8b 00                	mov    (%eax),%eax
   125c3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   125c6:	0f 8c 6d ff ff ff    	jl     12539 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   125cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   125d1:	c9                   	leave  
   125d2:	c3                   	ret    

000125d3 <hlt>:
static inline void hlt(void) {
   125d3:	55                   	push   %ebp
   125d4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   125d6:	f4                   	hlt    
}
   125d7:	90                   	nop
   125d8:	5d                   	pop    %ebp
   125d9:	c3                   	ret    

000125da <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   125da:	55                   	push   %ebp
   125db:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   125dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125e1:	74 3b                	je     1261e <kstrcpy+0x44>
   125e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125e7:	74 35                	je     1261e <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   125e9:	eb 17                	jmp    12602 <kstrcpy+0x28>
        *dest++ = *src++;
   125eb:	8b 55 0c             	mov    0xc(%ebp),%edx
   125ee:	8d 42 01             	lea    0x1(%edx),%eax
   125f1:	89 45 0c             	mov    %eax,0xc(%ebp)
   125f4:	8b 45 08             	mov    0x8(%ebp),%eax
   125f7:	8d 48 01             	lea    0x1(%eax),%ecx
   125fa:	89 4d 08             	mov    %ecx,0x8(%ebp)
   125fd:	0f b6 12             	movzbl (%edx),%edx
   12600:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12602:	8b 45 08             	mov    0x8(%ebp),%eax
   12605:	0f b6 00             	movzbl (%eax),%eax
   12608:	84 c0                	test   %al,%al
   1260a:	74 0a                	je     12616 <kstrcpy+0x3c>
   1260c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260f:	0f b6 00             	movzbl (%eax),%eax
   12612:	84 c0                	test   %al,%al
   12614:	75 d5                	jne    125eb <kstrcpy+0x11>
    }
    *dest = '\0';
   12616:	8b 45 08             	mov    0x8(%ebp),%eax
   12619:	c6 00 00             	movb   $0x0,(%eax)
   1261c:	eb 01                	jmp    1261f <kstrcpy+0x45>
        return;
   1261e:	90                   	nop
}
   1261f:	5d                   	pop    %ebp
   12620:	c3                   	ret    

00012621 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12621:	55                   	push   %ebp
   12622:	89 e5                	mov    %esp,%ebp
   12624:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12627:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1262b:	74 61                	je     1268e <kstrncpy+0x6d>
   1262d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12631:	74 5b                	je     1268e <kstrncpy+0x6d>
   12633:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12637:	74 55                	je     1268e <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   12639:	8b 45 08             	mov    0x8(%ebp),%eax
   1263c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   1263f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12642:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   12645:	eb 17                	jmp    1265e <kstrncpy+0x3d>
        *d++ = *s++;
   12647:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1264a:	8d 42 01             	lea    0x1(%edx),%eax
   1264d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12650:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12653:	8d 48 01             	lea    0x1(%eax),%ecx
   12656:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12659:	0f b6 12             	movzbl (%edx),%edx
   1265c:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1265e:	8b 45 10             	mov    0x10(%ebp),%eax
   12661:	8d 50 ff             	lea    -0x1(%eax),%edx
   12664:	89 55 10             	mov    %edx,0x10(%ebp)
   12667:	85 c0                	test   %eax,%eax
   12669:	7e 0a                	jle    12675 <kstrncpy+0x54>
   1266b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1266e:	0f b6 00             	movzbl (%eax),%eax
   12671:	84 c0                	test   %al,%al
   12673:	75 d2                	jne    12647 <kstrncpy+0x26>
    }
    if (size == 0) {
   12675:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12679:	75 0b                	jne    12686 <kstrncpy+0x65>
        *(d - 1) = '\0';
   1267b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1267e:	83 e8 01             	sub    $0x1,%eax
   12681:	c6 00 00             	movb   $0x0,(%eax)
   12684:	eb 09                	jmp    1268f <kstrncpy+0x6e>
    } else {
        *d = '\0';
   12686:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12689:	c6 00 00             	movb   $0x0,(%eax)
   1268c:	eb 01                	jmp    1268f <kstrncpy+0x6e>
        return;
   1268e:	90                   	nop
    }
}
   1268f:	c9                   	leave  
   12690:	c3                   	ret    

00012691 <kstrlen>:


int kstrlen(const char *str) {
   12691:	55                   	push   %ebp
   12692:	89 e5                	mov    %esp,%ebp
   12694:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12697:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1269b:	75 07                	jne    126a4 <kstrlen+0x13>
        return 0;
   1269d:	b8 00 00 00 00       	mov    $0x0,%eax
   126a2:	eb 26                	jmp    126ca <kstrlen+0x39>
    }

    const char *c = str;
   126a4:	8b 45 08             	mov    0x8(%ebp),%eax
   126a7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   126aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   126b1:	eb 04                	jmp    126b7 <kstrlen+0x26>
        len++;
   126b3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   126b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126ba:	8d 50 01             	lea    0x1(%eax),%edx
   126bd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   126c0:	0f b6 00             	movzbl (%eax),%eax
   126c3:	84 c0                	test   %al,%al
   126c5:	75 ec                	jne    126b3 <kstrlen+0x22>
    }

    return len;
   126c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   126ca:	c9                   	leave  
   126cb:	c3                   	ret    

000126cc <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   126cc:	55                   	push   %ebp
   126cd:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   126cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126d3:	74 06                	je     126db <kstrncmp+0xf>
   126d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126d9:	75 0f                	jne    126ea <kstrncmp+0x1e>
        return -1;
   126db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126e0:	eb 62                	jmp    12744 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   126e2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   126e6:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   126ea:	8b 45 08             	mov    0x8(%ebp),%eax
   126ed:	0f b6 00             	movzbl (%eax),%eax
   126f0:	84 c0                	test   %al,%al
   126f2:	74 20                	je     12714 <kstrncmp+0x48>
   126f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f7:	0f b6 00             	movzbl (%eax),%eax
   126fa:	84 c0                	test   %al,%al
   126fc:	74 16                	je     12714 <kstrncmp+0x48>
   126fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12701:	0f b6 10             	movzbl (%eax),%edx
   12704:	8b 45 0c             	mov    0xc(%ebp),%eax
   12707:	0f b6 00             	movzbl (%eax),%eax
   1270a:	38 c2                	cmp    %al,%dl
   1270c:	75 06                	jne    12714 <kstrncmp+0x48>
   1270e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12712:	75 ce                	jne    126e2 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12714:	8b 45 08             	mov    0x8(%ebp),%eax
   12717:	0f b6 00             	movzbl (%eax),%eax
   1271a:	84 c0                	test   %al,%al
   1271c:	74 21                	je     1273f <kstrncmp+0x73>
   1271e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12721:	0f b6 00             	movzbl (%eax),%eax
   12724:	84 c0                	test   %al,%al
   12726:	74 17                	je     1273f <kstrncmp+0x73>
   12728:	8b 45 08             	mov    0x8(%ebp),%eax
   1272b:	0f b6 10             	movzbl (%eax),%edx
   1272e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12731:	0f b6 00             	movzbl (%eax),%eax
   12734:	38 c2                	cmp    %al,%dl
   12736:	74 07                	je     1273f <kstrncmp+0x73>
   12738:	b8 01 00 00 00       	mov    $0x1,%eax
   1273d:	eb 05                	jmp    12744 <kstrncmp+0x78>
   1273f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12744:	5d                   	pop    %ebp
   12745:	c3                   	ret    

00012746 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   12746:	55                   	push   %ebp
   12747:	89 e5                	mov    %esp,%ebp
   12749:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1274c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12750:	74 40                	je     12792 <kmemcpy+0x4c>
   12752:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12756:	74 3a                	je     12792 <kmemcpy+0x4c>
   12758:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1275c:	74 34                	je     12792 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   1275e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12761:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12764:	8b 45 08             	mov    0x8(%ebp),%eax
   12767:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1276a:	eb 17                	jmp    12783 <kmemcpy+0x3d>
        *d++ = *s++;
   1276c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1276f:	8d 42 01             	lea    0x1(%edx),%eax
   12772:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12775:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12778:	8d 48 01             	lea    0x1(%eax),%ecx
   1277b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1277e:	0f b6 12             	movzbl (%edx),%edx
   12781:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12783:	8b 45 10             	mov    0x10(%ebp),%eax
   12786:	8d 50 ff             	lea    -0x1(%eax),%edx
   12789:	89 55 10             	mov    %edx,0x10(%ebp)
   1278c:	85 c0                	test   %eax,%eax
   1278e:	75 dc                	jne    1276c <kmemcpy+0x26>
   12790:	eb 01                	jmp    12793 <kmemcpy+0x4d>
        return;
   12792:	90                   	nop
    }
}
   12793:	c9                   	leave  
   12794:	c3                   	ret    

00012795 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12795:	55                   	push   %ebp
   12796:	89 e5                	mov    %esp,%ebp
   12798:	83 ec 14             	sub    $0x14,%esp
   1279b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1279e:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   127a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127a5:	74 2c                	je     127d3 <kmemset+0x3e>
   127a7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127ab:	74 26                	je     127d3 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   127ad:	8b 45 08             	mov    0x8(%ebp),%eax
   127b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   127b3:	eb 0f                	jmp    127c4 <kmemset+0x2f>
        *d++ = v;
   127b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127b8:	8d 50 01             	lea    0x1(%eax),%edx
   127bb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   127be:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   127c2:	88 10                	mov    %dl,(%eax)
    while (size--) {
   127c4:	8b 45 10             	mov    0x10(%ebp),%eax
   127c7:	8d 50 ff             	lea    -0x1(%eax),%edx
   127ca:	89 55 10             	mov    %edx,0x10(%ebp)
   127cd:	85 c0                	test   %eax,%eax
   127cf:	75 e4                	jne    127b5 <kmemset+0x20>
   127d1:	eb 01                	jmp    127d4 <kmemset+0x3f>
        return;
   127d3:	90                   	nop
    }
}
   127d4:	c9                   	leave  
   127d5:	c3                   	ret    

000127d6 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   127d6:	55                   	push   %ebp
   127d7:	89 e5                	mov    %esp,%ebp
   127d9:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   127dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127e0:	74 06                	je     127e8 <kmemcmp+0x12>
   127e2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127e6:	75 07                	jne    127ef <kmemcmp+0x19>
        return 1;
   127e8:	b8 01 00 00 00       	mov    $0x1,%eax
   127ed:	eb 43                	jmp    12832 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   127ef:	8b 45 08             	mov    0x8(%ebp),%eax
   127f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   127f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   127f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   127fb:	eb 23                	jmp    12820 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   127fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12800:	8d 50 01             	lea    0x1(%eax),%edx
   12803:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12806:	0f b6 08             	movzbl (%eax),%ecx
   12809:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1280c:	8d 50 01             	lea    0x1(%eax),%edx
   1280f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12812:	0f b6 00             	movzbl (%eax),%eax
   12815:	38 c1                	cmp    %al,%cl
   12817:	74 07                	je     12820 <kmemcmp+0x4a>
            return 1;
   12819:	b8 01 00 00 00       	mov    $0x1,%eax
   1281e:	eb 12                	jmp    12832 <kmemcmp+0x5c>
    while (size--) {
   12820:	8b 45 10             	mov    0x10(%ebp),%eax
   12823:	8d 50 ff             	lea    -0x1(%eax),%edx
   12826:	89 55 10             	mov    %edx,0x10(%ebp)
   12829:	85 c0                	test   %eax,%eax
   1282b:	75 d0                	jne    127fd <kmemcmp+0x27>
        }
    }

    return 0;
   1282d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12832:	c9                   	leave  
   12833:	c3                   	ret    

00012834 <kitoa>:


void kitoa(char *buf, int num, int base) {
   12834:	55                   	push   %ebp
   12835:	89 e5                	mov    %esp,%ebp
   12837:	53                   	push   %ebx
   12838:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   1283b:	8b 45 08             	mov    0x8(%ebp),%eax
   1283e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12841:	8b 45 0c             	mov    0xc(%ebp),%eax
   12844:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   12847:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1284b:	74 1d                	je     1286a <kitoa+0x36>
   1284d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12851:	74 17                	je     1286a <kitoa+0x36>
   12853:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12857:	74 11                	je     1286a <kitoa+0x36>
   12859:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1285d:	74 0b                	je     1286a <kitoa+0x36>
        *p = '\0';
   1285f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12862:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12865:	e9 03 01 00 00       	jmp    1296d <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1286a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12871:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12875:	79 19                	jns    12890 <kitoa+0x5c>
   12877:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1287b:	75 13                	jne    12890 <kitoa+0x5c>
        *p++ = '-';
   1287d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12880:	8d 50 01             	lea    0x1(%eax),%edx
   12883:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12886:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12889:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12890:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12894:	74 3b                	je     128d1 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12896:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1289c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1289f:	99                   	cltd   
   128a0:	f7 7d 10             	idivl  0x10(%ebp)
   128a3:	89 d0                	mov    %edx,%eax
   128a5:	83 c0 0f             	add    $0xf,%eax
   128a8:	01 c8                	add    %ecx,%eax
   128aa:	0f b6 00             	movzbl (%eax),%eax
   128ad:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   128b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128b3:	8d 50 01             	lea    0x1(%eax),%edx
   128b6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   128b9:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   128bd:	88 10                	mov    %dl,(%eax)
            num /= base;
   128bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   128c2:	99                   	cltd   
   128c3:	f7 7d 10             	idivl  0x10(%ebp)
   128c6:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   128c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128cd:	75 c7                	jne    12896 <kitoa+0x62>
   128cf:	eb 4b                	jmp    1291c <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   128d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   128d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   128d7:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   128dd:	8b 5d 10             	mov    0x10(%ebp),%ebx
   128e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   128e3:	ba 00 00 00 00       	mov    $0x0,%edx
   128e8:	f7 f3                	div    %ebx
   128ea:	89 d0                	mov    %edx,%eax
   128ec:	83 c0 0f             	add    $0xf,%eax
   128ef:	01 c8                	add    %ecx,%eax
   128f1:	0f b6 00             	movzbl (%eax),%eax
   128f4:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   128f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128fa:	8d 50 01             	lea    0x1(%eax),%edx
   128fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12900:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12904:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12906:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12909:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1290c:	ba 00 00 00 00       	mov    $0x0,%edx
   12911:	f7 f3                	div    %ebx
   12913:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12916:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1291a:	75 bb                	jne    128d7 <kitoa+0xa3>
    }
    *p-- = '\0';
   1291c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1291f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12922:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12925:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12928:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1292c:	74 08                	je     12936 <kitoa+0x102>
   1292e:	8b 45 08             	mov    0x8(%ebp),%eax
   12931:	83 c0 01             	add    $0x1,%eax
   12934:	eb 03                	jmp    12939 <kitoa+0x105>
   12936:	8b 45 08             	mov    0x8(%ebp),%eax
   12939:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1293c:	eb 27                	jmp    12965 <kitoa+0x131>
        char ch = *start;
   1293e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12941:	0f b6 00             	movzbl (%eax),%eax
   12944:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12947:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1294a:	0f b6 10             	movzbl (%eax),%edx
   1294d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12950:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12952:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12955:	8d 50 ff             	lea    -0x1(%eax),%edx
   12958:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1295b:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1295f:	88 10                	mov    %dl,(%eax)
        start++;
   12961:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12965:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12968:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1296b:	72 d1                	jb     1293e <kitoa+0x10a>
    }
}
   1296d:	83 c4 20             	add    $0x20,%esp
   12970:	5b                   	pop    %ebx
   12971:	5d                   	pop    %ebp
   12972:	c3                   	ret    

00012973 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12973:	55                   	push   %ebp
   12974:	89 e5                	mov    %esp,%ebp
   12976:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12979:	8d 45 10             	lea    0x10(%ebp),%eax
   1297c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   1297f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12982:	83 ec 04             	sub    $0x4,%esp
   12985:	50                   	push   %eax
   12986:	ff 75 0c             	pushl  0xc(%ebp)
   12989:	ff 75 08             	pushl  0x8(%ebp)
   1298c:	e8 06 00 00 00       	call   12997 <kvsprintf>
   12991:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12994:	90                   	nop
   12995:	c9                   	leave  
   12996:	c3                   	ret    

00012997 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12997:	55                   	push   %ebp
   12998:	89 e5                	mov    %esp,%ebp
   1299a:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   1299d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   129a4:	8b 45 08             	mov    0x8(%ebp),%eax
   129a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   129aa:	e9 2f 01 00 00       	jmp    12ade <kvsprintf+0x147>
        switch (state) {
   129af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129b2:	85 c0                	test   %eax,%eax
   129b4:	74 0a                	je     129c0 <kvsprintf+0x29>
   129b6:	83 f8 01             	cmp    $0x1,%eax
   129b9:	74 2b                	je     129e6 <kvsprintf+0x4f>
   129bb:	e9 1e 01 00 00       	jmp    12ade <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   129c0:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   129c4:	75 0c                	jne    129d2 <kvsprintf+0x3b>
                state = READ_FMT;
   129c6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   129cd:	e9 0c 01 00 00       	jmp    12ade <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   129d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129d5:	8d 50 01             	lea    0x1(%eax),%edx
   129d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129db:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   129df:	88 10                	mov    %dl,(%eax)
            }
            break;
   129e1:	e9 f8 00 00 00       	jmp    12ade <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   129e6:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   129ea:	75 31                	jne    12a1d <kvsprintf+0x86>
                int num = va_arg(args, int);
   129ec:	8b 45 10             	mov    0x10(%ebp),%eax
   129ef:	8d 50 04             	lea    0x4(%eax),%edx
   129f2:	89 55 10             	mov    %edx,0x10(%ebp)
   129f5:	8b 00                	mov    (%eax),%eax
   129f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   129fa:	6a 0a                	push   $0xa
   129fc:	ff 75 e4             	pushl  -0x1c(%ebp)
   129ff:	ff 75 f8             	pushl  -0x8(%ebp)
   12a02:	e8 2d fe ff ff       	call   12834 <kitoa>
   12a07:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12a0a:	ff 75 f8             	pushl  -0x8(%ebp)
   12a0d:	e8 7f fc ff ff       	call   12691 <kstrlen>
   12a12:	83 c4 04             	add    $0x4,%esp
   12a15:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a18:	e9 b9 00 00 00       	jmp    12ad6 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12a1d:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12a21:	75 46                	jne    12a69 <kvsprintf+0xd2>
                *curr++ = '0';
   12a23:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a26:	8d 50 01             	lea    0x1(%eax),%edx
   12a29:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a2c:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12a2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a32:	8d 50 01             	lea    0x1(%eax),%edx
   12a35:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a38:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12a3b:	8b 45 10             	mov    0x10(%ebp),%eax
   12a3e:	8d 50 04             	lea    0x4(%eax),%edx
   12a41:	89 55 10             	mov    %edx,0x10(%ebp)
   12a44:	8b 00                	mov    (%eax),%eax
   12a46:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12a49:	6a 10                	push   $0x10
   12a4b:	ff 75 e8             	pushl  -0x18(%ebp)
   12a4e:	ff 75 f8             	pushl  -0x8(%ebp)
   12a51:	e8 de fd ff ff       	call   12834 <kitoa>
   12a56:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12a59:	ff 75 f8             	pushl  -0x8(%ebp)
   12a5c:	e8 30 fc ff ff       	call   12691 <kstrlen>
   12a61:	83 c4 04             	add    $0x4,%esp
   12a64:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a67:	eb 6d                	jmp    12ad6 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12a69:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12a6d:	75 1f                	jne    12a8e <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12a6f:	8b 45 10             	mov    0x10(%ebp),%eax
   12a72:	8d 50 04             	lea    0x4(%eax),%edx
   12a75:	89 55 10             	mov    %edx,0x10(%ebp)
   12a78:	8b 00                	mov    (%eax),%eax
   12a7a:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12a7d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a80:	8d 50 01             	lea    0x1(%eax),%edx
   12a83:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a86:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12a8a:	88 10                	mov    %dl,(%eax)
   12a8c:	eb 48                	jmp    12ad6 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12a8e:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12a92:	75 42                	jne    12ad6 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12a94:	8b 45 10             	mov    0x10(%ebp),%eax
   12a97:	8d 50 04             	lea    0x4(%eax),%edx
   12a9a:	89 55 10             	mov    %edx,0x10(%ebp)
   12a9d:	8b 00                	mov    (%eax),%eax
   12a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12aa2:	ff 75 f4             	pushl  -0xc(%ebp)
   12aa5:	e8 e7 fb ff ff       	call   12691 <kstrlen>
   12aaa:	83 c4 04             	add    $0x4,%esp
   12aad:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12ab0:	eb 17                	jmp    12ac9 <kvsprintf+0x132>
                    *curr++ = *str++;
   12ab2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12ab5:	8d 42 01             	lea    0x1(%edx),%eax
   12ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12abb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12abe:	8d 48 01             	lea    0x1(%eax),%ecx
   12ac1:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12ac4:	0f b6 12             	movzbl (%edx),%edx
   12ac7:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12ac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12acc:	8d 50 ff             	lea    -0x1(%eax),%edx
   12acf:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12ad2:	85 c0                	test   %eax,%eax
   12ad4:	75 dc                	jne    12ab2 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12ad6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12add:	90                   	nop
    while ((ch = *fmt++)) {
   12ade:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ae1:	8d 50 01             	lea    0x1(%eax),%edx
   12ae4:	89 55 0c             	mov    %edx,0xc(%ebp)
   12ae7:	0f b6 00             	movzbl (%eax),%eax
   12aea:	88 45 ef             	mov    %al,-0x11(%ebp)
   12aed:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12af1:	0f 85 b8 fe ff ff    	jne    129af <kvsprintf+0x18>
        }
    }
}
   12af7:	90                   	nop
   12af8:	c9                   	leave  
   12af9:	c3                   	ret    

00012afa <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   12afa:	55                   	push   %ebp
   12afb:	89 e5                	mov    %esp,%ebp
   12afd:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12b00:	83 ec 08             	sub    $0x8,%esp
   12b03:	ff 75 14             	pushl  0x14(%ebp)
   12b06:	68 c8 37 01 00       	push   $0x137c8
   12b0b:	e8 f4 02 00 00       	call   12e04 <log_printf>
   12b10:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12b13:	ff 75 10             	pushl  0x10(%ebp)
   12b16:	ff 75 0c             	pushl  0xc(%ebp)
   12b19:	ff 75 08             	pushl  0x8(%ebp)
   12b1c:	68 da 37 01 00       	push   $0x137da
   12b21:	e8 de 02 00 00       	call   12e04 <log_printf>
   12b26:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12b29:	e8 a5 fa ff ff       	call   125d3 <hlt>
   12b2e:	eb f9                	jmp    12b29 <pannic+0x2f>

00012b30 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12b30:	55                   	push   %ebp
   12b31:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12b33:	8b 45 08             	mov    0x8(%ebp),%eax
   12b36:	8b 40 08             	mov    0x8(%eax),%eax
   12b39:	85 c0                	test   %eax,%eax
   12b3b:	0f 94 c0             	sete   %al
   12b3e:	0f b6 c0             	movzbl %al,%eax
}
   12b41:	5d                   	pop    %ebp
   12b42:	c3                   	ret    

00012b43 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12b43:	55                   	push   %ebp
   12b44:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12b46:	8b 45 08             	mov    0x8(%ebp),%eax
   12b49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12b4f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b52:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12b59:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12b63:	90                   	nop
   12b64:	5d                   	pop    %ebp
   12b65:	c3                   	ret    

00012b66 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12b66:	55                   	push   %ebp
   12b67:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12b69:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6c:	8b 10                	mov    (%eax),%edx
   12b6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b71:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12b74:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12b7d:	ff 75 08             	pushl  0x8(%ebp)
   12b80:	e8 ab ff ff ff       	call   12b30 <list_is_empty>
   12b85:	83 c4 04             	add    $0x4,%esp
   12b88:	85 c0                	test   %eax,%eax
   12b8a:	74 15                	je     12ba1 <list_insert_front+0x3b>
        list->last = list->first = node;
   12b8c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b92:	89 10                	mov    %edx,(%eax)
   12b94:	8b 45 08             	mov    0x8(%ebp),%eax
   12b97:	8b 10                	mov    (%eax),%edx
   12b99:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9c:	89 50 04             	mov    %edx,0x4(%eax)
   12b9f:	eb 12                	jmp    12bb3 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba4:	8b 00                	mov    (%eax),%eax
   12ba6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ba9:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12bab:	8b 45 08             	mov    0x8(%ebp),%eax
   12bae:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bb1:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb6:	8b 40 08             	mov    0x8(%eax),%eax
   12bb9:	8d 50 01             	lea    0x1(%eax),%edx
   12bbc:	8b 45 08             	mov    0x8(%ebp),%eax
   12bbf:	89 50 08             	mov    %edx,0x8(%eax)
}
   12bc2:	90                   	nop
   12bc3:	c9                   	leave  
   12bc4:	c3                   	ret    

00012bc5 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12bc5:	55                   	push   %ebp
   12bc6:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bcb:	8b 50 04             	mov    0x4(%eax),%edx
   12bce:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bd1:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12bd3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bd6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12bdd:	ff 75 08             	pushl  0x8(%ebp)
   12be0:	e8 4b ff ff ff       	call   12b30 <list_is_empty>
   12be5:	83 c4 04             	add    $0x4,%esp
   12be8:	85 c0                	test   %eax,%eax
   12bea:	74 15                	je     12c01 <list_insert_back+0x3c>
        list->last = list->first = node;
   12bec:	8b 45 08             	mov    0x8(%ebp),%eax
   12bef:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bf2:	89 10                	mov    %edx,(%eax)
   12bf4:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf7:	8b 10                	mov    (%eax),%edx
   12bf9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bfc:	89 50 04             	mov    %edx,0x4(%eax)
   12bff:	eb 15                	jmp    12c16 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12c01:	8b 45 08             	mov    0x8(%ebp),%eax
   12c04:	8b 40 04             	mov    0x4(%eax),%eax
   12c07:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c0a:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12c0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c10:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c13:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12c16:	8b 45 08             	mov    0x8(%ebp),%eax
   12c19:	8b 40 08             	mov    0x8(%eax),%eax
   12c1c:	8d 50 01             	lea    0x1(%eax),%edx
   12c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c22:	89 50 08             	mov    %edx,0x8(%eax)
}
   12c25:	90                   	nop
   12c26:	c9                   	leave  
   12c27:	c3                   	ret    

00012c28 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12c28:	55                   	push   %ebp
   12c29:	89 e5                	mov    %esp,%ebp
   12c2b:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12c2e:	ff 75 08             	pushl  0x8(%ebp)
   12c31:	e8 fa fe ff ff       	call   12b30 <list_is_empty>
   12c36:	83 c4 04             	add    $0x4,%esp
   12c39:	85 c0                	test   %eax,%eax
   12c3b:	74 07                	je     12c44 <list_remove_front+0x1c>
        return (list_node_t*)0;
   12c3d:	b8 00 00 00 00       	mov    $0x0,%eax
   12c42:	eb 5b                	jmp    12c9f <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12c44:	8b 45 08             	mov    0x8(%ebp),%eax
   12c47:	8b 00                	mov    (%eax),%eax
   12c49:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12c4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c4f:	8b 50 04             	mov    0x4(%eax),%edx
   12c52:	8b 45 08             	mov    0x8(%ebp),%eax
   12c55:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12c57:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5a:	8b 00                	mov    (%eax),%eax
   12c5c:	85 c0                	test   %eax,%eax
   12c5e:	75 0c                	jne    12c6c <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12c60:	8b 45 08             	mov    0x8(%ebp),%eax
   12c63:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c6a:	eb 0c                	jmp    12c78 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12c6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c6f:	8b 40 04             	mov    0x4(%eax),%eax
   12c72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12c78:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c7b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c82:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c85:	8b 50 04             	mov    0x4(%eax),%edx
   12c88:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c8b:	89 10                	mov    %edx,(%eax)
    list->count--;
   12c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c90:	8b 40 08             	mov    0x8(%eax),%eax
   12c93:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c96:	8b 45 08             	mov    0x8(%ebp),%eax
   12c99:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12c9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12c9f:	c9                   	leave  
   12ca0:	c3                   	ret    

00012ca1 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12ca1:	55                   	push   %ebp
   12ca2:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12ca4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca7:	8b 00                	mov    (%eax),%eax
   12ca9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12cac:	75 0b                	jne    12cb9 <list_remove+0x18>
        list->first = node->next;
   12cae:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cb1:	8b 50 04             	mov    0x4(%eax),%edx
   12cb4:	8b 45 08             	mov    0x8(%ebp),%eax
   12cb7:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbc:	8b 40 04             	mov    0x4(%eax),%eax
   12cbf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12cc2:	75 0b                	jne    12ccf <list_remove+0x2e>
        list->last = node->pre;
   12cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cc7:	8b 10                	mov    (%eax),%edx
   12cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ccc:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12ccf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cd2:	8b 00                	mov    (%eax),%eax
   12cd4:	85 c0                	test   %eax,%eax
   12cd6:	74 0e                	je     12ce6 <list_remove+0x45>
        node->pre->next = node->next;
   12cd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cdb:	8b 00                	mov    (%eax),%eax
   12cdd:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ce0:	8b 52 04             	mov    0x4(%edx),%edx
   12ce3:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12ce6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ce9:	8b 40 04             	mov    0x4(%eax),%eax
   12cec:	85 c0                	test   %eax,%eax
   12cee:	74 0d                	je     12cfd <list_remove+0x5c>
        node->next->pre = node->pre;
   12cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cf3:	8b 40 04             	mov    0x4(%eax),%eax
   12cf6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cf9:	8b 12                	mov    (%edx),%edx
   12cfb:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12cfd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d00:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12d07:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d0a:	8b 50 04             	mov    0x4(%eax),%edx
   12d0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d10:	89 10                	mov    %edx,(%eax)
    --list->count;
   12d12:	8b 45 08             	mov    0x8(%ebp),%eax
   12d15:	8b 40 08             	mov    0x8(%eax),%eax
   12d18:	8d 50 ff             	lea    -0x1(%eax),%edx
   12d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1e:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12d21:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d24:	5d                   	pop    %ebp
   12d25:	c3                   	ret    

00012d26 <inb>:
static inline uint8_t inb(uint16_t port) {
   12d26:	55                   	push   %ebp
   12d27:	89 e5                	mov    %esp,%ebp
   12d29:	83 ec 14             	sub    $0x14,%esp
   12d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d2f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12d33:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d37:	89 c2                	mov    %eax,%edx
   12d39:	ec                   	in     (%dx),%al
   12d3a:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12d3d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d41:	c9                   	leave  
   12d42:	c3                   	ret    

00012d43 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12d43:	55                   	push   %ebp
   12d44:	89 e5                	mov    %esp,%ebp
   12d46:	83 ec 08             	sub    $0x8,%esp
   12d49:	8b 55 08             	mov    0x8(%ebp),%edx
   12d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d4f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12d53:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12d56:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d5a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d5e:	ee                   	out    %al,(%dx)
}
   12d5f:	90                   	nop
   12d60:	c9                   	leave  
   12d61:	c3                   	ret    

00012d62 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12d62:	55                   	push   %ebp
   12d63:	89 e5                	mov    %esp,%ebp
   12d65:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   12d68:	83 ec 08             	sub    $0x8,%esp
   12d6b:	68 18 38 01 00       	push   $0x13818
   12d70:	68 e0 8e 01 00       	push   $0x18ee0
   12d75:	e8 41 f3 ff ff       	call   120bb <mutex_init>
   12d7a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12d7d:	83 ec 08             	sub    $0x8,%esp
   12d80:	6a 00                	push   $0x0
   12d82:	68 f9 03 00 00       	push   $0x3f9
   12d87:	e8 b7 ff ff ff       	call   12d43 <outb>
   12d8c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12d8f:	83 ec 08             	sub    $0x8,%esp
   12d92:	68 80 00 00 00       	push   $0x80
   12d97:	68 fb 03 00 00       	push   $0x3fb
   12d9c:	e8 a2 ff ff ff       	call   12d43 <outb>
   12da1:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12da4:	83 ec 08             	sub    $0x8,%esp
   12da7:	6a 03                	push   $0x3
   12da9:	68 f8 03 00 00       	push   $0x3f8
   12dae:	e8 90 ff ff ff       	call   12d43 <outb>
   12db3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12db6:	83 ec 08             	sub    $0x8,%esp
   12db9:	6a 00                	push   $0x0
   12dbb:	68 f9 03 00 00       	push   $0x3f9
   12dc0:	e8 7e ff ff ff       	call   12d43 <outb>
   12dc5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12dc8:	83 ec 08             	sub    $0x8,%esp
   12dcb:	6a 03                	push   $0x3
   12dcd:	68 fb 03 00 00       	push   $0x3fb
   12dd2:	e8 6c ff ff ff       	call   12d43 <outb>
   12dd7:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12dda:	83 ec 08             	sub    $0x8,%esp
   12ddd:	68 c7 00 00 00       	push   $0xc7
   12de2:	68 fa 03 00 00       	push   $0x3fa
   12de7:	e8 57 ff ff ff       	call   12d43 <outb>
   12dec:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12def:	83 ec 08             	sub    $0x8,%esp
   12df2:	6a 0f                	push   $0xf
   12df4:	68 fc 03 00 00       	push   $0x3fc
   12df9:	e8 45 ff ff ff       	call   12d43 <outb>
   12dfe:	83 c4 10             	add    $0x10,%esp
}
   12e01:	90                   	nop
   12e02:	c9                   	leave  
   12e03:	c3                   	ret    

00012e04 <log_printf>:


void log_printf(const char* fmt, ...) {
   12e04:	55                   	push   %ebp
   12e05:	89 e5                	mov    %esp,%ebp
   12e07:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12e0d:	83 ec 04             	sub    $0x4,%esp
   12e10:	68 80 00 00 00       	push   $0x80
   12e15:	6a 00                	push   $0x0
   12e17:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e1d:	50                   	push   %eax
   12e1e:	e8 72 f9 ff ff       	call   12795 <kmemset>
   12e23:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12e26:	8d 45 0c             	lea    0xc(%ebp),%eax
   12e29:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12e2f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12e35:	83 ec 04             	sub    $0x4,%esp
   12e38:	50                   	push   %eax
   12e39:	ff 75 08             	pushl  0x8(%ebp)
   12e3c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e42:	50                   	push   %eax
   12e43:	e8 4f fb ff ff       	call   12997 <kvsprintf>
   12e48:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   12e4b:	83 ec 0c             	sub    $0xc,%esp
   12e4e:	68 e0 8e 01 00       	push   $0x18ee0
   12e53:	e8 a4 f2 ff ff       	call   120fc <mutex_acquire>
   12e58:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   12e5b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12e64:	eb 3b                	jmp    12ea1 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12e66:	90                   	nop
   12e67:	83 ec 0c             	sub    $0xc,%esp
   12e6a:	68 fd 03 00 00       	push   $0x3fd
   12e6f:	e8 b2 fe ff ff       	call   12d26 <inb>
   12e74:	83 c4 10             	add    $0x10,%esp
   12e77:	0f b6 c0             	movzbl %al,%eax
   12e7a:	83 e0 40             	and    $0x40,%eax
   12e7d:	85 c0                	test   %eax,%eax
   12e7f:	74 e6                	je     12e67 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e84:	8d 50 01             	lea    0x1(%eax),%edx
   12e87:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12e8a:	0f b6 00             	movzbl (%eax),%eax
   12e8d:	0f b6 c0             	movzbl %al,%eax
   12e90:	83 ec 08             	sub    $0x8,%esp
   12e93:	50                   	push   %eax
   12e94:	68 f8 03 00 00       	push   $0x3f8
   12e99:	e8 a5 fe ff ff       	call   12d43 <outb>
   12e9e:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ea4:	0f b6 00             	movzbl (%eax),%eax
   12ea7:	84 c0                	test   %al,%al
   12ea9:	75 bb                	jne    12e66 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   12eab:	83 ec 08             	sub    $0x8,%esp
   12eae:	6a 0d                	push   $0xd
   12eb0:	68 f8 03 00 00       	push   $0x3f8
   12eb5:	e8 89 fe ff ff       	call   12d43 <outb>
   12eba:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12ebd:	83 ec 08             	sub    $0x8,%esp
   12ec0:	6a 0a                	push   $0xa
   12ec2:	68 f8 03 00 00       	push   $0x3f8
   12ec7:	e8 77 fe ff ff       	call   12d43 <outb>
   12ecc:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   12ecf:	83 ec 0c             	sub    $0xc,%esp
   12ed2:	68 e0 8e 01 00       	push   $0x18ee0
   12ed7:	e8 ae f2 ff ff       	call   1218a <mutex_release>
   12edc:	83 c4 10             	add    $0x10,%esp
   12edf:	90                   	nop
   12ee0:	c9                   	leave  
   12ee1:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 00 00 00 00       	jmp    80000012 <first_task_main>

80000012 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"

int first_task_main(void) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        log_printf("first task.");
80000018:	83 ec 0c             	sub    $0xc,%esp
8000001b:	68 3a 00 00 80       	push   $0x8000003a
80000020:	e8 df 2d 01 80       	call   12e04 <log_printf>
80000025:	83 c4 10             	add    $0x10,%esp
        sys_sleep(10000);
80000028:	83 ec 0c             	sub    $0xc,%esp
8000002b:	68 10 27 00 00       	push   $0x2710
80000030:	e8 e7 10 01 80       	call   1111c <sys_sleep>
80000035:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000038:	eb de                	jmp    80000018 <first_task_main+0x6>
8000003a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000040:	74 61                	je     800000a3 <first_task_main+0x91>
80000042:	73 6b                	jae    800000af <first_task_main+0x9d>
80000044:	2e                   	cs
	...
