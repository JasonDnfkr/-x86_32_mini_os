
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002dc8 memsz 0x00007d80 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027e2  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000005e0  000127e4  000127e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012dc4  00012dc4  00003dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004fa0  00012de0  00012de0  00003dc8  2**5
                  ALLOC
  4 .debug_line   000019b3  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003939  00000000  00000000  0000577b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fec  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  0000a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000f89  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000b1c9  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000010d8  00000000  00000000  0000b1dc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000127e4 l    d  .rodata	00000000 .rodata
00012dc4 l    d  .data	00000000 .data
00012de0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	0000000d down2
00012de0 l     O .bss	00000028 paddr_alloc
000102e9 l     F .text	00000058 addr_alloc_init
00010341 l     F .text	00000067 addr_alloc_page
000103a8 l     F .text	00000062 addr_free_page
0001040a l     F .text	00000066 show_mem_info
00010470 l     F .text	0000003c total_mem_size
000104ac l     F .text	0000009a test_alloc
000128a4 l     O .rodata	0000000c __func__.2129
00000000 l    df *ABS*	00000000 task.c
00010614 l     F .text	00000019 list_node_init
0001062d l     F .text	0000000b list_node_next
00010638 l     F .text	0000000b list_size
00010643 l     F .text	0000000a list_first
0001064d l     F .text	00000017 write_tr
00012e20 l     O .bss	00000190 task_manager
00012fc0 l     O .bss	00001000 idle_task_stack
00010664 l     F .text	00000101 tss_init
00012934 l     O .rodata	0000000a __func__.2117
00010874 l     F .text	00000005 idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010c0f l     F .text	00000028 lgdt
00010c37 l     F .text	0000001a far_jump
00013fc0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010e10 l     F .text	0000001d inb
00010e2d l     F .text	0000001f outb
00010e4c l     F .text	00000007 cli
00010e53 l     F .text	00000007 sti
00010e5a l     F .text	00000028 lidt
00010e82 l     F .text	00000007 hlt
00010e89 l     F .text	00000010 read_eflags
00010e99 l     F .text	0000000b write_eflags
000147c0 l     O .bss	00000400 idt_table
00010ea4 l     F .text	000000ca dump_core_regs
00010f6e l     F .text	0000003e do_default_handler
000111f8 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
000115fc l     F .text	0000001f outb
00014bc0 l     O .bss	00000004 sys_tick
00011643 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 mutex.c
000116bb l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 init.c
0001183d l     F .text	0000000b list_size
00011848 l     F .text	0000000a list_first
00011852 l     F .text	0000000b list_last
00012d68 l     O .rodata	0000000c __func__.2176
00014be0 l     O .bss	000000b4 init_task
00014ca0 l     O .bss	00001000 init_task_stack
00015ca0 l     O .bss	000000b4 first_task
00015d54 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 sem.c
00011b4f l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00011ed8 l     F .text	00000007 hlt
00012dc4 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012435 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001262b l     F .text	0000001d inb
00012648 l     F .text	0000001f outb
00015d64 l     O .bss	00000014 mutex
000111dc g     F .text	0000001c do_handler_control_protection_exception
00011dd0 g     F .text	0000003a bitmap_get_bit
000109c8 g     F .text	0000000a task_current
00010fe4 g     F .text	0000001c do_handler_debug_exception
000111c0 g     F .text	0000001c do_handler_virtualization_exception
0001159d g     F .text	0000000b irq_enable_global
000110e0 g     F .text	0000001c do_handler_segment_not_present
00010926 g     F .text	00000034 task_set_ready
00011f26 g     F .text	00000070 kstrncpy
00011e0a g     F .text	0000001b bitmap_is_set
000118fa g     F .text	0000019c link_test
00011000 g     F .text	0000001c do_handler_nmi_interrupt
00010d88 g     F .text	0000000b cpu_init
00012667 g     F .text	0000009d log_init
00011a96 g     F .text	000000b9 init_main
0001209a g     F .text	00000041 kmemset
00011480 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00011f96 g     F .text	0000003b kstrlen
00011038 g     F .text	0000001c do_handler_overflow
000101b8 g       .text	00000000 exception_handler_general_protection
00011118 g     F .text	0000001c do_handler_general_protection
00011c6a g     F .text	00000029 sem_count
00011054 g     F .text	0000001c do_handler_bound_range_exceed
00011cfc g     F .text	000000d4 bitmap_set_bit
000110a8 g     F .text	0000001c do_handler_double_fault
000118b1 g     F .text	00000049 init_task_entry
00011134 g     F .text	0000001c do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
000115a8 g     F .text	0000002b pic_send_eoi
0001091c g     F .text	0000000a task_first_task
00011b7d g     F .text	0000006b sem_wait
0001161b g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
0001246b g     F .text	0000005f list_insert_front
00015d80 g     O .bss	00002000 stack
00010bb8 g     F .text	00000057 sys_sleep
0001229c g     F .text	00000163 kvsprintf
00011be8 g     F .text	00000082 sem_notify
00011070 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
000116a3 g     F .text	00000018 timer_init
000108df g     F .text	0000003d task_first_init
00011188 g     F .text	0000001c do_handler_machine_check
0001108c g     F .text	0000001c do_handler_device_not_found
00010b98 g     F .text	00000020 task_set_wakeup
000124ca g     F .text	00000063 list_insert_back
00011592 g     F .text	0000000b irq_disable_global
000109d2 g     F .text	00000061 sys_sched_yield
00017d80 g       .bss	00000000 mem_free_start
0001185d g     F .text	00000054 kernel_init
00011b5a g     F .text	00000023 sem_init
00012278 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
0001095a g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
00012139 g     F .text	0000013f kitoa
00011edf g     F .text	00000047 kstrcpy
00011fd1 g     F .text	0000007a kstrncmp
0001116c g     F .text	0000001c do_handler_aligment_check
000120db g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
000110c4 g     F .text	0000001c do_handler_invalid_tss
00010b67 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
0001144b g     F .text	00000035 irq_install
00010d1b g     F .text	0000006d init_gdt
000115d3 g     F .text	00000018 irq_enter_protection
000116c6 g     F .text	0000002e mutex_init
0001150b g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
00010fc8 g     F .text	0000001c do_handler_divide_error
00011c93 g     F .text	00000016 bitmap_byte_count
00010a33 g     F .text	0000005b task_dispatch
00010985 g     F .text	00000043 task_next_run
00012448 g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
00010fac g     F .text	0000001c do_handler_unknown
00010856 g     F .text	0000001e task_switch_from_to
0001128b g     F .text	000001c0 irq_init
000115eb g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00010c51 g     F .text	00000083 segment_desc_set
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
00011ca9 g     F .text	00000053 bitmap_init
000111a4 g     F .text	0000001c do_handler_simd_floating_point_exception
0001204b g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
00011e25 g     F .text	000000b3 bitmap_alloc_nbits
00010879 g     F .text	00000066 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010a8e g     F .text	000000d9 task_time_tick
00010546 g     F .text	000000ce memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
000123ff g     F .text	00000036 pannic
000110fc g     F .text	0000001c do_handler_stack_segment_fault
0001101c g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
00011150 g     F .text	0000001c do_handler_floating_point_error
00012704 g     F .text	000000de log_printf
00010765 g     F .text	000000f1 task_init
0001252d g     F .text	00000079 list_remove_front
00010da7 g     F .text	00000069 gdt_alloc_desc
00011780 g     F .text	000000bd mutex_release
000125a6 g     F .text	00000085 list_remove
00010d93 g     F .text	00000014 swtch_to_tss
00010cd4 g     F .text	00000047 gate_desc_set
000116f4 g     F .text	0000008c mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 51 18 00 00       	call   1185d <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 0，所以会直接跳转到 gdt_reload 地址处
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 80 7d 01 00       	mov    $0x17d80,%esp
    jmp init_main
   10026:	e9 6b 1a 00 00       	jmp    11a96 <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 70 0f 00 00       	call   10fac <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 6d 0f 00 00       	call   10fc8 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 6a 0f 00 00       	call   10fe4 <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 67 0f 00 00       	call   11000 <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 64 0f 00 00       	call   1101c <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 61 0f 00 00       	call   11038 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 5e 0f 00 00       	call   11054 <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 5b 0f 00 00       	call   11070 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 58 0f 00 00       	call   1108c <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 57 0f 00 00       	call   110a8 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 56 0f 00 00       	call   110c4 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 55 0f 00 00       	call   110e0 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 52 0f 00 00       	call   110fc <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 51 0f 00 00       	call   11118 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 50 0f 00 00       	call   11134 <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 4d 0f 00 00       	call   11150 <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 4c 0f 00 00       	call   1116c <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 49 0f 00 00       	call   11188 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 46 0f 00 00       	call   111a4 <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 43 0f 00 00       	call   111c0 <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 42 0f 00 00       	call   111dc <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 62 13 00 00       	call   1161b <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <down2>:
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
    return (size + bound - 1) & ~(bound - 1);
}

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102df:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e2:	f7 d8                	neg    %eax
   102e4:	23 45 08             	and    0x8(%ebp),%eax
}
   102e7:	5d                   	pop    %ebp
   102e8:	c3                   	ret    

000102e9 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   102e9:	55                   	push   %ebp
   102ea:	89 e5                	mov    %esp,%ebp
   102ec:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   102ef:	8b 45 08             	mov    0x8(%ebp),%eax
   102f2:	83 ec 0c             	sub    $0xc,%esp
   102f5:	50                   	push   %eax
   102f6:	e8 cb 13 00 00       	call   116c6 <mutex_init>
   102fb:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   102fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10301:	8b 55 10             	mov    0x10(%ebp),%edx
   10304:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   10307:	8b 45 08             	mov    0x8(%ebp),%eax
   1030a:	8b 55 14             	mov    0x14(%ebp),%edx
   1030d:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   10310:	8b 45 08             	mov    0x8(%ebp),%eax
   10313:	8b 55 18             	mov    0x18(%ebp),%edx
   10316:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10319:	8b 45 08             	mov    0x8(%ebp),%eax
   1031c:	8b 40 20             	mov    0x20(%eax),%eax
   1031f:	ba 00 00 00 00       	mov    $0x0,%edx
   10324:	f7 75 18             	divl   0x18(%ebp)
   10327:	89 c2                	mov    %eax,%edx
   10329:	8b 45 08             	mov    0x8(%ebp),%eax
   1032c:	83 c0 14             	add    $0x14,%eax
   1032f:	6a 00                	push   $0x0
   10331:	52                   	push   %edx
   10332:	ff 75 0c             	pushl  0xc(%ebp)
   10335:	50                   	push   %eax
   10336:	e8 6e 19 00 00       	call   11ca9 <bitmap_init>
   1033b:	83 c4 10             	add    $0x10,%esp
}
   1033e:	90                   	nop
   1033f:	c9                   	leave  
   10340:	c3                   	ret    

00010341 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   10341:	55                   	push   %ebp
   10342:	89 e5                	mov    %esp,%ebp
   10344:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10347:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	83 ec 0c             	sub    $0xc,%esp
   10354:	50                   	push   %eax
   10355:	e8 9a 13 00 00       	call   116f4 <mutex_acquire>
   1035a:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1035d:	8b 45 08             	mov    0x8(%ebp),%eax
   10360:	83 c0 14             	add    $0x14,%eax
   10363:	83 ec 04             	sub    $0x4,%esp
   10366:	ff 75 0c             	pushl  0xc(%ebp)
   10369:	6a 00                	push   $0x0
   1036b:	50                   	push   %eax
   1036c:	e8 b4 1a 00 00       	call   11e25 <bitmap_alloc_nbits>
   10371:	83 c4 10             	add    $0x10,%esp
   10374:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10377:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1037b:	78 17                	js     10394 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1037d:	8b 45 08             	mov    0x8(%ebp),%eax
   10380:	8b 50 1c             	mov    0x1c(%eax),%edx
   10383:	8b 45 08             	mov    0x8(%ebp),%eax
   10386:	8b 48 24             	mov    0x24(%eax),%ecx
   10389:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1038c:	0f af c1             	imul   %ecx,%eax
   1038f:	01 d0                	add    %edx,%eax
   10391:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	83 ec 0c             	sub    $0xc,%esp
   1039a:	50                   	push   %eax
   1039b:	e8 e0 13 00 00       	call   11780 <mutex_release>
   103a0:	83 c4 10             	add    $0x10,%esp

    return addr;
   103a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103a6:	c9                   	leave  
   103a7:	c3                   	ret    

000103a8 <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   103a8:	55                   	push   %ebp
   103a9:	89 e5                	mov    %esp,%ebp
   103ab:	53                   	push   %ebx
   103ac:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   103af:	8b 45 08             	mov    0x8(%ebp),%eax
   103b2:	83 ec 0c             	sub    $0xc,%esp
   103b5:	50                   	push   %eax
   103b6:	e8 39 13 00 00       	call   116f4 <mutex_acquire>
   103bb:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   103be:	8b 45 08             	mov    0x8(%ebp),%eax
   103c1:	8b 40 1c             	mov    0x1c(%eax),%eax
   103c4:	8b 55 0c             	mov    0xc(%ebp),%edx
   103c7:	89 d1                	mov    %edx,%ecx
   103c9:	29 c1                	sub    %eax,%ecx
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	8b 58 24             	mov    0x24(%eax),%ebx
   103d1:	89 c8                	mov    %ecx,%eax
   103d3:	ba 00 00 00 00       	mov    $0x0,%edx
   103d8:	f7 f3                	div    %ebx
   103da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   103dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103e0:	8b 55 08             	mov    0x8(%ebp),%edx
   103e3:	83 c2 14             	add    $0x14,%edx
   103e6:	6a 00                	push   $0x0
   103e8:	ff 75 10             	pushl  0x10(%ebp)
   103eb:	50                   	push   %eax
   103ec:	52                   	push   %edx
   103ed:	e8 0a 19 00 00       	call   11cfc <bitmap_set_bit>
   103f2:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	83 ec 0c             	sub    $0xc,%esp
   103fb:	50                   	push   %eax
   103fc:	e8 7f 13 00 00       	call   11780 <mutex_release>
   10401:	83 c4 10             	add    $0x10,%esp
}
   10404:	90                   	nop
   10405:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10408:	c9                   	leave  
   10409:	c3                   	ret    

0001040a <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1040a:	55                   	push   %ebp
   1040b:	89 e5                	mov    %esp,%ebp
   1040d:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10410:	83 ec 0c             	sub    $0xc,%esp
   10413:	68 e4 27 01 00       	push   $0x127e4
   10418:	e8 e7 22 00 00       	call   12704 <log_printf>
   1041d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10420:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10427:	eb 29                	jmp    10452 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1042f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10433:	8b 45 08             	mov    0x8(%ebp),%eax
   10436:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10439:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1043c:	52                   	push   %edx
   1043d:	50                   	push   %eax
   1043e:	ff 75 f4             	pushl  -0xc(%ebp)
   10441:	68 f0 27 01 00       	push   $0x127f0
   10446:	e8 b9 22 00 00       	call   12704 <log_printf>
   1044b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1044e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10452:	8b 45 08             	mov    0x8(%ebp),%eax
   10455:	8b 40 50             	mov    0x50(%eax),%eax
   10458:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1045b:	7c cc                	jl     10429 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1045d:	83 ec 0c             	sub    $0xc,%esp
   10460:	68 fe 27 01 00       	push   $0x127fe
   10465:	e8 9a 22 00 00       	call   12704 <log_printf>
   1046a:	83 c4 10             	add    $0x10,%esp
}
   1046d:	90                   	nop
   1046e:	c9                   	leave  
   1046f:	c3                   	ret    

00010470 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   10470:	55                   	push   %ebp
   10471:	89 e5                	mov    %esp,%ebp
   10473:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10476:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1047d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10484:	eb 16                	jmp    1049c <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10486:	8b 45 08             	mov    0x8(%ebp),%eax
   10489:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1048c:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10490:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10493:	01 d0                	add    %edx,%eax
   10495:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10498:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1049c:	8b 45 08             	mov    0x8(%ebp),%eax
   1049f:	8b 40 50             	mov    0x50(%eax),%eax
   104a2:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   104a5:	7c df                	jl     10486 <total_mem_size+0x16>
    }
    return mem_size;
   104a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   104aa:	c9                   	leave  
   104ab:	c3                   	ret    

000104ac <test_alloc>:


static void test_alloc(void) {
   104ac:	55                   	push   %ebp
   104ad:	89 e5                	mov    %esp,%ebp
   104af:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   104b2:	83 ec 0c             	sub    $0xc,%esp
   104b5:	68 00 10 00 00       	push   $0x1000
   104ba:	68 00 00 04 00       	push   $0x40000
   104bf:	68 00 10 00 00       	push   $0x1000
   104c4:	8d 45 b8             	lea    -0x48(%ebp),%eax
   104c7:	50                   	push   %eax
   104c8:	8d 45 c0             	lea    -0x40(%ebp),%eax
   104cb:	50                   	push   %eax
   104cc:	e8 18 fe ff ff       	call   102e9 <addr_alloc_init>
   104d1:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   104d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104db:	eb 2b                	jmp    10508 <test_alloc+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   104dd:	83 ec 08             	sub    $0x8,%esp
   104e0:	6a 02                	push   $0x2
   104e2:	8d 45 c0             	lea    -0x40(%ebp),%eax
   104e5:	50                   	push   %eax
   104e6:	e8 56 fe ff ff       	call   10341 <addr_alloc_page>
   104eb:	83 c4 10             	add    $0x10,%esp
   104ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   104f1:	83 ec 08             	sub    $0x8,%esp
   104f4:	ff 75 e8             	pushl  -0x18(%ebp)
   104f7:	68 00 28 01 00       	push   $0x12800
   104fc:	e8 03 22 00 00       	call   12704 <log_printf>
   10501:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10504:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10508:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   1050c:	7e cf                	jle    104dd <test_alloc+0x31>
    }
    uint32_t addr = 0x1000;
   1050e:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   10515:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1051c:	eb 1f                	jmp    1053d <test_alloc+0x91>
        addr += 4096 * 2;
   1051e:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   10525:	83 ec 04             	sub    $0x4,%esp
   10528:	6a 02                	push   $0x2
   1052a:	ff 75 f0             	pushl  -0x10(%ebp)
   1052d:	8d 45 c0             	lea    -0x40(%ebp),%eax
   10530:	50                   	push   %eax
   10531:	e8 72 fe ff ff       	call   103a8 <addr_free_page>
   10536:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10539:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1053d:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   10541:	7e db                	jle    1051e <test_alloc+0x72>
    }
}
   10543:	90                   	nop
   10544:	c9                   	leave  
   10545:	c3                   	ret    

00010546 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   10546:	55                   	push   %ebp
   10547:	89 e5                	mov    %esp,%ebp
   10549:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   1054c:	83 ec 0c             	sub    $0xc,%esp
   1054f:	68 10 28 01 00       	push   $0x12810
   10554:	e8 ab 21 00 00       	call   12704 <log_printf>
   10559:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   1055c:	83 ec 0c             	sub    $0xc,%esp
   1055f:	ff 75 08             	pushl  0x8(%ebp)
   10562:	e8 a3 fe ff ff       	call   1040a <show_mem_info>
   10567:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;   // 2022年-10-1 经同学反馈，发现这里有点bug，改了下
   1056a:	c7 45 f4 80 7d 01 00 	movl   $0x17d80,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10571:	83 ec 0c             	sub    $0xc,%esp
   10574:	ff 75 08             	pushl  0x8(%ebp)
   10577:	e8 f4 fe ff ff       	call   10470 <total_mem_size>
   1057c:	83 c4 10             	add    $0x10,%esp
   1057f:	2d 00 00 10 00       	sub    $0x100000,%eax
   10584:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   10587:	83 ec 08             	sub    $0x8,%esp
   1058a:	68 00 10 00 00       	push   $0x1000
   1058f:	ff 75 f0             	pushl  -0x10(%ebp)
   10592:	e8 45 fd ff ff       	call   102dc <down2>
   10597:	83 c4 10             	add    $0x10,%esp
   1059a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   1059d:	83 ec 04             	sub    $0x4,%esp
   105a0:	ff 75 f0             	pushl  -0x10(%ebp)
   105a3:	68 00 00 10 00       	push   $0x100000
   105a8:	68 1a 28 01 00       	push   $0x1281a
   105ad:	e8 52 21 00 00       	call   12704 <log_printf>
   105b2:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   105b5:	83 ec 0c             	sub    $0xc,%esp
   105b8:	68 00 10 00 00       	push   $0x1000
   105bd:	ff 75 f0             	pushl  -0x10(%ebp)
   105c0:	68 00 00 10 00       	push   $0x100000
   105c5:	ff 75 f4             	pushl  -0xc(%ebp)
   105c8:	68 e0 2d 01 00       	push   $0x12de0
   105cd:	e8 17 fd ff ff       	call   102e9 <addr_alloc_init>
   105d2:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   105d5:	a1 00 2e 01 00       	mov    0x12e00,%eax
   105da:	c1 e8 0c             	shr    $0xc,%eax
   105dd:	83 ec 0c             	sub    $0xc,%esp
   105e0:	50                   	push   %eax
   105e1:	e8 ad 16 00 00       	call   11c93 <bitmap_byte_count>
   105e6:	83 c4 10             	add    $0x10,%esp
   105e9:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   105ec:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   105f3:	76 1c                	jbe    10611 <memory_init+0xcb>
   105f5:	68 34 28 01 00       	push   $0x12834
   105fa:	68 a4 28 01 00       	push   $0x128a4
   105ff:	68 82 00 00 00       	push   $0x82
   10604:	68 5c 28 01 00       	push   $0x1285c
   10609:	e8 f1 1d 00 00       	call   123ff <pannic>
   1060e:	83 c4 10             	add    $0x10,%esp

    // create_kernel_table();
}
   10611:	90                   	nop
   10612:	c9                   	leave  
   10613:	c3                   	ret    

00010614 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10614:	55                   	push   %ebp
   10615:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10617:	8b 45 08             	mov    0x8(%ebp),%eax
   1061a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10620:	8b 45 08             	mov    0x8(%ebp),%eax
   10623:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   1062a:	90                   	nop
   1062b:	5d                   	pop    %ebp
   1062c:	c3                   	ret    

0001062d <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   1062d:	55                   	push   %ebp
   1062e:	89 e5                	mov    %esp,%ebp
    return node->next;
   10630:	8b 45 08             	mov    0x8(%ebp),%eax
   10633:	8b 40 04             	mov    0x4(%eax),%eax
}
   10636:	5d                   	pop    %ebp
   10637:	c3                   	ret    

00010638 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10638:	55                   	push   %ebp
   10639:	89 e5                	mov    %esp,%ebp
    return list->count;
   1063b:	8b 45 08             	mov    0x8(%ebp),%eax
   1063e:	8b 40 08             	mov    0x8(%eax),%eax
}
   10641:	5d                   	pop    %ebp
   10642:	c3                   	ret    

00010643 <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10643:	55                   	push   %ebp
   10644:	89 e5                	mov    %esp,%ebp
    return list->first;
   10646:	8b 45 08             	mov    0x8(%ebp),%eax
   10649:	8b 00                	mov    (%eax),%eax
}
   1064b:	5d                   	pop    %ebp
   1064c:	c3                   	ret    

0001064d <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   1064d:	55                   	push   %ebp
   1064e:	89 e5                	mov    %esp,%ebp
   10650:	83 ec 04             	sub    $0x4,%esp
   10653:	8b 45 08             	mov    0x8(%ebp),%eax
   10656:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   1065a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1065e:	0f 00 d8             	ltr    %ax
}
   10661:	90                   	nop
   10662:	c9                   	leave  
   10663:	c3                   	ret    

00010664 <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   10664:	55                   	push   %ebp
   10665:	89 e5                	mov    %esp,%ebp
   10667:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   1066a:	e8 38 07 00 00       	call   10da7 <gdt_alloc_desc>
   1066f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   10672:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10676:	79 1a                	jns    10692 <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10678:	83 ec 0c             	sub    $0xc,%esp
   1067b:	68 b0 28 01 00       	push   $0x128b0
   10680:	e8 7f 20 00 00       	call   12704 <log_printf>
   10685:	83 c4 10             	add    $0x10,%esp
        return -1;
   10688:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1068d:	e9 d1 00 00 00       	jmp    10763 <tss_init+0xff>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10692:	8b 45 08             	mov    0x8(%ebp),%eax
   10695:	83 c0 48             	add    $0x48,%eax
   10698:	68 89 00 00 00       	push   $0x89
   1069d:	6a 68                	push   $0x68
   1069f:	50                   	push   %eax
   106a0:	ff 75 f4             	pushl  -0xc(%ebp)
   106a3:	e8 a9 05 00 00       	call   10c51 <segment_desc_set>
   106a8:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   106ab:	8b 45 08             	mov    0x8(%ebp),%eax
   106ae:	83 c0 48             	add    $0x48,%eax
   106b1:	83 ec 04             	sub    $0x4,%esp
   106b4:	6a 68                	push   $0x68
   106b6:	6a 00                	push   $0x0
   106b8:	50                   	push   %eax
   106b9:	e8 dc 19 00 00       	call   1209a <kmemset>
   106be:	83 c4 10             	add    $0x10,%esp
    task->tss.eip    = entry;
   106c1:	8b 45 08             	mov    0x8(%ebp),%eax
   106c4:	8b 55 0c             	mov    0xc(%ebp),%edx
   106c7:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   106ca:	8b 45 08             	mov    0x8(%ebp),%eax
   106cd:	8b 55 10             	mov    0x10(%ebp),%edx
   106d0:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   106d6:	8b 45 08             	mov    0x8(%ebp),%eax
   106d9:	8b 55 10             	mov    0x10(%ebp),%edx
   106dc:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = task->tss.ss0 = KERNEL_SELECTOR_DS;
   106df:	8b 45 08             	mov    0x8(%ebp),%eax
   106e2:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   106e9:	8b 45 08             	mov    0x8(%ebp),%eax
   106ec:	8b 50 50             	mov    0x50(%eax),%edx
   106ef:	8b 45 08             	mov    0x8(%ebp),%eax
   106f2:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   106f8:	8b 45 08             	mov    0x8(%ebp),%eax
   106fb:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10702:	00 00 00 
   10705:	8b 45 08             	mov    0x8(%ebp),%eax
   10708:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1070e:	8b 45 08             	mov    0x8(%ebp),%eax
   10711:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10717:	8b 45 08             	mov    0x8(%ebp),%eax
   1071a:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10720:	8b 45 08             	mov    0x8(%ebp),%eax
   10723:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10729:	8b 45 08             	mov    0x8(%ebp),%eax
   1072c:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10732:	8b 45 08             	mov    0x8(%ebp),%eax
   10735:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = KERNEL_SELECTOR_CS;
   1073b:	8b 45 08             	mov    0x8(%ebp),%eax
   1073e:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10745:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10748:	8b 45 08             	mov    0x8(%ebp),%eax
   1074b:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    task->tss_sel    = tss_sel;
   10752:	8b 45 08             	mov    0x8(%ebp),%eax
   10755:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10758:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   1075e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10763:	c9                   	leave  
   10764:	c3                   	ret    

00010765 <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   10765:	55                   	push   %ebp
   10766:	89 e5                	mov    %esp,%ebp
   10768:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1076b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1076f:	75 19                	jne    1078a <task_init+0x25>
   10771:	68 c2 28 01 00       	push   $0x128c2
   10776:	68 34 29 01 00       	push   $0x12934
   1077b:	6a 28                	push   $0x28
   1077d:	68 d8 28 01 00       	push   $0x128d8
   10782:	e8 78 1c 00 00       	call   123ff <pannic>
   10787:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   1078a:	83 ec 04             	sub    $0x4,%esp
   1078d:	ff 75 14             	pushl  0x14(%ebp)
   10790:	ff 75 10             	pushl  0x10(%ebp)
   10793:	ff 75 08             	pushl  0x8(%ebp)
   10796:	e8 c9 fe ff ff       	call   10664 <tss_init>
   1079b:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   1079e:	8b 45 08             	mov    0x8(%ebp),%eax
   107a1:	83 c0 04             	add    $0x4,%eax
   107a4:	83 ec 04             	sub    $0x4,%esp
   107a7:	6a 20                	push   $0x20
   107a9:	ff 75 0c             	pushl  0xc(%ebp)
   107ac:	50                   	push   %eax
   107ad:	e8 74 17 00 00       	call   11f26 <kstrncpy>
   107b2:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   107b5:	8b 45 08             	mov    0x8(%ebp),%eax
   107b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   107be:	8b 45 08             	mov    0x8(%ebp),%eax
   107c1:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   107c8:	8b 45 08             	mov    0x8(%ebp),%eax
   107cb:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   107d2:	8b 45 08             	mov    0x8(%ebp),%eax
   107d5:	8b 50 40             	mov    0x40(%eax),%edx
   107d8:	8b 45 08             	mov    0x8(%ebp),%eax
   107db:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   107de:	8b 45 08             	mov    0x8(%ebp),%eax
   107e1:	83 c0 2c             	add    $0x2c,%eax
   107e4:	83 ec 0c             	sub    $0xc,%esp
   107e7:	50                   	push   %eax
   107e8:	e8 27 fe ff ff       	call   10614 <list_node_init>
   107ed:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   107f0:	8b 45 08             	mov    0x8(%ebp),%eax
   107f3:	83 c0 24             	add    $0x24,%eax
   107f6:	83 ec 0c             	sub    $0xc,%esp
   107f9:	50                   	push   %eax
   107fa:	e8 15 fe ff ff       	call   10614 <list_node_init>
   107ff:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10802:	8b 45 08             	mov    0x8(%ebp),%eax
   10805:	83 c0 34             	add    $0x34,%eax
   10808:	83 ec 0c             	sub    $0xc,%esp
   1080b:	50                   	push   %eax
   1080c:	e8 03 fe ff ff       	call   10614 <list_node_init>
   10811:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10814:	e8 ba 0d 00 00       	call   115d3 <irq_enter_protection>
   10819:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   1081c:	83 ec 0c             	sub    $0xc,%esp
   1081f:	ff 75 08             	pushl  0x8(%ebp)
   10822:	e8 ff 00 00 00       	call   10926 <task_set_ready>
   10827:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   1082a:	8b 45 08             	mov    0x8(%ebp),%eax
   1082d:	83 c0 2c             	add    $0x2c,%eax
   10830:	83 ec 08             	sub    $0x8,%esp
   10833:	50                   	push   %eax
   10834:	68 30 2e 01 00       	push   $0x12e30
   10839:	e8 8c 1c 00 00       	call   124ca <list_insert_back>
   1083e:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10841:	83 ec 0c             	sub    $0xc,%esp
   10844:	ff 75 f4             	pushl  -0xc(%ebp)
   10847:	e8 9f 0d 00 00       	call   115eb <irq_leave_protection>
   1084c:	83 c4 10             	add    $0x10,%esp

    return 0;
   1084f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10854:	c9                   	leave  
   10855:	c3                   	ret    

00010856 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10856:	55                   	push   %ebp
   10857:	89 e5                	mov    %esp,%ebp
   10859:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   1085c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1085f:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10865:	83 ec 0c             	sub    $0xc,%esp
   10868:	50                   	push   %eax
   10869:	e8 25 05 00 00       	call   10d93 <swtch_to_tss>
   1086e:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10871:	90                   	nop
   10872:	c9                   	leave  
   10873:	c3                   	ret    

00010874 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10874:	55                   	push   %ebp
   10875:	89 e5                	mov    %esp,%ebp
    while (1) {
   10877:	eb fe                	jmp    10877 <idle_task_entry+0x3>

00010879 <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10879:	55                   	push   %ebp
   1087a:	89 e5                	mov    %esp,%ebp
   1087c:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1087f:	83 ec 0c             	sub    $0xc,%esp
   10882:	68 24 2e 01 00       	push   $0x12e24
   10887:	e8 bc 1b 00 00       	call   12448 <list_init>
   1088c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1088f:	83 ec 0c             	sub    $0xc,%esp
   10892:	68 30 2e 01 00       	push   $0x12e30
   10897:	e8 ac 1b 00 00       	call   12448 <list_init>
   1089c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1089f:	83 ec 0c             	sub    $0xc,%esp
   108a2:	68 3c 2e 01 00       	push   $0x12e3c
   108a7:	e8 9c 1b 00 00       	call   12448 <list_init>
   108ac:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   108af:	c7 05 20 2e 01 00 00 	movl   $0x0,0x12e20
   108b6:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + IDLE_TASK_SIZE);
   108b9:	b8 c0 2f 01 00       	mov    $0x12fc0,%eax
   108be:	05 00 04 00 00       	add    $0x400,%eax
   108c3:	ba 74 08 01 00       	mov    $0x10874,%edx
   108c8:	50                   	push   %eax
   108c9:	52                   	push   %edx
   108ca:	68 1d 29 01 00       	push   $0x1291d
   108cf:	68 fc 2e 01 00       	push   $0x12efc
   108d4:	e8 8c fe ff ff       	call   10765 <task_init>
   108d9:	83 c4 10             	add    $0x10,%esp
}
   108dc:	90                   	nop
   108dd:	c9                   	leave  
   108de:	c3                   	ret    

000108df <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 入口地址entry 和栈指针esp都无所谓的，因为现在已经在使用了
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   108df:	55                   	push   %ebp
   108e0:	89 e5                	mov    %esp,%ebp
   108e2:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", (uint32_t)0, 0);
   108e5:	6a 00                	push   $0x0
   108e7:	6a 00                	push   $0x0
   108e9:	68 27 29 01 00       	push   $0x12927
   108ee:	68 48 2e 01 00       	push   $0x12e48
   108f3:	e8 6d fe ff ff       	call   10765 <task_init>
   108f8:	83 c4 10             	add    $0x10,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   108fb:	a1 f8 2e 01 00       	mov    0x12ef8,%eax
   10900:	0f b7 c0             	movzwl %ax,%eax
   10903:	83 ec 0c             	sub    $0xc,%esp
   10906:	50                   	push   %eax
   10907:	e8 41 fd ff ff       	call   1064d <write_tr>
   1090c:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   1090f:	c7 05 20 2e 01 00 48 	movl   $0x12e48,0x12e20
   10916:	2e 01 00 
}
   10919:	90                   	nop
   1091a:	c9                   	leave  
   1091b:	c3                   	ret    

0001091c <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   1091c:	55                   	push   %ebp
   1091d:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1091f:	b8 48 2e 01 00       	mov    $0x12e48,%eax
}
   10924:	5d                   	pop    %ebp
   10925:	c3                   	ret    

00010926 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10926:	55                   	push   %ebp
   10927:	89 e5                	mov    %esp,%ebp
   10929:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1092c:	81 7d 08 fc 2e 01 00 	cmpl   $0x12efc,0x8(%ebp)
   10933:	74 22                	je     10957 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10935:	8b 45 08             	mov    0x8(%ebp),%eax
   10938:	83 c0 24             	add    $0x24,%eax
   1093b:	83 ec 08             	sub    $0x8,%esp
   1093e:	50                   	push   %eax
   1093f:	68 24 2e 01 00       	push   $0x12e24
   10944:	e8 81 1b 00 00       	call   124ca <list_insert_back>
   10949:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1094c:	8b 45 08             	mov    0x8(%ebp),%eax
   1094f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10955:	eb 01                	jmp    10958 <task_set_ready+0x32>
        return;
   10957:	90                   	nop
}
   10958:	c9                   	leave  
   10959:	c3                   	ret    

0001095a <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   1095a:	55                   	push   %ebp
   1095b:	89 e5                	mov    %esp,%ebp
   1095d:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10960:	81 7d 08 fc 2e 01 00 	cmpl   $0x12efc,0x8(%ebp)
   10967:	74 19                	je     10982 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	83 c0 24             	add    $0x24,%eax
   1096f:	83 ec 08             	sub    $0x8,%esp
   10972:	50                   	push   %eax
   10973:	68 24 2e 01 00       	push   $0x12e24
   10978:	e8 29 1c 00 00       	call   125a6 <list_remove>
   1097d:	83 c4 10             	add    $0x10,%esp
   10980:	eb 01                	jmp    10983 <task_set_blocked+0x29>
        return;
   10982:	90                   	nop
}
   10983:	c9                   	leave  
   10984:	c3                   	ret    

00010985 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10985:	55                   	push   %ebp
   10986:	89 e5                	mov    %esp,%ebp
   10988:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   1098b:	68 24 2e 01 00       	push   $0x12e24
   10990:	e8 a3 fc ff ff       	call   10638 <list_size>
   10995:	83 c4 04             	add    $0x4,%esp
   10998:	85 c0                	test   %eax,%eax
   1099a:	75 07                	jne    109a3 <task_next_run+0x1e>
        return &task_manager.idle_task;
   1099c:	b8 fc 2e 01 00       	mov    $0x12efc,%eax
   109a1:	eb 23                	jmp    109c6 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   109a3:	68 24 2e 01 00       	push   $0x12e24
   109a8:	e8 96 fc ff ff       	call   10643 <list_first>
   109ad:	83 c4 04             	add    $0x4,%esp
   109b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   109b3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   109b7:	74 08                	je     109c1 <task_next_run+0x3c>
   109b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109bc:	83 e8 24             	sub    $0x24,%eax
   109bf:	eb 05                	jmp    109c6 <task_next_run+0x41>
   109c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   109cb:	a1 20 2e 01 00       	mov    0x12e20,%eax
}
   109d0:	5d                   	pop    %ebp
   109d1:	c3                   	ret    

000109d2 <sys_sched_yield>:


int sys_sched_yield(void) {
   109d2:	55                   	push   %ebp
   109d3:	89 e5                	mov    %esp,%ebp
   109d5:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   109d8:	e8 f6 0b 00 00       	call   115d3 <irq_enter_protection>
   109dd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   109e0:	83 ec 0c             	sub    $0xc,%esp
   109e3:	68 24 2e 01 00       	push   $0x12e24
   109e8:	e8 4b fc ff ff       	call   10638 <list_size>
   109ed:	83 c4 10             	add    $0x10,%esp
   109f0:	83 f8 01             	cmp    $0x1,%eax
   109f3:	7e 29                	jle    10a1e <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   109f5:	e8 ce ff ff ff       	call   109c8 <task_current>
   109fa:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   109fd:	83 ec 0c             	sub    $0xc,%esp
   10a00:	ff 75 f0             	pushl  -0x10(%ebp)
   10a03:	e8 52 ff ff ff       	call   1095a <task_set_blocked>
   10a08:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10a0b:	83 ec 0c             	sub    $0xc,%esp
   10a0e:	ff 75 f0             	pushl  -0x10(%ebp)
   10a11:	e8 10 ff ff ff       	call   10926 <task_set_ready>
   10a16:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10a19:	e8 15 00 00 00       	call   10a33 <task_dispatch>
    }

    irq_leave_protection(state);
   10a1e:	83 ec 0c             	sub    $0xc,%esp
   10a21:	ff 75 f4             	pushl  -0xc(%ebp)
   10a24:	e8 c2 0b 00 00       	call   115eb <irq_leave_protection>
   10a29:	83 c4 10             	add    $0x10,%esp

    return 0;
   10a2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a31:	c9                   	leave  
   10a32:	c3                   	ret    

00010a33 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10a33:	55                   	push   %ebp
   10a34:	89 e5                	mov    %esp,%ebp
   10a36:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10a39:	e8 95 0b 00 00       	call   115d3 <irq_enter_protection>
   10a3e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10a41:	e8 3f ff ff ff       	call   10985 <task_next_run>
   10a46:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10a49:	a1 20 2e 01 00       	mov    0x12e20,%eax
   10a4e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10a51:	74 2a                	je     10a7d <task_dispatch+0x4a>
        task_t* from = task_current();
   10a53:	e8 70 ff ff ff       	call   109c8 <task_current>
   10a58:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10a5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a5e:	a3 20 2e 01 00       	mov    %eax,0x12e20
        to->state = TASK_RUNNING;
   10a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a66:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10a6c:	83 ec 08             	sub    $0x8,%esp
   10a6f:	ff 75 f0             	pushl  -0x10(%ebp)
   10a72:	ff 75 ec             	pushl  -0x14(%ebp)
   10a75:	e8 dc fd ff ff       	call   10856 <task_switch_from_to>
   10a7a:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10a7d:	83 ec 0c             	sub    $0xc,%esp
   10a80:	ff 75 f4             	pushl  -0xc(%ebp)
   10a83:	e8 63 0b 00 00       	call   115eb <irq_leave_protection>
   10a88:	83 c4 10             	add    $0x10,%esp
}
   10a8b:	90                   	nop
   10a8c:	c9                   	leave  
   10a8d:	c3                   	ret    

00010a8e <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10a8e:	55                   	push   %ebp
   10a8f:	89 e5                	mov    %esp,%ebp
   10a91:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10a94:	e8 2f ff ff ff       	call   109c8 <task_current>
   10a99:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   10a9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a9f:	8b 40 44             	mov    0x44(%eax),%eax
   10aa2:	8d 50 ff             	lea    -0x1(%eax),%edx
   10aa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10aa8:	89 50 44             	mov    %edx,0x44(%eax)
   10aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10aae:	8b 40 44             	mov    0x44(%eax),%eax
   10ab1:	85 c0                	test   %eax,%eax
   10ab3:	75 2d                	jne    10ae2 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   10ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ab8:	8b 50 40             	mov    0x40(%eax),%edx
   10abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10abe:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   10ac1:	83 ec 0c             	sub    $0xc,%esp
   10ac4:	ff 75 f0             	pushl  -0x10(%ebp)
   10ac7:	e8 8e fe ff ff       	call   1095a <task_set_blocked>
   10acc:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10acf:	83 ec 0c             	sub    $0xc,%esp
   10ad2:	ff 75 f0             	pushl  -0x10(%ebp)
   10ad5:	e8 4c fe ff ff       	call   10926 <task_set_ready>
   10ada:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10add:	e8 51 ff ff ff       	call   10a33 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   10ae2:	83 ec 0c             	sub    $0xc,%esp
   10ae5:	68 3c 2e 01 00       	push   $0x12e3c
   10aea:	e8 54 fb ff ff       	call   10643 <list_first>
   10aef:	83 c4 10             	add    $0x10,%esp
   10af2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10af5:	eb 62                	jmp    10b59 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   10af7:	83 ec 0c             	sub    $0xc,%esp
   10afa:	ff 75 f4             	pushl  -0xc(%ebp)
   10afd:	e8 2b fb ff ff       	call   1062d <list_node_next>
   10b02:	83 c4 10             	add    $0x10,%esp
   10b05:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   10b08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b0c:	74 08                	je     10b16 <task_time_tick+0x88>
   10b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b11:	83 e8 24             	sub    $0x24,%eax
   10b14:	eb 05                	jmp    10b1b <task_time_tick+0x8d>
   10b16:	b8 00 00 00 00       	mov    $0x0,%eax
   10b1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   10b1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b21:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b24:	8d 50 ff             	lea    -0x1(%eax),%edx
   10b27:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b2a:	89 50 3c             	mov    %edx,0x3c(%eax)
   10b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10b30:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b33:	85 c0                	test   %eax,%eax
   10b35:	75 1c                	jne    10b53 <task_time_tick+0xc5>
            task_set_wakeup(task);
   10b37:	83 ec 0c             	sub    $0xc,%esp
   10b3a:	ff 75 e8             	pushl  -0x18(%ebp)
   10b3d:	e8 56 00 00 00       	call   10b98 <task_set_wakeup>
   10b42:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10b45:	83 ec 0c             	sub    $0xc,%esp
   10b48:	ff 75 e8             	pushl  -0x18(%ebp)
   10b4b:	e8 d6 fd ff ff       	call   10926 <task_set_ready>
   10b50:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   10b53:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10b56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10b59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b5d:	75 98                	jne    10af7 <task_time_tick+0x69>
    }

    task_dispatch();
   10b5f:	e8 cf fe ff ff       	call   10a33 <task_dispatch>
}
   10b64:	90                   	nop
   10b65:	c9                   	leave  
   10b66:	c3                   	ret    

00010b67 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   10b67:	55                   	push   %ebp
   10b68:	89 e5                	mov    %esp,%ebp
   10b6a:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10b6d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10b71:	74 22                	je     10b95 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   10b73:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b76:	8b 45 08             	mov    0x8(%ebp),%eax
   10b79:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   10b7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7f:	83 c0 24             	add    $0x24,%eax
   10b82:	83 ec 08             	sub    $0x8,%esp
   10b85:	50                   	push   %eax
   10b86:	68 3c 2e 01 00       	push   $0x12e3c
   10b8b:	e8 3a 19 00 00       	call   124ca <list_insert_back>
   10b90:	83 c4 10             	add    $0x10,%esp
   10b93:	eb 01                	jmp    10b96 <task_set_sleep+0x2f>
        return;
   10b95:	90                   	nop
}
   10b96:	c9                   	leave  
   10b97:	c3                   	ret    

00010b98 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
   10b9b:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   10b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba1:	83 c0 24             	add    $0x24,%eax
   10ba4:	83 ec 08             	sub    $0x8,%esp
   10ba7:	50                   	push   %eax
   10ba8:	68 3c 2e 01 00       	push   $0x12e3c
   10bad:	e8 f4 19 00 00       	call   125a6 <list_remove>
   10bb2:	83 c4 10             	add    $0x10,%esp
}
   10bb5:	90                   	nop
   10bb6:	c9                   	leave  
   10bb7:	c3                   	ret    

00010bb8 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   10bb8:	55                   	push   %ebp
   10bb9:	89 e5                	mov    %esp,%ebp
   10bbb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10bbe:	e8 10 0a 00 00       	call   115d3 <irq_enter_protection>
   10bc3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   10bc6:	a1 20 2e 01 00       	mov    0x12e20,%eax
   10bcb:	83 ec 0c             	sub    $0xc,%esp
   10bce:	50                   	push   %eax
   10bcf:	e8 86 fd ff ff       	call   1095a <task_set_blocked>
   10bd4:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	83 c0 09             	add    $0x9,%eax
   10bdd:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10be2:	f7 e2                	mul    %edx
   10be4:	c1 ea 03             	shr    $0x3,%edx
   10be7:	a1 20 2e 01 00       	mov    0x12e20,%eax
   10bec:	83 ec 08             	sub    $0x8,%esp
   10bef:	52                   	push   %edx
   10bf0:	50                   	push   %eax
   10bf1:	e8 71 ff ff ff       	call   10b67 <task_set_sleep>
   10bf6:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   10bf9:	e8 35 fe ff ff       	call   10a33 <task_dispatch>

    irq_leave_protection(state);
   10bfe:	83 ec 0c             	sub    $0xc,%esp
   10c01:	ff 75 f4             	pushl  -0xc(%ebp)
   10c04:	e8 e2 09 00 00       	call   115eb <irq_leave_protection>
   10c09:	83 c4 10             	add    $0x10,%esp
   10c0c:	90                   	nop
   10c0d:	c9                   	leave  
   10c0e:	c3                   	ret    

00010c0f <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10c0f:	55                   	push   %ebp
   10c10:	89 e5                	mov    %esp,%ebp
   10c12:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   10c15:	8b 45 08             	mov    0x8(%ebp),%eax
   10c18:	c1 e8 10             	shr    $0x10,%eax
   10c1b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   10c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c22:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   10c26:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c29:	83 e8 01             	sub    $0x1,%eax
   10c2c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10c30:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10c34:	90                   	nop
   10c35:	c9                   	leave  
   10c36:	c3                   	ret    

00010c37 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10c37:	55                   	push   %ebp
   10c38:	89 e5                	mov    %esp,%ebp
   10c3a:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   10c3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c40:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10c43:	8b 45 08             	mov    0x8(%ebp),%eax
   10c46:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10c49:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10c4c:	ff 28                	ljmp   *(%eax)
}
   10c4e:	90                   	nop
   10c4f:	c9                   	leave  
   10c50:	c3                   	ret    

00010c51 <segment_desc_set>:

// selector: 段选择子
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10c51:	55                   	push   %ebp
   10c52:	89 e5                	mov    %esp,%ebp
   10c54:	83 ec 14             	sub    $0x14,%esp
   10c57:	8b 45 14             	mov    0x14(%ebp),%eax
   10c5a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   10c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c61:	83 e0 f8             	and    $0xfffffff8,%eax
   10c64:	05 c0 3f 01 00       	add    $0x13fc0,%eax
   10c69:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   10c6c:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10c73:	76 0f                	jbe    10c84 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   10c75:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10c7b:	8b 45 10             	mov    0x10(%ebp),%eax
   10c7e:	c1 e8 0c             	shr    $0xc,%eax
   10c81:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   10c84:	8b 45 10             	mov    0x10(%ebp),%eax
   10c87:	89 c2                	mov    %eax,%edx
   10c89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c8c:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   10c8f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c92:	89 c2                	mov    %eax,%edx
   10c94:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c97:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10c9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c9e:	c1 e8 10             	shr    $0x10,%eax
   10ca1:	89 c2                	mov    %eax,%edx
   10ca3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ca6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   10ca9:	8b 45 10             	mov    0x10(%ebp),%eax
   10cac:	c1 e8 10             	shr    $0x10,%eax
   10caf:	c1 e0 08             	shl    $0x8,%eax
   10cb2:	66 25 00 0f          	and    $0xf00,%ax
   10cb6:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10cba:	89 c2                	mov    %eax,%edx
   10cbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10cbf:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10cc3:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cc6:	c1 e8 18             	shr    $0x18,%eax
   10cc9:	89 c2                	mov    %eax,%edx
   10ccb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10cce:	88 50 07             	mov    %dl,0x7(%eax)
}
   10cd1:	90                   	nop
   10cd2:	c9                   	leave  
   10cd3:	c3                   	ret    

00010cd4 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10cd4:	55                   	push   %ebp
   10cd5:	89 e5                	mov    %esp,%ebp
   10cd7:	83 ec 08             	sub    $0x8,%esp
   10cda:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cdd:	8b 45 14             	mov    0x14(%ebp),%eax
   10ce0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10ce4:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   10ce8:	8b 45 10             	mov    0x10(%ebp),%eax
   10ceb:	89 c2                	mov    %eax,%edx
   10ced:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf0:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10cfa:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   10d01:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10d05:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10d09:	8b 45 10             	mov    0x10(%ebp),%eax
   10d0c:	c1 e8 10             	shr    $0x10,%eax
   10d0f:	89 c2                	mov    %eax,%edx
   10d11:	8b 45 08             	mov    0x8(%ebp),%eax
   10d14:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10d18:	90                   	nop
   10d19:	c9                   	leave  
   10d1a:	c3                   	ret    

00010d1b <init_gdt>:


void init_gdt(void) {
   10d1b:	55                   	push   %ebp
   10d1c:	89 e5                	mov    %esp,%ebp
   10d1e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10d21:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10d28:	eb 19                	jmp    10d43 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10d2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d2d:	c1 e0 03             	shl    $0x3,%eax
   10d30:	6a 00                	push   $0x0
   10d32:	6a 00                	push   $0x0
   10d34:	6a 00                	push   $0x0
   10d36:	50                   	push   %eax
   10d37:	e8 15 ff ff ff       	call   10c51 <segment_desc_set>
   10d3c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10d3f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10d43:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10d4a:	7e de                	jle    10d2a <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10d4c:	68 92 40 00 00       	push   $0x4092
   10d51:	6a ff                	push   $0xffffffff
   10d53:	6a 00                	push   $0x0
   10d55:	6a 10                	push   $0x10
   10d57:	e8 f5 fe ff ff       	call   10c51 <segment_desc_set>
   10d5c:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10d5f:	68 9a 40 00 00       	push   $0x409a
   10d64:	6a ff                	push   $0xffffffff
   10d66:	6a 00                	push   $0x0
   10d68:	6a 08                	push   $0x8
   10d6a:	e8 e2 fe ff ff       	call   10c51 <segment_desc_set>
   10d6f:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10d72:	b8 c0 3f 01 00       	mov    $0x13fc0,%eax
   10d77:	68 00 08 00 00       	push   $0x800
   10d7c:	50                   	push   %eax
   10d7d:	e8 8d fe ff ff       	call   10c0f <lgdt>
   10d82:	83 c4 08             	add    $0x8,%esp
}
   10d85:	90                   	nop
   10d86:	c9                   	leave  
   10d87:	c3                   	ret    

00010d88 <cpu_init>:


void cpu_init(void) {
   10d88:	55                   	push   %ebp
   10d89:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10d8b:	e8 8b ff ff ff       	call   10d1b <init_gdt>
}
   10d90:	90                   	nop
   10d91:	5d                   	pop    %ebp
   10d92:	c3                   	ret    

00010d93 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   10d93:	55                   	push   %ebp
   10d94:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   10d96:	8b 45 08             	mov    0x8(%ebp),%eax
   10d99:	6a 00                	push   $0x0
   10d9b:	50                   	push   %eax
   10d9c:	e8 96 fe ff ff       	call   10c37 <far_jump>
   10da1:	83 c4 08             	add    $0x8,%esp
}
   10da4:	90                   	nop
   10da5:	c9                   	leave  
   10da6:	c3                   	ret    

00010da7 <gdt_alloc_desc>:


int gdt_alloc_desc(void) {
   10da7:	55                   	push   %ebp
   10da8:	89 e5                	mov    %esp,%ebp
   10daa:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10dad:	e8 21 08 00 00       	call   115d3 <irq_enter_protection>
   10db2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   10db5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10dbc:	eb 34                	jmp    10df2 <gdt_alloc_desc+0x4b>
        segment_desc_t* desc = gdt_table + i;
   10dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dc1:	c1 e0 03             	shl    $0x3,%eax
   10dc4:	05 c0 3f 01 00       	add    $0x13fc0,%eax
   10dc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (desc->attr == 0) {
   10dcc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10dcf:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10dd3:	66 85 c0             	test   %ax,%ax
   10dd6:	75 16                	jne    10dee <gdt_alloc_desc+0x47>

            irq_leave_protection(state);
   10dd8:	83 ec 0c             	sub    $0xc,%esp
   10ddb:	ff 75 f0             	pushl  -0x10(%ebp)
   10dde:	e8 08 08 00 00       	call   115eb <irq_leave_protection>
   10de3:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   10de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10de9:	c1 e0 03             	shl    $0x3,%eax
   10dec:	eb 20                	jmp    10e0e <gdt_alloc_desc+0x67>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   10dee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10df2:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10df9:	7e c3                	jle    10dbe <gdt_alloc_desc+0x17>
        }
    }

    irq_leave_protection(state);
   10dfb:	83 ec 0c             	sub    $0xc,%esp
   10dfe:	ff 75 f0             	pushl  -0x10(%ebp)
   10e01:	e8 e5 07 00 00       	call   115eb <irq_leave_protection>
   10e06:	83 c4 10             	add    $0x10,%esp

    return -1;
   10e09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10e0e:	c9                   	leave  
   10e0f:	c3                   	ret    

00010e10 <inb>:
static inline uint8_t inb(uint16_t port) {
   10e10:	55                   	push   %ebp
   10e11:	89 e5                	mov    %esp,%ebp
   10e13:	83 ec 14             	sub    $0x14,%esp
   10e16:	8b 45 08             	mov    0x8(%ebp),%eax
   10e19:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   10e1d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10e21:	89 c2                	mov    %eax,%edx
   10e23:	ec                   	in     (%dx),%al
   10e24:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10e27:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10e2b:	c9                   	leave  
   10e2c:	c3                   	ret    

00010e2d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10e2d:	55                   	push   %ebp
   10e2e:	89 e5                	mov    %esp,%ebp
   10e30:	83 ec 08             	sub    $0x8,%esp
   10e33:	8b 55 08             	mov    0x8(%ebp),%edx
   10e36:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e39:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10e3d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   10e40:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10e44:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10e48:	ee                   	out    %al,(%dx)
}
   10e49:	90                   	nop
   10e4a:	c9                   	leave  
   10e4b:	c3                   	ret    

00010e4c <cli>:
static inline void cli(void) {
   10e4c:	55                   	push   %ebp
   10e4d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   10e4f:	fa                   	cli    
}
   10e50:	90                   	nop
   10e51:	5d                   	pop    %ebp
   10e52:	c3                   	ret    

00010e53 <sti>:
static inline void sti(void) {
   10e53:	55                   	push   %ebp
   10e54:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   10e56:	fb                   	sti    
}
   10e57:	90                   	nop
   10e58:	5d                   	pop    %ebp
   10e59:	c3                   	ret    

00010e5a <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10e5a:	55                   	push   %ebp
   10e5b:	89 e5                	mov    %esp,%ebp
   10e5d:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   10e60:	8b 45 08             	mov    0x8(%ebp),%eax
   10e63:	c1 e8 10             	shr    $0x10,%eax
   10e66:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   10e6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e6d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   10e71:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e74:	83 e8 01             	sub    $0x1,%eax
   10e77:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   10e7b:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10e7f:	90                   	nop
   10e80:	c9                   	leave  
   10e81:	c3                   	ret    

00010e82 <hlt>:
static inline void hlt(void) {
   10e82:	55                   	push   %ebp
   10e83:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10e85:	f4                   	hlt    
}
   10e86:	90                   	nop
   10e87:	5d                   	pop    %ebp
   10e88:	c3                   	ret    

00010e89 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   10e89:	55                   	push   %ebp
   10e8a:	89 e5                	mov    %esp,%ebp
   10e8c:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10e8f:	9c                   	pushf  
   10e90:	58                   	pop    %eax
   10e91:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10e94:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10e97:	c9                   	leave  
   10e98:	c3                   	ret    

00010e99 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   10e99:	55                   	push   %ebp
   10e9a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   10e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9f:	50                   	push   %eax
   10ea0:	9d                   	popf   
}
   10ea1:	90                   	nop
   10ea2:	5d                   	pop    %ebp
   10ea3:	c3                   	ret    

00010ea4 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   10ea4:	55                   	push   %ebp
   10ea5:	89 e5                	mov    %esp,%ebp
   10ea7:	57                   	push   %edi
   10ea8:	56                   	push   %esi
   10ea9:	53                   	push   %ebx
   10eaa:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   10ead:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb0:	8b 50 34             	mov    0x34(%eax),%edx
   10eb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb6:	8b 40 30             	mov    0x30(%eax),%eax
   10eb9:	83 ec 04             	sub    $0x4,%esp
   10ebc:	52                   	push   %edx
   10ebd:	50                   	push   %eax
   10ebe:	68 40 29 01 00       	push   $0x12940
   10ec3:	e8 3c 18 00 00       	call   12704 <log_printf>
   10ec8:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
   10ecb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ece:	8b 38                	mov    (%eax),%edi
   10ed0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed3:	8b 70 04             	mov    0x4(%eax),%esi
   10ed6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed9:	8b 58 0c             	mov    0xc(%eax),%ebx
   10edc:	8b 45 08             	mov    0x8(%ebp),%eax
   10edf:	8b 48 08             	mov    0x8(%eax),%ecx
   10ee2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee5:	8b 50 0c             	mov    0xc(%eax),%edx
   10ee8:	8b 45 08             	mov    0x8(%ebp),%eax
   10eeb:	8b 40 3c             	mov    0x3c(%eax),%eax
   10eee:	83 ec 04             	sub    $0x4,%esp
   10ef1:	57                   	push   %edi
   10ef2:	56                   	push   %esi
   10ef3:	53                   	push   %ebx
   10ef4:	51                   	push   %ecx
   10ef5:	52                   	push   %edx
   10ef6:	50                   	push   %eax
   10ef7:	68 58 29 01 00       	push   $0x12958
   10efc:	e8 03 18 00 00       	call   12704 <log_printf>
   10f01:	83 c4 20             	add    $0x20,%esp
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, frame->esp);
   10f04:	8b 45 08             	mov    0x8(%ebp),%eax
   10f07:	8b 40 1c             	mov    0x1c(%eax),%eax
   10f0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10f0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f10:	8b 78 18             	mov    0x18(%eax),%edi
   10f13:	8b 45 08             	mov    0x8(%ebp),%eax
   10f16:	8b 70 14             	mov    0x14(%eax),%esi
   10f19:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1c:	8b 58 10             	mov    0x10(%eax),%ebx
   10f1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f22:	8b 48 24             	mov    0x24(%eax),%ecx
   10f25:	8b 45 08             	mov    0x8(%ebp),%eax
   10f28:	8b 50 20             	mov    0x20(%eax),%edx
   10f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2e:	8b 40 2c             	mov    0x2c(%eax),%eax
   10f31:	ff 75 e4             	pushl  -0x1c(%ebp)
   10f34:	57                   	push   %edi
   10f35:	56                   	push   %esi
   10f36:	53                   	push   %ebx
   10f37:	51                   	push   %ecx
   10f38:	52                   	push   %edx
   10f39:	50                   	push   %eax
   10f3a:	68 84 29 01 00       	push   $0x12984
   10f3f:	e8 c0 17 00 00       	call   12704 <log_printf>
   10f44:	83 c4 20             	add    $0x20,%esp
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   10f47:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4a:	8b 50 40             	mov    0x40(%eax),%edx
   10f4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f50:	8b 40 38             	mov    0x38(%eax),%eax
   10f53:	83 ec 04             	sub    $0x4,%esp
   10f56:	52                   	push   %edx
   10f57:	50                   	push   %eax
   10f58:	68 bd 29 01 00       	push   $0x129bd
   10f5d:	e8 a2 17 00 00       	call   12704 <log_printf>
   10f62:	83 c4 10             	add    $0x10,%esp
}
   10f65:	90                   	nop
   10f66:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10f69:	5b                   	pop    %ebx
   10f6a:	5e                   	pop    %esi
   10f6b:	5f                   	pop    %edi
   10f6c:	5d                   	pop    %ebp
   10f6d:	c3                   	ret    

00010f6e <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   10f6e:	55                   	push   %ebp
   10f6f:	89 e5                	mov    %esp,%ebp
   10f71:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   10f74:	83 ec 0c             	sub    $0xc,%esp
   10f77:	68 d4 29 01 00       	push   $0x129d4
   10f7c:	e8 83 17 00 00       	call   12704 <log_printf>
   10f81:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   10f84:	83 ec 08             	sub    $0x8,%esp
   10f87:	ff 75 0c             	pushl  0xc(%ebp)
   10f8a:	68 ff 29 01 00       	push   $0x129ff
   10f8f:	e8 70 17 00 00       	call   12704 <log_printf>
   10f94:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10f97:	83 ec 0c             	sub    $0xc,%esp
   10f9a:	ff 75 08             	pushl  0x8(%ebp)
   10f9d:	e8 02 ff ff ff       	call   10ea4 <dump_core_regs>
   10fa2:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   10fa5:	e8 d8 fe ff ff       	call   10e82 <hlt>
   10faa:	eb f9                	jmp    10fa5 <do_default_handler+0x37>

00010fac <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   10fac:	55                   	push   %ebp
   10fad:	89 e5                	mov    %esp,%ebp
   10faf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   10fb2:	83 ec 08             	sub    $0x8,%esp
   10fb5:	68 11 2a 01 00       	push   $0x12a11
   10fba:	ff 75 08             	pushl  0x8(%ebp)
   10fbd:	e8 ac ff ff ff       	call   10f6e <do_default_handler>
   10fc2:	83 c4 10             	add    $0x10,%esp
}
   10fc5:	90                   	nop
   10fc6:	c9                   	leave  
   10fc7:	c3                   	ret    

00010fc8 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   10fc8:	55                   	push   %ebp
   10fc9:	89 e5                	mov    %esp,%ebp
   10fcb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   10fce:	83 ec 08             	sub    $0x8,%esp
   10fd1:	68 23 2a 01 00       	push   $0x12a23
   10fd6:	ff 75 08             	pushl  0x8(%ebp)
   10fd9:	e8 90 ff ff ff       	call   10f6e <do_default_handler>
   10fde:	83 c4 10             	add    $0x10,%esp
}
   10fe1:	90                   	nop
   10fe2:	c9                   	leave  
   10fe3:	c3                   	ret    

00010fe4 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   10fe4:	55                   	push   %ebp
   10fe5:	89 e5                	mov    %esp,%ebp
   10fe7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   10fea:	83 ec 08             	sub    $0x8,%esp
   10fed:	68 3d 2a 01 00       	push   $0x12a3d
   10ff2:	ff 75 08             	pushl  0x8(%ebp)
   10ff5:	e8 74 ff ff ff       	call   10f6e <do_default_handler>
   10ffa:	83 c4 10             	add    $0x10,%esp
}   
   10ffd:	90                   	nop
   10ffe:	c9                   	leave  
   10fff:	c3                   	ret    

00011000 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   11000:	55                   	push   %ebp
   11001:	89 e5                	mov    %esp,%ebp
   11003:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   11006:	83 ec 08             	sub    $0x8,%esp
   11009:	68 58 2a 01 00       	push   $0x12a58
   1100e:	ff 75 08             	pushl  0x8(%ebp)
   11011:	e8 58 ff ff ff       	call   10f6e <do_default_handler>
   11016:	83 c4 10             	add    $0x10,%esp
}   
   11019:	90                   	nop
   1101a:	c9                   	leave  
   1101b:	c3                   	ret    

0001101c <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   1101c:	55                   	push   %ebp
   1101d:	89 e5                	mov    %esp,%ebp
   1101f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   11022:	83 ec 08             	sub    $0x8,%esp
   11025:	68 71 2a 01 00       	push   $0x12a71
   1102a:	ff 75 08             	pushl  0x8(%ebp)
   1102d:	e8 3c ff ff ff       	call   10f6e <do_default_handler>
   11032:	83 c4 10             	add    $0x10,%esp
}   
   11035:	90                   	nop
   11036:	c9                   	leave  
   11037:	c3                   	ret    

00011038 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   11038:	55                   	push   %ebp
   11039:	89 e5                	mov    %esp,%ebp
   1103b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   1103e:	83 ec 08             	sub    $0x8,%esp
   11041:	68 87 2a 01 00       	push   $0x12a87
   11046:	ff 75 08             	pushl  0x8(%ebp)
   11049:	e8 20 ff ff ff       	call   10f6e <do_default_handler>
   1104e:	83 c4 10             	add    $0x10,%esp
}   
   11051:	90                   	nop
   11052:	c9                   	leave  
   11053:	c3                   	ret    

00011054 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   11054:	55                   	push   %ebp
   11055:	89 e5                	mov    %esp,%ebp
   11057:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   1105a:	83 ec 08             	sub    $0x8,%esp
   1105d:	68 9b 2a 01 00       	push   $0x12a9b
   11062:	ff 75 08             	pushl  0x8(%ebp)
   11065:	e8 04 ff ff ff       	call   10f6e <do_default_handler>
   1106a:	83 c4 10             	add    $0x10,%esp
}   
   1106d:	90                   	nop
   1106e:	c9                   	leave  
   1106f:	c3                   	ret    

00011070 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   11070:	55                   	push   %ebp
   11071:	89 e5                	mov    %esp,%ebp
   11073:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   11076:	83 ec 08             	sub    $0x8,%esp
   11079:	68 b9 2a 01 00       	push   $0x12ab9
   1107e:	ff 75 08             	pushl  0x8(%ebp)
   11081:	e8 e8 fe ff ff       	call   10f6e <do_default_handler>
   11086:	83 c4 10             	add    $0x10,%esp
}   
   11089:	90                   	nop
   1108a:	c9                   	leave  
   1108b:	c3                   	ret    

0001108c <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   1108c:	55                   	push   %ebp
   1108d:	89 e5                	mov    %esp,%ebp
   1108f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   11092:	83 ec 08             	sub    $0x8,%esp
   11095:	68 d3 2a 01 00       	push   $0x12ad3
   1109a:	ff 75 08             	pushl  0x8(%ebp)
   1109d:	e8 cc fe ff ff       	call   10f6e <do_default_handler>
   110a2:	83 c4 10             	add    $0x10,%esp
}   
   110a5:	90                   	nop
   110a6:	c9                   	leave  
   110a7:	c3                   	ret    

000110a8 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   110a8:	55                   	push   %ebp
   110a9:	89 e5                	mov    %esp,%ebp
   110ab:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   110ae:	83 ec 08             	sub    $0x8,%esp
   110b1:	68 ef 2a 01 00       	push   $0x12aef
   110b6:	ff 75 08             	pushl  0x8(%ebp)
   110b9:	e8 b0 fe ff ff       	call   10f6e <do_default_handler>
   110be:	83 c4 10             	add    $0x10,%esp
}   
   110c1:	90                   	nop
   110c2:	c9                   	leave  
   110c3:	c3                   	ret    

000110c4 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   110c4:	55                   	push   %ebp
   110c5:	89 e5                	mov    %esp,%ebp
   110c7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   110ca:	83 ec 08             	sub    $0x8,%esp
   110cd:	68 07 2b 01 00       	push   $0x12b07
   110d2:	ff 75 08             	pushl  0x8(%ebp)
   110d5:	e8 94 fe ff ff       	call   10f6e <do_default_handler>
   110da:	83 c4 10             	add    $0x10,%esp
}   
   110dd:	90                   	nop
   110de:	c9                   	leave  
   110df:	c3                   	ret    

000110e0 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   110e0:	55                   	push   %ebp
   110e1:	89 e5                	mov    %esp,%ebp
   110e3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   110e6:	83 ec 08             	sub    $0x8,%esp
   110e9:	68 20 2b 01 00       	push   $0x12b20
   110ee:	ff 75 08             	pushl  0x8(%ebp)
   110f1:	e8 78 fe ff ff       	call   10f6e <do_default_handler>
   110f6:	83 c4 10             	add    $0x10,%esp
}   
   110f9:	90                   	nop
   110fa:	c9                   	leave  
   110fb:	c3                   	ret    

000110fc <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   110fc:	55                   	push   %ebp
   110fd:	89 e5                	mov    %esp,%ebp
   110ff:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   11102:	83 ec 08             	sub    $0x8,%esp
   11105:	68 40 2b 01 00       	push   $0x12b40
   1110a:	ff 75 08             	pushl  0x8(%ebp)
   1110d:	e8 5c fe ff ff       	call   10f6e <do_default_handler>
   11112:	83 c4 10             	add    $0x10,%esp
}   
   11115:	90                   	nop
   11116:	c9                   	leave  
   11117:	c3                   	ret    

00011118 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   11118:	55                   	push   %ebp
   11119:	89 e5                	mov    %esp,%ebp
   1111b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: General protection");
   1111e:	83 ec 08             	sub    $0x8,%esp
   11121:	68 5f 2b 01 00       	push   $0x12b5f
   11126:	ff 75 08             	pushl  0x8(%ebp)
   11129:	e8 40 fe ff ff       	call   10f6e <do_default_handler>
   1112e:	83 c4 10             	add    $0x10,%esp
}   
   11131:	90                   	nop
   11132:	c9                   	leave  
   11133:	c3                   	ret    

00011134 <do_handler_page_fault>:


// Exception: 
void do_handler_page_fault(exception_frame_t* frame) {
   11134:	55                   	push   %ebp
   11135:	89 e5                	mov    %esp,%ebp
   11137:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Page fault");
   1113a:	83 ec 08             	sub    $0x8,%esp
   1113d:	68 7d 2b 01 00       	push   $0x12b7d
   11142:	ff 75 08             	pushl  0x8(%ebp)
   11145:	e8 24 fe ff ff       	call   10f6e <do_default_handler>
   1114a:	83 c4 10             	add    $0x10,%esp
}   
   1114d:	90                   	nop
   1114e:	c9                   	leave  
   1114f:	c3                   	ret    

00011150 <do_handler_floating_point_error>:


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11150:	55                   	push   %ebp
   11151:	89 e5                	mov    %esp,%ebp
   11153:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11156:	83 ec 08             	sub    $0x8,%esp
   11159:	68 94 2b 01 00       	push   $0x12b94
   1115e:	ff 75 08             	pushl  0x8(%ebp)
   11161:	e8 08 fe ff ff       	call   10f6e <do_default_handler>
   11166:	83 c4 10             	add    $0x10,%esp
}   
   11169:	90                   	nop
   1116a:	c9                   	leave  
   1116b:	c3                   	ret    

0001116c <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   1116c:	55                   	push   %ebp
   1116d:	89 e5                	mov    %esp,%ebp
   1116f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11172:	83 ec 08             	sub    $0x8,%esp
   11175:	68 b4 2b 01 00       	push   $0x12bb4
   1117a:	ff 75 08             	pushl  0x8(%ebp)
   1117d:	e8 ec fd ff ff       	call   10f6e <do_default_handler>
   11182:	83 c4 10             	add    $0x10,%esp
}   
   11185:	90                   	nop
   11186:	c9                   	leave  
   11187:	c3                   	ret    

00011188 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11188:	55                   	push   %ebp
   11189:	89 e5                	mov    %esp,%ebp
   1118b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   1118e:	83 ec 08             	sub    $0x8,%esp
   11191:	68 ce 2b 01 00       	push   $0x12bce
   11196:	ff 75 08             	pushl  0x8(%ebp)
   11199:	e8 d0 fd ff ff       	call   10f6e <do_default_handler>
   1119e:	83 c4 10             	add    $0x10,%esp
}   
   111a1:	90                   	nop
   111a2:	c9                   	leave  
   111a3:	c3                   	ret    

000111a4 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   111a4:	55                   	push   %ebp
   111a5:	89 e5                	mov    %esp,%ebp
   111a7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   111aa:	83 ec 08             	sub    $0x8,%esp
   111ad:	68 e8 2b 01 00       	push   $0x12be8
   111b2:	ff 75 08             	pushl  0x8(%ebp)
   111b5:	e8 b4 fd ff ff       	call   10f6e <do_default_handler>
   111ba:	83 c4 10             	add    $0x10,%esp
}
   111bd:	90                   	nop
   111be:	c9                   	leave  
   111bf:	c3                   	ret    

000111c0 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   111c0:	55                   	push   %ebp
   111c1:	89 e5                	mov    %esp,%ebp
   111c3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   111c6:	83 ec 08             	sub    $0x8,%esp
   111c9:	68 14 2c 01 00       	push   $0x12c14
   111ce:	ff 75 08             	pushl  0x8(%ebp)
   111d1:	e8 98 fd ff ff       	call   10f6e <do_default_handler>
   111d6:	83 c4 10             	add    $0x10,%esp
}
   111d9:	90                   	nop
   111da:	c9                   	leave  
   111db:	c3                   	ret    

000111dc <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   111dc:	55                   	push   %ebp
   111dd:	89 e5                	mov    %esp,%ebp
   111df:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   111e2:	83 ec 08             	sub    $0x8,%esp
   111e5:	68 38 2c 01 00       	push   $0x12c38
   111ea:	ff 75 08             	pushl  0x8(%ebp)
   111ed:	e8 7c fd ff ff       	call   10f6e <do_default_handler>
   111f2:	83 c4 10             	add    $0x10,%esp
}
   111f5:	90                   	nop
   111f6:	c9                   	leave  
   111f7:	c3                   	ret    

000111f8 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   111f8:	55                   	push   %ebp
   111f9:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   111fb:	6a 11                	push   $0x11
   111fd:	6a 20                	push   $0x20
   111ff:	e8 29 fc ff ff       	call   10e2d <outb>
   11204:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11207:	6a 20                	push   $0x20
   11209:	6a 21                	push   $0x21
   1120b:	e8 1d fc ff ff       	call   10e2d <outb>
   11210:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11213:	6a 04                	push   $0x4
   11215:	6a 21                	push   $0x21
   11217:	e8 11 fc ff ff       	call   10e2d <outb>
   1121c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   1121f:	6a 01                	push   $0x1
   11221:	6a 21                	push   $0x21
   11223:	e8 05 fc ff ff       	call   10e2d <outb>
   11228:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1122b:	6a 11                	push   $0x11
   1122d:	68 a0 00 00 00       	push   $0xa0
   11232:	e8 f6 fb ff ff       	call   10e2d <outb>
   11237:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1123a:	6a 28                	push   $0x28
   1123c:	68 a1 00 00 00       	push   $0xa1
   11241:	e8 e7 fb ff ff       	call   10e2d <outb>
   11246:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11249:	6a 02                	push   $0x2
   1124b:	68 a1 00 00 00       	push   $0xa1
   11250:	e8 d8 fb ff ff       	call   10e2d <outb>
   11255:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11258:	6a 01                	push   $0x1
   1125a:	68 a1 00 00 00       	push   $0xa1
   1125f:	e8 c9 fb ff ff       	call   10e2d <outb>
   11264:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11267:	68 fb 00 00 00       	push   $0xfb
   1126c:	6a 21                	push   $0x21
   1126e:	e8 ba fb ff ff       	call   10e2d <outb>
   11273:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11276:	68 ff 00 00 00       	push   $0xff
   1127b:	68 a1 00 00 00       	push   $0xa1
   11280:	e8 a8 fb ff ff       	call   10e2d <outb>
   11285:	83 c4 08             	add    $0x8,%esp
}
   11288:	90                   	nop
   11289:	c9                   	leave  
   1128a:	c3                   	ret    

0001128b <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   1128b:	55                   	push   %ebp
   1128c:	89 e5                	mov    %esp,%ebp
   1128e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11291:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11298:	eb 25                	jmp    112bf <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   1129a:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   1129f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112a2:	c1 e0 03             	shl    $0x3,%eax
   112a5:	05 c0 47 01 00       	add    $0x147c0,%eax
   112aa:	68 00 8e 00 00       	push   $0x8e00
   112af:	52                   	push   %edx
   112b0:	6a 08                	push   $0x8
   112b2:	50                   	push   %eax
   112b3:	e8 1c fa ff ff       	call   10cd4 <gate_desc_set>
   112b8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   112bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   112bf:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   112c3:	7e d5                	jle    1129a <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   112c5:	83 ec 08             	sub    $0x8,%esp
   112c8:	68 4a 00 01 00       	push   $0x1004a
   112cd:	6a 00                	push   $0x0
   112cf:	e8 77 01 00 00       	call   1144b <irq_install>
   112d4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   112d7:	83 ec 08             	sub    $0x8,%esp
   112da:	68 69 00 01 00       	push   $0x10069
   112df:	6a 01                	push   $0x1
   112e1:	e8 65 01 00 00       	call   1144b <irq_install>
   112e6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   112e9:	83 ec 08             	sub    $0x8,%esp
   112ec:	68 88 00 01 00       	push   $0x10088
   112f1:	6a 02                	push   $0x2
   112f3:	e8 53 01 00 00       	call   1144b <irq_install>
   112f8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   112fb:	83 ec 08             	sub    $0x8,%esp
   112fe:	68 a7 00 01 00       	push   $0x100a7
   11303:	6a 03                	push   $0x3
   11305:	e8 41 01 00 00       	call   1144b <irq_install>
   1130a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   1130d:	83 ec 08             	sub    $0x8,%esp
   11310:	68 c6 00 01 00       	push   $0x100c6
   11315:	6a 04                	push   $0x4
   11317:	e8 2f 01 00 00       	call   1144b <irq_install>
   1131c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   1131f:	83 ec 08             	sub    $0x8,%esp
   11322:	68 e5 00 01 00       	push   $0x100e5
   11327:	6a 05                	push   $0x5
   11329:	e8 1d 01 00 00       	call   1144b <irq_install>
   1132e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11331:	83 ec 08             	sub    $0x8,%esp
   11334:	68 04 01 01 00       	push   $0x10104
   11339:	6a 06                	push   $0x6
   1133b:	e8 0b 01 00 00       	call   1144b <irq_install>
   11340:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11343:	83 ec 08             	sub    $0x8,%esp
   11346:	68 23 01 01 00       	push   $0x10123
   1134b:	6a 07                	push   $0x7
   1134d:	e8 f9 00 00 00       	call   1144b <irq_install>
   11352:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11355:	83 ec 08             	sub    $0x8,%esp
   11358:	68 42 01 01 00       	push   $0x10142
   1135d:	6a 08                	push   $0x8
   1135f:	e8 e7 00 00 00       	call   1144b <irq_install>
   11364:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11367:	83 ec 08             	sub    $0x8,%esp
   1136a:	68 5f 01 01 00       	push   $0x1015f
   1136f:	6a 0a                	push   $0xa
   11371:	e8 d5 00 00 00       	call   1144b <irq_install>
   11376:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11379:	83 ec 08             	sub    $0x8,%esp
   1137c:	68 7c 01 01 00       	push   $0x1017c
   11381:	6a 0b                	push   $0xb
   11383:	e8 c3 00 00 00       	call   1144b <irq_install>
   11388:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   1138b:	83 ec 08             	sub    $0x8,%esp
   1138e:	68 99 01 01 00       	push   $0x10199
   11393:	6a 0c                	push   $0xc
   11395:	e8 b1 00 00 00       	call   1144b <irq_install>
   1139a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   1139d:	83 ec 08             	sub    $0x8,%esp
   113a0:	68 b8 01 01 00       	push   $0x101b8
   113a5:	6a 0d                	push   $0xd
   113a7:	e8 9f 00 00 00       	call   1144b <irq_install>
   113ac:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   113af:	83 ec 08             	sub    $0x8,%esp
   113b2:	68 d5 01 01 00       	push   $0x101d5
   113b7:	6a 0e                	push   $0xe
   113b9:	e8 8d 00 00 00       	call   1144b <irq_install>
   113be:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   113c1:	83 ec 08             	sub    $0x8,%esp
   113c4:	68 f2 01 01 00       	push   $0x101f2
   113c9:	6a 10                	push   $0x10
   113cb:	e8 7b 00 00 00       	call   1144b <irq_install>
   113d0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   113d3:	83 ec 08             	sub    $0x8,%esp
   113d6:	68 11 02 01 00       	push   $0x10211
   113db:	6a 11                	push   $0x11
   113dd:	e8 69 00 00 00       	call   1144b <irq_install>
   113e2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   113e5:	83 ec 08             	sub    $0x8,%esp
   113e8:	68 2e 02 01 00       	push   $0x1022e
   113ed:	6a 12                	push   $0x12
   113ef:	e8 57 00 00 00       	call   1144b <irq_install>
   113f4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   113f7:	83 ec 08             	sub    $0x8,%esp
   113fa:	68 4d 02 01 00       	push   $0x1024d
   113ff:	6a 13                	push   $0x13
   11401:	e8 45 00 00 00       	call   1144b <irq_install>
   11406:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11409:	83 ec 08             	sub    $0x8,%esp
   1140c:	68 6c 02 01 00       	push   $0x1026c
   11411:	6a 14                	push   $0x14
   11413:	e8 33 00 00 00       	call   1144b <irq_install>
   11418:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   1141b:	83 ec 08             	sub    $0x8,%esp
   1141e:	68 8b 02 01 00       	push   $0x1028b
   11423:	6a 15                	push   $0x15
   11425:	e8 21 00 00 00       	call   1144b <irq_install>
   1142a:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   1142d:	b8 c0 47 01 00       	mov    $0x147c0,%eax
   11432:	83 ec 08             	sub    $0x8,%esp
   11435:	68 00 04 00 00       	push   $0x400
   1143a:	50                   	push   %eax
   1143b:	e8 1a fa ff ff       	call   10e5a <lidt>
   11440:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11443:	e8 b0 fd ff ff       	call   111f8 <init_pic>
}
   11448:	90                   	nop
   11449:	c9                   	leave  
   1144a:	c3                   	ret    

0001144b <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   1144b:	55                   	push   %ebp
   1144c:	89 e5                	mov    %esp,%ebp
   1144e:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11451:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11455:	7e 07                	jle    1145e <irq_install+0x13>
        return -1;
   11457:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1145c:	eb 20                	jmp    1147e <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   1145e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11461:	8b 55 08             	mov    0x8(%ebp),%edx
   11464:	c1 e2 03             	shl    $0x3,%edx
   11467:	81 c2 c0 47 01 00    	add    $0x147c0,%edx
   1146d:	68 00 8e 00 00       	push   $0x8e00
   11472:	50                   	push   %eax
   11473:	6a 08                	push   $0x8
   11475:	52                   	push   %edx
   11476:	e8 59 f8 ff ff       	call   10cd4 <gate_desc_set>
   1147b:	83 c4 10             	add    $0x10,%esp
}
   1147e:	c9                   	leave  
   1147f:	c3                   	ret    

00011480 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11480:	55                   	push   %ebp
   11481:	89 e5                	mov    %esp,%ebp
   11483:	53                   	push   %ebx
   11484:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11487:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1148b:	7e 78                	jle    11505 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   1148d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11491:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11495:	7f 32                	jg     114c9 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11497:	6a 21                	push   $0x21
   11499:	e8 72 f9 ff ff       	call   10e10 <inb>
   1149e:	83 c4 04             	add    $0x4,%esp
   114a1:	89 c2                	mov    %eax,%edx
   114a3:	8b 45 08             	mov    0x8(%ebp),%eax
   114a6:	bb 01 00 00 00       	mov    $0x1,%ebx
   114ab:	89 c1                	mov    %eax,%ecx
   114ad:	d3 e3                	shl    %cl,%ebx
   114af:	89 d8                	mov    %ebx,%eax
   114b1:	f7 d0                	not    %eax
   114b3:	21 d0                	and    %edx,%eax
   114b5:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   114b8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   114bc:	50                   	push   %eax
   114bd:	6a 21                	push   $0x21
   114bf:	e8 69 f9 ff ff       	call   10e2d <outb>
   114c4:	83 c4 08             	add    $0x8,%esp
   114c7:	eb 3d                	jmp    11506 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   114c9:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   114cd:	68 a1 00 00 00       	push   $0xa1
   114d2:	e8 39 f9 ff ff       	call   10e10 <inb>
   114d7:	83 c4 04             	add    $0x4,%esp
   114da:	89 c2                	mov    %eax,%edx
   114dc:	8b 45 08             	mov    0x8(%ebp),%eax
   114df:	bb 01 00 00 00       	mov    $0x1,%ebx
   114e4:	89 c1                	mov    %eax,%ecx
   114e6:	d3 e3                	shl    %cl,%ebx
   114e8:	89 d8                	mov    %ebx,%eax
   114ea:	f7 d0                	not    %eax
   114ec:	21 d0                	and    %edx,%eax
   114ee:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   114f1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   114f5:	50                   	push   %eax
   114f6:	68 a1 00 00 00       	push   $0xa1
   114fb:	e8 2d f9 ff ff       	call   10e2d <outb>
   11500:	83 c4 08             	add    $0x8,%esp
   11503:	eb 01                	jmp    11506 <irq_enable+0x86>
        return;
   11505:	90                   	nop
    }
}
   11506:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11509:	c9                   	leave  
   1150a:	c3                   	ret    

0001150b <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   1150b:	55                   	push   %ebp
   1150c:	89 e5                	mov    %esp,%ebp
   1150e:	53                   	push   %ebx
   1150f:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11512:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11516:	7e 74                	jle    1158c <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11518:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   1151c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11520:	7f 30                	jg     11552 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11522:	6a 21                	push   $0x21
   11524:	e8 e7 f8 ff ff       	call   10e10 <inb>
   11529:	83 c4 04             	add    $0x4,%esp
   1152c:	89 c3                	mov    %eax,%ebx
   1152e:	8b 45 08             	mov    0x8(%ebp),%eax
   11531:	ba 01 00 00 00       	mov    $0x1,%edx
   11536:	89 c1                	mov    %eax,%ecx
   11538:	d3 e2                	shl    %cl,%edx
   1153a:	89 d0                	mov    %edx,%eax
   1153c:	09 d8                	or     %ebx,%eax
   1153e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11541:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11545:	50                   	push   %eax
   11546:	6a 21                	push   $0x21
   11548:	e8 e0 f8 ff ff       	call   10e2d <outb>
   1154d:	83 c4 08             	add    $0x8,%esp
   11550:	eb 3b                	jmp    1158d <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11552:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11556:	68 a1 00 00 00       	push   $0xa1
   1155b:	e8 b0 f8 ff ff       	call   10e10 <inb>
   11560:	83 c4 04             	add    $0x4,%esp
   11563:	89 c3                	mov    %eax,%ebx
   11565:	8b 45 08             	mov    0x8(%ebp),%eax
   11568:	ba 01 00 00 00       	mov    $0x1,%edx
   1156d:	89 c1                	mov    %eax,%ecx
   1156f:	d3 e2                	shl    %cl,%edx
   11571:	89 d0                	mov    %edx,%eax
   11573:	09 d8                	or     %ebx,%eax
   11575:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11578:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1157c:	50                   	push   %eax
   1157d:	68 a1 00 00 00       	push   $0xa1
   11582:	e8 a6 f8 ff ff       	call   10e2d <outb>
   11587:	83 c4 08             	add    $0x8,%esp
   1158a:	eb 01                	jmp    1158d <irq_disable+0x82>
        return;
   1158c:	90                   	nop
    }
}
   1158d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11590:	c9                   	leave  
   11591:	c3                   	ret    

00011592 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11592:	55                   	push   %ebp
   11593:	89 e5                	mov    %esp,%ebp
    cli();
   11595:	e8 b2 f8 ff ff       	call   10e4c <cli>
}
   1159a:	90                   	nop
   1159b:	5d                   	pop    %ebp
   1159c:	c3                   	ret    

0001159d <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   1159d:	55                   	push   %ebp
   1159e:	89 e5                	mov    %esp,%ebp
    sti();
   115a0:	e8 ae f8 ff ff       	call   10e53 <sti>
}
   115a5:	90                   	nop
   115a6:	5d                   	pop    %ebp
   115a7:	c3                   	ret    

000115a8 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   115a8:	55                   	push   %ebp
   115a9:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   115ab:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   115af:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   115b3:	7e 0f                	jle    115c4 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   115b5:	6a 20                	push   $0x20
   115b7:	68 a0 00 00 00       	push   $0xa0
   115bc:	e8 6c f8 ff ff       	call   10e2d <outb>
   115c1:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   115c4:	6a 20                	push   $0x20
   115c6:	6a 20                	push   $0x20
   115c8:	e8 60 f8 ff ff       	call   10e2d <outb>
   115cd:	83 c4 08             	add    $0x8,%esp
}
   115d0:	90                   	nop
   115d1:	c9                   	leave  
   115d2:	c3                   	ret    

000115d3 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   115d3:	55                   	push   %ebp
   115d4:	89 e5                	mov    %esp,%ebp
   115d6:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   115d9:	e8 ab f8 ff ff       	call   10e89 <read_eflags>
   115de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   115e1:	e8 ac ff ff ff       	call   11592 <irq_disable_global>
    return state;
   115e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   115e9:	c9                   	leave  
   115ea:	c3                   	ret    

000115eb <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   115eb:	55                   	push   %ebp
   115ec:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   115ee:	ff 75 08             	pushl  0x8(%ebp)
   115f1:	e8 a3 f8 ff ff       	call   10e99 <write_eflags>
   115f6:	83 c4 04             	add    $0x4,%esp
   115f9:	90                   	nop
   115fa:	c9                   	leave  
   115fb:	c3                   	ret    

000115fc <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   115fc:	55                   	push   %ebp
   115fd:	89 e5                	mov    %esp,%ebp
   115ff:	83 ec 08             	sub    $0x8,%esp
   11602:	8b 55 08             	mov    0x8(%ebp),%edx
   11605:	8b 45 0c             	mov    0xc(%ebp),%eax
   11608:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1160c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1160f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11613:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11617:	ee                   	out    %al,(%dx)
}
   11618:	90                   	nop
   11619:	c9                   	leave  
   1161a:	c3                   	ret    

0001161b <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   1161b:	55                   	push   %ebp
   1161c:	89 e5                	mov    %esp,%ebp
   1161e:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11621:	a1 c0 4b 01 00       	mov    0x14bc0,%eax
   11626:	83 c0 01             	add    $0x1,%eax
   11629:	a3 c0 4b 01 00       	mov    %eax,0x14bc0

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   1162e:	83 ec 0c             	sub    $0xc,%esp
   11631:	6a 20                	push   $0x20
   11633:	e8 70 ff ff ff       	call   115a8 <pic_send_eoi>
   11638:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   1163b:	e8 4e f4 ff ff       	call   10a8e <task_time_tick>
}
   11640:	90                   	nop
   11641:	c9                   	leave  
   11642:	c3                   	ret    

00011643 <init_pit>:


static void init_pit(void) {
   11643:	55                   	push   %ebp
   11644:	89 e5                	mov    %esp,%ebp
   11646:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11649:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11650:	6a 36                	push   $0x36
   11652:	6a 43                	push   $0x43
   11654:	e8 a3 ff ff ff       	call   115fc <outb>
   11659:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   1165c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1165f:	0f b6 c0             	movzbl %al,%eax
   11662:	50                   	push   %eax
   11663:	6a 40                	push   $0x40
   11665:	e8 92 ff ff ff       	call   115fc <outb>
   1166a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   1166d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11670:	c1 e8 08             	shr    $0x8,%eax
   11673:	0f b6 c0             	movzbl %al,%eax
   11676:	50                   	push   %eax
   11677:	6a 40                	push   $0x40
   11679:	e8 7e ff ff ff       	call   115fc <outb>
   1167e:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11681:	83 ec 08             	sub    $0x8,%esp
   11684:	68 a8 02 01 00       	push   $0x102a8
   11689:	6a 20                	push   $0x20
   1168b:	e8 bb fd ff ff       	call   1144b <irq_install>
   11690:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11693:	83 ec 0c             	sub    $0xc,%esp
   11696:	6a 20                	push   $0x20
   11698:	e8 e3 fd ff ff       	call   11480 <irq_enable>
   1169d:	83 c4 10             	add    $0x10,%esp
}
   116a0:	90                   	nop
   116a1:	c9                   	leave  
   116a2:	c3                   	ret    

000116a3 <timer_init>:

void timer_init(void) {
   116a3:	55                   	push   %ebp
   116a4:	89 e5                	mov    %esp,%ebp
   116a6:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   116a9:	c7 05 c0 4b 01 00 00 	movl   $0x0,0x14bc0
   116b0:	00 00 00 
    init_pit();
   116b3:	e8 8b ff ff ff       	call   11643 <init_pit>
   116b8:	90                   	nop
   116b9:	c9                   	leave  
   116ba:	c3                   	ret    

000116bb <list_size>:
static inline int list_size(list_t* list) {
   116bb:	55                   	push   %ebp
   116bc:	89 e5                	mov    %esp,%ebp
    return list->count;
   116be:	8b 45 08             	mov    0x8(%ebp),%eax
   116c1:	8b 40 08             	mov    0x8(%eax),%eax
}
   116c4:	5d                   	pop    %ebp
   116c5:	c3                   	ret    

000116c6 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t* mutex) {
   116c6:	55                   	push   %ebp
   116c7:	89 e5                	mov    %esp,%ebp
   116c9:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   116cc:	8b 45 08             	mov    0x8(%ebp),%eax
   116cf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t*) 0;
   116d6:	8b 45 08             	mov    0x8(%ebp),%eax
   116d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   116df:	8b 45 08             	mov    0x8(%ebp),%eax
   116e2:	83 c0 08             	add    $0x8,%eax
   116e5:	83 ec 0c             	sub    $0xc,%esp
   116e8:	50                   	push   %eax
   116e9:	e8 5a 0d 00 00       	call   12448 <list_init>
   116ee:	83 c4 10             	add    $0x10,%esp
}
   116f1:	90                   	nop
   116f2:	c9                   	leave  
   116f3:	c3                   	ret    

000116f4 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   116f4:	55                   	push   %ebp
   116f5:	89 e5                	mov    %esp,%ebp
   116f7:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   116fa:	e8 d4 fe ff ff       	call   115d3 <irq_enter_protection>
   116ff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11702:	e8 c1 f2 ff ff       	call   109c8 <task_current>
   11707:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   1170a:	8b 45 08             	mov    0x8(%ebp),%eax
   1170d:	8b 40 04             	mov    0x4(%eax),%eax
   11710:	85 c0                	test   %eax,%eax
   11712:	75 14                	jne    11728 <mutex_acquire+0x34>
        mutex->locked_count = 1;
   11714:	8b 45 08             	mov    0x8(%ebp),%eax
   11717:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   1171e:	8b 45 08             	mov    0x8(%ebp),%eax
   11721:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11724:	89 10                	mov    %edx,(%eax)
   11726:	eb 47                	jmp    1176f <mutex_acquire+0x7b>
    }
    else if (mutex->owner == curr) {
   11728:	8b 45 08             	mov    0x8(%ebp),%eax
   1172b:	8b 00                	mov    (%eax),%eax
   1172d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11730:	75 11                	jne    11743 <mutex_acquire+0x4f>
        mutex->locked_count++;
   11732:	8b 45 08             	mov    0x8(%ebp),%eax
   11735:	8b 40 04             	mov    0x4(%eax),%eax
   11738:	8d 50 01             	lea    0x1(%eax),%edx
   1173b:	8b 45 08             	mov    0x8(%ebp),%eax
   1173e:	89 50 04             	mov    %edx,0x4(%eax)
   11741:	eb 2c                	jmp    1176f <mutex_acquire+0x7b>
    }
    else {
        task_set_blocked(curr);
   11743:	83 ec 0c             	sub    $0xc,%esp
   11746:	ff 75 f0             	pushl  -0x10(%ebp)
   11749:	e8 0c f2 ff ff       	call   1095a <task_set_blocked>
   1174e:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   11751:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11754:	8d 50 34             	lea    0x34(%eax),%edx
   11757:	8b 45 08             	mov    0x8(%ebp),%eax
   1175a:	83 c0 08             	add    $0x8,%eax
   1175d:	83 ec 08             	sub    $0x8,%esp
   11760:	52                   	push   %edx
   11761:	50                   	push   %eax
   11762:	e8 63 0d 00 00       	call   124ca <list_insert_back>
   11767:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1176a:	e8 c4 f2 ff ff       	call   10a33 <task_dispatch>
    }

    irq_leave_protection(state);
   1176f:	83 ec 0c             	sub    $0xc,%esp
   11772:	ff 75 f4             	pushl  -0xc(%ebp)
   11775:	e8 71 fe ff ff       	call   115eb <irq_leave_protection>
   1177a:	83 c4 10             	add    $0x10,%esp
}
   1177d:	90                   	nop
   1177e:	c9                   	leave  
   1177f:	c3                   	ret    

00011780 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   11780:	55                   	push   %ebp
   11781:	89 e5                	mov    %esp,%ebp
   11783:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11786:	e8 48 fe ff ff       	call   115d3 <irq_enter_protection>
   1178b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   1178e:	e8 35 f2 ff ff       	call   109c8 <task_current>
   11793:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11796:	8b 45 08             	mov    0x8(%ebp),%eax
   11799:	8b 00                	mov    (%eax),%eax
   1179b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1179e:	0f 85 88 00 00 00    	jne    1182c <mutex_release+0xac>
        if (--mutex->locked_count == 0) {
   117a4:	8b 45 08             	mov    0x8(%ebp),%eax
   117a7:	8b 40 04             	mov    0x4(%eax),%eax
   117aa:	8d 50 ff             	lea    -0x1(%eax),%edx
   117ad:	8b 45 08             	mov    0x8(%ebp),%eax
   117b0:	89 50 04             	mov    %edx,0x4(%eax)
   117b3:	8b 45 08             	mov    0x8(%ebp),%eax
   117b6:	8b 40 04             	mov    0x4(%eax),%eax
   117b9:	85 c0                	test   %eax,%eax
   117bb:	75 6f                	jne    1182c <mutex_release+0xac>
            mutex->owner = (task_t*)0;
   117bd:	8b 45 08             	mov    0x8(%ebp),%eax
   117c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_size(&mutex->wait_list)) {
   117c6:	8b 45 08             	mov    0x8(%ebp),%eax
   117c9:	83 c0 08             	add    $0x8,%eax
   117cc:	83 ec 0c             	sub    $0xc,%esp
   117cf:	50                   	push   %eax
   117d0:	e8 e6 fe ff ff       	call   116bb <list_size>
   117d5:	83 c4 10             	add    $0x10,%esp
   117d8:	85 c0                	test   %eax,%eax
   117da:	74 50                	je     1182c <mutex_release+0xac>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   117dc:	8b 45 08             	mov    0x8(%ebp),%eax
   117df:	83 c0 08             	add    $0x8,%eax
   117e2:	83 ec 0c             	sub    $0xc,%esp
   117e5:	50                   	push   %eax
   117e6:	e8 42 0d 00 00       	call   1252d <list_remove_front>
   117eb:	83 c4 10             	add    $0x10,%esp
   117ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   117f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   117f5:	74 08                	je     117ff <mutex_release+0x7f>
   117f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   117fa:	83 e8 34             	sub    $0x34,%eax
   117fd:	eb 05                	jmp    11804 <mutex_release+0x84>
   117ff:	b8 00 00 00 00       	mov    $0x0,%eax
   11804:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11807:	83 ec 0c             	sub    $0xc,%esp
   1180a:	ff 75 e8             	pushl  -0x18(%ebp)
   1180d:	e8 14 f1 ff ff       	call   10926 <task_set_ready>
   11812:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   11815:	8b 45 08             	mov    0x8(%ebp),%eax
   11818:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1181b:	89 10                	mov    %edx,(%eax)
                mutex->locked_count = 1;
   1181d:	8b 45 08             	mov    0x8(%ebp),%eax
   11820:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

                task_dispatch();
   11827:	e8 07 f2 ff ff       	call   10a33 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   1182c:	83 ec 0c             	sub    $0xc,%esp
   1182f:	ff 75 f4             	pushl  -0xc(%ebp)
   11832:	e8 b4 fd ff ff       	call   115eb <irq_leave_protection>
   11837:	83 c4 10             	add    $0x10,%esp
   1183a:	90                   	nop
   1183b:	c9                   	leave  
   1183c:	c3                   	ret    

0001183d <list_size>:
static inline int list_size(list_t* list) {
   1183d:	55                   	push   %ebp
   1183e:	89 e5                	mov    %esp,%ebp
    return list->count;
   11840:	8b 45 08             	mov    0x8(%ebp),%eax
   11843:	8b 40 08             	mov    0x8(%eax),%eax
}
   11846:	5d                   	pop    %ebp
   11847:	c3                   	ret    

00011848 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11848:	55                   	push   %ebp
   11849:	89 e5                	mov    %esp,%ebp
    return list->first;
   1184b:	8b 45 08             	mov    0x8(%ebp),%eax
   1184e:	8b 00                	mov    (%eax),%eax
}
   11850:	5d                   	pop    %ebp
   11851:	c3                   	ret    

00011852 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11852:	55                   	push   %ebp
   11853:	89 e5                	mov    %esp,%ebp
    return list->last;
   11855:	8b 45 08             	mov    0x8(%ebp),%eax
   11858:	8b 40 04             	mov    0x4(%eax),%eax
}
   1185b:	5d                   	pop    %ebp
   1185c:	c3                   	ret    

0001185d <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   1185d:	55                   	push   %ebp
   1185e:	89 e5                	mov    %esp,%ebp
   11860:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11863:	8b 45 08             	mov    0x8(%ebp),%eax
   11866:	8b 40 50             	mov    0x50(%eax),%eax
   11869:	85 c0                	test   %eax,%eax
   1186b:	75 19                	jne    11886 <kernel_init+0x29>
   1186d:	68 60 2c 01 00       	push   $0x12c60
   11872:	68 68 2d 01 00       	push   $0x12d68
   11877:	6a 1a                	push   $0x1a
   11879:	68 84 2c 01 00       	push   $0x12c84
   1187e:	e8 7c 0b 00 00       	call   123ff <pannic>
   11883:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11886:	90                   	nop

    memory_init(boot_info);
   11887:	83 ec 0c             	sub    $0xc,%esp
   1188a:	ff 75 08             	pushl  0x8(%ebp)
   1188d:	e8 b4 ec ff ff       	call   10546 <memory_init>
   11892:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11895:	e8 ee f4 ff ff       	call   10d88 <cpu_init>

    log_init();
   1189a:	e8 c8 0d 00 00       	call   12667 <log_init>

    irq_init();
   1189f:	e8 e7 f9 ff ff       	call   1128b <irq_init>
    timer_init();
   118a4:	e8 fa fd ff ff       	call   116a3 <timer_init>

    task_manager_init();
   118a9:	e8 cb ef ff ff       	call   10879 <task_manager_init>
}
   118ae:	90                   	nop
   118af:	c9                   	leave  
   118b0:	c3                   	ret    

000118b1 <init_task_entry>:
static uint32_t init_task_stack[1024];
static task_t first_task;

static sem_t sem;

void init_task_entry(void) {
   118b1:	55                   	push   %ebp
   118b2:	89 e5                	mov    %esp,%ebp
   118b4:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   118b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("int task: %d", count++);
   118be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118c1:	8d 50 01             	lea    0x1(%eax),%edx
   118c4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   118c7:	83 ec 08             	sub    $0x8,%esp
   118ca:	50                   	push   %eax
   118cb:	68 c9 2c 01 00       	push   $0x12cc9
   118d0:	e8 2f 0e 00 00       	call   12704 <log_printf>
   118d5:	83 c4 10             	add    $0x10,%esp

        sem_wait(&sem);
   118d8:	83 ec 0c             	sub    $0xc,%esp
   118db:	68 54 5d 01 00       	push   $0x15d54
   118e0:	e8 98 02 00 00       	call   11b7d <sem_wait>
   118e5:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(&init_task, task_first_task());
        // sys_sched_yield();
        sys_sleep(1000);
   118e8:	83 ec 0c             	sub    $0xc,%esp
   118eb:	68 e8 03 00 00       	push   $0x3e8
   118f0:	e8 c3 f2 ff ff       	call   10bb8 <sys_sleep>
   118f5:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d", count++);
   118f8:	eb c4                	jmp    118be <init_task_entry+0xd>

000118fa <link_test>:
    }
}


void link_test(void) {
   118fa:	55                   	push   %ebp
   118fb:	89 e5                	mov    %esp,%ebp
   118fd:	56                   	push   %esi
   118fe:	53                   	push   %ebx
   118ff:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11902:	83 ec 0c             	sub    $0xc,%esp
   11905:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11908:	50                   	push   %eax
   11909:	e8 3a 0b 00 00       	call   12448 <list_init>
   1190e:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11911:	83 ec 0c             	sub    $0xc,%esp
   11914:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11917:	50                   	push   %eax
   11918:	e8 20 ff ff ff       	call   1183d <list_size>
   1191d:	83 c4 10             	add    $0x10,%esp
   11920:	89 c6                	mov    %eax,%esi
   11922:	83 ec 0c             	sub    $0xc,%esp
   11925:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11928:	50                   	push   %eax
   11929:	e8 24 ff ff ff       	call   11852 <list_last>
   1192e:	83 c4 10             	add    $0x10,%esp
   11931:	89 c3                	mov    %eax,%ebx
   11933:	83 ec 0c             	sub    $0xc,%esp
   11936:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11939:	50                   	push   %eax
   1193a:	e8 09 ff ff ff       	call   11848 <list_first>
   1193f:	83 c4 10             	add    $0x10,%esp
   11942:	56                   	push   %esi
   11943:	53                   	push   %ebx
   11944:	50                   	push   %eax
   11945:	68 d8 2c 01 00       	push   $0x12cd8
   1194a:	e8 b5 0d 00 00       	call   12704 <log_printf>
   1194f:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11952:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11959:	eb 3b                	jmp    11996 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   1195b:	8d 45 a8             	lea    -0x58(%ebp),%eax
   1195e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11961:	c1 e2 03             	shl    $0x3,%edx
   11964:	01 d0                	add    %edx,%eax
   11966:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11969:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1196c:	83 ec 04             	sub    $0x4,%esp
   1196f:	50                   	push   %eax
   11970:	ff 75 f4             	pushl  -0xc(%ebp)
   11973:	68 01 2d 01 00       	push   $0x12d01
   11978:	e8 87 0d 00 00       	call   12704 <log_printf>
   1197d:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11980:	83 ec 08             	sub    $0x8,%esp
   11983:	ff 75 dc             	pushl  -0x24(%ebp)
   11986:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11989:	50                   	push   %eax
   1198a:	e8 dc 0a 00 00       	call   1246b <list_insert_front>
   1198f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11992:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11996:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1199a:	7e bf                	jle    1195b <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   1199c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   119a3:	eb 33                	jmp    119d8 <link_test+0xde>
        list_remove_front(&list);
   119a5:	83 ec 0c             	sub    $0xc,%esp
   119a8:	8d 45 d0             	lea    -0x30(%ebp),%eax
   119ab:	50                   	push   %eax
   119ac:	e8 7c 0b 00 00       	call   1252d <list_remove_front>
   119b1:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   119b4:	83 ec 0c             	sub    $0xc,%esp
   119b7:	8d 45 d0             	lea    -0x30(%ebp),%eax
   119ba:	50                   	push   %eax
   119bb:	e8 7d fe ff ff       	call   1183d <list_size>
   119c0:	83 c4 10             	add    $0x10,%esp
   119c3:	83 ec 08             	sub    $0x8,%esp
   119c6:	50                   	push   %eax
   119c7:	68 09 2d 01 00       	push   $0x12d09
   119cc:	e8 33 0d 00 00       	call   12704 <log_printf>
   119d1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   119d4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   119d8:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   119dc:	7e c7                	jle    119a5 <link_test+0xab>
    }

    list_init(&list);
   119de:	83 ec 0c             	sub    $0xc,%esp
   119e1:	8d 45 d0             	lea    -0x30(%ebp),%eax
   119e4:	50                   	push   %eax
   119e5:	e8 5e 0a 00 00       	call   12448 <list_init>
   119ea:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   119ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   119f4:	eb 3b                	jmp    11a31 <link_test+0x137>
        list_node_t* node = &nodes[i];
   119f6:	8d 45 a8             	lea    -0x58(%ebp),%eax
   119f9:	8b 55 ec             	mov    -0x14(%ebp),%edx
   119fc:	c1 e2 03             	shl    $0x3,%edx
   119ff:	01 d0                	add    %edx,%eax
   11a01:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11a04:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11a07:	83 ec 04             	sub    $0x4,%esp
   11a0a:	50                   	push   %eax
   11a0b:	ff 75 ec             	pushl  -0x14(%ebp)
   11a0e:	68 01 2d 01 00       	push   $0x12d01
   11a13:	e8 ec 0c 00 00       	call   12704 <log_printf>
   11a18:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11a1b:	83 ec 08             	sub    $0x8,%esp
   11a1e:	ff 75 e0             	pushl  -0x20(%ebp)
   11a21:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11a24:	50                   	push   %eax
   11a25:	e8 a0 0a 00 00       	call   124ca <list_insert_back>
   11a2a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11a2d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11a31:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11a35:	7e bf                	jle    119f6 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11a37:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11a3e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11a45:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11a4c:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11a53:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11a56:	83 c0 04             	add    $0x4,%eax
   11a59:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11a5c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11a60:	74 08                	je     11a6a <link_test+0x170>
   11a62:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11a65:	83 e8 04             	sub    $0x4,%eax
   11a68:	eb 05                	jmp    11a6f <link_test+0x175>
   11a6a:	b8 00 00 00 00       	mov    $0x0,%eax
   11a6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11a72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a75:	8b 00                	mov    (%eax),%eax
   11a77:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11a7c:	74 10                	je     11a8e <link_test+0x194>
        log_printf("error!");
   11a7e:	83 ec 0c             	sub    $0xc,%esp
   11a81:	68 0e 2d 01 00       	push   $0x12d0e
   11a86:	e8 79 0c 00 00       	call   12704 <log_printf>
   11a8b:	83 c4 10             	add    $0x10,%esp
    }

}
   11a8e:	90                   	nop
   11a8f:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11a92:	5b                   	pop    %ebx
   11a93:	5e                   	pop    %esi
   11a94:	5d                   	pop    %ebp
   11a95:	c3                   	ret    

00011a96 <init_main>:


void init_main(void) {
   11a96:	55                   	push   %ebp
   11a97:	89 e5                	mov    %esp,%ebp
   11a99:	83 ec 18             	sub    $0x18,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   11a9c:	83 ec 0c             	sub    $0xc,%esp
   11a9f:	68 15 2d 01 00       	push   $0x12d15
   11aa4:	e8 5b 0c 00 00       	call   12704 <log_printf>
   11aa9:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   11aac:	83 ec 04             	sub    $0x4,%esp
   11aaf:	68 2b 2d 01 00       	push   $0x12d2b
   11ab4:	68 30 2d 01 00       	push   $0x12d30
   11ab9:	68 36 2d 01 00       	push   $0x12d36
   11abe:	e8 41 0c 00 00       	call   12704 <log_printf>
   11ac3:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   11ac6:	83 ec 0c             	sub    $0xc,%esp
   11ac9:	6a 61                	push   $0x61
   11acb:	68 56 34 12 00       	push   $0x123456
   11ad0:	6a 85                	push   $0xffffff85
   11ad2:	68 39 30 00 00       	push   $0x3039
   11ad7:	68 45 2d 01 00       	push   $0x12d45
   11adc:	e8 23 0c 00 00       	call   12704 <log_printf>
   11ae1:	83 c4 20             	add    $0x20,%esp

    //
    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   11ae4:	ba a0 5c 01 00       	mov    $0x15ca0,%edx
   11ae9:	b8 b1 18 01 00       	mov    $0x118b1,%eax
   11aee:	52                   	push   %edx
   11aef:	50                   	push   %eax
   11af0:	68 51 2d 01 00       	push   $0x12d51
   11af5:	68 e0 4b 01 00       	push   $0x14be0
   11afa:	e8 66 ec ff ff       	call   10765 <task_init>
   11aff:	83 c4 10             	add    $0x10,%esp
    //

    task_first_init();
   11b02:	e8 d8 ed ff ff       	call   108df <task_first_init>

    int count = 0;
   11b07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    // link_test();

    irq_enable_global();
   11b0e:	e8 8a fa ff ff       	call   1159d <irq_enable_global>

    while (1) {
        log_printf("int main: %d", count++);
   11b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b16:	8d 50 01             	lea    0x1(%eax),%edx
   11b19:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11b1c:	83 ec 08             	sub    $0x8,%esp
   11b1f:	50                   	push   %eax
   11b20:	68 5b 2d 01 00       	push   $0x12d5b
   11b25:	e8 da 0b 00 00       	call   12704 <log_printf>
   11b2a:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(task_first_task(), &init_task);
        // sys_sched_yield();
        sem_notify(&sem);
   11b2d:	83 ec 0c             	sub    $0xc,%esp
   11b30:	68 54 5d 01 00       	push   $0x15d54
   11b35:	e8 ae 00 00 00       	call   11be8 <sem_notify>
   11b3a:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11b3d:	83 ec 0c             	sub    $0xc,%esp
   11b40:	68 e8 03 00 00       	push   $0x3e8
   11b45:	e8 6e f0 ff ff       	call   10bb8 <sys_sleep>
   11b4a:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d", count++);
   11b4d:	eb c4                	jmp    11b13 <init_main+0x7d>

00011b4f <list_size>:
static inline int list_size(list_t* list) {
   11b4f:	55                   	push   %ebp
   11b50:	89 e5                	mov    %esp,%ebp
    return list->count;
   11b52:	8b 45 08             	mov    0x8(%ebp),%eax
   11b55:	8b 40 08             	mov    0x8(%eax),%eax
}
   11b58:	5d                   	pop    %ebp
   11b59:	c3                   	ret    

00011b5a <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   11b5a:	55                   	push   %ebp
   11b5b:	89 e5                	mov    %esp,%ebp
   11b5d:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11b60:	8b 45 08             	mov    0x8(%ebp),%eax
   11b63:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b66:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11b68:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6b:	83 c0 04             	add    $0x4,%eax
   11b6e:	83 ec 0c             	sub    $0xc,%esp
   11b71:	50                   	push   %eax
   11b72:	e8 d1 08 00 00       	call   12448 <list_init>
   11b77:	83 c4 10             	add    $0x10,%esp
}
   11b7a:	90                   	nop
   11b7b:	c9                   	leave  
   11b7c:	c3                   	ret    

00011b7d <sem_wait>:


void sem_wait(sem_t* sem) {
   11b7d:	55                   	push   %ebp
   11b7e:	89 e5                	mov    %esp,%ebp
   11b80:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   11b83:	e8 4b fa ff ff       	call   115d3 <irq_enter_protection>
   11b88:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   11b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8e:	8b 00                	mov    (%eax),%eax
   11b90:	85 c0                	test   %eax,%eax
   11b92:	7e 0f                	jle    11ba3 <sem_wait+0x26>
        sem->count--;
   11b94:	8b 45 08             	mov    0x8(%ebp),%eax
   11b97:	8b 00                	mov    (%eax),%eax
   11b99:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9f:	89 10                	mov    %edx,(%eax)
   11ba1:	eb 34                	jmp    11bd7 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   11ba3:	e8 20 ee ff ff       	call   109c8 <task_current>
   11ba8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   11bab:	83 ec 0c             	sub    $0xc,%esp
   11bae:	ff 75 f0             	pushl  -0x10(%ebp)
   11bb1:	e8 a4 ed ff ff       	call   1095a <task_set_blocked>
   11bb6:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   11bb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bbc:	8d 50 34             	lea    0x34(%eax),%edx
   11bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc2:	83 c0 04             	add    $0x4,%eax
   11bc5:	83 ec 08             	sub    $0x8,%esp
   11bc8:	52                   	push   %edx
   11bc9:	50                   	push   %eax
   11bca:	e8 fb 08 00 00       	call   124ca <list_insert_back>
   11bcf:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11bd2:	e8 5c ee ff ff       	call   10a33 <task_dispatch>
    }

    irq_leave_protection(state);
   11bd7:	83 ec 0c             	sub    $0xc,%esp
   11bda:	ff 75 f4             	pushl  -0xc(%ebp)
   11bdd:	e8 09 fa ff ff       	call   115eb <irq_leave_protection>
   11be2:	83 c4 10             	add    $0x10,%esp
}
   11be5:	90                   	nop
   11be6:	c9                   	leave  
   11be7:	c3                   	ret    

00011be8 <sem_notify>:


void sem_notify(sem_t* sem) {
   11be8:	55                   	push   %ebp
   11be9:	89 e5                	mov    %esp,%ebp
   11beb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11bee:	e8 e0 f9 ff ff       	call   115d3 <irq_enter_protection>
   11bf3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   11bf6:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf9:	83 c0 04             	add    $0x4,%eax
   11bfc:	83 ec 0c             	sub    $0xc,%esp
   11bff:	50                   	push   %eax
   11c00:	e8 4a ff ff ff       	call   11b4f <list_size>
   11c05:	83 c4 10             	add    $0x10,%esp
   11c08:	85 c0                	test   %eax,%eax
   11c0a:	74 40                	je     11c4c <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   11c0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0f:	83 c0 04             	add    $0x4,%eax
   11c12:	83 ec 0c             	sub    $0xc,%esp
   11c15:	50                   	push   %eax
   11c16:	e8 12 09 00 00       	call   1252d <list_remove_front>
   11c1b:	83 c4 10             	add    $0x10,%esp
   11c1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   11c21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c25:	74 08                	je     11c2f <sem_notify+0x47>
   11c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c2a:	83 e8 34             	sub    $0x34,%eax
   11c2d:	eb 05                	jmp    11c34 <sem_notify+0x4c>
   11c2f:	b8 00 00 00 00       	mov    $0x0,%eax
   11c34:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11c37:	83 ec 0c             	sub    $0xc,%esp
   11c3a:	ff 75 ec             	pushl  -0x14(%ebp)
   11c3d:	e8 e4 ec ff ff       	call   10926 <task_set_ready>
   11c42:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11c45:	e8 e9 ed ff ff       	call   10a33 <task_dispatch>
   11c4a:	eb 0d                	jmp    11c59 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   11c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4f:	8b 00                	mov    (%eax),%eax
   11c51:	8d 50 01             	lea    0x1(%eax),%edx
   11c54:	8b 45 08             	mov    0x8(%ebp),%eax
   11c57:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   11c59:	83 ec 0c             	sub    $0xc,%esp
   11c5c:	ff 75 f4             	pushl  -0xc(%ebp)
   11c5f:	e8 87 f9 ff ff       	call   115eb <irq_leave_protection>
   11c64:	83 c4 10             	add    $0x10,%esp
}
   11c67:	90                   	nop
   11c68:	c9                   	leave  
   11c69:	c3                   	ret    

00011c6a <sem_count>:

int sem_count(sem_t* sem) {
   11c6a:	55                   	push   %ebp
   11c6b:	89 e5                	mov    %esp,%ebp
   11c6d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11c70:	e8 5e f9 ff ff       	call   115d3 <irq_enter_protection>
   11c75:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   11c78:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7b:	8b 00                	mov    (%eax),%eax
   11c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   11c80:	83 ec 0c             	sub    $0xc,%esp
   11c83:	ff 75 f4             	pushl  -0xc(%ebp)
   11c86:	e8 60 f9 ff ff       	call   115eb <irq_leave_protection>
   11c8b:	83 c4 10             	add    $0x10,%esp

    return count;
   11c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c91:	c9                   	leave  
   11c92:	c3                   	ret    

00011c93 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   11c93:	55                   	push   %ebp
   11c94:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   11c96:	8b 45 08             	mov    0x8(%ebp),%eax
   11c99:	83 c0 07             	add    $0x7,%eax
   11c9c:	8d 50 07             	lea    0x7(%eax),%edx
   11c9f:	85 c0                	test   %eax,%eax
   11ca1:	0f 48 c2             	cmovs  %edx,%eax
   11ca4:	c1 f8 03             	sar    $0x3,%eax
}
   11ca7:	5d                   	pop    %ebp
   11ca8:	c3                   	ret    

00011ca9 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   11ca9:	55                   	push   %ebp
   11caa:	89 e5                	mov    %esp,%ebp
   11cac:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11caf:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb2:	8b 55 10             	mov    0x10(%ebp),%edx
   11cb5:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11cb7:	8b 45 08             	mov    0x8(%ebp),%eax
   11cba:	8b 55 0c             	mov    0xc(%ebp),%edx
   11cbd:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   11cc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc3:	8b 00                	mov    (%eax),%eax
   11cc5:	50                   	push   %eax
   11cc6:	e8 c8 ff ff ff       	call   11c93 <bitmap_byte_count>
   11ccb:	83 c4 04             	add    $0x4,%esp
   11cce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   11cd1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11cd5:	74 07                	je     11cde <bitmap_init+0x35>
   11cd7:	ba ff 00 00 00       	mov    $0xff,%edx
   11cdc:	eb 05                	jmp    11ce3 <bitmap_init+0x3a>
   11cde:	ba 00 00 00 00       	mov    $0x0,%edx
   11ce3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce6:	8b 40 04             	mov    0x4(%eax),%eax
   11ce9:	83 ec 04             	sub    $0x4,%esp
   11cec:	ff 75 f4             	pushl  -0xc(%ebp)
   11cef:	52                   	push   %edx
   11cf0:	50                   	push   %eax
   11cf1:	e8 a4 03 00 00       	call   1209a <kmemset>
   11cf6:	83 c4 10             	add    $0x10,%esp
}
   11cf9:	90                   	nop
   11cfa:	c9                   	leave  
   11cfb:	c3                   	ret    

00011cfc <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   11cfc:	55                   	push   %ebp
   11cfd:	89 e5                	mov    %esp,%ebp
   11cff:	56                   	push   %esi
   11d00:	53                   	push   %ebx
   11d01:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11d04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d0b:	e9 a2 00 00 00       	jmp    11db2 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   11d10:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11d14:	74 4a                	je     11d60 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   11d16:	8b 45 08             	mov    0x8(%ebp),%eax
   11d19:	8b 50 04             	mov    0x4(%eax),%edx
   11d1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d1f:	8d 48 07             	lea    0x7(%eax),%ecx
   11d22:	85 c0                	test   %eax,%eax
   11d24:	0f 48 c1             	cmovs  %ecx,%eax
   11d27:	c1 f8 03             	sar    $0x3,%eax
   11d2a:	89 c3                	mov    %eax,%ebx
   11d2c:	89 d8                	mov    %ebx,%eax
   11d2e:	01 d0                	add    %edx,%eax
   11d30:	0f b6 00             	movzbl (%eax),%eax
   11d33:	89 c6                	mov    %eax,%esi
   11d35:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d38:	99                   	cltd   
   11d39:	c1 ea 1d             	shr    $0x1d,%edx
   11d3c:	01 d0                	add    %edx,%eax
   11d3e:	83 e0 07             	and    $0x7,%eax
   11d41:	29 d0                	sub    %edx,%eax
   11d43:	ba 01 00 00 00       	mov    $0x1,%edx
   11d48:	89 c1                	mov    %eax,%ecx
   11d4a:	d3 e2                	shl    %cl,%edx
   11d4c:	89 d0                	mov    %edx,%eax
   11d4e:	89 f2                	mov    %esi,%edx
   11d50:	09 c2                	or     %eax,%edx
   11d52:	8b 45 08             	mov    0x8(%ebp),%eax
   11d55:	8b 40 04             	mov    0x4(%eax),%eax
   11d58:	89 d9                	mov    %ebx,%ecx
   11d5a:	01 c8                	add    %ecx,%eax
   11d5c:	88 10                	mov    %dl,(%eax)
   11d5e:	eb 4a                	jmp    11daa <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11d60:	8b 45 08             	mov    0x8(%ebp),%eax
   11d63:	8b 50 04             	mov    0x4(%eax),%edx
   11d66:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d69:	8d 48 07             	lea    0x7(%eax),%ecx
   11d6c:	85 c0                	test   %eax,%eax
   11d6e:	0f 48 c1             	cmovs  %ecx,%eax
   11d71:	c1 f8 03             	sar    $0x3,%eax
   11d74:	89 c3                	mov    %eax,%ebx
   11d76:	89 d8                	mov    %ebx,%eax
   11d78:	01 d0                	add    %edx,%eax
   11d7a:	0f b6 00             	movzbl (%eax),%eax
   11d7d:	89 c6                	mov    %eax,%esi
   11d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d82:	99                   	cltd   
   11d83:	c1 ea 1d             	shr    $0x1d,%edx
   11d86:	01 d0                	add    %edx,%eax
   11d88:	83 e0 07             	and    $0x7,%eax
   11d8b:	29 d0                	sub    %edx,%eax
   11d8d:	ba 01 00 00 00       	mov    $0x1,%edx
   11d92:	89 c1                	mov    %eax,%ecx
   11d94:	d3 e2                	shl    %cl,%edx
   11d96:	89 d0                	mov    %edx,%eax
   11d98:	f7 d0                	not    %eax
   11d9a:	89 f2                	mov    %esi,%edx
   11d9c:	21 c2                	and    %eax,%edx
   11d9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11da1:	8b 40 04             	mov    0x4(%eax),%eax
   11da4:	89 d9                	mov    %ebx,%ecx
   11da6:	01 c8                	add    %ecx,%eax
   11da8:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11daa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11dae:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   11db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11db5:	3b 45 10             	cmp    0x10(%ebp),%eax
   11db8:	7d 0e                	jge    11dc8 <bitmap_set_bit+0xcc>
   11dba:	8b 45 08             	mov    0x8(%ebp),%eax
   11dbd:	8b 00                	mov    (%eax),%eax
   11dbf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11dc2:	0f 8c 48 ff ff ff    	jl     11d10 <bitmap_set_bit+0x14>
        }
    }
}
   11dc8:	90                   	nop
   11dc9:	83 c4 10             	add    $0x10,%esp
   11dcc:	5b                   	pop    %ebx
   11dcd:	5e                   	pop    %esi
   11dce:	5d                   	pop    %ebp
   11dcf:	c3                   	ret    

00011dd0 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   11dd0:	55                   	push   %ebp
   11dd1:	89 e5                	mov    %esp,%ebp
   11dd3:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   11dd4:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd7:	8b 50 04             	mov    0x4(%eax),%edx
   11dda:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ddd:	8d 48 07             	lea    0x7(%eax),%ecx
   11de0:	85 c0                	test   %eax,%eax
   11de2:	0f 48 c1             	cmovs  %ecx,%eax
   11de5:	c1 f8 03             	sar    $0x3,%eax
   11de8:	01 d0                	add    %edx,%eax
   11dea:	0f b6 00             	movzbl (%eax),%eax
   11ded:	0f b6 d8             	movzbl %al,%ebx
   11df0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11df3:	99                   	cltd   
   11df4:	c1 ea 1d             	shr    $0x1d,%edx
   11df7:	01 d0                	add    %edx,%eax
   11df9:	83 e0 07             	and    $0x7,%eax
   11dfc:	29 d0                	sub    %edx,%eax
   11dfe:	89 c1                	mov    %eax,%ecx
   11e00:	d3 fb                	sar    %cl,%ebx
   11e02:	89 d8                	mov    %ebx,%eax
   11e04:	83 e0 01             	and    $0x1,%eax
}
   11e07:	5b                   	pop    %ebx
   11e08:	5d                   	pop    %ebp
   11e09:	c3                   	ret    

00011e0a <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   11e0a:	55                   	push   %ebp
   11e0b:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11e0d:	ff 75 0c             	pushl  0xc(%ebp)
   11e10:	ff 75 08             	pushl  0x8(%ebp)
   11e13:	e8 b8 ff ff ff       	call   11dd0 <bitmap_get_bit>
   11e18:	83 c4 08             	add    $0x8,%esp
   11e1b:	85 c0                	test   %eax,%eax
   11e1d:	0f 95 c0             	setne  %al
   11e20:	0f b6 c0             	movzbl %al,%eax
}
   11e23:	c9                   	leave  
   11e24:	c3                   	ret    

00011e25 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   11e25:	55                   	push   %ebp
   11e26:	89 e5                	mov    %esp,%ebp
   11e28:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11e2b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   11e32:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   11e39:	e9 85 00 00 00       	jmp    11ec3 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   11e3e:	ff 75 fc             	pushl  -0x4(%ebp)
   11e41:	ff 75 08             	pushl  0x8(%ebp)
   11e44:	e8 87 ff ff ff       	call   11dd0 <bitmap_get_bit>
   11e49:	83 c4 08             	add    $0x8,%esp
   11e4c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e4f:	74 06                	je     11e57 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   11e51:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   11e55:	eb 6c                	jmp    11ec3 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   11e57:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e5a:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11e5d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11e64:	eb 27                	jmp    11e8d <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   11e66:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e69:	8d 50 01             	lea    0x1(%eax),%edx
   11e6c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e6f:	50                   	push   %eax
   11e70:	ff 75 08             	pushl  0x8(%ebp)
   11e73:	e8 58 ff ff ff       	call   11dd0 <bitmap_get_bit>
   11e78:	83 c4 08             	add    $0x8,%esp
   11e7b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e7e:	74 09                	je     11e89 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   11e80:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11e87:	eb 16                	jmp    11e9f <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11e89:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e90:	3b 45 10             	cmp    0x10(%ebp),%eax
   11e93:	7d 0a                	jge    11e9f <bitmap_alloc_nbits+0x7a>
   11e95:	8b 45 08             	mov    0x8(%ebp),%eax
   11e98:	8b 00                	mov    (%eax),%eax
   11e9a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11e9d:	7c c7                	jl     11e66 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   11e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ea2:	3b 45 10             	cmp    0x10(%ebp),%eax
   11ea5:	7c 1c                	jl     11ec3 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   11ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eaa:	f7 d0                	not    %eax
   11eac:	50                   	push   %eax
   11ead:	ff 75 10             	pushl  0x10(%ebp)
   11eb0:	ff 75 f8             	pushl  -0x8(%ebp)
   11eb3:	ff 75 08             	pushl  0x8(%ebp)
   11eb6:	e8 41 fe ff ff       	call   11cfc <bitmap_set_bit>
   11ebb:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   11ebe:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ec1:	eb 13                	jmp    11ed6 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   11ec3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec6:	8b 00                	mov    (%eax),%eax
   11ec8:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11ecb:	0f 8c 6d ff ff ff    	jl     11e3e <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   11ed1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ed6:	c9                   	leave  
   11ed7:	c3                   	ret    

00011ed8 <hlt>:
static inline void hlt(void) {
   11ed8:	55                   	push   %ebp
   11ed9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11edb:	f4                   	hlt    
}
   11edc:	90                   	nop
   11edd:	5d                   	pop    %ebp
   11ede:	c3                   	ret    

00011edf <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   11edf:	55                   	push   %ebp
   11ee0:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   11ee2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ee6:	74 3b                	je     11f23 <kstrcpy+0x44>
   11ee8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11eec:	74 35                	je     11f23 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   11eee:	eb 17                	jmp    11f07 <kstrcpy+0x28>
        *dest++ = *src++;
   11ef0:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ef3:	8d 42 01             	lea    0x1(%edx),%eax
   11ef6:	89 45 0c             	mov    %eax,0xc(%ebp)
   11ef9:	8b 45 08             	mov    0x8(%ebp),%eax
   11efc:	8d 48 01             	lea    0x1(%eax),%ecx
   11eff:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11f02:	0f b6 12             	movzbl (%edx),%edx
   11f05:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11f07:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0a:	0f b6 00             	movzbl (%eax),%eax
   11f0d:	84 c0                	test   %al,%al
   11f0f:	74 0a                	je     11f1b <kstrcpy+0x3c>
   11f11:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f14:	0f b6 00             	movzbl (%eax),%eax
   11f17:	84 c0                	test   %al,%al
   11f19:	75 d5                	jne    11ef0 <kstrcpy+0x11>
    }
    *dest = '\0';
   11f1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1e:	c6 00 00             	movb   $0x0,(%eax)
   11f21:	eb 01                	jmp    11f24 <kstrcpy+0x45>
        return;
   11f23:	90                   	nop
}
   11f24:	5d                   	pop    %ebp
   11f25:	c3                   	ret    

00011f26 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   11f26:	55                   	push   %ebp
   11f27:	89 e5                	mov    %esp,%ebp
   11f29:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11f2c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11f30:	74 61                	je     11f93 <kstrncpy+0x6d>
   11f32:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11f36:	74 5b                	je     11f93 <kstrncpy+0x6d>
   11f38:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11f3c:	74 55                	je     11f93 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   11f3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f41:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   11f44:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f47:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   11f4a:	eb 17                	jmp    11f63 <kstrncpy+0x3d>
        *d++ = *s++;
   11f4c:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11f4f:	8d 42 01             	lea    0x1(%edx),%eax
   11f52:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11f55:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f58:	8d 48 01             	lea    0x1(%eax),%ecx
   11f5b:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11f5e:	0f b6 12             	movzbl (%edx),%edx
   11f61:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   11f63:	8b 45 10             	mov    0x10(%ebp),%eax
   11f66:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f69:	89 55 10             	mov    %edx,0x10(%ebp)
   11f6c:	85 c0                	test   %eax,%eax
   11f6e:	7e 0a                	jle    11f7a <kstrncpy+0x54>
   11f70:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f73:	0f b6 00             	movzbl (%eax),%eax
   11f76:	84 c0                	test   %al,%al
   11f78:	75 d2                	jne    11f4c <kstrncpy+0x26>
    }
    if (size == 0) {
   11f7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11f7e:	75 0b                	jne    11f8b <kstrncpy+0x65>
        *(d - 1) = '\0';
   11f80:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f83:	83 e8 01             	sub    $0x1,%eax
   11f86:	c6 00 00             	movb   $0x0,(%eax)
   11f89:	eb 09                	jmp    11f94 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   11f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f8e:	c6 00 00             	movb   $0x0,(%eax)
   11f91:	eb 01                	jmp    11f94 <kstrncpy+0x6e>
        return;
   11f93:	90                   	nop
    }
}
   11f94:	c9                   	leave  
   11f95:	c3                   	ret    

00011f96 <kstrlen>:


int kstrlen(const char *str) {
   11f96:	55                   	push   %ebp
   11f97:	89 e5                	mov    %esp,%ebp
   11f99:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   11f9c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fa0:	75 07                	jne    11fa9 <kstrlen+0x13>
        return 0;
   11fa2:	b8 00 00 00 00       	mov    $0x0,%eax
   11fa7:	eb 26                	jmp    11fcf <kstrlen+0x39>
    }

    const char *c = str;
   11fa9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fac:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   11faf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   11fb6:	eb 04                	jmp    11fbc <kstrlen+0x26>
        len++;
   11fb8:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   11fbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11fbf:	8d 50 01             	lea    0x1(%eax),%edx
   11fc2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11fc5:	0f b6 00             	movzbl (%eax),%eax
   11fc8:	84 c0                	test   %al,%al
   11fca:	75 ec                	jne    11fb8 <kstrlen+0x22>
    }

    return len;
   11fcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11fcf:	c9                   	leave  
   11fd0:	c3                   	ret    

00011fd1 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   11fd1:	55                   	push   %ebp
   11fd2:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   11fd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11fd8:	74 06                	je     11fe0 <kstrncmp+0xf>
   11fda:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11fde:	75 0f                	jne    11fef <kstrncmp+0x1e>
        return -1;
   11fe0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11fe5:	eb 62                	jmp    12049 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   11fe7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11feb:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   11fef:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff2:	0f b6 00             	movzbl (%eax),%eax
   11ff5:	84 c0                	test   %al,%al
   11ff7:	74 20                	je     12019 <kstrncmp+0x48>
   11ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ffc:	0f b6 00             	movzbl (%eax),%eax
   11fff:	84 c0                	test   %al,%al
   12001:	74 16                	je     12019 <kstrncmp+0x48>
   12003:	8b 45 08             	mov    0x8(%ebp),%eax
   12006:	0f b6 10             	movzbl (%eax),%edx
   12009:	8b 45 0c             	mov    0xc(%ebp),%eax
   1200c:	0f b6 00             	movzbl (%eax),%eax
   1200f:	38 c2                	cmp    %al,%dl
   12011:	75 06                	jne    12019 <kstrncmp+0x48>
   12013:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12017:	75 ce                	jne    11fe7 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12019:	8b 45 08             	mov    0x8(%ebp),%eax
   1201c:	0f b6 00             	movzbl (%eax),%eax
   1201f:	84 c0                	test   %al,%al
   12021:	74 21                	je     12044 <kstrncmp+0x73>
   12023:	8b 45 0c             	mov    0xc(%ebp),%eax
   12026:	0f b6 00             	movzbl (%eax),%eax
   12029:	84 c0                	test   %al,%al
   1202b:	74 17                	je     12044 <kstrncmp+0x73>
   1202d:	8b 45 08             	mov    0x8(%ebp),%eax
   12030:	0f b6 10             	movzbl (%eax),%edx
   12033:	8b 45 0c             	mov    0xc(%ebp),%eax
   12036:	0f b6 00             	movzbl (%eax),%eax
   12039:	38 c2                	cmp    %al,%dl
   1203b:	74 07                	je     12044 <kstrncmp+0x73>
   1203d:	b8 01 00 00 00       	mov    $0x1,%eax
   12042:	eb 05                	jmp    12049 <kstrncmp+0x78>
   12044:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12049:	5d                   	pop    %ebp
   1204a:	c3                   	ret    

0001204b <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   1204b:	55                   	push   %ebp
   1204c:	89 e5                	mov    %esp,%ebp
   1204e:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12051:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12055:	74 40                	je     12097 <kmemcpy+0x4c>
   12057:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1205b:	74 3a                	je     12097 <kmemcpy+0x4c>
   1205d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12061:	74 34                	je     12097 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12063:	8b 45 0c             	mov    0xc(%ebp),%eax
   12066:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12069:	8b 45 08             	mov    0x8(%ebp),%eax
   1206c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1206f:	eb 17                	jmp    12088 <kmemcpy+0x3d>
        *d++ = *s++;
   12071:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12074:	8d 42 01             	lea    0x1(%edx),%eax
   12077:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1207a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1207d:	8d 48 01             	lea    0x1(%eax),%ecx
   12080:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12083:	0f b6 12             	movzbl (%edx),%edx
   12086:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12088:	8b 45 10             	mov    0x10(%ebp),%eax
   1208b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1208e:	89 55 10             	mov    %edx,0x10(%ebp)
   12091:	85 c0                	test   %eax,%eax
   12093:	75 dc                	jne    12071 <kmemcpy+0x26>
   12095:	eb 01                	jmp    12098 <kmemcpy+0x4d>
        return;
   12097:	90                   	nop
    }
}
   12098:	c9                   	leave  
   12099:	c3                   	ret    

0001209a <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   1209a:	55                   	push   %ebp
   1209b:	89 e5                	mov    %esp,%ebp
   1209d:	83 ec 14             	sub    $0x14,%esp
   120a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   120a3:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   120a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120aa:	74 2c                	je     120d8 <kmemset+0x3e>
   120ac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   120b0:	74 26                	je     120d8 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   120b2:	8b 45 08             	mov    0x8(%ebp),%eax
   120b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   120b8:	eb 0f                	jmp    120c9 <kmemset+0x2f>
        *d++ = v;
   120ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120bd:	8d 50 01             	lea    0x1(%eax),%edx
   120c0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   120c3:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   120c7:	88 10                	mov    %dl,(%eax)
    while (size--) {
   120c9:	8b 45 10             	mov    0x10(%ebp),%eax
   120cc:	8d 50 ff             	lea    -0x1(%eax),%edx
   120cf:	89 55 10             	mov    %edx,0x10(%ebp)
   120d2:	85 c0                	test   %eax,%eax
   120d4:	75 e4                	jne    120ba <kmemset+0x20>
   120d6:	eb 01                	jmp    120d9 <kmemset+0x3f>
        return;
   120d8:	90                   	nop
    }
}
   120d9:	c9                   	leave  
   120da:	c3                   	ret    

000120db <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   120db:	55                   	push   %ebp
   120dc:	89 e5                	mov    %esp,%ebp
   120de:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   120e1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   120e5:	74 06                	je     120ed <kmemcmp+0x12>
   120e7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   120eb:	75 07                	jne    120f4 <kmemcmp+0x19>
        return 1;
   120ed:	b8 01 00 00 00       	mov    $0x1,%eax
   120f2:	eb 43                	jmp    12137 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   120f4:	8b 45 08             	mov    0x8(%ebp),%eax
   120f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   120fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   120fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12100:	eb 23                	jmp    12125 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   12102:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12105:	8d 50 01             	lea    0x1(%eax),%edx
   12108:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1210b:	0f b6 08             	movzbl (%eax),%ecx
   1210e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12111:	8d 50 01             	lea    0x1(%eax),%edx
   12114:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12117:	0f b6 00             	movzbl (%eax),%eax
   1211a:	38 c1                	cmp    %al,%cl
   1211c:	74 07                	je     12125 <kmemcmp+0x4a>
            return 1;
   1211e:	b8 01 00 00 00       	mov    $0x1,%eax
   12123:	eb 12                	jmp    12137 <kmemcmp+0x5c>
    while (size--) {
   12125:	8b 45 10             	mov    0x10(%ebp),%eax
   12128:	8d 50 ff             	lea    -0x1(%eax),%edx
   1212b:	89 55 10             	mov    %edx,0x10(%ebp)
   1212e:	85 c0                	test   %eax,%eax
   12130:	75 d0                	jne    12102 <kmemcmp+0x27>
        }
    }

    return 0;
   12132:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12137:	c9                   	leave  
   12138:	c3                   	ret    

00012139 <kitoa>:


void kitoa(char *buf, int num, int base) {
   12139:	55                   	push   %ebp
   1213a:	89 e5                	mov    %esp,%ebp
   1213c:	53                   	push   %ebx
   1213d:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   12140:	8b 45 08             	mov    0x8(%ebp),%eax
   12143:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12146:	8b 45 0c             	mov    0xc(%ebp),%eax
   12149:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1214c:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12150:	74 1d                	je     1216f <kitoa+0x36>
   12152:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12156:	74 17                	je     1216f <kitoa+0x36>
   12158:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1215c:	74 11                	je     1216f <kitoa+0x36>
   1215e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12162:	74 0b                	je     1216f <kitoa+0x36>
        *p = '\0';
   12164:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12167:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1216a:	e9 03 01 00 00       	jmp    12272 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1216f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12176:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1217a:	79 19                	jns    12195 <kitoa+0x5c>
   1217c:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12180:	75 13                	jne    12195 <kitoa+0x5c>
        *p++ = '-';
   12182:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12185:	8d 50 01             	lea    0x1(%eax),%edx
   12188:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1218b:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1218e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12195:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12199:	74 3b                	je     121d6 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1219b:	8b 0d c4 2d 01 00    	mov    0x12dc4,%ecx
   121a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   121a4:	99                   	cltd   
   121a5:	f7 7d 10             	idivl  0x10(%ebp)
   121a8:	89 d0                	mov    %edx,%eax
   121aa:	83 c0 0f             	add    $0xf,%eax
   121ad:	01 c8                	add    %ecx,%eax
   121af:	0f b6 00             	movzbl (%eax),%eax
   121b2:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   121b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   121b8:	8d 50 01             	lea    0x1(%eax),%edx
   121bb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   121be:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   121c2:	88 10                	mov    %dl,(%eax)
            num /= base;
   121c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c7:	99                   	cltd   
   121c8:	f7 7d 10             	idivl  0x10(%ebp)
   121cb:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   121ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121d2:	75 c7                	jne    1219b <kitoa+0x62>
   121d4:	eb 4b                	jmp    12221 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   121d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   121dc:	8b 0d c4 2d 01 00    	mov    0x12dc4,%ecx
   121e2:	8b 5d 10             	mov    0x10(%ebp),%ebx
   121e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121e8:	ba 00 00 00 00       	mov    $0x0,%edx
   121ed:	f7 f3                	div    %ebx
   121ef:	89 d0                	mov    %edx,%eax
   121f1:	83 c0 0f             	add    $0xf,%eax
   121f4:	01 c8                	add    %ecx,%eax
   121f6:	0f b6 00             	movzbl (%eax),%eax
   121f9:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   121fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   121ff:	8d 50 01             	lea    0x1(%eax),%edx
   12202:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12205:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12209:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   1220b:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1220e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12211:	ba 00 00 00 00       	mov    $0x0,%edx
   12216:	f7 f3                	div    %ebx
   12218:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1221b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1221f:	75 bb                	jne    121dc <kitoa+0xa3>
    }
    *p-- = '\0';
   12221:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12224:	8d 50 ff             	lea    -0x1(%eax),%edx
   12227:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1222a:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   1222d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12231:	74 08                	je     1223b <kitoa+0x102>
   12233:	8b 45 08             	mov    0x8(%ebp),%eax
   12236:	83 c0 01             	add    $0x1,%eax
   12239:	eb 03                	jmp    1223e <kitoa+0x105>
   1223b:	8b 45 08             	mov    0x8(%ebp),%eax
   1223e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12241:	eb 27                	jmp    1226a <kitoa+0x131>
        char ch = *start;
   12243:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12246:	0f b6 00             	movzbl (%eax),%eax
   12249:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1224c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1224f:	0f b6 10             	movzbl (%eax),%edx
   12252:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12255:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12257:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1225a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1225d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12260:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12264:	88 10                	mov    %dl,(%eax)
        start++;
   12266:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1226a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1226d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12270:	72 d1                	jb     12243 <kitoa+0x10a>
    }
}
   12272:	83 c4 20             	add    $0x20,%esp
   12275:	5b                   	pop    %ebx
   12276:	5d                   	pop    %ebp
   12277:	c3                   	ret    

00012278 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12278:	55                   	push   %ebp
   12279:	89 e5                	mov    %esp,%ebp
   1227b:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   1227e:	8d 45 10             	lea    0x10(%ebp),%eax
   12281:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12284:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12287:	83 ec 04             	sub    $0x4,%esp
   1228a:	50                   	push   %eax
   1228b:	ff 75 0c             	pushl  0xc(%ebp)
   1228e:	ff 75 08             	pushl  0x8(%ebp)
   12291:	e8 06 00 00 00       	call   1229c <kvsprintf>
   12296:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12299:	90                   	nop
   1229a:	c9                   	leave  
   1229b:	c3                   	ret    

0001229c <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   1229c:	55                   	push   %ebp
   1229d:	89 e5                	mov    %esp,%ebp
   1229f:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   122a2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   122a9:	8b 45 08             	mov    0x8(%ebp),%eax
   122ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   122af:	e9 2f 01 00 00       	jmp    123e3 <kvsprintf+0x147>
        switch (state) {
   122b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122b7:	85 c0                	test   %eax,%eax
   122b9:	74 0a                	je     122c5 <kvsprintf+0x29>
   122bb:	83 f8 01             	cmp    $0x1,%eax
   122be:	74 2b                	je     122eb <kvsprintf+0x4f>
   122c0:	e9 1e 01 00 00       	jmp    123e3 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   122c5:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   122c9:	75 0c                	jne    122d7 <kvsprintf+0x3b>
                state = READ_FMT;
   122cb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   122d2:	e9 0c 01 00 00       	jmp    123e3 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   122d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   122da:	8d 50 01             	lea    0x1(%eax),%edx
   122dd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   122e0:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   122e4:	88 10                	mov    %dl,(%eax)
            }
            break;
   122e6:	e9 f8 00 00 00       	jmp    123e3 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   122eb:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   122ef:	75 31                	jne    12322 <kvsprintf+0x86>
                int num = va_arg(args, int);
   122f1:	8b 45 10             	mov    0x10(%ebp),%eax
   122f4:	8d 50 04             	lea    0x4(%eax),%edx
   122f7:	89 55 10             	mov    %edx,0x10(%ebp)
   122fa:	8b 00                	mov    (%eax),%eax
   122fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   122ff:	6a 0a                	push   $0xa
   12301:	ff 75 e4             	pushl  -0x1c(%ebp)
   12304:	ff 75 f8             	pushl  -0x8(%ebp)
   12307:	e8 2d fe ff ff       	call   12139 <kitoa>
   1230c:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   1230f:	ff 75 f8             	pushl  -0x8(%ebp)
   12312:	e8 7f fc ff ff       	call   11f96 <kstrlen>
   12317:	83 c4 04             	add    $0x4,%esp
   1231a:	01 45 f8             	add    %eax,-0x8(%ebp)
   1231d:	e9 b9 00 00 00       	jmp    123db <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12322:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12326:	75 46                	jne    1236e <kvsprintf+0xd2>
                *curr++ = '0';
   12328:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1232b:	8d 50 01             	lea    0x1(%eax),%edx
   1232e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12331:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12334:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12337:	8d 50 01             	lea    0x1(%eax),%edx
   1233a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1233d:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12340:	8b 45 10             	mov    0x10(%ebp),%eax
   12343:	8d 50 04             	lea    0x4(%eax),%edx
   12346:	89 55 10             	mov    %edx,0x10(%ebp)
   12349:	8b 00                	mov    (%eax),%eax
   1234b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   1234e:	6a 10                	push   $0x10
   12350:	ff 75 e8             	pushl  -0x18(%ebp)
   12353:	ff 75 f8             	pushl  -0x8(%ebp)
   12356:	e8 de fd ff ff       	call   12139 <kitoa>
   1235b:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   1235e:	ff 75 f8             	pushl  -0x8(%ebp)
   12361:	e8 30 fc ff ff       	call   11f96 <kstrlen>
   12366:	83 c4 04             	add    $0x4,%esp
   12369:	01 45 f8             	add    %eax,-0x8(%ebp)
   1236c:	eb 6d                	jmp    123db <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   1236e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12372:	75 1f                	jne    12393 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12374:	8b 45 10             	mov    0x10(%ebp),%eax
   12377:	8d 50 04             	lea    0x4(%eax),%edx
   1237a:	89 55 10             	mov    %edx,0x10(%ebp)
   1237d:	8b 00                	mov    (%eax),%eax
   1237f:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12382:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12385:	8d 50 01             	lea    0x1(%eax),%edx
   12388:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1238b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1238f:	88 10                	mov    %dl,(%eax)
   12391:	eb 48                	jmp    123db <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12393:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12397:	75 42                	jne    123db <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12399:	8b 45 10             	mov    0x10(%ebp),%eax
   1239c:	8d 50 04             	lea    0x4(%eax),%edx
   1239f:	89 55 10             	mov    %edx,0x10(%ebp)
   123a2:	8b 00                	mov    (%eax),%eax
   123a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   123a7:	ff 75 f4             	pushl  -0xc(%ebp)
   123aa:	e8 e7 fb ff ff       	call   11f96 <kstrlen>
   123af:	83 c4 04             	add    $0x4,%esp
   123b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   123b5:	eb 17                	jmp    123ce <kvsprintf+0x132>
                    *curr++ = *str++;
   123b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123ba:	8d 42 01             	lea    0x1(%edx),%eax
   123bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
   123c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   123c3:	8d 48 01             	lea    0x1(%eax),%ecx
   123c6:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   123c9:	0f b6 12             	movzbl (%edx),%edx
   123cc:	88 10                	mov    %dl,(%eax)
                while (len--) {
   123ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123d1:	8d 50 ff             	lea    -0x1(%eax),%edx
   123d4:	89 55 f0             	mov    %edx,-0x10(%ebp)
   123d7:	85 c0                	test   %eax,%eax
   123d9:	75 dc                	jne    123b7 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   123db:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   123e2:	90                   	nop
    while ((ch = *fmt++)) {
   123e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   123e6:	8d 50 01             	lea    0x1(%eax),%edx
   123e9:	89 55 0c             	mov    %edx,0xc(%ebp)
   123ec:	0f b6 00             	movzbl (%eax),%eax
   123ef:	88 45 ef             	mov    %al,-0x11(%ebp)
   123f2:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   123f6:	0f 85 b8 fe ff ff    	jne    122b4 <kvsprintf+0x18>
        }
    }
}
   123fc:	90                   	nop
   123fd:	c9                   	leave  
   123fe:	c3                   	ret    

000123ff <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   123ff:	55                   	push   %ebp
   12400:	89 e5                	mov    %esp,%ebp
   12402:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12405:	83 ec 08             	sub    $0x8,%esp
   12408:	ff 75 14             	pushl  0x14(%ebp)
   1240b:	68 74 2d 01 00       	push   $0x12d74
   12410:	e8 ef 02 00 00       	call   12704 <log_printf>
   12415:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12418:	ff 75 10             	pushl  0x10(%ebp)
   1241b:	ff 75 0c             	pushl  0xc(%ebp)
   1241e:	ff 75 08             	pushl  0x8(%ebp)
   12421:	68 86 2d 01 00       	push   $0x12d86
   12426:	e8 d9 02 00 00       	call   12704 <log_printf>
   1242b:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   1242e:	e8 a5 fa ff ff       	call   11ed8 <hlt>
   12433:	eb f9                	jmp    1242e <pannic+0x2f>

00012435 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12435:	55                   	push   %ebp
   12436:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12438:	8b 45 08             	mov    0x8(%ebp),%eax
   1243b:	8b 40 08             	mov    0x8(%eax),%eax
   1243e:	85 c0                	test   %eax,%eax
   12440:	0f 94 c0             	sete   %al
   12443:	0f b6 c0             	movzbl %al,%eax
}
   12446:	5d                   	pop    %ebp
   12447:	c3                   	ret    

00012448 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12448:	55                   	push   %ebp
   12449:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   1244b:	8b 45 08             	mov    0x8(%ebp),%eax
   1244e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12454:	8b 45 08             	mov    0x8(%ebp),%eax
   12457:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   1245e:	8b 45 08             	mov    0x8(%ebp),%eax
   12461:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12468:	90                   	nop
   12469:	5d                   	pop    %ebp
   1246a:	c3                   	ret    

0001246b <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   1246b:	55                   	push   %ebp
   1246c:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   1246e:	8b 45 08             	mov    0x8(%ebp),%eax
   12471:	8b 10                	mov    (%eax),%edx
   12473:	8b 45 0c             	mov    0xc(%ebp),%eax
   12476:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12479:	8b 45 0c             	mov    0xc(%ebp),%eax
   1247c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12482:	ff 75 08             	pushl  0x8(%ebp)
   12485:	e8 ab ff ff ff       	call   12435 <list_is_empty>
   1248a:	83 c4 04             	add    $0x4,%esp
   1248d:	85 c0                	test   %eax,%eax
   1248f:	74 15                	je     124a6 <list_insert_front+0x3b>
        list->last = list->first = node;
   12491:	8b 45 08             	mov    0x8(%ebp),%eax
   12494:	8b 55 0c             	mov    0xc(%ebp),%edx
   12497:	89 10                	mov    %edx,(%eax)
   12499:	8b 45 08             	mov    0x8(%ebp),%eax
   1249c:	8b 10                	mov    (%eax),%edx
   1249e:	8b 45 08             	mov    0x8(%ebp),%eax
   124a1:	89 50 04             	mov    %edx,0x4(%eax)
   124a4:	eb 12                	jmp    124b8 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   124a6:	8b 45 08             	mov    0x8(%ebp),%eax
   124a9:	8b 00                	mov    (%eax),%eax
   124ab:	8b 55 0c             	mov    0xc(%ebp),%edx
   124ae:	89 10                	mov    %edx,(%eax)
        list->first = node;
   124b0:	8b 45 08             	mov    0x8(%ebp),%eax
   124b3:	8b 55 0c             	mov    0xc(%ebp),%edx
   124b6:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   124b8:	8b 45 08             	mov    0x8(%ebp),%eax
   124bb:	8b 40 08             	mov    0x8(%eax),%eax
   124be:	8d 50 01             	lea    0x1(%eax),%edx
   124c1:	8b 45 08             	mov    0x8(%ebp),%eax
   124c4:	89 50 08             	mov    %edx,0x8(%eax)
}
   124c7:	90                   	nop
   124c8:	c9                   	leave  
   124c9:	c3                   	ret    

000124ca <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   124ca:	55                   	push   %ebp
   124cb:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   124cd:	8b 45 08             	mov    0x8(%ebp),%eax
   124d0:	8b 50 04             	mov    0x4(%eax),%edx
   124d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   124d6:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   124d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   124db:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   124e2:	ff 75 08             	pushl  0x8(%ebp)
   124e5:	e8 4b ff ff ff       	call   12435 <list_is_empty>
   124ea:	83 c4 04             	add    $0x4,%esp
   124ed:	85 c0                	test   %eax,%eax
   124ef:	74 15                	je     12506 <list_insert_back+0x3c>
        list->last = list->first = node;
   124f1:	8b 45 08             	mov    0x8(%ebp),%eax
   124f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   124f7:	89 10                	mov    %edx,(%eax)
   124f9:	8b 45 08             	mov    0x8(%ebp),%eax
   124fc:	8b 10                	mov    (%eax),%edx
   124fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12501:	89 50 04             	mov    %edx,0x4(%eax)
   12504:	eb 15                	jmp    1251b <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12506:	8b 45 08             	mov    0x8(%ebp),%eax
   12509:	8b 40 04             	mov    0x4(%eax),%eax
   1250c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1250f:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12512:	8b 45 08             	mov    0x8(%ebp),%eax
   12515:	8b 55 0c             	mov    0xc(%ebp),%edx
   12518:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1251b:	8b 45 08             	mov    0x8(%ebp),%eax
   1251e:	8b 40 08             	mov    0x8(%eax),%eax
   12521:	8d 50 01             	lea    0x1(%eax),%edx
   12524:	8b 45 08             	mov    0x8(%ebp),%eax
   12527:	89 50 08             	mov    %edx,0x8(%eax)
}
   1252a:	90                   	nop
   1252b:	c9                   	leave  
   1252c:	c3                   	ret    

0001252d <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   1252d:	55                   	push   %ebp
   1252e:	89 e5                	mov    %esp,%ebp
   12530:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12533:	ff 75 08             	pushl  0x8(%ebp)
   12536:	e8 fa fe ff ff       	call   12435 <list_is_empty>
   1253b:	83 c4 04             	add    $0x4,%esp
   1253e:	85 c0                	test   %eax,%eax
   12540:	74 07                	je     12549 <list_remove_front+0x1c>
        return (list_node_t*)0;
   12542:	b8 00 00 00 00       	mov    $0x0,%eax
   12547:	eb 5b                	jmp    125a4 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12549:	8b 45 08             	mov    0x8(%ebp),%eax
   1254c:	8b 00                	mov    (%eax),%eax
   1254e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12551:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12554:	8b 50 04             	mov    0x4(%eax),%edx
   12557:	8b 45 08             	mov    0x8(%ebp),%eax
   1255a:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   1255c:	8b 45 08             	mov    0x8(%ebp),%eax
   1255f:	8b 00                	mov    (%eax),%eax
   12561:	85 c0                	test   %eax,%eax
   12563:	75 0c                	jne    12571 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12565:	8b 45 08             	mov    0x8(%ebp),%eax
   12568:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1256f:	eb 0c                	jmp    1257d <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12571:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12574:	8b 40 04             	mov    0x4(%eax),%eax
   12577:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   1257d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12580:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12587:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1258a:	8b 50 04             	mov    0x4(%eax),%edx
   1258d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12590:	89 10                	mov    %edx,(%eax)
    list->count--;
   12592:	8b 45 08             	mov    0x8(%ebp),%eax
   12595:	8b 40 08             	mov    0x8(%eax),%eax
   12598:	8d 50 ff             	lea    -0x1(%eax),%edx
   1259b:	8b 45 08             	mov    0x8(%ebp),%eax
   1259e:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   125a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   125a4:	c9                   	leave  
   125a5:	c3                   	ret    

000125a6 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   125a6:	55                   	push   %ebp
   125a7:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   125a9:	8b 45 08             	mov    0x8(%ebp),%eax
   125ac:	8b 00                	mov    (%eax),%eax
   125ae:	39 45 0c             	cmp    %eax,0xc(%ebp)
   125b1:	75 0b                	jne    125be <list_remove+0x18>
        list->first = node->next;
   125b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b6:	8b 50 04             	mov    0x4(%eax),%edx
   125b9:	8b 45 08             	mov    0x8(%ebp),%eax
   125bc:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   125be:	8b 45 08             	mov    0x8(%ebp),%eax
   125c1:	8b 40 04             	mov    0x4(%eax),%eax
   125c4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   125c7:	75 0b                	jne    125d4 <list_remove+0x2e>
        list->last = node->pre;
   125c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   125cc:	8b 10                	mov    (%eax),%edx
   125ce:	8b 45 08             	mov    0x8(%ebp),%eax
   125d1:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   125d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   125d7:	8b 00                	mov    (%eax),%eax
   125d9:	85 c0                	test   %eax,%eax
   125db:	74 0e                	je     125eb <list_remove+0x45>
        node->pre->next = node->next;
   125dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   125e0:	8b 00                	mov    (%eax),%eax
   125e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   125e5:	8b 52 04             	mov    0x4(%edx),%edx
   125e8:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   125eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   125ee:	8b 40 04             	mov    0x4(%eax),%eax
   125f1:	85 c0                	test   %eax,%eax
   125f3:	74 0d                	je     12602 <list_remove+0x5c>
        node->next->pre = node->pre;
   125f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f8:	8b 40 04             	mov    0x4(%eax),%eax
   125fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   125fe:	8b 12                	mov    (%edx),%edx
   12600:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12602:	8b 45 0c             	mov    0xc(%ebp),%eax
   12605:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1260c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260f:	8b 50 04             	mov    0x4(%eax),%edx
   12612:	8b 45 0c             	mov    0xc(%ebp),%eax
   12615:	89 10                	mov    %edx,(%eax)
    --list->count;
   12617:	8b 45 08             	mov    0x8(%ebp),%eax
   1261a:	8b 40 08             	mov    0x8(%eax),%eax
   1261d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12620:	8b 45 08             	mov    0x8(%ebp),%eax
   12623:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12626:	8b 45 0c             	mov    0xc(%ebp),%eax
   12629:	5d                   	pop    %ebp
   1262a:	c3                   	ret    

0001262b <inb>:
static inline uint8_t inb(uint16_t port) {
   1262b:	55                   	push   %ebp
   1262c:	89 e5                	mov    %esp,%ebp
   1262e:	83 ec 14             	sub    $0x14,%esp
   12631:	8b 45 08             	mov    0x8(%ebp),%eax
   12634:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12638:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1263c:	89 c2                	mov    %eax,%edx
   1263e:	ec                   	in     (%dx),%al
   1263f:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12642:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12646:	c9                   	leave  
   12647:	c3                   	ret    

00012648 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12648:	55                   	push   %ebp
   12649:	89 e5                	mov    %esp,%ebp
   1264b:	83 ec 08             	sub    $0x8,%esp
   1264e:	8b 55 08             	mov    0x8(%ebp),%edx
   12651:	8b 45 0c             	mov    0xc(%ebp),%eax
   12654:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12658:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1265b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1265f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12663:	ee                   	out    %al,(%dx)
}
   12664:	90                   	nop
   12665:	c9                   	leave  
   12666:	c3                   	ret    

00012667 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12667:	55                   	push   %ebp
   12668:	89 e5                	mov    %esp,%ebp
   1266a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1266d:	83 ec 0c             	sub    $0xc,%esp
   12670:	68 64 5d 01 00       	push   $0x15d64
   12675:	e8 4c f0 ff ff       	call   116c6 <mutex_init>
   1267a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   1267d:	83 ec 08             	sub    $0x8,%esp
   12680:	6a 00                	push   $0x0
   12682:	68 f9 03 00 00       	push   $0x3f9
   12687:	e8 bc ff ff ff       	call   12648 <outb>
   1268c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1268f:	83 ec 08             	sub    $0x8,%esp
   12692:	68 80 00 00 00       	push   $0x80
   12697:	68 fb 03 00 00       	push   $0x3fb
   1269c:	e8 a7 ff ff ff       	call   12648 <outb>
   126a1:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   126a4:	83 ec 08             	sub    $0x8,%esp
   126a7:	6a 03                	push   $0x3
   126a9:	68 f8 03 00 00       	push   $0x3f8
   126ae:	e8 95 ff ff ff       	call   12648 <outb>
   126b3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   126b6:	83 ec 08             	sub    $0x8,%esp
   126b9:	6a 00                	push   $0x0
   126bb:	68 f9 03 00 00       	push   $0x3f9
   126c0:	e8 83 ff ff ff       	call   12648 <outb>
   126c5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   126c8:	83 ec 08             	sub    $0x8,%esp
   126cb:	6a 03                	push   $0x3
   126cd:	68 fb 03 00 00       	push   $0x3fb
   126d2:	e8 71 ff ff ff       	call   12648 <outb>
   126d7:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   126da:	83 ec 08             	sub    $0x8,%esp
   126dd:	68 c7 00 00 00       	push   $0xc7
   126e2:	68 fa 03 00 00       	push   $0x3fa
   126e7:	e8 5c ff ff ff       	call   12648 <outb>
   126ec:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   126ef:	83 ec 08             	sub    $0x8,%esp
   126f2:	6a 0f                	push   $0xf
   126f4:	68 fc 03 00 00       	push   $0x3fc
   126f9:	e8 4a ff ff ff       	call   12648 <outb>
   126fe:	83 c4 10             	add    $0x10,%esp
}
   12701:	90                   	nop
   12702:	c9                   	leave  
   12703:	c3                   	ret    

00012704 <log_printf>:


void log_printf(const char* fmt, ...) {
   12704:	55                   	push   %ebp
   12705:	89 e5                	mov    %esp,%ebp
   12707:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   1270d:	83 ec 04             	sub    $0x4,%esp
   12710:	68 80 00 00 00       	push   $0x80
   12715:	6a 00                	push   $0x0
   12717:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1271d:	50                   	push   %eax
   1271e:	e8 77 f9 ff ff       	call   1209a <kmemset>
   12723:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12726:	8d 45 0c             	lea    0xc(%ebp),%eax
   12729:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   1272f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12735:	83 ec 04             	sub    $0x4,%esp
   12738:	50                   	push   %eax
   12739:	ff 75 08             	pushl  0x8(%ebp)
   1273c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12742:	50                   	push   %eax
   12743:	e8 54 fb ff ff       	call   1229c <kvsprintf>
   12748:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   1274b:	83 ec 0c             	sub    $0xc,%esp
   1274e:	68 64 5d 01 00       	push   $0x15d64
   12753:	e8 9c ef ff ff       	call   116f4 <mutex_acquire>
   12758:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   1275b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12761:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12764:	eb 3b                	jmp    127a1 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12766:	90                   	nop
   12767:	83 ec 0c             	sub    $0xc,%esp
   1276a:	68 fd 03 00 00       	push   $0x3fd
   1276f:	e8 b7 fe ff ff       	call   1262b <inb>
   12774:	83 c4 10             	add    $0x10,%esp
   12777:	0f b6 c0             	movzbl %al,%eax
   1277a:	83 e0 40             	and    $0x40,%eax
   1277d:	85 c0                	test   %eax,%eax
   1277f:	74 e6                	je     12767 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12781:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12784:	8d 50 01             	lea    0x1(%eax),%edx
   12787:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1278a:	0f b6 00             	movzbl (%eax),%eax
   1278d:	0f b6 c0             	movzbl %al,%eax
   12790:	83 ec 08             	sub    $0x8,%esp
   12793:	50                   	push   %eax
   12794:	68 f8 03 00 00       	push   $0x3f8
   12799:	e8 aa fe ff ff       	call   12648 <outb>
   1279e:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   127a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127a4:	0f b6 00             	movzbl (%eax),%eax
   127a7:	84 c0                	test   %al,%al
   127a9:	75 bb                	jne    12766 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   127ab:	83 ec 08             	sub    $0x8,%esp
   127ae:	6a 0d                	push   $0xd
   127b0:	68 f8 03 00 00       	push   $0x3f8
   127b5:	e8 8e fe ff ff       	call   12648 <outb>
   127ba:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   127bd:	83 ec 08             	sub    $0x8,%esp
   127c0:	6a 0a                	push   $0xa
   127c2:	68 f8 03 00 00       	push   $0x3f8
   127c7:	e8 7c fe ff ff       	call   12648 <outb>
   127cc:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   127cf:	83 ec 0c             	sub    $0xc,%esp
   127d2:	68 64 5d 01 00       	push   $0x15d64
   127d7:	e8 a4 ef ff ff       	call   11780 <mutex_release>
   127dc:	83 c4 10             	add    $0x10,%esp
   127df:	90                   	nop
   127e0:	c9                   	leave  
   127e1:	c3                   	ret    
