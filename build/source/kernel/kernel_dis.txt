
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003190 memsz 0x00003190 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00007f80 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b87  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000608  00012b88  00012b88  00003b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00006f80  00015000  00015000  00005044  2**12
                  ALLOC
  4 .debug_line   00001bba  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000417c  00000000  00000000  00006bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010db  00000000  00000000  0000ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  0000be58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00001104  00000000  00000000  0000bff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00001238  00000000  00000000  0000d110  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012b88 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010368 l     F .text	00000058 addr_alloc_init
000103c0 l     F .text	00000067 addr_alloc_page
00010427 l     F .text	00000062 addr_free_page
00010489 l     F .text	00000066 show_mem_info
000104ef l     F .text	0000003c total_mem_size
0001052b l     F .text	0000009a test_alloc
00012c5c l     O .rodata	00000012 __func__.2200
00014000 l     O .data	00000040 kernel_map.2212
00012c70 l     O .rodata	0000000c __func__.2242
00000000 l    df *ABS*	00000000 task.c
00010935 l     F .text	00000019 list_node_init
0001094e l     F .text	0000000b list_node_next
00010959 l     F .text	0000000b list_size
00010964 l     F .text	0000000a list_first
0001096e l     F .text	00000017 write_tr
00017000 l     O .bss	00000190 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010985 l     F .text	0000012d tss_init
00012d00 l     O .rodata	0000000a __func__.2181
00010bc1 l     F .text	00000005 idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010f5c l     F .text	00000028 lgdt
00010f84 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
000111b5 l     F .text	0000001d inb
000111d2 l     F .text	0000001f outb
000111f1 l     F .text	00000007 cli
000111f8 l     F .text	00000007 sti
000111ff l     F .text	00000028 lidt
00011227 l     F .text	00000007 hlt
0001122e l     F .text	00000010 read_eflags
0001123e l     F .text	0000000b write_eflags
000189c0 l     O .bss	00000400 idt_table
00011249 l     F .text	000000ca dump_core_regs
00011313 l     F .text	0000003e do_default_handler
0001159d l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
000119a1 l     F .text	0000001f outb
00018dc0 l     O .bss	00000004 sys_tick
000119e8 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011a60 l     F .text	0000000b list_size
00011a6b l     F .text	0000000a list_first
00011a75 l     F .text	0000000b list_last
00013134 l     O .rodata	0000000c __func__.2186
00018de0 l     O .bss	000000b4 init_task
00018ea0 l     O .bss	00001000 init_task_stack
00019ea0 l     O .bss	000000b4 first_task
00019f54 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011d72 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00011ef4 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
0001227d l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
000127da l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000129d0 l     F .text	0000001d inb
000129ed l     F .text	0000001f outb
00019f64 l     O .bss	00000014 mutex
00011581 g     F .text	0000001c do_handler_control_protection_exception
00012175 g     F .text	0000003a bitmap_get_bit
00010d15 g     F .text	0000000a task_current
00011389 g     F .text	0000001c do_handler_debug_exception
00011565 g     F .text	0000001c do_handler_virtualization_exception
00011942 g     F .text	0000000b irq_enable_global
00011485 g     F .text	0000001c do_handler_segment_not_present
00010c73 g     F .text	00000034 task_set_ready
000122cb g     F .text	00000070 kstrncpy
000121af g     F .text	0000001b bitmap_is_set
00011b1d g     F .text	0000019c link_test
000113a5 g     F .text	0000001c do_handler_nmi_interrupt
000110d5 g     F .text	0000001e cpu_init
00012a0c g     F .text	0000009d log_init
00011cb9 g     F .text	000000b9 init_main
0001243f g     F .text	00000041 kmemset
0001117c g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
00011825 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
0001233b g     F .text	0000003b kstrlen
000113dd g     F .text	0000001c do_handler_overflow
00010675 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
000114bd g     F .text	0000001c do_handler_general_protection
0001200f g     F .text	00000029 sem_count
000113f9 g     F .text	0000001c do_handler_bound_range_exceed
000120a1 g     F .text	000000d4 bitmap_set_bit
0001144d g     F .text	0000001c do_handler_double_fault
00011ad4 g     F .text	00000049 init_task_entry
000114d9 g     F .text	0000001c do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
0001194d g     F .text	0000002b pic_send_eoi
00010c69 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107cc g     F .text	00000085 memory_create_uvm
00011f22 g     F .text	0000006b sem_wait
000119c0 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
00012810 g     F .text	0000005f list_insert_front
00019f80 g     O .bss	00002000 stack
00010f05 g     F .text	00000057 sys_sleep
00012641 g     F .text	00000163 kvsprintf
00011f8d g     F .text	00000082 sem_notify
00011415 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011a48 g     F .text	00000018 timer_init
00010c2c g     F .text	0000003d task_first_init
0001152d g     F .text	0000001c do_handler_machine_check
00011431 g     F .text	0000001c do_handler_device_not_found
00010ee5 g     F .text	00000020 task_set_wakeup
0001286f g     F .text	00000063 list_insert_back
00011937 g     F .text	0000000b irq_disable_global
00010d1f g     F .text	00000061 sys_sched_yield
0001bf80 g       .bss	00000000 mem_free_start
00011a80 g     F .text	00000054 kernel_init
00011eff g     F .text	00000023 sem_init
0001261d g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00010ca7 g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
000124de g     F .text	0000013f kitoa
00012284 g     F .text	00000047 kstrcpy
00012376 g     F .text	0000007a kstrncmp
00011511 g     F .text	0000001c do_handler_aligment_check
00012480 g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
00011469 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00010eb4 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
000117f0 g     F .text	00000035 irq_install
00011068 g     F .text	0000006d init_gdt
00011978 g     F .text	00000018 irq_enter_protection
00011d7d g     F .text	0000002e mutex_init
000118b0 g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
0001136d g     F .text	0000001c do_handler_divide_error
00012038 g     F .text	00000016 bitmap_byte_count
00010d80 g     F .text	0000005b task_dispatch
00010cd2 g     F .text	00000043 task_next_run
000106fc g     F .text	000000d0 create_kernel_table
000127ed g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
00011351 g     F .text	0000001c do_handler_unknown
00010ba3 g     F .text	0000001e task_switch_from_to
00011630 g     F .text	000001c0 irq_init
00011990 g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00010f9e g     F .text	00000083 segment_desc_set
00013190 g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
0001204e g     F .text	00000053 bitmap_init
00011549 g     F .text	0000001c do_handler_simd_floating_point_exception
000123f0 g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
000121ca g     F .text	000000b3 bitmap_alloc_nbits
00010bc6 g     F .text	00000066 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010ddb g     F .text	000000d9 task_time_tick
00010851 g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
000127a4 g     F .text	00000036 pannic
000114a1 g     F .text	0000001c do_handler_stack_segment_fault
000113c1 g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
000114f5 g     F .text	0000001c do_handler_floating_point_error
00012aa9 g     F .text	000000de log_printf
00010ab2 g     F .text	000000f1 task_init
000128d2 g     F .text	00000079 list_remove_front
00011107 g     F .text	00000075 gdt_alloc_desc
00011e37 g     F .text	000000bd mutex_release
0001294b g     F .text	00000085 list_remove
000110f3 g     F .text	00000014 swtch_to_tss
00011021 g     F .text	00000047 gate_desc_set
00011dab g     F .text	0000008c mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105c5 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 74 1a 00 00       	call   11a80 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 0，所以会直接跳转到 gdt_reload 地址处
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 80 bf 01 00       	mov    $0x1bf80,%esp
    jmp init_main
   10026:	e9 8e 1c 00 00       	jmp    11cb9 <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 15 13 00 00       	call   11351 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 12 13 00 00       	call   1136d <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 0f 13 00 00       	call   11389 <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 0c 13 00 00       	call   113a5 <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 09 13 00 00       	call   113c1 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 06 13 00 00       	call   113dd <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 03 13 00 00       	call   113f9 <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 00 13 00 00       	call   11415 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 fd 12 00 00       	call   11431 <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 fc 12 00 00       	call   1144d <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 fb 12 00 00       	call   11469 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 fa 12 00 00       	call   11485 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 f7 12 00 00       	call   114a1 <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 f6 12 00 00       	call   114bd <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 f5 12 00 00       	call   114d9 <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 f2 12 00 00       	call   114f5 <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 f1 12 00 00       	call   11511 <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 ee 12 00 00       	call   1152d <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 eb 12 00 00       	call   11549 <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 e8 12 00 00       	call   11565 <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 e7 12 00 00       	call   11581 <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 07 17 00 00       	call   119c0 <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <mmu_set_page_dir>:
 */
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}

static inline void mmu_set_page_dir(uint32_t paddr) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1035a:	ff 75 08             	pushl  0x8(%ebp)
   1035d:	e8 9e ff ff ff       	call   10300 <write_cr3>
   10362:	83 c4 04             	add    $0x4,%esp
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	83 ec 0c             	sub    $0xc,%esp
   10374:	50                   	push   %eax
   10375:	e8 03 1a 00 00       	call   11d7d <mutex_init>
   1037a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1037d:	8b 45 08             	mov    0x8(%ebp),%eax
   10380:	8b 55 10             	mov    0x10(%ebp),%edx
   10383:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	8b 55 14             	mov    0x14(%ebp),%edx
   1038c:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	8b 55 18             	mov    0x18(%ebp),%edx
   10395:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	8b 40 20             	mov    0x20(%eax),%eax
   1039e:	ba 00 00 00 00       	mov    $0x0,%edx
   103a3:	f7 75 18             	divl   0x18(%ebp)
   103a6:	89 c2                	mov    %eax,%edx
   103a8:	8b 45 08             	mov    0x8(%ebp),%eax
   103ab:	83 c0 14             	add    $0x14,%eax
   103ae:	6a 00                	push   $0x0
   103b0:	52                   	push   %edx
   103b1:	ff 75 0c             	pushl  0xc(%ebp)
   103b4:	50                   	push   %eax
   103b5:	e8 94 1c 00 00       	call   1204e <bitmap_init>
   103ba:	83 c4 10             	add    $0x10,%esp
}
   103bd:	90                   	nop
   103be:	c9                   	leave  
   103bf:	c3                   	ret    

000103c0 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103cd:	8b 45 08             	mov    0x8(%ebp),%eax
   103d0:	83 ec 0c             	sub    $0xc,%esp
   103d3:	50                   	push   %eax
   103d4:	e8 d2 19 00 00       	call   11dab <mutex_acquire>
   103d9:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	83 c0 14             	add    $0x14,%eax
   103e2:	83 ec 04             	sub    $0x4,%esp
   103e5:	ff 75 0c             	pushl  0xc(%ebp)
   103e8:	6a 00                	push   $0x0
   103ea:	50                   	push   %eax
   103eb:	e8 da 1d 00 00       	call   121ca <bitmap_alloc_nbits>
   103f0:	83 c4 10             	add    $0x10,%esp
   103f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103fa:	78 17                	js     10413 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   103fc:	8b 45 08             	mov    0x8(%ebp),%eax
   103ff:	8b 50 1c             	mov    0x1c(%eax),%edx
   10402:	8b 45 08             	mov    0x8(%ebp),%eax
   10405:	8b 48 24             	mov    0x24(%eax),%ecx
   10408:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1040b:	0f af c1             	imul   %ecx,%eax
   1040e:	01 d0                	add    %edx,%eax
   10410:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	83 ec 0c             	sub    $0xc,%esp
   10419:	50                   	push   %eax
   1041a:	e8 18 1a 00 00       	call   11e37 <mutex_release>
   1041f:	83 c4 10             	add    $0x10,%esp

    return addr;
   10422:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10425:	c9                   	leave  
   10426:	c3                   	ret    

00010427 <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10427:	55                   	push   %ebp
   10428:	89 e5                	mov    %esp,%ebp
   1042a:	53                   	push   %ebx
   1042b:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	83 ec 0c             	sub    $0xc,%esp
   10434:	50                   	push   %eax
   10435:	e8 71 19 00 00       	call   11dab <mutex_acquire>
   1043a:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1043d:	8b 45 08             	mov    0x8(%ebp),%eax
   10440:	8b 40 1c             	mov    0x1c(%eax),%eax
   10443:	8b 55 0c             	mov    0xc(%ebp),%edx
   10446:	89 d1                	mov    %edx,%ecx
   10448:	29 c1                	sub    %eax,%ecx
   1044a:	8b 45 08             	mov    0x8(%ebp),%eax
   1044d:	8b 58 24             	mov    0x24(%eax),%ebx
   10450:	89 c8                	mov    %ecx,%eax
   10452:	ba 00 00 00 00       	mov    $0x0,%edx
   10457:	f7 f3                	div    %ebx
   10459:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   1045c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1045f:	8b 55 08             	mov    0x8(%ebp),%edx
   10462:	83 c2 14             	add    $0x14,%edx
   10465:	6a 00                	push   $0x0
   10467:	ff 75 10             	pushl  0x10(%ebp)
   1046a:	50                   	push   %eax
   1046b:	52                   	push   %edx
   1046c:	e8 30 1c 00 00       	call   120a1 <bitmap_set_bit>
   10471:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	83 ec 0c             	sub    $0xc,%esp
   1047a:	50                   	push   %eax
   1047b:	e8 b7 19 00 00       	call   11e37 <mutex_release>
   10480:	83 c4 10             	add    $0x10,%esp
}
   10483:	90                   	nop
   10484:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10487:	c9                   	leave  
   10488:	c3                   	ret    

00010489 <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   10489:	55                   	push   %ebp
   1048a:	89 e5                	mov    %esp,%ebp
   1048c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1048f:	83 ec 0c             	sub    $0xc,%esp
   10492:	68 88 2b 01 00       	push   $0x12b88
   10497:	e8 0d 26 00 00       	call   12aa9 <log_printf>
   1049c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1049f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104a6:	eb 29                	jmp    104d1 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104a8:	8b 45 08             	mov    0x8(%ebp),%eax
   104ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104ae:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b2:	8b 45 08             	mov    0x8(%ebp),%eax
   104b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104b8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104bb:	52                   	push   %edx
   104bc:	50                   	push   %eax
   104bd:	ff 75 f4             	pushl  -0xc(%ebp)
   104c0:	68 94 2b 01 00       	push   $0x12b94
   104c5:	e8 df 25 00 00       	call   12aa9 <log_printf>
   104ca:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d1:	8b 45 08             	mov    0x8(%ebp),%eax
   104d4:	8b 40 50             	mov    0x50(%eax),%eax
   104d7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104da:	7c cc                	jl     104a8 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104dc:	83 ec 0c             	sub    $0xc,%esp
   104df:	68 a2 2b 01 00       	push   $0x12ba2
   104e4:	e8 c0 25 00 00       	call   12aa9 <log_printf>
   104e9:	83 c4 10             	add    $0x10,%esp
}
   104ec:	90                   	nop
   104ed:	c9                   	leave  
   104ee:	c3                   	ret    

000104ef <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   104ef:	55                   	push   %ebp
   104f0:	89 e5                	mov    %esp,%ebp
   104f2:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10503:	eb 16                	jmp    1051b <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10505:	8b 45 08             	mov    0x8(%ebp),%eax
   10508:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1050b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1050f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10512:	01 d0                	add    %edx,%eax
   10514:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10517:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1051b:	8b 45 08             	mov    0x8(%ebp),%eax
   1051e:	8b 40 50             	mov    0x50(%eax),%eax
   10521:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10524:	7c df                	jl     10505 <total_mem_size+0x16>
    }
    return mem_size;
   10526:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10529:	c9                   	leave  
   1052a:	c3                   	ret    

0001052b <test_alloc>:


static void test_alloc(void) {
   1052b:	55                   	push   %ebp
   1052c:	89 e5                	mov    %esp,%ebp
   1052e:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10531:	83 ec 0c             	sub    $0xc,%esp
   10534:	68 00 10 00 00       	push   $0x1000
   10539:	68 00 00 04 00       	push   $0x40000
   1053e:	68 00 10 00 00       	push   $0x1000
   10543:	8d 45 b8             	lea    -0x48(%ebp),%eax
   10546:	50                   	push   %eax
   10547:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1054a:	50                   	push   %eax
   1054b:	e8 18 fe ff ff       	call   10368 <addr_alloc_init>
   10550:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   10553:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1055a:	eb 2b                	jmp    10587 <test_alloc+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   1055c:	83 ec 08             	sub    $0x8,%esp
   1055f:	6a 02                	push   $0x2
   10561:	8d 45 c0             	lea    -0x40(%ebp),%eax
   10564:	50                   	push   %eax
   10565:	e8 56 fe ff ff       	call   103c0 <addr_alloc_page>
   1056a:	83 c4 10             	add    $0x10,%esp
   1056d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   10570:	83 ec 08             	sub    $0x8,%esp
   10573:	ff 75 e8             	pushl  -0x18(%ebp)
   10576:	68 a4 2b 01 00       	push   $0x12ba4
   1057b:	e8 29 25 00 00       	call   12aa9 <log_printf>
   10580:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10583:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10587:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   1058b:	7e cf                	jle    1055c <test_alloc+0x31>
    }
    uint32_t addr = 0x1000;
   1058d:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   10594:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1059b:	eb 1f                	jmp    105bc <test_alloc+0x91>
        addr += 4096 * 2;
   1059d:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105a4:	83 ec 04             	sub    $0x4,%esp
   105a7:	6a 02                	push   $0x2
   105a9:	ff 75 f0             	pushl  -0x10(%ebp)
   105ac:	8d 45 c0             	lea    -0x40(%ebp),%eax
   105af:	50                   	push   %eax
   105b0:	e8 72 fe ff ff       	call   10427 <addr_free_page>
   105b5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105b8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105bc:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105c0:	7e db                	jle    1059d <test_alloc+0x72>
    }
}
   105c2:	90                   	nop
   105c3:	c9                   	leave  
   105c4:	c3                   	ret    

000105c5 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105c5:	55                   	push   %ebp
   105c6:	89 e5                	mov    %esp,%ebp
   105c8:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105cb:	ff 75 0c             	pushl  0xc(%ebp)
   105ce:	e8 39 fd ff ff       	call   1030c <pde_index>
   105d3:	83 c4 04             	add    $0x4,%esp
   105d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105dd:	8b 45 08             	mov    0x8(%ebp),%eax
   105e0:	01 d0                	add    %edx,%eax
   105e2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   105e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105e8:	0f b6 00             	movzbl (%eax),%eax
   105eb:	83 e0 01             	and    $0x1,%eax
   105ee:	84 c0                	test   %al,%al
   105f0:	74 10                	je     10602 <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   105f2:	ff 75 f0             	pushl  -0x10(%ebp)
   105f5:	e8 26 fd ff ff       	call   10320 <pde_paddr>
   105fa:	83 c4 04             	add    $0x4,%esp
   105fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10600:	eb 57                	jmp    10659 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   10602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10606:	75 07                	jne    1060f <find_pte+0x4a>
            return (pte_t*)0;
   10608:	b8 00 00 00 00       	mov    $0x0,%eax
   1060d:	eb 64                	jmp    10673 <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1060f:	83 ec 08             	sub    $0x8,%esp
   10612:	6a 01                	push   $0x1
   10614:	68 00 50 01 00       	push   $0x15000
   10619:	e8 a2 fd ff ff       	call   103c0 <addr_alloc_page>
   1061e:	83 c4 10             	add    $0x10,%esp
   10621:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   10624:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10628:	75 07                	jne    10631 <find_pte+0x6c>
            return (pte_t*)0;
   1062a:	b8 00 00 00 00       	mov    $0x0,%eax
   1062f:	eb 42                	jmp    10673 <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10631:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10634:	83 c8 07             	or     $0x7,%eax
   10637:	89 c2                	mov    %eax,%edx
   10639:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1063c:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   1063e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10641:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   10644:	83 ec 04             	sub    $0x4,%esp
   10647:	68 00 10 00 00       	push   $0x1000
   1064c:	6a 00                	push   $0x0
   1064e:	ff 75 f4             	pushl  -0xc(%ebp)
   10651:	e8 e9 1d 00 00       	call   1243f <kmemset>
   10656:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   10659:	83 ec 0c             	sub    $0xc,%esp
   1065c:	ff 75 0c             	pushl  0xc(%ebp)
   1065f:	e8 e3 fc ff ff       	call   10347 <pte_index>
   10664:	83 c4 10             	add    $0x10,%esp
   10667:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1066e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10671:	01 d0                	add    %edx,%eax
}
   10673:	c9                   	leave  
   10674:	c3                   	ret    

00010675 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   10675:	55                   	push   %ebp
   10676:	89 e5                	mov    %esp,%ebp
   10678:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   1067b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10682:	eb 6e                	jmp    106f2 <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   10684:	83 ec 04             	sub    $0x4,%esp
   10687:	6a 01                	push   $0x1
   10689:	ff 75 0c             	pushl  0xc(%ebp)
   1068c:	ff 75 08             	pushl  0x8(%ebp)
   1068f:	e8 31 ff ff ff       	call   105c5 <find_pte>
   10694:	83 c4 10             	add    $0x10,%esp
   10697:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   1069a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1069e:	75 07                	jne    106a7 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106a5:	eb 53                	jmp    106fa <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106aa:	0f b6 00             	movzbl (%eax),%eax
   106ad:	83 e0 01             	and    $0x1,%eax
   106b0:	84 c0                	test   %al,%al
   106b2:	74 1c                	je     106d0 <memory_create_map+0x5b>
   106b4:	68 b4 2b 01 00       	push   $0x12bb4
   106b9:	68 5c 2c 01 00       	push   $0x12c5c
   106be:	68 a2 00 00 00       	push   $0xa2
   106c3:	68 c8 2b 01 00       	push   $0x12bc8
   106c8:	e8 d7 20 00 00       	call   127a4 <pannic>
   106cd:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   106d0:	8b 45 10             	mov    0x10(%ebp),%eax
   106d3:	0b 45 18             	or     0x18(%ebp),%eax
   106d6:	83 c8 01             	or     $0x1,%eax
   106d9:	89 c2                	mov    %eax,%edx
   106db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106de:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   106e0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106e7:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106ee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106f5:	3b 45 14             	cmp    0x14(%ebp),%eax
   106f8:	7c 8a                	jl     10684 <memory_create_map+0xf>
    }
}
   106fa:	c9                   	leave  
   106fb:	c3                   	ret    

000106fc <create_kernel_table>:


void create_kernel_table(void) {
   106fc:	55                   	push   %ebp
   106fd:	89 e5                	mov    %esp,%ebp
   106ff:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   10702:	83 ec 04             	sub    $0x4,%esp
   10705:	68 00 10 00 00       	push   $0x1000
   1070a:	6a 00                	push   $0x0
   1070c:	68 00 60 01 00       	push   $0x16000
   10711:	e8 29 1d 00 00       	call   1243f <kmemset>
   10716:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10719:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10720:	e9 98 00 00 00       	jmp    107bd <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10725:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10728:	c1 e0 04             	shl    $0x4,%eax
   1072b:	05 00 40 01 00       	add    $0x14000,%eax
   10730:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10733:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10736:	8b 00                	mov    (%eax),%eax
   10738:	83 ec 08             	sub    $0x8,%esp
   1073b:	68 00 10 00 00       	push   $0x1000
   10740:	50                   	push   %eax
   10741:	e8 ad fb ff ff       	call   102f3 <down2>
   10746:	83 c4 10             	add    $0x10,%esp
   10749:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1074c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074f:	8b 40 04             	mov    0x4(%eax),%eax
   10752:	83 ec 08             	sub    $0x8,%esp
   10755:	68 00 10 00 00       	push   $0x1000
   1075a:	50                   	push   %eax
   1075b:	e8 7c fb ff ff       	call   102dc <up2>
   10760:	83 c4 10             	add    $0x10,%esp
   10763:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	8b 40 08             	mov    0x8(%eax),%eax
   1076c:	83 ec 08             	sub    $0x8,%esp
   1076f:	68 00 10 00 00       	push   $0x1000
   10774:	50                   	push   %eax
   10775:	e8 79 fb ff ff       	call   102f3 <down2>
   1077a:	83 c4 10             	add    $0x10,%esp
   1077d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   10780:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10783:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10786:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1078c:	85 c0                	test   %eax,%eax
   1078e:	0f 48 c2             	cmovs  %edx,%eax
   10791:	c1 f8 0c             	sar    $0xc,%eax
   10794:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   10797:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079a:	8b 48 0c             	mov    0xc(%eax),%ecx
   1079d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107a3:	83 ec 0c             	sub    $0xc,%esp
   107a6:	51                   	push   %ecx
   107a7:	ff 75 e0             	pushl  -0x20(%ebp)
   107aa:	52                   	push   %edx
   107ab:	50                   	push   %eax
   107ac:	68 00 60 01 00       	push   $0x16000
   107b1:	e8 bf fe ff ff       	call   10675 <memory_create_map>
   107b6:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107c0:	83 f8 03             	cmp    $0x3,%eax
   107c3:	0f 86 5c ff ff ff    	jbe    10725 <create_kernel_table+0x29>
    }
}
   107c9:	90                   	nop
   107ca:	c9                   	leave  
   107cb:	c3                   	ret    

000107cc <memory_create_uvm>:

// 创建用户页表
uint32_t memory_create_uvm(void) {
   107cc:	55                   	push   %ebp
   107cd:	89 e5                	mov    %esp,%ebp
   107cf:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   107d2:	83 ec 08             	sub    $0x8,%esp
   107d5:	6a 01                	push   $0x1
   107d7:	68 00 50 01 00       	push   $0x15000
   107dc:	e8 df fb ff ff       	call   103c0 <addr_alloc_page>
   107e1:	83 c4 10             	add    $0x10,%esp
   107e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107eb:	75 07                	jne    107f4 <memory_create_uvm+0x28>
        return 0;
   107ed:	b8 00 00 00 00       	mov    $0x0,%eax
   107f2:	eb 5b                	jmp    1084f <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   107f4:	83 ec 04             	sub    $0x4,%esp
   107f7:	68 00 10 00 00       	push   $0x1000
   107fc:	6a 00                	push   $0x0
   107fe:	ff 75 f0             	pushl  -0x10(%ebp)
   10801:	e8 39 1c 00 00       	call   1243f <kmemset>
   10806:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10809:	83 ec 0c             	sub    $0xc,%esp
   1080c:	68 00 00 00 80       	push   $0x80000000
   10811:	e8 f6 fa ff ff       	call   1030c <pde_index>
   10816:	83 c4 10             	add    $0x10,%esp
   10819:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   1081c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10823:	eb 1f                	jmp    10844 <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10825:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10828:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1082f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10832:	01 c2                	add    %eax,%edx
   10834:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10837:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   1083e:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10840:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10844:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10847:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1084a:	77 d9                	ja     10825 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   1084c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1084f:	c9                   	leave  
   10850:	c3                   	ret    

00010851 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   10851:	55                   	push   %ebp
   10852:	89 e5                	mov    %esp,%ebp
   10854:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10857:	83 ec 0c             	sub    $0xc,%esp
   1085a:	68 0f 2c 01 00       	push   $0x12c0f
   1085f:	e8 45 22 00 00       	call   12aa9 <log_printf>
   10864:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10867:	83 ec 0c             	sub    $0xc,%esp
   1086a:	ff 75 08             	pushl  0x8(%ebp)
   1086d:	e8 17 fc ff ff       	call   10489 <show_mem_info>
   10872:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   10875:	c7 45 f4 80 bf 01 00 	movl   $0x1bf80,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   1087c:	83 ec 0c             	sub    $0xc,%esp
   1087f:	ff 75 08             	pushl  0x8(%ebp)
   10882:	e8 68 fc ff ff       	call   104ef <total_mem_size>
   10887:	83 c4 10             	add    $0x10,%esp
   1088a:	2d 00 00 10 00       	sub    $0x100000,%eax
   1088f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   10892:	83 ec 08             	sub    $0x8,%esp
   10895:	68 00 10 00 00       	push   $0x1000
   1089a:	ff 75 f0             	pushl  -0x10(%ebp)
   1089d:	e8 51 fa ff ff       	call   102f3 <down2>
   108a2:	83 c4 10             	add    $0x10,%esp
   108a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108a8:	83 ec 04             	sub    $0x4,%esp
   108ab:	ff 75 f0             	pushl  -0x10(%ebp)
   108ae:	68 00 00 10 00       	push   $0x100000
   108b3:	68 19 2c 01 00       	push   $0x12c19
   108b8:	e8 ec 21 00 00       	call   12aa9 <log_printf>
   108bd:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108c0:	83 ec 0c             	sub    $0xc,%esp
   108c3:	68 00 10 00 00       	push   $0x1000
   108c8:	ff 75 f0             	pushl  -0x10(%ebp)
   108cb:	68 00 00 10 00       	push   $0x100000
   108d0:	ff 75 f4             	pushl  -0xc(%ebp)
   108d3:	68 00 50 01 00       	push   $0x15000
   108d8:	e8 8b fa ff ff       	call   10368 <addr_alloc_init>
   108dd:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   108e0:	a1 20 50 01 00       	mov    0x15020,%eax
   108e5:	c1 e8 0c             	shr    $0xc,%eax
   108e8:	83 ec 0c             	sub    $0xc,%esp
   108eb:	50                   	push   %eax
   108ec:	e8 47 17 00 00       	call   12038 <bitmap_byte_count>
   108f1:	83 c4 10             	add    $0x10,%esp
   108f4:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   108f7:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   108fe:	76 1c                	jbe    1091c <memory_init+0xcb>
   10900:	68 34 2c 01 00       	push   $0x12c34
   10905:	68 70 2c 01 00       	push   $0x12c70
   1090a:	68 fa 00 00 00       	push   $0xfa
   1090f:	68 c8 2b 01 00       	push   $0x12bc8
   10914:	e8 8b 1e 00 00       	call   127a4 <pannic>
   10919:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   1091c:	e8 db fd ff ff       	call   106fc <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10921:	b8 00 60 01 00       	mov    $0x16000,%eax
   10926:	83 ec 0c             	sub    $0xc,%esp
   10929:	50                   	push   %eax
   1092a:	e8 28 fa ff ff       	call   10357 <mmu_set_page_dir>
   1092f:	83 c4 10             	add    $0x10,%esp
}
   10932:	90                   	nop
   10933:	c9                   	leave  
   10934:	c3                   	ret    

00010935 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10935:	55                   	push   %ebp
   10936:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10938:	8b 45 08             	mov    0x8(%ebp),%eax
   1093b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10941:	8b 45 08             	mov    0x8(%ebp),%eax
   10944:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   1094b:	90                   	nop
   1094c:	5d                   	pop    %ebp
   1094d:	c3                   	ret    

0001094e <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   1094e:	55                   	push   %ebp
   1094f:	89 e5                	mov    %esp,%ebp
    return node->next;
   10951:	8b 45 08             	mov    0x8(%ebp),%eax
   10954:	8b 40 04             	mov    0x4(%eax),%eax
}
   10957:	5d                   	pop    %ebp
   10958:	c3                   	ret    

00010959 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10959:	55                   	push   %ebp
   1095a:	89 e5                	mov    %esp,%ebp
    return list->count;
   1095c:	8b 45 08             	mov    0x8(%ebp),%eax
   1095f:	8b 40 08             	mov    0x8(%eax),%eax
}
   10962:	5d                   	pop    %ebp
   10963:	c3                   	ret    

00010964 <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10964:	55                   	push   %ebp
   10965:	89 e5                	mov    %esp,%ebp
    return list->first;
   10967:	8b 45 08             	mov    0x8(%ebp),%eax
   1096a:	8b 00                	mov    (%eax),%eax
}
   1096c:	5d                   	pop    %ebp
   1096d:	c3                   	ret    

0001096e <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   1096e:	55                   	push   %ebp
   1096f:	89 e5                	mov    %esp,%ebp
   10971:	83 ec 04             	sub    $0x4,%esp
   10974:	8b 45 08             	mov    0x8(%ebp),%eax
   10977:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   1097b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1097f:	0f 00 d8             	ltr    %ax
}
   10982:	90                   	nop
   10983:	c9                   	leave  
   10984:	c3                   	ret    

00010985 <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   10985:	55                   	push   %ebp
   10986:	89 e5                	mov    %esp,%ebp
   10988:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   1098b:	e8 77 07 00 00       	call   11107 <gdt_alloc_desc>
   10990:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   10993:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10997:	79 1a                	jns    109b3 <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10999:	83 ec 0c             	sub    $0xc,%esp
   1099c:	68 7c 2c 01 00       	push   $0x12c7c
   109a1:	e8 03 21 00 00       	call   12aa9 <log_printf>
   109a6:	83 c4 10             	add    $0x10,%esp
        return -1;
   109a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   109ae:	e9 fd 00 00 00       	jmp    10ab0 <tss_init+0x12b>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   109b3:	8b 45 08             	mov    0x8(%ebp),%eax
   109b6:	83 c0 48             	add    $0x48,%eax
   109b9:	68 89 00 00 00       	push   $0x89
   109be:	6a 68                	push   $0x68
   109c0:	50                   	push   %eax
   109c1:	ff 75 f4             	pushl  -0xc(%ebp)
   109c4:	e8 d5 05 00 00       	call   10f9e <segment_desc_set>
   109c9:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   109cc:	8b 45 08             	mov    0x8(%ebp),%eax
   109cf:	83 c0 48             	add    $0x48,%eax
   109d2:	83 ec 04             	sub    $0x4,%esp
   109d5:	6a 68                	push   $0x68
   109d7:	6a 00                	push   $0x0
   109d9:	50                   	push   %eax
   109da:	e8 60 1a 00 00       	call   1243f <kmemset>
   109df:	83 c4 10             	add    $0x10,%esp
    task->tss.eip    = entry;
   109e2:	8b 45 08             	mov    0x8(%ebp),%eax
   109e5:	8b 55 0c             	mov    0xc(%ebp),%edx
   109e8:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   109eb:	8b 45 08             	mov    0x8(%ebp),%eax
   109ee:	8b 55 10             	mov    0x10(%ebp),%edx
   109f1:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   109f7:	8b 45 08             	mov    0x8(%ebp),%eax
   109fa:	8b 55 10             	mov    0x10(%ebp),%edx
   109fd:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10a00:	8b 45 08             	mov    0x8(%ebp),%eax
   10a03:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0d:	8b 50 50             	mov    0x50(%eax),%edx
   10a10:	8b 45 08             	mov    0x8(%ebp),%eax
   10a13:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10a19:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1c:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10a23:	00 00 00 
   10a26:	8b 45 08             	mov    0x8(%ebp),%eax
   10a29:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a32:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10a38:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3b:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10a41:	8b 45 08             	mov    0x8(%ebp),%eax
   10a44:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10a4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4d:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10a53:	8b 45 08             	mov    0x8(%ebp),%eax
   10a56:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = KERNEL_SELECTOR_CS;
   10a5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5f:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10a66:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10a69:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6c:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10a73:	e8 54 fd ff ff       	call   107cc <memory_create_uvm>
   10a78:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (uvm_pgtbl == 0) {
   10a7b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10a7f:	75 15                	jne    10a96 <tss_init+0x111>
        gdt_free_sel(tss_sel);
   10a81:	83 ec 0c             	sub    $0xc,%esp
   10a84:	ff 75 f4             	pushl  -0xc(%ebp)
   10a87:	e8 f0 06 00 00       	call   1117c <gdt_free_sel>
   10a8c:	83 c4 10             	add    $0x10,%esp
        return -1;
   10a8f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a94:	eb 1a                	jmp    10ab0 <tss_init+0x12b>
    }
    task->tss.cr3    = uvm_pgtbl;
   10a96:	8b 45 08             	mov    0x8(%ebp),%eax
   10a99:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10a9c:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10a9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10aa5:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10aab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ab0:	c9                   	leave  
   10ab1:	c3                   	ret    

00010ab2 <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   10ab2:	55                   	push   %ebp
   10ab3:	89 e5                	mov    %esp,%ebp
   10ab5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10ab8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10abc:	75 19                	jne    10ad7 <task_init+0x25>
   10abe:	68 8e 2c 01 00       	push   $0x12c8e
   10ac3:	68 00 2d 01 00       	push   $0x12d00
   10ac8:	6a 31                	push   $0x31
   10aca:	68 a4 2c 01 00       	push   $0x12ca4
   10acf:	e8 d0 1c 00 00       	call   127a4 <pannic>
   10ad4:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   10ad7:	83 ec 04             	sub    $0x4,%esp
   10ada:	ff 75 14             	pushl  0x14(%ebp)
   10add:	ff 75 10             	pushl  0x10(%ebp)
   10ae0:	ff 75 08             	pushl  0x8(%ebp)
   10ae3:	e8 9d fe ff ff       	call   10985 <tss_init>
   10ae8:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10aeb:	8b 45 08             	mov    0x8(%ebp),%eax
   10aee:	83 c0 04             	add    $0x4,%eax
   10af1:	83 ec 04             	sub    $0x4,%esp
   10af4:	6a 20                	push   $0x20
   10af6:	ff 75 0c             	pushl  0xc(%ebp)
   10af9:	50                   	push   %eax
   10afa:	e8 cc 17 00 00       	call   122cb <kstrncpy>
   10aff:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10b02:	8b 45 08             	mov    0x8(%ebp),%eax
   10b05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10b0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b0e:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10b15:	8b 45 08             	mov    0x8(%ebp),%eax
   10b18:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b22:	8b 50 40             	mov    0x40(%eax),%edx
   10b25:	8b 45 08             	mov    0x8(%ebp),%eax
   10b28:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2e:	83 c0 2c             	add    $0x2c,%eax
   10b31:	83 ec 0c             	sub    $0xc,%esp
   10b34:	50                   	push   %eax
   10b35:	e8 fb fd ff ff       	call   10935 <list_node_init>
   10b3a:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b40:	83 c0 24             	add    $0x24,%eax
   10b43:	83 ec 0c             	sub    $0xc,%esp
   10b46:	50                   	push   %eax
   10b47:	e8 e9 fd ff ff       	call   10935 <list_node_init>
   10b4c:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10b4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b52:	83 c0 34             	add    $0x34,%eax
   10b55:	83 ec 0c             	sub    $0xc,%esp
   10b58:	50                   	push   %eax
   10b59:	e8 d7 fd ff ff       	call   10935 <list_node_init>
   10b5e:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10b61:	e8 12 0e 00 00       	call   11978 <irq_enter_protection>
   10b66:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10b69:	83 ec 0c             	sub    $0xc,%esp
   10b6c:	ff 75 08             	pushl  0x8(%ebp)
   10b6f:	e8 ff 00 00 00       	call   10c73 <task_set_ready>
   10b74:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10b77:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7a:	83 c0 2c             	add    $0x2c,%eax
   10b7d:	83 ec 08             	sub    $0x8,%esp
   10b80:	50                   	push   %eax
   10b81:	68 10 70 01 00       	push   $0x17010
   10b86:	e8 e4 1c 00 00       	call   1286f <list_insert_back>
   10b8b:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10b8e:	83 ec 0c             	sub    $0xc,%esp
   10b91:	ff 75 f4             	pushl  -0xc(%ebp)
   10b94:	e8 f7 0d 00 00       	call   11990 <irq_leave_protection>
   10b99:	83 c4 10             	add    $0x10,%esp

    return 0;
   10b9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ba1:	c9                   	leave  
   10ba2:	c3                   	ret    

00010ba3 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10ba3:	55                   	push   %ebp
   10ba4:	89 e5                	mov    %esp,%ebp
   10ba6:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10ba9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bac:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10bb2:	83 ec 0c             	sub    $0xc,%esp
   10bb5:	50                   	push   %eax
   10bb6:	e8 38 05 00 00       	call   110f3 <swtch_to_tss>
   10bbb:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10bbe:	90                   	nop
   10bbf:	c9                   	leave  
   10bc0:	c3                   	ret    

00010bc1 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10bc1:	55                   	push   %ebp
   10bc2:	89 e5                	mov    %esp,%ebp
    while (1) {
   10bc4:	eb fe                	jmp    10bc4 <idle_task_entry+0x3>

00010bc6 <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10bc6:	55                   	push   %ebp
   10bc7:	89 e5                	mov    %esp,%ebp
   10bc9:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10bcc:	83 ec 0c             	sub    $0xc,%esp
   10bcf:	68 04 70 01 00       	push   $0x17004
   10bd4:	e8 14 1c 00 00       	call   127ed <list_init>
   10bd9:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10bdc:	83 ec 0c             	sub    $0xc,%esp
   10bdf:	68 10 70 01 00       	push   $0x17010
   10be4:	e8 04 1c 00 00       	call   127ed <list_init>
   10be9:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10bec:	83 ec 0c             	sub    $0xc,%esp
   10bef:	68 1c 70 01 00       	push   $0x1701c
   10bf4:	e8 f4 1b 00 00       	call   127ed <list_init>
   10bf9:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10bfc:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10c03:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + IDLE_TASK_SIZE);
   10c06:	b8 a0 71 01 00       	mov    $0x171a0,%eax
   10c0b:	05 00 04 00 00       	add    $0x400,%eax
   10c10:	ba c1 0b 01 00       	mov    $0x10bc1,%edx
   10c15:	50                   	push   %eax
   10c16:	52                   	push   %edx
   10c17:	68 e9 2c 01 00       	push   $0x12ce9
   10c1c:	68 dc 70 01 00       	push   $0x170dc
   10c21:	e8 8c fe ff ff       	call   10ab2 <task_init>
   10c26:	83 c4 10             	add    $0x10,%esp
}
   10c29:	90                   	nop
   10c2a:	c9                   	leave  
   10c2b:	c3                   	ret    

00010c2c <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 入口地址entry 和栈指针esp都无所谓的，因为现在已经在使用了
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10c2c:	55                   	push   %ebp
   10c2d:	89 e5                	mov    %esp,%ebp
   10c2f:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", (uint32_t)0, 0);
   10c32:	6a 00                	push   $0x0
   10c34:	6a 00                	push   $0x0
   10c36:	68 f3 2c 01 00       	push   $0x12cf3
   10c3b:	68 28 70 01 00       	push   $0x17028
   10c40:	e8 6d fe ff ff       	call   10ab2 <task_init>
   10c45:	83 c4 10             	add    $0x10,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10c48:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10c4d:	0f b7 c0             	movzwl %ax,%eax
   10c50:	83 ec 0c             	sub    $0xc,%esp
   10c53:	50                   	push   %eax
   10c54:	e8 15 fd ff ff       	call   1096e <write_tr>
   10c59:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10c5c:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10c63:	70 01 00 
}
   10c66:	90                   	nop
   10c67:	c9                   	leave  
   10c68:	c3                   	ret    

00010c69 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10c69:	55                   	push   %ebp
   10c6a:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10c6c:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10c71:	5d                   	pop    %ebp
   10c72:	c3                   	ret    

00010c73 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10c73:	55                   	push   %ebp
   10c74:	89 e5                	mov    %esp,%ebp
   10c76:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10c79:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10c80:	74 22                	je     10ca4 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10c82:	8b 45 08             	mov    0x8(%ebp),%eax
   10c85:	83 c0 24             	add    $0x24,%eax
   10c88:	83 ec 08             	sub    $0x8,%esp
   10c8b:	50                   	push   %eax
   10c8c:	68 04 70 01 00       	push   $0x17004
   10c91:	e8 d9 1b 00 00       	call   1286f <list_insert_back>
   10c96:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10c99:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10ca2:	eb 01                	jmp    10ca5 <task_set_ready+0x32>
        return;
   10ca4:	90                   	nop
}
   10ca5:	c9                   	leave  
   10ca6:	c3                   	ret    

00010ca7 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   10ca7:	55                   	push   %ebp
   10ca8:	89 e5                	mov    %esp,%ebp
   10caa:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10cad:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10cb4:	74 19                	je     10ccf <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb9:	83 c0 24             	add    $0x24,%eax
   10cbc:	83 ec 08             	sub    $0x8,%esp
   10cbf:	50                   	push   %eax
   10cc0:	68 04 70 01 00       	push   $0x17004
   10cc5:	e8 81 1c 00 00       	call   1294b <list_remove>
   10cca:	83 c4 10             	add    $0x10,%esp
   10ccd:	eb 01                	jmp    10cd0 <task_set_blocked+0x29>
        return;
   10ccf:	90                   	nop
}
   10cd0:	c9                   	leave  
   10cd1:	c3                   	ret    

00010cd2 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10cd2:	55                   	push   %ebp
   10cd3:	89 e5                	mov    %esp,%ebp
   10cd5:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   10cd8:	68 04 70 01 00       	push   $0x17004
   10cdd:	e8 77 fc ff ff       	call   10959 <list_size>
   10ce2:	83 c4 04             	add    $0x4,%esp
   10ce5:	85 c0                	test   %eax,%eax
   10ce7:	75 07                	jne    10cf0 <task_next_run+0x1e>
        return &task_manager.idle_task;
   10ce9:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10cee:	eb 23                	jmp    10d13 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   10cf0:	68 04 70 01 00       	push   $0x17004
   10cf5:	e8 6a fc ff ff       	call   10964 <list_first>
   10cfa:	83 c4 04             	add    $0x4,%esp
   10cfd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10d00:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10d04:	74 08                	je     10d0e <task_next_run+0x3c>
   10d06:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d09:	83 e8 24             	sub    $0x24,%eax
   10d0c:	eb 05                	jmp    10d13 <task_next_run+0x41>
   10d0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d13:	c9                   	leave  
   10d14:	c3                   	ret    

00010d15 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   10d15:	55                   	push   %ebp
   10d16:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10d18:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10d1d:	5d                   	pop    %ebp
   10d1e:	c3                   	ret    

00010d1f <sys_sched_yield>:


int sys_sched_yield(void) {
   10d1f:	55                   	push   %ebp
   10d20:	89 e5                	mov    %esp,%ebp
   10d22:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10d25:	e8 4e 0c 00 00       	call   11978 <irq_enter_protection>
   10d2a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   10d2d:	83 ec 0c             	sub    $0xc,%esp
   10d30:	68 04 70 01 00       	push   $0x17004
   10d35:	e8 1f fc ff ff       	call   10959 <list_size>
   10d3a:	83 c4 10             	add    $0x10,%esp
   10d3d:	83 f8 01             	cmp    $0x1,%eax
   10d40:	7e 29                	jle    10d6b <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   10d42:	e8 ce ff ff ff       	call   10d15 <task_current>
   10d47:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   10d4a:	83 ec 0c             	sub    $0xc,%esp
   10d4d:	ff 75 f0             	pushl  -0x10(%ebp)
   10d50:	e8 52 ff ff ff       	call   10ca7 <task_set_blocked>
   10d55:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10d58:	83 ec 0c             	sub    $0xc,%esp
   10d5b:	ff 75 f0             	pushl  -0x10(%ebp)
   10d5e:	e8 10 ff ff ff       	call   10c73 <task_set_ready>
   10d63:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10d66:	e8 15 00 00 00       	call   10d80 <task_dispatch>
    }

    irq_leave_protection(state);
   10d6b:	83 ec 0c             	sub    $0xc,%esp
   10d6e:	ff 75 f4             	pushl  -0xc(%ebp)
   10d71:	e8 1a 0c 00 00       	call   11990 <irq_leave_protection>
   10d76:	83 c4 10             	add    $0x10,%esp

    return 0;
   10d79:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d7e:	c9                   	leave  
   10d7f:	c3                   	ret    

00010d80 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10d80:	55                   	push   %ebp
   10d81:	89 e5                	mov    %esp,%ebp
   10d83:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10d86:	e8 ed 0b 00 00       	call   11978 <irq_enter_protection>
   10d8b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10d8e:	e8 3f ff ff ff       	call   10cd2 <task_next_run>
   10d93:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10d96:	a1 00 70 01 00       	mov    0x17000,%eax
   10d9b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10d9e:	74 2a                	je     10dca <task_dispatch+0x4a>
        task_t* from = task_current();
   10da0:	e8 70 ff ff ff       	call   10d15 <task_current>
   10da5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10da8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dab:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   10db0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10db3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10db9:	83 ec 08             	sub    $0x8,%esp
   10dbc:	ff 75 f0             	pushl  -0x10(%ebp)
   10dbf:	ff 75 ec             	pushl  -0x14(%ebp)
   10dc2:	e8 dc fd ff ff       	call   10ba3 <task_switch_from_to>
   10dc7:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10dca:	83 ec 0c             	sub    $0xc,%esp
   10dcd:	ff 75 f4             	pushl  -0xc(%ebp)
   10dd0:	e8 bb 0b 00 00       	call   11990 <irq_leave_protection>
   10dd5:	83 c4 10             	add    $0x10,%esp
}
   10dd8:	90                   	nop
   10dd9:	c9                   	leave  
   10dda:	c3                   	ret    

00010ddb <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10ddb:	55                   	push   %ebp
   10ddc:	89 e5                	mov    %esp,%ebp
   10dde:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10de1:	e8 2f ff ff ff       	call   10d15 <task_current>
   10de6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   10de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dec:	8b 40 44             	mov    0x44(%eax),%eax
   10def:	8d 50 ff             	lea    -0x1(%eax),%edx
   10df2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10df5:	89 50 44             	mov    %edx,0x44(%eax)
   10df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dfb:	8b 40 44             	mov    0x44(%eax),%eax
   10dfe:	85 c0                	test   %eax,%eax
   10e00:	75 2d                	jne    10e2f <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   10e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e05:	8b 50 40             	mov    0x40(%eax),%edx
   10e08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e0b:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   10e0e:	83 ec 0c             	sub    $0xc,%esp
   10e11:	ff 75 f0             	pushl  -0x10(%ebp)
   10e14:	e8 8e fe ff ff       	call   10ca7 <task_set_blocked>
   10e19:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10e1c:	83 ec 0c             	sub    $0xc,%esp
   10e1f:	ff 75 f0             	pushl  -0x10(%ebp)
   10e22:	e8 4c fe ff ff       	call   10c73 <task_set_ready>
   10e27:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10e2a:	e8 51 ff ff ff       	call   10d80 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   10e2f:	83 ec 0c             	sub    $0xc,%esp
   10e32:	68 1c 70 01 00       	push   $0x1701c
   10e37:	e8 28 fb ff ff       	call   10964 <list_first>
   10e3c:	83 c4 10             	add    $0x10,%esp
   10e3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10e42:	eb 62                	jmp    10ea6 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   10e44:	83 ec 0c             	sub    $0xc,%esp
   10e47:	ff 75 f4             	pushl  -0xc(%ebp)
   10e4a:	e8 ff fa ff ff       	call   1094e <list_node_next>
   10e4f:	83 c4 10             	add    $0x10,%esp
   10e52:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   10e55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e59:	74 08                	je     10e63 <task_time_tick+0x88>
   10e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e5e:	83 e8 24             	sub    $0x24,%eax
   10e61:	eb 05                	jmp    10e68 <task_time_tick+0x8d>
   10e63:	b8 00 00 00 00       	mov    $0x0,%eax
   10e68:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   10e6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e6e:	8b 40 3c             	mov    0x3c(%eax),%eax
   10e71:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e74:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e77:	89 50 3c             	mov    %edx,0x3c(%eax)
   10e7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e7d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10e80:	85 c0                	test   %eax,%eax
   10e82:	75 1c                	jne    10ea0 <task_time_tick+0xc5>
            task_set_wakeup(task);
   10e84:	83 ec 0c             	sub    $0xc,%esp
   10e87:	ff 75 e8             	pushl  -0x18(%ebp)
   10e8a:	e8 56 00 00 00       	call   10ee5 <task_set_wakeup>
   10e8f:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10e92:	83 ec 0c             	sub    $0xc,%esp
   10e95:	ff 75 e8             	pushl  -0x18(%ebp)
   10e98:	e8 d6 fd ff ff       	call   10c73 <task_set_ready>
   10e9d:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   10ea0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ea3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10ea6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10eaa:	75 98                	jne    10e44 <task_time_tick+0x69>
    }

    task_dispatch();
   10eac:	e8 cf fe ff ff       	call   10d80 <task_dispatch>
}
   10eb1:	90                   	nop
   10eb2:	c9                   	leave  
   10eb3:	c3                   	ret    

00010eb4 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   10eb4:	55                   	push   %ebp
   10eb5:	89 e5                	mov    %esp,%ebp
   10eb7:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10eba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ebe:	74 22                	je     10ee2 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   10ec0:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ec3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec6:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   10ec9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ecc:	83 c0 24             	add    $0x24,%eax
   10ecf:	83 ec 08             	sub    $0x8,%esp
   10ed2:	50                   	push   %eax
   10ed3:	68 1c 70 01 00       	push   $0x1701c
   10ed8:	e8 92 19 00 00       	call   1286f <list_insert_back>
   10edd:	83 c4 10             	add    $0x10,%esp
   10ee0:	eb 01                	jmp    10ee3 <task_set_sleep+0x2f>
        return;
   10ee2:	90                   	nop
}
   10ee3:	c9                   	leave  
   10ee4:	c3                   	ret    

00010ee5 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   10ee5:	55                   	push   %ebp
   10ee6:	89 e5                	mov    %esp,%ebp
   10ee8:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   10eeb:	8b 45 08             	mov    0x8(%ebp),%eax
   10eee:	83 c0 24             	add    $0x24,%eax
   10ef1:	83 ec 08             	sub    $0x8,%esp
   10ef4:	50                   	push   %eax
   10ef5:	68 1c 70 01 00       	push   $0x1701c
   10efa:	e8 4c 1a 00 00       	call   1294b <list_remove>
   10eff:	83 c4 10             	add    $0x10,%esp
}
   10f02:	90                   	nop
   10f03:	c9                   	leave  
   10f04:	c3                   	ret    

00010f05 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   10f05:	55                   	push   %ebp
   10f06:	89 e5                	mov    %esp,%ebp
   10f08:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f0b:	e8 68 0a 00 00       	call   11978 <irq_enter_protection>
   10f10:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   10f13:	a1 00 70 01 00       	mov    0x17000,%eax
   10f18:	83 ec 0c             	sub    $0xc,%esp
   10f1b:	50                   	push   %eax
   10f1c:	e8 86 fd ff ff       	call   10ca7 <task_set_blocked>
   10f21:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   10f24:	8b 45 08             	mov    0x8(%ebp),%eax
   10f27:	83 c0 09             	add    $0x9,%eax
   10f2a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10f2f:	f7 e2                	mul    %edx
   10f31:	c1 ea 03             	shr    $0x3,%edx
   10f34:	a1 00 70 01 00       	mov    0x17000,%eax
   10f39:	83 ec 08             	sub    $0x8,%esp
   10f3c:	52                   	push   %edx
   10f3d:	50                   	push   %eax
   10f3e:	e8 71 ff ff ff       	call   10eb4 <task_set_sleep>
   10f43:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   10f46:	e8 35 fe ff ff       	call   10d80 <task_dispatch>

    irq_leave_protection(state);
   10f4b:	83 ec 0c             	sub    $0xc,%esp
   10f4e:	ff 75 f4             	pushl  -0xc(%ebp)
   10f51:	e8 3a 0a 00 00       	call   11990 <irq_leave_protection>
   10f56:	83 c4 10             	add    $0x10,%esp
   10f59:	90                   	nop
   10f5a:	c9                   	leave  
   10f5b:	c3                   	ret    

00010f5c <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10f5c:	55                   	push   %ebp
   10f5d:	89 e5                	mov    %esp,%ebp
   10f5f:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   10f62:	8b 45 08             	mov    0x8(%ebp),%eax
   10f65:	c1 e8 10             	shr    $0x10,%eax
   10f68:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   10f6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   10f73:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f76:	83 e8 01             	sub    $0x1,%eax
   10f79:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10f7d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10f81:	90                   	nop
   10f82:	c9                   	leave  
   10f83:	c3                   	ret    

00010f84 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10f84:	55                   	push   %ebp
   10f85:	89 e5                	mov    %esp,%ebp
   10f87:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   10f8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f8d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10f90:	8b 45 08             	mov    0x8(%ebp),%eax
   10f93:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10f96:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10f99:	ff 28                	ljmp   *(%eax)
}
   10f9b:	90                   	nop
   10f9c:	c9                   	leave  
   10f9d:	c3                   	ret    

00010f9e <segment_desc_set>:

// selector: 段选择子
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10f9e:	55                   	push   %ebp
   10f9f:	89 e5                	mov    %esp,%ebp
   10fa1:	83 ec 14             	sub    $0x14,%esp
   10fa4:	8b 45 14             	mov    0x14(%ebp),%eax
   10fa7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   10fab:	8b 45 08             	mov    0x8(%ebp),%eax
   10fae:	83 e0 f8             	and    $0xfffffff8,%eax
   10fb1:	05 a0 81 01 00       	add    $0x181a0,%eax
   10fb6:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   10fb9:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10fc0:	76 0f                	jbe    10fd1 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   10fc2:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10fc8:	8b 45 10             	mov    0x10(%ebp),%eax
   10fcb:	c1 e8 0c             	shr    $0xc,%eax
   10fce:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   10fd1:	8b 45 10             	mov    0x10(%ebp),%eax
   10fd4:	89 c2                	mov    %eax,%edx
   10fd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fd9:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   10fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fdf:	89 c2                	mov    %eax,%edx
   10fe1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fe4:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10feb:	c1 e8 10             	shr    $0x10,%eax
   10fee:	89 c2                	mov    %eax,%edx
   10ff0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ff3:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   10ff6:	8b 45 10             	mov    0x10(%ebp),%eax
   10ff9:	c1 e8 10             	shr    $0x10,%eax
   10ffc:	c1 e0 08             	shl    $0x8,%eax
   10fff:	66 25 00 0f          	and    $0xf00,%ax
   11003:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11007:	89 c2                	mov    %eax,%edx
   11009:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1100c:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11010:	8b 45 0c             	mov    0xc(%ebp),%eax
   11013:	c1 e8 18             	shr    $0x18,%eax
   11016:	89 c2                	mov    %eax,%edx
   11018:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1101b:	88 50 07             	mov    %dl,0x7(%eax)
}
   1101e:	90                   	nop
   1101f:	c9                   	leave  
   11020:	c3                   	ret    

00011021 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   11021:	55                   	push   %ebp
   11022:	89 e5                	mov    %esp,%ebp
   11024:	83 ec 08             	sub    $0x8,%esp
   11027:	8b 55 0c             	mov    0xc(%ebp),%edx
   1102a:	8b 45 14             	mov    0x14(%ebp),%eax
   1102d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11031:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   11035:	8b 45 10             	mov    0x10(%ebp),%eax
   11038:	89 c2                	mov    %eax,%edx
   1103a:	8b 45 08             	mov    0x8(%ebp),%eax
   1103d:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11040:	8b 45 08             	mov    0x8(%ebp),%eax
   11043:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11047:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1104b:	8b 45 08             	mov    0x8(%ebp),%eax
   1104e:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11052:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   11056:	8b 45 10             	mov    0x10(%ebp),%eax
   11059:	c1 e8 10             	shr    $0x10,%eax
   1105c:	89 c2                	mov    %eax,%edx
   1105e:	8b 45 08             	mov    0x8(%ebp),%eax
   11061:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   11065:	90                   	nop
   11066:	c9                   	leave  
   11067:	c3                   	ret    

00011068 <init_gdt>:


void init_gdt(void) {
   11068:	55                   	push   %ebp
   11069:	89 e5                	mov    %esp,%ebp
   1106b:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1106e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11075:	eb 19                	jmp    11090 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   11077:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1107a:	c1 e0 03             	shl    $0x3,%eax
   1107d:	6a 00                	push   $0x0
   1107f:	6a 00                	push   $0x0
   11081:	6a 00                	push   $0x0
   11083:	50                   	push   %eax
   11084:	e8 15 ff ff ff       	call   10f9e <segment_desc_set>
   11089:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1108c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11090:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11097:	7e de                	jle    11077 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11099:	68 92 40 00 00       	push   $0x4092
   1109e:	6a ff                	push   $0xffffffff
   110a0:	6a 00                	push   $0x0
   110a2:	6a 10                	push   $0x10
   110a4:	e8 f5 fe ff ff       	call   10f9e <segment_desc_set>
   110a9:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   110ac:	68 9a 40 00 00       	push   $0x409a
   110b1:	6a ff                	push   $0xffffffff
   110b3:	6a 00                	push   $0x0
   110b5:	6a 08                	push   $0x8
   110b7:	e8 e2 fe ff ff       	call   10f9e <segment_desc_set>
   110bc:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   110bf:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   110c4:	68 00 08 00 00       	push   $0x800
   110c9:	50                   	push   %eax
   110ca:	e8 8d fe ff ff       	call   10f5c <lgdt>
   110cf:	83 c4 08             	add    $0x8,%esp
}
   110d2:	90                   	nop
   110d3:	c9                   	leave  
   110d4:	c3                   	ret    

000110d5 <cpu_init>:


void cpu_init(void) {
   110d5:	55                   	push   %ebp
   110d6:	89 e5                	mov    %esp,%ebp
   110d8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   110db:	83 ec 0c             	sub    $0xc,%esp
   110de:	68 a0 89 01 00       	push   $0x189a0
   110e3:	e8 95 0c 00 00       	call   11d7d <mutex_init>
   110e8:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   110eb:	e8 78 ff ff ff       	call   11068 <init_gdt>
}
   110f0:	90                   	nop
   110f1:	c9                   	leave  
   110f2:	c3                   	ret    

000110f3 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   110f3:	55                   	push   %ebp
   110f4:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   110f6:	8b 45 08             	mov    0x8(%ebp),%eax
   110f9:	6a 00                	push   $0x0
   110fb:	50                   	push   %eax
   110fc:	e8 83 fe ff ff       	call   10f84 <far_jump>
   11101:	83 c4 08             	add    $0x8,%esp
}
   11104:	90                   	nop
   11105:	c9                   	leave  
   11106:	c3                   	ret    

00011107 <gdt_alloc_desc>:


int gdt_alloc_desc(void) {
   11107:	55                   	push   %ebp
   11108:	89 e5                	mov    %esp,%ebp
   1110a:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   1110d:	83 ec 0c             	sub    $0xc,%esp
   11110:	68 a0 89 01 00       	push   $0x189a0
   11115:	e8 91 0c 00 00       	call   11dab <mutex_acquire>
   1111a:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1111d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11124:	eb 36                	jmp    1115c <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   11126:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11129:	c1 e0 03             	shl    $0x3,%eax
   1112c:	05 a0 81 01 00       	add    $0x181a0,%eax
   11131:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   11134:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11137:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1113b:	66 85 c0             	test   %ax,%ax
   1113e:	75 18                	jne    11158 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   11140:	83 ec 0c             	sub    $0xc,%esp
   11143:	68 a0 89 01 00       	push   $0x189a0
   11148:	e8 ea 0c 00 00       	call   11e37 <mutex_release>
   1114d:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   11150:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11153:	c1 e0 03             	shl    $0x3,%eax
   11156:	eb 22                	jmp    1117a <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11158:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1115c:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11163:	7e c1                	jle    11126 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11165:	83 ec 0c             	sub    $0xc,%esp
   11168:	68 a0 89 01 00       	push   $0x189a0
   1116d:	e8 c5 0c 00 00       	call   11e37 <mutex_release>
   11172:	83 c4 10             	add    $0x10,%esp

    return -1;
   11175:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1117a:	c9                   	leave  
   1117b:	c3                   	ret    

0001117c <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1117c:	55                   	push   %ebp
   1117d:	89 e5                	mov    %esp,%ebp
   1117f:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   11182:	83 ec 0c             	sub    $0xc,%esp
   11185:	68 a0 89 01 00       	push   $0x189a0
   1118a:	e8 1c 0c 00 00       	call   11dab <mutex_acquire>
   1118f:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   11192:	8b 45 08             	mov    0x8(%ebp),%eax
   11195:	c1 e8 03             	shr    $0x3,%eax
   11198:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   1119f:	00 00 00 

    mutex_release(&mutex);
   111a2:	83 ec 0c             	sub    $0xc,%esp
   111a5:	68 a0 89 01 00       	push   $0x189a0
   111aa:	e8 88 0c 00 00       	call   11e37 <mutex_release>
   111af:	83 c4 10             	add    $0x10,%esp
   111b2:	90                   	nop
   111b3:	c9                   	leave  
   111b4:	c3                   	ret    

000111b5 <inb>:
static inline uint8_t inb(uint16_t port) {
   111b5:	55                   	push   %ebp
   111b6:	89 e5                	mov    %esp,%ebp
   111b8:	83 ec 14             	sub    $0x14,%esp
   111bb:	8b 45 08             	mov    0x8(%ebp),%eax
   111be:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   111c2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   111c6:	89 c2                	mov    %eax,%edx
   111c8:	ec                   	in     (%dx),%al
   111c9:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   111cc:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   111d0:	c9                   	leave  
   111d1:	c3                   	ret    

000111d2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   111d2:	55                   	push   %ebp
   111d3:	89 e5                	mov    %esp,%ebp
   111d5:	83 ec 08             	sub    $0x8,%esp
   111d8:	8b 55 08             	mov    0x8(%ebp),%edx
   111db:	8b 45 0c             	mov    0xc(%ebp),%eax
   111de:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   111e2:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   111e5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   111e9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   111ed:	ee                   	out    %al,(%dx)
}
   111ee:	90                   	nop
   111ef:	c9                   	leave  
   111f0:	c3                   	ret    

000111f1 <cli>:
static inline void cli(void) {
   111f1:	55                   	push   %ebp
   111f2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   111f4:	fa                   	cli    
}
   111f5:	90                   	nop
   111f6:	5d                   	pop    %ebp
   111f7:	c3                   	ret    

000111f8 <sti>:
static inline void sti(void) {
   111f8:	55                   	push   %ebp
   111f9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   111fb:	fb                   	sti    
}
   111fc:	90                   	nop
   111fd:	5d                   	pop    %ebp
   111fe:	c3                   	ret    

000111ff <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   111ff:	55                   	push   %ebp
   11200:	89 e5                	mov    %esp,%ebp
   11202:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11205:	8b 45 08             	mov    0x8(%ebp),%eax
   11208:	c1 e8 10             	shr    $0x10,%eax
   1120b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   1120f:	8b 45 08             	mov    0x8(%ebp),%eax
   11212:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   11216:	8b 45 0c             	mov    0xc(%ebp),%eax
   11219:	83 e8 01             	sub    $0x1,%eax
   1121c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   11220:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11224:	90                   	nop
   11225:	c9                   	leave  
   11226:	c3                   	ret    

00011227 <hlt>:
static inline void hlt(void) {
   11227:	55                   	push   %ebp
   11228:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1122a:	f4                   	hlt    
}
   1122b:	90                   	nop
   1122c:	5d                   	pop    %ebp
   1122d:	c3                   	ret    

0001122e <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   1122e:	55                   	push   %ebp
   1122f:	89 e5                	mov    %esp,%ebp
   11231:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11234:	9c                   	pushf  
   11235:	58                   	pop    %eax
   11236:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11239:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1123c:	c9                   	leave  
   1123d:	c3                   	ret    

0001123e <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   1123e:	55                   	push   %ebp
   1123f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11241:	8b 45 08             	mov    0x8(%ebp),%eax
   11244:	50                   	push   %eax
   11245:	9d                   	popf   
}
   11246:	90                   	nop
   11247:	5d                   	pop    %ebp
   11248:	c3                   	ret    

00011249 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   11249:	55                   	push   %ebp
   1124a:	89 e5                	mov    %esp,%ebp
   1124c:	57                   	push   %edi
   1124d:	56                   	push   %esi
   1124e:	53                   	push   %ebx
   1124f:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11252:	8b 45 08             	mov    0x8(%ebp),%eax
   11255:	8b 50 34             	mov    0x34(%eax),%edx
   11258:	8b 45 08             	mov    0x8(%ebp),%eax
   1125b:	8b 40 30             	mov    0x30(%eax),%eax
   1125e:	83 ec 04             	sub    $0x4,%esp
   11261:	52                   	push   %edx
   11262:	50                   	push   %eax
   11263:	68 0c 2d 01 00       	push   $0x12d0c
   11268:	e8 3c 18 00 00       	call   12aa9 <log_printf>
   1126d:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
   11270:	8b 45 08             	mov    0x8(%ebp),%eax
   11273:	8b 38                	mov    (%eax),%edi
   11275:	8b 45 08             	mov    0x8(%ebp),%eax
   11278:	8b 70 04             	mov    0x4(%eax),%esi
   1127b:	8b 45 08             	mov    0x8(%ebp),%eax
   1127e:	8b 58 0c             	mov    0xc(%eax),%ebx
   11281:	8b 45 08             	mov    0x8(%ebp),%eax
   11284:	8b 48 08             	mov    0x8(%eax),%ecx
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	8b 50 0c             	mov    0xc(%eax),%edx
   1128d:	8b 45 08             	mov    0x8(%ebp),%eax
   11290:	8b 40 3c             	mov    0x3c(%eax),%eax
   11293:	83 ec 04             	sub    $0x4,%esp
   11296:	57                   	push   %edi
   11297:	56                   	push   %esi
   11298:	53                   	push   %ebx
   11299:	51                   	push   %ecx
   1129a:	52                   	push   %edx
   1129b:	50                   	push   %eax
   1129c:	68 24 2d 01 00       	push   $0x12d24
   112a1:	e8 03 18 00 00       	call   12aa9 <log_printf>
   112a6:	83 c4 20             	add    $0x20,%esp
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, frame->esp);
   112a9:	8b 45 08             	mov    0x8(%ebp),%eax
   112ac:	8b 40 1c             	mov    0x1c(%eax),%eax
   112af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   112b2:	8b 45 08             	mov    0x8(%ebp),%eax
   112b5:	8b 78 18             	mov    0x18(%eax),%edi
   112b8:	8b 45 08             	mov    0x8(%ebp),%eax
   112bb:	8b 70 14             	mov    0x14(%eax),%esi
   112be:	8b 45 08             	mov    0x8(%ebp),%eax
   112c1:	8b 58 10             	mov    0x10(%eax),%ebx
   112c4:	8b 45 08             	mov    0x8(%ebp),%eax
   112c7:	8b 48 24             	mov    0x24(%eax),%ecx
   112ca:	8b 45 08             	mov    0x8(%ebp),%eax
   112cd:	8b 50 20             	mov    0x20(%eax),%edx
   112d0:	8b 45 08             	mov    0x8(%ebp),%eax
   112d3:	8b 40 2c             	mov    0x2c(%eax),%eax
   112d6:	ff 75 e4             	pushl  -0x1c(%ebp)
   112d9:	57                   	push   %edi
   112da:	56                   	push   %esi
   112db:	53                   	push   %ebx
   112dc:	51                   	push   %ecx
   112dd:	52                   	push   %edx
   112de:	50                   	push   %eax
   112df:	68 50 2d 01 00       	push   $0x12d50
   112e4:	e8 c0 17 00 00       	call   12aa9 <log_printf>
   112e9:	83 c4 20             	add    $0x20,%esp
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   112ec:	8b 45 08             	mov    0x8(%ebp),%eax
   112ef:	8b 50 40             	mov    0x40(%eax),%edx
   112f2:	8b 45 08             	mov    0x8(%ebp),%eax
   112f5:	8b 40 38             	mov    0x38(%eax),%eax
   112f8:	83 ec 04             	sub    $0x4,%esp
   112fb:	52                   	push   %edx
   112fc:	50                   	push   %eax
   112fd:	68 89 2d 01 00       	push   $0x12d89
   11302:	e8 a2 17 00 00       	call   12aa9 <log_printf>
   11307:	83 c4 10             	add    $0x10,%esp
}
   1130a:	90                   	nop
   1130b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1130e:	5b                   	pop    %ebx
   1130f:	5e                   	pop    %esi
   11310:	5f                   	pop    %edi
   11311:	5d                   	pop    %ebp
   11312:	c3                   	ret    

00011313 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   11313:	55                   	push   %ebp
   11314:	89 e5                	mov    %esp,%ebp
   11316:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   11319:	83 ec 0c             	sub    $0xc,%esp
   1131c:	68 a0 2d 01 00       	push   $0x12da0
   11321:	e8 83 17 00 00       	call   12aa9 <log_printf>
   11326:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   11329:	83 ec 08             	sub    $0x8,%esp
   1132c:	ff 75 0c             	pushl  0xc(%ebp)
   1132f:	68 cb 2d 01 00       	push   $0x12dcb
   11334:	e8 70 17 00 00       	call   12aa9 <log_printf>
   11339:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1133c:	83 ec 0c             	sub    $0xc,%esp
   1133f:	ff 75 08             	pushl  0x8(%ebp)
   11342:	e8 02 ff ff ff       	call   11249 <dump_core_regs>
   11347:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   1134a:	e8 d8 fe ff ff       	call   11227 <hlt>
   1134f:	eb f9                	jmp    1134a <do_default_handler+0x37>

00011351 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11351:	55                   	push   %ebp
   11352:	89 e5                	mov    %esp,%ebp
   11354:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   11357:	83 ec 08             	sub    $0x8,%esp
   1135a:	68 dd 2d 01 00       	push   $0x12ddd
   1135f:	ff 75 08             	pushl  0x8(%ebp)
   11362:	e8 ac ff ff ff       	call   11313 <do_default_handler>
   11367:	83 c4 10             	add    $0x10,%esp
}
   1136a:	90                   	nop
   1136b:	c9                   	leave  
   1136c:	c3                   	ret    

0001136d <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   1136d:	55                   	push   %ebp
   1136e:	89 e5                	mov    %esp,%ebp
   11370:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   11373:	83 ec 08             	sub    $0x8,%esp
   11376:	68 ef 2d 01 00       	push   $0x12def
   1137b:	ff 75 08             	pushl  0x8(%ebp)
   1137e:	e8 90 ff ff ff       	call   11313 <do_default_handler>
   11383:	83 c4 10             	add    $0x10,%esp
}
   11386:	90                   	nop
   11387:	c9                   	leave  
   11388:	c3                   	ret    

00011389 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11389:	55                   	push   %ebp
   1138a:	89 e5                	mov    %esp,%ebp
   1138c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   1138f:	83 ec 08             	sub    $0x8,%esp
   11392:	68 09 2e 01 00       	push   $0x12e09
   11397:	ff 75 08             	pushl  0x8(%ebp)
   1139a:	e8 74 ff ff ff       	call   11313 <do_default_handler>
   1139f:	83 c4 10             	add    $0x10,%esp
}   
   113a2:	90                   	nop
   113a3:	c9                   	leave  
   113a4:	c3                   	ret    

000113a5 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   113a5:	55                   	push   %ebp
   113a6:	89 e5                	mov    %esp,%ebp
   113a8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   113ab:	83 ec 08             	sub    $0x8,%esp
   113ae:	68 24 2e 01 00       	push   $0x12e24
   113b3:	ff 75 08             	pushl  0x8(%ebp)
   113b6:	e8 58 ff ff ff       	call   11313 <do_default_handler>
   113bb:	83 c4 10             	add    $0x10,%esp
}   
   113be:	90                   	nop
   113bf:	c9                   	leave  
   113c0:	c3                   	ret    

000113c1 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   113c1:	55                   	push   %ebp
   113c2:	89 e5                	mov    %esp,%ebp
   113c4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   113c7:	83 ec 08             	sub    $0x8,%esp
   113ca:	68 3d 2e 01 00       	push   $0x12e3d
   113cf:	ff 75 08             	pushl  0x8(%ebp)
   113d2:	e8 3c ff ff ff       	call   11313 <do_default_handler>
   113d7:	83 c4 10             	add    $0x10,%esp
}   
   113da:	90                   	nop
   113db:	c9                   	leave  
   113dc:	c3                   	ret    

000113dd <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   113dd:	55                   	push   %ebp
   113de:	89 e5                	mov    %esp,%ebp
   113e0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   113e3:	83 ec 08             	sub    $0x8,%esp
   113e6:	68 53 2e 01 00       	push   $0x12e53
   113eb:	ff 75 08             	pushl  0x8(%ebp)
   113ee:	e8 20 ff ff ff       	call   11313 <do_default_handler>
   113f3:	83 c4 10             	add    $0x10,%esp
}   
   113f6:	90                   	nop
   113f7:	c9                   	leave  
   113f8:	c3                   	ret    

000113f9 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   113f9:	55                   	push   %ebp
   113fa:	89 e5                	mov    %esp,%ebp
   113fc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   113ff:	83 ec 08             	sub    $0x8,%esp
   11402:	68 67 2e 01 00       	push   $0x12e67
   11407:	ff 75 08             	pushl  0x8(%ebp)
   1140a:	e8 04 ff ff ff       	call   11313 <do_default_handler>
   1140f:	83 c4 10             	add    $0x10,%esp
}   
   11412:	90                   	nop
   11413:	c9                   	leave  
   11414:	c3                   	ret    

00011415 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   11415:	55                   	push   %ebp
   11416:	89 e5                	mov    %esp,%ebp
   11418:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   1141b:	83 ec 08             	sub    $0x8,%esp
   1141e:	68 85 2e 01 00       	push   $0x12e85
   11423:	ff 75 08             	pushl  0x8(%ebp)
   11426:	e8 e8 fe ff ff       	call   11313 <do_default_handler>
   1142b:	83 c4 10             	add    $0x10,%esp
}   
   1142e:	90                   	nop
   1142f:	c9                   	leave  
   11430:	c3                   	ret    

00011431 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11431:	55                   	push   %ebp
   11432:	89 e5                	mov    %esp,%ebp
   11434:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   11437:	83 ec 08             	sub    $0x8,%esp
   1143a:	68 9f 2e 01 00       	push   $0x12e9f
   1143f:	ff 75 08             	pushl  0x8(%ebp)
   11442:	e8 cc fe ff ff       	call   11313 <do_default_handler>
   11447:	83 c4 10             	add    $0x10,%esp
}   
   1144a:	90                   	nop
   1144b:	c9                   	leave  
   1144c:	c3                   	ret    

0001144d <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   1144d:	55                   	push   %ebp
   1144e:	89 e5                	mov    %esp,%ebp
   11450:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11453:	83 ec 08             	sub    $0x8,%esp
   11456:	68 bb 2e 01 00       	push   $0x12ebb
   1145b:	ff 75 08             	pushl  0x8(%ebp)
   1145e:	e8 b0 fe ff ff       	call   11313 <do_default_handler>
   11463:	83 c4 10             	add    $0x10,%esp
}   
   11466:	90                   	nop
   11467:	c9                   	leave  
   11468:	c3                   	ret    

00011469 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11469:	55                   	push   %ebp
   1146a:	89 e5                	mov    %esp,%ebp
   1146c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   1146f:	83 ec 08             	sub    $0x8,%esp
   11472:	68 d3 2e 01 00       	push   $0x12ed3
   11477:	ff 75 08             	pushl  0x8(%ebp)
   1147a:	e8 94 fe ff ff       	call   11313 <do_default_handler>
   1147f:	83 c4 10             	add    $0x10,%esp
}   
   11482:	90                   	nop
   11483:	c9                   	leave  
   11484:	c3                   	ret    

00011485 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   11485:	55                   	push   %ebp
   11486:	89 e5                	mov    %esp,%ebp
   11488:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   1148b:	83 ec 08             	sub    $0x8,%esp
   1148e:	68 ec 2e 01 00       	push   $0x12eec
   11493:	ff 75 08             	pushl  0x8(%ebp)
   11496:	e8 78 fe ff ff       	call   11313 <do_default_handler>
   1149b:	83 c4 10             	add    $0x10,%esp
}   
   1149e:	90                   	nop
   1149f:	c9                   	leave  
   114a0:	c3                   	ret    

000114a1 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   114a1:	55                   	push   %ebp
   114a2:	89 e5                	mov    %esp,%ebp
   114a4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   114a7:	83 ec 08             	sub    $0x8,%esp
   114aa:	68 0c 2f 01 00       	push   $0x12f0c
   114af:	ff 75 08             	pushl  0x8(%ebp)
   114b2:	e8 5c fe ff ff       	call   11313 <do_default_handler>
   114b7:	83 c4 10             	add    $0x10,%esp
}   
   114ba:	90                   	nop
   114bb:	c9                   	leave  
   114bc:	c3                   	ret    

000114bd <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   114bd:	55                   	push   %ebp
   114be:	89 e5                	mov    %esp,%ebp
   114c0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: General protection");
   114c3:	83 ec 08             	sub    $0x8,%esp
   114c6:	68 2b 2f 01 00       	push   $0x12f2b
   114cb:	ff 75 08             	pushl  0x8(%ebp)
   114ce:	e8 40 fe ff ff       	call   11313 <do_default_handler>
   114d3:	83 c4 10             	add    $0x10,%esp
}   
   114d6:	90                   	nop
   114d7:	c9                   	leave  
   114d8:	c3                   	ret    

000114d9 <do_handler_page_fault>:


// Exception: 
void do_handler_page_fault(exception_frame_t* frame) {
   114d9:	55                   	push   %ebp
   114da:	89 e5                	mov    %esp,%ebp
   114dc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Page fault");
   114df:	83 ec 08             	sub    $0x8,%esp
   114e2:	68 49 2f 01 00       	push   $0x12f49
   114e7:	ff 75 08             	pushl  0x8(%ebp)
   114ea:	e8 24 fe ff ff       	call   11313 <do_default_handler>
   114ef:	83 c4 10             	add    $0x10,%esp
}   
   114f2:	90                   	nop
   114f3:	c9                   	leave  
   114f4:	c3                   	ret    

000114f5 <do_handler_floating_point_error>:


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   114f5:	55                   	push   %ebp
   114f6:	89 e5                	mov    %esp,%ebp
   114f8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   114fb:	83 ec 08             	sub    $0x8,%esp
   114fe:	68 60 2f 01 00       	push   $0x12f60
   11503:	ff 75 08             	pushl  0x8(%ebp)
   11506:	e8 08 fe ff ff       	call   11313 <do_default_handler>
   1150b:	83 c4 10             	add    $0x10,%esp
}   
   1150e:	90                   	nop
   1150f:	c9                   	leave  
   11510:	c3                   	ret    

00011511 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11511:	55                   	push   %ebp
   11512:	89 e5                	mov    %esp,%ebp
   11514:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11517:	83 ec 08             	sub    $0x8,%esp
   1151a:	68 80 2f 01 00       	push   $0x12f80
   1151f:	ff 75 08             	pushl  0x8(%ebp)
   11522:	e8 ec fd ff ff       	call   11313 <do_default_handler>
   11527:	83 c4 10             	add    $0x10,%esp
}   
   1152a:	90                   	nop
   1152b:	c9                   	leave  
   1152c:	c3                   	ret    

0001152d <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   1152d:	55                   	push   %ebp
   1152e:	89 e5                	mov    %esp,%ebp
   11530:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11533:	83 ec 08             	sub    $0x8,%esp
   11536:	68 9a 2f 01 00       	push   $0x12f9a
   1153b:	ff 75 08             	pushl  0x8(%ebp)
   1153e:	e8 d0 fd ff ff       	call   11313 <do_default_handler>
   11543:	83 c4 10             	add    $0x10,%esp
}   
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   1154f:	83 ec 08             	sub    $0x8,%esp
   11552:	68 b4 2f 01 00       	push   $0x12fb4
   11557:	ff 75 08             	pushl  0x8(%ebp)
   1155a:	e8 b4 fd ff ff       	call   11313 <do_default_handler>
   1155f:	83 c4 10             	add    $0x10,%esp
}
   11562:	90                   	nop
   11563:	c9                   	leave  
   11564:	c3                   	ret    

00011565 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11565:	55                   	push   %ebp
   11566:	89 e5                	mov    %esp,%ebp
   11568:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   1156b:	83 ec 08             	sub    $0x8,%esp
   1156e:	68 e0 2f 01 00       	push   $0x12fe0
   11573:	ff 75 08             	pushl  0x8(%ebp)
   11576:	e8 98 fd ff ff       	call   11313 <do_default_handler>
   1157b:	83 c4 10             	add    $0x10,%esp
}
   1157e:	90                   	nop
   1157f:	c9                   	leave  
   11580:	c3                   	ret    

00011581 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11581:	55                   	push   %ebp
   11582:	89 e5                	mov    %esp,%ebp
   11584:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11587:	83 ec 08             	sub    $0x8,%esp
   1158a:	68 04 30 01 00       	push   $0x13004
   1158f:	ff 75 08             	pushl  0x8(%ebp)
   11592:	e8 7c fd ff ff       	call   11313 <do_default_handler>
   11597:	83 c4 10             	add    $0x10,%esp
}
   1159a:	90                   	nop
   1159b:	c9                   	leave  
   1159c:	c3                   	ret    

0001159d <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   1159d:	55                   	push   %ebp
   1159e:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   115a0:	6a 11                	push   $0x11
   115a2:	6a 20                	push   $0x20
   115a4:	e8 29 fc ff ff       	call   111d2 <outb>
   115a9:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   115ac:	6a 20                	push   $0x20
   115ae:	6a 21                	push   $0x21
   115b0:	e8 1d fc ff ff       	call   111d2 <outb>
   115b5:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   115b8:	6a 04                	push   $0x4
   115ba:	6a 21                	push   $0x21
   115bc:	e8 11 fc ff ff       	call   111d2 <outb>
   115c1:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   115c4:	6a 01                	push   $0x1
   115c6:	6a 21                	push   $0x21
   115c8:	e8 05 fc ff ff       	call   111d2 <outb>
   115cd:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   115d0:	6a 11                	push   $0x11
   115d2:	68 a0 00 00 00       	push   $0xa0
   115d7:	e8 f6 fb ff ff       	call   111d2 <outb>
   115dc:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   115df:	6a 28                	push   $0x28
   115e1:	68 a1 00 00 00       	push   $0xa1
   115e6:	e8 e7 fb ff ff       	call   111d2 <outb>
   115eb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   115ee:	6a 02                	push   $0x2
   115f0:	68 a1 00 00 00       	push   $0xa1
   115f5:	e8 d8 fb ff ff       	call   111d2 <outb>
   115fa:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   115fd:	6a 01                	push   $0x1
   115ff:	68 a1 00 00 00       	push   $0xa1
   11604:	e8 c9 fb ff ff       	call   111d2 <outb>
   11609:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   1160c:	68 fb 00 00 00       	push   $0xfb
   11611:	6a 21                	push   $0x21
   11613:	e8 ba fb ff ff       	call   111d2 <outb>
   11618:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   1161b:	68 ff 00 00 00       	push   $0xff
   11620:	68 a1 00 00 00       	push   $0xa1
   11625:	e8 a8 fb ff ff       	call   111d2 <outb>
   1162a:	83 c4 08             	add    $0x8,%esp
}
   1162d:	90                   	nop
   1162e:	c9                   	leave  
   1162f:	c3                   	ret    

00011630 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11630:	55                   	push   %ebp
   11631:	89 e5                	mov    %esp,%ebp
   11633:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11636:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1163d:	eb 25                	jmp    11664 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   1163f:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11644:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11647:	c1 e0 03             	shl    $0x3,%eax
   1164a:	05 c0 89 01 00       	add    $0x189c0,%eax
   1164f:	68 00 8e 00 00       	push   $0x8e00
   11654:	52                   	push   %edx
   11655:	6a 08                	push   $0x8
   11657:	50                   	push   %eax
   11658:	e8 c4 f9 ff ff       	call   11021 <gate_desc_set>
   1165d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11660:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11664:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11668:	7e d5                	jle    1163f <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   1166a:	83 ec 08             	sub    $0x8,%esp
   1166d:	68 4a 00 01 00       	push   $0x1004a
   11672:	6a 00                	push   $0x0
   11674:	e8 77 01 00 00       	call   117f0 <irq_install>
   11679:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   1167c:	83 ec 08             	sub    $0x8,%esp
   1167f:	68 69 00 01 00       	push   $0x10069
   11684:	6a 01                	push   $0x1
   11686:	e8 65 01 00 00       	call   117f0 <irq_install>
   1168b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   1168e:	83 ec 08             	sub    $0x8,%esp
   11691:	68 88 00 01 00       	push   $0x10088
   11696:	6a 02                	push   $0x2
   11698:	e8 53 01 00 00       	call   117f0 <irq_install>
   1169d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   116a0:	83 ec 08             	sub    $0x8,%esp
   116a3:	68 a7 00 01 00       	push   $0x100a7
   116a8:	6a 03                	push   $0x3
   116aa:	e8 41 01 00 00       	call   117f0 <irq_install>
   116af:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   116b2:	83 ec 08             	sub    $0x8,%esp
   116b5:	68 c6 00 01 00       	push   $0x100c6
   116ba:	6a 04                	push   $0x4
   116bc:	e8 2f 01 00 00       	call   117f0 <irq_install>
   116c1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   116c4:	83 ec 08             	sub    $0x8,%esp
   116c7:	68 e5 00 01 00       	push   $0x100e5
   116cc:	6a 05                	push   $0x5
   116ce:	e8 1d 01 00 00       	call   117f0 <irq_install>
   116d3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   116d6:	83 ec 08             	sub    $0x8,%esp
   116d9:	68 04 01 01 00       	push   $0x10104
   116de:	6a 06                	push   $0x6
   116e0:	e8 0b 01 00 00       	call   117f0 <irq_install>
   116e5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   116e8:	83 ec 08             	sub    $0x8,%esp
   116eb:	68 23 01 01 00       	push   $0x10123
   116f0:	6a 07                	push   $0x7
   116f2:	e8 f9 00 00 00       	call   117f0 <irq_install>
   116f7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   116fa:	83 ec 08             	sub    $0x8,%esp
   116fd:	68 42 01 01 00       	push   $0x10142
   11702:	6a 08                	push   $0x8
   11704:	e8 e7 00 00 00       	call   117f0 <irq_install>
   11709:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   1170c:	83 ec 08             	sub    $0x8,%esp
   1170f:	68 5f 01 01 00       	push   $0x1015f
   11714:	6a 0a                	push   $0xa
   11716:	e8 d5 00 00 00       	call   117f0 <irq_install>
   1171b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   1171e:	83 ec 08             	sub    $0x8,%esp
   11721:	68 7c 01 01 00       	push   $0x1017c
   11726:	6a 0b                	push   $0xb
   11728:	e8 c3 00 00 00       	call   117f0 <irq_install>
   1172d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11730:	83 ec 08             	sub    $0x8,%esp
   11733:	68 99 01 01 00       	push   $0x10199
   11738:	6a 0c                	push   $0xc
   1173a:	e8 b1 00 00 00       	call   117f0 <irq_install>
   1173f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11742:	83 ec 08             	sub    $0x8,%esp
   11745:	68 b8 01 01 00       	push   $0x101b8
   1174a:	6a 0d                	push   $0xd
   1174c:	e8 9f 00 00 00       	call   117f0 <irq_install>
   11751:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11754:	83 ec 08             	sub    $0x8,%esp
   11757:	68 d5 01 01 00       	push   $0x101d5
   1175c:	6a 0e                	push   $0xe
   1175e:	e8 8d 00 00 00       	call   117f0 <irq_install>
   11763:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11766:	83 ec 08             	sub    $0x8,%esp
   11769:	68 f2 01 01 00       	push   $0x101f2
   1176e:	6a 10                	push   $0x10
   11770:	e8 7b 00 00 00       	call   117f0 <irq_install>
   11775:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11778:	83 ec 08             	sub    $0x8,%esp
   1177b:	68 11 02 01 00       	push   $0x10211
   11780:	6a 11                	push   $0x11
   11782:	e8 69 00 00 00       	call   117f0 <irq_install>
   11787:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   1178a:	83 ec 08             	sub    $0x8,%esp
   1178d:	68 2e 02 01 00       	push   $0x1022e
   11792:	6a 12                	push   $0x12
   11794:	e8 57 00 00 00       	call   117f0 <irq_install>
   11799:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   1179c:	83 ec 08             	sub    $0x8,%esp
   1179f:	68 4d 02 01 00       	push   $0x1024d
   117a4:	6a 13                	push   $0x13
   117a6:	e8 45 00 00 00       	call   117f0 <irq_install>
   117ab:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   117ae:	83 ec 08             	sub    $0x8,%esp
   117b1:	68 6c 02 01 00       	push   $0x1026c
   117b6:	6a 14                	push   $0x14
   117b8:	e8 33 00 00 00       	call   117f0 <irq_install>
   117bd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   117c0:	83 ec 08             	sub    $0x8,%esp
   117c3:	68 8b 02 01 00       	push   $0x1028b
   117c8:	6a 15                	push   $0x15
   117ca:	e8 21 00 00 00       	call   117f0 <irq_install>
   117cf:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   117d2:	b8 c0 89 01 00       	mov    $0x189c0,%eax
   117d7:	83 ec 08             	sub    $0x8,%esp
   117da:	68 00 04 00 00       	push   $0x400
   117df:	50                   	push   %eax
   117e0:	e8 1a fa ff ff       	call   111ff <lidt>
   117e5:	83 c4 10             	add    $0x10,%esp

    init_pic();
   117e8:	e8 b0 fd ff ff       	call   1159d <init_pic>
}
   117ed:	90                   	nop
   117ee:	c9                   	leave  
   117ef:	c3                   	ret    

000117f0 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   117f0:	55                   	push   %ebp
   117f1:	89 e5                	mov    %esp,%ebp
   117f3:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   117f6:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   117fa:	7e 07                	jle    11803 <irq_install+0x13>
        return -1;
   117fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11801:	eb 20                	jmp    11823 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11803:	8b 45 0c             	mov    0xc(%ebp),%eax
   11806:	8b 55 08             	mov    0x8(%ebp),%edx
   11809:	c1 e2 03             	shl    $0x3,%edx
   1180c:	81 c2 c0 89 01 00    	add    $0x189c0,%edx
   11812:	68 00 8e 00 00       	push   $0x8e00
   11817:	50                   	push   %eax
   11818:	6a 08                	push   $0x8
   1181a:	52                   	push   %edx
   1181b:	e8 01 f8 ff ff       	call   11021 <gate_desc_set>
   11820:	83 c4 10             	add    $0x10,%esp
}
   11823:	c9                   	leave  
   11824:	c3                   	ret    

00011825 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11825:	55                   	push   %ebp
   11826:	89 e5                	mov    %esp,%ebp
   11828:	53                   	push   %ebx
   11829:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   1182c:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11830:	7e 78                	jle    118aa <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11832:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11836:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1183a:	7f 32                	jg     1186e <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   1183c:	6a 21                	push   $0x21
   1183e:	e8 72 f9 ff ff       	call   111b5 <inb>
   11843:	83 c4 04             	add    $0x4,%esp
   11846:	89 c2                	mov    %eax,%edx
   11848:	8b 45 08             	mov    0x8(%ebp),%eax
   1184b:	bb 01 00 00 00       	mov    $0x1,%ebx
   11850:	89 c1                	mov    %eax,%ecx
   11852:	d3 e3                	shl    %cl,%ebx
   11854:	89 d8                	mov    %ebx,%eax
   11856:	f7 d0                	not    %eax
   11858:	21 d0                	and    %edx,%eax
   1185a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   1185d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11861:	50                   	push   %eax
   11862:	6a 21                	push   $0x21
   11864:	e8 69 f9 ff ff       	call   111d2 <outb>
   11869:	83 c4 08             	add    $0x8,%esp
   1186c:	eb 3d                	jmp    118ab <irq_enable+0x86>
    } else {
        irq_num -= 8;
   1186e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11872:	68 a1 00 00 00       	push   $0xa1
   11877:	e8 39 f9 ff ff       	call   111b5 <inb>
   1187c:	83 c4 04             	add    $0x4,%esp
   1187f:	89 c2                	mov    %eax,%edx
   11881:	8b 45 08             	mov    0x8(%ebp),%eax
   11884:	bb 01 00 00 00       	mov    $0x1,%ebx
   11889:	89 c1                	mov    %eax,%ecx
   1188b:	d3 e3                	shl    %cl,%ebx
   1188d:	89 d8                	mov    %ebx,%eax
   1188f:	f7 d0                	not    %eax
   11891:	21 d0                	and    %edx,%eax
   11893:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11896:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1189a:	50                   	push   %eax
   1189b:	68 a1 00 00 00       	push   $0xa1
   118a0:	e8 2d f9 ff ff       	call   111d2 <outb>
   118a5:	83 c4 08             	add    $0x8,%esp
   118a8:	eb 01                	jmp    118ab <irq_enable+0x86>
        return;
   118aa:	90                   	nop
    }
}
   118ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   118ae:	c9                   	leave  
   118af:	c3                   	ret    

000118b0 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   118b0:	55                   	push   %ebp
   118b1:	89 e5                	mov    %esp,%ebp
   118b3:	53                   	push   %ebx
   118b4:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   118b7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   118bb:	7e 74                	jle    11931 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   118bd:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   118c1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   118c5:	7f 30                	jg     118f7 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   118c7:	6a 21                	push   $0x21
   118c9:	e8 e7 f8 ff ff       	call   111b5 <inb>
   118ce:	83 c4 04             	add    $0x4,%esp
   118d1:	89 c3                	mov    %eax,%ebx
   118d3:	8b 45 08             	mov    0x8(%ebp),%eax
   118d6:	ba 01 00 00 00       	mov    $0x1,%edx
   118db:	89 c1                	mov    %eax,%ecx
   118dd:	d3 e2                	shl    %cl,%edx
   118df:	89 d0                	mov    %edx,%eax
   118e1:	09 d8                	or     %ebx,%eax
   118e3:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   118e6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   118ea:	50                   	push   %eax
   118eb:	6a 21                	push   $0x21
   118ed:	e8 e0 f8 ff ff       	call   111d2 <outb>
   118f2:	83 c4 08             	add    $0x8,%esp
   118f5:	eb 3b                	jmp    11932 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   118f7:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   118fb:	68 a1 00 00 00       	push   $0xa1
   11900:	e8 b0 f8 ff ff       	call   111b5 <inb>
   11905:	83 c4 04             	add    $0x4,%esp
   11908:	89 c3                	mov    %eax,%ebx
   1190a:	8b 45 08             	mov    0x8(%ebp),%eax
   1190d:	ba 01 00 00 00       	mov    $0x1,%edx
   11912:	89 c1                	mov    %eax,%ecx
   11914:	d3 e2                	shl    %cl,%edx
   11916:	89 d0                	mov    %edx,%eax
   11918:	09 d8                	or     %ebx,%eax
   1191a:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   1191d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11921:	50                   	push   %eax
   11922:	68 a1 00 00 00       	push   $0xa1
   11927:	e8 a6 f8 ff ff       	call   111d2 <outb>
   1192c:	83 c4 08             	add    $0x8,%esp
   1192f:	eb 01                	jmp    11932 <irq_disable+0x82>
        return;
   11931:	90                   	nop
    }
}
   11932:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11935:	c9                   	leave  
   11936:	c3                   	ret    

00011937 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11937:	55                   	push   %ebp
   11938:	89 e5                	mov    %esp,%ebp
    cli();
   1193a:	e8 b2 f8 ff ff       	call   111f1 <cli>
}
   1193f:	90                   	nop
   11940:	5d                   	pop    %ebp
   11941:	c3                   	ret    

00011942 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11942:	55                   	push   %ebp
   11943:	89 e5                	mov    %esp,%ebp
    sti();
   11945:	e8 ae f8 ff ff       	call   111f8 <sti>
}
   1194a:	90                   	nop
   1194b:	5d                   	pop    %ebp
   1194c:	c3                   	ret    

0001194d <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   1194d:	55                   	push   %ebp
   1194e:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11950:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11954:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11958:	7e 0f                	jle    11969 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   1195a:	6a 20                	push   $0x20
   1195c:	68 a0 00 00 00       	push   $0xa0
   11961:	e8 6c f8 ff ff       	call   111d2 <outb>
   11966:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11969:	6a 20                	push   $0x20
   1196b:	6a 20                	push   $0x20
   1196d:	e8 60 f8 ff ff       	call   111d2 <outb>
   11972:	83 c4 08             	add    $0x8,%esp
}
   11975:	90                   	nop
   11976:	c9                   	leave  
   11977:	c3                   	ret    

00011978 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11978:	55                   	push   %ebp
   11979:	89 e5                	mov    %esp,%ebp
   1197b:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   1197e:	e8 ab f8 ff ff       	call   1122e <read_eflags>
   11983:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11986:	e8 ac ff ff ff       	call   11937 <irq_disable_global>
    return state;
   1198b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1198e:	c9                   	leave  
   1198f:	c3                   	ret    

00011990 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11990:	55                   	push   %ebp
   11991:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11993:	ff 75 08             	pushl  0x8(%ebp)
   11996:	e8 a3 f8 ff ff       	call   1123e <write_eflags>
   1199b:	83 c4 04             	add    $0x4,%esp
   1199e:	90                   	nop
   1199f:	c9                   	leave  
   119a0:	c3                   	ret    

000119a1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   119a1:	55                   	push   %ebp
   119a2:	89 e5                	mov    %esp,%ebp
   119a4:	83 ec 08             	sub    $0x8,%esp
   119a7:	8b 55 08             	mov    0x8(%ebp),%edx
   119aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   119ad:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   119b1:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   119b4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   119b8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   119bc:	ee                   	out    %al,(%dx)
}
   119bd:	90                   	nop
   119be:	c9                   	leave  
   119bf:	c3                   	ret    

000119c0 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   119c0:	55                   	push   %ebp
   119c1:	89 e5                	mov    %esp,%ebp
   119c3:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   119c6:	a1 c0 8d 01 00       	mov    0x18dc0,%eax
   119cb:	83 c0 01             	add    $0x1,%eax
   119ce:	a3 c0 8d 01 00       	mov    %eax,0x18dc0

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   119d3:	83 ec 0c             	sub    $0xc,%esp
   119d6:	6a 20                	push   $0x20
   119d8:	e8 70 ff ff ff       	call   1194d <pic_send_eoi>
   119dd:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   119e0:	e8 f6 f3 ff ff       	call   10ddb <task_time_tick>
}
   119e5:	90                   	nop
   119e6:	c9                   	leave  
   119e7:	c3                   	ret    

000119e8 <init_pit>:


static void init_pit(void) {
   119e8:	55                   	push   %ebp
   119e9:	89 e5                	mov    %esp,%ebp
   119eb:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   119ee:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   119f5:	6a 36                	push   $0x36
   119f7:	6a 43                	push   $0x43
   119f9:	e8 a3 ff ff ff       	call   119a1 <outb>
   119fe:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a04:	0f b6 c0             	movzbl %al,%eax
   11a07:	50                   	push   %eax
   11a08:	6a 40                	push   $0x40
   11a0a:	e8 92 ff ff ff       	call   119a1 <outb>
   11a0f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11a12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a15:	c1 e8 08             	shr    $0x8,%eax
   11a18:	0f b6 c0             	movzbl %al,%eax
   11a1b:	50                   	push   %eax
   11a1c:	6a 40                	push   $0x40
   11a1e:	e8 7e ff ff ff       	call   119a1 <outb>
   11a23:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11a26:	83 ec 08             	sub    $0x8,%esp
   11a29:	68 a8 02 01 00       	push   $0x102a8
   11a2e:	6a 20                	push   $0x20
   11a30:	e8 bb fd ff ff       	call   117f0 <irq_install>
   11a35:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11a38:	83 ec 0c             	sub    $0xc,%esp
   11a3b:	6a 20                	push   $0x20
   11a3d:	e8 e3 fd ff ff       	call   11825 <irq_enable>
   11a42:	83 c4 10             	add    $0x10,%esp
}
   11a45:	90                   	nop
   11a46:	c9                   	leave  
   11a47:	c3                   	ret    

00011a48 <timer_init>:

void timer_init(void) {
   11a48:	55                   	push   %ebp
   11a49:	89 e5                	mov    %esp,%ebp
   11a4b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11a4e:	c7 05 c0 8d 01 00 00 	movl   $0x0,0x18dc0
   11a55:	00 00 00 
    init_pit();
   11a58:	e8 8b ff ff ff       	call   119e8 <init_pit>
   11a5d:	90                   	nop
   11a5e:	c9                   	leave  
   11a5f:	c3                   	ret    

00011a60 <list_size>:
static inline int list_size(list_t* list) {
   11a60:	55                   	push   %ebp
   11a61:	89 e5                	mov    %esp,%ebp
    return list->count;
   11a63:	8b 45 08             	mov    0x8(%ebp),%eax
   11a66:	8b 40 08             	mov    0x8(%eax),%eax
}
   11a69:	5d                   	pop    %ebp
   11a6a:	c3                   	ret    

00011a6b <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11a6b:	55                   	push   %ebp
   11a6c:	89 e5                	mov    %esp,%ebp
    return list->first;
   11a6e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a71:	8b 00                	mov    (%eax),%eax
}
   11a73:	5d                   	pop    %ebp
   11a74:	c3                   	ret    

00011a75 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11a75:	55                   	push   %ebp
   11a76:	89 e5                	mov    %esp,%ebp
    return list->last;
   11a78:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7b:	8b 40 04             	mov    0x4(%eax),%eax
}
   11a7e:	5d                   	pop    %ebp
   11a7f:	c3                   	ret    

00011a80 <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   11a80:	55                   	push   %ebp
   11a81:	89 e5                	mov    %esp,%ebp
   11a83:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11a86:	8b 45 08             	mov    0x8(%ebp),%eax
   11a89:	8b 40 50             	mov    0x50(%eax),%eax
   11a8c:	85 c0                	test   %eax,%eax
   11a8e:	75 19                	jne    11aa9 <kernel_init+0x29>
   11a90:	68 2c 30 01 00       	push   $0x1302c
   11a95:	68 34 31 01 00       	push   $0x13134
   11a9a:	6a 1a                	push   $0x1a
   11a9c:	68 50 30 01 00       	push   $0x13050
   11aa1:	e8 fe 0c 00 00       	call   127a4 <pannic>
   11aa6:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11aa9:	90                   	nop

    memory_init(boot_info);
   11aaa:	83 ec 0c             	sub    $0xc,%esp
   11aad:	ff 75 08             	pushl  0x8(%ebp)
   11ab0:	e8 9c ed ff ff       	call   10851 <memory_init>
   11ab5:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11ab8:	e8 18 f6 ff ff       	call   110d5 <cpu_init>

    log_init();
   11abd:	e8 4a 0f 00 00       	call   12a0c <log_init>

    irq_init();
   11ac2:	e8 69 fb ff ff       	call   11630 <irq_init>
    timer_init();
   11ac7:	e8 7c ff ff ff       	call   11a48 <timer_init>

    task_manager_init();
   11acc:	e8 f5 f0 ff ff       	call   10bc6 <task_manager_init>
}
   11ad1:	90                   	nop
   11ad2:	c9                   	leave  
   11ad3:	c3                   	ret    

00011ad4 <init_task_entry>:
static uint32_t init_task_stack[1024];
static task_t first_task;

static sem_t sem;

void init_task_entry(void) {
   11ad4:	55                   	push   %ebp
   11ad5:	89 e5                	mov    %esp,%ebp
   11ad7:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11ada:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("int task: %d", count++);
   11ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ae4:	8d 50 01             	lea    0x1(%eax),%edx
   11ae7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11aea:	83 ec 08             	sub    $0x8,%esp
   11aed:	50                   	push   %eax
   11aee:	68 95 30 01 00       	push   $0x13095
   11af3:	e8 b1 0f 00 00       	call   12aa9 <log_printf>
   11af8:	83 c4 10             	add    $0x10,%esp

        sem_wait(&sem);
   11afb:	83 ec 0c             	sub    $0xc,%esp
   11afe:	68 54 9f 01 00       	push   $0x19f54
   11b03:	e8 1a 04 00 00       	call   11f22 <sem_wait>
   11b08:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(&init_task, task_first_task());
        // sys_sched_yield();
        sys_sleep(1000);
   11b0b:	83 ec 0c             	sub    $0xc,%esp
   11b0e:	68 e8 03 00 00       	push   $0x3e8
   11b13:	e8 ed f3 ff ff       	call   10f05 <sys_sleep>
   11b18:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d", count++);
   11b1b:	eb c4                	jmp    11ae1 <init_task_entry+0xd>

00011b1d <link_test>:
    }
}


void link_test(void) {
   11b1d:	55                   	push   %ebp
   11b1e:	89 e5                	mov    %esp,%ebp
   11b20:	56                   	push   %esi
   11b21:	53                   	push   %ebx
   11b22:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11b25:	83 ec 0c             	sub    $0xc,%esp
   11b28:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b2b:	50                   	push   %eax
   11b2c:	e8 bc 0c 00 00       	call   127ed <list_init>
   11b31:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11b34:	83 ec 0c             	sub    $0xc,%esp
   11b37:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b3a:	50                   	push   %eax
   11b3b:	e8 20 ff ff ff       	call   11a60 <list_size>
   11b40:	83 c4 10             	add    $0x10,%esp
   11b43:	89 c6                	mov    %eax,%esi
   11b45:	83 ec 0c             	sub    $0xc,%esp
   11b48:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b4b:	50                   	push   %eax
   11b4c:	e8 24 ff ff ff       	call   11a75 <list_last>
   11b51:	83 c4 10             	add    $0x10,%esp
   11b54:	89 c3                	mov    %eax,%ebx
   11b56:	83 ec 0c             	sub    $0xc,%esp
   11b59:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b5c:	50                   	push   %eax
   11b5d:	e8 09 ff ff ff       	call   11a6b <list_first>
   11b62:	83 c4 10             	add    $0x10,%esp
   11b65:	56                   	push   %esi
   11b66:	53                   	push   %ebx
   11b67:	50                   	push   %eax
   11b68:	68 a4 30 01 00       	push   $0x130a4
   11b6d:	e8 37 0f 00 00       	call   12aa9 <log_printf>
   11b72:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11b75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b7c:	eb 3b                	jmp    11bb9 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   11b7e:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b84:	c1 e2 03             	shl    $0x3,%edx
   11b87:	01 d0                	add    %edx,%eax
   11b89:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11b8c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11b8f:	83 ec 04             	sub    $0x4,%esp
   11b92:	50                   	push   %eax
   11b93:	ff 75 f4             	pushl  -0xc(%ebp)
   11b96:	68 cd 30 01 00       	push   $0x130cd
   11b9b:	e8 09 0f 00 00       	call   12aa9 <log_printf>
   11ba0:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11ba3:	83 ec 08             	sub    $0x8,%esp
   11ba6:	ff 75 dc             	pushl  -0x24(%ebp)
   11ba9:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11bac:	50                   	push   %eax
   11bad:	e8 5e 0c 00 00       	call   12810 <list_insert_front>
   11bb2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11bb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bb9:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11bbd:	7e bf                	jle    11b7e <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   11bbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bc6:	eb 33                	jmp    11bfb <link_test+0xde>
        list_remove_front(&list);
   11bc8:	83 ec 0c             	sub    $0xc,%esp
   11bcb:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11bce:	50                   	push   %eax
   11bcf:	e8 fe 0c 00 00       	call   128d2 <list_remove_front>
   11bd4:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   11bd7:	83 ec 0c             	sub    $0xc,%esp
   11bda:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11bdd:	50                   	push   %eax
   11bde:	e8 7d fe ff ff       	call   11a60 <list_size>
   11be3:	83 c4 10             	add    $0x10,%esp
   11be6:	83 ec 08             	sub    $0x8,%esp
   11be9:	50                   	push   %eax
   11bea:	68 d5 30 01 00       	push   $0x130d5
   11bef:	e8 b5 0e 00 00       	call   12aa9 <log_printf>
   11bf4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11bf7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11bfb:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11bff:	7e c7                	jle    11bc8 <link_test+0xab>
    }

    list_init(&list);
   11c01:	83 ec 0c             	sub    $0xc,%esp
   11c04:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c07:	50                   	push   %eax
   11c08:	e8 e0 0b 00 00       	call   127ed <list_init>
   11c0d:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11c10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11c17:	eb 3b                	jmp    11c54 <link_test+0x137>
        list_node_t* node = &nodes[i];
   11c19:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11c1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11c1f:	c1 e2 03             	shl    $0x3,%edx
   11c22:	01 d0                	add    %edx,%eax
   11c24:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11c27:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11c2a:	83 ec 04             	sub    $0x4,%esp
   11c2d:	50                   	push   %eax
   11c2e:	ff 75 ec             	pushl  -0x14(%ebp)
   11c31:	68 cd 30 01 00       	push   $0x130cd
   11c36:	e8 6e 0e 00 00       	call   12aa9 <log_printf>
   11c3b:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11c3e:	83 ec 08             	sub    $0x8,%esp
   11c41:	ff 75 e0             	pushl  -0x20(%ebp)
   11c44:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c47:	50                   	push   %eax
   11c48:	e8 22 0c 00 00       	call   1286f <list_insert_back>
   11c4d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11c50:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11c54:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11c58:	7e bf                	jle    11c19 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11c5a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11c61:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11c68:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11c6f:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11c76:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11c79:	83 c0 04             	add    $0x4,%eax
   11c7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11c7f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11c83:	74 08                	je     11c8d <link_test+0x170>
   11c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c88:	83 e8 04             	sub    $0x4,%eax
   11c8b:	eb 05                	jmp    11c92 <link_test+0x175>
   11c8d:	b8 00 00 00 00       	mov    $0x0,%eax
   11c92:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11c95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c98:	8b 00                	mov    (%eax),%eax
   11c9a:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11c9f:	74 10                	je     11cb1 <link_test+0x194>
        log_printf("error!");
   11ca1:	83 ec 0c             	sub    $0xc,%esp
   11ca4:	68 da 30 01 00       	push   $0x130da
   11ca9:	e8 fb 0d 00 00       	call   12aa9 <log_printf>
   11cae:	83 c4 10             	add    $0x10,%esp
    }

}
   11cb1:	90                   	nop
   11cb2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11cb5:	5b                   	pop    %ebx
   11cb6:	5e                   	pop    %esi
   11cb7:	5d                   	pop    %ebp
   11cb8:	c3                   	ret    

00011cb9 <init_main>:


void init_main(void) {
   11cb9:	55                   	push   %ebp
   11cba:	89 e5                	mov    %esp,%ebp
   11cbc:	83 ec 18             	sub    $0x18,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   11cbf:	83 ec 0c             	sub    $0xc,%esp
   11cc2:	68 e1 30 01 00       	push   $0x130e1
   11cc7:	e8 dd 0d 00 00       	call   12aa9 <log_printf>
   11ccc:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   11ccf:	83 ec 04             	sub    $0x4,%esp
   11cd2:	68 f7 30 01 00       	push   $0x130f7
   11cd7:	68 fc 30 01 00       	push   $0x130fc
   11cdc:	68 02 31 01 00       	push   $0x13102
   11ce1:	e8 c3 0d 00 00       	call   12aa9 <log_printf>
   11ce6:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   11ce9:	83 ec 0c             	sub    $0xc,%esp
   11cec:	6a 61                	push   $0x61
   11cee:	68 56 34 12 00       	push   $0x123456
   11cf3:	6a 85                	push   $0xffffff85
   11cf5:	68 39 30 00 00       	push   $0x3039
   11cfa:	68 11 31 01 00       	push   $0x13111
   11cff:	e8 a5 0d 00 00       	call   12aa9 <log_printf>
   11d04:	83 c4 20             	add    $0x20,%esp

    //
    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   11d07:	ba a0 9e 01 00       	mov    $0x19ea0,%edx
   11d0c:	b8 d4 1a 01 00       	mov    $0x11ad4,%eax
   11d11:	52                   	push   %edx
   11d12:	50                   	push   %eax
   11d13:	68 1d 31 01 00       	push   $0x1311d
   11d18:	68 e0 8d 01 00       	push   $0x18de0
   11d1d:	e8 90 ed ff ff       	call   10ab2 <task_init>
   11d22:	83 c4 10             	add    $0x10,%esp
    //

    task_first_init();
   11d25:	e8 02 ef ff ff       	call   10c2c <task_first_init>

    int count = 0;
   11d2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    // link_test();

    irq_enable_global();
   11d31:	e8 0c fc ff ff       	call   11942 <irq_enable_global>

    while (1) {
        log_printf("int main: %d", count++);
   11d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d39:	8d 50 01             	lea    0x1(%eax),%edx
   11d3c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11d3f:	83 ec 08             	sub    $0x8,%esp
   11d42:	50                   	push   %eax
   11d43:	68 27 31 01 00       	push   $0x13127
   11d48:	e8 5c 0d 00 00       	call   12aa9 <log_printf>
   11d4d:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(task_first_task(), &init_task);
        // sys_sched_yield();
        sem_notify(&sem);
   11d50:	83 ec 0c             	sub    $0xc,%esp
   11d53:	68 54 9f 01 00       	push   $0x19f54
   11d58:	e8 30 02 00 00       	call   11f8d <sem_notify>
   11d5d:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11d60:	83 ec 0c             	sub    $0xc,%esp
   11d63:	68 e8 03 00 00       	push   $0x3e8
   11d68:	e8 98 f1 ff ff       	call   10f05 <sys_sleep>
   11d6d:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d", count++);
   11d70:	eb c4                	jmp    11d36 <init_main+0x7d>

00011d72 <list_size>:
static inline int list_size(list_t* list) {
   11d72:	55                   	push   %ebp
   11d73:	89 e5                	mov    %esp,%ebp
    return list->count;
   11d75:	8b 45 08             	mov    0x8(%ebp),%eax
   11d78:	8b 40 08             	mov    0x8(%eax),%eax
}
   11d7b:	5d                   	pop    %ebp
   11d7c:	c3                   	ret    

00011d7d <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t* mutex) {
   11d7d:	55                   	push   %ebp
   11d7e:	89 e5                	mov    %esp,%ebp
   11d80:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11d83:	8b 45 08             	mov    0x8(%ebp),%eax
   11d86:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t*) 0;
   11d8d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11d96:	8b 45 08             	mov    0x8(%ebp),%eax
   11d99:	83 c0 08             	add    $0x8,%eax
   11d9c:	83 ec 0c             	sub    $0xc,%esp
   11d9f:	50                   	push   %eax
   11da0:	e8 48 0a 00 00       	call   127ed <list_init>
   11da5:	83 c4 10             	add    $0x10,%esp
}
   11da8:	90                   	nop
   11da9:	c9                   	leave  
   11daa:	c3                   	ret    

00011dab <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   11dab:	55                   	push   %ebp
   11dac:	89 e5                	mov    %esp,%ebp
   11dae:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11db1:	e8 c2 fb ff ff       	call   11978 <irq_enter_protection>
   11db6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11db9:	e8 57 ef ff ff       	call   10d15 <task_current>
   11dbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11dc1:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc4:	8b 40 04             	mov    0x4(%eax),%eax
   11dc7:	85 c0                	test   %eax,%eax
   11dc9:	75 14                	jne    11ddf <mutex_acquire+0x34>
        mutex->locked_count = 1;
   11dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   11dce:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   11dd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11ddb:	89 10                	mov    %edx,(%eax)
   11ddd:	eb 47                	jmp    11e26 <mutex_acquire+0x7b>
    }
    else if (mutex->owner == curr) {
   11ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   11de2:	8b 00                	mov    (%eax),%eax
   11de4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11de7:	75 11                	jne    11dfa <mutex_acquire+0x4f>
        mutex->locked_count++;
   11de9:	8b 45 08             	mov    0x8(%ebp),%eax
   11dec:	8b 40 04             	mov    0x4(%eax),%eax
   11def:	8d 50 01             	lea    0x1(%eax),%edx
   11df2:	8b 45 08             	mov    0x8(%ebp),%eax
   11df5:	89 50 04             	mov    %edx,0x4(%eax)
   11df8:	eb 2c                	jmp    11e26 <mutex_acquire+0x7b>
    }
    else {
        task_set_blocked(curr);
   11dfa:	83 ec 0c             	sub    $0xc,%esp
   11dfd:	ff 75 f0             	pushl  -0x10(%ebp)
   11e00:	e8 a2 ee ff ff       	call   10ca7 <task_set_blocked>
   11e05:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   11e08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e0b:	8d 50 34             	lea    0x34(%eax),%edx
   11e0e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e11:	83 c0 08             	add    $0x8,%eax
   11e14:	83 ec 08             	sub    $0x8,%esp
   11e17:	52                   	push   %edx
   11e18:	50                   	push   %eax
   11e19:	e8 51 0a 00 00       	call   1286f <list_insert_back>
   11e1e:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11e21:	e8 5a ef ff ff       	call   10d80 <task_dispatch>
    }

    irq_leave_protection(state);
   11e26:	83 ec 0c             	sub    $0xc,%esp
   11e29:	ff 75 f4             	pushl  -0xc(%ebp)
   11e2c:	e8 5f fb ff ff       	call   11990 <irq_leave_protection>
   11e31:	83 c4 10             	add    $0x10,%esp
}
   11e34:	90                   	nop
   11e35:	c9                   	leave  
   11e36:	c3                   	ret    

00011e37 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   11e37:	55                   	push   %ebp
   11e38:	89 e5                	mov    %esp,%ebp
   11e3a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e3d:	e8 36 fb ff ff       	call   11978 <irq_enter_protection>
   11e42:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11e45:	e8 cb ee ff ff       	call   10d15 <task_current>
   11e4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e50:	8b 00                	mov    (%eax),%eax
   11e52:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e55:	0f 85 88 00 00 00    	jne    11ee3 <mutex_release+0xac>
        if (--mutex->locked_count == 0) {
   11e5b:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5e:	8b 40 04             	mov    0x4(%eax),%eax
   11e61:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e64:	8b 45 08             	mov    0x8(%ebp),%eax
   11e67:	89 50 04             	mov    %edx,0x4(%eax)
   11e6a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6d:	8b 40 04             	mov    0x4(%eax),%eax
   11e70:	85 c0                	test   %eax,%eax
   11e72:	75 6f                	jne    11ee3 <mutex_release+0xac>
            mutex->owner = (task_t*)0;
   11e74:	8b 45 08             	mov    0x8(%ebp),%eax
   11e77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_size(&mutex->wait_list)) {
   11e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e80:	83 c0 08             	add    $0x8,%eax
   11e83:	83 ec 0c             	sub    $0xc,%esp
   11e86:	50                   	push   %eax
   11e87:	e8 e6 fe ff ff       	call   11d72 <list_size>
   11e8c:	83 c4 10             	add    $0x10,%esp
   11e8f:	85 c0                	test   %eax,%eax
   11e91:	74 50                	je     11ee3 <mutex_release+0xac>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   11e93:	8b 45 08             	mov    0x8(%ebp),%eax
   11e96:	83 c0 08             	add    $0x8,%eax
   11e99:	83 ec 0c             	sub    $0xc,%esp
   11e9c:	50                   	push   %eax
   11e9d:	e8 30 0a 00 00       	call   128d2 <list_remove_front>
   11ea2:	83 c4 10             	add    $0x10,%esp
   11ea5:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   11ea8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11eac:	74 08                	je     11eb6 <mutex_release+0x7f>
   11eae:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11eb1:	83 e8 34             	sub    $0x34,%eax
   11eb4:	eb 05                	jmp    11ebb <mutex_release+0x84>
   11eb6:	b8 00 00 00 00       	mov    $0x0,%eax
   11ebb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11ebe:	83 ec 0c             	sub    $0xc,%esp
   11ec1:	ff 75 e8             	pushl  -0x18(%ebp)
   11ec4:	e8 aa ed ff ff       	call   10c73 <task_set_ready>
   11ec9:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   11ecc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ecf:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11ed2:	89 10                	mov    %edx,(%eax)
                mutex->locked_count = 1;
   11ed4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed7:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

                task_dispatch();
   11ede:	e8 9d ee ff ff       	call   10d80 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   11ee3:	83 ec 0c             	sub    $0xc,%esp
   11ee6:	ff 75 f4             	pushl  -0xc(%ebp)
   11ee9:	e8 a2 fa ff ff       	call   11990 <irq_leave_protection>
   11eee:	83 c4 10             	add    $0x10,%esp
   11ef1:	90                   	nop
   11ef2:	c9                   	leave  
   11ef3:	c3                   	ret    

00011ef4 <list_size>:
static inline int list_size(list_t* list) {
   11ef4:	55                   	push   %ebp
   11ef5:	89 e5                	mov    %esp,%ebp
    return list->count;
   11ef7:	8b 45 08             	mov    0x8(%ebp),%eax
   11efa:	8b 40 08             	mov    0x8(%eax),%eax
}
   11efd:	5d                   	pop    %ebp
   11efe:	c3                   	ret    

00011eff <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   11eff:	55                   	push   %ebp
   11f00:	89 e5                	mov    %esp,%ebp
   11f02:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11f05:	8b 45 08             	mov    0x8(%ebp),%eax
   11f08:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f0b:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11f0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f10:	83 c0 04             	add    $0x4,%eax
   11f13:	83 ec 0c             	sub    $0xc,%esp
   11f16:	50                   	push   %eax
   11f17:	e8 d1 08 00 00       	call   127ed <list_init>
   11f1c:	83 c4 10             	add    $0x10,%esp
}
   11f1f:	90                   	nop
   11f20:	c9                   	leave  
   11f21:	c3                   	ret    

00011f22 <sem_wait>:


void sem_wait(sem_t* sem) {
   11f22:	55                   	push   %ebp
   11f23:	89 e5                	mov    %esp,%ebp
   11f25:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   11f28:	e8 4b fa ff ff       	call   11978 <irq_enter_protection>
   11f2d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   11f30:	8b 45 08             	mov    0x8(%ebp),%eax
   11f33:	8b 00                	mov    (%eax),%eax
   11f35:	85 c0                	test   %eax,%eax
   11f37:	7e 0f                	jle    11f48 <sem_wait+0x26>
        sem->count--;
   11f39:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3c:	8b 00                	mov    (%eax),%eax
   11f3e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f41:	8b 45 08             	mov    0x8(%ebp),%eax
   11f44:	89 10                	mov    %edx,(%eax)
   11f46:	eb 34                	jmp    11f7c <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   11f48:	e8 c8 ed ff ff       	call   10d15 <task_current>
   11f4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   11f50:	83 ec 0c             	sub    $0xc,%esp
   11f53:	ff 75 f0             	pushl  -0x10(%ebp)
   11f56:	e8 4c ed ff ff       	call   10ca7 <task_set_blocked>
   11f5b:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   11f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f61:	8d 50 34             	lea    0x34(%eax),%edx
   11f64:	8b 45 08             	mov    0x8(%ebp),%eax
   11f67:	83 c0 04             	add    $0x4,%eax
   11f6a:	83 ec 08             	sub    $0x8,%esp
   11f6d:	52                   	push   %edx
   11f6e:	50                   	push   %eax
   11f6f:	e8 fb 08 00 00       	call   1286f <list_insert_back>
   11f74:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11f77:	e8 04 ee ff ff       	call   10d80 <task_dispatch>
    }

    irq_leave_protection(state);
   11f7c:	83 ec 0c             	sub    $0xc,%esp
   11f7f:	ff 75 f4             	pushl  -0xc(%ebp)
   11f82:	e8 09 fa ff ff       	call   11990 <irq_leave_protection>
   11f87:	83 c4 10             	add    $0x10,%esp
}
   11f8a:	90                   	nop
   11f8b:	c9                   	leave  
   11f8c:	c3                   	ret    

00011f8d <sem_notify>:


void sem_notify(sem_t* sem) {
   11f8d:	55                   	push   %ebp
   11f8e:	89 e5                	mov    %esp,%ebp
   11f90:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11f93:	e8 e0 f9 ff ff       	call   11978 <irq_enter_protection>
   11f98:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   11f9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9e:	83 c0 04             	add    $0x4,%eax
   11fa1:	83 ec 0c             	sub    $0xc,%esp
   11fa4:	50                   	push   %eax
   11fa5:	e8 4a ff ff ff       	call   11ef4 <list_size>
   11faa:	83 c4 10             	add    $0x10,%esp
   11fad:	85 c0                	test   %eax,%eax
   11faf:	74 40                	je     11ff1 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   11fb1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb4:	83 c0 04             	add    $0x4,%eax
   11fb7:	83 ec 0c             	sub    $0xc,%esp
   11fba:	50                   	push   %eax
   11fbb:	e8 12 09 00 00       	call   128d2 <list_remove_front>
   11fc0:	83 c4 10             	add    $0x10,%esp
   11fc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   11fc6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11fca:	74 08                	je     11fd4 <sem_notify+0x47>
   11fcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fcf:	83 e8 34             	sub    $0x34,%eax
   11fd2:	eb 05                	jmp    11fd9 <sem_notify+0x4c>
   11fd4:	b8 00 00 00 00       	mov    $0x0,%eax
   11fd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11fdc:	83 ec 0c             	sub    $0xc,%esp
   11fdf:	ff 75 ec             	pushl  -0x14(%ebp)
   11fe2:	e8 8c ec ff ff       	call   10c73 <task_set_ready>
   11fe7:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11fea:	e8 91 ed ff ff       	call   10d80 <task_dispatch>
   11fef:	eb 0d                	jmp    11ffe <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   11ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff4:	8b 00                	mov    (%eax),%eax
   11ff6:	8d 50 01             	lea    0x1(%eax),%edx
   11ff9:	8b 45 08             	mov    0x8(%ebp),%eax
   11ffc:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   11ffe:	83 ec 0c             	sub    $0xc,%esp
   12001:	ff 75 f4             	pushl  -0xc(%ebp)
   12004:	e8 87 f9 ff ff       	call   11990 <irq_leave_protection>
   12009:	83 c4 10             	add    $0x10,%esp
}
   1200c:	90                   	nop
   1200d:	c9                   	leave  
   1200e:	c3                   	ret    

0001200f <sem_count>:

int sem_count(sem_t* sem) {
   1200f:	55                   	push   %ebp
   12010:	89 e5                	mov    %esp,%ebp
   12012:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12015:	e8 5e f9 ff ff       	call   11978 <irq_enter_protection>
   1201a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   1201d:	8b 45 08             	mov    0x8(%ebp),%eax
   12020:	8b 00                	mov    (%eax),%eax
   12022:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   12025:	83 ec 0c             	sub    $0xc,%esp
   12028:	ff 75 f4             	pushl  -0xc(%ebp)
   1202b:	e8 60 f9 ff ff       	call   11990 <irq_leave_protection>
   12030:	83 c4 10             	add    $0x10,%esp

    return count;
   12033:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12036:	c9                   	leave  
   12037:	c3                   	ret    

00012038 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   12038:	55                   	push   %ebp
   12039:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   1203b:	8b 45 08             	mov    0x8(%ebp),%eax
   1203e:	83 c0 07             	add    $0x7,%eax
   12041:	8d 50 07             	lea    0x7(%eax),%edx
   12044:	85 c0                	test   %eax,%eax
   12046:	0f 48 c2             	cmovs  %edx,%eax
   12049:	c1 f8 03             	sar    $0x3,%eax
}
   1204c:	5d                   	pop    %ebp
   1204d:	c3                   	ret    

0001204e <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   1204e:	55                   	push   %ebp
   1204f:	89 e5                	mov    %esp,%ebp
   12051:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   12054:	8b 45 08             	mov    0x8(%ebp),%eax
   12057:	8b 55 10             	mov    0x10(%ebp),%edx
   1205a:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1205c:	8b 45 08             	mov    0x8(%ebp),%eax
   1205f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12062:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   12065:	8b 45 08             	mov    0x8(%ebp),%eax
   12068:	8b 00                	mov    (%eax),%eax
   1206a:	50                   	push   %eax
   1206b:	e8 c8 ff ff ff       	call   12038 <bitmap_byte_count>
   12070:	83 c4 04             	add    $0x4,%esp
   12073:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12076:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1207a:	74 07                	je     12083 <bitmap_init+0x35>
   1207c:	ba ff 00 00 00       	mov    $0xff,%edx
   12081:	eb 05                	jmp    12088 <bitmap_init+0x3a>
   12083:	ba 00 00 00 00       	mov    $0x0,%edx
   12088:	8b 45 08             	mov    0x8(%ebp),%eax
   1208b:	8b 40 04             	mov    0x4(%eax),%eax
   1208e:	83 ec 04             	sub    $0x4,%esp
   12091:	ff 75 f4             	pushl  -0xc(%ebp)
   12094:	52                   	push   %edx
   12095:	50                   	push   %eax
   12096:	e8 a4 03 00 00       	call   1243f <kmemset>
   1209b:	83 c4 10             	add    $0x10,%esp
}
   1209e:	90                   	nop
   1209f:	c9                   	leave  
   120a0:	c3                   	ret    

000120a1 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   120a1:	55                   	push   %ebp
   120a2:	89 e5                	mov    %esp,%ebp
   120a4:	56                   	push   %esi
   120a5:	53                   	push   %ebx
   120a6:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   120a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   120b0:	e9 a2 00 00 00       	jmp    12157 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   120b5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   120b9:	74 4a                	je     12105 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   120bb:	8b 45 08             	mov    0x8(%ebp),%eax
   120be:	8b 50 04             	mov    0x4(%eax),%edx
   120c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   120c4:	8d 48 07             	lea    0x7(%eax),%ecx
   120c7:	85 c0                	test   %eax,%eax
   120c9:	0f 48 c1             	cmovs  %ecx,%eax
   120cc:	c1 f8 03             	sar    $0x3,%eax
   120cf:	89 c3                	mov    %eax,%ebx
   120d1:	89 d8                	mov    %ebx,%eax
   120d3:	01 d0                	add    %edx,%eax
   120d5:	0f b6 00             	movzbl (%eax),%eax
   120d8:	89 c6                	mov    %eax,%esi
   120da:	8b 45 0c             	mov    0xc(%ebp),%eax
   120dd:	99                   	cltd   
   120de:	c1 ea 1d             	shr    $0x1d,%edx
   120e1:	01 d0                	add    %edx,%eax
   120e3:	83 e0 07             	and    $0x7,%eax
   120e6:	29 d0                	sub    %edx,%eax
   120e8:	ba 01 00 00 00       	mov    $0x1,%edx
   120ed:	89 c1                	mov    %eax,%ecx
   120ef:	d3 e2                	shl    %cl,%edx
   120f1:	89 d0                	mov    %edx,%eax
   120f3:	89 f2                	mov    %esi,%edx
   120f5:	09 c2                	or     %eax,%edx
   120f7:	8b 45 08             	mov    0x8(%ebp),%eax
   120fa:	8b 40 04             	mov    0x4(%eax),%eax
   120fd:	89 d9                	mov    %ebx,%ecx
   120ff:	01 c8                	add    %ecx,%eax
   12101:	88 10                	mov    %dl,(%eax)
   12103:	eb 4a                	jmp    1214f <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12105:	8b 45 08             	mov    0x8(%ebp),%eax
   12108:	8b 50 04             	mov    0x4(%eax),%edx
   1210b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1210e:	8d 48 07             	lea    0x7(%eax),%ecx
   12111:	85 c0                	test   %eax,%eax
   12113:	0f 48 c1             	cmovs  %ecx,%eax
   12116:	c1 f8 03             	sar    $0x3,%eax
   12119:	89 c3                	mov    %eax,%ebx
   1211b:	89 d8                	mov    %ebx,%eax
   1211d:	01 d0                	add    %edx,%eax
   1211f:	0f b6 00             	movzbl (%eax),%eax
   12122:	89 c6                	mov    %eax,%esi
   12124:	8b 45 0c             	mov    0xc(%ebp),%eax
   12127:	99                   	cltd   
   12128:	c1 ea 1d             	shr    $0x1d,%edx
   1212b:	01 d0                	add    %edx,%eax
   1212d:	83 e0 07             	and    $0x7,%eax
   12130:	29 d0                	sub    %edx,%eax
   12132:	ba 01 00 00 00       	mov    $0x1,%edx
   12137:	89 c1                	mov    %eax,%ecx
   12139:	d3 e2                	shl    %cl,%edx
   1213b:	89 d0                	mov    %edx,%eax
   1213d:	f7 d0                	not    %eax
   1213f:	89 f2                	mov    %esi,%edx
   12141:	21 c2                	and    %eax,%edx
   12143:	8b 45 08             	mov    0x8(%ebp),%eax
   12146:	8b 40 04             	mov    0x4(%eax),%eax
   12149:	89 d9                	mov    %ebx,%ecx
   1214b:	01 c8                	add    %ecx,%eax
   1214d:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1214f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12153:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12157:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1215a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1215d:	7d 0e                	jge    1216d <bitmap_set_bit+0xcc>
   1215f:	8b 45 08             	mov    0x8(%ebp),%eax
   12162:	8b 00                	mov    (%eax),%eax
   12164:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12167:	0f 8c 48 ff ff ff    	jl     120b5 <bitmap_set_bit+0x14>
        }
    }
}
   1216d:	90                   	nop
   1216e:	83 c4 10             	add    $0x10,%esp
   12171:	5b                   	pop    %ebx
   12172:	5e                   	pop    %esi
   12173:	5d                   	pop    %ebp
   12174:	c3                   	ret    

00012175 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   12175:	55                   	push   %ebp
   12176:	89 e5                	mov    %esp,%ebp
   12178:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   12179:	8b 45 08             	mov    0x8(%ebp),%eax
   1217c:	8b 50 04             	mov    0x4(%eax),%edx
   1217f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12182:	8d 48 07             	lea    0x7(%eax),%ecx
   12185:	85 c0                	test   %eax,%eax
   12187:	0f 48 c1             	cmovs  %ecx,%eax
   1218a:	c1 f8 03             	sar    $0x3,%eax
   1218d:	01 d0                	add    %edx,%eax
   1218f:	0f b6 00             	movzbl (%eax),%eax
   12192:	0f b6 d8             	movzbl %al,%ebx
   12195:	8b 45 0c             	mov    0xc(%ebp),%eax
   12198:	99                   	cltd   
   12199:	c1 ea 1d             	shr    $0x1d,%edx
   1219c:	01 d0                	add    %edx,%eax
   1219e:	83 e0 07             	and    $0x7,%eax
   121a1:	29 d0                	sub    %edx,%eax
   121a3:	89 c1                	mov    %eax,%ecx
   121a5:	d3 fb                	sar    %cl,%ebx
   121a7:	89 d8                	mov    %ebx,%eax
   121a9:	83 e0 01             	and    $0x1,%eax
}
   121ac:	5b                   	pop    %ebx
   121ad:	5d                   	pop    %ebp
   121ae:	c3                   	ret    

000121af <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   121af:	55                   	push   %ebp
   121b0:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   121b2:	ff 75 0c             	pushl  0xc(%ebp)
   121b5:	ff 75 08             	pushl  0x8(%ebp)
   121b8:	e8 b8 ff ff ff       	call   12175 <bitmap_get_bit>
   121bd:	83 c4 08             	add    $0x8,%esp
   121c0:	85 c0                	test   %eax,%eax
   121c2:	0f 95 c0             	setne  %al
   121c5:	0f b6 c0             	movzbl %al,%eax
}
   121c8:	c9                   	leave  
   121c9:	c3                   	ret    

000121ca <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   121ca:	55                   	push   %ebp
   121cb:	89 e5                	mov    %esp,%ebp
   121cd:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   121d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   121d7:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   121de:	e9 85 00 00 00       	jmp    12268 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   121e3:	ff 75 fc             	pushl  -0x4(%ebp)
   121e6:	ff 75 08             	pushl  0x8(%ebp)
   121e9:	e8 87 ff ff ff       	call   12175 <bitmap_get_bit>
   121ee:	83 c4 08             	add    $0x8,%esp
   121f1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   121f4:	74 06                	je     121fc <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   121f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   121fa:	eb 6c                	jmp    12268 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   121fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121ff:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12202:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12209:	eb 27                	jmp    12232 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   1220b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1220e:	8d 50 01             	lea    0x1(%eax),%edx
   12211:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12214:	50                   	push   %eax
   12215:	ff 75 08             	pushl  0x8(%ebp)
   12218:	e8 58 ff ff ff       	call   12175 <bitmap_get_bit>
   1221d:	83 c4 08             	add    $0x8,%esp
   12220:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12223:	74 09                	je     1222e <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12225:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1222c:	eb 16                	jmp    12244 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1222e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12232:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12235:	3b 45 10             	cmp    0x10(%ebp),%eax
   12238:	7d 0a                	jge    12244 <bitmap_alloc_nbits+0x7a>
   1223a:	8b 45 08             	mov    0x8(%ebp),%eax
   1223d:	8b 00                	mov    (%eax),%eax
   1223f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12242:	7c c7                	jl     1220b <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   12244:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12247:	3b 45 10             	cmp    0x10(%ebp),%eax
   1224a:	7c 1c                	jl     12268 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1224c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1224f:	f7 d0                	not    %eax
   12251:	50                   	push   %eax
   12252:	ff 75 10             	pushl  0x10(%ebp)
   12255:	ff 75 f8             	pushl  -0x8(%ebp)
   12258:	ff 75 08             	pushl  0x8(%ebp)
   1225b:	e8 41 fe ff ff       	call   120a1 <bitmap_set_bit>
   12260:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   12263:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12266:	eb 13                	jmp    1227b <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   12268:	8b 45 08             	mov    0x8(%ebp),%eax
   1226b:	8b 00                	mov    (%eax),%eax
   1226d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12270:	0f 8c 6d ff ff ff    	jl     121e3 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   12276:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1227b:	c9                   	leave  
   1227c:	c3                   	ret    

0001227d <hlt>:
static inline void hlt(void) {
   1227d:	55                   	push   %ebp
   1227e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12280:	f4                   	hlt    
}
   12281:	90                   	nop
   12282:	5d                   	pop    %ebp
   12283:	c3                   	ret    

00012284 <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   12284:	55                   	push   %ebp
   12285:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   12287:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1228b:	74 3b                	je     122c8 <kstrcpy+0x44>
   1228d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12291:	74 35                	je     122c8 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   12293:	eb 17                	jmp    122ac <kstrcpy+0x28>
        *dest++ = *src++;
   12295:	8b 55 0c             	mov    0xc(%ebp),%edx
   12298:	8d 42 01             	lea    0x1(%edx),%eax
   1229b:	89 45 0c             	mov    %eax,0xc(%ebp)
   1229e:	8b 45 08             	mov    0x8(%ebp),%eax
   122a1:	8d 48 01             	lea    0x1(%eax),%ecx
   122a4:	89 4d 08             	mov    %ecx,0x8(%ebp)
   122a7:	0f b6 12             	movzbl (%edx),%edx
   122aa:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   122ac:	8b 45 08             	mov    0x8(%ebp),%eax
   122af:	0f b6 00             	movzbl (%eax),%eax
   122b2:	84 c0                	test   %al,%al
   122b4:	74 0a                	je     122c0 <kstrcpy+0x3c>
   122b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   122b9:	0f b6 00             	movzbl (%eax),%eax
   122bc:	84 c0                	test   %al,%al
   122be:	75 d5                	jne    12295 <kstrcpy+0x11>
    }
    *dest = '\0';
   122c0:	8b 45 08             	mov    0x8(%ebp),%eax
   122c3:	c6 00 00             	movb   $0x0,(%eax)
   122c6:	eb 01                	jmp    122c9 <kstrcpy+0x45>
        return;
   122c8:	90                   	nop
}
   122c9:	5d                   	pop    %ebp
   122ca:	c3                   	ret    

000122cb <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   122cb:	55                   	push   %ebp
   122cc:	89 e5                	mov    %esp,%ebp
   122ce:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   122d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122d5:	74 61                	je     12338 <kstrncpy+0x6d>
   122d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122db:	74 5b                	je     12338 <kstrncpy+0x6d>
   122dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122e1:	74 55                	je     12338 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   122e3:	8b 45 08             	mov    0x8(%ebp),%eax
   122e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   122e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   122ec:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   122ef:	eb 17                	jmp    12308 <kstrncpy+0x3d>
        *d++ = *s++;
   122f1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   122f4:	8d 42 01             	lea    0x1(%edx),%eax
   122f7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   122fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122fd:	8d 48 01             	lea    0x1(%eax),%ecx
   12300:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12303:	0f b6 12             	movzbl (%edx),%edx
   12306:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   12308:	8b 45 10             	mov    0x10(%ebp),%eax
   1230b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1230e:	89 55 10             	mov    %edx,0x10(%ebp)
   12311:	85 c0                	test   %eax,%eax
   12313:	7e 0a                	jle    1231f <kstrncpy+0x54>
   12315:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12318:	0f b6 00             	movzbl (%eax),%eax
   1231b:	84 c0                	test   %al,%al
   1231d:	75 d2                	jne    122f1 <kstrncpy+0x26>
    }
    if (size == 0) {
   1231f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12323:	75 0b                	jne    12330 <kstrncpy+0x65>
        *(d - 1) = '\0';
   12325:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12328:	83 e8 01             	sub    $0x1,%eax
   1232b:	c6 00 00             	movb   $0x0,(%eax)
   1232e:	eb 09                	jmp    12339 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   12330:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12333:	c6 00 00             	movb   $0x0,(%eax)
   12336:	eb 01                	jmp    12339 <kstrncpy+0x6e>
        return;
   12338:	90                   	nop
    }
}
   12339:	c9                   	leave  
   1233a:	c3                   	ret    

0001233b <kstrlen>:


int kstrlen(const char *str) {
   1233b:	55                   	push   %ebp
   1233c:	89 e5                	mov    %esp,%ebp
   1233e:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12345:	75 07                	jne    1234e <kstrlen+0x13>
        return 0;
   12347:	b8 00 00 00 00       	mov    $0x0,%eax
   1234c:	eb 26                	jmp    12374 <kstrlen+0x39>
    }

    const char *c = str;
   1234e:	8b 45 08             	mov    0x8(%ebp),%eax
   12351:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   12354:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   1235b:	eb 04                	jmp    12361 <kstrlen+0x26>
        len++;
   1235d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   12361:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12364:	8d 50 01             	lea    0x1(%eax),%edx
   12367:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1236a:	0f b6 00             	movzbl (%eax),%eax
   1236d:	84 c0                	test   %al,%al
   1236f:	75 ec                	jne    1235d <kstrlen+0x22>
    }

    return len;
   12371:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12374:	c9                   	leave  
   12375:	c3                   	ret    

00012376 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   12376:	55                   	push   %ebp
   12377:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   12379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1237d:	74 06                	je     12385 <kstrncmp+0xf>
   1237f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12383:	75 0f                	jne    12394 <kstrncmp+0x1e>
        return -1;
   12385:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1238a:	eb 62                	jmp    123ee <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   1238c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12390:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   12394:	8b 45 08             	mov    0x8(%ebp),%eax
   12397:	0f b6 00             	movzbl (%eax),%eax
   1239a:	84 c0                	test   %al,%al
   1239c:	74 20                	je     123be <kstrncmp+0x48>
   1239e:	8b 45 0c             	mov    0xc(%ebp),%eax
   123a1:	0f b6 00             	movzbl (%eax),%eax
   123a4:	84 c0                	test   %al,%al
   123a6:	74 16                	je     123be <kstrncmp+0x48>
   123a8:	8b 45 08             	mov    0x8(%ebp),%eax
   123ab:	0f b6 10             	movzbl (%eax),%edx
   123ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   123b1:	0f b6 00             	movzbl (%eax),%eax
   123b4:	38 c2                	cmp    %al,%dl
   123b6:	75 06                	jne    123be <kstrncmp+0x48>
   123b8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123bc:	75 ce                	jne    1238c <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   123be:	8b 45 08             	mov    0x8(%ebp),%eax
   123c1:	0f b6 00             	movzbl (%eax),%eax
   123c4:	84 c0                	test   %al,%al
   123c6:	74 21                	je     123e9 <kstrncmp+0x73>
   123c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   123cb:	0f b6 00             	movzbl (%eax),%eax
   123ce:	84 c0                	test   %al,%al
   123d0:	74 17                	je     123e9 <kstrncmp+0x73>
   123d2:	8b 45 08             	mov    0x8(%ebp),%eax
   123d5:	0f b6 10             	movzbl (%eax),%edx
   123d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   123db:	0f b6 00             	movzbl (%eax),%eax
   123de:	38 c2                	cmp    %al,%dl
   123e0:	74 07                	je     123e9 <kstrncmp+0x73>
   123e2:	b8 01 00 00 00       	mov    $0x1,%eax
   123e7:	eb 05                	jmp    123ee <kstrncmp+0x78>
   123e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   123ee:	5d                   	pop    %ebp
   123ef:	c3                   	ret    

000123f0 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   123f0:	55                   	push   %ebp
   123f1:	89 e5                	mov    %esp,%ebp
   123f3:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   123f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123fa:	74 40                	je     1243c <kmemcpy+0x4c>
   123fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12400:	74 3a                	je     1243c <kmemcpy+0x4c>
   12402:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12406:	74 34                	je     1243c <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12408:	8b 45 0c             	mov    0xc(%ebp),%eax
   1240b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   1240e:	8b 45 08             	mov    0x8(%ebp),%eax
   12411:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12414:	eb 17                	jmp    1242d <kmemcpy+0x3d>
        *d++ = *s++;
   12416:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12419:	8d 42 01             	lea    0x1(%edx),%eax
   1241c:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1241f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12422:	8d 48 01             	lea    0x1(%eax),%ecx
   12425:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12428:	0f b6 12             	movzbl (%edx),%edx
   1242b:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1242d:	8b 45 10             	mov    0x10(%ebp),%eax
   12430:	8d 50 ff             	lea    -0x1(%eax),%edx
   12433:	89 55 10             	mov    %edx,0x10(%ebp)
   12436:	85 c0                	test   %eax,%eax
   12438:	75 dc                	jne    12416 <kmemcpy+0x26>
   1243a:	eb 01                	jmp    1243d <kmemcpy+0x4d>
        return;
   1243c:	90                   	nop
    }
}
   1243d:	c9                   	leave  
   1243e:	c3                   	ret    

0001243f <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   1243f:	55                   	push   %ebp
   12440:	89 e5                	mov    %esp,%ebp
   12442:	83 ec 14             	sub    $0x14,%esp
   12445:	8b 45 0c             	mov    0xc(%ebp),%eax
   12448:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1244b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1244f:	74 2c                	je     1247d <kmemset+0x3e>
   12451:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12455:	74 26                	je     1247d <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   12457:	8b 45 08             	mov    0x8(%ebp),%eax
   1245a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   1245d:	eb 0f                	jmp    1246e <kmemset+0x2f>
        *d++ = v;
   1245f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12462:	8d 50 01             	lea    0x1(%eax),%edx
   12465:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12468:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1246c:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1246e:	8b 45 10             	mov    0x10(%ebp),%eax
   12471:	8d 50 ff             	lea    -0x1(%eax),%edx
   12474:	89 55 10             	mov    %edx,0x10(%ebp)
   12477:	85 c0                	test   %eax,%eax
   12479:	75 e4                	jne    1245f <kmemset+0x20>
   1247b:	eb 01                	jmp    1247e <kmemset+0x3f>
        return;
   1247d:	90                   	nop
    }
}
   1247e:	c9                   	leave  
   1247f:	c3                   	ret    

00012480 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12480:	55                   	push   %ebp
   12481:	89 e5                	mov    %esp,%ebp
   12483:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   12486:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1248a:	74 06                	je     12492 <kmemcmp+0x12>
   1248c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12490:	75 07                	jne    12499 <kmemcmp+0x19>
        return 1;
   12492:	b8 01 00 00 00       	mov    $0x1,%eax
   12497:	eb 43                	jmp    124dc <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   12499:	8b 45 08             	mov    0x8(%ebp),%eax
   1249c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1249f:	8b 45 0c             	mov    0xc(%ebp),%eax
   124a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   124a5:	eb 23                	jmp    124ca <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   124a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124aa:	8d 50 01             	lea    0x1(%eax),%edx
   124ad:	89 55 fc             	mov    %edx,-0x4(%ebp)
   124b0:	0f b6 08             	movzbl (%eax),%ecx
   124b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124b6:	8d 50 01             	lea    0x1(%eax),%edx
   124b9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124bc:	0f b6 00             	movzbl (%eax),%eax
   124bf:	38 c1                	cmp    %al,%cl
   124c1:	74 07                	je     124ca <kmemcmp+0x4a>
            return 1;
   124c3:	b8 01 00 00 00       	mov    $0x1,%eax
   124c8:	eb 12                	jmp    124dc <kmemcmp+0x5c>
    while (size--) {
   124ca:	8b 45 10             	mov    0x10(%ebp),%eax
   124cd:	8d 50 ff             	lea    -0x1(%eax),%edx
   124d0:	89 55 10             	mov    %edx,0x10(%ebp)
   124d3:	85 c0                	test   %eax,%eax
   124d5:	75 d0                	jne    124a7 <kmemcmp+0x27>
        }
    }

    return 0;
   124d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   124dc:	c9                   	leave  
   124dd:	c3                   	ret    

000124de <kitoa>:


void kitoa(char *buf, int num, int base) {
   124de:	55                   	push   %ebp
   124df:	89 e5                	mov    %esp,%ebp
   124e1:	53                   	push   %ebx
   124e2:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   124e5:	8b 45 08             	mov    0x8(%ebp),%eax
   124e8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   124eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ee:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   124f1:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   124f5:	74 1d                	je     12514 <kitoa+0x36>
   124f7:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   124fb:	74 17                	je     12514 <kitoa+0x36>
   124fd:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12501:	74 11                	je     12514 <kitoa+0x36>
   12503:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12507:	74 0b                	je     12514 <kitoa+0x36>
        *p = '\0';
   12509:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1250c:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1250f:	e9 03 01 00 00       	jmp    12617 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12514:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   1251b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1251f:	79 19                	jns    1253a <kitoa+0x5c>
   12521:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12525:	75 13                	jne    1253a <kitoa+0x5c>
        *p++ = '-';
   12527:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1252a:	8d 50 01             	lea    0x1(%eax),%edx
   1252d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12530:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12533:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   1253a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1253e:	74 3b                	je     1257b <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12540:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12546:	8b 45 0c             	mov    0xc(%ebp),%eax
   12549:	99                   	cltd   
   1254a:	f7 7d 10             	idivl  0x10(%ebp)
   1254d:	89 d0                	mov    %edx,%eax
   1254f:	83 c0 0f             	add    $0xf,%eax
   12552:	01 c8                	add    %ecx,%eax
   12554:	0f b6 00             	movzbl (%eax),%eax
   12557:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1255a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1255d:	8d 50 01             	lea    0x1(%eax),%edx
   12560:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12563:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12567:	88 10                	mov    %dl,(%eax)
            num /= base;
   12569:	8b 45 0c             	mov    0xc(%ebp),%eax
   1256c:	99                   	cltd   
   1256d:	f7 7d 10             	idivl  0x10(%ebp)
   12570:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12573:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12577:	75 c7                	jne    12540 <kitoa+0x62>
   12579:	eb 4b                	jmp    125c6 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   1257b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1257e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12581:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12587:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1258a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1258d:	ba 00 00 00 00       	mov    $0x0,%edx
   12592:	f7 f3                	div    %ebx
   12594:	89 d0                	mov    %edx,%eax
   12596:	83 c0 0f             	add    $0xf,%eax
   12599:	01 c8                	add    %ecx,%eax
   1259b:	0f b6 00             	movzbl (%eax),%eax
   1259e:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   125a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125a4:	8d 50 01             	lea    0x1(%eax),%edx
   125a7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125aa:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   125ae:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   125b0:	8b 5d 10             	mov    0x10(%ebp),%ebx
   125b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125b6:	ba 00 00 00 00       	mov    $0x0,%edx
   125bb:	f7 f3                	div    %ebx
   125bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   125c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125c4:	75 bb                	jne    12581 <kitoa+0xa3>
    }
    *p-- = '\0';
   125c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   125cc:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125cf:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   125d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   125d6:	74 08                	je     125e0 <kitoa+0x102>
   125d8:	8b 45 08             	mov    0x8(%ebp),%eax
   125db:	83 c0 01             	add    $0x1,%eax
   125de:	eb 03                	jmp    125e3 <kitoa+0x105>
   125e0:	8b 45 08             	mov    0x8(%ebp),%eax
   125e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   125e6:	eb 27                	jmp    1260f <kitoa+0x131>
        char ch = *start;
   125e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   125eb:	0f b6 00             	movzbl (%eax),%eax
   125ee:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   125f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125f4:	0f b6 10             	movzbl (%eax),%edx
   125f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   125fa:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   125fc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   12602:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12605:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12609:	88 10                	mov    %dl,(%eax)
        start++;
   1260b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1260f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12612:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12615:	72 d1                	jb     125e8 <kitoa+0x10a>
    }
}
   12617:	83 c4 20             	add    $0x20,%esp
   1261a:	5b                   	pop    %ebx
   1261b:	5d                   	pop    %ebp
   1261c:	c3                   	ret    

0001261d <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   1261d:	55                   	push   %ebp
   1261e:	89 e5                	mov    %esp,%ebp
   12620:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12623:	8d 45 10             	lea    0x10(%ebp),%eax
   12626:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12629:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1262c:	83 ec 04             	sub    $0x4,%esp
   1262f:	50                   	push   %eax
   12630:	ff 75 0c             	pushl  0xc(%ebp)
   12633:	ff 75 08             	pushl  0x8(%ebp)
   12636:	e8 06 00 00 00       	call   12641 <kvsprintf>
   1263b:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1263e:	90                   	nop
   1263f:	c9                   	leave  
   12640:	c3                   	ret    

00012641 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12641:	55                   	push   %ebp
   12642:	89 e5                	mov    %esp,%ebp
   12644:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12647:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1264e:	8b 45 08             	mov    0x8(%ebp),%eax
   12651:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12654:	e9 2f 01 00 00       	jmp    12788 <kvsprintf+0x147>
        switch (state) {
   12659:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1265c:	85 c0                	test   %eax,%eax
   1265e:	74 0a                	je     1266a <kvsprintf+0x29>
   12660:	83 f8 01             	cmp    $0x1,%eax
   12663:	74 2b                	je     12690 <kvsprintf+0x4f>
   12665:	e9 1e 01 00 00       	jmp    12788 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   1266a:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1266e:	75 0c                	jne    1267c <kvsprintf+0x3b>
                state = READ_FMT;
   12670:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12677:	e9 0c 01 00 00       	jmp    12788 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   1267c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1267f:	8d 50 01             	lea    0x1(%eax),%edx
   12682:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12685:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12689:	88 10                	mov    %dl,(%eax)
            }
            break;
   1268b:	e9 f8 00 00 00       	jmp    12788 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12690:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12694:	75 31                	jne    126c7 <kvsprintf+0x86>
                int num = va_arg(args, int);
   12696:	8b 45 10             	mov    0x10(%ebp),%eax
   12699:	8d 50 04             	lea    0x4(%eax),%edx
   1269c:	89 55 10             	mov    %edx,0x10(%ebp)
   1269f:	8b 00                	mov    (%eax),%eax
   126a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   126a4:	6a 0a                	push   $0xa
   126a6:	ff 75 e4             	pushl  -0x1c(%ebp)
   126a9:	ff 75 f8             	pushl  -0x8(%ebp)
   126ac:	e8 2d fe ff ff       	call   124de <kitoa>
   126b1:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   126b4:	ff 75 f8             	pushl  -0x8(%ebp)
   126b7:	e8 7f fc ff ff       	call   1233b <kstrlen>
   126bc:	83 c4 04             	add    $0x4,%esp
   126bf:	01 45 f8             	add    %eax,-0x8(%ebp)
   126c2:	e9 b9 00 00 00       	jmp    12780 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   126c7:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   126cb:	75 46                	jne    12713 <kvsprintf+0xd2>
                *curr++ = '0';
   126cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126d0:	8d 50 01             	lea    0x1(%eax),%edx
   126d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126d6:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   126d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126dc:	8d 50 01             	lea    0x1(%eax),%edx
   126df:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126e2:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   126e5:	8b 45 10             	mov    0x10(%ebp),%eax
   126e8:	8d 50 04             	lea    0x4(%eax),%edx
   126eb:	89 55 10             	mov    %edx,0x10(%ebp)
   126ee:	8b 00                	mov    (%eax),%eax
   126f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   126f3:	6a 10                	push   $0x10
   126f5:	ff 75 e8             	pushl  -0x18(%ebp)
   126f8:	ff 75 f8             	pushl  -0x8(%ebp)
   126fb:	e8 de fd ff ff       	call   124de <kitoa>
   12700:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12703:	ff 75 f8             	pushl  -0x8(%ebp)
   12706:	e8 30 fc ff ff       	call   1233b <kstrlen>
   1270b:	83 c4 04             	add    $0x4,%esp
   1270e:	01 45 f8             	add    %eax,-0x8(%ebp)
   12711:	eb 6d                	jmp    12780 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12713:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12717:	75 1f                	jne    12738 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12719:	8b 45 10             	mov    0x10(%ebp),%eax
   1271c:	8d 50 04             	lea    0x4(%eax),%edx
   1271f:	89 55 10             	mov    %edx,0x10(%ebp)
   12722:	8b 00                	mov    (%eax),%eax
   12724:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12727:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1272a:	8d 50 01             	lea    0x1(%eax),%edx
   1272d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12730:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12734:	88 10                	mov    %dl,(%eax)
   12736:	eb 48                	jmp    12780 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12738:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1273c:	75 42                	jne    12780 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   1273e:	8b 45 10             	mov    0x10(%ebp),%eax
   12741:	8d 50 04             	lea    0x4(%eax),%edx
   12744:	89 55 10             	mov    %edx,0x10(%ebp)
   12747:	8b 00                	mov    (%eax),%eax
   12749:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   1274c:	ff 75 f4             	pushl  -0xc(%ebp)
   1274f:	e8 e7 fb ff ff       	call   1233b <kstrlen>
   12754:	83 c4 04             	add    $0x4,%esp
   12757:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   1275a:	eb 17                	jmp    12773 <kvsprintf+0x132>
                    *curr++ = *str++;
   1275c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1275f:	8d 42 01             	lea    0x1(%edx),%eax
   12762:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12765:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12768:	8d 48 01             	lea    0x1(%eax),%ecx
   1276b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1276e:	0f b6 12             	movzbl (%edx),%edx
   12771:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12773:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12776:	8d 50 ff             	lea    -0x1(%eax),%edx
   12779:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1277c:	85 c0                	test   %eax,%eax
   1277e:	75 dc                	jne    1275c <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12780:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12787:	90                   	nop
    while ((ch = *fmt++)) {
   12788:	8b 45 0c             	mov    0xc(%ebp),%eax
   1278b:	8d 50 01             	lea    0x1(%eax),%edx
   1278e:	89 55 0c             	mov    %edx,0xc(%ebp)
   12791:	0f b6 00             	movzbl (%eax),%eax
   12794:	88 45 ef             	mov    %al,-0x11(%ebp)
   12797:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1279b:	0f 85 b8 fe ff ff    	jne    12659 <kvsprintf+0x18>
        }
    }
}
   127a1:	90                   	nop
   127a2:	c9                   	leave  
   127a3:	c3                   	ret    

000127a4 <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   127a4:	55                   	push   %ebp
   127a5:	89 e5                	mov    %esp,%ebp
   127a7:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   127aa:	83 ec 08             	sub    $0x8,%esp
   127ad:	ff 75 14             	pushl  0x14(%ebp)
   127b0:	68 40 31 01 00       	push   $0x13140
   127b5:	e8 ef 02 00 00       	call   12aa9 <log_printf>
   127ba:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   127bd:	ff 75 10             	pushl  0x10(%ebp)
   127c0:	ff 75 0c             	pushl  0xc(%ebp)
   127c3:	ff 75 08             	pushl  0x8(%ebp)
   127c6:	68 52 31 01 00       	push   $0x13152
   127cb:	e8 d9 02 00 00       	call   12aa9 <log_printf>
   127d0:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   127d3:	e8 a5 fa ff ff       	call   1227d <hlt>
   127d8:	eb f9                	jmp    127d3 <pannic+0x2f>

000127da <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   127da:	55                   	push   %ebp
   127db:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   127dd:	8b 45 08             	mov    0x8(%ebp),%eax
   127e0:	8b 40 08             	mov    0x8(%eax),%eax
   127e3:	85 c0                	test   %eax,%eax
   127e5:	0f 94 c0             	sete   %al
   127e8:	0f b6 c0             	movzbl %al,%eax
}
   127eb:	5d                   	pop    %ebp
   127ec:	c3                   	ret    

000127ed <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   127ed:	55                   	push   %ebp
   127ee:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   127f0:	8b 45 08             	mov    0x8(%ebp),%eax
   127f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   127f9:	8b 45 08             	mov    0x8(%ebp),%eax
   127fc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12803:	8b 45 08             	mov    0x8(%ebp),%eax
   12806:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1280d:	90                   	nop
   1280e:	5d                   	pop    %ebp
   1280f:	c3                   	ret    

00012810 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12810:	55                   	push   %ebp
   12811:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12813:	8b 45 08             	mov    0x8(%ebp),%eax
   12816:	8b 10                	mov    (%eax),%edx
   12818:	8b 45 0c             	mov    0xc(%ebp),%eax
   1281b:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1281e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12821:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12827:	ff 75 08             	pushl  0x8(%ebp)
   1282a:	e8 ab ff ff ff       	call   127da <list_is_empty>
   1282f:	83 c4 04             	add    $0x4,%esp
   12832:	85 c0                	test   %eax,%eax
   12834:	74 15                	je     1284b <list_insert_front+0x3b>
        list->last = list->first = node;
   12836:	8b 45 08             	mov    0x8(%ebp),%eax
   12839:	8b 55 0c             	mov    0xc(%ebp),%edx
   1283c:	89 10                	mov    %edx,(%eax)
   1283e:	8b 45 08             	mov    0x8(%ebp),%eax
   12841:	8b 10                	mov    (%eax),%edx
   12843:	8b 45 08             	mov    0x8(%ebp),%eax
   12846:	89 50 04             	mov    %edx,0x4(%eax)
   12849:	eb 12                	jmp    1285d <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   1284b:	8b 45 08             	mov    0x8(%ebp),%eax
   1284e:	8b 00                	mov    (%eax),%eax
   12850:	8b 55 0c             	mov    0xc(%ebp),%edx
   12853:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12855:	8b 45 08             	mov    0x8(%ebp),%eax
   12858:	8b 55 0c             	mov    0xc(%ebp),%edx
   1285b:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1285d:	8b 45 08             	mov    0x8(%ebp),%eax
   12860:	8b 40 08             	mov    0x8(%eax),%eax
   12863:	8d 50 01             	lea    0x1(%eax),%edx
   12866:	8b 45 08             	mov    0x8(%ebp),%eax
   12869:	89 50 08             	mov    %edx,0x8(%eax)
}
   1286c:	90                   	nop
   1286d:	c9                   	leave  
   1286e:	c3                   	ret    

0001286f <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   1286f:	55                   	push   %ebp
   12870:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12872:	8b 45 08             	mov    0x8(%ebp),%eax
   12875:	8b 50 04             	mov    0x4(%eax),%edx
   12878:	8b 45 0c             	mov    0xc(%ebp),%eax
   1287b:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1287d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12880:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12887:	ff 75 08             	pushl  0x8(%ebp)
   1288a:	e8 4b ff ff ff       	call   127da <list_is_empty>
   1288f:	83 c4 04             	add    $0x4,%esp
   12892:	85 c0                	test   %eax,%eax
   12894:	74 15                	je     128ab <list_insert_back+0x3c>
        list->last = list->first = node;
   12896:	8b 45 08             	mov    0x8(%ebp),%eax
   12899:	8b 55 0c             	mov    0xc(%ebp),%edx
   1289c:	89 10                	mov    %edx,(%eax)
   1289e:	8b 45 08             	mov    0x8(%ebp),%eax
   128a1:	8b 10                	mov    (%eax),%edx
   128a3:	8b 45 08             	mov    0x8(%ebp),%eax
   128a6:	89 50 04             	mov    %edx,0x4(%eax)
   128a9:	eb 15                	jmp    128c0 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   128ab:	8b 45 08             	mov    0x8(%ebp),%eax
   128ae:	8b 40 04             	mov    0x4(%eax),%eax
   128b1:	8b 55 0c             	mov    0xc(%ebp),%edx
   128b4:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   128b7:	8b 45 08             	mov    0x8(%ebp),%eax
   128ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   128bd:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   128c0:	8b 45 08             	mov    0x8(%ebp),%eax
   128c3:	8b 40 08             	mov    0x8(%eax),%eax
   128c6:	8d 50 01             	lea    0x1(%eax),%edx
   128c9:	8b 45 08             	mov    0x8(%ebp),%eax
   128cc:	89 50 08             	mov    %edx,0x8(%eax)
}
   128cf:	90                   	nop
   128d0:	c9                   	leave  
   128d1:	c3                   	ret    

000128d2 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   128d2:	55                   	push   %ebp
   128d3:	89 e5                	mov    %esp,%ebp
   128d5:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   128d8:	ff 75 08             	pushl  0x8(%ebp)
   128db:	e8 fa fe ff ff       	call   127da <list_is_empty>
   128e0:	83 c4 04             	add    $0x4,%esp
   128e3:	85 c0                	test   %eax,%eax
   128e5:	74 07                	je     128ee <list_remove_front+0x1c>
        return (list_node_t*)0;
   128e7:	b8 00 00 00 00       	mov    $0x0,%eax
   128ec:	eb 5b                	jmp    12949 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   128ee:	8b 45 08             	mov    0x8(%ebp),%eax
   128f1:	8b 00                	mov    (%eax),%eax
   128f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   128f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128f9:	8b 50 04             	mov    0x4(%eax),%edx
   128fc:	8b 45 08             	mov    0x8(%ebp),%eax
   128ff:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12901:	8b 45 08             	mov    0x8(%ebp),%eax
   12904:	8b 00                	mov    (%eax),%eax
   12906:	85 c0                	test   %eax,%eax
   12908:	75 0c                	jne    12916 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   1290a:	8b 45 08             	mov    0x8(%ebp),%eax
   1290d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12914:	eb 0c                	jmp    12922 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12916:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12919:	8b 40 04             	mov    0x4(%eax),%eax
   1291c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12922:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12925:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1292c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1292f:	8b 50 04             	mov    0x4(%eax),%edx
   12932:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12935:	89 10                	mov    %edx,(%eax)
    list->count--;
   12937:	8b 45 08             	mov    0x8(%ebp),%eax
   1293a:	8b 40 08             	mov    0x8(%eax),%eax
   1293d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12940:	8b 45 08             	mov    0x8(%ebp),%eax
   12943:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12946:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12949:	c9                   	leave  
   1294a:	c3                   	ret    

0001294b <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   1294b:	55                   	push   %ebp
   1294c:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   1294e:	8b 45 08             	mov    0x8(%ebp),%eax
   12951:	8b 00                	mov    (%eax),%eax
   12953:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12956:	75 0b                	jne    12963 <list_remove+0x18>
        list->first = node->next;
   12958:	8b 45 0c             	mov    0xc(%ebp),%eax
   1295b:	8b 50 04             	mov    0x4(%eax),%edx
   1295e:	8b 45 08             	mov    0x8(%ebp),%eax
   12961:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12963:	8b 45 08             	mov    0x8(%ebp),%eax
   12966:	8b 40 04             	mov    0x4(%eax),%eax
   12969:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1296c:	75 0b                	jne    12979 <list_remove+0x2e>
        list->last = node->pre;
   1296e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12971:	8b 10                	mov    (%eax),%edx
   12973:	8b 45 08             	mov    0x8(%ebp),%eax
   12976:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12979:	8b 45 0c             	mov    0xc(%ebp),%eax
   1297c:	8b 00                	mov    (%eax),%eax
   1297e:	85 c0                	test   %eax,%eax
   12980:	74 0e                	je     12990 <list_remove+0x45>
        node->pre->next = node->next;
   12982:	8b 45 0c             	mov    0xc(%ebp),%eax
   12985:	8b 00                	mov    (%eax),%eax
   12987:	8b 55 0c             	mov    0xc(%ebp),%edx
   1298a:	8b 52 04             	mov    0x4(%edx),%edx
   1298d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12990:	8b 45 0c             	mov    0xc(%ebp),%eax
   12993:	8b 40 04             	mov    0x4(%eax),%eax
   12996:	85 c0                	test   %eax,%eax
   12998:	74 0d                	je     129a7 <list_remove+0x5c>
        node->next->pre = node->pre;
   1299a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1299d:	8b 40 04             	mov    0x4(%eax),%eax
   129a0:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a3:	8b 12                	mov    (%edx),%edx
   129a5:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   129a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   129aa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   129b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   129b4:	8b 50 04             	mov    0x4(%eax),%edx
   129b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   129ba:	89 10                	mov    %edx,(%eax)
    --list->count;
   129bc:	8b 45 08             	mov    0x8(%ebp),%eax
   129bf:	8b 40 08             	mov    0x8(%eax),%eax
   129c2:	8d 50 ff             	lea    -0x1(%eax),%edx
   129c5:	8b 45 08             	mov    0x8(%ebp),%eax
   129c8:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   129cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   129ce:	5d                   	pop    %ebp
   129cf:	c3                   	ret    

000129d0 <inb>:
static inline uint8_t inb(uint16_t port) {
   129d0:	55                   	push   %ebp
   129d1:	89 e5                	mov    %esp,%ebp
   129d3:	83 ec 14             	sub    $0x14,%esp
   129d6:	8b 45 08             	mov    0x8(%ebp),%eax
   129d9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   129dd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129e1:	89 c2                	mov    %eax,%edx
   129e3:	ec                   	in     (%dx),%al
   129e4:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   129e7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   129eb:	c9                   	leave  
   129ec:	c3                   	ret    

000129ed <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   129ed:	55                   	push   %ebp
   129ee:	89 e5                	mov    %esp,%ebp
   129f0:	83 ec 08             	sub    $0x8,%esp
   129f3:	8b 55 08             	mov    0x8(%ebp),%edx
   129f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   129fd:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12a00:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12a04:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12a08:	ee                   	out    %al,(%dx)
}
   12a09:	90                   	nop
   12a0a:	c9                   	leave  
   12a0b:	c3                   	ret    

00012a0c <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12a0c:	55                   	push   %ebp
   12a0d:	89 e5                	mov    %esp,%ebp
   12a0f:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12a12:	83 ec 0c             	sub    $0xc,%esp
   12a15:	68 64 9f 01 00       	push   $0x19f64
   12a1a:	e8 5e f3 ff ff       	call   11d7d <mutex_init>
   12a1f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12a22:	83 ec 08             	sub    $0x8,%esp
   12a25:	6a 00                	push   $0x0
   12a27:	68 f9 03 00 00       	push   $0x3f9
   12a2c:	e8 bc ff ff ff       	call   129ed <outb>
   12a31:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12a34:	83 ec 08             	sub    $0x8,%esp
   12a37:	68 80 00 00 00       	push   $0x80
   12a3c:	68 fb 03 00 00       	push   $0x3fb
   12a41:	e8 a7 ff ff ff       	call   129ed <outb>
   12a46:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12a49:	83 ec 08             	sub    $0x8,%esp
   12a4c:	6a 03                	push   $0x3
   12a4e:	68 f8 03 00 00       	push   $0x3f8
   12a53:	e8 95 ff ff ff       	call   129ed <outb>
   12a58:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12a5b:	83 ec 08             	sub    $0x8,%esp
   12a5e:	6a 00                	push   $0x0
   12a60:	68 f9 03 00 00       	push   $0x3f9
   12a65:	e8 83 ff ff ff       	call   129ed <outb>
   12a6a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12a6d:	83 ec 08             	sub    $0x8,%esp
   12a70:	6a 03                	push   $0x3
   12a72:	68 fb 03 00 00       	push   $0x3fb
   12a77:	e8 71 ff ff ff       	call   129ed <outb>
   12a7c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12a7f:	83 ec 08             	sub    $0x8,%esp
   12a82:	68 c7 00 00 00       	push   $0xc7
   12a87:	68 fa 03 00 00       	push   $0x3fa
   12a8c:	e8 5c ff ff ff       	call   129ed <outb>
   12a91:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12a94:	83 ec 08             	sub    $0x8,%esp
   12a97:	6a 0f                	push   $0xf
   12a99:	68 fc 03 00 00       	push   $0x3fc
   12a9e:	e8 4a ff ff ff       	call   129ed <outb>
   12aa3:	83 c4 10             	add    $0x10,%esp
}
   12aa6:	90                   	nop
   12aa7:	c9                   	leave  
   12aa8:	c3                   	ret    

00012aa9 <log_printf>:


void log_printf(const char* fmt, ...) {
   12aa9:	55                   	push   %ebp
   12aaa:	89 e5                	mov    %esp,%ebp
   12aac:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12ab2:	83 ec 04             	sub    $0x4,%esp
   12ab5:	68 80 00 00 00       	push   $0x80
   12aba:	6a 00                	push   $0x0
   12abc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12ac2:	50                   	push   %eax
   12ac3:	e8 77 f9 ff ff       	call   1243f <kmemset>
   12ac8:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12acb:	8d 45 0c             	lea    0xc(%ebp),%eax
   12ace:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12ad4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12ada:	83 ec 04             	sub    $0x4,%esp
   12add:	50                   	push   %eax
   12ade:	ff 75 08             	pushl  0x8(%ebp)
   12ae1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12ae7:	50                   	push   %eax
   12ae8:	e8 54 fb ff ff       	call   12641 <kvsprintf>
   12aed:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   12af0:	83 ec 0c             	sub    $0xc,%esp
   12af3:	68 64 9f 01 00       	push   $0x19f64
   12af8:	e8 ae f2 ff ff       	call   11dab <mutex_acquire>
   12afd:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   12b00:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12b06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12b09:	eb 3b                	jmp    12b46 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12b0b:	90                   	nop
   12b0c:	83 ec 0c             	sub    $0xc,%esp
   12b0f:	68 fd 03 00 00       	push   $0x3fd
   12b14:	e8 b7 fe ff ff       	call   129d0 <inb>
   12b19:	83 c4 10             	add    $0x10,%esp
   12b1c:	0f b6 c0             	movzbl %al,%eax
   12b1f:	83 e0 40             	and    $0x40,%eax
   12b22:	85 c0                	test   %eax,%eax
   12b24:	74 e6                	je     12b0c <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b29:	8d 50 01             	lea    0x1(%eax),%edx
   12b2c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12b2f:	0f b6 00             	movzbl (%eax),%eax
   12b32:	0f b6 c0             	movzbl %al,%eax
   12b35:	83 ec 08             	sub    $0x8,%esp
   12b38:	50                   	push   %eax
   12b39:	68 f8 03 00 00       	push   $0x3f8
   12b3e:	e8 aa fe ff ff       	call   129ed <outb>
   12b43:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b49:	0f b6 00             	movzbl (%eax),%eax
   12b4c:	84 c0                	test   %al,%al
   12b4e:	75 bb                	jne    12b0b <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   12b50:	83 ec 08             	sub    $0x8,%esp
   12b53:	6a 0d                	push   $0xd
   12b55:	68 f8 03 00 00       	push   $0x3f8
   12b5a:	e8 8e fe ff ff       	call   129ed <outb>
   12b5f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12b62:	83 ec 08             	sub    $0x8,%esp
   12b65:	6a 0a                	push   $0xa
   12b67:	68 f8 03 00 00       	push   $0x3f8
   12b6c:	e8 7c fe ff ff       	call   129ed <outb>
   12b71:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   12b74:	83 ec 0c             	sub    $0xc,%esp
   12b77:	68 64 9f 01 00       	push   $0x19f64
   12b7c:	e8 b6 f2 ff ff       	call   11e37 <mutex_release>
   12b81:	83 c4 10             	add    $0x10,%esp
   12b84:	90                   	nop
   12b85:	c9                   	leave  
   12b86:	c3                   	ret    
