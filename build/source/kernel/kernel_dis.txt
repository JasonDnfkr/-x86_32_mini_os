
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000425c memsz 0x0000425c flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x00014f40 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x00029f40 align 2**12
         filesz 0x0000028f memsz 0x0000028f flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000386d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000009ec  00013870  00013870  00004870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00013f40  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   0000028f  80000000  00029f40  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00002153  00000000  00000000  0000728f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005508  00000000  00000000  000093e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001583  00000000  00000000  0000e8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001439  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00011569  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001680  00000000  00000000  0001157c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00013870 l    d  .rodata	00000000 .rodata
00015000 l    d  .data	00000000 .data
00016000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010302 l     F .text	00000017 up2
00010319 l     F .text	0000000d down2
00010326 l     F .text	0000000c write_cr3
00010332 l     F .text	00000014 pde_index
00010346 l     F .text	00000027 pde_paddr
0001036d l     F .text	00000010 pte_index
0001037d l     F .text	00000027 pte_paddr
000103a4 l     F .text	00000011 mmu_set_page_dir
000103b5 l     F .text	0000000f get_pte_perm
00016000 l     O .bss	00000068 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
000103c4 l     F .text	0000005d addr_alloc_init
00010421 l     F .text	00000067 addr_alloc_page
00010488 l     F .text	00000062 addr_free_page
000104ea l     F .text	00000066 show_mem_info
00010550 l     F .text	0000003c total_mem_size
0001058c l     F .text	000000a0 test_alloc
000139d4 l     O .rodata	00000012 __func__.2233
00015000 l     O .data	00000040 kernel_map.2245
000139e8 l     O .rodata	0000000c __func__.2275
00010a8c l     F .text	00000010 curr_page_dir
000139f4 l     O .rodata	00000011 __func__.2307
00010b55 l     F .text	0000001a kalloc
00010b6f l     F .text	0000001e kfree
00013a08 l     O .rodata	00000013 __func__.2318
00000000 l    df *ABS*	00000000 syscall.c
00013a1c l     O .rodata	00000014 sys_table
00000000 l    df *ABS*	00000000 task.c
00010fd0 l     F .text	00000019 list_node_init
00010fe9 l     F .text	0000000b list_node_next
00010ff4 l     F .text	0000000b list_size
00010fff l     F .text	0000000a list_first
00011009 l     F .text	0000000c write_cr3
00011015 l     F .text	00000007 hlt
0001101c l     F .text	00000017 write_tr
00011033 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a8 task_manager
000181c0 l     O .bss	00005e00 task_table
0001dfc0 l     O .bss	00000054 task_table_mutex
0001e020 l     O .bss	00001000 idle_task_stack
00011044 l     F .text	00000188 tss_init
00013af4 l     O .rodata	0000000a __func__.2301
0001136b l     F .text	0000000a idle_task_entry
00013b00 l     O .rodata	00000010 __func__.2330
00011830 l     F .text	00000069 alloc_task
00011899 l     F .text	00000030 free_task
00000000 l    df *ABS*	00000000 cpu.c
00011a4f l     F .text	00000028 lgdt
00011a77 l     F .text	0000001a far_jump
0001f020 l     O .bss	00000800 gdt_table
0001f820 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
00011cc8 l     F .text	0000001d inb
00011ce5 l     F .text	0000001f outb
00011d04 l     F .text	00000007 cli
00011d0b l     F .text	00000007 sti
00011d12 l     F .text	00000028 lidt
00011d3a l     F .text	00000011 read_cr2
00011d4b l     F .text	00000007 hlt
00011d52 l     F .text	00000010 read_eflags
00011d62 l     F .text	0000000b write_eflags
0001f880 l     O .bss	00000400 idt_table
00011d6d l     F .text	000000f0 dump_core_regs
00011e5d l     F .text	0000003e do_default_handler
00012238 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
0001263c l     F .text	0000001f outb
0001fc80 l     O .bss	00000004 sys_tick
00012683 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000126fb l     F .text	0000000b list_size
00012706 l     F .text	0000000a list_first
00012710 l     F .text	0000000b list_last
000141e8 l     O .rodata	0000000c __func__.2218
0001fca0 l     O .bss	000000bc first_task
000141f4 l     O .rodata	00000013 __func__.2251
0001296f l     F .text	00000036 test_task1
000129a5 l     F .text	00000036 test_task2
0001fd60 l     O .bss	000000bc task1
0001fe20 l     O .bss	000000bc task2
0001fee0 l     O .bss	00004000 stack1
00023ee0 l     O .bss	00004000 stack2
00000000 l    df *ABS*	00000000 mutex.c
00012a3b l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00012bd5 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012f5e l     F .text	00000007 hlt
00015040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
000134bb l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000136b1 l     F .text	0000001d inb
000136ce l     F .text	0000001f outb
00027ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c syscall
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
800000c9 l     F .first_task	0000001b fork
800000e4 l     F .first_task	00000022 execve
0001221c g     F .text	0000001c do_handler_control_protection_exception
00012e56 g     F .text	0000003a bitmap_get_bit
000115d3 g     F .text	0000000a task_current
00011ed3 g     F .text	0000001c do_handler_debug_exception
00012200 g     F .text	0000001c do_handler_virtualization_exception
000125dd g     F .text	0000000b irq_enable_global
00011fcf g     F .text	0000001c do_handler_segment_not_present
00011531 g     F .text	00000034 task_set_ready
00012fac g     F .text	00000070 kstrncpy
00012e90 g     F .text	0000001b bitmap_is_set
0001276f g     F .text	0000019c link_test
00011eef g     F .text	0000001c do_handler_nmi_interrupt
00010f3b g     F .text	00000095 do_handler_syscall
00011be3 g     F .text	00000023 cpu_init
000136ed g     F .text	000000a2 log_init
000118c9 g     F .text	0000017c sys_fork
000129db g     F .text	00000060 init_main
00013120 g     F .text	00000041 kmemset
00011c8f g     F .text	00000039 gdt_free_sel
00010f21 g     F .text	0000001a sys_print_msg
00015000 g       .data	00000000 s_data
000124c0 g     F .text	0000008b irq_enable
00010026 g       .text	00000000 exception_handler_unknown
000100a2 g       .text	00000000 exception_handler_breakpoint
0001301c g     F .text	0000003b kstrlen
00011f27 g     F .text	0000001c do_handler_overflow
000106dc g     F .text	00000087 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
00012007 g     F .text	000000b5 do_handler_general_protection
00012cf0 g     F .text	00000029 sem_count
80000106 g     F .first_task	00000119 first_task_main
00011f43 g     F .text	0000001c do_handler_bound_range_exceed
00012d82 g     F .text	000000d4 bitmap_set_bit
00011f97 g     F .text	0000001c do_handler_double_fault
000120bc g     F .text	000000d4 do_handler_page_fault
00010267 g       .text	00000000 exception_handler_virtualization_exception
0001013d g       .text	00000000 exception_handler_double_fault
000125e8 g     F .text	0000002b pic_send_eoi
00011527 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00010833 g     F .text	00000085 memory_create_uvm
00012c03 g     F .text	0000006b sem_wait
00010a6a g     F .text	00000022 memory_alloc_page_for
0001265b g     F .text	00000028 do_handler_timer
00010194 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c1 g       .text	00000000 exception_handler_overflow
000102c2 g       .text	00000000 simple_switch
000134f1 g     F .text	0000005f list_insert_front
00027f40 g     O .bss	00002000 stack
000117c3 g     F .text	00000057 sys_sleep
00013322 g     F .text	00000163 kvsprintf
00010abc g     F .text	00000099 memory_free_page
00029f40 g       *ABS*	00000000 s_first_task
000112d0 g     F .text	0000007d task_uninit
0001099c g     F .text	000000ce memory_alloc_for_page_dir
00012c6e g     F .text	00000082 sem_notify
00011f5f g     F .text	0000001c do_handler_invalid_opcode
0001015a g       .text	00000000 exception_handler_invalid_tss
000126e3 g     F .text	00000018 timer_init
0001145e g     F .text	000000c9 task_first_init
000121c8 g     F .text	0000001c do_handler_machine_check
00011f7b g     F .text	0000001c do_handler_device_not_found
000117a3 g     F .text	00000020 task_set_wakeup
00013550 g     F .text	00000063 list_insert_back
000125d2 g     F .text	0000000b irq_disable_global
000115dd g     F .text	00000061 sys_sched_yield
0002a1cf g       *ABS*	00000000 mem_free_start
0001271b g     F .text	00000054 kernel_init
00012be0 g     F .text	00000023 sem_init
000132fe g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00011565 g     F .text	0000002b task_set_blocked
000100ff g       .text	00000000 exception_handler_invalid_opcode
00029f40 g       .bss	00000000 e_data
000131bf g     F .text	0000013f kitoa
00012f65 g     F .text	00000047 kstrcpy
00013057 g     F .text	0000007a kstrncmp
000121ac g     F .text	0000001c do_handler_aligment_check
00013161 g     F .text	0000005e kmemcmp
000101ed g       .text	00000000 exception_handler_floating_point_error
00010229 g       .text	00000000 exception_handler_machine_check
00011fb3 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00010dda g     F .text	00000147 memory_copy_uvm2
0002a1cf g       *ABS*	00000000 e_first_task
00011772 g     F .text	00000031 task_set_sleep
000102a3 g       .text	00000000 exception_handler_timer
0001248b g     F .text	00000035 irq_install
00011b5b g     F .text	00000088 init_gdt
00012613 g     F .text	00000018 irq_enter_protection
00012a46 g     F .text	00000041 mutex_init
0001254b g     F .text	00000087 irq_disable
00010045 g       .text	00000000 exception_handler_divide_error
00010b8d g     F .text	000000f8 memory_destroy_uvm
00011eb7 g     F .text	0000001c do_handler_divide_error
00012d19 g     F .text	00000016 bitmap_byte_count
0001163e g     F .text	0000005b task_dispatch
00010c85 g     F .text	00000155 memory_copy_uvm
0001290b g     F .text	00000064 move_to_first_task
00011590 g     F .text	00000043 task_next_run
00010763 g     F .text	000000d0 create_kernel_table
000134ce g     F .text	00000023 list_init
000101d0 g       .text	00000000 exception_handler_page_fault
00011e9b g     F .text	0000001c do_handler_unknown
00010a9c g     F .text	00000020 memory_alloc_page
0001134d g     F .text	0000001e task_switch_from_to
000122cb g     F .text	000001c0 irq_init
0001262b g     F .text	00000011 irq_leave_protection
00010083 g       .text	00000000 exception_handler_nmi_interrupt
00011a91 g     F .text	00000083 segment_desc_set
000102d7 g       .text	00000000 exception_handler_syscall
0001425c g       .rodata	00000000 e_text
0001020c g       .text	00000000 exception_handler_aligment_check
00010286 g       .text	00000000 exception_handler_control_protection_exception
00012d2f g     F .text	00000053 bitmap_init
000121e4 g     F .text	0000001c do_handler_simd_floating_point_exception
000130d1 g     F .text	0000004f kmemcpy
00010177 g       .text	00000000 exception_handler_segment_not_present
00012eab g     F .text	000000b3 bitmap_alloc_nbits
00011375 g     F .text	000000e9 task_manager_init
000100e0 g       .text	00000000 exception_handler_bound_range_exceed
00011699 g     F .text	000000d9 task_time_tick
000108b8 g     F .text	000000e4 memory_init
00011a45 g     F .text	0000000a sys_execve
0001011e g       .text	00000000 exception_handler_device_not_found
00013485 g     F .text	00000036 pannic
00011feb g     F .text	0000001c do_handler_stack_segment_fault
00011f0b g     F .text	0000001c do_handler_breakpoint
00010064 g       .text	00000000 exception_handler_debug_exception
00012190 g     F .text	0000001c do_handler_floating_point_error
0001378f g     F .text	000000de log_printf
000111cc g     F .text	00000104 task_init
000135b3 g     F .text	00000079 list_remove_front
0001181a g     F .text	00000016 sys_getpid
00011c1a g     F .text	00000075 gdt_alloc_desc
00012b15 g     F .text	000000c0 mutex_release
0001362c g     F .text	00000085 list_remove
00011c06 g     F .text	00000014 swtch_to_tss
00011b14 g     F .text	00000047 gate_desc_set
00012a87 g     F .text	0000008e mutex_acquire
00010248 g       .text	00000000 exception_handler_simd_floating_point_exception
0001062c g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 0f 27 00 00       	call   1271b <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    # 这里改了栈指针的位置，不再是7c00了
    # mov $(stack + KERNEL_STACK_SIZE), %esp
    jmp init_main
   10021:	e9 b5 29 00 00       	jmp    129db <init_main>

00010026 <exception_handler_unknown>:
    add $(2 * 4), %esp # 跳过压入的异常号和错误码

    iret
.endm

exception_handler unknown,                      -1, 0
   10026:	6a 00                	push   $0x0
   10028:	6a ff                	push   $0xffffffff
   1002a:	60                   	pusha  
   1002b:	1e                   	push   %ds
   1002c:	06                   	push   %es
   1002d:	0f a0                	push   %fs
   1002f:	0f a8                	push   %gs
   10031:	54                   	push   %esp
   10032:	e8 64 1e 00 00       	call   11e9b <do_handler_unknown>
   10037:	83 c4 04             	add    $0x4,%esp
   1003a:	0f a9                	pop    %gs
   1003c:	0f a1                	pop    %fs
   1003e:	07                   	pop    %es
   1003f:	1f                   	pop    %ds
   10040:	61                   	popa   
   10041:	83 c4 08             	add    $0x8,%esp
   10044:	cf                   	iret   

00010045 <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   10045:	6a 00                	push   $0x0
   10047:	6a 00                	push   $0x0
   10049:	60                   	pusha  
   1004a:	1e                   	push   %ds
   1004b:	06                   	push   %es
   1004c:	0f a0                	push   %fs
   1004e:	0f a8                	push   %gs
   10050:	54                   	push   %esp
   10051:	e8 61 1e 00 00       	call   11eb7 <do_handler_divide_error>
   10056:	83 c4 04             	add    $0x4,%esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 5e 1e 00 00       	call   11ed3 <do_handler_debug_exception>
   10075:	83 c4 04             	add    $0x4,%esp
   10078:	0f a9                	pop    %gs
   1007a:	0f a1                	pop    %fs
   1007c:	07                   	pop    %es
   1007d:	1f                   	pop    %ds
   1007e:	61                   	popa   
   1007f:	83 c4 08             	add    $0x8,%esp
   10082:	cf                   	iret   

00010083 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10083:	6a 00                	push   $0x0
   10085:	6a 02                	push   $0x2
   10087:	60                   	pusha  
   10088:	1e                   	push   %ds
   10089:	06                   	push   %es
   1008a:	0f a0                	push   %fs
   1008c:	0f a8                	push   %gs
   1008e:	54                   	push   %esp
   1008f:	e8 5b 1e 00 00       	call   11eef <do_handler_nmi_interrupt>
   10094:	83 c4 04             	add    $0x4,%esp
   10097:	0f a9                	pop    %gs
   10099:	0f a1                	pop    %fs
   1009b:	07                   	pop    %es
   1009c:	1f                   	pop    %ds
   1009d:	61                   	popa   
   1009e:	83 c4 08             	add    $0x8,%esp
   100a1:	cf                   	iret   

000100a2 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a2:	6a 00                	push   $0x0
   100a4:	6a 03                	push   $0x3
   100a6:	60                   	pusha  
   100a7:	1e                   	push   %ds
   100a8:	06                   	push   %es
   100a9:	0f a0                	push   %fs
   100ab:	0f a8                	push   %gs
   100ad:	54                   	push   %esp
   100ae:	e8 58 1e 00 00       	call   11f0b <do_handler_breakpoint>
   100b3:	83 c4 04             	add    $0x4,%esp
   100b6:	0f a9                	pop    %gs
   100b8:	0f a1                	pop    %fs
   100ba:	07                   	pop    %es
   100bb:	1f                   	pop    %ds
   100bc:	61                   	popa   
   100bd:	83 c4 08             	add    $0x8,%esp
   100c0:	cf                   	iret   

000100c1 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c1:	6a 00                	push   $0x0
   100c3:	6a 04                	push   $0x4
   100c5:	60                   	pusha  
   100c6:	1e                   	push   %ds
   100c7:	06                   	push   %es
   100c8:	0f a0                	push   %fs
   100ca:	0f a8                	push   %gs
   100cc:	54                   	push   %esp
   100cd:	e8 55 1e 00 00       	call   11f27 <do_handler_overflow>
   100d2:	83 c4 04             	add    $0x4,%esp
   100d5:	0f a9                	pop    %gs
   100d7:	0f a1                	pop    %fs
   100d9:	07                   	pop    %es
   100da:	1f                   	pop    %ds
   100db:	61                   	popa   
   100dc:	83 c4 08             	add    $0x8,%esp
   100df:	cf                   	iret   

000100e0 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e0:	6a 00                	push   $0x0
   100e2:	6a 05                	push   $0x5
   100e4:	60                   	pusha  
   100e5:	1e                   	push   %ds
   100e6:	06                   	push   %es
   100e7:	0f a0                	push   %fs
   100e9:	0f a8                	push   %gs
   100eb:	54                   	push   %esp
   100ec:	e8 52 1e 00 00       	call   11f43 <do_handler_bound_range_exceed>
   100f1:	83 c4 04             	add    $0x4,%esp
   100f4:	0f a9                	pop    %gs
   100f6:	0f a1                	pop    %fs
   100f8:	07                   	pop    %es
   100f9:	1f                   	pop    %ds
   100fa:	61                   	popa   
   100fb:	83 c4 08             	add    $0x8,%esp
   100fe:	cf                   	iret   

000100ff <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   100ff:	6a 00                	push   $0x0
   10101:	6a 06                	push   $0x6
   10103:	60                   	pusha  
   10104:	1e                   	push   %ds
   10105:	06                   	push   %es
   10106:	0f a0                	push   %fs
   10108:	0f a8                	push   %gs
   1010a:	54                   	push   %esp
   1010b:	e8 4f 1e 00 00       	call   11f5f <do_handler_invalid_opcode>
   10110:	83 c4 04             	add    $0x4,%esp
   10113:	0f a9                	pop    %gs
   10115:	0f a1                	pop    %fs
   10117:	07                   	pop    %es
   10118:	1f                   	pop    %ds
   10119:	61                   	popa   
   1011a:	83 c4 08             	add    $0x8,%esp
   1011d:	cf                   	iret   

0001011e <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   1011e:	6a 00                	push   $0x0
   10120:	6a 07                	push   $0x7
   10122:	60                   	pusha  
   10123:	1e                   	push   %ds
   10124:	06                   	push   %es
   10125:	0f a0                	push   %fs
   10127:	0f a8                	push   %gs
   10129:	54                   	push   %esp
   1012a:	e8 4c 1e 00 00       	call   11f7b <do_handler_device_not_found>
   1012f:	83 c4 04             	add    $0x4,%esp
   10132:	0f a9                	pop    %gs
   10134:	0f a1                	pop    %fs
   10136:	07                   	pop    %es
   10137:	1f                   	pop    %ds
   10138:	61                   	popa   
   10139:	83 c4 08             	add    $0x8,%esp
   1013c:	cf                   	iret   

0001013d <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   1013d:	6a 08                	push   $0x8
   1013f:	60                   	pusha  
   10140:	1e                   	push   %ds
   10141:	06                   	push   %es
   10142:	0f a0                	push   %fs
   10144:	0f a8                	push   %gs
   10146:	54                   	push   %esp
   10147:	e8 4b 1e 00 00       	call   11f97 <do_handler_double_fault>
   1014c:	83 c4 04             	add    $0x4,%esp
   1014f:	0f a9                	pop    %gs
   10151:	0f a1                	pop    %fs
   10153:	07                   	pop    %es
   10154:	1f                   	pop    %ds
   10155:	61                   	popa   
   10156:	83 c4 08             	add    $0x8,%esp
   10159:	cf                   	iret   

0001015a <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015a:	6a 0a                	push   $0xa
   1015c:	60                   	pusha  
   1015d:	1e                   	push   %ds
   1015e:	06                   	push   %es
   1015f:	0f a0                	push   %fs
   10161:	0f a8                	push   %gs
   10163:	54                   	push   %esp
   10164:	e8 4a 1e 00 00       	call   11fb3 <do_handler_invalid_tss>
   10169:	83 c4 04             	add    $0x4,%esp
   1016c:	0f a9                	pop    %gs
   1016e:	0f a1                	pop    %fs
   10170:	07                   	pop    %es
   10171:	1f                   	pop    %ds
   10172:	61                   	popa   
   10173:	83 c4 08             	add    $0x8,%esp
   10176:	cf                   	iret   

00010177 <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   10177:	6a 0b                	push   $0xb
   10179:	60                   	pusha  
   1017a:	1e                   	push   %ds
   1017b:	06                   	push   %es
   1017c:	0f a0                	push   %fs
   1017e:	0f a8                	push   %gs
   10180:	54                   	push   %esp
   10181:	e8 49 1e 00 00       	call   11fcf <do_handler_segment_not_present>
   10186:	83 c4 04             	add    $0x4,%esp
   10189:	0f a9                	pop    %gs
   1018b:	0f a1                	pop    %fs
   1018d:	07                   	pop    %es
   1018e:	1f                   	pop    %ds
   1018f:	61                   	popa   
   10190:	83 c4 08             	add    $0x8,%esp
   10193:	cf                   	iret   

00010194 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10194:	6a 00                	push   $0x0
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 46 1e 00 00       	call   11feb <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 45 1e 00 00       	call   12007 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 dd 1e 00 00       	call   120bc <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 92 1f 00 00       	call   12190 <do_handler_floating_point_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 91 1f 00 00       	call   121ac <do_handler_aligment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 8e 1f 00 00       	call   121c8 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 8b 1f 00 00       	call   121e4 <do_handler_simd_floating_point_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 88 1f 00 00       	call   12200 <do_handler_virtualization_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   10286:	6a 15                	push   $0x15
   10288:	60                   	pusha  
   10289:	1e                   	push   %ds
   1028a:	06                   	push   %es
   1028b:	0f a0                	push   %fs
   1028d:	0f a8                	push   %gs
   1028f:	54                   	push   %esp
   10290:	e8 87 1f 00 00       	call   1221c <do_handler_control_protection_exception>
   10295:	83 c4 04             	add    $0x4,%esp
   10298:	0f a9                	pop    %gs
   1029a:	0f a1                	pop    %fs
   1029c:	07                   	pop    %es
   1029d:	1f                   	pop    %ds
   1029e:	61                   	popa   
   1029f:	83 c4 08             	add    $0x8,%esp
   102a2:	cf                   	iret   

000102a3 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a3:	6a 00                	push   $0x0
   102a5:	6a 20                	push   $0x20
   102a7:	60                   	pusha  
   102a8:	1e                   	push   %ds
   102a9:	06                   	push   %es
   102aa:	0f a0                	push   %fs
   102ac:	0f a8                	push   %gs
   102ae:	54                   	push   %esp
   102af:	e8 a7 23 00 00       	call   1265b <do_handler_timer>
   102b4:	83 c4 04             	add    $0x4,%esp
   102b7:	0f a9                	pop    %gs
   102b9:	0f a1                	pop    %fs
   102bb:	07                   	pop    %es
   102bc:	1f                   	pop    %ds
   102bd:	61                   	popa   
   102be:	83 c4 08             	add    $0x8,%esp
   102c1:	cf                   	iret   

000102c2 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c2:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102c6:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ca:	55                   	push   %ebp
    push %ebx
   102cb:	53                   	push   %ebx
    push %esi
   102cc:	56                   	push   %esi
    push %edi
   102cd:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102ce:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d0:	89 d4                	mov    %edx,%esp

    pop %edi
   102d2:	5f                   	pop    %edi
    pop %esi
   102d3:	5e                   	pop    %esi
    pop %ebx
   102d4:	5b                   	pop    %ebx
    pop %ebp
   102d5:	5d                   	pop    %ebp

    ret
   102d6:	c3                   	ret    

000102d7 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    pusha # 该指令会保存一系列指定的寄存器
   102d7:	60                   	pusha  

    push %ds
   102d8:	1e                   	push   %ds
    push %es
   102d9:	06                   	push   %es
    push %fs
   102da:	0f a0                	push   %fs
    push %gs
   102dc:	0f a8                	push   %gs

    pushf # push %eflags
   102de:	9c                   	pushf  
    
	# 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102df:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102e4:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102e6:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102e8:	8e e0                	mov    %eax,%fs
	mov %eax, %gs    
   102ea:	8e e8                	mov    %eax,%gs

    mov %esp, %eax  # 将这里作为结构体入口地址参数
   102ec:	89 e0                	mov    %esp,%eax
    push %eax
   102ee:	50                   	push   %eax

    call do_handler_syscall
   102ef:	e8 47 0c 00 00       	call   10f3b <do_handler_syscall>

    add $4, %esp    # esp 向上调整，跳过结构体地址参数
   102f4:	83 c4 04             	add    $0x4,%esp

    popf  # pop %eflags
   102f7:	9d                   	popf   
    pop %gs
   102f8:	0f a9                	pop    %gs
    pop %fs
   102fa:	0f a1                	pop    %fs
    pop %es
   102fc:	07                   	pop    %es
    pop %ds
   102fd:	1f                   	pop    %ds
    popa
   102fe:	61                   	popa   

    retf $(5 * 4)
   102ff:	ca 14 00             	lret   $0x14

00010302 <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10305:	8b 55 08             	mov    0x8(%ebp),%edx
   10308:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030b:	01 d0                	add    %edx,%eax
   1030d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10310:	8b 45 0c             	mov    0xc(%ebp),%eax
   10313:	f7 d8                	neg    %eax
   10315:	21 d0                	and    %edx,%eax
}
   10317:	5d                   	pop    %ebp
   10318:	c3                   	ret    

00010319 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   10319:	55                   	push   %ebp
   1031a:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	23 45 08             	and    0x8(%ebp),%eax
}
   10324:	5d                   	pop    %ebp
   10325:	c3                   	ret    

00010326 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10326:	55                   	push   %ebp
   10327:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10329:	8b 45 08             	mov    0x8(%ebp),%eax
   1032c:	0f 22 d8             	mov    %eax,%cr3
}
   1032f:	90                   	nop
   10330:	5d                   	pop    %ebp
   10331:	c3                   	ret    

00010332 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10332:	55                   	push   %ebp
   10333:	89 e5                	mov    %esp,%ebp
   10335:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	c1 e8 16             	shr    $0x16,%eax
   1033e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10341:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10344:	c9                   	leave  
   10345:	c3                   	ret    

00010346 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10346:	55                   	push   %ebp
   10347:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10350:	c0 ea 04             	shr    $0x4,%dl
   10353:	0f b6 d2             	movzbl %dl,%edx
   10356:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1035a:	c1 e1 04             	shl    $0x4,%ecx
   1035d:	09 ca                	or     %ecx,%edx
   1035f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10363:	c1 e0 0c             	shl    $0xc,%eax
   10366:	09 d0                	or     %edx,%eax
   10368:	c1 e0 0c             	shl    $0xc,%eax
}
   1036b:	5d                   	pop    %ebp
   1036c:	c3                   	ret    

0001036d <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   1036d:	55                   	push   %ebp
   1036e:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	c1 e8 0c             	shr    $0xc,%eax
   10376:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10387:	c0 ea 04             	shr    $0x4,%dl
   1038a:	0f b6 d2             	movzbl %dl,%edx
   1038d:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10391:	c1 e1 04             	shl    $0x4,%ecx
   10394:	09 ca                	or     %ecx,%edx
   10396:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1039a:	c1 e0 0c             	shl    $0xc,%eax
   1039d:	09 d0                	or     %edx,%eax
   1039f:	c1 e0 0c             	shl    $0xc,%eax
}
   103a2:	5d                   	pop    %ebp
   103a3:	c3                   	ret    

000103a4 <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   103a7:	ff 75 08             	pushl  0x8(%ebp)
   103aa:	e8 77 ff ff ff       	call   10326 <write_cr3>
   103af:	83 c4 04             	add    $0x4,%esp
}
   103b2:	90                   	nop
   103b3:	c9                   	leave  
   103b4:	c3                   	ret    

000103b5 <get_pte_perm>:


static inline uint32_t get_pte_perm(pte_t* pte) {
   103b5:	55                   	push   %ebp
   103b6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x3ff);
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 00                	mov    (%eax),%eax
   103bd:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   103c2:	5d                   	pop    %ebp
   103c3:	c3                   	ret    

000103c4 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   103c4:	55                   	push   %ebp
   103c5:	89 e5                	mov    %esp,%ebp
   103c7:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 ec 08             	sub    $0x8,%esp
   103d0:	68 70 38 01 00       	push   $0x13870
   103d5:	50                   	push   %eax
   103d6:	e8 6b 26 00 00       	call   12a46 <mutex_init>
   103db:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	8b 55 10             	mov    0x10(%ebp),%edx
   103e4:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	8b 55 14             	mov    0x14(%ebp),%edx
   103ed:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103f0:	8b 45 08             	mov    0x8(%ebp),%eax
   103f3:	8b 55 18             	mov    0x18(%ebp),%edx
   103f6:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103f9:	8b 45 08             	mov    0x8(%ebp),%eax
   103fc:	8b 40 60             	mov    0x60(%eax),%eax
   103ff:	ba 00 00 00 00       	mov    $0x0,%edx
   10404:	f7 75 18             	divl   0x18(%ebp)
   10407:	89 c2                	mov    %eax,%edx
   10409:	8b 45 08             	mov    0x8(%ebp),%eax
   1040c:	83 c0 54             	add    $0x54,%eax
   1040f:	6a 00                	push   $0x0
   10411:	52                   	push   %edx
   10412:	ff 75 0c             	pushl  0xc(%ebp)
   10415:	50                   	push   %eax
   10416:	e8 14 29 00 00       	call   12d2f <bitmap_init>
   1041b:	83 c4 10             	add    $0x10,%esp
}
   1041e:	90                   	nop
   1041f:	c9                   	leave  
   10420:	c3                   	ret    

00010421 <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   10421:	55                   	push   %ebp
   10422:	89 e5                	mov    %esp,%ebp
   10424:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10427:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	83 ec 0c             	sub    $0xc,%esp
   10434:	50                   	push   %eax
   10435:	e8 4d 26 00 00       	call   12a87 <mutex_acquire>
   1043a:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1043d:	8b 45 08             	mov    0x8(%ebp),%eax
   10440:	83 c0 54             	add    $0x54,%eax
   10443:	83 ec 04             	sub    $0x4,%esp
   10446:	ff 75 0c             	pushl  0xc(%ebp)
   10449:	6a 00                	push   $0x0
   1044b:	50                   	push   %eax
   1044c:	e8 5a 2a 00 00       	call   12eab <bitmap_alloc_nbits>
   10451:	83 c4 10             	add    $0x10,%esp
   10454:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10457:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1045b:	78 17                	js     10474 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	8b 50 5c             	mov    0x5c(%eax),%edx
   10463:	8b 45 08             	mov    0x8(%ebp),%eax
   10466:	8b 48 64             	mov    0x64(%eax),%ecx
   10469:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1046c:	0f af c1             	imul   %ecx,%eax
   1046f:	01 d0                	add    %edx,%eax
   10471:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	83 ec 0c             	sub    $0xc,%esp
   1047a:	50                   	push   %eax
   1047b:	e8 95 26 00 00       	call   12b15 <mutex_release>
   10480:	83 c4 10             	add    $0x10,%esp

    return addr;
   10483:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10486:	c9                   	leave  
   10487:	c3                   	ret    

00010488 <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10488:	55                   	push   %ebp
   10489:	89 e5                	mov    %esp,%ebp
   1048b:	53                   	push   %ebx
   1048c:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   1048f:	8b 45 08             	mov    0x8(%ebp),%eax
   10492:	83 ec 0c             	sub    $0xc,%esp
   10495:	50                   	push   %eax
   10496:	e8 ec 25 00 00       	call   12a87 <mutex_acquire>
   1049b:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1049e:	8b 45 08             	mov    0x8(%ebp),%eax
   104a1:	8b 40 5c             	mov    0x5c(%eax),%eax
   104a4:	8b 55 0c             	mov    0xc(%ebp),%edx
   104a7:	89 d1                	mov    %edx,%ecx
   104a9:	29 c1                	sub    %eax,%ecx
   104ab:	8b 45 08             	mov    0x8(%ebp),%eax
   104ae:	8b 58 64             	mov    0x64(%eax),%ebx
   104b1:	89 c8                	mov    %ecx,%eax
   104b3:	ba 00 00 00 00       	mov    $0x0,%edx
   104b8:	f7 f3                	div    %ebx
   104ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   104bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c0:	8b 55 08             	mov    0x8(%ebp),%edx
   104c3:	83 c2 54             	add    $0x54,%edx
   104c6:	6a 00                	push   $0x0
   104c8:	ff 75 10             	pushl  0x10(%ebp)
   104cb:	50                   	push   %eax
   104cc:	52                   	push   %edx
   104cd:	e8 b0 28 00 00       	call   12d82 <bitmap_set_bit>
   104d2:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104d5:	8b 45 08             	mov    0x8(%ebp),%eax
   104d8:	83 ec 0c             	sub    $0xc,%esp
   104db:	50                   	push   %eax
   104dc:	e8 34 26 00 00       	call   12b15 <mutex_release>
   104e1:	83 c4 10             	add    $0x10,%esp
}
   104e4:	90                   	nop
   104e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104e8:	c9                   	leave  
   104e9:	c3                   	ret    

000104ea <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104ea:	55                   	push   %ebp
   104eb:	89 e5                	mov    %esp,%ebp
   104ed:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104f0:	83 ec 0c             	sub    $0xc,%esp
   104f3:	68 7d 38 01 00       	push   $0x1387d
   104f8:	e8 92 32 00 00       	call   1378f <log_printf>
   104fd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10500:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10507:	eb 29                	jmp    10532 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   10509:	8b 45 08             	mov    0x8(%ebp),%eax
   1050c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1050f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10519:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1051c:	52                   	push   %edx
   1051d:	50                   	push   %eax
   1051e:	ff 75 f4             	pushl  -0xc(%ebp)
   10521:	68 89 38 01 00       	push   $0x13889
   10526:	e8 64 32 00 00       	call   1378f <log_printf>
   1052b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 50             	mov    0x50(%eax),%eax
   10538:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1053b:	7c cc                	jl     10509 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1053d:	83 ec 0c             	sub    $0xc,%esp
   10540:	68 97 38 01 00       	push   $0x13897
   10545:	e8 45 32 00 00       	call   1378f <log_printf>
   1054a:	83 c4 10             	add    $0x10,%esp
}
   1054d:	90                   	nop
   1054e:	c9                   	leave  
   1054f:	c3                   	ret    

00010550 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   10550:	55                   	push   %ebp
   10551:	89 e5                	mov    %esp,%ebp
   10553:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10556:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10564:	eb 16                	jmp    1057c <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10566:	8b 45 08             	mov    0x8(%ebp),%eax
   10569:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1056c:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10570:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10573:	01 d0                	add    %edx,%eax
   10575:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10578:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1057c:	8b 45 08             	mov    0x8(%ebp),%eax
   1057f:	8b 40 50             	mov    0x50(%eax),%eax
   10582:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10585:	7c df                	jl     10566 <total_mem_size+0x16>
    }
    return mem_size;
   10587:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1058a:	c9                   	leave  
   1058b:	c3                   	ret    

0001058c <test_alloc>:


static void test_alloc(void) {
   1058c:	55                   	push   %ebp
   1058d:	89 e5                	mov    %esp,%ebp
   1058f:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10595:	83 ec 0c             	sub    $0xc,%esp
   10598:	68 00 10 00 00       	push   $0x1000
   1059d:	68 00 00 04 00       	push   $0x40000
   105a2:	68 00 10 00 00       	push   $0x1000
   105a7:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   105ad:	50                   	push   %eax
   105ae:	8d 45 80             	lea    -0x80(%ebp),%eax
   105b1:	50                   	push   %eax
   105b2:	e8 0d fe ff ff       	call   103c4 <addr_alloc_init>
   105b7:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   105ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105c1:	eb 2b                	jmp    105ee <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   105c3:	83 ec 08             	sub    $0x8,%esp
   105c6:	6a 02                	push   $0x2
   105c8:	8d 45 80             	lea    -0x80(%ebp),%eax
   105cb:	50                   	push   %eax
   105cc:	e8 50 fe ff ff       	call   10421 <addr_alloc_page>
   105d1:	83 c4 10             	add    $0x10,%esp
   105d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105d7:	83 ec 08             	sub    $0x8,%esp
   105da:	ff 75 e8             	pushl  -0x18(%ebp)
   105dd:	68 99 38 01 00       	push   $0x13899
   105e2:	e8 a8 31 00 00       	call   1378f <log_printf>
   105e7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105ee:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105f2:	7e cf                	jle    105c3 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105f4:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10602:	eb 1f                	jmp    10623 <test_alloc+0x97>
        addr += 4096 * 2;
   10604:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   1060b:	83 ec 04             	sub    $0x4,%esp
   1060e:	6a 02                	push   $0x2
   10610:	ff 75 f0             	pushl  -0x10(%ebp)
   10613:	8d 45 80             	lea    -0x80(%ebp),%eax
   10616:	50                   	push   %eax
   10617:	e8 6c fe ff ff       	call   10488 <addr_free_page>
   1061c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   1061f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10623:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   10627:	7e db                	jle    10604 <test_alloc+0x78>
    }
}
   10629:	90                   	nop
   1062a:	c9                   	leave  
   1062b:	c3                   	ret    

0001062c <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   1062c:	55                   	push   %ebp
   1062d:	89 e5                	mov    %esp,%ebp
   1062f:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   10632:	ff 75 0c             	pushl  0xc(%ebp)
   10635:	e8 f8 fc ff ff       	call   10332 <pde_index>
   1063a:	83 c4 04             	add    $0x4,%esp
   1063d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10644:	8b 45 08             	mov    0x8(%ebp),%eax
   10647:	01 d0                	add    %edx,%eax
   10649:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   1064c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1064f:	0f b6 00             	movzbl (%eax),%eax
   10652:	83 e0 01             	and    $0x1,%eax
   10655:	84 c0                	test   %al,%al
   10657:	74 10                	je     10669 <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   10659:	ff 75 f0             	pushl  -0x10(%ebp)
   1065c:	e8 e5 fc ff ff       	call   10346 <pde_paddr>
   10661:	83 c4 04             	add    $0x4,%esp
   10664:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10667:	eb 57                	jmp    106c0 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   10669:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1066d:	75 07                	jne    10676 <find_pte+0x4a>
            return (pte_t*)0;
   1066f:	b8 00 00 00 00       	mov    $0x0,%eax
   10674:	eb 64                	jmp    106da <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10676:	83 ec 08             	sub    $0x8,%esp
   10679:	6a 01                	push   $0x1
   1067b:	68 00 60 01 00       	push   $0x16000
   10680:	e8 9c fd ff ff       	call   10421 <addr_alloc_page>
   10685:	83 c4 10             	add    $0x10,%esp
   10688:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1068b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1068f:	75 07                	jne    10698 <find_pte+0x6c>
            return (pte_t*)0;
   10691:	b8 00 00 00 00       	mov    $0x0,%eax
   10696:	eb 42                	jmp    106da <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10698:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1069b:	83 c8 07             	or     $0x7,%eax
   1069e:	89 c2                	mov    %eax,%edx
   106a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a3:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   106a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   106a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   106ab:	83 ec 04             	sub    $0x4,%esp
   106ae:	68 00 10 00 00       	push   $0x1000
   106b3:	6a 00                	push   $0x0
   106b5:	ff 75 f4             	pushl  -0xc(%ebp)
   106b8:	e8 63 2a 00 00       	call   13120 <kmemset>
   106bd:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   106c0:	83 ec 0c             	sub    $0xc,%esp
   106c3:	ff 75 0c             	pushl  0xc(%ebp)
   106c6:	e8 a2 fc ff ff       	call   1036d <pte_index>
   106cb:	83 c4 10             	add    $0x10,%esp
   106ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d8:	01 d0                	add    %edx,%eax
}
   106da:	c9                   	leave  
   106db:	c3                   	ret    

000106dc <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106dc:	55                   	push   %ebp
   106dd:	89 e5                	mov    %esp,%ebp
   106df:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106e9:	eb 6e                	jmp    10759 <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106eb:	83 ec 04             	sub    $0x4,%esp
   106ee:	6a 01                	push   $0x1
   106f0:	ff 75 0c             	pushl  0xc(%ebp)
   106f3:	ff 75 08             	pushl  0x8(%ebp)
   106f6:	e8 31 ff ff ff       	call   1062c <find_pte>
   106fb:	83 c4 10             	add    $0x10,%esp
   106fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   10701:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10705:	75 07                	jne    1070e <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10707:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1070c:	eb 53                	jmp    10761 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1070e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10711:	0f b6 00             	movzbl (%eax),%eax
   10714:	83 e0 01             	and    $0x1,%eax
   10717:	84 c0                	test   %al,%al
   10719:	74 1c                	je     10737 <memory_create_map+0x5b>
   1071b:	68 a9 38 01 00       	push   $0x138a9
   10720:	68 d4 39 01 00       	push   $0x139d4
   10725:	68 a3 00 00 00       	push   $0xa3
   1072a:	68 bc 38 01 00       	push   $0x138bc
   1072f:	e8 51 2d 00 00       	call   13485 <pannic>
   10734:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   10737:	8b 45 10             	mov    0x10(%ebp),%eax
   1073a:	0b 45 18             	or     0x18(%ebp),%eax
   1073d:	83 c8 01             	or     $0x1,%eax
   10740:	89 c2                	mov    %eax,%edx
   10742:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10745:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   10747:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1074e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10755:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10759:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1075c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1075f:	7c 8a                	jl     106eb <memory_create_map+0xf>
    }
}
   10761:	c9                   	leave  
   10762:	c3                   	ret    

00010763 <create_kernel_table>:


void create_kernel_table(void) {
   10763:	55                   	push   %ebp
   10764:	89 e5                	mov    %esp,%ebp
   10766:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   10769:	83 ec 04             	sub    $0x4,%esp
   1076c:	68 00 10 00 00       	push   $0x1000
   10771:	6a 00                	push   $0x0
   10773:	68 00 70 01 00       	push   $0x17000
   10778:	e8 a3 29 00 00       	call   13120 <kmemset>
   1077d:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10780:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10787:	e9 98 00 00 00       	jmp    10824 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   1078c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1078f:	c1 e0 04             	shl    $0x4,%eax
   10792:	05 00 50 01 00       	add    $0x15000,%eax
   10797:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1079a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079d:	8b 00                	mov    (%eax),%eax
   1079f:	83 ec 08             	sub    $0x8,%esp
   107a2:	68 00 10 00 00       	push   $0x1000
   107a7:	50                   	push   %eax
   107a8:	e8 6c fb ff ff       	call   10319 <down2>
   107ad:	83 c4 10             	add    $0x10,%esp
   107b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   107b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107b6:	8b 40 04             	mov    0x4(%eax),%eax
   107b9:	83 ec 08             	sub    $0x8,%esp
   107bc:	68 00 10 00 00       	push   $0x1000
   107c1:	50                   	push   %eax
   107c2:	e8 3b fb ff ff       	call   10302 <up2>
   107c7:	83 c4 10             	add    $0x10,%esp
   107ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   107cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d0:	8b 40 08             	mov    0x8(%eax),%eax
   107d3:	83 ec 08             	sub    $0x8,%esp
   107d6:	68 00 10 00 00       	push   $0x1000
   107db:	50                   	push   %eax
   107dc:	e8 38 fb ff ff       	call   10319 <down2>
   107e1:	83 c4 10             	add    $0x10,%esp
   107e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107ea:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107ed:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107f3:	85 c0                	test   %eax,%eax
   107f5:	0f 48 c2             	cmovs  %edx,%eax
   107f8:	c1 f8 0c             	sar    $0xc,%eax
   107fb:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10801:	8b 48 0c             	mov    0xc(%eax),%ecx
   10804:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10807:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1080a:	83 ec 0c             	sub    $0xc,%esp
   1080d:	51                   	push   %ecx
   1080e:	ff 75 e0             	pushl  -0x20(%ebp)
   10811:	52                   	push   %edx
   10812:	50                   	push   %eax
   10813:	68 00 70 01 00       	push   $0x17000
   10818:	e8 bf fe ff ff       	call   106dc <memory_create_map>
   1081d:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10820:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10824:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10827:	83 f8 03             	cmp    $0x3,%eax
   1082a:	0f 86 5c ff ff ff    	jbe    1078c <create_kernel_table+0x29>
    }
}
   10830:	90                   	nop
   10831:	c9                   	leave  
   10832:	c3                   	ret    

00010833 <memory_create_uvm>:

// 创建进程的初始页表
// 主要的工作创建页目录表，然后从内核页表中复制一部分
uint32_t memory_create_uvm(void) {
   10833:	55                   	push   %ebp
   10834:	89 e5                	mov    %esp,%ebp
   10836:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   10839:	83 ec 08             	sub    $0x8,%esp
   1083c:	6a 01                	push   $0x1
   1083e:	68 00 60 01 00       	push   $0x16000
   10843:	e8 d9 fb ff ff       	call   10421 <addr_alloc_page>
   10848:	83 c4 10             	add    $0x10,%esp
   1084b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   1084e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10852:	75 07                	jne    1085b <memory_create_uvm+0x28>
        return 0;
   10854:	b8 00 00 00 00       	mov    $0x0,%eax
   10859:	eb 5b                	jmp    108b6 <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   1085b:	83 ec 04             	sub    $0x4,%esp
   1085e:	68 00 10 00 00       	push   $0x1000
   10863:	6a 00                	push   $0x0
   10865:	ff 75 f0             	pushl  -0x10(%ebp)
   10868:	e8 b3 28 00 00       	call   13120 <kmemset>
   1086d:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10870:	83 ec 0c             	sub    $0xc,%esp
   10873:	68 00 00 00 80       	push   $0x80000000
   10878:	e8 b5 fa ff ff       	call   10332 <pde_index>
   1087d:	83 c4 10             	add    $0x10,%esp
   10880:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10883:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1088a:	eb 1f                	jmp    108ab <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10896:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10899:	01 c2                	add    %eax,%edx
   1089b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089e:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   108a5:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   108a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108ae:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   108b1:	77 d9                	ja     1088c <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   108b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   108b6:	c9                   	leave  
   108b7:	c3                   	ret    

000108b8 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   108b8:	55                   	push   %ebp
   108b9:	89 e5                	mov    %esp,%ebp
   108bb:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   108be:	83 ec 0c             	sub    $0xc,%esp
   108c1:	68 03 39 01 00       	push   $0x13903
   108c6:	e8 c4 2e 00 00       	call   1378f <log_printf>
   108cb:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   108ce:	83 ec 0c             	sub    $0xc,%esp
   108d1:	ff 75 08             	pushl  0x8(%ebp)
   108d4:	e8 11 fc ff ff       	call   104ea <show_mem_info>
   108d9:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108dc:	c7 45 f4 cf a1 02 00 	movl   $0x2a1cf,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108e3:	83 ec 0c             	sub    $0xc,%esp
   108e6:	ff 75 08             	pushl  0x8(%ebp)
   108e9:	e8 62 fc ff ff       	call   10550 <total_mem_size>
   108ee:	83 c4 10             	add    $0x10,%esp
   108f1:	2d 00 00 10 00       	sub    $0x100000,%eax
   108f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108f9:	83 ec 08             	sub    $0x8,%esp
   108fc:	68 00 10 00 00       	push   $0x1000
   10901:	ff 75 f0             	pushl  -0x10(%ebp)
   10904:	e8 10 fa ff ff       	call   10319 <down2>
   10909:	83 c4 10             	add    $0x10,%esp
   1090c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   1090f:	83 ec 04             	sub    $0x4,%esp
   10912:	ff 75 f0             	pushl  -0x10(%ebp)
   10915:	68 00 00 10 00       	push   $0x100000
   1091a:	68 0d 39 01 00       	push   $0x1390d
   1091f:	e8 6b 2e 00 00       	call   1378f <log_printf>
   10924:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10927:	83 ec 0c             	sub    $0xc,%esp
   1092a:	68 00 10 00 00       	push   $0x1000
   1092f:	ff 75 f0             	pushl  -0x10(%ebp)
   10932:	68 00 00 10 00       	push   $0x100000
   10937:	ff 75 f4             	pushl  -0xc(%ebp)
   1093a:	68 00 60 01 00       	push   $0x16000
   1093f:	e8 80 fa ff ff       	call   103c4 <addr_alloc_init>
   10944:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10947:	a1 60 60 01 00       	mov    0x16060,%eax
   1094c:	c1 e8 0c             	shr    $0xc,%eax
   1094f:	83 ec 0c             	sub    $0xc,%esp
   10952:	50                   	push   %eax
   10953:	e8 c1 23 00 00       	call   12d19 <bitmap_byte_count>
   10958:	83 c4 10             	add    $0x10,%esp
   1095b:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   1095e:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10965:	76 1c                	jbe    10983 <memory_init+0xcb>
   10967:	68 28 39 01 00       	push   $0x13928
   1096c:	68 e8 39 01 00       	push   $0x139e8
   10971:	68 fe 00 00 00       	push   $0xfe
   10976:	68 bc 38 01 00       	push   $0x138bc
   1097b:	e8 05 2b 00 00       	call   13485 <pannic>
   10980:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10983:	e8 db fd ff ff       	call   10763 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10988:	b8 00 70 01 00       	mov    $0x17000,%eax
   1098d:	83 ec 0c             	sub    $0xc,%esp
   10990:	50                   	push   %eax
   10991:	e8 0e fa ff ff       	call   103a4 <mmu_set_page_dir>
   10996:	83 c4 10             	add    $0x10,%esp
}
   10999:	90                   	nop
   1099a:	c9                   	leave  
   1099b:	c3                   	ret    

0001099c <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   1099c:	55                   	push   %ebp
   1099d:	89 e5                	mov    %esp,%ebp
   1099f:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   109a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   109a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   109a8:	68 00 10 00 00       	push   $0x1000
   109ad:	ff 75 10             	pushl  0x10(%ebp)
   109b0:	e8 4d f9 ff ff       	call   10302 <up2>
   109b5:	83 c4 08             	add    $0x8,%esp
   109b8:	c1 e8 0c             	shr    $0xc,%eax
   109bb:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   109be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109c5:	e9 8d 00 00 00       	jmp    10a57 <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   109ca:	83 ec 08             	sub    $0x8,%esp
   109cd:	6a 01                	push   $0x1
   109cf:	68 00 60 01 00       	push   $0x16000
   109d4:	e8 48 fa ff ff       	call   10421 <addr_alloc_page>
   109d9:	83 c4 10             	add    $0x10,%esp
   109dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   109df:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109e3:	75 17                	jne    109fc <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   109e5:	83 ec 0c             	sub    $0xc,%esp
   109e8:	68 50 39 01 00       	push   $0x13950
   109ed:	e8 9d 2d 00 00       	call   1378f <log_printf>
   109f2:	83 c4 10             	add    $0x10,%esp
            return 0;
   109f5:	b8 00 00 00 00       	mov    $0x0,%eax
   109fa:	eb 6c                	jmp    10a68 <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109fc:	8b 45 08             	mov    0x8(%ebp),%eax
   109ff:	83 ec 0c             	sub    $0xc,%esp
   10a02:	ff 75 14             	pushl  0x14(%ebp)
   10a05:	6a 01                	push   $0x1
   10a07:	ff 75 e8             	pushl  -0x18(%ebp)
   10a0a:	ff 75 f4             	pushl  -0xc(%ebp)
   10a0d:	50                   	push   %eax
   10a0e:	e8 c9 fc ff ff       	call   106dc <memory_create_map>
   10a13:	83 c4 20             	add    $0x20,%esp
   10a16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10a19:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a1d:	79 2d                	jns    10a4c <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   10a1f:	83 ec 0c             	sub    $0xc,%esp
   10a22:	68 70 39 01 00       	push   $0x13970
   10a27:	e8 63 2d 00 00       	call   1378f <log_printf>
   10a2c:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   10a2f:	83 ec 04             	sub    $0x4,%esp
   10a32:	ff 75 f0             	pushl  -0x10(%ebp)
   10a35:	ff 75 0c             	pushl  0xc(%ebp)
   10a38:	68 00 60 01 00       	push   $0x16000
   10a3d:	e8 46 fa ff ff       	call   10488 <addr_free_page>
   10a42:	83 c4 10             	add    $0x10,%esp

            return 0;
   10a45:	b8 00 00 00 00       	mov    $0x0,%eax
   10a4a:	eb 1c                	jmp    10a68 <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a4c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10a53:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a57:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a5a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a5d:	0f 8c 67 ff ff ff    	jl     109ca <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a63:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a68:	c9                   	leave  
   10a69:	c3                   	ret    

00010a6a <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常是0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a6a:	55                   	push   %ebp
   10a6b:	89 e5                	mov    %esp,%ebp
   10a6d:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10a70:	e8 5e 0b 00 00       	call   115d3 <task_current>
   10a75:	8b 40 6c             	mov    0x6c(%eax),%eax
   10a78:	ff 75 10             	pushl  0x10(%ebp)
   10a7b:	ff 75 0c             	pushl  0xc(%ebp)
   10a7e:	ff 75 08             	pushl  0x8(%ebp)
   10a81:	50                   	push   %eax
   10a82:	e8 15 ff ff ff       	call   1099c <memory_alloc_for_page_dir>
   10a87:	83 c4 10             	add    $0x10,%esp
}
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
   10a8f:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10a92:	e8 3c 0b 00 00       	call   115d3 <task_current>
   10a97:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   10a9a:	c9                   	leave  
   10a9b:	c3                   	ret    

00010a9c <memory_alloc_page>:


// 以页为单位，分配虚拟内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10a9c:	55                   	push   %ebp
   10a9d:	89 e5                	mov    %esp,%ebp
   10a9f:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10aa2:	83 ec 08             	sub    $0x8,%esp
   10aa5:	6a 01                	push   $0x1
   10aa7:	68 00 60 01 00       	push   $0x16000
   10aac:	e8 70 f9 ff ff       	call   10421 <addr_alloc_page>
   10ab1:	83 c4 10             	add    $0x10,%esp
   10ab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10ab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10aba:	c9                   	leave  
   10abb:	c3                   	ret    

00010abc <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的虚拟内存
void memory_free_page(uint32_t vaddr) {
   10abc:	55                   	push   %ebp
   10abd:	89 e5                	mov    %esp,%ebp
   10abf:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10ac2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac5:	85 c0                	test   %eax,%eax
   10ac7:	78 17                	js     10ae0 <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10ac9:	83 ec 04             	sub    $0x4,%esp
   10acc:	6a 01                	push   $0x1
   10ace:	ff 75 08             	pushl  0x8(%ebp)
   10ad1:	68 00 60 01 00       	push   $0x16000
   10ad6:	e8 ad f9 ff ff       	call   10488 <addr_free_page>
   10adb:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10ade:	eb 72                	jmp    10b52 <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10ae0:	e8 a7 ff ff ff       	call   10a8c <curr_page_dir>
   10ae5:	83 ec 04             	sub    $0x4,%esp
   10ae8:	6a 00                	push   $0x0
   10aea:	ff 75 08             	pushl  0x8(%ebp)
   10aed:	50                   	push   %eax
   10aee:	e8 39 fb ff ff       	call   1062c <find_pte>
   10af3:	83 c4 10             	add    $0x10,%esp
   10af6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10af9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10afd:	75 0d                	jne    10b0c <memory_free_page+0x50>
   10aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b02:	0f b6 00             	movzbl (%eax),%eax
   10b05:	83 e0 01             	and    $0x1,%eax
   10b08:	84 c0                	test   %al,%al
   10b0a:	75 1c                	jne    10b28 <memory_free_page+0x6c>
   10b0c:	68 a4 39 01 00       	push   $0x139a4
   10b11:	68 f4 39 01 00       	push   $0x139f4
   10b16:	68 46 01 00 00       	push   $0x146
   10b1b:	68 bc 38 01 00       	push   $0x138bc
   10b20:	e8 60 29 00 00       	call   13485 <pannic>
   10b25:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10b28:	83 ec 0c             	sub    $0xc,%esp
   10b2b:	ff 75 f4             	pushl  -0xc(%ebp)
   10b2e:	e8 4a f8 ff ff       	call   1037d <pte_paddr>
   10b33:	83 c4 10             	add    $0x10,%esp
   10b36:	83 ec 04             	sub    $0x4,%esp
   10b39:	6a 01                	push   $0x1
   10b3b:	50                   	push   %eax
   10b3c:	68 00 60 01 00       	push   $0x16000
   10b41:	e8 42 f9 ff ff       	call   10488 <addr_free_page>
   10b46:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10b52:	90                   	nop
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <kalloc>:

/*-- ------------------------------ --*/
// 申请一页物理内存。
static uint32_t kalloc() {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10b5b:	83 ec 08             	sub    $0x8,%esp
   10b5e:	6a 01                	push   $0x1
   10b60:	68 00 60 01 00       	push   $0x16000
   10b65:	e8 b7 f8 ff ff       	call   10421 <addr_alloc_page>
   10b6a:	83 c4 10             	add    $0x10,%esp
}
   10b6d:	c9                   	leave  
   10b6e:	c3                   	ret    

00010b6f <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr) {
   10b6f:	55                   	push   %ebp
   10b70:	89 e5                	mov    %esp,%ebp
   10b72:	83 ec 08             	sub    $0x8,%esp
    addr_free_page(&paddr_alloc, addr, 1);
   10b75:	83 ec 04             	sub    $0x4,%esp
   10b78:	6a 01                	push   $0x1
   10b7a:	ff 75 08             	pushl  0x8(%ebp)
   10b7d:	68 00 60 01 00       	push   $0x16000
   10b82:	e8 01 f9 ff ff       	call   10488 <addr_free_page>
   10b87:	83 c4 10             	add    $0x10,%esp
}
   10b8a:	90                   	nop
   10b8b:	c9                   	leave  
   10b8c:	c3                   	ret    

00010b8d <memory_destroy_uvm>:
/*-- ------------------------------ --*/


// 销毁用户空间内存
void memory_destroy_uvm(uint32_t page_dir) {
   10b8d:	55                   	push   %ebp
   10b8e:	89 e5                	mov    %esp,%ebp
   10b90:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(page_dir);
   10b93:	ff 75 08             	pushl  0x8(%ebp)
   10b96:	e8 97 f7 ff ff       	call   10332 <pde_index>
   10b9b:	83 c4 04             	add    $0x4,%esp
   10b9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t* pde = (pde_t*)page_dir + user_pde_start;
   10ba1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ba4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10bab:	8b 45 08             	mov    0x8(%ebp),%eax
   10bae:	01 d0                	add    %edx,%eax
   10bb0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   10bb3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10bb7:	75 1c                	jne    10bd5 <memory_destroy_uvm+0x48>
   10bb9:	68 c5 39 01 00       	push   $0x139c5
   10bbe:	68 08 3a 01 00       	push   $0x13a08
   10bc3:	68 61 01 00 00       	push   $0x161
   10bc8:	68 bc 38 01 00       	push   $0x138bc
   10bcd:	e8 b3 28 00 00       	call   13485 <pannic>
   10bd2:	83 c4 10             	add    $0x10,%esp

    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10bd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10bd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10bdb:	e9 87 00 00 00       	jmp    10c67 <memory_destroy_uvm+0xda>
        if (!pde->present) {
   10be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10be3:	0f b6 00             	movzbl (%eax),%eax
   10be6:	83 e0 01             	and    $0x1,%eax
   10be9:	84 c0                	test   %al,%al
   10beb:	74 71                	je     10c5e <memory_destroy_uvm+0xd1>
            continue;
        }

        pte_t* pte = (pte_t*)pde_paddr(pde);
   10bed:	83 ec 0c             	sub    $0xc,%esp
   10bf0:	ff 75 f4             	pushl  -0xc(%ebp)
   10bf3:	e8 4e f7 ff ff       	call   10346 <pde_paddr>
   10bf8:	83 c4 10             	add    $0x10,%esp
   10bfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10bfe:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10c05:	eb 32                	jmp    10c39 <memory_destroy_uvm+0xac>
            if (!pte->present) {
   10c07:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c0a:	0f b6 00             	movzbl (%eax),%eax
   10c0d:	83 e0 01             	and    $0x1,%eax
   10c10:	84 c0                	test   %al,%al
   10c12:	74 1c                	je     10c30 <memory_destroy_uvm+0xa3>
                continue;
            }

            // addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
            kfree(pte_paddr(pte));
   10c14:	83 ec 0c             	sub    $0xc,%esp
   10c17:	ff 75 ec             	pushl  -0x14(%ebp)
   10c1a:	e8 5e f7 ff ff       	call   1037d <pte_paddr>
   10c1f:	83 c4 10             	add    $0x10,%esp
   10c22:	83 ec 0c             	sub    $0xc,%esp
   10c25:	50                   	push   %eax
   10c26:	e8 44 ff ff ff       	call   10b6f <kfree>
   10c2b:	83 c4 10             	add    $0x10,%esp
   10c2e:	eb 01                	jmp    10c31 <memory_destroy_uvm+0xa4>
                continue;
   10c30:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10c31:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10c35:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10c39:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c40:	7e c5                	jle    10c07 <memory_destroy_uvm+0x7a>
        }

        // addr_free_page(&paddr_alloc, pde_paddr(pde), 1);
        kfree(pde_paddr(pde));
   10c42:	83 ec 0c             	sub    $0xc,%esp
   10c45:	ff 75 f4             	pushl  -0xc(%ebp)
   10c48:	e8 f9 f6 ff ff       	call   10346 <pde_paddr>
   10c4d:	83 c4 10             	add    $0x10,%esp
   10c50:	83 ec 0c             	sub    $0xc,%esp
   10c53:	50                   	push   %eax
   10c54:	e8 16 ff ff ff       	call   10b6f <kfree>
   10c59:	83 c4 10             	add    $0x10,%esp
   10c5c:	eb 01                	jmp    10c5f <memory_destroy_uvm+0xd2>
            continue;
   10c5e:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10c5f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c63:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c67:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c6e:	0f 8e 6c ff ff ff    	jle    10be0 <memory_destroy_uvm+0x53>
    }

    // addr_free_page(&paddr_alloc, page_dir, 1);
    kfree(page_dir);
   10c74:	83 ec 0c             	sub    $0xc,%esp
   10c77:	ff 75 08             	pushl  0x8(%ebp)
   10c7a:	e8 f0 fe ff ff       	call   10b6f <kfree>
   10c7f:	83 c4 10             	add    $0x10,%esp
}
   10c82:	90                   	nop
   10c83:	c9                   	leave  
   10c84:	c3                   	ret    

00010c85 <memory_copy_uvm>:


// 新建立一个页表，并把参数中的页表内容拷贝过去
// 0x80000000以下的部分不管
uint32_t memory_copy_uvm(uint32_t page_dir) {
   10c85:	55                   	push   %ebp
   10c86:	89 e5                	mov    %esp,%ebp
   10c88:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   10c8b:	e8 a3 fb ff ff       	call   10833 <memory_create_uvm>
   10c90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10c93:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10c97:	0f 84 1b 01 00 00    	je     10db8 <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项,0x80000000以上的
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10c9d:	83 ec 0c             	sub    $0xc,%esp
   10ca0:	68 00 00 00 80       	push   $0x80000000
   10ca5:	e8 88 f6 ff ff       	call   10332 <pde_index>
   10caa:	83 c4 10             	add    $0x10,%esp
   10cad:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t* pde = (pde_t*)page_dir + user_pde_start;
   10cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10cb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10cba:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbd:	01 d0                	add    %edx,%eax
   10cbf:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10cc2:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10cc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10cc8:	e9 d9 00 00 00       	jmp    10da6 <memory_copy_uvm+0x121>
        if (!pde->present) {
   10ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cd0:	0f b6 00             	movzbl (%eax),%eax
   10cd3:	83 e0 01             	and    $0x1,%eax
   10cd6:	84 c0                	test   %al,%al
   10cd8:	0f 84 bf 00 00 00    	je     10d9d <memory_copy_uvm+0x118>
            continue;
        }

        // 遍历页表
        pte_t* pte = (pte_t*)pde_paddr(pde);
   10cde:	83 ec 0c             	sub    $0xc,%esp
   10ce1:	ff 75 f4             	pushl  -0xc(%ebp)
   10ce4:	e8 5d f6 ff ff       	call   10346 <pde_paddr>
   10ce9:	83 c4 10             	add    $0x10,%esp
   10cec:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10cef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10cf6:	e9 93 00 00 00       	jmp    10d8e <memory_copy_uvm+0x109>
            if (!pte->present) {
   10cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10cfe:	0f b6 00             	movzbl (%eax),%eax
   10d01:	83 e0 01             	and    $0x1,%eax
   10d04:	84 c0                	test   %al,%al
   10d06:	74 7d                	je     10d85 <memory_copy_uvm+0x100>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10d08:	83 ec 08             	sub    $0x8,%esp
   10d0b:	6a 01                	push   $0x1
   10d0d:	68 00 60 01 00       	push   $0x16000
   10d12:	e8 0a f7 ff ff       	call   10421 <addr_alloc_page>
   10d17:	83 c4 10             	add    $0x10,%esp
   10d1a:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   10d1d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   10d21:	0f 84 94 00 00 00    	je     10dbb <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   10d27:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d2a:	c1 e0 16             	shl    $0x16,%eax
   10d2d:	89 c2                	mov    %eax,%edx
   10d2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d32:	c1 e0 0c             	shl    $0xc,%eax
   10d35:	09 d0                	or     %edx,%eax
   10d37:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   10d3a:	83 ec 0c             	sub    $0xc,%esp
   10d3d:	ff 75 ec             	pushl  -0x14(%ebp)
   10d40:	e8 70 f6 ff ff       	call   103b5 <get_pte_perm>
   10d45:	83 c4 10             	add    $0x10,%esp
   10d48:	89 c2                	mov    %eax,%edx
   10d4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10d4d:	83 ec 0c             	sub    $0xc,%esp
   10d50:	52                   	push   %edx
   10d51:	6a 01                	push   $0x1
   10d53:	ff 75 dc             	pushl  -0x24(%ebp)
   10d56:	ff 75 d8             	pushl  -0x28(%ebp)
   10d59:	50                   	push   %eax
   10d5a:	e8 7d f9 ff ff       	call   106dc <memory_create_map>
   10d5f:	83 c4 20             	add    $0x20,%esp
   10d62:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10d65:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10d69:	78 53                	js     10dbe <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kmemcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10d6b:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10d6e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10d71:	83 ec 04             	sub    $0x4,%esp
   10d74:	68 00 10 00 00       	push   $0x1000
   10d79:	52                   	push   %edx
   10d7a:	50                   	push   %eax
   10d7b:	e8 51 23 00 00       	call   130d1 <kmemcpy>
   10d80:	83 c4 10             	add    $0x10,%esp
   10d83:	eb 01                	jmp    10d86 <memory_copy_uvm+0x101>
                continue;
   10d85:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10d86:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10d8a:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10d8e:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10d95:	0f 8e 60 ff ff ff    	jle    10cfb <memory_copy_uvm+0x76>
   10d9b:	eb 01                	jmp    10d9e <memory_copy_uvm+0x119>
            continue;
   10d9d:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10d9e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10da2:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10da6:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10dad:	0f 8e 1a ff ff ff    	jle    10ccd <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10db3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10db6:	eb 20                	jmp    10dd8 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10db8:	90                   	nop
   10db9:	eb 04                	jmp    10dbf <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10dbb:	90                   	nop
   10dbc:	eb 01                	jmp    10dbf <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10dbe:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10dbf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dc3:	74 0e                	je     10dd3 <memory_copy_uvm+0x14e>
        memory_destroy_uvm(to_page_dir);
   10dc5:	83 ec 0c             	sub    $0xc,%esp
   10dc8:	ff 75 e4             	pushl  -0x1c(%ebp)
   10dcb:	e8 bd fd ff ff       	call   10b8d <memory_destroy_uvm>
   10dd0:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   10dd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10dd8:	c9                   	leave  
   10dd9:	c3                   	ret    

00010dda <memory_copy_uvm2>:


// 把from的页表内容拷贝至to
// 0x80000000以下的部分不管
uint32_t memory_copy_uvm2(uint32_t from, uint32_t to) {
   10dda:	55                   	push   %ebp
   10ddb:	89 e5                	mov    %esp,%ebp
   10ddd:	83 ec 28             	sub    $0x28,%esp
    // 复制基础页表
    if (to == 0) {
   10de0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10de4:	0f 84 15 01 00 00    	je     10eff <memory_copy_uvm2+0x125>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项,0x80000000以上的
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10dea:	68 00 00 00 80       	push   $0x80000000
   10def:	e8 3e f5 ff ff       	call   10332 <pde_index>
   10df4:	83 c4 04             	add    $0x4,%esp
   10df7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t* pde = (pde_t*)from + user_pde_start;
   10dfa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10dfd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10e04:	8b 45 08             	mov    0x8(%ebp),%eax
   10e07:	01 d0                	add    %edx,%eax
   10e09:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10e0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10e12:	e9 d6 00 00 00       	jmp    10eed <memory_copy_uvm2+0x113>
        if (!pde->present) {
   10e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e1a:	0f b6 00             	movzbl (%eax),%eax
   10e1d:	83 e0 01             	and    $0x1,%eax
   10e20:	84 c0                	test   %al,%al
   10e22:	0f 84 bc 00 00 00    	je     10ee4 <memory_copy_uvm2+0x10a>
            continue;
        }

        // 遍历页表
        pte_t* pte = (pte_t*)pde_paddr(pde);
   10e28:	ff 75 f4             	pushl  -0xc(%ebp)
   10e2b:	e8 16 f5 ff ff       	call   10346 <pde_paddr>
   10e30:	83 c4 04             	add    $0x4,%esp
   10e33:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10e36:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10e3d:	e9 93 00 00 00       	jmp    10ed5 <memory_copy_uvm2+0xfb>
            if (!pte->present) {
   10e42:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e45:	0f b6 00             	movzbl (%eax),%eax
   10e48:	83 e0 01             	and    $0x1,%eax
   10e4b:	84 c0                	test   %al,%al
   10e4d:	74 7d                	je     10ecc <memory_copy_uvm2+0xf2>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10e4f:	83 ec 08             	sub    $0x8,%esp
   10e52:	6a 01                	push   $0x1
   10e54:	68 00 60 01 00       	push   $0x16000
   10e59:	e8 c3 f5 ff ff       	call   10421 <addr_alloc_page>
   10e5e:	83 c4 10             	add    $0x10,%esp
   10e61:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (page == 0) {
   10e64:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e68:	0f 84 94 00 00 00    	je     10f02 <memory_copy_uvm2+0x128>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   10e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e71:	c1 e0 16             	shl    $0x16,%eax
   10e74:	89 c2                	mov    %eax,%edx
   10e76:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e79:	c1 e0 0c             	shl    $0xc,%eax
   10e7c:	09 d0                	or     %edx,%eax
   10e7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
            int err = memory_create_map((pde_t*)to, vaddr, page, 1, get_pte_perm(pte));
   10e81:	83 ec 0c             	sub    $0xc,%esp
   10e84:	ff 75 ec             	pushl  -0x14(%ebp)
   10e87:	e8 29 f5 ff ff       	call   103b5 <get_pte_perm>
   10e8c:	83 c4 10             	add    $0x10,%esp
   10e8f:	89 c2                	mov    %eax,%edx
   10e91:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e94:	83 ec 0c             	sub    $0xc,%esp
   10e97:	52                   	push   %edx
   10e98:	6a 01                	push   $0x1
   10e9a:	ff 75 e0             	pushl  -0x20(%ebp)
   10e9d:	ff 75 dc             	pushl  -0x24(%ebp)
   10ea0:	50                   	push   %eax
   10ea1:	e8 36 f8 ff ff       	call   106dc <memory_create_map>
   10ea6:	83 c4 20             	add    $0x20,%esp
   10ea9:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   10eac:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10eb0:	78 53                	js     10f05 <memory_copy_uvm2+0x12b>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kmemcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10eb2:	8b 55 dc             	mov    -0x24(%ebp),%edx
   10eb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10eb8:	83 ec 04             	sub    $0x4,%esp
   10ebb:	68 00 10 00 00       	push   $0x1000
   10ec0:	52                   	push   %edx
   10ec1:	50                   	push   %eax
   10ec2:	e8 0a 22 00 00       	call   130d1 <kmemcpy>
   10ec7:	83 c4 10             	add    $0x10,%esp
   10eca:	eb 01                	jmp    10ecd <memory_copy_uvm2+0xf3>
                continue;
   10ecc:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10ecd:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10ed1:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10ed5:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10edc:	0f 8e 60 ff ff ff    	jle    10e42 <memory_copy_uvm2+0x68>
   10ee2:	eb 01                	jmp    10ee5 <memory_copy_uvm2+0x10b>
            continue;
   10ee4:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10ee5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10ee9:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10eed:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10ef4:	0f 8e 1d ff ff ff    	jle    10e17 <memory_copy_uvm2+0x3d>
        }
    }
    return to;
   10efa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10efd:	eb 20                	jmp    10f1f <memory_copy_uvm2+0x145>
        goto copy_uvm_failed;
   10eff:	90                   	nop
   10f00:	eb 04                	jmp    10f06 <memory_copy_uvm2+0x12c>
                goto copy_uvm_failed;
   10f02:	90                   	nop
   10f03:	eb 01                	jmp    10f06 <memory_copy_uvm2+0x12c>
                goto copy_uvm_failed;
   10f05:	90                   	nop

copy_uvm_failed:
    if (to) {
   10f06:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f0a:	74 0e                	je     10f1a <memory_copy_uvm2+0x140>
        memory_destroy_uvm(to);
   10f0c:	83 ec 0c             	sub    $0xc,%esp
   10f0f:	ff 75 0c             	pushl  0xc(%ebp)
   10f12:	e8 76 fc ff ff       	call   10b8d <memory_destroy_uvm>
   10f17:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   10f1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f1f:	c9                   	leave  
   10f20:	c3                   	ret    

00010f21 <sys_print_msg>:
#include "tools/log.h"

typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

// test
void sys_print_msg(char* fmt, int arg) {
   10f21:	55                   	push   %ebp
   10f22:	89 e5                	mov    %esp,%ebp
   10f24:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10f27:	83 ec 08             	sub    $0x8,%esp
   10f2a:	ff 75 0c             	pushl  0xc(%ebp)
   10f2d:	ff 75 08             	pushl  0x8(%ebp)
   10f30:	e8 5a 28 00 00       	call   1378f <log_printf>
   10f35:	83 c4 10             	add    $0x10,%esp
}
   10f38:	90                   	nop
   10f39:	c9                   	leave  
   10f3a:	c3                   	ret    

00010f3b <do_handler_syscall>:
    [SYS_print_msg]  = (syscall_handler_t)sys_print_msg,
    [SYS_fork]       = (syscall_handler_t)sys_fork,
    [SYS_execve]     = (syscall_handler_t)sys_execve,
};

void do_handler_syscall(syscall_frame_t* frame) {
   10f3b:	55                   	push   %ebp
   10f3c:	89 e5                	mov    %esp,%ebp
   10f3e:	53                   	push   %ebx
   10f3f:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10f42:	8b 45 08             	mov    0x8(%ebp),%eax
   10f45:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f48:	83 f8 04             	cmp    $0x4,%eax
   10f4b:	77 4e                	ja     10f9b <do_handler_syscall+0x60>
        syscall_handler_t handler = sys_table[frame->func_id];
   10f4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f50:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f53:	8b 04 85 1c 3a 01 00 	mov    0x13a1c(,%eax,4),%eax
   10f5a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (handler) {
   10f5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f61:	74 38                	je     10f9b <do_handler_syscall+0x60>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f63:	8b 45 08             	mov    0x8(%ebp),%eax
   10f66:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f69:	89 c3                	mov    %eax,%ebx
   10f6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6e:	8b 40 48             	mov    0x48(%eax),%eax
   10f71:	89 c1                	mov    %eax,%ecx
   10f73:	8b 45 08             	mov    0x8(%ebp),%eax
   10f76:	8b 40 44             	mov    0x44(%eax),%eax
   10f79:	89 c2                	mov    %eax,%edx
   10f7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7e:	8b 40 40             	mov    0x40(%eax),%eax
   10f81:	53                   	push   %ebx
   10f82:	51                   	push   %ecx
   10f83:	52                   	push   %edx
   10f84:	50                   	push   %eax
   10f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f88:	ff d0                	call   *%eax
   10f8a:	83 c4 10             	add    $0x10,%esp
   10f8d:	89 45 f0             	mov    %eax,-0x10(%ebp)

            frame->eax = ret; // Integral and pointer return values appear in %eax.
   10f90:	8b 45 08             	mov    0x8(%ebp),%eax
   10f93:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f96:	89 50 30             	mov    %edx,0x30(%eax)

            return;
   10f99:	eb 30                	jmp    10fcb <do_handler_syscall+0x90>
        }
    }

    task_t* task = task_current();
   10f9b:	e8 33 06 00 00       	call   115d3 <task_current>
   10fa0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10fa3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa6:	8b 40 3c             	mov    0x3c(%eax),%eax
   10fa9:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10fac:	83 c2 04             	add    $0x4,%edx
   10faf:	83 ec 04             	sub    $0x4,%esp
   10fb2:	50                   	push   %eax
   10fb3:	52                   	push   %edx
   10fb4:	68 30 3a 01 00       	push   $0x13a30
   10fb9:	e8 d1 27 00 00       	call   1378f <log_printf>
   10fbe:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   10fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc4:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
   10fcb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fce:	c9                   	leave  
   10fcf:	c3                   	ret    

00010fd0 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10fd0:	55                   	push   %ebp
   10fd1:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10fdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10fe6:	90                   	nop
   10fe7:	5d                   	pop    %ebp
   10fe8:	c3                   	ret    

00010fe9 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10fe9:	55                   	push   %ebp
   10fea:	89 e5                	mov    %esp,%ebp
    return node->next;
   10fec:	8b 45 08             	mov    0x8(%ebp),%eax
   10fef:	8b 40 04             	mov    0x4(%eax),%eax
}
   10ff2:	5d                   	pop    %ebp
   10ff3:	c3                   	ret    

00010ff4 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10ff4:	55                   	push   %ebp
   10ff5:	89 e5                	mov    %esp,%ebp
    return list->count;
   10ff7:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffa:	8b 40 08             	mov    0x8(%eax),%eax
}
   10ffd:	5d                   	pop    %ebp
   10ffe:	c3                   	ret    

00010fff <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10fff:	55                   	push   %ebp
   11000:	89 e5                	mov    %esp,%ebp
    return list->first;
   11002:	8b 45 08             	mov    0x8(%ebp),%eax
   11005:	8b 00                	mov    (%eax),%eax
}
   11007:	5d                   	pop    %ebp
   11008:	c3                   	ret    

00011009 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11009:	55                   	push   %ebp
   1100a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1100c:	8b 45 08             	mov    0x8(%ebp),%eax
   1100f:	0f 22 d8             	mov    %eax,%cr3
}
   11012:	90                   	nop
   11013:	5d                   	pop    %ebp
   11014:	c3                   	ret    

00011015 <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   11015:	55                   	push   %ebp
   11016:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11018:	f4                   	hlt    
}
   11019:	90                   	nop
   1101a:	5d                   	pop    %ebp
   1101b:	c3                   	ret    

0001101c <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   1101c:	55                   	push   %ebp
   1101d:	89 e5                	mov    %esp,%ebp
   1101f:	83 ec 04             	sub    $0x4,%esp
   11022:	8b 45 08             	mov    0x8(%ebp),%eax
   11025:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   11029:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1102d:	0f 00 d8             	ltr    %ax
}
   11030:	90                   	nop
   11031:	c9                   	leave  
   11032:	c3                   	ret    

00011033 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   11033:	55                   	push   %ebp
   11034:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11036:	ff 75 08             	pushl  0x8(%ebp)
   11039:	e8 cb ff ff ff       	call   11009 <write_cr3>
   1103e:	83 c4 04             	add    $0x4,%esp
}
   11041:	90                   	nop
   11042:	c9                   	leave  
   11043:	c3                   	ret    

00011044 <tss_init>:

// 空闲进程的栈, 不是广义上的内核栈
static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   11044:	55                   	push   %ebp
   11045:	89 e5                	mov    %esp,%ebp
   11047:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   1104a:	e8 cb 0b 00 00       	call   11c1a <gdt_alloc_desc>
   1104f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   11052:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11056:	79 1a                	jns    11072 <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   11058:	83 ec 0c             	sub    $0xc,%esp
   1105b:	68 50 3a 01 00       	push   $0x13a50
   11060:	e8 2a 27 00 00       	call   1378f <log_printf>
   11065:	83 c4 10             	add    $0x10,%esp
        return -1;
   11068:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1106d:	e9 58 01 00 00       	jmp    111ca <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   11072:	8b 45 08             	mov    0x8(%ebp),%eax
   11075:	83 c0 50             	add    $0x50,%eax
   11078:	68 89 00 00 00       	push   $0x89
   1107d:	6a 68                	push   $0x68
   1107f:	50                   	push   %eax
   11080:	ff 75 ec             	pushl  -0x14(%ebp)
   11083:	e8 09 0a 00 00       	call   11a91 <segment_desc_set>
   11088:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   1108b:	8b 45 08             	mov    0x8(%ebp),%eax
   1108e:	83 c0 50             	add    $0x50,%eax
   11091:	83 ec 04             	sub    $0x4,%esp
   11094:	6a 68                	push   $0x68
   11096:	6a 00                	push   $0x0
   11098:	50                   	push   %eax
   11099:	e8 82 20 00 00       	call   13120 <kmemset>
   1109e:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间，大小为PGSIZE
    uint32_t kernel_stack = memory_alloc_page();
   110a1:	e8 f6 f9 ff ff       	call   10a9c <memory_alloc_page>
   110a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   110a9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   110ad:	0f 84 ec 00 00 00    	je     1119f <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   110b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   110b6:	83 e0 01             	and    $0x1,%eax
   110b9:	85 c0                	test   %eax,%eax
   110bb:	74 10                	je     110cd <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   110bd:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110c4:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110cb:	eb 16                	jmp    110e3 <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   110cd:	a1 a0 81 01 00       	mov    0x181a0,%eax
   110d2:	83 c8 03             	or     $0x3,%eax
   110d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   110d8:	a1 a4 81 01 00       	mov    0x181a4,%eax
   110dd:	83 c8 03             	or     $0x3,%eax
   110e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   110e3:	8b 45 08             	mov    0x8(%ebp),%eax
   110e6:	8b 55 10             	mov    0x10(%ebp),%edx
   110e9:	89 50 70             	mov    %edx,0x70(%eax)
    task->tss.esp    = esp;
   110ec:	8b 45 08             	mov    0x8(%ebp),%eax
   110ef:	8b 55 14             	mov    0x14(%ebp),%edx
   110f2:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   110f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110fb:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11101:	8b 45 08             	mov    0x8(%ebp),%eax
   11104:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.ss     = data_sel;
   11107:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1110a:	8b 45 08             	mov    0x8(%ebp),%eax
   1110d:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   11113:	8b 45 08             	mov    0x8(%ebp),%eax
   11116:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   1111d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   11129:	8b 45 08             	mov    0x8(%ebp),%eax
   1112c:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   11132:	8b 45 08             	mov    0x8(%ebp),%eax
   11135:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   11144:	8b 45 08             	mov    0x8(%ebp),%eax
   11147:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   1114d:	8b 45 08             	mov    0x8(%ebp),%eax
   11150:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   11156:	8b 45 08             	mov    0x8(%ebp),%eax
   11159:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.cs     = code_sel;
   1115f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11162:	8b 45 08             	mov    0x8(%ebp),%eax
   11165:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   1116b:	8b 45 08             	mov    0x8(%ebp),%eax
   1116e:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   11175:	e8 b9 f6 ff ff       	call   10833 <memory_create_uvm>
   1117a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   1117d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11181:	74 1f                	je     111a2 <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   11183:	8b 45 08             	mov    0x8(%ebp),%eax
   11186:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11189:	89 50 6c             	mov    %edx,0x6c(%eax)

    task->tss_sel    = tss_sel;
   1118c:	8b 45 08             	mov    0x8(%ebp),%eax
   1118f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11192:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
    return 0;
   11198:	b8 00 00 00 00       	mov    $0x0,%eax
   1119d:	eb 2b                	jmp    111ca <tss_init+0x186>
        goto tss_init_failed;
   1119f:	90                   	nop
   111a0:	eb 01                	jmp    111a3 <tss_init+0x15f>
        goto tss_init_failed;
   111a2:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   111a3:	83 ec 0c             	sub    $0xc,%esp
   111a6:	ff 75 ec             	pushl  -0x14(%ebp)
   111a9:	e8 e1 0a 00 00       	call   11c8f <gdt_free_sel>
   111ae:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   111b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111b5:	74 0e                	je     111c5 <tss_init+0x181>
        memory_free_page(kernel_stack);
   111b7:	83 ec 0c             	sub    $0xc,%esp
   111ba:	ff 75 e8             	pushl  -0x18(%ebp)
   111bd:	e8 fa f8 ff ff       	call   10abc <memory_free_page>
   111c2:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   111c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111ca:	c9                   	leave  
   111cb:	c3                   	ret    

000111cc <task_init>:
// task_t* task:     已申请内存的进程结构体
// const char* name: 进程名
// int flag:         TASK_FLAG_USER 为用户进程，TASK_FLAG_SYSTEM 为内核进程
// uint32_t entry:   进程入口地址
// uint32_t esp:     进程栈底指针
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   111cc:	55                   	push   %ebp
   111cd:	89 e5                	mov    %esp,%ebp
   111cf:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   111d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111d6:	75 19                	jne    111f1 <task_init+0x25>
   111d8:	68 62 3a 01 00       	push   $0x13a62
   111dd:	68 f4 3a 01 00       	push   $0x13af4
   111e2:	6a 57                	push   $0x57
   111e4:	68 78 3a 01 00       	push   $0x13a78
   111e9:	e8 97 22 00 00       	call   13485 <pannic>
   111ee:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   111f1:	ff 75 18             	pushl  0x18(%ebp)
   111f4:	ff 75 14             	pushl  0x14(%ebp)
   111f7:	ff 75 10             	pushl  0x10(%ebp)
   111fa:	ff 75 08             	pushl  0x8(%ebp)
   111fd:	e8 42 fe ff ff       	call   11044 <tss_init>
   11202:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   11205:	8b 45 08             	mov    0x8(%ebp),%eax
   11208:	83 c0 04             	add    $0x4,%eax
   1120b:	83 ec 04             	sub    $0x4,%esp
   1120e:	6a 20                	push   $0x20
   11210:	ff 75 0c             	pushl  0xc(%ebp)
   11213:	50                   	push   %eax
   11214:	e8 93 1d 00 00       	call   12fac <kstrncpy>
   11219:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1121c:	8b 45 08             	mov    0x8(%ebp),%eax
   1121f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1122f:	8b 45 08             	mov    0x8(%ebp),%eax
   11232:	c7 40 48 0a 00 00 00 	movl   $0xa,0x48(%eax)
    task->slice_ticks = task->time_ticks;
   11239:	8b 45 08             	mov    0x8(%ebp),%eax
   1123c:	8b 50 48             	mov    0x48(%eax),%edx
   1123f:	8b 45 08             	mov    0x8(%ebp),%eax
   11242:	89 50 4c             	mov    %edx,0x4c(%eax)

    task->parent = (task_t*)0;
   11245:	8b 45 08             	mov    0x8(%ebp),%eax
   11248:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)

    list_node_init(&task->all_node);
   1124f:	8b 45 08             	mov    0x8(%ebp),%eax
   11252:	83 c0 34             	add    $0x34,%eax
   11255:	83 ec 0c             	sub    $0xc,%esp
   11258:	50                   	push   %eax
   11259:	e8 72 fd ff ff       	call   10fd0 <list_node_init>
   1125e:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11261:	8b 45 08             	mov    0x8(%ebp),%eax
   11264:	83 c0 2c             	add    $0x2c,%eax
   11267:	83 ec 0c             	sub    $0xc,%esp
   1126a:	50                   	push   %eax
   1126b:	e8 60 fd ff ff       	call   10fd0 <list_node_init>
   11270:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   11273:	8b 45 08             	mov    0x8(%ebp),%eax
   11276:	83 c0 3c             	add    $0x3c,%eax
   11279:	83 ec 0c             	sub    $0xc,%esp
   1127c:	50                   	push   %eax
   1127d:	e8 4e fd ff ff       	call   10fd0 <list_node_init>
   11282:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   11285:	e8 89 13 00 00       	call   12613 <irq_enter_protection>
   1128a:	89 45 f4             	mov    %eax,-0xc(%ebp)


    task->pid = (uint32_t)task;
   1128d:	8b 55 08             	mov    0x8(%ebp),%edx
   11290:	8b 45 08             	mov    0x8(%ebp),%eax
   11293:	89 50 24             	mov    %edx,0x24(%eax)

    task_set_ready(task);
   11296:	83 ec 0c             	sub    $0xc,%esp
   11299:	ff 75 08             	pushl  0x8(%ebp)
   1129c:	e8 90 02 00 00       	call   11531 <task_set_ready>
   112a1:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   112a4:	8b 45 08             	mov    0x8(%ebp),%eax
   112a7:	83 c0 34             	add    $0x34,%eax
   112aa:	83 ec 08             	sub    $0x8,%esp
   112ad:	50                   	push   %eax
   112ae:	68 10 80 01 00       	push   $0x18010
   112b3:	e8 98 22 00 00       	call   13550 <list_insert_back>
   112b8:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   112bb:	83 ec 0c             	sub    $0xc,%esp
   112be:	ff 75 f4             	pushl  -0xc(%ebp)
   112c1:	e8 65 13 00 00       	call   1262b <irq_leave_protection>
   112c6:	83 c4 10             	add    $0x10,%esp

    return 0;
   112c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   112ce:	c9                   	leave  
   112cf:	c3                   	ret    

000112d0 <task_uninit>:


void task_uninit(task_t* task) {
   112d0:	55                   	push   %ebp
   112d1:	89 e5                	mov    %esp,%ebp
   112d3:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel) {
   112d6:	8b 45 08             	mov    0x8(%ebp),%eax
   112d9:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   112df:	85 c0                	test   %eax,%eax
   112e1:	74 15                	je     112f8 <task_uninit+0x28>
        gdt_free_sel(task->tss_sel);
   112e3:	8b 45 08             	mov    0x8(%ebp),%eax
   112e6:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   112ec:	83 ec 0c             	sub    $0xc,%esp
   112ef:	50                   	push   %eax
   112f0:	e8 9a 09 00 00       	call   11c8f <gdt_free_sel>
   112f5:	83 c4 10             	add    $0x10,%esp
    }

    // 把内核栈释放掉
    if (task->tss.esp0) {
   112f8:	8b 45 08             	mov    0x8(%ebp),%eax
   112fb:	8b 40 54             	mov    0x54(%eax),%eax
   112fe:	85 c0                	test   %eax,%eax
   11300:	74 17                	je     11319 <task_uninit+0x49>
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   11302:	8b 45 08             	mov    0x8(%ebp),%eax
   11305:	8b 40 54             	mov    0x54(%eax),%eax
   11308:	2d 00 10 00 00       	sub    $0x1000,%eax
   1130d:	83 ec 0c             	sub    $0xc,%esp
   11310:	50                   	push   %eax
   11311:	e8 a6 f7 ff ff       	call   10abc <memory_free_page>
   11316:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {
   11319:	8b 45 08             	mov    0x8(%ebp),%eax
   1131c:	8b 40 6c             	mov    0x6c(%eax),%eax
   1131f:	85 c0                	test   %eax,%eax
   11321:	74 12                	je     11335 <task_uninit+0x65>
        memory_destroy_uvm(task->tss.cr3);
   11323:	8b 45 08             	mov    0x8(%ebp),%eax
   11326:	8b 40 6c             	mov    0x6c(%eax),%eax
   11329:	83 ec 0c             	sub    $0xc,%esp
   1132c:	50                   	push   %eax
   1132d:	e8 5b f8 ff ff       	call   10b8d <memory_destroy_uvm>
   11332:	83 c4 10             	add    $0x10,%esp
    }

    kmemset(task, 0, sizeof(task_t));
   11335:	83 ec 04             	sub    $0x4,%esp
   11338:	68 bc 00 00 00       	push   $0xbc
   1133d:	6a 00                	push   $0x0
   1133f:	ff 75 08             	pushl  0x8(%ebp)
   11342:	e8 d9 1d 00 00       	call   13120 <kmemset>
   11347:	83 c4 10             	add    $0x10,%esp
}
   1134a:	90                   	nop
   1134b:	c9                   	leave  
   1134c:	c3                   	ret    

0001134d <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   1134d:	55                   	push   %ebp
   1134e:	89 e5                	mov    %esp,%ebp
   11350:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   11353:	8b 45 0c             	mov    0xc(%ebp),%eax
   11356:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   1135c:	83 ec 0c             	sub    $0xc,%esp
   1135f:	50                   	push   %eax
   11360:	e8 a1 08 00 00       	call   11c06 <swtch_to_tss>
   11365:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   11368:	90                   	nop
   11369:	c9                   	leave  
   1136a:	c3                   	ret    

0001136b <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   1136b:	55                   	push   %ebp
   1136c:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   1136e:	e8 a2 fc ff ff       	call   11015 <hlt>
   11373:	eb f9                	jmp    1136e <idle_task_entry+0x3>

00011375 <task_manager_init>:
    }
}


void task_manager_init(void) {
   11375:	55                   	push   %ebp
   11376:	89 e5                	mov    %esp,%ebp
   11378:	83 ec 18             	sub    $0x18,%esp
    kmemset(task_table, 0, sizeof(task_table));
   1137b:	83 ec 04             	sub    $0x4,%esp
   1137e:	68 00 5e 00 00       	push   $0x5e00
   11383:	6a 00                	push   $0x0
   11385:	68 c0 81 01 00       	push   $0x181c0
   1138a:	e8 91 1d 00 00       	call   13120 <kmemset>
   1138f:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex, "task_table");
   11392:	83 ec 08             	sub    $0x8,%esp
   11395:	68 bd 3a 01 00       	push   $0x13abd
   1139a:	68 c0 df 01 00       	push   $0x1dfc0
   1139f:	e8 a2 16 00 00       	call   12a46 <mutex_init>
   113a4:	83 c4 10             	add    $0x10,%esp

    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   113a7:	e8 6e 08 00 00       	call   11c1a <gdt_alloc_desc>
   113ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   113af:	68 f2 40 00 00       	push   $0x40f2
   113b4:	6a ff                	push   $0xffffffff
   113b6:	6a 00                	push   $0x0
   113b8:	ff 75 f4             	pushl  -0xc(%ebp)
   113bb:	e8 d1 06 00 00       	call   11a91 <segment_desc_set>
   113c0:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   113c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113c6:	a3 a4 81 01 00       	mov    %eax,0x181a4

    sel = gdt_alloc_desc();
   113cb:	e8 4a 08 00 00       	call   11c1a <gdt_alloc_desc>
   113d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   113d3:	68 fa 40 00 00       	push   $0x40fa
   113d8:	6a ff                	push   $0xffffffff
   113da:	6a 00                	push   $0x0
   113dc:	ff 75 f4             	pushl  -0xc(%ebp)
   113df:	e8 ad 06 00 00       	call   11a91 <segment_desc_set>
   113e4:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   113e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113ea:	a3 a0 81 01 00       	mov    %eax,0x181a0

    list_init(&task_manager.ready_list);
   113ef:	83 ec 0c             	sub    $0xc,%esp
   113f2:	68 04 80 01 00       	push   $0x18004
   113f7:	e8 d2 20 00 00       	call   134ce <list_init>
   113fc:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   113ff:	83 ec 0c             	sub    $0xc,%esp
   11402:	68 10 80 01 00       	push   $0x18010
   11407:	e8 c2 20 00 00       	call   134ce <list_init>
   1140c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1140f:	83 ec 0c             	sub    $0xc,%esp
   11412:	68 1c 80 01 00       	push   $0x1801c
   11417:	e8 b2 20 00 00       	call   134ce <list_init>
   1141c:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   1141f:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   11426:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   11429:	b8 20 e0 01 00       	mov    $0x1e020,%eax
    task_init(&task_manager.idle_task, 
   1142e:	05 00 04 00 00       	add    $0x400,%eax
   11433:	ba 6b 13 01 00       	mov    $0x1136b,%edx
   11438:	83 ec 0c             	sub    $0xc,%esp
   1143b:	50                   	push   %eax
   1143c:	52                   	push   %edx
   1143d:	6a 01                	push   $0x1
   1143f:	68 c8 3a 01 00       	push   $0x13ac8
   11444:	68 e4 80 01 00       	push   $0x180e4
   11449:	e8 7e fd ff ff       	call   111cc <task_init>
   1144e:	83 c4 20             	add    $0x20,%esp
    );

    task_manager.curr_task = &task_manager.idle_task;
   11451:	c7 05 00 80 01 00 e4 	movl   $0x180e4,0x18000
   11458:	80 01 00 
}
   1145b:	90                   	nop
   1145c:	c9                   	leave  
   1145d:	c3                   	ret    

0001145e <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   1145e:	55                   	push   %ebp
   1145f:	89 e5                	mov    %esp,%ebp
   11461:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   11464:	ba cf a1 02 00       	mov    $0x2a1cf,%edx
   11469:	b8 40 9f 02 00       	mov    $0x29f40,%eax
   1146e:	29 c2                	sub    %eax,%edx
   11470:	89 d0                	mov    %edx,%eax
   11472:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11475:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   1147c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1147f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11482:	72 1c                	jb     114a0 <task_first_init+0x42>
   11484:	68 d2 3a 01 00       	push   $0x13ad2
   11489:	68 00 3b 01 00       	push   $0x13b00
   1148e:	68 c4 00 00 00       	push   $0xc4
   11493:	68 78 3a 01 00       	push   $0x13a78
   11498:	e8 e8 1f 00 00       	call   13485 <pannic>
   1149d:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   114a0:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", TASK_FLAGS_USER, (uint32_t)first_start, first_start + alloc_size);
   114a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   114aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114ad:	01 d0                	add    %edx,%eax
   114af:	83 ec 0c             	sub    $0xc,%esp
   114b2:	50                   	push   %eax
   114b3:	ff 75 ec             	pushl  -0x14(%ebp)
   114b6:	6a 00                	push   $0x0
   114b8:	68 e9 3a 01 00       	push   $0x13ae9
   114bd:	68 28 80 01 00       	push   $0x18028
   114c2:	e8 05 fd ff ff       	call   111cc <task_init>
   114c7:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   114ca:	a1 e0 80 01 00       	mov    0x180e0,%eax
   114cf:	0f b7 c0             	movzwl %ax,%eax
   114d2:	83 ec 0c             	sub    $0xc,%esp
   114d5:	50                   	push   %eax
   114d6:	e8 41 fb ff ff       	call   1101c <write_tr>
   114db:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   114de:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   114e5:	80 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   114e8:	a1 94 80 01 00       	mov    0x18094,%eax
   114ed:	83 ec 0c             	sub    $0xc,%esp
   114f0:	50                   	push   %eax
   114f1:	e8 3d fb ff ff       	call   11033 <mmu_set_page_dir>
   114f6:	83 c4 10             	add    $0x10,%esp

    // 给该进程新开个一级页表，也就是类似于用户页表的东西
    // 并在这个一级页表里申请 alloc_size 大小的内存
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   114f9:	83 ec 04             	sub    $0x4,%esp
   114fc:	6a 07                	push   $0x7
   114fe:	ff 75 f0             	pushl  -0x10(%ebp)
   11501:	ff 75 ec             	pushl  -0x14(%ebp)
   11504:	e8 61 f5 ff ff       	call   10a6a <memory_alloc_page_for>
   11509:	83 c4 10             	add    $0x10,%esp

    // 把这段代码拷贝到上面生成的页表里
    // 相当于就是把内存搬运到 virtual 0x80000000+ 了
    kmemcpy((void*)first_start, s_first_task, copy_size);
   1150c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1150f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11512:	83 ec 04             	sub    $0x4,%esp
   11515:	52                   	push   %edx
   11516:	68 40 9f 02 00       	push   $0x29f40
   1151b:	50                   	push   %eax
   1151c:	e8 b0 1b 00 00       	call   130d1 <kmemcpy>
   11521:	83 c4 10             	add    $0x10,%esp
}
   11524:	90                   	nop
   11525:	c9                   	leave  
   11526:	c3                   	ret    

00011527 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   11527:	55                   	push   %ebp
   11528:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1152a:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   1152f:	5d                   	pop    %ebp
   11530:	c3                   	ret    

00011531 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   11531:	55                   	push   %ebp
   11532:	89 e5                	mov    %esp,%ebp
   11534:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   11537:	81 7d 08 e4 80 01 00 	cmpl   $0x180e4,0x8(%ebp)
   1153e:	74 22                	je     11562 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   11540:	8b 45 08             	mov    0x8(%ebp),%eax
   11543:	83 c0 2c             	add    $0x2c,%eax
   11546:	83 ec 08             	sub    $0x8,%esp
   11549:	50                   	push   %eax
   1154a:	68 04 80 01 00       	push   $0x18004
   1154f:	e8 fc 1f 00 00       	call   13550 <list_insert_back>
   11554:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11557:	8b 45 08             	mov    0x8(%ebp),%eax
   1155a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11560:	eb 01                	jmp    11563 <task_set_ready+0x32>
        return;
   11562:	90                   	nop
}
   11563:	c9                   	leave  
   11564:	c3                   	ret    

00011565 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   11565:	55                   	push   %ebp
   11566:	89 e5                	mov    %esp,%ebp
   11568:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1156b:	81 7d 08 e4 80 01 00 	cmpl   $0x180e4,0x8(%ebp)
   11572:	74 19                	je     1158d <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   11574:	8b 45 08             	mov    0x8(%ebp),%eax
   11577:	83 c0 2c             	add    $0x2c,%eax
   1157a:	83 ec 08             	sub    $0x8,%esp
   1157d:	50                   	push   %eax
   1157e:	68 04 80 01 00       	push   $0x18004
   11583:	e8 a4 20 00 00       	call   1362c <list_remove>
   11588:	83 c4 10             	add    $0x10,%esp
   1158b:	eb 01                	jmp    1158e <task_set_blocked+0x29>
        return;
   1158d:	90                   	nop
}
   1158e:	c9                   	leave  
   1158f:	c3                   	ret    

00011590 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   11590:	55                   	push   %ebp
   11591:	89 e5                	mov    %esp,%ebp
   11593:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   11596:	68 04 80 01 00       	push   $0x18004
   1159b:	e8 54 fa ff ff       	call   10ff4 <list_size>
   115a0:	83 c4 04             	add    $0x4,%esp
   115a3:	85 c0                	test   %eax,%eax
   115a5:	75 07                	jne    115ae <task_next_run+0x1e>
        return &task_manager.idle_task;
   115a7:	b8 e4 80 01 00       	mov    $0x180e4,%eax
   115ac:	eb 23                	jmp    115d1 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   115ae:	68 04 80 01 00       	push   $0x18004
   115b3:	e8 47 fa ff ff       	call   10fff <list_first>
   115b8:	83 c4 04             	add    $0x4,%esp
   115bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   115be:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   115c2:	74 08                	je     115cc <task_next_run+0x3c>
   115c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115c7:	83 e8 2c             	sub    $0x2c,%eax
   115ca:	eb 05                	jmp    115d1 <task_next_run+0x41>
   115cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   115d1:	c9                   	leave  
   115d2:	c3                   	ret    

000115d3 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   115d3:	55                   	push   %ebp
   115d4:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   115d6:	a1 00 80 01 00       	mov    0x18000,%eax
}
   115db:	5d                   	pop    %ebp
   115dc:	c3                   	ret    

000115dd <sys_sched_yield>:

// 当前进程主动放弃CPU
int sys_sched_yield(void) {
   115dd:	55                   	push   %ebp
   115de:	89 e5                	mov    %esp,%ebp
   115e0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   115e3:	e8 2b 10 00 00       	call   12613 <irq_enter_protection>
   115e8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   115eb:	83 ec 0c             	sub    $0xc,%esp
   115ee:	68 04 80 01 00       	push   $0x18004
   115f3:	e8 fc f9 ff ff       	call   10ff4 <list_size>
   115f8:	83 c4 10             	add    $0x10,%esp
   115fb:	83 f8 01             	cmp    $0x1,%eax
   115fe:	7e 29                	jle    11629 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   11600:	e8 ce ff ff ff       	call   115d3 <task_current>
   11605:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   11608:	83 ec 0c             	sub    $0xc,%esp
   1160b:	ff 75 f0             	pushl  -0x10(%ebp)
   1160e:	e8 52 ff ff ff       	call   11565 <task_set_blocked>
   11613:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11616:	83 ec 0c             	sub    $0xc,%esp
   11619:	ff 75 f0             	pushl  -0x10(%ebp)
   1161c:	e8 10 ff ff ff       	call   11531 <task_set_ready>
   11621:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11624:	e8 15 00 00 00       	call   1163e <task_dispatch>
    }

    irq_leave_protection(state);
   11629:	83 ec 0c             	sub    $0xc,%esp
   1162c:	ff 75 f4             	pushl  -0xc(%ebp)
   1162f:	e8 f7 0f 00 00       	call   1262b <irq_leave_protection>
   11634:	83 c4 10             	add    $0x10,%esp

    return 0;
   11637:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1163c:	c9                   	leave  
   1163d:	c3                   	ret    

0001163e <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   1163e:	55                   	push   %ebp
   1163f:	89 e5                	mov    %esp,%ebp
   11641:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11644:	e8 ca 0f 00 00       	call   12613 <irq_enter_protection>
   11649:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   1164c:	e8 3f ff ff ff       	call   11590 <task_next_run>
   11651:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   11654:	a1 00 80 01 00       	mov    0x18000,%eax
   11659:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1165c:	74 2a                	je     11688 <task_dispatch+0x4a>
        task_t* from = task_current();
   1165e:	e8 70 ff ff ff       	call   115d3 <task_current>
   11663:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11666:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11669:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;
   1166e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11671:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   11677:	83 ec 08             	sub    $0x8,%esp
   1167a:	ff 75 f0             	pushl  -0x10(%ebp)
   1167d:	ff 75 ec             	pushl  -0x14(%ebp)
   11680:	e8 c8 fc ff ff       	call   1134d <task_switch_from_to>
   11685:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   11688:	83 ec 0c             	sub    $0xc,%esp
   1168b:	ff 75 f4             	pushl  -0xc(%ebp)
   1168e:	e8 98 0f 00 00       	call   1262b <irq_leave_protection>
   11693:	83 c4 10             	add    $0x10,%esp
}
   11696:	90                   	nop
   11697:	c9                   	leave  
   11698:	c3                   	ret    

00011699 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   11699:	55                   	push   %ebp
   1169a:	89 e5                	mov    %esp,%ebp
   1169c:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   1169f:	e8 2f ff ff ff       	call   115d3 <task_current>
   116a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   116a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116aa:	8b 40 4c             	mov    0x4c(%eax),%eax
   116ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   116b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116b3:	89 50 4c             	mov    %edx,0x4c(%eax)
   116b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116b9:	8b 40 4c             	mov    0x4c(%eax),%eax
   116bc:	85 c0                	test   %eax,%eax
   116be:	75 2d                	jne    116ed <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   116c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c3:	8b 50 48             	mov    0x48(%eax),%edx
   116c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c9:	89 50 4c             	mov    %edx,0x4c(%eax)

        task_set_blocked(curr_task);
   116cc:	83 ec 0c             	sub    $0xc,%esp
   116cf:	ff 75 f0             	pushl  -0x10(%ebp)
   116d2:	e8 8e fe ff ff       	call   11565 <task_set_blocked>
   116d7:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   116da:	83 ec 0c             	sub    $0xc,%esp
   116dd:	ff 75 f0             	pushl  -0x10(%ebp)
   116e0:	e8 4c fe ff ff       	call   11531 <task_set_ready>
   116e5:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   116e8:	e8 51 ff ff ff       	call   1163e <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   116ed:	83 ec 0c             	sub    $0xc,%esp
   116f0:	68 1c 80 01 00       	push   $0x1801c
   116f5:	e8 05 f9 ff ff       	call   10fff <list_first>
   116fa:	83 c4 10             	add    $0x10,%esp
   116fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11700:	eb 62                	jmp    11764 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   11702:	83 ec 0c             	sub    $0xc,%esp
   11705:	ff 75 f4             	pushl  -0xc(%ebp)
   11708:	e8 dc f8 ff ff       	call   10fe9 <list_node_next>
   1170d:	83 c4 10             	add    $0x10,%esp
   11710:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   11713:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11717:	74 08                	je     11721 <task_time_tick+0x88>
   11719:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1171c:	83 e8 2c             	sub    $0x2c,%eax
   1171f:	eb 05                	jmp    11726 <task_time_tick+0x8d>
   11721:	b8 00 00 00 00       	mov    $0x0,%eax
   11726:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   11729:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1172c:	8b 40 44             	mov    0x44(%eax),%eax
   1172f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11732:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11735:	89 50 44             	mov    %edx,0x44(%eax)
   11738:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1173b:	8b 40 44             	mov    0x44(%eax),%eax
   1173e:	85 c0                	test   %eax,%eax
   11740:	75 1c                	jne    1175e <task_time_tick+0xc5>
            task_set_wakeup(task);
   11742:	83 ec 0c             	sub    $0xc,%esp
   11745:	ff 75 e8             	pushl  -0x18(%ebp)
   11748:	e8 56 00 00 00       	call   117a3 <task_set_wakeup>
   1174d:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11750:	83 ec 0c             	sub    $0xc,%esp
   11753:	ff 75 e8             	pushl  -0x18(%ebp)
   11756:	e8 d6 fd ff ff       	call   11531 <task_set_ready>
   1175b:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   1175e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11761:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11764:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11768:	75 98                	jne    11702 <task_time_tick+0x69>
    }

    task_dispatch();
   1176a:	e8 cf fe ff ff       	call   1163e <task_dispatch>
}
   1176f:	90                   	nop
   11770:	c9                   	leave  
   11771:	c3                   	ret    

00011772 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   11772:	55                   	push   %ebp
   11773:	89 e5                	mov    %esp,%ebp
   11775:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11778:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1177c:	74 22                	je     117a0 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   1177e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11781:	8b 45 08             	mov    0x8(%ebp),%eax
   11784:	89 50 44             	mov    %edx,0x44(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   11787:	8b 45 08             	mov    0x8(%ebp),%eax
   1178a:	83 c0 2c             	add    $0x2c,%eax
   1178d:	83 ec 08             	sub    $0x8,%esp
   11790:	50                   	push   %eax
   11791:	68 1c 80 01 00       	push   $0x1801c
   11796:	e8 b5 1d 00 00       	call   13550 <list_insert_back>
   1179b:	83 c4 10             	add    $0x10,%esp
   1179e:	eb 01                	jmp    117a1 <task_set_sleep+0x2f>
        return;
   117a0:	90                   	nop
}
   117a1:	c9                   	leave  
   117a2:	c3                   	ret    

000117a3 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   117a3:	55                   	push   %ebp
   117a4:	89 e5                	mov    %esp,%ebp
   117a6:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   117a9:	8b 45 08             	mov    0x8(%ebp),%eax
   117ac:	83 c0 2c             	add    $0x2c,%eax
   117af:	83 ec 08             	sub    $0x8,%esp
   117b2:	50                   	push   %eax
   117b3:	68 1c 80 01 00       	push   $0x1801c
   117b8:	e8 6f 1e 00 00       	call   1362c <list_remove>
   117bd:	83 c4 10             	add    $0x10,%esp
}
   117c0:	90                   	nop
   117c1:	c9                   	leave  
   117c2:	c3                   	ret    

000117c3 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   117c3:	55                   	push   %ebp
   117c4:	89 e5                	mov    %esp,%ebp
   117c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117c9:	e8 45 0e 00 00       	call   12613 <irq_enter_protection>
   117ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   117d1:	a1 00 80 01 00       	mov    0x18000,%eax
   117d6:	83 ec 0c             	sub    $0xc,%esp
   117d9:	50                   	push   %eax
   117da:	e8 86 fd ff ff       	call   11565 <task_set_blocked>
   117df:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   117e2:	8b 45 08             	mov    0x8(%ebp),%eax
   117e5:	83 c0 09             	add    $0x9,%eax
   117e8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   117ed:	f7 e2                	mul    %edx
   117ef:	c1 ea 03             	shr    $0x3,%edx
   117f2:	a1 00 80 01 00       	mov    0x18000,%eax
   117f7:	83 ec 08             	sub    $0x8,%esp
   117fa:	52                   	push   %edx
   117fb:	50                   	push   %eax
   117fc:	e8 71 ff ff ff       	call   11772 <task_set_sleep>
   11801:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   11804:	e8 35 fe ff ff       	call   1163e <task_dispatch>

    irq_leave_protection(state);
   11809:	83 ec 0c             	sub    $0xc,%esp
   1180c:	ff 75 f4             	pushl  -0xc(%ebp)
   1180f:	e8 17 0e 00 00       	call   1262b <irq_leave_protection>
   11814:	83 c4 10             	add    $0x10,%esp
}
   11817:	90                   	nop
   11818:	c9                   	leave  
   11819:	c3                   	ret    

0001181a <sys_getpid>:


int sys_getpid(void) {
   1181a:	55                   	push   %ebp
   1181b:	89 e5                	mov    %esp,%ebp
   1181d:	83 ec 10             	sub    $0x10,%esp
    task_t* task = task_current();
   11820:	e8 ae fd ff ff       	call   115d3 <task_current>
   11825:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   11828:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1182b:	8b 40 24             	mov    0x24(%eax),%eax
}
   1182e:	c9                   	leave  
   1182f:	c3                   	ret    

00011830 <alloc_task>:



// 分配 task
static task_t* alloc_task(void) {
   11830:	55                   	push   %ebp
   11831:	89 e5                	mov    %esp,%ebp
   11833:	83 ec 18             	sub    $0x18,%esp
    task_t* task = (task_t*)0;
   11836:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&task_table_mutex);
   1183d:	83 ec 0c             	sub    $0xc,%esp
   11840:	68 c0 df 01 00       	push   $0x1dfc0
   11845:	e8 3d 12 00 00       	call   12a87 <mutex_acquire>
   1184a:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < TASK_NR; i++) {
   1184d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11854:	eb 28                	jmp    1187e <alloc_task+0x4e>
        task_t* curr = task_table + i;
   11856:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11859:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   1185f:	05 c0 81 01 00       	add    $0x181c0,%eax
   11864:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (curr->name[0] == '\0') {
   11867:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1186a:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1186e:	84 c0                	test   %al,%al
   11870:	75 08                	jne    1187a <alloc_task+0x4a>
            task = curr;
   11872:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11875:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11878:	eb 0a                	jmp    11884 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++) {
   1187a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1187e:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11882:	7e d2                	jle    11856 <alloc_task+0x26>
        }
    }

    mutex_release(&task_table_mutex);
   11884:	83 ec 0c             	sub    $0xc,%esp
   11887:	68 c0 df 01 00       	push   $0x1dfc0
   1188c:	e8 84 12 00 00       	call   12b15 <mutex_release>
   11891:	83 c4 10             	add    $0x10,%esp

    return task;
   11894:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11897:	c9                   	leave  
   11898:	c3                   	ret    

00011899 <free_task>:

// 释放 task
static void free_task(task_t* task) {
   11899:	55                   	push   %ebp
   1189a:	89 e5                	mov    %esp,%ebp
   1189c:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&task_table_mutex);
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	68 c0 df 01 00       	push   $0x1dfc0
   118a7:	e8 db 11 00 00       	call   12a87 <mutex_acquire>
   118ac:	83 c4 10             	add    $0x10,%esp

    task->name[0] = '\0';
   118af:	8b 45 08             	mov    0x8(%ebp),%eax
   118b2:	c6 40 04 00          	movb   $0x0,0x4(%eax)

    mutex_release(&task_table_mutex);
   118b6:	83 ec 0c             	sub    $0xc,%esp
   118b9:	68 c0 df 01 00       	push   $0x1dfc0
   118be:	e8 52 12 00 00       	call   12b15 <mutex_release>
   118c3:	83 c4 10             	add    $0x10,%esp
}
   118c6:	90                   	nop
   118c7:	c9                   	leave  
   118c8:	c3                   	ret    

000118c9 <sys_fork>:




int sys_fork(void) {
   118c9:	55                   	push   %ebp
   118ca:	89 e5                	mov    %esp,%ebp
   118cc:	83 ec 28             	sub    $0x28,%esp
    // 获取父进程
    task_t* parent_task = task_current();
   118cf:	e8 ff fc ff ff       	call   115d3 <task_current>
   118d4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* child_task = alloc_task();
   118d7:	e8 54 ff ff ff       	call   11830 <alloc_task>
   118dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0) {
   118df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   118e3:	0f 84 2f 01 00 00    	je     11a18 <sys_fork+0x14f>
        goto fork_failed;
    }

    // 获取进程的 寄存器结构的起始地址
    syscall_frame_t * frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   118e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118ec:	8b 40 54             	mov    0x54(%eax),%eax
   118ef:	83 e8 58             	sub    $0x58,%eax
   118f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 需要把esp指针调回去
    int err = task_init(child_task, 
                        parent_task->name, 
                        TASK_FLAGS_USER, 
                        frame->eip, 
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   118f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   118f8:	8b 40 50             	mov    0x50(%eax),%eax
   118fb:	8d 50 14             	lea    0x14(%eax),%edx
                        frame->eip, 
   118fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11901:	8b 40 34             	mov    0x34(%eax),%eax
    int err = task_init(child_task, 
   11904:	89 c1                	mov    %eax,%ecx
                        parent_task->name, 
   11906:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11909:	83 c0 04             	add    $0x4,%eax
    int err = task_init(child_task, 
   1190c:	83 ec 0c             	sub    $0xc,%esp
   1190f:	52                   	push   %edx
   11910:	51                   	push   %ecx
   11911:	6a 00                	push   $0x0
   11913:	50                   	push   %eax
   11914:	ff 75 f0             	pushl  -0x10(%ebp)
   11917:	e8 b0 f8 ff ff       	call   111cc <task_init>
   1191c:	83 c4 20             	add    $0x20,%esp
   1191f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11922:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11926:	0f 88 ef 00 00 00    	js     11a1b <sys_fork+0x152>
        goto fork_failed;
    }

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t * tss = &child_task->tss;
   1192c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1192f:	83 c0 50             	add    $0x50,%eax
   11932:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       // 子进程返回0
   11935:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11938:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   1193f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11942:	8b 40 24             	mov    0x24(%eax),%eax
   11945:	89 c2                	mov    %eax,%edx
   11947:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1194a:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   1194d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11950:	8b 40 2c             	mov    0x2c(%eax),%eax
   11953:	89 c2                	mov    %eax,%edx
   11955:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11958:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   1195b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1195e:	8b 40 28             	mov    0x28(%eax),%eax
   11961:	89 c2                	mov    %eax,%edx
   11963:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11966:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11969:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1196c:	8b 40 18             	mov    0x18(%eax),%eax
   1196f:	89 c2                	mov    %eax,%edx
   11971:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11974:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11977:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1197a:	8b 40 14             	mov    0x14(%eax),%eax
   1197d:	89 c2                	mov    %eax,%edx
   1197f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11982:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11985:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11988:	8b 40 1c             	mov    0x1c(%eax),%eax
   1198b:	89 c2                	mov    %eax,%edx
   1198d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11990:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11993:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11996:	8b 40 38             	mov    0x38(%eax),%eax
   11999:	89 c2                	mov    %eax,%edx
   1199b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1199e:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   119a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119a4:	8b 40 10             	mov    0x10(%eax),%eax
   119a7:	89 c2                	mov    %eax,%edx
   119a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119ac:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   119af:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119b2:	8b 40 0c             	mov    0xc(%eax),%eax
   119b5:	89 c2                	mov    %eax,%edx
   119b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119ba:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   119bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119c0:	8b 40 08             	mov    0x8(%eax),%eax
   119c3:	89 c2                	mov    %eax,%edx
   119c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119c8:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   119cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119ce:	8b 40 04             	mov    0x4(%eax),%eax
   119d1:	89 c2                	mov    %eax,%edx
   119d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119d6:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   119d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119dc:	8b 00                	mov    (%eax),%eax
   119de:	89 c2                	mov    %eax,%edx
   119e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119e3:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   119e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   119ec:	89 50 28             	mov    %edx,0x28(%eax)

    // 复制父进程的内存空间到子进程
    if ((tss->cr3 = memory_copy_uvm2(parent_task->tss.cr3, tss->cr3)) < 0) {
   119ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119f2:	8b 50 1c             	mov    0x1c(%eax),%edx
   119f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f8:	8b 40 6c             	mov    0x6c(%eax),%eax
   119fb:	83 ec 08             	sub    $0x8,%esp
   119fe:	52                   	push   %edx
   119ff:	50                   	push   %eax
   11a00:	e8 d5 f3 ff ff       	call   10dda <memory_copy_uvm2>
   11a05:	83 c4 10             	add    $0x10,%esp
   11a08:	89 c2                	mov    %eax,%edx
   11a0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a0d:	89 50 1c             	mov    %edx,0x1c(%eax)
        goto fork_failed;
    }

    return child_task->pid;
   11a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a13:	8b 40 24             	mov    0x24(%eax),%eax
   11a16:	eb 2b                	jmp    11a43 <sys_fork+0x17a>
        goto fork_failed;
   11a18:	90                   	nop
   11a19:	eb 01                	jmp    11a1c <sys_fork+0x153>
        goto fork_failed;
   11a1b:	90                   	nop

fork_failed:
    if (child_task) {
   11a1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a20:	74 1c                	je     11a3e <sys_fork+0x175>
        task_uninit(child_task);
   11a22:	83 ec 0c             	sub    $0xc,%esp
   11a25:	ff 75 f0             	pushl  -0x10(%ebp)
   11a28:	e8 a3 f8 ff ff       	call   112d0 <task_uninit>
   11a2d:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11a30:	83 ec 0c             	sub    $0xc,%esp
   11a33:	ff 75 f0             	pushl  -0x10(%ebp)
   11a36:	e8 5e fe ff ff       	call   11899 <free_task>
   11a3b:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11a3e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11a43:	c9                   	leave  
   11a44:	c3                   	ret    

00011a45 <sys_execve>:

int sys_execve(char* name, char** argv, char** env) {
   11a45:	55                   	push   %ebp
   11a46:	89 e5                	mov    %esp,%ebp
    return -1;
   11a48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11a4d:	5d                   	pop    %ebp
   11a4e:	c3                   	ret    

00011a4f <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11a4f:	55                   	push   %ebp
   11a50:	89 e5                	mov    %esp,%ebp
   11a52:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11a55:	8b 45 08             	mov    0x8(%ebp),%eax
   11a58:	c1 e8 10             	shr    $0x10,%eax
   11a5b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   11a5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a62:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   11a66:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a69:	83 e8 01             	sub    $0x1,%eax
   11a6c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   11a70:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11a74:	90                   	nop
   11a75:	c9                   	leave  
   11a76:	c3                   	ret    

00011a77 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11a77:	55                   	push   %ebp
   11a78:	89 e5                	mov    %esp,%ebp
   11a7a:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   11a7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a80:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11a83:	8b 45 08             	mov    0x8(%ebp),%eax
   11a86:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11a89:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11a8c:	ff 28                	ljmp   *(%eax)
}
   11a8e:	90                   	nop
   11a8f:	c9                   	leave  
   11a90:	c3                   	ret    

00011a91 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   11a91:	55                   	push   %ebp
   11a92:	89 e5                	mov    %esp,%ebp
   11a94:	83 ec 14             	sub    $0x14,%esp
   11a97:	8b 45 14             	mov    0x14(%ebp),%eax
   11a9a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   11a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa1:	83 e0 f8             	and    $0xfffffff8,%eax
   11aa4:	05 20 f0 01 00       	add    $0x1f020,%eax
   11aa9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   11aac:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11ab3:	76 0f                	jbe    11ac4 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   11ab5:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11abb:	8b 45 10             	mov    0x10(%ebp),%eax
   11abe:	c1 e8 0c             	shr    $0xc,%eax
   11ac1:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   11ac4:	8b 45 10             	mov    0x10(%ebp),%eax
   11ac7:	89 c2                	mov    %eax,%edx
   11ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11acc:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   11acf:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ad2:	89 c2                	mov    %eax,%edx
   11ad4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ad7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   11adb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ade:	c1 e8 10             	shr    $0x10,%eax
   11ae1:	89 c2                	mov    %eax,%edx
   11ae3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ae6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   11ae9:	8b 45 10             	mov    0x10(%ebp),%eax
   11aec:	c1 e8 10             	shr    $0x10,%eax
   11aef:	c1 e0 08             	shl    $0x8,%eax
   11af2:	66 25 00 0f          	and    $0xf00,%ax
   11af6:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11afa:	89 c2                	mov    %eax,%edx
   11afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11aff:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11b03:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b06:	c1 e8 18             	shr    $0x18,%eax
   11b09:	89 c2                	mov    %eax,%edx
   11b0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b0e:	88 50 07             	mov    %dl,0x7(%eax)
}
   11b11:	90                   	nop
   11b12:	c9                   	leave  
   11b13:	c3                   	ret    

00011b14 <gate_desc_set>:


// 设置 Interrupt /Call Gate 表项
void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   11b14:	55                   	push   %ebp
   11b15:	89 e5                	mov    %esp,%ebp
   11b17:	83 ec 08             	sub    $0x8,%esp
   11b1a:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b1d:	8b 45 14             	mov    0x14(%ebp),%eax
   11b20:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11b24:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   11b28:	8b 45 10             	mov    0x10(%ebp),%eax
   11b2b:	89 c2                	mov    %eax,%edx
   11b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b30:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11b33:	8b 45 08             	mov    0x8(%ebp),%eax
   11b36:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11b3a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b41:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11b45:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   11b49:	8b 45 10             	mov    0x10(%ebp),%eax
   11b4c:	c1 e8 10             	shr    $0x10,%eax
   11b4f:	89 c2                	mov    %eax,%edx
   11b51:	8b 45 08             	mov    0x8(%ebp),%eax
   11b54:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   11b58:	90                   	nop
   11b59:	c9                   	leave  
   11b5a:	c3                   	ret    

00011b5b <init_gdt>:


void init_gdt(void) {
   11b5b:	55                   	push   %ebp
   11b5c:	89 e5                	mov    %esp,%ebp
   11b5e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11b61:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11b68:	eb 19                	jmp    11b83 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   11b6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b6d:	c1 e0 03             	shl    $0x3,%eax
   11b70:	6a 00                	push   $0x0
   11b72:	6a 00                	push   $0x0
   11b74:	6a 00                	push   $0x0
   11b76:	50                   	push   %eax
   11b77:	e8 15 ff ff ff       	call   11a91 <segment_desc_set>
   11b7c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11b7f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11b83:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11b8a:	7e de                	jle    11b6a <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11b8c:	68 92 40 00 00       	push   $0x4092
   11b91:	6a ff                	push   $0xffffffff
   11b93:	6a 00                	push   $0x0
   11b95:	6a 10                	push   $0x10
   11b97:	e8 f5 fe ff ff       	call   11a91 <segment_desc_set>
   11b9c:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11b9f:	68 9a 40 00 00       	push   $0x409a
   11ba4:	6a ff                	push   $0xffffffff
   11ba6:	6a 00                	push   $0x0
   11ba8:	6a 08                	push   $0x8
   11baa:	e8 e2 fe ff ff       	call   11a91 <segment_desc_set>
   11baf:	83 c4 10             	add    $0x10,%esp

    // syscall 初始化。syscall gate DPL 要为3，这个描述符应该能被用户代码访问
    gate_desc_set((gate_desc_t*)(gdt_table + (SELECTOR_SYSCALL >> 3)), 
   11bb2:	ba d7 02 01 00       	mov    $0x102d7,%edx
   11bb7:	b8 38 f0 01 00       	mov    $0x1f038,%eax
   11bbc:	68 05 ec 00 00       	push   $0xec05
   11bc1:	52                   	push   %edx
   11bc2:	6a 08                	push   $0x8
   11bc4:	50                   	push   %eax
   11bc5:	e8 4a ff ff ff       	call   11b14 <gate_desc_set>
   11bca:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11bcd:	b8 20 f0 01 00       	mov    $0x1f020,%eax
   11bd2:	68 00 08 00 00       	push   $0x800
   11bd7:	50                   	push   %eax
   11bd8:	e8 72 fe ff ff       	call   11a4f <lgdt>
   11bdd:	83 c4 08             	add    $0x8,%esp
}
   11be0:	90                   	nop
   11be1:	c9                   	leave  
   11be2:	c3                   	ret    

00011be3 <cpu_init>:


void cpu_init(void) {
   11be3:	55                   	push   %ebp
   11be4:	89 e5                	mov    %esp,%ebp
   11be6:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   11be9:	83 ec 08             	sub    $0x8,%esp
   11bec:	68 10 3b 01 00       	push   $0x13b10
   11bf1:	68 20 f8 01 00       	push   $0x1f820
   11bf6:	e8 4b 0e 00 00       	call   12a46 <mutex_init>
   11bfb:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11bfe:	e8 58 ff ff ff       	call   11b5b <init_gdt>
}
   11c03:	90                   	nop
   11c04:	c9                   	leave  
   11c05:	c3                   	ret    

00011c06 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   11c06:	55                   	push   %ebp
   11c07:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   11c09:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0c:	6a 00                	push   $0x0
   11c0e:	50                   	push   %eax
   11c0f:	e8 63 fe ff ff       	call   11a77 <far_jump>
   11c14:	83 c4 08             	add    $0x8,%esp
}
   11c17:	90                   	nop
   11c18:	c9                   	leave  
   11c19:	c3                   	ret    

00011c1a <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   11c1a:	55                   	push   %ebp
   11c1b:	89 e5                	mov    %esp,%ebp
   11c1d:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   11c20:	83 ec 0c             	sub    $0xc,%esp
   11c23:	68 20 f8 01 00       	push   $0x1f820
   11c28:	e8 5a 0e 00 00       	call   12a87 <mutex_acquire>
   11c2d:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11c30:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11c37:	eb 36                	jmp    11c6f <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   11c39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c3c:	c1 e0 03             	shl    $0x3,%eax
   11c3f:	05 20 f0 01 00       	add    $0x1f020,%eax
   11c44:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   11c47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c4a:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11c4e:	66 85 c0             	test   %ax,%ax
   11c51:	75 18                	jne    11c6b <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   11c53:	83 ec 0c             	sub    $0xc,%esp
   11c56:	68 20 f8 01 00       	push   $0x1f820
   11c5b:	e8 b5 0e 00 00       	call   12b15 <mutex_release>
   11c60:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   11c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c66:	c1 e0 03             	shl    $0x3,%eax
   11c69:	eb 22                	jmp    11c8d <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11c6b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c6f:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11c76:	7e c1                	jle    11c39 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11c78:	83 ec 0c             	sub    $0xc,%esp
   11c7b:	68 20 f8 01 00       	push   $0x1f820
   11c80:	e8 90 0e 00 00       	call   12b15 <mutex_release>
   11c85:	83 c4 10             	add    $0x10,%esp

    return -1;
   11c88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c8d:	c9                   	leave  
   11c8e:	c3                   	ret    

00011c8f <gdt_free_sel>:

void gdt_free_sel(int sel) {
   11c8f:	55                   	push   %ebp
   11c90:	89 e5                	mov    %esp,%ebp
   11c92:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   11c95:	83 ec 0c             	sub    $0xc,%esp
   11c98:	68 20 f8 01 00       	push   $0x1f820
   11c9d:	e8 e5 0d 00 00       	call   12a87 <mutex_acquire>
   11ca2:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   11ca5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca8:	c1 e8 03             	shr    $0x3,%eax
   11cab:	66 c7 04 c5 25 f0 01 	movw   $0x0,0x1f025(,%eax,8)
   11cb2:	00 00 00 

    mutex_release(&mutex);
   11cb5:	83 ec 0c             	sub    $0xc,%esp
   11cb8:	68 20 f8 01 00       	push   $0x1f820
   11cbd:	e8 53 0e 00 00       	call   12b15 <mutex_release>
   11cc2:	83 c4 10             	add    $0x10,%esp
   11cc5:	90                   	nop
   11cc6:	c9                   	leave  
   11cc7:	c3                   	ret    

00011cc8 <inb>:
static inline uint8_t inb(uint16_t port) {
   11cc8:	55                   	push   %ebp
   11cc9:	89 e5                	mov    %esp,%ebp
   11ccb:	83 ec 14             	sub    $0x14,%esp
   11cce:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   11cd5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11cd9:	89 c2                	mov    %eax,%edx
   11cdb:	ec                   	in     (%dx),%al
   11cdc:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11cdf:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11ce3:	c9                   	leave  
   11ce4:	c3                   	ret    

00011ce5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11ce5:	55                   	push   %ebp
   11ce6:	89 e5                	mov    %esp,%ebp
   11ce8:	83 ec 08             	sub    $0x8,%esp
   11ceb:	8b 55 08             	mov    0x8(%ebp),%edx
   11cee:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cf1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11cf5:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11cf8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11cfc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11d00:	ee                   	out    %al,(%dx)
}
   11d01:	90                   	nop
   11d02:	c9                   	leave  
   11d03:	c3                   	ret    

00011d04 <cli>:
static inline void cli(void) {
   11d04:	55                   	push   %ebp
   11d05:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   11d07:	fa                   	cli    
}
   11d08:	90                   	nop
   11d09:	5d                   	pop    %ebp
   11d0a:	c3                   	ret    

00011d0b <sti>:
static inline void sti(void) {
   11d0b:	55                   	push   %ebp
   11d0c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11d0e:	fb                   	sti    
}
   11d0f:	90                   	nop
   11d10:	5d                   	pop    %ebp
   11d11:	c3                   	ret    

00011d12 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11d12:	55                   	push   %ebp
   11d13:	89 e5                	mov    %esp,%ebp
   11d15:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11d18:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1b:	c1 e8 10             	shr    $0x10,%eax
   11d1e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   11d22:	8b 45 08             	mov    0x8(%ebp),%eax
   11d25:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   11d29:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d2c:	83 e8 01             	sub    $0x1,%eax
   11d2f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   11d33:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11d37:	90                   	nop
   11d38:	c9                   	leave  
   11d39:	c3                   	ret    

00011d3a <read_cr2>:
static inline uint32_t read_cr2() {
   11d3a:	55                   	push   %ebp
   11d3b:	89 e5                	mov    %esp,%ebp
   11d3d:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   11d40:	0f 20 d0             	mov    %cr2,%eax
   11d43:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   11d46:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d49:	c9                   	leave  
   11d4a:	c3                   	ret    

00011d4b <hlt>:
static inline void hlt(void) {
   11d4b:	55                   	push   %ebp
   11d4c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11d4e:	f4                   	hlt    
}
   11d4f:	90                   	nop
   11d50:	5d                   	pop    %ebp
   11d51:	c3                   	ret    

00011d52 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   11d52:	55                   	push   %ebp
   11d53:	89 e5                	mov    %esp,%ebp
   11d55:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11d58:	9c                   	pushf  
   11d59:	58                   	pop    %eax
   11d5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d60:	c9                   	leave  
   11d61:	c3                   	ret    

00011d62 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   11d62:	55                   	push   %ebp
   11d63:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11d65:	8b 45 08             	mov    0x8(%ebp),%eax
   11d68:	50                   	push   %eax
   11d69:	9d                   	popf   
}
   11d6a:	90                   	nop
   11d6b:	5d                   	pop    %ebp
   11d6c:	c3                   	ret    

00011d6d <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   11d6d:	55                   	push   %ebp
   11d6e:	89 e5                	mov    %esp,%ebp
   11d70:	57                   	push   %edi
   11d71:	56                   	push   %esi
   11d72:	53                   	push   %ebx
   11d73:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   11d76:	8b 45 08             	mov    0x8(%ebp),%eax
   11d79:	8b 40 3c             	mov    0x3c(%eax),%eax
   11d7c:	83 e0 07             	and    $0x7,%eax
   11d7f:	85 c0                	test   %eax,%eax
   11d81:	74 14                	je     11d97 <dump_core_regs+0x2a>
        ss = frame->ds;
   11d83:	8b 45 08             	mov    0x8(%ebp),%eax
   11d86:	8b 40 0c             	mov    0xc(%eax),%eax
   11d89:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   11d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8f:	8b 40 1c             	mov    0x1c(%eax),%eax
   11d92:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11d95:	eb 12                	jmp    11da9 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   11d97:	8b 45 08             	mov    0x8(%ebp),%eax
   11d9a:	8b 40 48             	mov    0x48(%eax),%eax
   11d9d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   11da0:	8b 45 08             	mov    0x8(%ebp),%eax
   11da3:	8b 40 44             	mov    0x44(%eax),%eax
   11da6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11da9:	8b 45 08             	mov    0x8(%ebp),%eax
   11dac:	8b 50 34             	mov    0x34(%eax),%edx
   11daf:	8b 45 08             	mov    0x8(%ebp),%eax
   11db2:	8b 40 30             	mov    0x30(%eax),%eax
   11db5:	83 ec 04             	sub    $0x4,%esp
   11db8:	52                   	push   %edx
   11db9:	50                   	push   %eax
   11dba:	68 1c 3b 01 00       	push   $0x13b1c
   11dbf:	e8 cb 19 00 00       	call   1378f <log_printf>
   11dc4:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   11dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dca:	8b 30                	mov    (%eax),%esi
   11dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   11dcf:	8b 58 04             	mov    0x4(%eax),%ebx
   11dd2:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd5:	8b 48 08             	mov    0x8(%eax),%ecx
   11dd8:	8b 45 08             	mov    0x8(%ebp),%eax
   11ddb:	8b 50 0c             	mov    0xc(%eax),%edx
   11dde:	8b 45 08             	mov    0x8(%ebp),%eax
   11de1:	8b 40 3c             	mov    0x3c(%eax),%eax
   11de4:	83 ec 04             	sub    $0x4,%esp
   11de7:	56                   	push   %esi
   11de8:	53                   	push   %ebx
   11de9:	ff 75 e0             	pushl  -0x20(%ebp)
   11dec:	51                   	push   %ecx
   11ded:	52                   	push   %edx
   11dee:	50                   	push   %eax
   11def:	68 34 3b 01 00       	push   $0x13b34
   11df4:	e8 96 19 00 00       	call   1378f <log_printf>
   11df9:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   11dfc:	8b 45 08             	mov    0x8(%ebp),%eax
   11dff:	8b 78 18             	mov    0x18(%eax),%edi
   11e02:	8b 45 08             	mov    0x8(%ebp),%eax
   11e05:	8b 70 14             	mov    0x14(%eax),%esi
   11e08:	8b 45 08             	mov    0x8(%ebp),%eax
   11e0b:	8b 58 10             	mov    0x10(%eax),%ebx
   11e0e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e11:	8b 48 24             	mov    0x24(%eax),%ecx
   11e14:	8b 45 08             	mov    0x8(%ebp),%eax
   11e17:	8b 50 20             	mov    0x20(%eax),%edx
   11e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1d:	8b 40 2c             	mov    0x2c(%eax),%eax
   11e20:	ff 75 e4             	pushl  -0x1c(%ebp)
   11e23:	57                   	push   %edi
   11e24:	56                   	push   %esi
   11e25:	53                   	push   %ebx
   11e26:	51                   	push   %ecx
   11e27:	52                   	push   %edx
   11e28:	50                   	push   %eax
   11e29:	68 60 3b 01 00       	push   $0x13b60
   11e2e:	e8 5c 19 00 00       	call   1378f <log_printf>
   11e33:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   11e36:	8b 45 08             	mov    0x8(%ebp),%eax
   11e39:	8b 50 40             	mov    0x40(%eax),%edx
   11e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3f:	8b 40 38             	mov    0x38(%eax),%eax
   11e42:	83 ec 04             	sub    $0x4,%esp
   11e45:	52                   	push   %edx
   11e46:	50                   	push   %eax
   11e47:	68 99 3b 01 00       	push   $0x13b99
   11e4c:	e8 3e 19 00 00       	call   1378f <log_printf>
   11e51:	83 c4 10             	add    $0x10,%esp
}
   11e54:	90                   	nop
   11e55:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11e58:	5b                   	pop    %ebx
   11e59:	5e                   	pop    %esi
   11e5a:	5f                   	pop    %edi
   11e5b:	5d                   	pop    %ebp
   11e5c:	c3                   	ret    

00011e5d <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   11e5d:	55                   	push   %ebp
   11e5e:	89 e5                	mov    %esp,%ebp
   11e60:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   11e63:	83 ec 0c             	sub    $0xc,%esp
   11e66:	68 b0 3b 01 00       	push   $0x13bb0
   11e6b:	e8 1f 19 00 00       	call   1378f <log_printf>
   11e70:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   11e73:	83 ec 08             	sub    $0x8,%esp
   11e76:	ff 75 0c             	pushl  0xc(%ebp)
   11e79:	68 db 3b 01 00       	push   $0x13bdb
   11e7e:	e8 0c 19 00 00       	call   1378f <log_printf>
   11e83:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   11e86:	83 ec 0c             	sub    $0xc,%esp
   11e89:	ff 75 08             	pushl  0x8(%ebp)
   11e8c:	e8 dc fe ff ff       	call   11d6d <dump_core_regs>
   11e91:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11e94:	e8 b2 fe ff ff       	call   11d4b <hlt>
   11e99:	eb f9                	jmp    11e94 <do_default_handler+0x37>

00011e9b <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11e9b:	55                   	push   %ebp
   11e9c:	89 e5                	mov    %esp,%ebp
   11e9e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   11ea1:	83 ec 08             	sub    $0x8,%esp
   11ea4:	68 ed 3b 01 00       	push   $0x13bed
   11ea9:	ff 75 08             	pushl  0x8(%ebp)
   11eac:	e8 ac ff ff ff       	call   11e5d <do_default_handler>
   11eb1:	83 c4 10             	add    $0x10,%esp
}
   11eb4:	90                   	nop
   11eb5:	c9                   	leave  
   11eb6:	c3                   	ret    

00011eb7 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   11eb7:	55                   	push   %ebp
   11eb8:	89 e5                	mov    %esp,%ebp
   11eba:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   11ebd:	83 ec 08             	sub    $0x8,%esp
   11ec0:	68 ff 3b 01 00       	push   $0x13bff
   11ec5:	ff 75 08             	pushl  0x8(%ebp)
   11ec8:	e8 90 ff ff ff       	call   11e5d <do_default_handler>
   11ecd:	83 c4 10             	add    $0x10,%esp
}
   11ed0:	90                   	nop
   11ed1:	c9                   	leave  
   11ed2:	c3                   	ret    

00011ed3 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11ed3:	55                   	push   %ebp
   11ed4:	89 e5                	mov    %esp,%ebp
   11ed6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   11ed9:	83 ec 08             	sub    $0x8,%esp
   11edc:	68 19 3c 01 00       	push   $0x13c19
   11ee1:	ff 75 08             	pushl  0x8(%ebp)
   11ee4:	e8 74 ff ff ff       	call   11e5d <do_default_handler>
   11ee9:	83 c4 10             	add    $0x10,%esp
}   
   11eec:	90                   	nop
   11eed:	c9                   	leave  
   11eee:	c3                   	ret    

00011eef <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   11eef:	55                   	push   %ebp
   11ef0:	89 e5                	mov    %esp,%ebp
   11ef2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   11ef5:	83 ec 08             	sub    $0x8,%esp
   11ef8:	68 34 3c 01 00       	push   $0x13c34
   11efd:	ff 75 08             	pushl  0x8(%ebp)
   11f00:	e8 58 ff ff ff       	call   11e5d <do_default_handler>
   11f05:	83 c4 10             	add    $0x10,%esp
}   
   11f08:	90                   	nop
   11f09:	c9                   	leave  
   11f0a:	c3                   	ret    

00011f0b <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   11f0b:	55                   	push   %ebp
   11f0c:	89 e5                	mov    %esp,%ebp
   11f0e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   11f11:	83 ec 08             	sub    $0x8,%esp
   11f14:	68 4d 3c 01 00       	push   $0x13c4d
   11f19:	ff 75 08             	pushl  0x8(%ebp)
   11f1c:	e8 3c ff ff ff       	call   11e5d <do_default_handler>
   11f21:	83 c4 10             	add    $0x10,%esp
}   
   11f24:	90                   	nop
   11f25:	c9                   	leave  
   11f26:	c3                   	ret    

00011f27 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   11f27:	55                   	push   %ebp
   11f28:	89 e5                	mov    %esp,%ebp
   11f2a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   11f2d:	83 ec 08             	sub    $0x8,%esp
   11f30:	68 63 3c 01 00       	push   $0x13c63
   11f35:	ff 75 08             	pushl  0x8(%ebp)
   11f38:	e8 20 ff ff ff       	call   11e5d <do_default_handler>
   11f3d:	83 c4 10             	add    $0x10,%esp
}   
   11f40:	90                   	nop
   11f41:	c9                   	leave  
   11f42:	c3                   	ret    

00011f43 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   11f43:	55                   	push   %ebp
   11f44:	89 e5                	mov    %esp,%ebp
   11f46:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   11f49:	83 ec 08             	sub    $0x8,%esp
   11f4c:	68 77 3c 01 00       	push   $0x13c77
   11f51:	ff 75 08             	pushl  0x8(%ebp)
   11f54:	e8 04 ff ff ff       	call   11e5d <do_default_handler>
   11f59:	83 c4 10             	add    $0x10,%esp
}   
   11f5c:	90                   	nop
   11f5d:	c9                   	leave  
   11f5e:	c3                   	ret    

00011f5f <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   11f5f:	55                   	push   %ebp
   11f60:	89 e5                	mov    %esp,%ebp
   11f62:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   11f65:	83 ec 08             	sub    $0x8,%esp
   11f68:	68 95 3c 01 00       	push   $0x13c95
   11f6d:	ff 75 08             	pushl  0x8(%ebp)
   11f70:	e8 e8 fe ff ff       	call   11e5d <do_default_handler>
   11f75:	83 c4 10             	add    $0x10,%esp
}   
   11f78:	90                   	nop
   11f79:	c9                   	leave  
   11f7a:	c3                   	ret    

00011f7b <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11f7b:	55                   	push   %ebp
   11f7c:	89 e5                	mov    %esp,%ebp
   11f7e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   11f81:	83 ec 08             	sub    $0x8,%esp
   11f84:	68 af 3c 01 00       	push   $0x13caf
   11f89:	ff 75 08             	pushl  0x8(%ebp)
   11f8c:	e8 cc fe ff ff       	call   11e5d <do_default_handler>
   11f91:	83 c4 10             	add    $0x10,%esp
}   
   11f94:	90                   	nop
   11f95:	c9                   	leave  
   11f96:	c3                   	ret    

00011f97 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   11f97:	55                   	push   %ebp
   11f98:	89 e5                	mov    %esp,%ebp
   11f9a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11f9d:	83 ec 08             	sub    $0x8,%esp
   11fa0:	68 cb 3c 01 00       	push   $0x13ccb
   11fa5:	ff 75 08             	pushl  0x8(%ebp)
   11fa8:	e8 b0 fe ff ff       	call   11e5d <do_default_handler>
   11fad:	83 c4 10             	add    $0x10,%esp
}   
   11fb0:	90                   	nop
   11fb1:	c9                   	leave  
   11fb2:	c3                   	ret    

00011fb3 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11fb3:	55                   	push   %ebp
   11fb4:	89 e5                	mov    %esp,%ebp
   11fb6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   11fb9:	83 ec 08             	sub    $0x8,%esp
   11fbc:	68 e3 3c 01 00       	push   $0x13ce3
   11fc1:	ff 75 08             	pushl  0x8(%ebp)
   11fc4:	e8 94 fe ff ff       	call   11e5d <do_default_handler>
   11fc9:	83 c4 10             	add    $0x10,%esp
}   
   11fcc:	90                   	nop
   11fcd:	c9                   	leave  
   11fce:	c3                   	ret    

00011fcf <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   11fcf:	55                   	push   %ebp
   11fd0:	89 e5                	mov    %esp,%ebp
   11fd2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11fd5:	83 ec 08             	sub    $0x8,%esp
   11fd8:	68 fc 3c 01 00       	push   $0x13cfc
   11fdd:	ff 75 08             	pushl  0x8(%ebp)
   11fe0:	e8 78 fe ff ff       	call   11e5d <do_default_handler>
   11fe5:	83 c4 10             	add    $0x10,%esp
}   
   11fe8:	90                   	nop
   11fe9:	c9                   	leave  
   11fea:	c3                   	ret    

00011feb <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   11feb:	55                   	push   %ebp
   11fec:	89 e5                	mov    %esp,%ebp
   11fee:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   11ff1:	83 ec 08             	sub    $0x8,%esp
   11ff4:	68 1c 3d 01 00       	push   $0x13d1c
   11ff9:	ff 75 08             	pushl  0x8(%ebp)
   11ffc:	e8 5c fe ff ff       	call   11e5d <do_default_handler>
   12001:	83 c4 10             	add    $0x10,%esp
}   
   12004:	90                   	nop
   12005:	c9                   	leave  
   12006:	c3                   	ret    

00012007 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   12007:	55                   	push   %ebp
   12008:	89 e5                	mov    %esp,%ebp
   1200a:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1200d:	83 ec 0c             	sub    $0xc,%esp
   12010:	68 3c 3d 01 00       	push   $0x13d3c
   12015:	e8 75 17 00 00       	call   1378f <log_printf>
   1201a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   1201d:	83 ec 0c             	sub    $0xc,%esp
   12020:	68 60 3d 01 00       	push   $0x13d60
   12025:	e8 65 17 00 00       	call   1378f <log_printf>
   1202a:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   1202d:	8b 45 08             	mov    0x8(%ebp),%eax
   12030:	8b 40 34             	mov    0x34(%eax),%eax
   12033:	83 e0 01             	and    $0x1,%eax
   12036:	85 c0                	test   %eax,%eax
   12038:	74 12                	je     1204c <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   1203a:	83 ec 0c             	sub    $0xc,%esp
   1203d:	68 8c 3d 01 00       	push   $0x13d8c
   12042:	e8 48 17 00 00       	call   1378f <log_printf>
   12047:	83 c4 10             	add    $0x10,%esp
   1204a:	eb 10                	jmp    1205c <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   1204c:	83 ec 0c             	sub    $0xc,%esp
   1204f:	68 08 3e 01 00       	push   $0x13e08
   12054:	e8 36 17 00 00       	call   1378f <log_printf>
   12059:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   1205c:	8b 45 08             	mov    0x8(%ebp),%eax
   1205f:	8b 40 34             	mov    0x34(%eax),%eax
   12062:	83 e0 02             	and    $0x2,%eax
   12065:	85 c0                	test   %eax,%eax
   12067:	74 12                	je     1207b <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12069:	83 ec 0c             	sub    $0xc,%esp
   1206c:	68 60 3e 01 00       	push   $0x13e60
   12071:	e8 19 17 00 00       	call   1378f <log_printf>
   12076:	83 c4 10             	add    $0x10,%esp
   12079:	eb 10                	jmp    1208b <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   1207b:	83 ec 0c             	sub    $0xc,%esp
   1207e:	68 ac 3e 01 00       	push   $0x13eac
   12083:	e8 07 17 00 00       	call   1378f <log_printf>
   12088:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   1208b:	8b 45 08             	mov    0x8(%ebp),%eax
   1208e:	8b 40 34             	mov    0x34(%eax),%eax
   12091:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12096:	83 ec 08             	sub    $0x8,%esp
   12099:	50                   	push   %eax
   1209a:	68 d8 3e 01 00       	push   $0x13ed8
   1209f:	e8 eb 16 00 00       	call   1378f <log_printf>
   120a4:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   120a7:	83 ec 0c             	sub    $0xc,%esp
   120aa:	ff 75 08             	pushl  0x8(%ebp)
   120ad:	e8 bb fc ff ff       	call   11d6d <dump_core_regs>
   120b2:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   120b5:	e8 91 fc ff ff       	call   11d4b <hlt>
   120ba:	eb f9                	jmp    120b5 <do_handler_general_protection+0xae>

000120bc <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   120bc:	55                   	push   %ebp
   120bd:	89 e5                	mov    %esp,%ebp
   120bf:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   120c2:	83 ec 0c             	sub    $0xc,%esp
   120c5:	68 3c 3d 01 00       	push   $0x13d3c
   120ca:	e8 c0 16 00 00       	call   1378f <log_printf>
   120cf:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   120d2:	83 ec 0c             	sub    $0xc,%esp
   120d5:	68 ea 3e 01 00       	push   $0x13eea
   120da:	e8 b0 16 00 00       	call   1378f <log_printf>
   120df:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   120e2:	8b 45 08             	mov    0x8(%ebp),%eax
   120e5:	8b 40 34             	mov    0x34(%eax),%eax
   120e8:	83 e0 01             	and    $0x1,%eax
   120eb:	85 c0                	test   %eax,%eax
   120ed:	74 18                	je     12107 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   120ef:	e8 46 fc ff ff       	call   11d3a <read_cr2>
   120f4:	83 ec 08             	sub    $0x8,%esp
   120f7:	50                   	push   %eax
   120f8:	68 08 3f 01 00       	push   $0x13f08
   120fd:	e8 8d 16 00 00       	call   1378f <log_printf>
   12102:	83 c4 10             	add    $0x10,%esp
   12105:	eb 16                	jmp    1211d <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   12107:	e8 2e fc ff ff       	call   11d3a <read_cr2>
   1210c:	83 ec 08             	sub    $0x8,%esp
   1210f:	50                   	push   %eax
   12110:	68 30 3f 01 00       	push   $0x13f30
   12115:	e8 75 16 00 00       	call   1378f <log_printf>
   1211a:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   1211d:	8b 45 08             	mov    0x8(%ebp),%eax
   12120:	8b 40 34             	mov    0x34(%eax),%eax
   12123:	83 e0 02             	and    $0x2,%eax
   12126:	85 c0                	test   %eax,%eax
   12128:	74 12                	je     1213c <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   1212a:	83 ec 0c             	sub    $0xc,%esp
   1212d:	68 60 3f 01 00       	push   $0x13f60
   12132:	e8 58 16 00 00       	call   1378f <log_printf>
   12137:	83 c4 10             	add    $0x10,%esp
   1213a:	eb 10                	jmp    1214c <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   1213c:	83 ec 0c             	sub    $0xc,%esp
   1213f:	68 8c 3f 01 00       	push   $0x13f8c
   12144:	e8 46 16 00 00       	call   1378f <log_printf>
   12149:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   1214c:	8b 45 08             	mov    0x8(%ebp),%eax
   1214f:	8b 40 34             	mov    0x34(%eax),%eax
   12152:	83 e0 02             	and    $0x2,%eax
   12155:	85 c0                	test   %eax,%eax
   12157:	74 12                	je     1216b <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12159:	83 ec 0c             	sub    $0xc,%esp
   1215c:	68 b8 3f 01 00       	push   $0x13fb8
   12161:	e8 29 16 00 00       	call   1378f <log_printf>
   12166:	83 c4 10             	add    $0x10,%esp
   12169:	eb 10                	jmp    1217b <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   1216b:	83 ec 0c             	sub    $0xc,%esp
   1216e:	68 e4 3f 01 00       	push   $0x13fe4
   12173:	e8 17 16 00 00       	call   1378f <log_printf>
   12178:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   1217b:	83 ec 0c             	sub    $0xc,%esp
   1217e:	ff 75 08             	pushl  0x8(%ebp)
   12181:	e8 e7 fb ff ff       	call   11d6d <dump_core_regs>
   12186:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12189:	e8 bd fb ff ff       	call   11d4b <hlt>
   1218e:	eb f9                	jmp    12189 <do_handler_page_fault+0xcd>

00012190 <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   12190:	55                   	push   %ebp
   12191:	89 e5                	mov    %esp,%ebp
   12193:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   12196:	83 ec 08             	sub    $0x8,%esp
   12199:	68 0c 40 01 00       	push   $0x1400c
   1219e:	ff 75 08             	pushl  0x8(%ebp)
   121a1:	e8 b7 fc ff ff       	call   11e5d <do_default_handler>
   121a6:	83 c4 10             	add    $0x10,%esp
}   
   121a9:	90                   	nop
   121aa:	c9                   	leave  
   121ab:	c3                   	ret    

000121ac <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   121ac:	55                   	push   %ebp
   121ad:	89 e5                	mov    %esp,%ebp
   121af:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   121b2:	83 ec 08             	sub    $0x8,%esp
   121b5:	68 2c 40 01 00       	push   $0x1402c
   121ba:	ff 75 08             	pushl  0x8(%ebp)
   121bd:	e8 9b fc ff ff       	call   11e5d <do_default_handler>
   121c2:	83 c4 10             	add    $0x10,%esp
}   
   121c5:	90                   	nop
   121c6:	c9                   	leave  
   121c7:	c3                   	ret    

000121c8 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   121c8:	55                   	push   %ebp
   121c9:	89 e5                	mov    %esp,%ebp
   121cb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   121ce:	83 ec 08             	sub    $0x8,%esp
   121d1:	68 46 40 01 00       	push   $0x14046
   121d6:	ff 75 08             	pushl  0x8(%ebp)
   121d9:	e8 7f fc ff ff       	call   11e5d <do_default_handler>
   121de:	83 c4 10             	add    $0x10,%esp
}   
   121e1:	90                   	nop
   121e2:	c9                   	leave  
   121e3:	c3                   	ret    

000121e4 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   121e4:	55                   	push   %ebp
   121e5:	89 e5                	mov    %esp,%ebp
   121e7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   121ea:	83 ec 08             	sub    $0x8,%esp
   121ed:	68 60 40 01 00       	push   $0x14060
   121f2:	ff 75 08             	pushl  0x8(%ebp)
   121f5:	e8 63 fc ff ff       	call   11e5d <do_default_handler>
   121fa:	83 c4 10             	add    $0x10,%esp
}
   121fd:	90                   	nop
   121fe:	c9                   	leave  
   121ff:	c3                   	ret    

00012200 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   12200:	55                   	push   %ebp
   12201:	89 e5                	mov    %esp,%ebp
   12203:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   12206:	83 ec 08             	sub    $0x8,%esp
   12209:	68 8c 40 01 00       	push   $0x1408c
   1220e:	ff 75 08             	pushl  0x8(%ebp)
   12211:	e8 47 fc ff ff       	call   11e5d <do_default_handler>
   12216:	83 c4 10             	add    $0x10,%esp
}
   12219:	90                   	nop
   1221a:	c9                   	leave  
   1221b:	c3                   	ret    

0001221c <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   1221c:	55                   	push   %ebp
   1221d:	89 e5                	mov    %esp,%ebp
   1221f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   12222:	83 ec 08             	sub    $0x8,%esp
   12225:	68 b0 40 01 00       	push   $0x140b0
   1222a:	ff 75 08             	pushl  0x8(%ebp)
   1222d:	e8 2b fc ff ff       	call   11e5d <do_default_handler>
   12232:	83 c4 10             	add    $0x10,%esp
}
   12235:	90                   	nop
   12236:	c9                   	leave  
   12237:	c3                   	ret    

00012238 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   12238:	55                   	push   %ebp
   12239:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1223b:	6a 11                	push   $0x11
   1223d:	6a 20                	push   $0x20
   1223f:	e8 a1 fa ff ff       	call   11ce5 <outb>
   12244:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   12247:	6a 20                	push   $0x20
   12249:	6a 21                	push   $0x21
   1224b:	e8 95 fa ff ff       	call   11ce5 <outb>
   12250:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   12253:	6a 04                	push   $0x4
   12255:	6a 21                	push   $0x21
   12257:	e8 89 fa ff ff       	call   11ce5 <outb>
   1225c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   1225f:	6a 01                	push   $0x1
   12261:	6a 21                	push   $0x21
   12263:	e8 7d fa ff ff       	call   11ce5 <outb>
   12268:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1226b:	6a 11                	push   $0x11
   1226d:	68 a0 00 00 00       	push   $0xa0
   12272:	e8 6e fa ff ff       	call   11ce5 <outb>
   12277:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1227a:	6a 28                	push   $0x28
   1227c:	68 a1 00 00 00       	push   $0xa1
   12281:	e8 5f fa ff ff       	call   11ce5 <outb>
   12286:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   12289:	6a 02                	push   $0x2
   1228b:	68 a1 00 00 00       	push   $0xa1
   12290:	e8 50 fa ff ff       	call   11ce5 <outb>
   12295:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12298:	6a 01                	push   $0x1
   1229a:	68 a1 00 00 00       	push   $0xa1
   1229f:	e8 41 fa ff ff       	call   11ce5 <outb>
   122a4:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   122a7:	68 fb 00 00 00       	push   $0xfb
   122ac:	6a 21                	push   $0x21
   122ae:	e8 32 fa ff ff       	call   11ce5 <outb>
   122b3:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   122b6:	68 ff 00 00 00       	push   $0xff
   122bb:	68 a1 00 00 00       	push   $0xa1
   122c0:	e8 20 fa ff ff       	call   11ce5 <outb>
   122c5:	83 c4 08             	add    $0x8,%esp
}
   122c8:	90                   	nop
   122c9:	c9                   	leave  
   122ca:	c3                   	ret    

000122cb <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   122cb:	55                   	push   %ebp
   122cc:	89 e5                	mov    %esp,%ebp
   122ce:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   122d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122d8:	eb 25                	jmp    122ff <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   122da:	ba 26 00 01 00       	mov    $0x10026,%edx
   122df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122e2:	c1 e0 03             	shl    $0x3,%eax
   122e5:	05 80 f8 01 00       	add    $0x1f880,%eax
   122ea:	68 00 8e 00 00       	push   $0x8e00
   122ef:	52                   	push   %edx
   122f0:	6a 08                	push   $0x8
   122f2:	50                   	push   %eax
   122f3:	e8 1c f8 ff ff       	call   11b14 <gate_desc_set>
   122f8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   122fb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122ff:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12303:	7e d5                	jle    122da <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   12305:	83 ec 08             	sub    $0x8,%esp
   12308:	68 45 00 01 00       	push   $0x10045
   1230d:	6a 00                	push   $0x0
   1230f:	e8 77 01 00 00       	call   1248b <irq_install>
   12314:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   12317:	83 ec 08             	sub    $0x8,%esp
   1231a:	68 64 00 01 00       	push   $0x10064
   1231f:	6a 01                	push   $0x1
   12321:	e8 65 01 00 00       	call   1248b <irq_install>
   12326:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   12329:	83 ec 08             	sub    $0x8,%esp
   1232c:	68 83 00 01 00       	push   $0x10083
   12331:	6a 02                	push   $0x2
   12333:	e8 53 01 00 00       	call   1248b <irq_install>
   12338:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   1233b:	83 ec 08             	sub    $0x8,%esp
   1233e:	68 a2 00 01 00       	push   $0x100a2
   12343:	6a 03                	push   $0x3
   12345:	e8 41 01 00 00       	call   1248b <irq_install>
   1234a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   1234d:	83 ec 08             	sub    $0x8,%esp
   12350:	68 c1 00 01 00       	push   $0x100c1
   12355:	6a 04                	push   $0x4
   12357:	e8 2f 01 00 00       	call   1248b <irq_install>
   1235c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   1235f:	83 ec 08             	sub    $0x8,%esp
   12362:	68 e0 00 01 00       	push   $0x100e0
   12367:	6a 05                	push   $0x5
   12369:	e8 1d 01 00 00       	call   1248b <irq_install>
   1236e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   12371:	83 ec 08             	sub    $0x8,%esp
   12374:	68 ff 00 01 00       	push   $0x100ff
   12379:	6a 06                	push   $0x6
   1237b:	e8 0b 01 00 00       	call   1248b <irq_install>
   12380:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   12383:	83 ec 08             	sub    $0x8,%esp
   12386:	68 1e 01 01 00       	push   $0x1011e
   1238b:	6a 07                	push   $0x7
   1238d:	e8 f9 00 00 00       	call   1248b <irq_install>
   12392:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   12395:	83 ec 08             	sub    $0x8,%esp
   12398:	68 3d 01 01 00       	push   $0x1013d
   1239d:	6a 08                	push   $0x8
   1239f:	e8 e7 00 00 00       	call   1248b <irq_install>
   123a4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   123a7:	83 ec 08             	sub    $0x8,%esp
   123aa:	68 5a 01 01 00       	push   $0x1015a
   123af:	6a 0a                	push   $0xa
   123b1:	e8 d5 00 00 00       	call   1248b <irq_install>
   123b6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   123b9:	83 ec 08             	sub    $0x8,%esp
   123bc:	68 77 01 01 00       	push   $0x10177
   123c1:	6a 0b                	push   $0xb
   123c3:	e8 c3 00 00 00       	call   1248b <irq_install>
   123c8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   123cb:	83 ec 08             	sub    $0x8,%esp
   123ce:	68 94 01 01 00       	push   $0x10194
   123d3:	6a 0c                	push   $0xc
   123d5:	e8 b1 00 00 00       	call   1248b <irq_install>
   123da:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   123dd:	83 ec 08             	sub    $0x8,%esp
   123e0:	68 b3 01 01 00       	push   $0x101b3
   123e5:	6a 0d                	push   $0xd
   123e7:	e8 9f 00 00 00       	call   1248b <irq_install>
   123ec:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   123ef:	83 ec 08             	sub    $0x8,%esp
   123f2:	68 d0 01 01 00       	push   $0x101d0
   123f7:	6a 0e                	push   $0xe
   123f9:	e8 8d 00 00 00       	call   1248b <irq_install>
   123fe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   12401:	83 ec 08             	sub    $0x8,%esp
   12404:	68 ed 01 01 00       	push   $0x101ed
   12409:	6a 10                	push   $0x10
   1240b:	e8 7b 00 00 00       	call   1248b <irq_install>
   12410:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   12413:	83 ec 08             	sub    $0x8,%esp
   12416:	68 0c 02 01 00       	push   $0x1020c
   1241b:	6a 11                	push   $0x11
   1241d:	e8 69 00 00 00       	call   1248b <irq_install>
   12422:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   12425:	83 ec 08             	sub    $0x8,%esp
   12428:	68 29 02 01 00       	push   $0x10229
   1242d:	6a 12                	push   $0x12
   1242f:	e8 57 00 00 00       	call   1248b <irq_install>
   12434:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   12437:	83 ec 08             	sub    $0x8,%esp
   1243a:	68 48 02 01 00       	push   $0x10248
   1243f:	6a 13                	push   $0x13
   12441:	e8 45 00 00 00       	call   1248b <irq_install>
   12446:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   12449:	83 ec 08             	sub    $0x8,%esp
   1244c:	68 67 02 01 00       	push   $0x10267
   12451:	6a 14                	push   $0x14
   12453:	e8 33 00 00 00       	call   1248b <irq_install>
   12458:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   1245b:	83 ec 08             	sub    $0x8,%esp
   1245e:	68 86 02 01 00       	push   $0x10286
   12463:	6a 15                	push   $0x15
   12465:	e8 21 00 00 00       	call   1248b <irq_install>
   1246a:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   1246d:	b8 80 f8 01 00       	mov    $0x1f880,%eax
   12472:	83 ec 08             	sub    $0x8,%esp
   12475:	68 00 04 00 00       	push   $0x400
   1247a:	50                   	push   %eax
   1247b:	e8 92 f8 ff ff       	call   11d12 <lidt>
   12480:	83 c4 10             	add    $0x10,%esp

    init_pic();
   12483:	e8 b0 fd ff ff       	call   12238 <init_pic>
}
   12488:	90                   	nop
   12489:	c9                   	leave  
   1248a:	c3                   	ret    

0001248b <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   1248b:	55                   	push   %ebp
   1248c:	89 e5                	mov    %esp,%ebp
   1248e:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   12491:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12495:	7e 07                	jle    1249e <irq_install+0x13>
        return -1;
   12497:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1249c:	eb 20                	jmp    124be <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   1249e:	8b 45 0c             	mov    0xc(%ebp),%eax
   124a1:	8b 55 08             	mov    0x8(%ebp),%edx
   124a4:	c1 e2 03             	shl    $0x3,%edx
   124a7:	81 c2 80 f8 01 00    	add    $0x1f880,%edx
   124ad:	68 00 8e 00 00       	push   $0x8e00
   124b2:	50                   	push   %eax
   124b3:	6a 08                	push   $0x8
   124b5:	52                   	push   %edx
   124b6:	e8 59 f6 ff ff       	call   11b14 <gate_desc_set>
   124bb:	83 c4 10             	add    $0x10,%esp
}
   124be:	c9                   	leave  
   124bf:	c3                   	ret    

000124c0 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   124c0:	55                   	push   %ebp
   124c1:	89 e5                	mov    %esp,%ebp
   124c3:	53                   	push   %ebx
   124c4:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   124c7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   124cb:	7e 78                	jle    12545 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   124cd:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   124d1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   124d5:	7f 32                	jg     12509 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   124d7:	6a 21                	push   $0x21
   124d9:	e8 ea f7 ff ff       	call   11cc8 <inb>
   124de:	83 c4 04             	add    $0x4,%esp
   124e1:	89 c2                	mov    %eax,%edx
   124e3:	8b 45 08             	mov    0x8(%ebp),%eax
   124e6:	bb 01 00 00 00       	mov    $0x1,%ebx
   124eb:	89 c1                	mov    %eax,%ecx
   124ed:	d3 e3                	shl    %cl,%ebx
   124ef:	89 d8                	mov    %ebx,%eax
   124f1:	f7 d0                	not    %eax
   124f3:	21 d0                	and    %edx,%eax
   124f5:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   124f8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   124fc:	50                   	push   %eax
   124fd:	6a 21                	push   $0x21
   124ff:	e8 e1 f7 ff ff       	call   11ce5 <outb>
   12504:	83 c4 08             	add    $0x8,%esp
   12507:	eb 3d                	jmp    12546 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   12509:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   1250d:	68 a1 00 00 00       	push   $0xa1
   12512:	e8 b1 f7 ff ff       	call   11cc8 <inb>
   12517:	83 c4 04             	add    $0x4,%esp
   1251a:	89 c2                	mov    %eax,%edx
   1251c:	8b 45 08             	mov    0x8(%ebp),%eax
   1251f:	bb 01 00 00 00       	mov    $0x1,%ebx
   12524:	89 c1                	mov    %eax,%ecx
   12526:	d3 e3                	shl    %cl,%ebx
   12528:	89 d8                	mov    %ebx,%eax
   1252a:	f7 d0                	not    %eax
   1252c:	21 d0                	and    %edx,%eax
   1252e:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   12531:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12535:	50                   	push   %eax
   12536:	68 a1 00 00 00       	push   $0xa1
   1253b:	e8 a5 f7 ff ff       	call   11ce5 <outb>
   12540:	83 c4 08             	add    $0x8,%esp
   12543:	eb 01                	jmp    12546 <irq_enable+0x86>
        return;
   12545:	90                   	nop
    }
}
   12546:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12549:	c9                   	leave  
   1254a:	c3                   	ret    

0001254b <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   1254b:	55                   	push   %ebp
   1254c:	89 e5                	mov    %esp,%ebp
   1254e:	53                   	push   %ebx
   1254f:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12552:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12556:	7e 74                	jle    125cc <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   12558:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   1255c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12560:	7f 30                	jg     12592 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   12562:	6a 21                	push   $0x21
   12564:	e8 5f f7 ff ff       	call   11cc8 <inb>
   12569:	83 c4 04             	add    $0x4,%esp
   1256c:	89 c3                	mov    %eax,%ebx
   1256e:	8b 45 08             	mov    0x8(%ebp),%eax
   12571:	ba 01 00 00 00       	mov    $0x1,%edx
   12576:	89 c1                	mov    %eax,%ecx
   12578:	d3 e2                	shl    %cl,%edx
   1257a:	89 d0                	mov    %edx,%eax
   1257c:	09 d8                	or     %ebx,%eax
   1257e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   12581:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12585:	50                   	push   %eax
   12586:	6a 21                	push   $0x21
   12588:	e8 58 f7 ff ff       	call   11ce5 <outb>
   1258d:	83 c4 08             	add    $0x8,%esp
   12590:	eb 3b                	jmp    125cd <irq_disable+0x82>
    } else {
        irq_num -= 8;
   12592:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   12596:	68 a1 00 00 00       	push   $0xa1
   1259b:	e8 28 f7 ff ff       	call   11cc8 <inb>
   125a0:	83 c4 04             	add    $0x4,%esp
   125a3:	89 c3                	mov    %eax,%ebx
   125a5:	8b 45 08             	mov    0x8(%ebp),%eax
   125a8:	ba 01 00 00 00       	mov    $0x1,%edx
   125ad:	89 c1                	mov    %eax,%ecx
   125af:	d3 e2                	shl    %cl,%edx
   125b1:	89 d0                	mov    %edx,%eax
   125b3:	09 d8                	or     %ebx,%eax
   125b5:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   125b8:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   125bc:	50                   	push   %eax
   125bd:	68 a1 00 00 00       	push   $0xa1
   125c2:	e8 1e f7 ff ff       	call   11ce5 <outb>
   125c7:	83 c4 08             	add    $0x8,%esp
   125ca:	eb 01                	jmp    125cd <irq_disable+0x82>
        return;
   125cc:	90                   	nop
    }
}
   125cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   125d0:	c9                   	leave  
   125d1:	c3                   	ret    

000125d2 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   125d2:	55                   	push   %ebp
   125d3:	89 e5                	mov    %esp,%ebp
    cli();
   125d5:	e8 2a f7 ff ff       	call   11d04 <cli>
}
   125da:	90                   	nop
   125db:	5d                   	pop    %ebp
   125dc:	c3                   	ret    

000125dd <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   125dd:	55                   	push   %ebp
   125de:	89 e5                	mov    %esp,%ebp
    sti();
   125e0:	e8 26 f7 ff ff       	call   11d0b <sti>
}
   125e5:	90                   	nop
   125e6:	5d                   	pop    %ebp
   125e7:	c3                   	ret    

000125e8 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   125e8:	55                   	push   %ebp
   125e9:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   125eb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   125ef:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   125f3:	7e 0f                	jle    12604 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   125f5:	6a 20                	push   $0x20
   125f7:	68 a0 00 00 00       	push   $0xa0
   125fc:	e8 e4 f6 ff ff       	call   11ce5 <outb>
   12601:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12604:	6a 20                	push   $0x20
   12606:	6a 20                	push   $0x20
   12608:	e8 d8 f6 ff ff       	call   11ce5 <outb>
   1260d:	83 c4 08             	add    $0x8,%esp
}
   12610:	90                   	nop
   12611:	c9                   	leave  
   12612:	c3                   	ret    

00012613 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   12613:	55                   	push   %ebp
   12614:	89 e5                	mov    %esp,%ebp
   12616:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   12619:	e8 34 f7 ff ff       	call   11d52 <read_eflags>
   1261e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   12621:	e8 ac ff ff ff       	call   125d2 <irq_disable_global>
    return state;
   12626:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12629:	c9                   	leave  
   1262a:	c3                   	ret    

0001262b <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   1262b:	55                   	push   %ebp
   1262c:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1262e:	ff 75 08             	pushl  0x8(%ebp)
   12631:	e8 2c f7 ff ff       	call   11d62 <write_eflags>
   12636:	83 c4 04             	add    $0x4,%esp
   12639:	90                   	nop
   1263a:	c9                   	leave  
   1263b:	c3                   	ret    

0001263c <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1263c:	55                   	push   %ebp
   1263d:	89 e5                	mov    %esp,%ebp
   1263f:	83 ec 08             	sub    $0x8,%esp
   12642:	8b 55 08             	mov    0x8(%ebp),%edx
   12645:	8b 45 0c             	mov    0xc(%ebp),%eax
   12648:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1264c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1264f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12653:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12657:	ee                   	out    %al,(%dx)
}
   12658:	90                   	nop
   12659:	c9                   	leave  
   1265a:	c3                   	ret    

0001265b <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   1265b:	55                   	push   %ebp
   1265c:	89 e5                	mov    %esp,%ebp
   1265e:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12661:	a1 80 fc 01 00       	mov    0x1fc80,%eax
   12666:	83 c0 01             	add    $0x1,%eax
   12669:	a3 80 fc 01 00       	mov    %eax,0x1fc80

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   1266e:	83 ec 0c             	sub    $0xc,%esp
   12671:	6a 20                	push   $0x20
   12673:	e8 70 ff ff ff       	call   125e8 <pic_send_eoi>
   12678:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   1267b:	e8 19 f0 ff ff       	call   11699 <task_time_tick>
}
   12680:	90                   	nop
   12681:	c9                   	leave  
   12682:	c3                   	ret    

00012683 <init_pit>:


static void init_pit(void) {
   12683:	55                   	push   %ebp
   12684:	89 e5                	mov    %esp,%ebp
   12686:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   12689:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   12690:	6a 36                	push   $0x36
   12692:	6a 43                	push   $0x43
   12694:	e8 a3 ff ff ff       	call   1263c <outb>
   12699:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   1269c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1269f:	0f b6 c0             	movzbl %al,%eax
   126a2:	50                   	push   %eax
   126a3:	6a 40                	push   $0x40
   126a5:	e8 92 ff ff ff       	call   1263c <outb>
   126aa:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   126ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126b0:	c1 e8 08             	shr    $0x8,%eax
   126b3:	0f b6 c0             	movzbl %al,%eax
   126b6:	50                   	push   %eax
   126b7:	6a 40                	push   $0x40
   126b9:	e8 7e ff ff ff       	call   1263c <outb>
   126be:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   126c1:	83 ec 08             	sub    $0x8,%esp
   126c4:	68 a3 02 01 00       	push   $0x102a3
   126c9:	6a 20                	push   $0x20
   126cb:	e8 bb fd ff ff       	call   1248b <irq_install>
   126d0:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   126d3:	83 ec 0c             	sub    $0xc,%esp
   126d6:	6a 20                	push   $0x20
   126d8:	e8 e3 fd ff ff       	call   124c0 <irq_enable>
   126dd:	83 c4 10             	add    $0x10,%esp
}
   126e0:	90                   	nop
   126e1:	c9                   	leave  
   126e2:	c3                   	ret    

000126e3 <timer_init>:

void timer_init(void) {
   126e3:	55                   	push   %ebp
   126e4:	89 e5                	mov    %esp,%ebp
   126e6:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   126e9:	c7 05 80 fc 01 00 00 	movl   $0x0,0x1fc80
   126f0:	00 00 00 
    init_pit();
   126f3:	e8 8b ff ff ff       	call   12683 <init_pit>
   126f8:	90                   	nop
   126f9:	c9                   	leave  
   126fa:	c3                   	ret    

000126fb <list_size>:
static inline int list_size(list_t* list) {
   126fb:	55                   	push   %ebp
   126fc:	89 e5                	mov    %esp,%ebp
    return list->count;
   126fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12701:	8b 40 08             	mov    0x8(%eax),%eax
}
   12704:	5d                   	pop    %ebp
   12705:	c3                   	ret    

00012706 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   12706:	55                   	push   %ebp
   12707:	89 e5                	mov    %esp,%ebp
    return list->first;
   12709:	8b 45 08             	mov    0x8(%ebp),%eax
   1270c:	8b 00                	mov    (%eax),%eax
}
   1270e:	5d                   	pop    %ebp
   1270f:	c3                   	ret    

00012710 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   12710:	55                   	push   %ebp
   12711:	89 e5                	mov    %esp,%ebp
    return list->last;
   12713:	8b 45 08             	mov    0x8(%ebp),%eax
   12716:	8b 40 04             	mov    0x4(%eax),%eax
}
   12719:	5d                   	pop    %ebp
   1271a:	c3                   	ret    

0001271b <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   1271b:	55                   	push   %ebp
   1271c:	89 e5                	mov    %esp,%ebp
   1271e:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   12721:	8b 45 08             	mov    0x8(%ebp),%eax
   12724:	8b 40 50             	mov    0x50(%eax),%eax
   12727:	85 c0                	test   %eax,%eax
   12729:	75 19                	jne    12744 <kernel_init+0x29>
   1272b:	68 d8 40 01 00       	push   $0x140d8
   12730:	68 e8 41 01 00       	push   $0x141e8
   12735:	6a 12                	push   $0x12
   12737:	68 fc 40 01 00       	push   $0x140fc
   1273c:	e8 44 0d 00 00       	call   13485 <pannic>
   12741:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   12744:	90                   	nop


    log_init();
   12745:	e8 a3 0f 00 00       	call   136ed <log_init>

    memory_init(boot_info);
   1274a:	83 ec 0c             	sub    $0xc,%esp
   1274d:	ff 75 08             	pushl  0x8(%ebp)
   12750:	e8 63 e1 ff ff       	call   108b8 <memory_init>
   12755:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   12758:	e8 86 f4 ff ff       	call   11be3 <cpu_init>


    irq_init();
   1275d:	e8 69 fb ff ff       	call   122cb <irq_init>
    timer_init();
   12762:	e8 7c ff ff ff       	call   126e3 <timer_init>

    task_manager_init();
   12767:	e8 09 ec ff ff       	call   11375 <task_manager_init>
}
   1276c:	90                   	nop
   1276d:	c9                   	leave  
   1276e:	c3                   	ret    

0001276f <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   1276f:	55                   	push   %ebp
   12770:	89 e5                	mov    %esp,%ebp
   12772:	56                   	push   %esi
   12773:	53                   	push   %ebx
   12774:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   12777:	83 ec 0c             	sub    $0xc,%esp
   1277a:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1277d:	50                   	push   %eax
   1277e:	e8 4b 0d 00 00       	call   134ce <list_init>
   12783:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   12786:	83 ec 0c             	sub    $0xc,%esp
   12789:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1278c:	50                   	push   %eax
   1278d:	e8 69 ff ff ff       	call   126fb <list_size>
   12792:	83 c4 10             	add    $0x10,%esp
   12795:	89 c6                	mov    %eax,%esi
   12797:	83 ec 0c             	sub    $0xc,%esp
   1279a:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1279d:	50                   	push   %eax
   1279e:	e8 6d ff ff ff       	call   12710 <list_last>
   127a3:	83 c4 10             	add    $0x10,%esp
   127a6:	89 c3                	mov    %eax,%ebx
   127a8:	83 ec 0c             	sub    $0xc,%esp
   127ab:	8d 45 d0             	lea    -0x30(%ebp),%eax
   127ae:	50                   	push   %eax
   127af:	e8 52 ff ff ff       	call   12706 <list_first>
   127b4:	83 c4 10             	add    $0x10,%esp
   127b7:	56                   	push   %esi
   127b8:	53                   	push   %ebx
   127b9:	50                   	push   %eax
   127ba:	68 44 41 01 00       	push   $0x14144
   127bf:	e8 cb 0f 00 00       	call   1378f <log_printf>
   127c4:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   127c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   127ce:	eb 3b                	jmp    1280b <link_test+0x9c>
        list_node_t* node = &nodes[i];
   127d0:	8d 45 a8             	lea    -0x58(%ebp),%eax
   127d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   127d6:	c1 e2 03             	shl    $0x3,%edx
   127d9:	01 d0                	add    %edx,%eax
   127db:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   127de:	8b 45 dc             	mov    -0x24(%ebp),%eax
   127e1:	83 ec 04             	sub    $0x4,%esp
   127e4:	50                   	push   %eax
   127e5:	ff 75 f4             	pushl  -0xc(%ebp)
   127e8:	68 6d 41 01 00       	push   $0x1416d
   127ed:	e8 9d 0f 00 00       	call   1378f <log_printf>
   127f2:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   127f5:	83 ec 08             	sub    $0x8,%esp
   127f8:	ff 75 dc             	pushl  -0x24(%ebp)
   127fb:	8d 45 d0             	lea    -0x30(%ebp),%eax
   127fe:	50                   	push   %eax
   127ff:	e8 ed 0c 00 00       	call   134f1 <list_insert_front>
   12804:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12807:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1280b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1280f:	7e bf                	jle    127d0 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   12811:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12818:	eb 33                	jmp    1284d <link_test+0xde>
        list_remove_front(&list);
   1281a:	83 ec 0c             	sub    $0xc,%esp
   1281d:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12820:	50                   	push   %eax
   12821:	e8 8d 0d 00 00       	call   135b3 <list_remove_front>
   12826:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   12829:	83 ec 0c             	sub    $0xc,%esp
   1282c:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1282f:	50                   	push   %eax
   12830:	e8 c6 fe ff ff       	call   126fb <list_size>
   12835:	83 c4 10             	add    $0x10,%esp
   12838:	83 ec 08             	sub    $0x8,%esp
   1283b:	50                   	push   %eax
   1283c:	68 75 41 01 00       	push   $0x14175
   12841:	e8 49 0f 00 00       	call   1378f <log_printf>
   12846:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12849:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1284d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12851:	7e c7                	jle    1281a <link_test+0xab>
    }

    list_init(&list);
   12853:	83 ec 0c             	sub    $0xc,%esp
   12856:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12859:	50                   	push   %eax
   1285a:	e8 6f 0c 00 00       	call   134ce <list_init>
   1285f:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   12862:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12869:	eb 3b                	jmp    128a6 <link_test+0x137>
        list_node_t* node = &nodes[i];
   1286b:	8d 45 a8             	lea    -0x58(%ebp),%eax
   1286e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12871:	c1 e2 03             	shl    $0x3,%edx
   12874:	01 d0                	add    %edx,%eax
   12876:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   12879:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1287c:	83 ec 04             	sub    $0x4,%esp
   1287f:	50                   	push   %eax
   12880:	ff 75 ec             	pushl  -0x14(%ebp)
   12883:	68 6d 41 01 00       	push   $0x1416d
   12888:	e8 02 0f 00 00       	call   1378f <log_printf>
   1288d:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   12890:	83 ec 08             	sub    $0x8,%esp
   12893:	ff 75 e0             	pushl  -0x20(%ebp)
   12896:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12899:	50                   	push   %eax
   1289a:	e8 b1 0c 00 00       	call   13550 <list_insert_back>
   1289f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   128a2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   128a6:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   128aa:	7e bf                	jle    1286b <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   128ac:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   128b3:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   128ba:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   128c1:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   128c8:	8d 45 9c             	lea    -0x64(%ebp),%eax
   128cb:	83 c0 04             	add    $0x4,%eax
   128ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   128d1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   128d5:	74 08                	je     128df <link_test+0x170>
   128d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   128da:	83 e8 04             	sub    $0x4,%eax
   128dd:	eb 05                	jmp    128e4 <link_test+0x175>
   128df:	b8 00 00 00 00       	mov    $0x0,%eax
   128e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   128e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   128ea:	8b 00                	mov    (%eax),%eax
   128ec:	3d 56 34 12 00       	cmp    $0x123456,%eax
   128f1:	74 10                	je     12903 <link_test+0x194>
        log_printf("error!");
   128f3:	83 ec 0c             	sub    $0xc,%esp
   128f6:	68 7a 41 01 00       	push   $0x1417a
   128fb:	e8 8f 0e 00 00       	call   1378f <log_printf>
   12900:	83 c4 10             	add    $0x10,%esp
    }

}
   12903:	90                   	nop
   12904:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12907:	5b                   	pop    %ebx
   12908:	5e                   	pop    %esi
   12909:	5d                   	pop    %ebp
   1290a:	c3                   	ret    

0001290b <move_to_first_task>:


void move_to_first_task(void) {
   1290b:	55                   	push   %ebp
   1290c:	89 e5                	mov    %esp,%ebp
   1290e:	56                   	push   %esi
   1290f:	53                   	push   %ebx
   12910:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   12913:	e8 bb ec ff ff       	call   115d3 <task_current>
   12918:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   1291b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1291f:	75 19                	jne    1293a <move_to_first_task+0x2f>
   12921:	68 81 41 01 00       	push   $0x14181
   12926:	68 f4 41 01 00       	push   $0x141f4
   1292b:	6a 68                	push   $0x68
   1292d:	68 fc 40 01 00       	push   $0x140fc
   12932:	e8 4e 0b 00 00       	call   13485 <pannic>
   12937:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   1293a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1293d:	83 c0 50             	add    $0x50,%eax
   12940:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"        // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   12943:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12946:	8b 40 50             	mov    0x50(%eax),%eax
   12949:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1294c:	8b 52 38             	mov    0x38(%edx),%edx
   1294f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   12952:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   12955:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   12958:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1295b:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1295e:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   12961:	50                   	push   %eax
   12962:	52                   	push   %edx
   12963:	51                   	push   %ecx
   12964:	53                   	push   %ebx
   12965:	56                   	push   %esi
   12966:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   12967:	90                   	nop
   12968:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1296b:	5b                   	pop    %ebx
   1296c:	5e                   	pop    %esi
   1296d:	5d                   	pop    %ebp
   1296e:	c3                   	ret    

0001296f <test_task1>:



static void test_task1(void) {
   1296f:	55                   	push   %ebp
   12970:	89 e5                	mov    %esp,%ebp
   12972:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12975:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task1: %d", count);
   1297c:	83 ec 08             	sub    $0x8,%esp
   1297f:	ff 75 f4             	pushl  -0xc(%ebp)
   12982:	68 8b 41 01 00       	push   $0x1418b
   12987:	e8 03 0e 00 00       	call   1378f <log_printf>
   1298c:	83 c4 10             	add    $0x10,%esp
        count++;
   1298f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   12993:	83 ec 0c             	sub    $0xc,%esp
   12996:	68 e8 03 00 00       	push   $0x3e8
   1299b:	e8 23 ee ff ff       	call   117c3 <sys_sleep>
   129a0:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task1: %d", count);
   129a3:	eb d7                	jmp    1297c <test_task1+0xd>

000129a5 <test_task2>:
    }
}


static void test_task2(void) {
   129a5:	55                   	push   %ebp
   129a6:	89 e5                	mov    %esp,%ebp
   129a8:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   129ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task2: %d", count);
   129b2:	83 ec 08             	sub    $0x8,%esp
   129b5:	ff 75 f4             	pushl  -0xc(%ebp)
   129b8:	68 9a 41 01 00       	push   $0x1419a
   129bd:	e8 cd 0d 00 00       	call   1378f <log_printf>
   129c2:	83 c4 10             	add    $0x10,%esp
        count++;
   129c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   129c9:	83 ec 0c             	sub    $0xc,%esp
   129cc:	68 e8 03 00 00       	push   $0x3e8
   129d1:	e8 ed ed ff ff       	call   117c3 <sys_sleep>
   129d6:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task2: %d", count);
   129d9:	eb d7                	jmp    129b2 <test_task2+0xd>

000129db <init_main>:
static task_t task1;
static task_t task2;
static uint32_t stack1[MEM_PAGE_SIZE];
static uint32_t stack2[MEM_PAGE_SIZE];

void init_main(void) {
   129db:	55                   	push   %ebp
   129dc:	89 e5                	mov    %esp,%ebp
   129de:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();    
    log_printf("Kernel is running ...");
   129e1:	83 ec 0c             	sub    $0xc,%esp
   129e4:	68 a9 41 01 00       	push   $0x141a9
   129e9:	e8 a1 0d 00 00       	call   1378f <log_printf>
   129ee:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   129f1:	83 ec 04             	sub    $0x4,%esp
   129f4:	68 bf 41 01 00       	push   $0x141bf
   129f9:	68 c4 41 01 00       	push   $0x141c4
   129fe:	68 ca 41 01 00       	push   $0x141ca
   12a03:	e8 87 0d 00 00       	call   1378f <log_printf>
   12a08:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   12a0b:	83 ec 0c             	sub    $0xc,%esp
   12a0e:	6a 61                	push   $0x61
   12a10:	68 56 34 12 00       	push   $0x123456
   12a15:	6a 85                	push   $0xffffff85
   12a17:	68 39 30 00 00       	push   $0x3039
   12a1c:	68 d9 41 01 00       	push   $0x141d9
   12a21:	e8 69 0d 00 00       	call   1378f <log_printf>
   12a26:	83 c4 20             	add    $0x20,%esp
    
    // task_init(&task1, "test_task1", TASK_FLAGS_SYSTEM, (uint32_t)test_task1, (uint32_t)&stack1[MEM_PAGE_SIZE]);
    // task_init(&task2, "test_task2", TASK_FLAGS_SYSTEM, (uint32_t)test_task2, (uint32_t)&stack2[MEM_PAGE_SIZE]);


    sys_sched_yield();
   12a29:	e8 af eb ff ff       	call   115dd <sys_sched_yield>

    // while (1);

    task_first_init();
   12a2e:	e8 2b ea ff ff       	call   1145e <task_first_init>
    move_to_first_task();
   12a33:	e8 d3 fe ff ff       	call   1290b <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   12a38:	90                   	nop
   12a39:	c9                   	leave  
   12a3a:	c3                   	ret    

00012a3b <list_size>:
static inline int list_size(list_t* list) {
   12a3b:	55                   	push   %ebp
   12a3c:	89 e5                	mov    %esp,%ebp
    return list->count;
   12a3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a41:	8b 40 08             	mov    0x8(%eax),%eax
}
   12a44:	5d                   	pop    %ebp
   12a45:	c3                   	ret    

00012a46 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   12a46:	55                   	push   %ebp
   12a47:	89 e5                	mov    %esp,%ebp
   12a49:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   12a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4f:	83 ec 08             	sub    $0x8,%esp
   12a52:	ff 75 0c             	pushl  0xc(%ebp)
   12a55:	50                   	push   %eax
   12a56:	e8 0a 05 00 00       	call   12f65 <kstrcpy>
   12a5b:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   12a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a61:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   12a68:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6b:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   12a72:	8b 45 08             	mov    0x8(%ebp),%eax
   12a75:	83 c0 48             	add    $0x48,%eax
   12a78:	83 ec 0c             	sub    $0xc,%esp
   12a7b:	50                   	push   %eax
   12a7c:	e8 4d 0a 00 00       	call   134ce <list_init>
   12a81:	83 c4 10             	add    $0x10,%esp
}
   12a84:	90                   	nop
   12a85:	c9                   	leave  
   12a86:	c3                   	ret    

00012a87 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   12a87:	55                   	push   %ebp
   12a88:	89 e5                	mov    %esp,%ebp
   12a8a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12a8d:	e8 81 fb ff ff       	call   12613 <irq_enter_protection>
   12a92:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12a95:	e8 39 eb ff ff       	call   115d3 <task_current>
   12a9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   12a9d:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa0:	8b 40 44             	mov    0x44(%eax),%eax
   12aa3:	85 c0                	test   %eax,%eax
   12aa5:	75 15                	jne    12abc <mutex_acquire+0x35>
        mutex->locked_count = 1;
   12aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aaa:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   12ab1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12ab7:	89 50 40             	mov    %edx,0x40(%eax)
   12aba:	eb 48                	jmp    12b04 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   12abc:	8b 45 08             	mov    0x8(%ebp),%eax
   12abf:	8b 40 40             	mov    0x40(%eax),%eax
   12ac2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12ac5:	75 11                	jne    12ad8 <mutex_acquire+0x51>
        mutex->locked_count++;
   12ac7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aca:	8b 40 44             	mov    0x44(%eax),%eax
   12acd:	8d 50 01             	lea    0x1(%eax),%edx
   12ad0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad3:	89 50 44             	mov    %edx,0x44(%eax)
   12ad6:	eb 2c                	jmp    12b04 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   12ad8:	83 ec 0c             	sub    $0xc,%esp
   12adb:	ff 75 f0             	pushl  -0x10(%ebp)
   12ade:	e8 82 ea ff ff       	call   11565 <task_set_blocked>
   12ae3:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   12ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12ae9:	8d 50 3c             	lea    0x3c(%eax),%edx
   12aec:	8b 45 08             	mov    0x8(%ebp),%eax
   12aef:	83 c0 48             	add    $0x48,%eax
   12af2:	83 ec 08             	sub    $0x8,%esp
   12af5:	52                   	push   %edx
   12af6:	50                   	push   %eax
   12af7:	e8 54 0a 00 00       	call   13550 <list_insert_back>
   12afc:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12aff:	e8 3a eb ff ff       	call   1163e <task_dispatch>
    }

    irq_leave_protection(state);
   12b04:	83 ec 0c             	sub    $0xc,%esp
   12b07:	ff 75 f4             	pushl  -0xc(%ebp)
   12b0a:	e8 1c fb ff ff       	call   1262b <irq_leave_protection>
   12b0f:	83 c4 10             	add    $0x10,%esp
}
   12b12:	90                   	nop
   12b13:	c9                   	leave  
   12b14:	c3                   	ret    

00012b15 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   12b15:	55                   	push   %ebp
   12b16:	89 e5                	mov    %esp,%ebp
   12b18:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12b1b:	e8 f3 fa ff ff       	call   12613 <irq_enter_protection>
   12b20:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12b23:	e8 ab ea ff ff       	call   115d3 <task_current>
   12b28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   12b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2e:	8b 40 40             	mov    0x40(%eax),%eax
   12b31:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12b34:	0f 85 8a 00 00 00    	jne    12bc4 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   12b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3d:	8b 40 44             	mov    0x44(%eax),%eax
   12b40:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b43:	8b 45 08             	mov    0x8(%ebp),%eax
   12b46:	89 50 44             	mov    %edx,0x44(%eax)
   12b49:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4c:	8b 40 44             	mov    0x44(%eax),%eax
   12b4f:	85 c0                	test   %eax,%eax
   12b51:	75 71                	jne    12bc4 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   12b53:	8b 45 08             	mov    0x8(%ebp),%eax
   12b56:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   12b5d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b60:	83 c0 48             	add    $0x48,%eax
   12b63:	83 ec 0c             	sub    $0xc,%esp
   12b66:	50                   	push   %eax
   12b67:	e8 cf fe ff ff       	call   12a3b <list_size>
   12b6c:	83 c4 10             	add    $0x10,%esp
   12b6f:	85 c0                	test   %eax,%eax
   12b71:	74 51                	je     12bc4 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   12b73:	8b 45 08             	mov    0x8(%ebp),%eax
   12b76:	83 c0 48             	add    $0x48,%eax
   12b79:	83 ec 0c             	sub    $0xc,%esp
   12b7c:	50                   	push   %eax
   12b7d:	e8 31 0a 00 00       	call   135b3 <list_remove_front>
   12b82:	83 c4 10             	add    $0x10,%esp
   12b85:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   12b88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12b8c:	74 08                	je     12b96 <mutex_release+0x81>
   12b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12b91:	83 e8 3c             	sub    $0x3c,%eax
   12b94:	eb 05                	jmp    12b9b <mutex_release+0x86>
   12b96:	b8 00 00 00 00       	mov    $0x0,%eax
   12b9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12b9e:	83 ec 0c             	sub    $0xc,%esp
   12ba1:	ff 75 e8             	pushl  -0x18(%ebp)
   12ba4:	e8 88 e9 ff ff       	call   11531 <task_set_ready>
   12ba9:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12bac:	8b 45 08             	mov    0x8(%ebp),%eax
   12baf:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12bb2:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   12bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb8:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   12bbf:	e8 7a ea ff ff       	call   1163e <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   12bc4:	83 ec 0c             	sub    $0xc,%esp
   12bc7:	ff 75 f4             	pushl  -0xc(%ebp)
   12bca:	e8 5c fa ff ff       	call   1262b <irq_leave_protection>
   12bcf:	83 c4 10             	add    $0x10,%esp
   12bd2:	90                   	nop
   12bd3:	c9                   	leave  
   12bd4:	c3                   	ret    

00012bd5 <list_size>:
static inline int list_size(list_t* list) {
   12bd5:	55                   	push   %ebp
   12bd6:	89 e5                	mov    %esp,%ebp
    return list->count;
   12bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bdb:	8b 40 08             	mov    0x8(%eax),%eax
}
   12bde:	5d                   	pop    %ebp
   12bdf:	c3                   	ret    

00012be0 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   12be0:	55                   	push   %ebp
   12be1:	89 e5                	mov    %esp,%ebp
   12be3:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12be6:	8b 45 08             	mov    0x8(%ebp),%eax
   12be9:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bec:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   12bee:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf1:	83 c0 04             	add    $0x4,%eax
   12bf4:	83 ec 0c             	sub    $0xc,%esp
   12bf7:	50                   	push   %eax
   12bf8:	e8 d1 08 00 00       	call   134ce <list_init>
   12bfd:	83 c4 10             	add    $0x10,%esp
}
   12c00:	90                   	nop
   12c01:	c9                   	leave  
   12c02:	c3                   	ret    

00012c03 <sem_wait>:


void sem_wait(sem_t* sem) {
   12c03:	55                   	push   %ebp
   12c04:	89 e5                	mov    %esp,%ebp
   12c06:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12c09:	e8 05 fa ff ff       	call   12613 <irq_enter_protection>
   12c0e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 进程获得了一个信号，且不为0
    if (sem->count > 0) {
   12c11:	8b 45 08             	mov    0x8(%ebp),%eax
   12c14:	8b 00                	mov    (%eax),%eax
   12c16:	85 c0                	test   %eax,%eax
   12c18:	7e 0f                	jle    12c29 <sem_wait+0x26>
        sem->count--;
   12c1a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c1d:	8b 00                	mov    (%eax),%eax
   12c1f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c22:	8b 45 08             	mov    0x8(%ebp),%eax
   12c25:	89 10                	mov    %edx,(%eax)
   12c27:	eb 34                	jmp    12c5d <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   12c29:	e8 a5 e9 ff ff       	call   115d3 <task_current>
   12c2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   12c31:	83 ec 0c             	sub    $0xc,%esp
   12c34:	ff 75 f0             	pushl  -0x10(%ebp)
   12c37:	e8 29 e9 ff ff       	call   11565 <task_set_blocked>
   12c3c:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   12c3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c42:	8d 50 3c             	lea    0x3c(%eax),%edx
   12c45:	8b 45 08             	mov    0x8(%ebp),%eax
   12c48:	83 c0 04             	add    $0x4,%eax
   12c4b:	83 ec 08             	sub    $0x8,%esp
   12c4e:	52                   	push   %edx
   12c4f:	50                   	push   %eax
   12c50:	e8 fb 08 00 00       	call   13550 <list_insert_back>
   12c55:	83 c4 10             	add    $0x10,%esp
        
        task_dispatch();
   12c58:	e8 e1 e9 ff ff       	call   1163e <task_dispatch>
    }

    irq_leave_protection(state);
   12c5d:	83 ec 0c             	sub    $0xc,%esp
   12c60:	ff 75 f4             	pushl  -0xc(%ebp)
   12c63:	e8 c3 f9 ff ff       	call   1262b <irq_leave_protection>
   12c68:	83 c4 10             	add    $0x10,%esp
}
   12c6b:	90                   	nop
   12c6c:	c9                   	leave  
   12c6d:	c3                   	ret    

00012c6e <sem_notify>:


void sem_notify(sem_t* sem) {
   12c6e:	55                   	push   %ebp
   12c6f:	89 e5                	mov    %esp,%ebp
   12c71:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12c74:	e8 9a f9 ff ff       	call   12613 <irq_enter_protection>
   12c79:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   12c7c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c7f:	83 c0 04             	add    $0x4,%eax
   12c82:	83 ec 0c             	sub    $0xc,%esp
   12c85:	50                   	push   %eax
   12c86:	e8 4a ff ff ff       	call   12bd5 <list_size>
   12c8b:	83 c4 10             	add    $0x10,%esp
   12c8e:	85 c0                	test   %eax,%eax
   12c90:	74 40                	je     12cd2 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   12c92:	8b 45 08             	mov    0x8(%ebp),%eax
   12c95:	83 c0 04             	add    $0x4,%eax
   12c98:	83 ec 0c             	sub    $0xc,%esp
   12c9b:	50                   	push   %eax
   12c9c:	e8 12 09 00 00       	call   135b3 <list_remove_front>
   12ca1:	83 c4 10             	add    $0x10,%esp
   12ca4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   12ca7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12cab:	74 08                	je     12cb5 <sem_notify+0x47>
   12cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12cb0:	83 e8 3c             	sub    $0x3c,%eax
   12cb3:	eb 05                	jmp    12cba <sem_notify+0x4c>
   12cb5:	b8 00 00 00 00       	mov    $0x0,%eax
   12cba:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12cbd:	83 ec 0c             	sub    $0xc,%esp
   12cc0:	ff 75 ec             	pushl  -0x14(%ebp)
   12cc3:	e8 69 e8 ff ff       	call   11531 <task_set_ready>
   12cc8:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12ccb:	e8 6e e9 ff ff       	call   1163e <task_dispatch>
   12cd0:	eb 0d                	jmp    12cdf <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   12cd2:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd5:	8b 00                	mov    (%eax),%eax
   12cd7:	8d 50 01             	lea    0x1(%eax),%edx
   12cda:	8b 45 08             	mov    0x8(%ebp),%eax
   12cdd:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   12cdf:	83 ec 0c             	sub    $0xc,%esp
   12ce2:	ff 75 f4             	pushl  -0xc(%ebp)
   12ce5:	e8 41 f9 ff ff       	call   1262b <irq_leave_protection>
   12cea:	83 c4 10             	add    $0x10,%esp
}
   12ced:	90                   	nop
   12cee:	c9                   	leave  
   12cef:	c3                   	ret    

00012cf0 <sem_count>:

int sem_count(sem_t* sem) {
   12cf0:	55                   	push   %ebp
   12cf1:	89 e5                	mov    %esp,%ebp
   12cf3:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12cf6:	e8 18 f9 ff ff       	call   12613 <irq_enter_protection>
   12cfb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   12cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   12d01:	8b 00                	mov    (%eax),%eax
   12d03:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   12d06:	83 ec 0c             	sub    $0xc,%esp
   12d09:	ff 75 f4             	pushl  -0xc(%ebp)
   12d0c:	e8 1a f9 ff ff       	call   1262b <irq_leave_protection>
   12d11:	83 c4 10             	add    $0x10,%esp

    return count;
   12d14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12d17:	c9                   	leave  
   12d18:	c3                   	ret    

00012d19 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   12d19:	55                   	push   %ebp
   12d1a:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   12d1c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1f:	83 c0 07             	add    $0x7,%eax
   12d22:	8d 50 07             	lea    0x7(%eax),%edx
   12d25:	85 c0                	test   %eax,%eax
   12d27:	0f 48 c2             	cmovs  %edx,%eax
   12d2a:	c1 f8 03             	sar    $0x3,%eax
}
   12d2d:	5d                   	pop    %ebp
   12d2e:	c3                   	ret    

00012d2f <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   12d2f:	55                   	push   %ebp
   12d30:	89 e5                	mov    %esp,%ebp
   12d32:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   12d35:	8b 45 08             	mov    0x8(%ebp),%eax
   12d38:	8b 55 10             	mov    0x10(%ebp),%edx
   12d3b:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d40:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d43:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   12d46:	8b 45 08             	mov    0x8(%ebp),%eax
   12d49:	8b 00                	mov    (%eax),%eax
   12d4b:	50                   	push   %eax
   12d4c:	e8 c8 ff ff ff       	call   12d19 <bitmap_byte_count>
   12d51:	83 c4 04             	add    $0x4,%esp
   12d54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12d57:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12d5b:	74 07                	je     12d64 <bitmap_init+0x35>
   12d5d:	ba ff 00 00 00       	mov    $0xff,%edx
   12d62:	eb 05                	jmp    12d69 <bitmap_init+0x3a>
   12d64:	ba 00 00 00 00       	mov    $0x0,%edx
   12d69:	8b 45 08             	mov    0x8(%ebp),%eax
   12d6c:	8b 40 04             	mov    0x4(%eax),%eax
   12d6f:	83 ec 04             	sub    $0x4,%esp
   12d72:	ff 75 f4             	pushl  -0xc(%ebp)
   12d75:	52                   	push   %edx
   12d76:	50                   	push   %eax
   12d77:	e8 a4 03 00 00       	call   13120 <kmemset>
   12d7c:	83 c4 10             	add    $0x10,%esp
}
   12d7f:	90                   	nop
   12d80:	c9                   	leave  
   12d81:	c3                   	ret    

00012d82 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   12d82:	55                   	push   %ebp
   12d83:	89 e5                	mov    %esp,%ebp
   12d85:	56                   	push   %esi
   12d86:	53                   	push   %ebx
   12d87:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12d8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12d91:	e9 a2 00 00 00       	jmp    12e38 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   12d96:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12d9a:	74 4a                	je     12de6 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12d9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9f:	8b 50 04             	mov    0x4(%eax),%edx
   12da2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12da5:	8d 48 07             	lea    0x7(%eax),%ecx
   12da8:	85 c0                	test   %eax,%eax
   12daa:	0f 48 c1             	cmovs  %ecx,%eax
   12dad:	c1 f8 03             	sar    $0x3,%eax
   12db0:	89 c3                	mov    %eax,%ebx
   12db2:	89 d8                	mov    %ebx,%eax
   12db4:	01 d0                	add    %edx,%eax
   12db6:	0f b6 00             	movzbl (%eax),%eax
   12db9:	89 c6                	mov    %eax,%esi
   12dbb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dbe:	99                   	cltd   
   12dbf:	c1 ea 1d             	shr    $0x1d,%edx
   12dc2:	01 d0                	add    %edx,%eax
   12dc4:	83 e0 07             	and    $0x7,%eax
   12dc7:	29 d0                	sub    %edx,%eax
   12dc9:	ba 01 00 00 00       	mov    $0x1,%edx
   12dce:	89 c1                	mov    %eax,%ecx
   12dd0:	d3 e2                	shl    %cl,%edx
   12dd2:	89 d0                	mov    %edx,%eax
   12dd4:	89 f2                	mov    %esi,%edx
   12dd6:	09 c2                	or     %eax,%edx
   12dd8:	8b 45 08             	mov    0x8(%ebp),%eax
   12ddb:	8b 40 04             	mov    0x4(%eax),%eax
   12dde:	89 d9                	mov    %ebx,%ecx
   12de0:	01 c8                	add    %ecx,%eax
   12de2:	88 10                	mov    %dl,(%eax)
   12de4:	eb 4a                	jmp    12e30 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12de6:	8b 45 08             	mov    0x8(%ebp),%eax
   12de9:	8b 50 04             	mov    0x4(%eax),%edx
   12dec:	8b 45 0c             	mov    0xc(%ebp),%eax
   12def:	8d 48 07             	lea    0x7(%eax),%ecx
   12df2:	85 c0                	test   %eax,%eax
   12df4:	0f 48 c1             	cmovs  %ecx,%eax
   12df7:	c1 f8 03             	sar    $0x3,%eax
   12dfa:	89 c3                	mov    %eax,%ebx
   12dfc:	89 d8                	mov    %ebx,%eax
   12dfe:	01 d0                	add    %edx,%eax
   12e00:	0f b6 00             	movzbl (%eax),%eax
   12e03:	89 c6                	mov    %eax,%esi
   12e05:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e08:	99                   	cltd   
   12e09:	c1 ea 1d             	shr    $0x1d,%edx
   12e0c:	01 d0                	add    %edx,%eax
   12e0e:	83 e0 07             	and    $0x7,%eax
   12e11:	29 d0                	sub    %edx,%eax
   12e13:	ba 01 00 00 00       	mov    $0x1,%edx
   12e18:	89 c1                	mov    %eax,%ecx
   12e1a:	d3 e2                	shl    %cl,%edx
   12e1c:	89 d0                	mov    %edx,%eax
   12e1e:	f7 d0                	not    %eax
   12e20:	89 f2                	mov    %esi,%edx
   12e22:	21 c2                	and    %eax,%edx
   12e24:	8b 45 08             	mov    0x8(%ebp),%eax
   12e27:	8b 40 04             	mov    0x4(%eax),%eax
   12e2a:	89 d9                	mov    %ebx,%ecx
   12e2c:	01 c8                	add    %ecx,%eax
   12e2e:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12e30:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e34:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e3b:	3b 45 10             	cmp    0x10(%ebp),%eax
   12e3e:	7d 0e                	jge    12e4e <bitmap_set_bit+0xcc>
   12e40:	8b 45 08             	mov    0x8(%ebp),%eax
   12e43:	8b 00                	mov    (%eax),%eax
   12e45:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12e48:	0f 8c 48 ff ff ff    	jl     12d96 <bitmap_set_bit+0x14>
        }
    }
}
   12e4e:	90                   	nop
   12e4f:	83 c4 10             	add    $0x10,%esp
   12e52:	5b                   	pop    %ebx
   12e53:	5e                   	pop    %esi
   12e54:	5d                   	pop    %ebp
   12e55:	c3                   	ret    

00012e56 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   12e56:	55                   	push   %ebp
   12e57:	89 e5                	mov    %esp,%ebp
   12e59:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   12e5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e5d:	8b 50 04             	mov    0x4(%eax),%edx
   12e60:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e63:	8d 48 07             	lea    0x7(%eax),%ecx
   12e66:	85 c0                	test   %eax,%eax
   12e68:	0f 48 c1             	cmovs  %ecx,%eax
   12e6b:	c1 f8 03             	sar    $0x3,%eax
   12e6e:	01 d0                	add    %edx,%eax
   12e70:	0f b6 00             	movzbl (%eax),%eax
   12e73:	0f b6 d8             	movzbl %al,%ebx
   12e76:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e79:	99                   	cltd   
   12e7a:	c1 ea 1d             	shr    $0x1d,%edx
   12e7d:	01 d0                	add    %edx,%eax
   12e7f:	83 e0 07             	and    $0x7,%eax
   12e82:	29 d0                	sub    %edx,%eax
   12e84:	89 c1                	mov    %eax,%ecx
   12e86:	d3 fb                	sar    %cl,%ebx
   12e88:	89 d8                	mov    %ebx,%eax
   12e8a:	83 e0 01             	and    $0x1,%eax
}
   12e8d:	5b                   	pop    %ebx
   12e8e:	5d                   	pop    %ebp
   12e8f:	c3                   	ret    

00012e90 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   12e90:	55                   	push   %ebp
   12e91:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12e93:	ff 75 0c             	pushl  0xc(%ebp)
   12e96:	ff 75 08             	pushl  0x8(%ebp)
   12e99:	e8 b8 ff ff ff       	call   12e56 <bitmap_get_bit>
   12e9e:	83 c4 08             	add    $0x8,%esp
   12ea1:	85 c0                	test   %eax,%eax
   12ea3:	0f 95 c0             	setne  %al
   12ea6:	0f b6 c0             	movzbl %al,%eax
}
   12ea9:	c9                   	leave  
   12eaa:	c3                   	ret    

00012eab <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12eab:	55                   	push   %ebp
   12eac:	89 e5                	mov    %esp,%ebp
   12eae:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12eb1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   12eb8:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   12ebf:	e9 85 00 00 00       	jmp    12f49 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12ec4:	ff 75 fc             	pushl  -0x4(%ebp)
   12ec7:	ff 75 08             	pushl  0x8(%ebp)
   12eca:	e8 87 ff ff ff       	call   12e56 <bitmap_get_bit>
   12ecf:	83 c4 08             	add    $0x8,%esp
   12ed2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12ed5:	74 06                	je     12edd <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   12ed7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12edb:	eb 6c                	jmp    12f49 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   12edd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ee0:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12ee3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12eea:	eb 27                	jmp    12f13 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12eec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12eef:	8d 50 01             	lea    0x1(%eax),%edx
   12ef2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12ef5:	50                   	push   %eax
   12ef6:	ff 75 08             	pushl  0x8(%ebp)
   12ef9:	e8 58 ff ff ff       	call   12e56 <bitmap_get_bit>
   12efe:	83 c4 08             	add    $0x8,%esp
   12f01:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f04:	74 09                	je     12f0f <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12f06:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12f0d:	eb 16                	jmp    12f25 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12f0f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12f13:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f16:	3b 45 10             	cmp    0x10(%ebp),%eax
   12f19:	7d 0a                	jge    12f25 <bitmap_alloc_nbits+0x7a>
   12f1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12f1e:	8b 00                	mov    (%eax),%eax
   12f20:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12f23:	7c c7                	jl     12eec <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   12f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12f28:	3b 45 10             	cmp    0x10(%ebp),%eax
   12f2b:	7c 1c                	jl     12f49 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   12f2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f30:	f7 d0                	not    %eax
   12f32:	50                   	push   %eax
   12f33:	ff 75 10             	pushl  0x10(%ebp)
   12f36:	ff 75 f8             	pushl  -0x8(%ebp)
   12f39:	ff 75 08             	pushl  0x8(%ebp)
   12f3c:	e8 41 fe ff ff       	call   12d82 <bitmap_set_bit>
   12f41:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   12f44:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12f47:	eb 13                	jmp    12f5c <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   12f49:	8b 45 08             	mov    0x8(%ebp),%eax
   12f4c:	8b 00                	mov    (%eax),%eax
   12f4e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12f51:	0f 8c 6d ff ff ff    	jl     12ec4 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   12f57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12f5c:	c9                   	leave  
   12f5d:	c3                   	ret    

00012f5e <hlt>:
static inline void hlt(void) {
   12f5e:	55                   	push   %ebp
   12f5f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12f61:	f4                   	hlt    
}
   12f62:	90                   	nop
   12f63:	5d                   	pop    %ebp
   12f64:	c3                   	ret    

00012f65 <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   12f65:	55                   	push   %ebp
   12f66:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   12f68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12f6c:	74 3b                	je     12fa9 <kstrcpy+0x44>
   12f6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12f72:	74 35                	je     12fa9 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   12f74:	eb 17                	jmp    12f8d <kstrcpy+0x28>
        *dest++ = *src++;
   12f76:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f79:	8d 42 01             	lea    0x1(%edx),%eax
   12f7c:	89 45 0c             	mov    %eax,0xc(%ebp)
   12f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f82:	8d 48 01             	lea    0x1(%eax),%ecx
   12f85:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12f88:	0f b6 12             	movzbl (%edx),%edx
   12f8b:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12f8d:	8b 45 08             	mov    0x8(%ebp),%eax
   12f90:	0f b6 00             	movzbl (%eax),%eax
   12f93:	84 c0                	test   %al,%al
   12f95:	74 0a                	je     12fa1 <kstrcpy+0x3c>
   12f97:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f9a:	0f b6 00             	movzbl (%eax),%eax
   12f9d:	84 c0                	test   %al,%al
   12f9f:	75 d5                	jne    12f76 <kstrcpy+0x11>
    }
    *dest = '\0';
   12fa1:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa4:	c6 00 00             	movb   $0x0,(%eax)
   12fa7:	eb 01                	jmp    12faa <kstrcpy+0x45>
        return;
   12fa9:	90                   	nop
}
   12faa:	5d                   	pop    %ebp
   12fab:	c3                   	ret    

00012fac <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12fac:	55                   	push   %ebp
   12fad:	89 e5                	mov    %esp,%ebp
   12faf:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12fb2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12fb6:	74 61                	je     13019 <kstrncpy+0x6d>
   12fb8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12fbc:	74 5b                	je     13019 <kstrncpy+0x6d>
   12fbe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12fc2:	74 55                	je     13019 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   12fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12fca:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fcd:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   12fd0:	eb 17                	jmp    12fe9 <kstrncpy+0x3d>
        *d++ = *s++;
   12fd2:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12fd5:	8d 42 01             	lea    0x1(%edx),%eax
   12fd8:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12fdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fde:	8d 48 01             	lea    0x1(%eax),%ecx
   12fe1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12fe4:	0f b6 12             	movzbl (%edx),%edx
   12fe7:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   12fe9:	8b 45 10             	mov    0x10(%ebp),%eax
   12fec:	8d 50 ff             	lea    -0x1(%eax),%edx
   12fef:	89 55 10             	mov    %edx,0x10(%ebp)
   12ff2:	85 c0                	test   %eax,%eax
   12ff4:	7e 0a                	jle    13000 <kstrncpy+0x54>
   12ff6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ff9:	0f b6 00             	movzbl (%eax),%eax
   12ffc:	84 c0                	test   %al,%al
   12ffe:	75 d2                	jne    12fd2 <kstrncpy+0x26>
    }
    if (size == 0) {
   13000:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13004:	75 0b                	jne    13011 <kstrncpy+0x65>
        *(d - 1) = '\0';
   13006:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13009:	83 e8 01             	sub    $0x1,%eax
   1300c:	c6 00 00             	movb   $0x0,(%eax)
   1300f:	eb 09                	jmp    1301a <kstrncpy+0x6e>
    } else {
        *d = '\0';
   13011:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13014:	c6 00 00             	movb   $0x0,(%eax)
   13017:	eb 01                	jmp    1301a <kstrncpy+0x6e>
        return;
   13019:	90                   	nop
    }
}
   1301a:	c9                   	leave  
   1301b:	c3                   	ret    

0001301c <kstrlen>:


int kstrlen(const char *str) {
   1301c:	55                   	push   %ebp
   1301d:	89 e5                	mov    %esp,%ebp
   1301f:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   13022:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13026:	75 07                	jne    1302f <kstrlen+0x13>
        return 0;
   13028:	b8 00 00 00 00       	mov    $0x0,%eax
   1302d:	eb 26                	jmp    13055 <kstrlen+0x39>
    }

    const char *c = str;
   1302f:	8b 45 08             	mov    0x8(%ebp),%eax
   13032:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   13035:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   1303c:	eb 04                	jmp    13042 <kstrlen+0x26>
        len++;
   1303e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   13042:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13045:	8d 50 01             	lea    0x1(%eax),%edx
   13048:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1304b:	0f b6 00             	movzbl (%eax),%eax
   1304e:	84 c0                	test   %al,%al
   13050:	75 ec                	jne    1303e <kstrlen+0x22>
    }

    return len;
   13052:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   13055:	c9                   	leave  
   13056:	c3                   	ret    

00013057 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   13057:	55                   	push   %ebp
   13058:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   1305a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1305e:	74 06                	je     13066 <kstrncmp+0xf>
   13060:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13064:	75 0f                	jne    13075 <kstrncmp+0x1e>
        return -1;
   13066:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1306b:	eb 62                	jmp    130cf <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   1306d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   13071:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   13075:	8b 45 08             	mov    0x8(%ebp),%eax
   13078:	0f b6 00             	movzbl (%eax),%eax
   1307b:	84 c0                	test   %al,%al
   1307d:	74 20                	je     1309f <kstrncmp+0x48>
   1307f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13082:	0f b6 00             	movzbl (%eax),%eax
   13085:	84 c0                	test   %al,%al
   13087:	74 16                	je     1309f <kstrncmp+0x48>
   13089:	8b 45 08             	mov    0x8(%ebp),%eax
   1308c:	0f b6 10             	movzbl (%eax),%edx
   1308f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13092:	0f b6 00             	movzbl (%eax),%eax
   13095:	38 c2                	cmp    %al,%dl
   13097:	75 06                	jne    1309f <kstrncmp+0x48>
   13099:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1309d:	75 ce                	jne    1306d <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1309f:	8b 45 08             	mov    0x8(%ebp),%eax
   130a2:	0f b6 00             	movzbl (%eax),%eax
   130a5:	84 c0                	test   %al,%al
   130a7:	74 21                	je     130ca <kstrncmp+0x73>
   130a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   130ac:	0f b6 00             	movzbl (%eax),%eax
   130af:	84 c0                	test   %al,%al
   130b1:	74 17                	je     130ca <kstrncmp+0x73>
   130b3:	8b 45 08             	mov    0x8(%ebp),%eax
   130b6:	0f b6 10             	movzbl (%eax),%edx
   130b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   130bc:	0f b6 00             	movzbl (%eax),%eax
   130bf:	38 c2                	cmp    %al,%dl
   130c1:	74 07                	je     130ca <kstrncmp+0x73>
   130c3:	b8 01 00 00 00       	mov    $0x1,%eax
   130c8:	eb 05                	jmp    130cf <kstrncmp+0x78>
   130ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   130cf:	5d                   	pop    %ebp
   130d0:	c3                   	ret    

000130d1 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   130d1:	55                   	push   %ebp
   130d2:	89 e5                	mov    %esp,%ebp
   130d4:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   130d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   130db:	74 40                	je     1311d <kmemcpy+0x4c>
   130dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   130e1:	74 3a                	je     1311d <kmemcpy+0x4c>
   130e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   130e7:	74 34                	je     1311d <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   130e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   130ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   130ef:	8b 45 08             	mov    0x8(%ebp),%eax
   130f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   130f5:	eb 17                	jmp    1310e <kmemcpy+0x3d>
        *d++ = *s++;
   130f7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   130fa:	8d 42 01             	lea    0x1(%edx),%eax
   130fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
   13100:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13103:	8d 48 01             	lea    0x1(%eax),%ecx
   13106:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   13109:	0f b6 12             	movzbl (%edx),%edx
   1310c:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1310e:	8b 45 10             	mov    0x10(%ebp),%eax
   13111:	8d 50 ff             	lea    -0x1(%eax),%edx
   13114:	89 55 10             	mov    %edx,0x10(%ebp)
   13117:	85 c0                	test   %eax,%eax
   13119:	75 dc                	jne    130f7 <kmemcpy+0x26>
   1311b:	eb 01                	jmp    1311e <kmemcpy+0x4d>
        return;
   1311d:	90                   	nop
    }
}
   1311e:	c9                   	leave  
   1311f:	c3                   	ret    

00013120 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   13120:	55                   	push   %ebp
   13121:	89 e5                	mov    %esp,%ebp
   13123:	83 ec 14             	sub    $0x14,%esp
   13126:	8b 45 0c             	mov    0xc(%ebp),%eax
   13129:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1312c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13130:	74 2c                	je     1315e <kmemset+0x3e>
   13132:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13136:	74 26                	je     1315e <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   13138:	8b 45 08             	mov    0x8(%ebp),%eax
   1313b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   1313e:	eb 0f                	jmp    1314f <kmemset+0x2f>
        *d++ = v;
   13140:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13143:	8d 50 01             	lea    0x1(%eax),%edx
   13146:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13149:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1314d:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1314f:	8b 45 10             	mov    0x10(%ebp),%eax
   13152:	8d 50 ff             	lea    -0x1(%eax),%edx
   13155:	89 55 10             	mov    %edx,0x10(%ebp)
   13158:	85 c0                	test   %eax,%eax
   1315a:	75 e4                	jne    13140 <kmemset+0x20>
   1315c:	eb 01                	jmp    1315f <kmemset+0x3f>
        return;
   1315e:	90                   	nop
    }
}
   1315f:	c9                   	leave  
   13160:	c3                   	ret    

00013161 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   13161:	55                   	push   %ebp
   13162:	89 e5                	mov    %esp,%ebp
   13164:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   13167:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1316b:	74 06                	je     13173 <kmemcmp+0x12>
   1316d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13171:	75 07                	jne    1317a <kmemcmp+0x19>
        return 1;
   13173:	b8 01 00 00 00       	mov    $0x1,%eax
   13178:	eb 43                	jmp    131bd <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   1317a:	8b 45 08             	mov    0x8(%ebp),%eax
   1317d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   13180:	8b 45 0c             	mov    0xc(%ebp),%eax
   13183:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   13186:	eb 23                	jmp    131ab <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   13188:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1318b:	8d 50 01             	lea    0x1(%eax),%edx
   1318e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13191:	0f b6 08             	movzbl (%eax),%ecx
   13194:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13197:	8d 50 01             	lea    0x1(%eax),%edx
   1319a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1319d:	0f b6 00             	movzbl (%eax),%eax
   131a0:	38 c1                	cmp    %al,%cl
   131a2:	74 07                	je     131ab <kmemcmp+0x4a>
            return 1;
   131a4:	b8 01 00 00 00       	mov    $0x1,%eax
   131a9:	eb 12                	jmp    131bd <kmemcmp+0x5c>
    while (size--) {
   131ab:	8b 45 10             	mov    0x10(%ebp),%eax
   131ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   131b1:	89 55 10             	mov    %edx,0x10(%ebp)
   131b4:	85 c0                	test   %eax,%eax
   131b6:	75 d0                	jne    13188 <kmemcmp+0x27>
        }
    }

    return 0;
   131b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   131bd:	c9                   	leave  
   131be:	c3                   	ret    

000131bf <kitoa>:


void kitoa(char *buf, int num, int base) {
   131bf:	55                   	push   %ebp
   131c0:	89 e5                	mov    %esp,%ebp
   131c2:	53                   	push   %ebx
   131c3:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   131c6:	8b 45 08             	mov    0x8(%ebp),%eax
   131c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   131cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   131cf:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   131d2:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   131d6:	74 1d                	je     131f5 <kitoa+0x36>
   131d8:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   131dc:	74 17                	je     131f5 <kitoa+0x36>
   131de:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   131e2:	74 11                	je     131f5 <kitoa+0x36>
   131e4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   131e8:	74 0b                	je     131f5 <kitoa+0x36>
        *p = '\0';
   131ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
   131ed:	c6 00 00             	movb   $0x0,(%eax)
        return;
   131f0:	e9 03 01 00 00       	jmp    132f8 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   131f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   131fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13200:	79 19                	jns    1321b <kitoa+0x5c>
   13202:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13206:	75 13                	jne    1321b <kitoa+0x5c>
        *p++ = '-';
   13208:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1320b:	8d 50 01             	lea    0x1(%eax),%edx
   1320e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13211:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   13214:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   1321b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1321f:	74 3b                	je     1325c <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   13221:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13227:	8b 45 0c             	mov    0xc(%ebp),%eax
   1322a:	99                   	cltd   
   1322b:	f7 7d 10             	idivl  0x10(%ebp)
   1322e:	89 d0                	mov    %edx,%eax
   13230:	83 c0 0f             	add    $0xf,%eax
   13233:	01 c8                	add    %ecx,%eax
   13235:	0f b6 00             	movzbl (%eax),%eax
   13238:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1323b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1323e:	8d 50 01             	lea    0x1(%eax),%edx
   13241:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13244:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13248:	88 10                	mov    %dl,(%eax)
            num /= base;
   1324a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1324d:	99                   	cltd   
   1324e:	f7 7d 10             	idivl  0x10(%ebp)
   13251:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   13254:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13258:	75 c7                	jne    13221 <kitoa+0x62>
   1325a:	eb 4b                	jmp    132a7 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   1325c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1325f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   13262:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13268:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1326b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1326e:	ba 00 00 00 00       	mov    $0x0,%edx
   13273:	f7 f3                	div    %ebx
   13275:	89 d0                	mov    %edx,%eax
   13277:	83 c0 0f             	add    $0xf,%eax
   1327a:	01 c8                	add    %ecx,%eax
   1327c:	0f b6 00             	movzbl (%eax),%eax
   1327f:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   13282:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13285:	8d 50 01             	lea    0x1(%eax),%edx
   13288:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1328b:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1328f:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   13291:	8b 5d 10             	mov    0x10(%ebp),%ebx
   13294:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13297:	ba 00 00 00 00       	mov    $0x0,%edx
   1329c:	f7 f3                	div    %ebx
   1329e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   132a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   132a5:	75 bb                	jne    13262 <kitoa+0xa3>
    }
    *p-- = '\0';
   132a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132aa:	8d 50 ff             	lea    -0x1(%eax),%edx
   132ad:	89 55 f8             	mov    %edx,-0x8(%ebp)
   132b0:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   132b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   132b7:	74 08                	je     132c1 <kitoa+0x102>
   132b9:	8b 45 08             	mov    0x8(%ebp),%eax
   132bc:	83 c0 01             	add    $0x1,%eax
   132bf:	eb 03                	jmp    132c4 <kitoa+0x105>
   132c1:	8b 45 08             	mov    0x8(%ebp),%eax
   132c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   132c7:	eb 27                	jmp    132f0 <kitoa+0x131>
        char ch = *start;
   132c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   132cc:	0f b6 00             	movzbl (%eax),%eax
   132cf:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   132d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132d5:	0f b6 10             	movzbl (%eax),%edx
   132d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   132db:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   132dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132e0:	8d 50 ff             	lea    -0x1(%eax),%edx
   132e3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   132e6:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   132ea:	88 10                	mov    %dl,(%eax)
        start++;
   132ec:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   132f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   132f3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   132f6:	72 d1                	jb     132c9 <kitoa+0x10a>
    }
}
   132f8:	83 c4 20             	add    $0x20,%esp
   132fb:	5b                   	pop    %ebx
   132fc:	5d                   	pop    %ebp
   132fd:	c3                   	ret    

000132fe <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   132fe:	55                   	push   %ebp
   132ff:	89 e5                	mov    %esp,%ebp
   13301:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   13304:	8d 45 10             	lea    0x10(%ebp),%eax
   13307:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   1330a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1330d:	83 ec 04             	sub    $0x4,%esp
   13310:	50                   	push   %eax
   13311:	ff 75 0c             	pushl  0xc(%ebp)
   13314:	ff 75 08             	pushl  0x8(%ebp)
   13317:	e8 06 00 00 00       	call   13322 <kvsprintf>
   1331c:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1331f:	90                   	nop
   13320:	c9                   	leave  
   13321:	c3                   	ret    

00013322 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   13322:	55                   	push   %ebp
   13323:	89 e5                	mov    %esp,%ebp
   13325:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   13328:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1332f:	8b 45 08             	mov    0x8(%ebp),%eax
   13332:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   13335:	e9 2f 01 00 00       	jmp    13469 <kvsprintf+0x147>
        switch (state) {
   1333a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1333d:	85 c0                	test   %eax,%eax
   1333f:	74 0a                	je     1334b <kvsprintf+0x29>
   13341:	83 f8 01             	cmp    $0x1,%eax
   13344:	74 2b                	je     13371 <kvsprintf+0x4f>
   13346:	e9 1e 01 00 00       	jmp    13469 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   1334b:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1334f:	75 0c                	jne    1335d <kvsprintf+0x3b>
                state = READ_FMT;
   13351:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   13358:	e9 0c 01 00 00       	jmp    13469 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   1335d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13360:	8d 50 01             	lea    0x1(%eax),%edx
   13363:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13366:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1336a:	88 10                	mov    %dl,(%eax)
            }
            break;
   1336c:	e9 f8 00 00 00       	jmp    13469 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   13371:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   13375:	75 31                	jne    133a8 <kvsprintf+0x86>
                int num = va_arg(args, int);
   13377:	8b 45 10             	mov    0x10(%ebp),%eax
   1337a:	8d 50 04             	lea    0x4(%eax),%edx
   1337d:	89 55 10             	mov    %edx,0x10(%ebp)
   13380:	8b 00                	mov    (%eax),%eax
   13382:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   13385:	6a 0a                	push   $0xa
   13387:	ff 75 e4             	pushl  -0x1c(%ebp)
   1338a:	ff 75 f8             	pushl  -0x8(%ebp)
   1338d:	e8 2d fe ff ff       	call   131bf <kitoa>
   13392:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   13395:	ff 75 f8             	pushl  -0x8(%ebp)
   13398:	e8 7f fc ff ff       	call   1301c <kstrlen>
   1339d:	83 c4 04             	add    $0x4,%esp
   133a0:	01 45 f8             	add    %eax,-0x8(%ebp)
   133a3:	e9 b9 00 00 00       	jmp    13461 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   133a8:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   133ac:	75 46                	jne    133f4 <kvsprintf+0xd2>
                *curr++ = '0';
   133ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
   133b1:	8d 50 01             	lea    0x1(%eax),%edx
   133b4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   133b7:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   133ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
   133bd:	8d 50 01             	lea    0x1(%eax),%edx
   133c0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   133c3:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   133c6:	8b 45 10             	mov    0x10(%ebp),%eax
   133c9:	8d 50 04             	lea    0x4(%eax),%edx
   133cc:	89 55 10             	mov    %edx,0x10(%ebp)
   133cf:	8b 00                	mov    (%eax),%eax
   133d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   133d4:	6a 10                	push   $0x10
   133d6:	ff 75 e8             	pushl  -0x18(%ebp)
   133d9:	ff 75 f8             	pushl  -0x8(%ebp)
   133dc:	e8 de fd ff ff       	call   131bf <kitoa>
   133e1:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   133e4:	ff 75 f8             	pushl  -0x8(%ebp)
   133e7:	e8 30 fc ff ff       	call   1301c <kstrlen>
   133ec:	83 c4 04             	add    $0x4,%esp
   133ef:	01 45 f8             	add    %eax,-0x8(%ebp)
   133f2:	eb 6d                	jmp    13461 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   133f4:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   133f8:	75 1f                	jne    13419 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   133fa:	8b 45 10             	mov    0x10(%ebp),%eax
   133fd:	8d 50 04             	lea    0x4(%eax),%edx
   13400:	89 55 10             	mov    %edx,0x10(%ebp)
   13403:	8b 00                	mov    (%eax),%eax
   13405:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   13408:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1340b:	8d 50 01             	lea    0x1(%eax),%edx
   1340e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13411:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   13415:	88 10                	mov    %dl,(%eax)
   13417:	eb 48                	jmp    13461 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   13419:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1341d:	75 42                	jne    13461 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   1341f:	8b 45 10             	mov    0x10(%ebp),%eax
   13422:	8d 50 04             	lea    0x4(%eax),%edx
   13425:	89 55 10             	mov    %edx,0x10(%ebp)
   13428:	8b 00                	mov    (%eax),%eax
   1342a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   1342d:	ff 75 f4             	pushl  -0xc(%ebp)
   13430:	e8 e7 fb ff ff       	call   1301c <kstrlen>
   13435:	83 c4 04             	add    $0x4,%esp
   13438:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   1343b:	eb 17                	jmp    13454 <kvsprintf+0x132>
                    *curr++ = *str++;
   1343d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13440:	8d 42 01             	lea    0x1(%edx),%eax
   13443:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13446:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13449:	8d 48 01             	lea    0x1(%eax),%ecx
   1344c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1344f:	0f b6 12             	movzbl (%edx),%edx
   13452:	88 10                	mov    %dl,(%eax)
                while (len--) {
   13454:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13457:	8d 50 ff             	lea    -0x1(%eax),%edx
   1345a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1345d:	85 c0                	test   %eax,%eax
   1345f:	75 dc                	jne    1343d <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   13461:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   13468:	90                   	nop
    while ((ch = *fmt++)) {
   13469:	8b 45 0c             	mov    0xc(%ebp),%eax
   1346c:	8d 50 01             	lea    0x1(%eax),%edx
   1346f:	89 55 0c             	mov    %edx,0xc(%ebp)
   13472:	0f b6 00             	movzbl (%eax),%eax
   13475:	88 45 ef             	mov    %al,-0x11(%ebp)
   13478:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1347c:	0f 85 b8 fe ff ff    	jne    1333a <kvsprintf+0x18>
        }
    }
}
   13482:	90                   	nop
   13483:	c9                   	leave  
   13484:	c3                   	ret    

00013485 <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   13485:	55                   	push   %ebp
   13486:	89 e5                	mov    %esp,%ebp
   13488:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   1348b:	83 ec 08             	sub    $0x8,%esp
   1348e:	ff 75 14             	pushl  0x14(%ebp)
   13491:	68 08 42 01 00       	push   $0x14208
   13496:	e8 f4 02 00 00       	call   1378f <log_printf>
   1349b:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   1349e:	ff 75 10             	pushl  0x10(%ebp)
   134a1:	ff 75 0c             	pushl  0xc(%ebp)
   134a4:	ff 75 08             	pushl  0x8(%ebp)
   134a7:	68 1a 42 01 00       	push   $0x1421a
   134ac:	e8 de 02 00 00       	call   1378f <log_printf>
   134b1:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   134b4:	e8 a5 fa ff ff       	call   12f5e <hlt>
   134b9:	eb f9                	jmp    134b4 <pannic+0x2f>

000134bb <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   134bb:	55                   	push   %ebp
   134bc:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   134be:	8b 45 08             	mov    0x8(%ebp),%eax
   134c1:	8b 40 08             	mov    0x8(%eax),%eax
   134c4:	85 c0                	test   %eax,%eax
   134c6:	0f 94 c0             	sete   %al
   134c9:	0f b6 c0             	movzbl %al,%eax
}
   134cc:	5d                   	pop    %ebp
   134cd:	c3                   	ret    

000134ce <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   134ce:	55                   	push   %ebp
   134cf:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   134d1:	8b 45 08             	mov    0x8(%ebp),%eax
   134d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   134da:	8b 45 08             	mov    0x8(%ebp),%eax
   134dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   134e4:	8b 45 08             	mov    0x8(%ebp),%eax
   134e7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   134ee:	90                   	nop
   134ef:	5d                   	pop    %ebp
   134f0:	c3                   	ret    

000134f1 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   134f1:	55                   	push   %ebp
   134f2:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   134f4:	8b 45 08             	mov    0x8(%ebp),%eax
   134f7:	8b 10                	mov    (%eax),%edx
   134f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   134fc:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   134ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   13502:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13508:	ff 75 08             	pushl  0x8(%ebp)
   1350b:	e8 ab ff ff ff       	call   134bb <list_is_empty>
   13510:	83 c4 04             	add    $0x4,%esp
   13513:	85 c0                	test   %eax,%eax
   13515:	74 15                	je     1352c <list_insert_front+0x3b>
        list->last = list->first = node;
   13517:	8b 45 08             	mov    0x8(%ebp),%eax
   1351a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1351d:	89 10                	mov    %edx,(%eax)
   1351f:	8b 45 08             	mov    0x8(%ebp),%eax
   13522:	8b 10                	mov    (%eax),%edx
   13524:	8b 45 08             	mov    0x8(%ebp),%eax
   13527:	89 50 04             	mov    %edx,0x4(%eax)
   1352a:	eb 12                	jmp    1353e <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   1352c:	8b 45 08             	mov    0x8(%ebp),%eax
   1352f:	8b 00                	mov    (%eax),%eax
   13531:	8b 55 0c             	mov    0xc(%ebp),%edx
   13534:	89 10                	mov    %edx,(%eax)
        list->first = node;
   13536:	8b 45 08             	mov    0x8(%ebp),%eax
   13539:	8b 55 0c             	mov    0xc(%ebp),%edx
   1353c:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1353e:	8b 45 08             	mov    0x8(%ebp),%eax
   13541:	8b 40 08             	mov    0x8(%eax),%eax
   13544:	8d 50 01             	lea    0x1(%eax),%edx
   13547:	8b 45 08             	mov    0x8(%ebp),%eax
   1354a:	89 50 08             	mov    %edx,0x8(%eax)
}
   1354d:	90                   	nop
   1354e:	c9                   	leave  
   1354f:	c3                   	ret    

00013550 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   13550:	55                   	push   %ebp
   13551:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   13553:	8b 45 08             	mov    0x8(%ebp),%eax
   13556:	8b 50 04             	mov    0x4(%eax),%edx
   13559:	8b 45 0c             	mov    0xc(%ebp),%eax
   1355c:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1355e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   13568:	ff 75 08             	pushl  0x8(%ebp)
   1356b:	e8 4b ff ff ff       	call   134bb <list_is_empty>
   13570:	83 c4 04             	add    $0x4,%esp
   13573:	85 c0                	test   %eax,%eax
   13575:	74 15                	je     1358c <list_insert_back+0x3c>
        list->last = list->first = node;
   13577:	8b 45 08             	mov    0x8(%ebp),%eax
   1357a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1357d:	89 10                	mov    %edx,(%eax)
   1357f:	8b 45 08             	mov    0x8(%ebp),%eax
   13582:	8b 10                	mov    (%eax),%edx
   13584:	8b 45 08             	mov    0x8(%ebp),%eax
   13587:	89 50 04             	mov    %edx,0x4(%eax)
   1358a:	eb 15                	jmp    135a1 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   1358c:	8b 45 08             	mov    0x8(%ebp),%eax
   1358f:	8b 40 04             	mov    0x4(%eax),%eax
   13592:	8b 55 0c             	mov    0xc(%ebp),%edx
   13595:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   13598:	8b 45 08             	mov    0x8(%ebp),%eax
   1359b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1359e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   135a1:	8b 45 08             	mov    0x8(%ebp),%eax
   135a4:	8b 40 08             	mov    0x8(%eax),%eax
   135a7:	8d 50 01             	lea    0x1(%eax),%edx
   135aa:	8b 45 08             	mov    0x8(%ebp),%eax
   135ad:	89 50 08             	mov    %edx,0x8(%eax)
}
   135b0:	90                   	nop
   135b1:	c9                   	leave  
   135b2:	c3                   	ret    

000135b3 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   135b3:	55                   	push   %ebp
   135b4:	89 e5                	mov    %esp,%ebp
   135b6:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   135b9:	ff 75 08             	pushl  0x8(%ebp)
   135bc:	e8 fa fe ff ff       	call   134bb <list_is_empty>
   135c1:	83 c4 04             	add    $0x4,%esp
   135c4:	85 c0                	test   %eax,%eax
   135c6:	74 07                	je     135cf <list_remove_front+0x1c>
        return (list_node_t*)0;
   135c8:	b8 00 00 00 00       	mov    $0x0,%eax
   135cd:	eb 5b                	jmp    1362a <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   135cf:	8b 45 08             	mov    0x8(%ebp),%eax
   135d2:	8b 00                	mov    (%eax),%eax
   135d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   135d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   135da:	8b 50 04             	mov    0x4(%eax),%edx
   135dd:	8b 45 08             	mov    0x8(%ebp),%eax
   135e0:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   135e2:	8b 45 08             	mov    0x8(%ebp),%eax
   135e5:	8b 00                	mov    (%eax),%eax
   135e7:	85 c0                	test   %eax,%eax
   135e9:	75 0c                	jne    135f7 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   135eb:	8b 45 08             	mov    0x8(%ebp),%eax
   135ee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   135f5:	eb 0c                	jmp    13603 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   135f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   135fa:	8b 40 04             	mov    0x4(%eax),%eax
   135fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   13603:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13606:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1360d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13610:	8b 50 04             	mov    0x4(%eax),%edx
   13613:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13616:	89 10                	mov    %edx,(%eax)
    list->count--;
   13618:	8b 45 08             	mov    0x8(%ebp),%eax
   1361b:	8b 40 08             	mov    0x8(%eax),%eax
   1361e:	8d 50 ff             	lea    -0x1(%eax),%edx
   13621:	8b 45 08             	mov    0x8(%ebp),%eax
   13624:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   13627:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1362a:	c9                   	leave  
   1362b:	c3                   	ret    

0001362c <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   1362c:	55                   	push   %ebp
   1362d:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   1362f:	8b 45 08             	mov    0x8(%ebp),%eax
   13632:	8b 00                	mov    (%eax),%eax
   13634:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13637:	75 0b                	jne    13644 <list_remove+0x18>
        list->first = node->next;
   13639:	8b 45 0c             	mov    0xc(%ebp),%eax
   1363c:	8b 50 04             	mov    0x4(%eax),%edx
   1363f:	8b 45 08             	mov    0x8(%ebp),%eax
   13642:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   13644:	8b 45 08             	mov    0x8(%ebp),%eax
   13647:	8b 40 04             	mov    0x4(%eax),%eax
   1364a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1364d:	75 0b                	jne    1365a <list_remove+0x2e>
        list->last = node->pre;
   1364f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13652:	8b 10                	mov    (%eax),%edx
   13654:	8b 45 08             	mov    0x8(%ebp),%eax
   13657:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   1365a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1365d:	8b 00                	mov    (%eax),%eax
   1365f:	85 c0                	test   %eax,%eax
   13661:	74 0e                	je     13671 <list_remove+0x45>
        node->pre->next = node->next;
   13663:	8b 45 0c             	mov    0xc(%ebp),%eax
   13666:	8b 00                	mov    (%eax),%eax
   13668:	8b 55 0c             	mov    0xc(%ebp),%edx
   1366b:	8b 52 04             	mov    0x4(%edx),%edx
   1366e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   13671:	8b 45 0c             	mov    0xc(%ebp),%eax
   13674:	8b 40 04             	mov    0x4(%eax),%eax
   13677:	85 c0                	test   %eax,%eax
   13679:	74 0d                	je     13688 <list_remove+0x5c>
        node->next->pre = node->pre;
   1367b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1367e:	8b 40 04             	mov    0x4(%eax),%eax
   13681:	8b 55 0c             	mov    0xc(%ebp),%edx
   13684:	8b 12                	mov    (%edx),%edx
   13686:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   13688:	8b 45 0c             	mov    0xc(%ebp),%eax
   1368b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13692:	8b 45 0c             	mov    0xc(%ebp),%eax
   13695:	8b 50 04             	mov    0x4(%eax),%edx
   13698:	8b 45 0c             	mov    0xc(%ebp),%eax
   1369b:	89 10                	mov    %edx,(%eax)
    --list->count;
   1369d:	8b 45 08             	mov    0x8(%ebp),%eax
   136a0:	8b 40 08             	mov    0x8(%eax),%eax
   136a3:	8d 50 ff             	lea    -0x1(%eax),%edx
   136a6:	8b 45 08             	mov    0x8(%ebp),%eax
   136a9:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   136ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   136af:	5d                   	pop    %ebp
   136b0:	c3                   	ret    

000136b1 <inb>:
static inline uint8_t inb(uint16_t port) {
   136b1:	55                   	push   %ebp
   136b2:	89 e5                	mov    %esp,%ebp
   136b4:	83 ec 14             	sub    $0x14,%esp
   136b7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ba:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   136be:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   136c2:	89 c2                	mov    %eax,%edx
   136c4:	ec                   	in     (%dx),%al
   136c5:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   136c8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   136cc:	c9                   	leave  
   136cd:	c3                   	ret    

000136ce <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   136ce:	55                   	push   %ebp
   136cf:	89 e5                	mov    %esp,%ebp
   136d1:	83 ec 08             	sub    $0x8,%esp
   136d4:	8b 55 08             	mov    0x8(%ebp),%edx
   136d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   136da:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   136de:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   136e1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   136e5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   136e9:	ee                   	out    %al,(%dx)
}
   136ea:	90                   	nop
   136eb:	c9                   	leave  
   136ec:	c3                   	ret    

000136ed <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   136ed:	55                   	push   %ebp
   136ee:	89 e5                	mov    %esp,%ebp
   136f0:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   136f3:	83 ec 08             	sub    $0x8,%esp
   136f6:	68 58 42 01 00       	push   $0x14258
   136fb:	68 e0 7e 02 00       	push   $0x27ee0
   13700:	e8 41 f3 ff ff       	call   12a46 <mutex_init>
   13705:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   13708:	83 ec 08             	sub    $0x8,%esp
   1370b:	6a 00                	push   $0x0
   1370d:	68 f9 03 00 00       	push   $0x3f9
   13712:	e8 b7 ff ff ff       	call   136ce <outb>
   13717:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1371a:	83 ec 08             	sub    $0x8,%esp
   1371d:	68 80 00 00 00       	push   $0x80
   13722:	68 fb 03 00 00       	push   $0x3fb
   13727:	e8 a2 ff ff ff       	call   136ce <outb>
   1372c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   1372f:	83 ec 08             	sub    $0x8,%esp
   13732:	6a 03                	push   $0x3
   13734:	68 f8 03 00 00       	push   $0x3f8
   13739:	e8 90 ff ff ff       	call   136ce <outb>
   1373e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   13741:	83 ec 08             	sub    $0x8,%esp
   13744:	6a 00                	push   $0x0
   13746:	68 f9 03 00 00       	push   $0x3f9
   1374b:	e8 7e ff ff ff       	call   136ce <outb>
   13750:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   13753:	83 ec 08             	sub    $0x8,%esp
   13756:	6a 03                	push   $0x3
   13758:	68 fb 03 00 00       	push   $0x3fb
   1375d:	e8 6c ff ff ff       	call   136ce <outb>
   13762:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   13765:	83 ec 08             	sub    $0x8,%esp
   13768:	68 c7 00 00 00       	push   $0xc7
   1376d:	68 fa 03 00 00       	push   $0x3fa
   13772:	e8 57 ff ff ff       	call   136ce <outb>
   13777:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1377a:	83 ec 08             	sub    $0x8,%esp
   1377d:	6a 0f                	push   $0xf
   1377f:	68 fc 03 00 00       	push   $0x3fc
   13784:	e8 45 ff ff ff       	call   136ce <outb>
   13789:	83 c4 10             	add    $0x10,%esp
}
   1378c:	90                   	nop
   1378d:	c9                   	leave  
   1378e:	c3                   	ret    

0001378f <log_printf>:


void log_printf(const char* fmt, ...) {
   1378f:	55                   	push   %ebp
   13790:	89 e5                	mov    %esp,%ebp
   13792:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   13798:	83 ec 04             	sub    $0x4,%esp
   1379b:	68 80 00 00 00       	push   $0x80
   137a0:	6a 00                	push   $0x0
   137a2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   137a8:	50                   	push   %eax
   137a9:	e8 72 f9 ff ff       	call   13120 <kmemset>
   137ae:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   137b1:	8d 45 0c             	lea    0xc(%ebp),%eax
   137b4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   137ba:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   137c0:	83 ec 04             	sub    $0x4,%esp
   137c3:	50                   	push   %eax
   137c4:	ff 75 08             	pushl  0x8(%ebp)
   137c7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   137cd:	50                   	push   %eax
   137ce:	e8 4f fb ff ff       	call   13322 <kvsprintf>
   137d3:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   137d6:	83 ec 0c             	sub    $0xc,%esp
   137d9:	68 e0 7e 02 00       	push   $0x27ee0
   137de:	e8 a4 f2 ff ff       	call   12a87 <mutex_acquire>
   137e3:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   137e6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   137ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   137ef:	eb 3b                	jmp    1382c <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   137f1:	90                   	nop
   137f2:	83 ec 0c             	sub    $0xc,%esp
   137f5:	68 fd 03 00 00       	push   $0x3fd
   137fa:	e8 b2 fe ff ff       	call   136b1 <inb>
   137ff:	83 c4 10             	add    $0x10,%esp
   13802:	0f b6 c0             	movzbl %al,%eax
   13805:	83 e0 40             	and    $0x40,%eax
   13808:	85 c0                	test   %eax,%eax
   1380a:	74 e6                	je     137f2 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   1380c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1380f:	8d 50 01             	lea    0x1(%eax),%edx
   13812:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13815:	0f b6 00             	movzbl (%eax),%eax
   13818:	0f b6 c0             	movzbl %al,%eax
   1381b:	83 ec 08             	sub    $0x8,%esp
   1381e:	50                   	push   %eax
   1381f:	68 f8 03 00 00       	push   $0x3f8
   13824:	e8 a5 fe ff ff       	call   136ce <outb>
   13829:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1382c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1382f:	0f b6 00             	movzbl (%eax),%eax
   13832:	84 c0                	test   %al,%al
   13834:	75 bb                	jne    137f1 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   13836:	83 ec 08             	sub    $0x8,%esp
   13839:	6a 0d                	push   $0xd
   1383b:	68 f8 03 00 00       	push   $0x3f8
   13840:	e8 89 fe ff ff       	call   136ce <outb>
   13845:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   13848:	83 ec 08             	sub    $0x8,%esp
   1384b:	6a 0a                	push   $0xa
   1384d:	68 f8 03 00 00       	push   $0x3f8
   13852:	e8 77 fe ff ff       	call   136ce <outb>
   13857:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   1385a:	83 ec 0c             	sub    $0xc,%esp
   1385d:	68 e0 7e 02 00       	push   $0x27ee0
   13862:	e8 ae f2 ff ff       	call   12b15 <mutex_release>
   13867:	83 c4 10             	add    $0x10,%esp
   1386a:	90                   	nop
   1386b:	c9                   	leave  
   1386c:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	# mov %ax, %ss
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

8000000b:	e9 f6 00 00 00       	jmp    80000106 <first_task_main>

80000010 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
 
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <syscall>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
        return;
80000083:	90                   	nop
}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:


static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return syscall(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <syscall>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:


static inline void print_msg(char* fmt, int arg) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
800000a7:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <syscall>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <fork>:


static inline int fork(void) {
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000cf:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)

    return syscall(&args);
800000d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000d9:	50                   	push   %eax
800000da:	e8 31 ff ff ff       	call   80000010 <syscall>
800000df:	83 c4 04             	add    $0x4,%esp
}
800000e2:	c9                   	leave  
800000e3:	c3                   	ret    

800000e4 <execve>:


static inline int execve(const char* name, char* const* argv, char* const* env) {
800000e4:	55                   	push   %ebp
800000e5:	89 e5                	mov    %esp,%ebp
800000e7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800000ea:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    args.arg0 = (int)name;
800000f1:	8b 45 08             	mov    0x8(%ebp),%eax
800000f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800000f7:	8b 45 0c             	mov    0xc(%ebp),%eax
800000fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800000fd:	8b 45 10             	mov    0x10(%ebp),%eax
80000100:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
80000103:	90                   	nop
80000104:	c9                   	leave  
80000105:	c3                   	ret    

80000106 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void) {
80000106:	55                   	push   %ebp
80000107:	89 e5                	mov    %esp,%ebp
80000109:	83 ec 20             	sub    $0x20,%esp
    int count = 3;
8000010c:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)

    int pid = getpid();
80000113:	e8 6e ff ff ff       	call   80000086 <getpid>
80000118:	89 45 f8             	mov    %eax,-0x8(%ebp)
    print_msg("first task id=%d", pid);
8000011b:	ff 75 f8             	pushl  -0x8(%ebp)
8000011e:	68 1f 02 00 80       	push   $0x8000021f
80000123:	e8 79 ff ff ff       	call   800000a1 <print_msg>
80000128:	83 c4 08             	add    $0x8,%esp
    
    pid = fork();
8000012b:	e8 99 ff ff ff       	call   800000c9 <fork>
80000130:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (pid < 0) {
80000133:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
80000137:	79 11                	jns    8000014a <first_task_main+0x44>
        print_msg("create child proc failed.", 0);
80000139:	6a 00                	push   $0x0
8000013b:	68 30 02 00 80       	push   $0x80000230
80000140:	e8 5c ff ff ff       	call   800000a1 <print_msg>
80000145:	83 c4 08             	add    $0x8,%esp
80000148:	eb 6f                	jmp    800001b9 <first_task_main+0xb3>
    } else if (pid == 0) {
8000014a:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
8000014e:	75 45                	jne    80000195 <first_task_main+0x8f>
        count += 10;
80000150:	83 45 fc 0a          	addl   $0xa,-0x4(%ebp)
        print_msg("child: %d", count);
80000154:	ff 75 fc             	pushl  -0x4(%ebp)
80000157:	68 4a 02 00 80       	push   $0x8000024a
8000015c:	e8 40 ff ff ff       	call   800000a1 <print_msg>
80000161:	83 c4 08             	add    $0x8,%esp

        char* argv[] = { "arg0", "arg1", "arg2", "arg3" };
80000164:	c7 45 e8 54 02 00 80 	movl   $0x80000254,-0x18(%ebp)
8000016b:	c7 45 ec 59 02 00 80 	movl   $0x80000259,-0x14(%ebp)
80000172:	c7 45 f0 5e 02 00 80 	movl   $0x8000025e,-0x10(%ebp)
80000179:	c7 45 f4 63 02 00 80 	movl   $0x80000263,-0xc(%ebp)
        execve("/shell.elf", argv, (char**)0);
80000180:	6a 00                	push   $0x0
80000182:	8d 45 e8             	lea    -0x18(%ebp),%eax
80000185:	50                   	push   %eax
80000186:	68 68 02 00 80       	push   $0x80000268
8000018b:	e8 54 ff ff ff       	call   800000e4 <execve>
80000190:	83 c4 0c             	add    $0xc,%esp
80000193:	eb 24                	jmp    800001b9 <first_task_main+0xb3>
    } else {
        count += 1;
80000195:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        print_msg("child task id=%d", pid);
80000199:	ff 75 f8             	pushl  -0x8(%ebp)
8000019c:	68 73 02 00 80       	push   $0x80000273
800001a1:	e8 fb fe ff ff       	call   800000a1 <print_msg>
800001a6:	83 c4 08             	add    $0x8,%esp
        print_msg("parent: %d", count);
800001a9:	ff 75 fc             	pushl  -0x4(%ebp)
800001ac:	68 84 02 00 80       	push   $0x80000284
800001b1:	e8 eb fe ff ff       	call   800000a1 <print_msg>
800001b6:	83 c4 08             	add    $0x8,%esp
    }

    while (1) {
        // log_printf("first task.");
        if (pid < 0) {
800001b9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
800001bd:	79 11                	jns    800001d0 <first_task_main+0xca>
            print_msg("create child proc failed.", 0);
800001bf:	6a 00                	push   $0x0
800001c1:	68 30 02 00 80       	push   $0x80000230
800001c6:	e8 d6 fe ff ff       	call   800000a1 <print_msg>
800001cb:	83 c4 08             	add    $0x8,%esp
800001ce:	eb 40                	jmp    80000210 <first_task_main+0x10a>
        } else if (pid == 0) {
800001d0:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
800001d4:	75 16                	jne    800001ec <first_task_main+0xe6>
            count += 10;
800001d6:	83 45 fc 0a          	addl   $0xa,-0x4(%ebp)
            print_msg("child: %d", count);
800001da:	ff 75 fc             	pushl  -0x4(%ebp)
800001dd:	68 4a 02 00 80       	push   $0x8000024a
800001e2:	e8 ba fe ff ff       	call   800000a1 <print_msg>
800001e7:	83 c4 08             	add    $0x8,%esp
800001ea:	eb 24                	jmp    80000210 <first_task_main+0x10a>
        } else {
            count += 1;
800001ec:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            print_msg("child task id=%d", pid);
800001f0:	ff 75 f8             	pushl  -0x8(%ebp)
800001f3:	68 73 02 00 80       	push   $0x80000273
800001f8:	e8 a4 fe ff ff       	call   800000a1 <print_msg>
800001fd:	83 c4 08             	add    $0x8,%esp
            print_msg("parent: %d", count);
80000200:	ff 75 fc             	pushl  -0x4(%ebp)
80000203:	68 84 02 00 80       	push   $0x80000284
80000208:	e8 94 fe ff ff       	call   800000a1 <print_msg>
8000020d:	83 c4 08             	add    $0x8,%esp
        }

        // print_msg("pid = %d", pid);
        msleep(1000);
80000210:	68 e8 03 00 00       	push   $0x3e8
80000215:	e8 42 fe ff ff       	call   8000005c <msleep>
8000021a:	83 c4 04             	add    $0x4,%esp
        if (pid < 0) {
8000021d:	eb 9a                	jmp    800001b9 <first_task_main+0xb3>
8000021f:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000225:	74 61                	je     80000288 <first_task_main+0x182>
80000227:	73 6b                	jae    80000294 <first_task_main+0x18e>
80000229:	20 69 64             	and    %ch,0x64(%ecx)
8000022c:	3d 25 64 00 63       	cmp    $0x63006425,%eax
80000231:	72 65                	jb     80000298 <first_task_main+0x192>
80000233:	61                   	popa   
80000234:	74 65                	je     8000029b <first_task_main+0x195>
80000236:	20 63 68             	and    %ah,0x68(%ebx)
80000239:	69 6c 64 20 70 72 6f 	imul   $0x636f7270,0x20(%esp,%eiz,2),%ebp
80000240:	63 
80000241:	20 66 61             	and    %ah,0x61(%esi)
80000244:	69 6c 65 64 2e 00 63 	imul   $0x6863002e,0x64(%ebp,%eiz,2),%ebp
8000024b:	68 
8000024c:	69 6c 64 3a 20 25 64 	imul   $0x642520,0x3a(%esp,%eiz,2),%ebp
80000253:	00 
80000254:	61                   	popa   
80000255:	72 67                	jb     800002be <first_task_main+0x1b8>
80000257:	30 00                	xor    %al,(%eax)
80000259:	61                   	popa   
8000025a:	72 67                	jb     800002c3 <first_task_main+0x1bd>
8000025c:	31 00                	xor    %eax,(%eax)
8000025e:	61                   	popa   
8000025f:	72 67                	jb     800002c8 <first_task_main+0x1c2>
80000261:	32 00                	xor    (%eax),%al
80000263:	61                   	popa   
80000264:	72 67                	jb     800002cd <first_task_main+0x1c7>
80000266:	33 00                	xor    (%eax),%eax
80000268:	2f                   	das    
80000269:	73 68                	jae    800002d3 <first_task_main+0x1cd>
8000026b:	65 6c                	gs insb (%dx),%es:(%edi)
8000026d:	6c                   	insb   (%dx),%es:(%edi)
8000026e:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
80000271:	66 00 63 68          	data16 add %ah,0x68(%ebx)
80000275:	69 6c 64 20 74 61 73 	imul   $0x6b736174,0x20(%esp,%eiz,2),%ebp
8000027c:	6b 
8000027d:	20 69 64             	and    %ch,0x64(%ecx)
80000280:	3d 25 64 00 70       	cmp    $0x70006425,%eax
80000285:	61                   	popa   
80000286:	72 65                	jb     800002ed <first_task_main+0x1e7>
80000288:	6e                   	outsb  %ds:(%esi),(%dx)
80000289:	74 3a                	je     800002c5 <first_task_main+0x1bf>
8000028b:	20                   	.byte 0x20
8000028c:	25                   	.byte 0x25
8000028d:	64                   	fs
	...
