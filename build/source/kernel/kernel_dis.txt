
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003bc4 memsz 0x00003bc4 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x0000f0c0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x000230c0 align 2**12
         filesz 0x000001db memsz 0x000001db flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003202  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000009c0  00013204  00013204  00004204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000e0c0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   000001db  80000000  000230c0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001fcd  00000000  00000000  000061db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e65  00000000  00000000  000081a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ed  00000000  00000000  0000d00d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000e500  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001370  00000000  00000000  0000e700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000fa70  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001560  00000000  00000000  0000fa84  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00013204 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010302 l     F .text	00000017 up2
00010319 l     F .text	0000000d down2
00010326 l     F .text	0000000c write_cr3
00010332 l     F .text	00000014 pde_index
00010346 l     F .text	00000027 pde_paddr
0001036d l     F .text	00000010 pte_index
0001037d l     F .text	00000027 pte_paddr
000103a4 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
000103b5 l     F .text	0000005d addr_alloc_init
00010412 l     F .text	00000067 addr_alloc_page
00010479 l     F .text	00000062 addr_free_page
000104db l     F .text	00000066 show_mem_info
00010541 l     F .text	0000003c total_mem_size
0001057d l     F .text	000000a0 test_alloc
0001335c l     O .rodata	00000012 __func__.2218
00014000 l     O .data	00000040 kernel_map.2230
00013370 l     O .rodata	0000000c __func__.2260
00010a7d l     F .text	00000010 curr_page_dir
0001337c l     O .rodata	00000011 __func__.2292
00010b46 l     F .text	0000001a kalloc
00010b60 l     F .text	0000001e kfree
00000000 l    df *ABS*	00000000 syscall.c
00013390 l     O .rodata	00000010 sys_table
00000000 l    df *ABS*	00000000 task.c
00010c2d l     F .text	00000019 list_node_init
00010c46 l     F .text	0000000b list_node_next
00010c51 l     F .text	0000000b list_size
00010c5c l     F .text	0000000a list_first
00010c66 l     F .text	0000000c write_cr3
00010c72 l     F .text	00000007 hlt
00010c79 l     F .text	00000017 write_tr
00010c90 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	000001a0 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010ca1 l     F .text	00000188 tss_init
0001345c l     O .rodata	0000000a __func__.2256
00010f41 l     F .text	0000000a idle_task_entry
00013468 l     O .rodata	00000010 __func__.2282
00000000 l    df *ABS*	00000000 cpu.c
000113e4 l     F .text	00000028 lgdt
0001140c l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
0001165d l     F .text	0000001d inb
0001167a l     F .text	0000001f outb
00011699 l     F .text	00000007 cli
000116a0 l     F .text	00000007 sti
000116a7 l     F .text	00000028 lidt
000116cf l     F .text	00000011 read_cr2
000116e0 l     F .text	00000007 hlt
000116e7 l     F .text	00000010 read_eflags
000116f7 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
00011702 l     F .text	000000f0 dump_core_regs
000117f2 l     F .text	0000003e do_default_handler
00011bcd l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011fd1 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00012018 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012090 l     F .text	0000000b list_size
0001209b l     F .text	0000000a list_first
000120a5 l     F .text	0000000b list_last
00013b50 l     O .rodata	0000000c __func__.2206
00018e20 l     O .bss	000000b8 first_task
00013b5c l     O .rodata	00000013 __func__.2239
00012304 l     F .text	00000036 test_task1
0001233a l     F .text	00000036 test_task2
00018ee0 l     O .bss	000000b8 task1
00018fa0 l     O .bss	000000b8 task2
00019060 l     O .bss	00004000 stack1
0001d060 l     O .bss	00004000 stack2
00000000 l    df *ABS*	00000000 mutex.c
000123d0 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
0001256a l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000128f3 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012e50 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00013046 l     F .text	0000001d inb
00013063 l     F .text	0000001f outb
00021060 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000012 l     F .first_task	0000004c syscall
8000005e l     F .first_task	0000002a msleep
80000088 l     F .first_task	0000001b getpid
800000a3 l     F .first_task	00000028 print_msg
800000cb l     F .first_task	0000001b fork
00011bb1 g     F .text	0000001c do_handler_control_protection_exception
000127eb g     F .text	0000003a bitmap_get_bit
0001117d g     F .text	0000000a task_current
00011868 g     F .text	0000001c do_handler_debug_exception
00011b95 g     F .text	0000001c do_handler_virtualization_exception
00011f72 g     F .text	0000000b irq_enable_global
00011964 g     F .text	0000001c do_handler_segment_not_present
000110db g     F .text	00000034 task_set_ready
00012941 g     F .text	00000070 kstrncpy
00012825 g     F .text	0000001b bitmap_is_set
00012104 g     F .text	0000019c link_test
00011884 g     F .text	0000001c do_handler_nmi_interrupt
00010b98 g     F .text	00000095 do_handler_syscall
00011578 g     F .text	00000023 cpu_init
00013082 g     F .text	000000a2 log_init
000113da g     F .text	0000000a sys_fork
00012370 g     F .text	00000060 init_main
00012ab5 g     F .text	00000041 kmemset
00011624 g     F .text	00000039 gdt_free_sel
00010b7e g     F .text	0000001a sys_print_msg
00014000 g       .data	00000000 s_data
00011e55 g     F .text	0000008b irq_enable
00010026 g       .text	00000000 exception_handler_unknown
000100a2 g       .text	00000000 exception_handler_breakpoint
000129b1 g     F .text	0000003b kstrlen
000118bc g     F .text	0000001c do_handler_overflow
000106cd g     F .text	00000087 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
0001199c g     F .text	000000b5 do_handler_general_protection
00012685 g     F .text	00000029 sem_count
800000e6 g     F .first_task	0000009b first_task_main
000118d8 g     F .text	0000001c do_handler_bound_range_exceed
00012717 g     F .text	000000d4 bitmap_set_bit
0001192c g     F .text	0000001c do_handler_double_fault
00011a51 g     F .text	000000d4 do_handler_page_fault
00010267 g       .text	00000000 exception_handler_virtualization_exception
0001013d g       .text	00000000 exception_handler_double_fault
00011f7d g     F .text	0000002b pic_send_eoi
000110d1 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00010824 g     F .text	00000085 memory_create_uvm
00012598 g     F .text	0000006b sem_wait
00010a5b g     F .text	00000022 memory_alloc_page_for
00011ff0 g     F .text	00000028 do_handler_timer
00010194 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c1 g       .text	00000000 exception_handler_overflow
000102c2 g       .text	00000000 simple_switch
00012e86 g     F .text	0000005f list_insert_front
000210c0 g     O .bss	00002000 stack
0001136d g     F .text	00000057 sys_sleep
00012cb7 g     F .text	00000163 kvsprintf
00010aad g     F .text	00000099 memory_free_page
000230c0 g       *ABS*	00000000 s_first_task
0001098d g     F .text	000000ce memory_alloc_for_page_dir
00012603 g     F .text	00000082 sem_notify
000118f4 g     F .text	0000001c do_handler_invalid_opcode
0001015a g       .text	00000000 exception_handler_invalid_tss
00012078 g     F .text	00000018 timer_init
00011008 g     F .text	000000c9 task_first_init
00011b5d g     F .text	0000001c do_handler_machine_check
00011910 g     F .text	0000001c do_handler_device_not_found
0001134d g     F .text	00000020 task_set_wakeup
00012ee5 g     F .text	00000063 list_insert_back
00011f67 g     F .text	0000000b irq_disable_global
00011187 g     F .text	00000061 sys_sched_yield
0002329b g       *ABS*	00000000 mem_free_start
000120b0 g     F .text	00000054 kernel_init
00012575 g     F .text	00000023 sem_init
00012c93 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
0001110f g     F .text	0000002b task_set_blocked
000100ff g       .text	00000000 exception_handler_invalid_opcode
000230c0 g       .bss	00000000 e_data
00012b54 g     F .text	0000013f kitoa
000128fa g     F .text	00000047 kstrcpy
000129ec g     F .text	0000007a kstrncmp
00011b41 g     F .text	0000001c do_handler_aligment_check
00012af6 g     F .text	0000005e kmemcmp
000101ed g       .text	00000000 exception_handler_floating_point_error
00010229 g       .text	00000000 exception_handler_machine_check
00011948 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0002329b g       *ABS*	00000000 e_first_task
0001131c g     F .text	00000031 task_set_sleep
000102a3 g       .text	00000000 exception_handler_timer
00011e20 g     F .text	00000035 irq_install
000114f0 g     F .text	00000088 init_gdt
00011fa8 g     F .text	00000018 irq_enter_protection
000123db g     F .text	00000041 mutex_init
00011ee0 g     F .text	00000087 irq_disable
00010045 g       .text	00000000 exception_handler_divide_error
0001184c g     F .text	0000001c do_handler_divide_error
000126ae g     F .text	00000016 bitmap_byte_count
000111e8 g     F .text	0000005b task_dispatch
000122a0 g     F .text	00000064 move_to_first_task
0001113a g     F .text	00000043 task_next_run
00010754 g     F .text	000000d0 create_kernel_table
00012e63 g     F .text	00000023 list_init
000101d0 g       .text	00000000 exception_handler_page_fault
00011830 g     F .text	0000001c do_handler_unknown
00010a8d g     F .text	00000020 memory_alloc_page
00010f23 g     F .text	0000001e task_switch_from_to
00011c60 g     F .text	000001c0 irq_init
00011fc0 g     F .text	00000011 irq_leave_protection
00010083 g       .text	00000000 exception_handler_nmi_interrupt
00011426 g     F .text	00000083 segment_desc_set
000102d7 g       .text	00000000 exception_handler_syscall
00013bc4 g       .rodata	00000000 e_text
0001020c g       .text	00000000 exception_handler_aligment_check
00010286 g       .text	00000000 exception_handler_control_protection_exception
000126c4 g     F .text	00000053 bitmap_init
00011b79 g     F .text	0000001c do_handler_simd_floating_point_exception
00012a66 g     F .text	0000004f kmemcpy
00010177 g       .text	00000000 exception_handler_segment_not_present
00012840 g     F .text	000000b3 bitmap_alloc_nbits
00010f4b g     F .text	000000bd task_manager_init
000100e0 g       .text	00000000 exception_handler_bound_range_exceed
00011243 g     F .text	000000d9 task_time_tick
000108a9 g     F .text	000000e4 memory_init
0001011e g       .text	00000000 exception_handler_device_not_found
00012e1a g     F .text	00000036 pannic
00011980 g     F .text	0000001c do_handler_stack_segment_fault
000118a0 g     F .text	0000001c do_handler_breakpoint
00010064 g       .text	00000000 exception_handler_debug_exception
00011b25 g     F .text	0000001c do_handler_floating_point_error
00013124 g     F .text	000000de log_printf
00010e29 g     F .text	000000fa task_init
00012f48 g     F .text	00000079 list_remove_front
000113c4 g     F .text	00000016 sys_getpid
000115af g     F .text	00000075 gdt_alloc_desc
000124aa g     F .text	000000c0 mutex_release
00012fc1 g     F .text	00000085 list_remove
0001159b g     F .text	00000014 swtch_to_tss
000114a9 g     F .text	00000047 gate_desc_set
0001241c g     F .text	0000008e mutex_acquire
00010248 g       .text	00000000 exception_handler_simd_floating_point_exception
0001061d g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 a4 20 00 00       	call   120b0 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    # 这里改了栈指针的位置，不再是7c00了
    # mov $(stack + KERNEL_STACK_SIZE), %esp
    jmp init_main
   10021:	e9 4a 23 00 00       	jmp    12370 <init_main>

00010026 <exception_handler_unknown>:
    add $(2 * 4), %esp # 跳过压入的异常号和错误码

    iret
.endm

exception_handler unknown,                      -1, 0
   10026:	6a 00                	push   $0x0
   10028:	6a ff                	push   $0xffffffff
   1002a:	60                   	pusha  
   1002b:	1e                   	push   %ds
   1002c:	06                   	push   %es
   1002d:	0f a0                	push   %fs
   1002f:	0f a8                	push   %gs
   10031:	54                   	push   %esp
   10032:	e8 f9 17 00 00       	call   11830 <do_handler_unknown>
   10037:	83 c4 04             	add    $0x4,%esp
   1003a:	0f a9                	pop    %gs
   1003c:	0f a1                	pop    %fs
   1003e:	07                   	pop    %es
   1003f:	1f                   	pop    %ds
   10040:	61                   	popa   
   10041:	83 c4 08             	add    $0x8,%esp
   10044:	cf                   	iret   

00010045 <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   10045:	6a 00                	push   $0x0
   10047:	6a 00                	push   $0x0
   10049:	60                   	pusha  
   1004a:	1e                   	push   %ds
   1004b:	06                   	push   %es
   1004c:	0f a0                	push   %fs
   1004e:	0f a8                	push   %gs
   10050:	54                   	push   %esp
   10051:	e8 f6 17 00 00       	call   1184c <do_handler_divide_error>
   10056:	83 c4 04             	add    $0x4,%esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 f3 17 00 00       	call   11868 <do_handler_debug_exception>
   10075:	83 c4 04             	add    $0x4,%esp
   10078:	0f a9                	pop    %gs
   1007a:	0f a1                	pop    %fs
   1007c:	07                   	pop    %es
   1007d:	1f                   	pop    %ds
   1007e:	61                   	popa   
   1007f:	83 c4 08             	add    $0x8,%esp
   10082:	cf                   	iret   

00010083 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10083:	6a 00                	push   $0x0
   10085:	6a 02                	push   $0x2
   10087:	60                   	pusha  
   10088:	1e                   	push   %ds
   10089:	06                   	push   %es
   1008a:	0f a0                	push   %fs
   1008c:	0f a8                	push   %gs
   1008e:	54                   	push   %esp
   1008f:	e8 f0 17 00 00       	call   11884 <do_handler_nmi_interrupt>
   10094:	83 c4 04             	add    $0x4,%esp
   10097:	0f a9                	pop    %gs
   10099:	0f a1                	pop    %fs
   1009b:	07                   	pop    %es
   1009c:	1f                   	pop    %ds
   1009d:	61                   	popa   
   1009e:	83 c4 08             	add    $0x8,%esp
   100a1:	cf                   	iret   

000100a2 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a2:	6a 00                	push   $0x0
   100a4:	6a 03                	push   $0x3
   100a6:	60                   	pusha  
   100a7:	1e                   	push   %ds
   100a8:	06                   	push   %es
   100a9:	0f a0                	push   %fs
   100ab:	0f a8                	push   %gs
   100ad:	54                   	push   %esp
   100ae:	e8 ed 17 00 00       	call   118a0 <do_handler_breakpoint>
   100b3:	83 c4 04             	add    $0x4,%esp
   100b6:	0f a9                	pop    %gs
   100b8:	0f a1                	pop    %fs
   100ba:	07                   	pop    %es
   100bb:	1f                   	pop    %ds
   100bc:	61                   	popa   
   100bd:	83 c4 08             	add    $0x8,%esp
   100c0:	cf                   	iret   

000100c1 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c1:	6a 00                	push   $0x0
   100c3:	6a 04                	push   $0x4
   100c5:	60                   	pusha  
   100c6:	1e                   	push   %ds
   100c7:	06                   	push   %es
   100c8:	0f a0                	push   %fs
   100ca:	0f a8                	push   %gs
   100cc:	54                   	push   %esp
   100cd:	e8 ea 17 00 00       	call   118bc <do_handler_overflow>
   100d2:	83 c4 04             	add    $0x4,%esp
   100d5:	0f a9                	pop    %gs
   100d7:	0f a1                	pop    %fs
   100d9:	07                   	pop    %es
   100da:	1f                   	pop    %ds
   100db:	61                   	popa   
   100dc:	83 c4 08             	add    $0x8,%esp
   100df:	cf                   	iret   

000100e0 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e0:	6a 00                	push   $0x0
   100e2:	6a 05                	push   $0x5
   100e4:	60                   	pusha  
   100e5:	1e                   	push   %ds
   100e6:	06                   	push   %es
   100e7:	0f a0                	push   %fs
   100e9:	0f a8                	push   %gs
   100eb:	54                   	push   %esp
   100ec:	e8 e7 17 00 00       	call   118d8 <do_handler_bound_range_exceed>
   100f1:	83 c4 04             	add    $0x4,%esp
   100f4:	0f a9                	pop    %gs
   100f6:	0f a1                	pop    %fs
   100f8:	07                   	pop    %es
   100f9:	1f                   	pop    %ds
   100fa:	61                   	popa   
   100fb:	83 c4 08             	add    $0x8,%esp
   100fe:	cf                   	iret   

000100ff <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   100ff:	6a 00                	push   $0x0
   10101:	6a 06                	push   $0x6
   10103:	60                   	pusha  
   10104:	1e                   	push   %ds
   10105:	06                   	push   %es
   10106:	0f a0                	push   %fs
   10108:	0f a8                	push   %gs
   1010a:	54                   	push   %esp
   1010b:	e8 e4 17 00 00       	call   118f4 <do_handler_invalid_opcode>
   10110:	83 c4 04             	add    $0x4,%esp
   10113:	0f a9                	pop    %gs
   10115:	0f a1                	pop    %fs
   10117:	07                   	pop    %es
   10118:	1f                   	pop    %ds
   10119:	61                   	popa   
   1011a:	83 c4 08             	add    $0x8,%esp
   1011d:	cf                   	iret   

0001011e <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   1011e:	6a 00                	push   $0x0
   10120:	6a 07                	push   $0x7
   10122:	60                   	pusha  
   10123:	1e                   	push   %ds
   10124:	06                   	push   %es
   10125:	0f a0                	push   %fs
   10127:	0f a8                	push   %gs
   10129:	54                   	push   %esp
   1012a:	e8 e1 17 00 00       	call   11910 <do_handler_device_not_found>
   1012f:	83 c4 04             	add    $0x4,%esp
   10132:	0f a9                	pop    %gs
   10134:	0f a1                	pop    %fs
   10136:	07                   	pop    %es
   10137:	1f                   	pop    %ds
   10138:	61                   	popa   
   10139:	83 c4 08             	add    $0x8,%esp
   1013c:	cf                   	iret   

0001013d <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   1013d:	6a 08                	push   $0x8
   1013f:	60                   	pusha  
   10140:	1e                   	push   %ds
   10141:	06                   	push   %es
   10142:	0f a0                	push   %fs
   10144:	0f a8                	push   %gs
   10146:	54                   	push   %esp
   10147:	e8 e0 17 00 00       	call   1192c <do_handler_double_fault>
   1014c:	83 c4 04             	add    $0x4,%esp
   1014f:	0f a9                	pop    %gs
   10151:	0f a1                	pop    %fs
   10153:	07                   	pop    %es
   10154:	1f                   	pop    %ds
   10155:	61                   	popa   
   10156:	83 c4 08             	add    $0x8,%esp
   10159:	cf                   	iret   

0001015a <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015a:	6a 0a                	push   $0xa
   1015c:	60                   	pusha  
   1015d:	1e                   	push   %ds
   1015e:	06                   	push   %es
   1015f:	0f a0                	push   %fs
   10161:	0f a8                	push   %gs
   10163:	54                   	push   %esp
   10164:	e8 df 17 00 00       	call   11948 <do_handler_invalid_tss>
   10169:	83 c4 04             	add    $0x4,%esp
   1016c:	0f a9                	pop    %gs
   1016e:	0f a1                	pop    %fs
   10170:	07                   	pop    %es
   10171:	1f                   	pop    %ds
   10172:	61                   	popa   
   10173:	83 c4 08             	add    $0x8,%esp
   10176:	cf                   	iret   

00010177 <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   10177:	6a 0b                	push   $0xb
   10179:	60                   	pusha  
   1017a:	1e                   	push   %ds
   1017b:	06                   	push   %es
   1017c:	0f a0                	push   %fs
   1017e:	0f a8                	push   %gs
   10180:	54                   	push   %esp
   10181:	e8 de 17 00 00       	call   11964 <do_handler_segment_not_present>
   10186:	83 c4 04             	add    $0x4,%esp
   10189:	0f a9                	pop    %gs
   1018b:	0f a1                	pop    %fs
   1018d:	07                   	pop    %es
   1018e:	1f                   	pop    %ds
   1018f:	61                   	popa   
   10190:	83 c4 08             	add    $0x8,%esp
   10193:	cf                   	iret   

00010194 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10194:	6a 00                	push   $0x0
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 db 17 00 00       	call   11980 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 da 17 00 00       	call   1199c <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 72 18 00 00       	call   11a51 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 27 19 00 00       	call   11b25 <do_handler_floating_point_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 26 19 00 00       	call   11b41 <do_handler_aligment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 23 19 00 00       	call   11b5d <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 20 19 00 00       	call   11b79 <do_handler_simd_floating_point_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 1d 19 00 00       	call   11b95 <do_handler_virtualization_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   10286:	6a 15                	push   $0x15
   10288:	60                   	pusha  
   10289:	1e                   	push   %ds
   1028a:	06                   	push   %es
   1028b:	0f a0                	push   %fs
   1028d:	0f a8                	push   %gs
   1028f:	54                   	push   %esp
   10290:	e8 1c 19 00 00       	call   11bb1 <do_handler_control_protection_exception>
   10295:	83 c4 04             	add    $0x4,%esp
   10298:	0f a9                	pop    %gs
   1029a:	0f a1                	pop    %fs
   1029c:	07                   	pop    %es
   1029d:	1f                   	pop    %ds
   1029e:	61                   	popa   
   1029f:	83 c4 08             	add    $0x8,%esp
   102a2:	cf                   	iret   

000102a3 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a3:	6a 00                	push   $0x0
   102a5:	6a 20                	push   $0x20
   102a7:	60                   	pusha  
   102a8:	1e                   	push   %ds
   102a9:	06                   	push   %es
   102aa:	0f a0                	push   %fs
   102ac:	0f a8                	push   %gs
   102ae:	54                   	push   %esp
   102af:	e8 3c 1d 00 00       	call   11ff0 <do_handler_timer>
   102b4:	83 c4 04             	add    $0x4,%esp
   102b7:	0f a9                	pop    %gs
   102b9:	0f a1                	pop    %fs
   102bb:	07                   	pop    %es
   102bc:	1f                   	pop    %ds
   102bd:	61                   	popa   
   102be:	83 c4 08             	add    $0x8,%esp
   102c1:	cf                   	iret   

000102c2 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c2:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102c6:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ca:	55                   	push   %ebp
    push %ebx
   102cb:	53                   	push   %ebx
    push %esi
   102cc:	56                   	push   %esi
    push %edi
   102cd:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102ce:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d0:	89 d4                	mov    %edx,%esp

    pop %edi
   102d2:	5f                   	pop    %edi
    pop %esi
   102d3:	5e                   	pop    %esi
    pop %ebx
   102d4:	5b                   	pop    %ebx
    pop %ebp
   102d5:	5d                   	pop    %ebp

    ret
   102d6:	c3                   	ret    

000102d7 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    pusha # 该指令会保存一系列指定的寄存器
   102d7:	60                   	pusha  

    push %ds
   102d8:	1e                   	push   %ds
    push %es
   102d9:	06                   	push   %es
    push %fs
   102da:	0f a0                	push   %fs
    push %gs
   102dc:	0f a8                	push   %gs

    pushf # push %eflags
   102de:	9c                   	pushf  
    
	# 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102df:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102e4:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102e6:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102e8:	8e e0                	mov    %eax,%fs
	mov %eax, %gs    
   102ea:	8e e8                	mov    %eax,%gs

    mov %esp, %eax  # 将这里作为结构体入口地址参数
   102ec:	89 e0                	mov    %esp,%eax
    push %eax
   102ee:	50                   	push   %eax

    call do_handler_syscall
   102ef:	e8 a4 08 00 00       	call   10b98 <do_handler_syscall>

    add $4, %esp    # esp 向上调整，跳过结构体地址参数
   102f4:	83 c4 04             	add    $0x4,%esp

    popf  # pop %eflags
   102f7:	9d                   	popf   
    pop %gs
   102f8:	0f a9                	pop    %gs
    pop %fs
   102fa:	0f a1                	pop    %fs
    pop %es
   102fc:	07                   	pop    %es
    pop %ds
   102fd:	1f                   	pop    %ds
    popa
   102fe:	61                   	popa   

    retf $(5 * 4)
   102ff:	ca 14 00             	lret   $0x14

00010302 <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10305:	8b 55 08             	mov    0x8(%ebp),%edx
   10308:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030b:	01 d0                	add    %edx,%eax
   1030d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10310:	8b 45 0c             	mov    0xc(%ebp),%eax
   10313:	f7 d8                	neg    %eax
   10315:	21 d0                	and    %edx,%eax
}
   10317:	5d                   	pop    %ebp
   10318:	c3                   	ret    

00010319 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   10319:	55                   	push   %ebp
   1031a:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	23 45 08             	and    0x8(%ebp),%eax
}
   10324:	5d                   	pop    %ebp
   10325:	c3                   	ret    

00010326 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10326:	55                   	push   %ebp
   10327:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10329:	8b 45 08             	mov    0x8(%ebp),%eax
   1032c:	0f 22 d8             	mov    %eax,%cr3
}
   1032f:	90                   	nop
   10330:	5d                   	pop    %ebp
   10331:	c3                   	ret    

00010332 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10332:	55                   	push   %ebp
   10333:	89 e5                	mov    %esp,%ebp
   10335:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	c1 e8 16             	shr    $0x16,%eax
   1033e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10341:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10344:	c9                   	leave  
   10345:	c3                   	ret    

00010346 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10346:	55                   	push   %ebp
   10347:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10350:	c0 ea 04             	shr    $0x4,%dl
   10353:	0f b6 d2             	movzbl %dl,%edx
   10356:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1035a:	c1 e1 04             	shl    $0x4,%ecx
   1035d:	09 ca                	or     %ecx,%edx
   1035f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10363:	c1 e0 0c             	shl    $0xc,%eax
   10366:	09 d0                	or     %edx,%eax
   10368:	c1 e0 0c             	shl    $0xc,%eax
}
   1036b:	5d                   	pop    %ebp
   1036c:	c3                   	ret    

0001036d <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   1036d:	55                   	push   %ebp
   1036e:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	c1 e8 0c             	shr    $0xc,%eax
   10376:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10387:	c0 ea 04             	shr    $0x4,%dl
   1038a:	0f b6 d2             	movzbl %dl,%edx
   1038d:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10391:	c1 e1 04             	shl    $0x4,%ecx
   10394:	09 ca                	or     %ecx,%edx
   10396:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1039a:	c1 e0 0c             	shl    $0xc,%eax
   1039d:	09 d0                	or     %edx,%eax
   1039f:	c1 e0 0c             	shl    $0xc,%eax
}
   103a2:	5d                   	pop    %ebp
   103a3:	c3                   	ret    

000103a4 <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   103a7:	ff 75 08             	pushl  0x8(%ebp)
   103aa:	e8 77 ff ff ff       	call   10326 <write_cr3>
   103af:	83 c4 04             	add    $0x4,%esp
}
   103b2:	90                   	nop
   103b3:	c9                   	leave  
   103b4:	c3                   	ret    

000103b5 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   103b5:	55                   	push   %ebp
   103b6:	89 e5                	mov    %esp,%ebp
   103b8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	83 ec 08             	sub    $0x8,%esp
   103c1:	68 04 32 01 00       	push   $0x13204
   103c6:	50                   	push   %eax
   103c7:	e8 0f 20 00 00       	call   123db <mutex_init>
   103cc:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	8b 55 10             	mov    0x10(%ebp),%edx
   103d5:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103d8:	8b 45 08             	mov    0x8(%ebp),%eax
   103db:	8b 55 14             	mov    0x14(%ebp),%edx
   103de:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	8b 55 18             	mov    0x18(%ebp),%edx
   103e7:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	8b 40 60             	mov    0x60(%eax),%eax
   103f0:	ba 00 00 00 00       	mov    $0x0,%edx
   103f5:	f7 75 18             	divl   0x18(%ebp)
   103f8:	89 c2                	mov    %eax,%edx
   103fa:	8b 45 08             	mov    0x8(%ebp),%eax
   103fd:	83 c0 54             	add    $0x54,%eax
   10400:	6a 00                	push   $0x0
   10402:	52                   	push   %edx
   10403:	ff 75 0c             	pushl  0xc(%ebp)
   10406:	50                   	push   %eax
   10407:	e8 b8 22 00 00       	call   126c4 <bitmap_init>
   1040c:	83 c4 10             	add    $0x10,%esp
}
   1040f:	90                   	nop
   10410:	c9                   	leave  
   10411:	c3                   	ret    

00010412 <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   10412:	55                   	push   %ebp
   10413:	89 e5                	mov    %esp,%ebp
   10415:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	83 ec 0c             	sub    $0xc,%esp
   10425:	50                   	push   %eax
   10426:	e8 f1 1f 00 00       	call   1241c <mutex_acquire>
   1042b:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	83 c0 54             	add    $0x54,%eax
   10434:	83 ec 04             	sub    $0x4,%esp
   10437:	ff 75 0c             	pushl  0xc(%ebp)
   1043a:	6a 00                	push   $0x0
   1043c:	50                   	push   %eax
   1043d:	e8 fe 23 00 00       	call   12840 <bitmap_alloc_nbits>
   10442:	83 c4 10             	add    $0x10,%esp
   10445:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10448:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1044c:	78 17                	js     10465 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 50 5c             	mov    0x5c(%eax),%edx
   10454:	8b 45 08             	mov    0x8(%ebp),%eax
   10457:	8b 48 64             	mov    0x64(%eax),%ecx
   1045a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1045d:	0f af c1             	imul   %ecx,%eax
   10460:	01 d0                	add    %edx,%eax
   10462:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10465:	8b 45 08             	mov    0x8(%ebp),%eax
   10468:	83 ec 0c             	sub    $0xc,%esp
   1046b:	50                   	push   %eax
   1046c:	e8 39 20 00 00       	call   124aa <mutex_release>
   10471:	83 c4 10             	add    $0x10,%esp

    return addr;
   10474:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10477:	c9                   	leave  
   10478:	c3                   	ret    

00010479 <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10479:	55                   	push   %ebp
   1047a:	89 e5                	mov    %esp,%ebp
   1047c:	53                   	push   %ebx
   1047d:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	83 ec 0c             	sub    $0xc,%esp
   10486:	50                   	push   %eax
   10487:	e8 90 1f 00 00       	call   1241c <mutex_acquire>
   1048c:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1048f:	8b 45 08             	mov    0x8(%ebp),%eax
   10492:	8b 40 5c             	mov    0x5c(%eax),%eax
   10495:	8b 55 0c             	mov    0xc(%ebp),%edx
   10498:	89 d1                	mov    %edx,%ecx
   1049a:	29 c1                	sub    %eax,%ecx
   1049c:	8b 45 08             	mov    0x8(%ebp),%eax
   1049f:	8b 58 64             	mov    0x64(%eax),%ebx
   104a2:	89 c8                	mov    %ecx,%eax
   104a4:	ba 00 00 00 00       	mov    $0x0,%edx
   104a9:	f7 f3                	div    %ebx
   104ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   104ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104b1:	8b 55 08             	mov    0x8(%ebp),%edx
   104b4:	83 c2 54             	add    $0x54,%edx
   104b7:	6a 00                	push   $0x0
   104b9:	ff 75 10             	pushl  0x10(%ebp)
   104bc:	50                   	push   %eax
   104bd:	52                   	push   %edx
   104be:	e8 54 22 00 00       	call   12717 <bitmap_set_bit>
   104c3:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104c6:	8b 45 08             	mov    0x8(%ebp),%eax
   104c9:	83 ec 0c             	sub    $0xc,%esp
   104cc:	50                   	push   %eax
   104cd:	e8 d8 1f 00 00       	call   124aa <mutex_release>
   104d2:	83 c4 10             	add    $0x10,%esp
}
   104d5:	90                   	nop
   104d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
   104de:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	68 11 32 01 00       	push   $0x13211
   104e9:	e8 36 2c 00 00       	call   13124 <log_printf>
   104ee:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104f8:	eb 29                	jmp    10523 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104fa:	8b 45 08             	mov    0x8(%ebp),%eax
   104fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10500:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1050a:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1050d:	52                   	push   %edx
   1050e:	50                   	push   %eax
   1050f:	ff 75 f4             	pushl  -0xc(%ebp)
   10512:	68 1d 32 01 00       	push   $0x1321d
   10517:	e8 08 2c 00 00       	call   13124 <log_printf>
   1051c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1051f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	8b 40 50             	mov    0x50(%eax),%eax
   10529:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1052c:	7c cc                	jl     104fa <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1052e:	83 ec 0c             	sub    $0xc,%esp
   10531:	68 2b 32 01 00       	push   $0x1322b
   10536:	e8 e9 2b 00 00       	call   13124 <log_printf>
   1053b:	83 c4 10             	add    $0x10,%esp
}
   1053e:	90                   	nop
   1053f:	c9                   	leave  
   10540:	c3                   	ret    

00010541 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   10541:	55                   	push   %ebp
   10542:	89 e5                	mov    %esp,%ebp
   10544:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10547:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1054e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10555:	eb 16                	jmp    1056d <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10557:	8b 45 08             	mov    0x8(%ebp),%eax
   1055a:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1055d:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10561:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10564:	01 d0                	add    %edx,%eax
   10566:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10569:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1056d:	8b 45 08             	mov    0x8(%ebp),%eax
   10570:	8b 40 50             	mov    0x50(%eax),%eax
   10573:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10576:	7c df                	jl     10557 <total_mem_size+0x16>
    }
    return mem_size;
   10578:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1057b:	c9                   	leave  
   1057c:	c3                   	ret    

0001057d <test_alloc>:


static void test_alloc(void) {
   1057d:	55                   	push   %ebp
   1057e:	89 e5                	mov    %esp,%ebp
   10580:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10586:	83 ec 0c             	sub    $0xc,%esp
   10589:	68 00 10 00 00       	push   $0x1000
   1058e:	68 00 00 04 00       	push   $0x40000
   10593:	68 00 10 00 00       	push   $0x1000
   10598:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   1059e:	50                   	push   %eax
   1059f:	8d 45 80             	lea    -0x80(%ebp),%eax
   105a2:	50                   	push   %eax
   105a3:	e8 0d fe ff ff       	call   103b5 <addr_alloc_init>
   105a8:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   105ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105b2:	eb 2b                	jmp    105df <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   105b4:	83 ec 08             	sub    $0x8,%esp
   105b7:	6a 02                	push   $0x2
   105b9:	8d 45 80             	lea    -0x80(%ebp),%eax
   105bc:	50                   	push   %eax
   105bd:	e8 50 fe ff ff       	call   10412 <addr_alloc_page>
   105c2:	83 c4 10             	add    $0x10,%esp
   105c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105c8:	83 ec 08             	sub    $0x8,%esp
   105cb:	ff 75 e8             	pushl  -0x18(%ebp)
   105ce:	68 2d 32 01 00       	push   $0x1322d
   105d3:	e8 4c 2b 00 00       	call   13124 <log_printf>
   105d8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105df:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105e3:	7e cf                	jle    105b4 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105e5:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105f3:	eb 1f                	jmp    10614 <test_alloc+0x97>
        addr += 4096 * 2;
   105f5:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105fc:	83 ec 04             	sub    $0x4,%esp
   105ff:	6a 02                	push   $0x2
   10601:	ff 75 f0             	pushl  -0x10(%ebp)
   10604:	8d 45 80             	lea    -0x80(%ebp),%eax
   10607:	50                   	push   %eax
   10608:	e8 6c fe ff ff       	call   10479 <addr_free_page>
   1060d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10610:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10614:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   10618:	7e db                	jle    105f5 <test_alloc+0x78>
    }
}
   1061a:	90                   	nop
   1061b:	c9                   	leave  
   1061c:	c3                   	ret    

0001061d <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   1061d:	55                   	push   %ebp
   1061e:	89 e5                	mov    %esp,%ebp
   10620:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   10623:	ff 75 0c             	pushl  0xc(%ebp)
   10626:	e8 07 fd ff ff       	call   10332 <pde_index>
   1062b:	83 c4 04             	add    $0x4,%esp
   1062e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10635:	8b 45 08             	mov    0x8(%ebp),%eax
   10638:	01 d0                	add    %edx,%eax
   1063a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   1063d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10640:	0f b6 00             	movzbl (%eax),%eax
   10643:	83 e0 01             	and    $0x1,%eax
   10646:	84 c0                	test   %al,%al
   10648:	74 10                	je     1065a <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   1064a:	ff 75 f0             	pushl  -0x10(%ebp)
   1064d:	e8 f4 fc ff ff       	call   10346 <pde_paddr>
   10652:	83 c4 04             	add    $0x4,%esp
   10655:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10658:	eb 57                	jmp    106b1 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1065a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1065e:	75 07                	jne    10667 <find_pte+0x4a>
            return (pte_t*)0;
   10660:	b8 00 00 00 00       	mov    $0x0,%eax
   10665:	eb 64                	jmp    106cb <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10667:	83 ec 08             	sub    $0x8,%esp
   1066a:	6a 01                	push   $0x1
   1066c:	68 00 50 01 00       	push   $0x15000
   10671:	e8 9c fd ff ff       	call   10412 <addr_alloc_page>
   10676:	83 c4 10             	add    $0x10,%esp
   10679:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1067c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10680:	75 07                	jne    10689 <find_pte+0x6c>
            return (pte_t*)0;
   10682:	b8 00 00 00 00       	mov    $0x0,%eax
   10687:	eb 42                	jmp    106cb <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10689:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1068c:	83 c8 07             	or     $0x7,%eax
   1068f:	89 c2                	mov    %eax,%edx
   10691:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10694:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10696:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10699:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1069c:	83 ec 04             	sub    $0x4,%esp
   1069f:	68 00 10 00 00       	push   $0x1000
   106a4:	6a 00                	push   $0x0
   106a6:	ff 75 f4             	pushl  -0xc(%ebp)
   106a9:	e8 07 24 00 00       	call   12ab5 <kmemset>
   106ae:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   106b1:	83 ec 0c             	sub    $0xc,%esp
   106b4:	ff 75 0c             	pushl  0xc(%ebp)
   106b7:	e8 b1 fc ff ff       	call   1036d <pte_index>
   106bc:	83 c4 10             	add    $0x10,%esp
   106bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106c9:	01 d0                	add    %edx,%eax
}
   106cb:	c9                   	leave  
   106cc:	c3                   	ret    

000106cd <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106cd:	55                   	push   %ebp
   106ce:	89 e5                	mov    %esp,%ebp
   106d0:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106da:	eb 6e                	jmp    1074a <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106dc:	83 ec 04             	sub    $0x4,%esp
   106df:	6a 01                	push   $0x1
   106e1:	ff 75 0c             	pushl  0xc(%ebp)
   106e4:	ff 75 08             	pushl  0x8(%ebp)
   106e7:	e8 31 ff ff ff       	call   1061d <find_pte>
   106ec:	83 c4 10             	add    $0x10,%esp
   106ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106f6:	75 07                	jne    106ff <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106fd:	eb 53                	jmp    10752 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10702:	0f b6 00             	movzbl (%eax),%eax
   10705:	83 e0 01             	and    $0x1,%eax
   10708:	84 c0                	test   %al,%al
   1070a:	74 1c                	je     10728 <memory_create_map+0x5b>
   1070c:	68 3d 32 01 00       	push   $0x1323d
   10711:	68 5c 33 01 00       	push   $0x1335c
   10716:	68 a3 00 00 00       	push   $0xa3
   1071b:	68 50 32 01 00       	push   $0x13250
   10720:	e8 f5 26 00 00       	call   12e1a <pannic>
   10725:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   10728:	8b 45 10             	mov    0x10(%ebp),%eax
   1072b:	0b 45 18             	or     0x18(%ebp),%eax
   1072e:	83 c8 01             	or     $0x1,%eax
   10731:	89 c2                	mov    %eax,%edx
   10733:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10736:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   10738:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1073f:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10746:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1074a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1074d:	3b 45 14             	cmp    0x14(%ebp),%eax
   10750:	7c 8a                	jl     106dc <memory_create_map+0xf>
    }
}
   10752:	c9                   	leave  
   10753:	c3                   	ret    

00010754 <create_kernel_table>:


void create_kernel_table(void) {
   10754:	55                   	push   %ebp
   10755:	89 e5                	mov    %esp,%ebp
   10757:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1075a:	83 ec 04             	sub    $0x4,%esp
   1075d:	68 00 10 00 00       	push   $0x1000
   10762:	6a 00                	push   $0x0
   10764:	68 00 60 01 00       	push   $0x16000
   10769:	e8 47 23 00 00       	call   12ab5 <kmemset>
   1076e:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10771:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10778:	e9 98 00 00 00       	jmp    10815 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   1077d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10780:	c1 e0 04             	shl    $0x4,%eax
   10783:	05 00 40 01 00       	add    $0x14000,%eax
   10788:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1078b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1078e:	8b 00                	mov    (%eax),%eax
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	68 00 10 00 00       	push   $0x1000
   10798:	50                   	push   %eax
   10799:	e8 7b fb ff ff       	call   10319 <down2>
   1079e:	83 c4 10             	add    $0x10,%esp
   107a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   107a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a7:	8b 40 04             	mov    0x4(%eax),%eax
   107aa:	83 ec 08             	sub    $0x8,%esp
   107ad:	68 00 10 00 00       	push   $0x1000
   107b2:	50                   	push   %eax
   107b3:	e8 4a fb ff ff       	call   10302 <up2>
   107b8:	83 c4 10             	add    $0x10,%esp
   107bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   107be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c1:	8b 40 08             	mov    0x8(%eax),%eax
   107c4:	83 ec 08             	sub    $0x8,%esp
   107c7:	68 00 10 00 00       	push   $0x1000
   107cc:	50                   	push   %eax
   107cd:	e8 47 fb ff ff       	call   10319 <down2>
   107d2:	83 c4 10             	add    $0x10,%esp
   107d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107db:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107de:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107e4:	85 c0                	test   %eax,%eax
   107e6:	0f 48 c2             	cmovs  %edx,%eax
   107e9:	c1 f8 0c             	sar    $0xc,%eax
   107ec:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f2:	8b 48 0c             	mov    0xc(%eax),%ecx
   107f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107fb:	83 ec 0c             	sub    $0xc,%esp
   107fe:	51                   	push   %ecx
   107ff:	ff 75 e0             	pushl  -0x20(%ebp)
   10802:	52                   	push   %edx
   10803:	50                   	push   %eax
   10804:	68 00 60 01 00       	push   $0x16000
   10809:	e8 bf fe ff ff       	call   106cd <memory_create_map>
   1080e:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10811:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10815:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10818:	83 f8 03             	cmp    $0x3,%eax
   1081b:	0f 86 5c ff ff ff    	jbe    1077d <create_kernel_table+0x29>
    }
}
   10821:	90                   	nop
   10822:	c9                   	leave  
   10823:	c3                   	ret    

00010824 <memory_create_uvm>:

// 创建进程的初始页表
// 主要的工作创建页目录表，然后从内核页表中复制一部分
uint32_t memory_create_uvm(void) {
   10824:	55                   	push   %ebp
   10825:	89 e5                	mov    %esp,%ebp
   10827:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   1082a:	83 ec 08             	sub    $0x8,%esp
   1082d:	6a 01                	push   $0x1
   1082f:	68 00 50 01 00       	push   $0x15000
   10834:	e8 d9 fb ff ff       	call   10412 <addr_alloc_page>
   10839:	83 c4 10             	add    $0x10,%esp
   1083c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   1083f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10843:	75 07                	jne    1084c <memory_create_uvm+0x28>
        return 0;
   10845:	b8 00 00 00 00       	mov    $0x0,%eax
   1084a:	eb 5b                	jmp    108a7 <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   1084c:	83 ec 04             	sub    $0x4,%esp
   1084f:	68 00 10 00 00       	push   $0x1000
   10854:	6a 00                	push   $0x0
   10856:	ff 75 f0             	pushl  -0x10(%ebp)
   10859:	e8 57 22 00 00       	call   12ab5 <kmemset>
   1085e:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10861:	83 ec 0c             	sub    $0xc,%esp
   10864:	68 00 00 00 80       	push   $0x80000000
   10869:	e8 c4 fa ff ff       	call   10332 <pde_index>
   1086e:	83 c4 10             	add    $0x10,%esp
   10871:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10874:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1087b:	eb 1f                	jmp    1089c <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1087d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10880:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10887:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088a:	01 c2                	add    %eax,%edx
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10896:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10898:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1089c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   108a2:	77 d9                	ja     1087d <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   108a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   108a7:	c9                   	leave  
   108a8:	c3                   	ret    

000108a9 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   108a9:	55                   	push   %ebp
   108aa:	89 e5                	mov    %esp,%ebp
   108ac:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   108af:	83 ec 0c             	sub    $0xc,%esp
   108b2:	68 97 32 01 00       	push   $0x13297
   108b7:	e8 68 28 00 00       	call   13124 <log_printf>
   108bc:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   108bf:	83 ec 0c             	sub    $0xc,%esp
   108c2:	ff 75 08             	pushl  0x8(%ebp)
   108c5:	e8 11 fc ff ff       	call   104db <show_mem_info>
   108ca:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108cd:	c7 45 f4 9b 32 02 00 	movl   $0x2329b,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108d4:	83 ec 0c             	sub    $0xc,%esp
   108d7:	ff 75 08             	pushl  0x8(%ebp)
   108da:	e8 62 fc ff ff       	call   10541 <total_mem_size>
   108df:	83 c4 10             	add    $0x10,%esp
   108e2:	2d 00 00 10 00       	sub    $0x100000,%eax
   108e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108ea:	83 ec 08             	sub    $0x8,%esp
   108ed:	68 00 10 00 00       	push   $0x1000
   108f2:	ff 75 f0             	pushl  -0x10(%ebp)
   108f5:	e8 1f fa ff ff       	call   10319 <down2>
   108fa:	83 c4 10             	add    $0x10,%esp
   108fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   10900:	83 ec 04             	sub    $0x4,%esp
   10903:	ff 75 f0             	pushl  -0x10(%ebp)
   10906:	68 00 00 10 00       	push   $0x100000
   1090b:	68 a1 32 01 00       	push   $0x132a1
   10910:	e8 0f 28 00 00       	call   13124 <log_printf>
   10915:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10918:	83 ec 0c             	sub    $0xc,%esp
   1091b:	68 00 10 00 00       	push   $0x1000
   10920:	ff 75 f0             	pushl  -0x10(%ebp)
   10923:	68 00 00 10 00       	push   $0x100000
   10928:	ff 75 f4             	pushl  -0xc(%ebp)
   1092b:	68 00 50 01 00       	push   $0x15000
   10930:	e8 80 fa ff ff       	call   103b5 <addr_alloc_init>
   10935:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10938:	a1 60 50 01 00       	mov    0x15060,%eax
   1093d:	c1 e8 0c             	shr    $0xc,%eax
   10940:	83 ec 0c             	sub    $0xc,%esp
   10943:	50                   	push   %eax
   10944:	e8 65 1d 00 00       	call   126ae <bitmap_byte_count>
   10949:	83 c4 10             	add    $0x10,%esp
   1094c:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   1094f:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10956:	76 1c                	jbe    10974 <memory_init+0xcb>
   10958:	68 bc 32 01 00       	push   $0x132bc
   1095d:	68 70 33 01 00       	push   $0x13370
   10962:	68 fe 00 00 00       	push   $0xfe
   10967:	68 50 32 01 00       	push   $0x13250
   1096c:	e8 a9 24 00 00       	call   12e1a <pannic>
   10971:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10974:	e8 db fd ff ff       	call   10754 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10979:	b8 00 60 01 00       	mov    $0x16000,%eax
   1097e:	83 ec 0c             	sub    $0xc,%esp
   10981:	50                   	push   %eax
   10982:	e8 1d fa ff ff       	call   103a4 <mmu_set_page_dir>
   10987:	83 c4 10             	add    $0x10,%esp
}
   1098a:	90                   	nop
   1098b:	c9                   	leave  
   1098c:	c3                   	ret    

0001098d <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   1098d:	55                   	push   %ebp
   1098e:	89 e5                	mov    %esp,%ebp
   10990:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10993:	8b 45 0c             	mov    0xc(%ebp),%eax
   10996:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10999:	68 00 10 00 00       	push   $0x1000
   1099e:	ff 75 10             	pushl  0x10(%ebp)
   109a1:	e8 5c f9 ff ff       	call   10302 <up2>
   109a6:	83 c4 08             	add    $0x8,%esp
   109a9:	c1 e8 0c             	shr    $0xc,%eax
   109ac:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   109af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109b6:	e9 8d 00 00 00       	jmp    10a48 <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   109bb:	83 ec 08             	sub    $0x8,%esp
   109be:	6a 01                	push   $0x1
   109c0:	68 00 50 01 00       	push   $0x15000
   109c5:	e8 48 fa ff ff       	call   10412 <addr_alloc_page>
   109ca:	83 c4 10             	add    $0x10,%esp
   109cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   109d0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109d4:	75 17                	jne    109ed <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   109d6:	83 ec 0c             	sub    $0xc,%esp
   109d9:	68 e4 32 01 00       	push   $0x132e4
   109de:	e8 41 27 00 00       	call   13124 <log_printf>
   109e3:	83 c4 10             	add    $0x10,%esp
            return 0;
   109e6:	b8 00 00 00 00       	mov    $0x0,%eax
   109eb:	eb 6c                	jmp    10a59 <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109ed:	8b 45 08             	mov    0x8(%ebp),%eax
   109f0:	83 ec 0c             	sub    $0xc,%esp
   109f3:	ff 75 14             	pushl  0x14(%ebp)
   109f6:	6a 01                	push   $0x1
   109f8:	ff 75 e8             	pushl  -0x18(%ebp)
   109fb:	ff 75 f4             	pushl  -0xc(%ebp)
   109fe:	50                   	push   %eax
   109ff:	e8 c9 fc ff ff       	call   106cd <memory_create_map>
   10a04:	83 c4 20             	add    $0x20,%esp
   10a07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10a0a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a0e:	79 2d                	jns    10a3d <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   10a10:	83 ec 0c             	sub    $0xc,%esp
   10a13:	68 04 33 01 00       	push   $0x13304
   10a18:	e8 07 27 00 00       	call   13124 <log_printf>
   10a1d:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   10a20:	83 ec 04             	sub    $0x4,%esp
   10a23:	ff 75 f0             	pushl  -0x10(%ebp)
   10a26:	ff 75 0c             	pushl  0xc(%ebp)
   10a29:	68 00 50 01 00       	push   $0x15000
   10a2e:	e8 46 fa ff ff       	call   10479 <addr_free_page>
   10a33:	83 c4 10             	add    $0x10,%esp

            return 0;
   10a36:	b8 00 00 00 00       	mov    $0x0,%eax
   10a3b:	eb 1c                	jmp    10a59 <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a3d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10a44:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a4b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a4e:	0f 8c 67 ff ff ff    	jl     109bb <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a59:	c9                   	leave  
   10a5a:	c3                   	ret    

00010a5b <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常是0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a5b:	55                   	push   %ebp
   10a5c:	89 e5                	mov    %esp,%ebp
   10a5e:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10a61:	e8 17 07 00 00       	call   1117d <task_current>
   10a66:	8b 40 68             	mov    0x68(%eax),%eax
   10a69:	ff 75 10             	pushl  0x10(%ebp)
   10a6c:	ff 75 0c             	pushl  0xc(%ebp)
   10a6f:	ff 75 08             	pushl  0x8(%ebp)
   10a72:	50                   	push   %eax
   10a73:	e8 15 ff ff ff       	call   1098d <memory_alloc_for_page_dir>
   10a78:	83 c4 10             	add    $0x10,%esp
}
   10a7b:	c9                   	leave  
   10a7c:	c3                   	ret    

00010a7d <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10a7d:	55                   	push   %ebp
   10a7e:	89 e5                	mov    %esp,%ebp
   10a80:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10a83:	e8 f5 06 00 00       	call   1117d <task_current>
   10a88:	8b 40 68             	mov    0x68(%eax),%eax
}
   10a8b:	c9                   	leave  
   10a8c:	c3                   	ret    

00010a8d <memory_alloc_page>:


// 以页为单位，分配物理内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10a8d:	55                   	push   %ebp
   10a8e:	89 e5                	mov    %esp,%ebp
   10a90:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10a93:	83 ec 08             	sub    $0x8,%esp
   10a96:	6a 01                	push   $0x1
   10a98:	68 00 50 01 00       	push   $0x15000
   10a9d:	e8 70 f9 ff ff       	call   10412 <addr_alloc_page>
   10aa2:	83 c4 10             	add    $0x10,%esp
   10aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10aab:	c9                   	leave  
   10aac:	c3                   	ret    

00010aad <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的物理内存
void memory_free_page(uint32_t vaddr) {
   10aad:	55                   	push   %ebp
   10aae:	89 e5                	mov    %esp,%ebp
   10ab0:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab6:	85 c0                	test   %eax,%eax
   10ab8:	78 17                	js     10ad1 <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10aba:	83 ec 04             	sub    $0x4,%esp
   10abd:	6a 01                	push   $0x1
   10abf:	ff 75 08             	pushl  0x8(%ebp)
   10ac2:	68 00 50 01 00       	push   $0x15000
   10ac7:	e8 ad f9 ff ff       	call   10479 <addr_free_page>
   10acc:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10acf:	eb 72                	jmp    10b43 <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10ad1:	e8 a7 ff ff ff       	call   10a7d <curr_page_dir>
   10ad6:	83 ec 04             	sub    $0x4,%esp
   10ad9:	6a 00                	push   $0x0
   10adb:	ff 75 08             	pushl  0x8(%ebp)
   10ade:	50                   	push   %eax
   10adf:	e8 39 fb ff ff       	call   1061d <find_pte>
   10ae4:	83 c4 10             	add    $0x10,%esp
   10ae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10aea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aee:	75 0d                	jne    10afd <memory_free_page+0x50>
   10af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10af3:	0f b6 00             	movzbl (%eax),%eax
   10af6:	83 e0 01             	and    $0x1,%eax
   10af9:	84 c0                	test   %al,%al
   10afb:	75 1c                	jne    10b19 <memory_free_page+0x6c>
   10afd:	68 38 33 01 00       	push   $0x13338
   10b02:	68 7c 33 01 00       	push   $0x1337c
   10b07:	68 46 01 00 00       	push   $0x146
   10b0c:	68 50 32 01 00       	push   $0x13250
   10b11:	e8 04 23 00 00       	call   12e1a <pannic>
   10b16:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10b19:	83 ec 0c             	sub    $0xc,%esp
   10b1c:	ff 75 f4             	pushl  -0xc(%ebp)
   10b1f:	e8 59 f8 ff ff       	call   1037d <pte_paddr>
   10b24:	83 c4 10             	add    $0x10,%esp
   10b27:	83 ec 04             	sub    $0x4,%esp
   10b2a:	6a 01                	push   $0x1
   10b2c:	50                   	push   %eax
   10b2d:	68 00 50 01 00       	push   $0x15000
   10b32:	e8 42 f9 ff ff       	call   10479 <addr_free_page>
   10b37:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10b43:	90                   	nop
   10b44:	c9                   	leave  
   10b45:	c3                   	ret    

00010b46 <kalloc>:

/*-- ------------------------------ --*/
// 申请一页物理内存。
static uint32_t kalloc() {
   10b46:	55                   	push   %ebp
   10b47:	89 e5                	mov    %esp,%ebp
   10b49:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10b4c:	83 ec 08             	sub    $0x8,%esp
   10b4f:	6a 01                	push   $0x1
   10b51:	68 00 50 01 00       	push   $0x15000
   10b56:	e8 b7 f8 ff ff       	call   10412 <addr_alloc_page>
   10b5b:	83 c4 10             	add    $0x10,%esp
}
   10b5e:	c9                   	leave  
   10b5f:	c3                   	ret    

00010b60 <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr) {
   10b60:	55                   	push   %ebp
   10b61:	89 e5                	mov    %esp,%ebp
   10b63:	83 ec 08             	sub    $0x8,%esp
    addr_free_page(&paddr_alloc, addr, 1);
   10b66:	83 ec 04             	sub    $0x4,%esp
   10b69:	6a 01                	push   $0x1
   10b6b:	ff 75 08             	pushl  0x8(%ebp)
   10b6e:	68 00 50 01 00       	push   $0x15000
   10b73:	e8 01 f9 ff ff       	call   10479 <addr_free_page>
   10b78:	83 c4 10             	add    $0x10,%esp
}
   10b7b:	90                   	nop
   10b7c:	c9                   	leave  
   10b7d:	c3                   	ret    

00010b7e <sys_print_msg>:
#include "tools/log.h"

typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

// test
void sys_print_msg(char* fmt, int arg) {
   10b7e:	55                   	push   %ebp
   10b7f:	89 e5                	mov    %esp,%ebp
   10b81:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10b84:	83 ec 08             	sub    $0x8,%esp
   10b87:	ff 75 0c             	pushl  0xc(%ebp)
   10b8a:	ff 75 08             	pushl  0x8(%ebp)
   10b8d:	e8 92 25 00 00       	call   13124 <log_printf>
   10b92:	83 c4 10             	add    $0x10,%esp
}
   10b95:	90                   	nop
   10b96:	c9                   	leave  
   10b97:	c3                   	ret    

00010b98 <do_handler_syscall>:
    [SYS_getpid]     = (syscall_handler_t)sys_getpid,
    [SYS_print_msg]  = (syscall_handler_t)sys_print_msg,
    [SYS_fork]       = (syscall_handler_t)sys_fork,
};

void do_handler_syscall(syscall_frame_t* frame) {
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
   10b9b:	53                   	push   %ebx
   10b9c:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba2:	8b 40 3c             	mov    0x3c(%eax),%eax
   10ba5:	83 f8 03             	cmp    $0x3,%eax
   10ba8:	77 4e                	ja     10bf8 <do_handler_syscall+0x60>
        syscall_handler_t handler = sys_table[frame->func_id];
   10baa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bad:	8b 40 3c             	mov    0x3c(%eax),%eax
   10bb0:	8b 04 85 90 33 01 00 	mov    0x13390(,%eax,4),%eax
   10bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (handler) {
   10bba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10bbe:	74 38                	je     10bf8 <do_handler_syscall+0x60>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc3:	8b 40 4c             	mov    0x4c(%eax),%eax
   10bc6:	89 c3                	mov    %eax,%ebx
   10bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcb:	8b 40 48             	mov    0x48(%eax),%eax
   10bce:	89 c1                	mov    %eax,%ecx
   10bd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd3:	8b 40 44             	mov    0x44(%eax),%eax
   10bd6:	89 c2                	mov    %eax,%edx
   10bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdb:	8b 40 40             	mov    0x40(%eax),%eax
   10bde:	53                   	push   %ebx
   10bdf:	51                   	push   %ecx
   10be0:	52                   	push   %edx
   10be1:	50                   	push   %eax
   10be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10be5:	ff d0                	call   *%eax
   10be7:	83 c4 10             	add    $0x10,%esp
   10bea:	89 45 f0             	mov    %eax,-0x10(%ebp)

            frame->eax = ret; // Integral and pointer return values appear in %eax.
   10bed:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10bf3:	89 50 30             	mov    %edx,0x30(%eax)

            return;
   10bf6:	eb 30                	jmp    10c28 <do_handler_syscall+0x90>
        }
    }

    task_t* task = task_current();
   10bf8:	e8 80 05 00 00       	call   1117d <task_current>
   10bfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10c00:	8b 45 08             	mov    0x8(%ebp),%eax
   10c03:	8b 40 3c             	mov    0x3c(%eax),%eax
   10c06:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c09:	83 c2 04             	add    $0x4,%edx
   10c0c:	83 ec 04             	sub    $0x4,%esp
   10c0f:	50                   	push   %eax
   10c10:	52                   	push   %edx
   10c11:	68 a0 33 01 00       	push   $0x133a0
   10c16:	e8 09 25 00 00       	call   13124 <log_printf>
   10c1b:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   10c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c21:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
   10c28:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c2b:	c9                   	leave  
   10c2c:	c3                   	ret    

00010c2d <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10c2d:	55                   	push   %ebp
   10c2e:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10c30:	8b 45 08             	mov    0x8(%ebp),%eax
   10c33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10c39:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10c43:	90                   	nop
   10c44:	5d                   	pop    %ebp
   10c45:	c3                   	ret    

00010c46 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10c46:	55                   	push   %ebp
   10c47:	89 e5                	mov    %esp,%ebp
    return node->next;
   10c49:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4c:	8b 40 04             	mov    0x4(%eax),%eax
}
   10c4f:	5d                   	pop    %ebp
   10c50:	c3                   	ret    

00010c51 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10c51:	55                   	push   %ebp
   10c52:	89 e5                	mov    %esp,%ebp
    return list->count;
   10c54:	8b 45 08             	mov    0x8(%ebp),%eax
   10c57:	8b 40 08             	mov    0x8(%eax),%eax
}
   10c5a:	5d                   	pop    %ebp
   10c5b:	c3                   	ret    

00010c5c <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10c5c:	55                   	push   %ebp
   10c5d:	89 e5                	mov    %esp,%ebp
    return list->first;
   10c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c62:	8b 00                	mov    (%eax),%eax
}
   10c64:	5d                   	pop    %ebp
   10c65:	c3                   	ret    

00010c66 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10c66:	55                   	push   %ebp
   10c67:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10c69:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6c:	0f 22 d8             	mov    %eax,%cr3
}
   10c6f:	90                   	nop
   10c70:	5d                   	pop    %ebp
   10c71:	c3                   	ret    

00010c72 <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   10c72:	55                   	push   %ebp
   10c73:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10c75:	f4                   	hlt    
}
   10c76:	90                   	nop
   10c77:	5d                   	pop    %ebp
   10c78:	c3                   	ret    

00010c79 <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10c79:	55                   	push   %ebp
   10c7a:	89 e5                	mov    %esp,%ebp
   10c7c:	83 ec 04             	sub    $0x4,%esp
   10c7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c82:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10c86:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10c8a:	0f 00 d8             	ltr    %ax
}
   10c8d:	90                   	nop
   10c8e:	c9                   	leave  
   10c8f:	c3                   	ret    

00010c90 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10c90:	55                   	push   %ebp
   10c91:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10c93:	ff 75 08             	pushl  0x8(%ebp)
   10c96:	e8 cb ff ff ff       	call   10c66 <write_cr3>
   10c9b:	83 c4 04             	add    $0x4,%esp
}
   10c9e:	90                   	nop
   10c9f:	c9                   	leave  
   10ca0:	c3                   	ret    

00010ca1 <tss_init>:

// 空闲进程的栈, 不是广义上的内核栈
static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   10ca1:	55                   	push   %ebp
   10ca2:	89 e5                	mov    %esp,%ebp
   10ca4:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10ca7:	e8 03 09 00 00       	call   115af <gdt_alloc_desc>
   10cac:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10caf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10cb3:	79 1a                	jns    10ccf <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10cb5:	83 ec 0c             	sub    $0xc,%esp
   10cb8:	68 c0 33 01 00       	push   $0x133c0
   10cbd:	e8 62 24 00 00       	call   13124 <log_printf>
   10cc2:	83 c4 10             	add    $0x10,%esp
        return -1;
   10cc5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10cca:	e9 58 01 00 00       	jmp    10e27 <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd2:	83 c0 4c             	add    $0x4c,%eax
   10cd5:	68 89 00 00 00       	push   $0x89
   10cda:	6a 68                	push   $0x68
   10cdc:	50                   	push   %eax
   10cdd:	ff 75 ec             	pushl  -0x14(%ebp)
   10ce0:	e8 41 07 00 00       	call   11426 <segment_desc_set>
   10ce5:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   10ceb:	83 c0 4c             	add    $0x4c,%eax
   10cee:	83 ec 04             	sub    $0x4,%esp
   10cf1:	6a 68                	push   $0x68
   10cf3:	6a 00                	push   $0x0
   10cf5:	50                   	push   %eax
   10cf6:	e8 ba 1d 00 00       	call   12ab5 <kmemset>
   10cfb:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间，大小为PGSIZE
    uint32_t kernel_stack = memory_alloc_page();
   10cfe:	e8 8a fd ff ff       	call   10a8d <memory_alloc_page>
   10d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   10d06:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d0a:	0f 84 ec 00 00 00    	je     10dfc <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10d10:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d13:	83 e0 01             	and    $0x1,%eax
   10d16:	85 c0                	test   %eax,%eax
   10d18:	74 10                	je     10d2a <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   10d1a:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10d21:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10d28:	eb 16                	jmp    10d40 <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10d2a:	a1 98 71 01 00       	mov    0x17198,%eax
   10d2f:	83 c8 03             	or     $0x3,%eax
   10d32:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10d35:	a1 9c 71 01 00       	mov    0x1719c,%eax
   10d3a:	83 c8 03             	or     $0x3,%eax
   10d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   10d40:	8b 45 08             	mov    0x8(%ebp),%eax
   10d43:	8b 55 10             	mov    0x10(%ebp),%edx
   10d46:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp    = esp;
   10d49:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4c:	8b 55 14             	mov    0x14(%ebp),%edx
   10d4f:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   10d55:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d58:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d61:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss     = data_sel;
   10d64:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d67:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   10d70:	8b 45 08             	mov    0x8(%ebp),%eax
   10d73:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10d7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d80:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d86:	8b 45 08             	mov    0x8(%ebp),%eax
   10d89:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d92:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10d98:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9b:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10da1:	8b 45 08             	mov    0x8(%ebp),%eax
   10da4:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10daa:	8b 45 08             	mov    0x8(%ebp),%eax
   10dad:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10db3:	8b 45 08             	mov    0x8(%ebp),%eax
   10db6:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs     = code_sel;
   10dbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10dbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc2:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10dc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcb:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10dd2:	e8 4d fa ff ff       	call   10824 <memory_create_uvm>
   10dd7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   10dda:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dde:	74 1f                	je     10dff <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   10de0:	8b 45 08             	mov    0x8(%ebp),%eax
   10de3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10de6:	89 50 68             	mov    %edx,0x68(%eax)

    task->tss_sel    = tss_sel;
   10de9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dec:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10def:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    return 0;
   10df5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dfa:	eb 2b                	jmp    10e27 <tss_init+0x186>
        goto tss_init_failed;
   10dfc:	90                   	nop
   10dfd:	eb 01                	jmp    10e00 <tss_init+0x15f>
        goto tss_init_failed;
   10dff:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   10e00:	83 ec 0c             	sub    $0xc,%esp
   10e03:	ff 75 ec             	pushl  -0x14(%ebp)
   10e06:	e8 19 08 00 00       	call   11624 <gdt_free_sel>
   10e0b:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   10e0e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10e12:	74 0e                	je     10e22 <tss_init+0x181>
        memory_free_page(kernel_stack);
   10e14:	83 ec 0c             	sub    $0xc,%esp
   10e17:	ff 75 e8             	pushl  -0x18(%ebp)
   10e1a:	e8 8e fc ff ff       	call   10aad <memory_free_page>
   10e1f:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   10e22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e27:	c9                   	leave  
   10e28:	c3                   	ret    

00010e29 <task_init>:
// task_t* task:     已申请内存的进程结构体
// const char* name: 进程名
// int flag:         TASK_FLAG_USER 为用户进程，TASK_FLAG_SYSTEM 为内核进程
// uint32_t entry:   进程入口地址
// uint32_t esp:     进程栈底指针
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   10e29:	55                   	push   %ebp
   10e2a:	89 e5                	mov    %esp,%ebp
   10e2c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10e2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e33:	75 19                	jne    10e4e <task_init+0x25>
   10e35:	68 d2 33 01 00       	push   $0x133d2
   10e3a:	68 5c 34 01 00       	push   $0x1345c
   10e3f:	6a 51                	push   $0x51
   10e41:	68 e8 33 01 00       	push   $0x133e8
   10e46:	e8 cf 1f 00 00       	call   12e1a <pannic>
   10e4b:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   10e4e:	ff 75 18             	pushl  0x18(%ebp)
   10e51:	ff 75 14             	pushl  0x14(%ebp)
   10e54:	ff 75 10             	pushl  0x10(%ebp)
   10e57:	ff 75 08             	pushl  0x8(%ebp)
   10e5a:	e8 42 fe ff ff       	call   10ca1 <tss_init>
   10e5f:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	83 c0 04             	add    $0x4,%eax
   10e68:	83 ec 04             	sub    $0x4,%esp
   10e6b:	6a 20                	push   $0x20
   10e6d:	ff 75 0c             	pushl  0xc(%ebp)
   10e70:	50                   	push   %eax
   10e71:	e8 cb 1a 00 00       	call   12941 <kstrncpy>
   10e76:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10e79:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10e82:	8b 45 08             	mov    0x8(%ebp),%eax
   10e85:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8f:	c7 40 44 0a 00 00 00 	movl   $0xa,0x44(%eax)
    task->slice_ticks = task->time_ticks;
   10e96:	8b 45 08             	mov    0x8(%ebp),%eax
   10e99:	8b 50 44             	mov    0x44(%eax),%edx
   10e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9f:	89 50 48             	mov    %edx,0x48(%eax)

    list_node_init(&task->all_node);
   10ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea5:	83 c0 30             	add    $0x30,%eax
   10ea8:	83 ec 0c             	sub    $0xc,%esp
   10eab:	50                   	push   %eax
   10eac:	e8 7c fd ff ff       	call   10c2d <list_node_init>
   10eb1:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10eb4:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb7:	83 c0 28             	add    $0x28,%eax
   10eba:	83 ec 0c             	sub    $0xc,%esp
   10ebd:	50                   	push   %eax
   10ebe:	e8 6a fd ff ff       	call   10c2d <list_node_init>
   10ec3:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10ec6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec9:	83 c0 38             	add    $0x38,%eax
   10ecc:	83 ec 0c             	sub    $0xc,%esp
   10ecf:	50                   	push   %eax
   10ed0:	e8 58 fd ff ff       	call   10c2d <list_node_init>
   10ed5:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10ed8:	e8 cb 10 00 00       	call   11fa8 <irq_enter_protection>
   10edd:	89 45 f4             	mov    %eax,-0xc(%ebp)


    task->pid = (uint32_t)task;
   10ee0:	8b 55 08             	mov    0x8(%ebp),%edx
   10ee3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee6:	89 50 24             	mov    %edx,0x24(%eax)

    task_set_ready(task);
   10ee9:	83 ec 0c             	sub    $0xc,%esp
   10eec:	ff 75 08             	pushl  0x8(%ebp)
   10eef:	e8 e7 01 00 00       	call   110db <task_set_ready>
   10ef4:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10ef7:	8b 45 08             	mov    0x8(%ebp),%eax
   10efa:	83 c0 30             	add    $0x30,%eax
   10efd:	83 ec 08             	sub    $0x8,%esp
   10f00:	50                   	push   %eax
   10f01:	68 10 70 01 00       	push   $0x17010
   10f06:	e8 da 1f 00 00       	call   12ee5 <list_insert_back>
   10f0b:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10f0e:	83 ec 0c             	sub    $0xc,%esp
   10f11:	ff 75 f4             	pushl  -0xc(%ebp)
   10f14:	e8 a7 10 00 00       	call   11fc0 <irq_leave_protection>
   10f19:	83 c4 10             	add    $0x10,%esp

    return 0;
   10f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f21:	c9                   	leave  
   10f22:	c3                   	ret    

00010f23 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10f23:	55                   	push   %ebp
   10f24:	89 e5                	mov    %esp,%ebp
   10f26:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10f29:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f2c:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   10f32:	83 ec 0c             	sub    $0xc,%esp
   10f35:	50                   	push   %eax
   10f36:	e8 60 06 00 00       	call   1159b <swtch_to_tss>
   10f3b:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10f3e:	90                   	nop
   10f3f:	c9                   	leave  
   10f40:	c3                   	ret    

00010f41 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10f41:	55                   	push   %ebp
   10f42:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   10f44:	e8 29 fd ff ff       	call   10c72 <hlt>
   10f49:	eb f9                	jmp    10f44 <idle_task_entry+0x3>

00010f4b <task_manager_init>:
    }
}


void task_manager_init(void) {
   10f4b:	55                   	push   %ebp
   10f4c:	89 e5                	mov    %esp,%ebp
   10f4e:	83 ec 18             	sub    $0x18,%esp
    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   10f51:	e8 59 06 00 00       	call   115af <gdt_alloc_desc>
   10f56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f59:	68 f2 40 00 00       	push   $0x40f2
   10f5e:	6a ff                	push   $0xffffffff
   10f60:	6a 00                	push   $0x0
   10f62:	ff 75 f4             	pushl  -0xc(%ebp)
   10f65:	e8 bc 04 00 00       	call   11426 <segment_desc_set>
   10f6a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f70:	a3 9c 71 01 00       	mov    %eax,0x1719c

    sel = gdt_alloc_desc();
   10f75:	e8 35 06 00 00       	call   115af <gdt_alloc_desc>
   10f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f7d:	68 fa 40 00 00       	push   $0x40fa
   10f82:	6a ff                	push   $0xffffffff
   10f84:	6a 00                	push   $0x0
   10f86:	ff 75 f4             	pushl  -0xc(%ebp)
   10f89:	e8 98 04 00 00       	call   11426 <segment_desc_set>
   10f8e:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f94:	a3 98 71 01 00       	mov    %eax,0x17198

    list_init(&task_manager.ready_list);
   10f99:	83 ec 0c             	sub    $0xc,%esp
   10f9c:	68 04 70 01 00       	push   $0x17004
   10fa1:	e8 bd 1e 00 00       	call   12e63 <list_init>
   10fa6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10fa9:	83 ec 0c             	sub    $0xc,%esp
   10fac:	68 10 70 01 00       	push   $0x17010
   10fb1:	e8 ad 1e 00 00       	call   12e63 <list_init>
   10fb6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10fb9:	83 ec 0c             	sub    $0xc,%esp
   10fbc:	68 1c 70 01 00       	push   $0x1701c
   10fc1:	e8 9d 1e 00 00       	call   12e63 <list_init>
   10fc6:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10fc9:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10fd0:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   10fd3:	b8 a0 71 01 00       	mov    $0x171a0,%eax
    task_init(&task_manager.idle_task, 
   10fd8:	05 00 04 00 00       	add    $0x400,%eax
   10fdd:	ba 41 0f 01 00       	mov    $0x10f41,%edx
   10fe2:	83 ec 0c             	sub    $0xc,%esp
   10fe5:	50                   	push   %eax
   10fe6:	52                   	push   %edx
   10fe7:	6a 01                	push   $0x1
   10fe9:	68 2d 34 01 00       	push   $0x1342d
   10fee:	68 e0 70 01 00       	push   $0x170e0
   10ff3:	e8 31 fe ff ff       	call   10e29 <task_init>
   10ff8:	83 c4 20             	add    $0x20,%esp
    );

    task_manager.curr_task = &task_manager.idle_task;
   10ffb:	c7 05 00 70 01 00 e0 	movl   $0x170e0,0x17000
   11002:	70 01 00 
}
   11005:	90                   	nop
   11006:	c9                   	leave  
   11007:	c3                   	ret    

00011008 <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   11008:	55                   	push   %ebp
   11009:	89 e5                	mov    %esp,%ebp
   1100b:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1100e:	ba 9b 32 02 00       	mov    $0x2329b,%edx
   11013:	b8 c0 30 02 00       	mov    $0x230c0,%eax
   11018:	29 c2                	sub    %eax,%edx
   1101a:	89 d0                	mov    %edx,%eax
   1101c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1101f:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11026:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11029:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1102c:	72 1c                	jb     1104a <task_first_init+0x42>
   1102e:	68 37 34 01 00       	push   $0x13437
   11033:	68 68 34 01 00       	push   $0x13468
   11038:	68 a7 00 00 00       	push   $0xa7
   1103d:	68 e8 33 01 00       	push   $0x133e8
   11042:	e8 d3 1d 00 00       	call   12e1a <pannic>
   11047:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1104a:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", TASK_FLAGS_USER, (uint32_t)first_start, first_start + alloc_size);
   11051:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11054:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11057:	01 d0                	add    %edx,%eax
   11059:	83 ec 0c             	sub    $0xc,%esp
   1105c:	50                   	push   %eax
   1105d:	ff 75 ec             	pushl  -0x14(%ebp)
   11060:	6a 00                	push   $0x0
   11062:	68 4e 34 01 00       	push   $0x1344e
   11067:	68 28 70 01 00       	push   $0x17028
   1106c:	e8 b8 fd ff ff       	call   10e29 <task_init>
   11071:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   11074:	a1 dc 70 01 00       	mov    0x170dc,%eax
   11079:	0f b7 c0             	movzwl %ax,%eax
   1107c:	83 ec 0c             	sub    $0xc,%esp
   1107f:	50                   	push   %eax
   11080:	e8 f4 fb ff ff       	call   10c79 <write_tr>
   11085:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   11088:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   1108f:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11092:	a1 90 70 01 00       	mov    0x17090,%eax
   11097:	83 ec 0c             	sub    $0xc,%esp
   1109a:	50                   	push   %eax
   1109b:	e8 f0 fb ff ff       	call   10c90 <mmu_set_page_dir>
   110a0:	83 c4 10             	add    $0x10,%esp

    // 给该进程新开个一级页表，也就是类似于用户页表的东西
    // 并在这个一级页表里申请 alloc_size 大小的内存
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   110a3:	83 ec 04             	sub    $0x4,%esp
   110a6:	6a 07                	push   $0x7
   110a8:	ff 75 f0             	pushl  -0x10(%ebp)
   110ab:	ff 75 ec             	pushl  -0x14(%ebp)
   110ae:	e8 a8 f9 ff ff       	call   10a5b <memory_alloc_page_for>
   110b3:	83 c4 10             	add    $0x10,%esp

    // 把这段代码拷贝到上面生成的页表里
    // 相当于就是把内存搬运到 virtual 0x80000000+ 了
    kmemcpy((void*)first_start, s_first_task, copy_size);
   110b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
   110b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110bc:	83 ec 04             	sub    $0x4,%esp
   110bf:	52                   	push   %edx
   110c0:	68 c0 30 02 00       	push   $0x230c0
   110c5:	50                   	push   %eax
   110c6:	e8 9b 19 00 00       	call   12a66 <kmemcpy>
   110cb:	83 c4 10             	add    $0x10,%esp
}
   110ce:	90                   	nop
   110cf:	c9                   	leave  
   110d0:	c3                   	ret    

000110d1 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   110d1:	55                   	push   %ebp
   110d2:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   110d4:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   110d9:	5d                   	pop    %ebp
   110da:	c3                   	ret    

000110db <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   110db:	55                   	push   %ebp
   110dc:	89 e5                	mov    %esp,%ebp
   110de:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   110e1:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   110e8:	74 22                	je     1110c <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   110ea:	8b 45 08             	mov    0x8(%ebp),%eax
   110ed:	83 c0 28             	add    $0x28,%eax
   110f0:	83 ec 08             	sub    $0x8,%esp
   110f3:	50                   	push   %eax
   110f4:	68 04 70 01 00       	push   $0x17004
   110f9:	e8 e7 1d 00 00       	call   12ee5 <list_insert_back>
   110fe:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11101:	8b 45 08             	mov    0x8(%ebp),%eax
   11104:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1110a:	eb 01                	jmp    1110d <task_set_ready+0x32>
        return;
   1110c:	90                   	nop
}
   1110d:	c9                   	leave  
   1110e:	c3                   	ret    

0001110f <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   1110f:	55                   	push   %ebp
   11110:	89 e5                	mov    %esp,%ebp
   11112:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   11115:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   1111c:	74 19                	je     11137 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   1111e:	8b 45 08             	mov    0x8(%ebp),%eax
   11121:	83 c0 28             	add    $0x28,%eax
   11124:	83 ec 08             	sub    $0x8,%esp
   11127:	50                   	push   %eax
   11128:	68 04 70 01 00       	push   $0x17004
   1112d:	e8 8f 1e 00 00       	call   12fc1 <list_remove>
   11132:	83 c4 10             	add    $0x10,%esp
   11135:	eb 01                	jmp    11138 <task_set_blocked+0x29>
        return;
   11137:	90                   	nop
}
   11138:	c9                   	leave  
   11139:	c3                   	ret    

0001113a <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   1113a:	55                   	push   %ebp
   1113b:	89 e5                	mov    %esp,%ebp
   1113d:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   11140:	68 04 70 01 00       	push   $0x17004
   11145:	e8 07 fb ff ff       	call   10c51 <list_size>
   1114a:	83 c4 04             	add    $0x4,%esp
   1114d:	85 c0                	test   %eax,%eax
   1114f:	75 07                	jne    11158 <task_next_run+0x1e>
        return &task_manager.idle_task;
   11151:	b8 e0 70 01 00       	mov    $0x170e0,%eax
   11156:	eb 23                	jmp    1117b <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   11158:	68 04 70 01 00       	push   $0x17004
   1115d:	e8 fa fa ff ff       	call   10c5c <list_first>
   11162:	83 c4 04             	add    $0x4,%esp
   11165:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11168:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1116c:	74 08                	je     11176 <task_next_run+0x3c>
   1116e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11171:	83 e8 28             	sub    $0x28,%eax
   11174:	eb 05                	jmp    1117b <task_next_run+0x41>
   11176:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1117b:	c9                   	leave  
   1117c:	c3                   	ret    

0001117d <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   1117d:	55                   	push   %ebp
   1117e:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11180:	a1 00 70 01 00       	mov    0x17000,%eax
}
   11185:	5d                   	pop    %ebp
   11186:	c3                   	ret    

00011187 <sys_sched_yield>:

// 当前进程主动放弃CPU
int sys_sched_yield(void) {
   11187:	55                   	push   %ebp
   11188:	89 e5                	mov    %esp,%ebp
   1118a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1118d:	e8 16 0e 00 00       	call   11fa8 <irq_enter_protection>
   11192:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   11195:	83 ec 0c             	sub    $0xc,%esp
   11198:	68 04 70 01 00       	push   $0x17004
   1119d:	e8 af fa ff ff       	call   10c51 <list_size>
   111a2:	83 c4 10             	add    $0x10,%esp
   111a5:	83 f8 01             	cmp    $0x1,%eax
   111a8:	7e 29                	jle    111d3 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   111aa:	e8 ce ff ff ff       	call   1117d <task_current>
   111af:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   111b2:	83 ec 0c             	sub    $0xc,%esp
   111b5:	ff 75 f0             	pushl  -0x10(%ebp)
   111b8:	e8 52 ff ff ff       	call   1110f <task_set_blocked>
   111bd:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   111c0:	83 ec 0c             	sub    $0xc,%esp
   111c3:	ff 75 f0             	pushl  -0x10(%ebp)
   111c6:	e8 10 ff ff ff       	call   110db <task_set_ready>
   111cb:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   111ce:	e8 15 00 00 00       	call   111e8 <task_dispatch>
    }

    irq_leave_protection(state);
   111d3:	83 ec 0c             	sub    $0xc,%esp
   111d6:	ff 75 f4             	pushl  -0xc(%ebp)
   111d9:	e8 e2 0d 00 00       	call   11fc0 <irq_leave_protection>
   111de:	83 c4 10             	add    $0x10,%esp

    return 0;
   111e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111e6:	c9                   	leave  
   111e7:	c3                   	ret    

000111e8 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   111e8:	55                   	push   %ebp
   111e9:	89 e5                	mov    %esp,%ebp
   111eb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   111ee:	e8 b5 0d 00 00       	call   11fa8 <irq_enter_protection>
   111f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   111f6:	e8 3f ff ff ff       	call   1113a <task_next_run>
   111fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   111fe:	a1 00 70 01 00       	mov    0x17000,%eax
   11203:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11206:	74 2a                	je     11232 <task_dispatch+0x4a>
        task_t* from = task_current();
   11208:	e8 70 ff ff ff       	call   1117d <task_current>
   1120d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11210:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11213:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   11218:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1121b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   11221:	83 ec 08             	sub    $0x8,%esp
   11224:	ff 75 f0             	pushl  -0x10(%ebp)
   11227:	ff 75 ec             	pushl  -0x14(%ebp)
   1122a:	e8 f4 fc ff ff       	call   10f23 <task_switch_from_to>
   1122f:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   11232:	83 ec 0c             	sub    $0xc,%esp
   11235:	ff 75 f4             	pushl  -0xc(%ebp)
   11238:	e8 83 0d 00 00       	call   11fc0 <irq_leave_protection>
   1123d:	83 c4 10             	add    $0x10,%esp
}
   11240:	90                   	nop
   11241:	c9                   	leave  
   11242:	c3                   	ret    

00011243 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   11243:	55                   	push   %ebp
   11244:	89 e5                	mov    %esp,%ebp
   11246:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   11249:	e8 2f ff ff ff       	call   1117d <task_current>
   1124e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   11251:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11254:	8b 40 48             	mov    0x48(%eax),%eax
   11257:	8d 50 ff             	lea    -0x1(%eax),%edx
   1125a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1125d:	89 50 48             	mov    %edx,0x48(%eax)
   11260:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11263:	8b 40 48             	mov    0x48(%eax),%eax
   11266:	85 c0                	test   %eax,%eax
   11268:	75 2d                	jne    11297 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   1126a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1126d:	8b 50 44             	mov    0x44(%eax),%edx
   11270:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11273:	89 50 48             	mov    %edx,0x48(%eax)

        task_set_blocked(curr_task);
   11276:	83 ec 0c             	sub    $0xc,%esp
   11279:	ff 75 f0             	pushl  -0x10(%ebp)
   1127c:	e8 8e fe ff ff       	call   1110f <task_set_blocked>
   11281:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11284:	83 ec 0c             	sub    $0xc,%esp
   11287:	ff 75 f0             	pushl  -0x10(%ebp)
   1128a:	e8 4c fe ff ff       	call   110db <task_set_ready>
   1128f:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11292:	e8 51 ff ff ff       	call   111e8 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   11297:	83 ec 0c             	sub    $0xc,%esp
   1129a:	68 1c 70 01 00       	push   $0x1701c
   1129f:	e8 b8 f9 ff ff       	call   10c5c <list_first>
   112a4:	83 c4 10             	add    $0x10,%esp
   112a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   112aa:	eb 62                	jmp    1130e <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   112ac:	83 ec 0c             	sub    $0xc,%esp
   112af:	ff 75 f4             	pushl  -0xc(%ebp)
   112b2:	e8 8f f9 ff ff       	call   10c46 <list_node_next>
   112b7:	83 c4 10             	add    $0x10,%esp
   112ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   112bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112c1:	74 08                	je     112cb <task_time_tick+0x88>
   112c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112c6:	83 e8 28             	sub    $0x28,%eax
   112c9:	eb 05                	jmp    112d0 <task_time_tick+0x8d>
   112cb:	b8 00 00 00 00       	mov    $0x0,%eax
   112d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   112d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112d6:	8b 40 40             	mov    0x40(%eax),%eax
   112d9:	8d 50 ff             	lea    -0x1(%eax),%edx
   112dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112df:	89 50 40             	mov    %edx,0x40(%eax)
   112e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112e5:	8b 40 40             	mov    0x40(%eax),%eax
   112e8:	85 c0                	test   %eax,%eax
   112ea:	75 1c                	jne    11308 <task_time_tick+0xc5>
            task_set_wakeup(task);
   112ec:	83 ec 0c             	sub    $0xc,%esp
   112ef:	ff 75 e8             	pushl  -0x18(%ebp)
   112f2:	e8 56 00 00 00       	call   1134d <task_set_wakeup>
   112f7:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   112fa:	83 ec 0c             	sub    $0xc,%esp
   112fd:	ff 75 e8             	pushl  -0x18(%ebp)
   11300:	e8 d6 fd ff ff       	call   110db <task_set_ready>
   11305:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   11308:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1130b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   1130e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11312:	75 98                	jne    112ac <task_time_tick+0x69>
    }

    task_dispatch();
   11314:	e8 cf fe ff ff       	call   111e8 <task_dispatch>
}
   11319:	90                   	nop
   1131a:	c9                   	leave  
   1131b:	c3                   	ret    

0001131c <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   1131c:	55                   	push   %ebp
   1131d:	89 e5                	mov    %esp,%ebp
   1131f:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11322:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11326:	74 22                	je     1134a <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   11328:	8b 55 0c             	mov    0xc(%ebp),%edx
   1132b:	8b 45 08             	mov    0x8(%ebp),%eax
   1132e:	89 50 40             	mov    %edx,0x40(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   11331:	8b 45 08             	mov    0x8(%ebp),%eax
   11334:	83 c0 28             	add    $0x28,%eax
   11337:	83 ec 08             	sub    $0x8,%esp
   1133a:	50                   	push   %eax
   1133b:	68 1c 70 01 00       	push   $0x1701c
   11340:	e8 a0 1b 00 00       	call   12ee5 <list_insert_back>
   11345:	83 c4 10             	add    $0x10,%esp
   11348:	eb 01                	jmp    1134b <task_set_sleep+0x2f>
        return;
   1134a:	90                   	nop
}
   1134b:	c9                   	leave  
   1134c:	c3                   	ret    

0001134d <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   1134d:	55                   	push   %ebp
   1134e:	89 e5                	mov    %esp,%ebp
   11350:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11353:	8b 45 08             	mov    0x8(%ebp),%eax
   11356:	83 c0 28             	add    $0x28,%eax
   11359:	83 ec 08             	sub    $0x8,%esp
   1135c:	50                   	push   %eax
   1135d:	68 1c 70 01 00       	push   $0x1701c
   11362:	e8 5a 1c 00 00       	call   12fc1 <list_remove>
   11367:	83 c4 10             	add    $0x10,%esp
}
   1136a:	90                   	nop
   1136b:	c9                   	leave  
   1136c:	c3                   	ret    

0001136d <sys_sleep>:


void sys_sleep(uint32_t ms) {
   1136d:	55                   	push   %ebp
   1136e:	89 e5                	mov    %esp,%ebp
   11370:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11373:	e8 30 0c 00 00       	call   11fa8 <irq_enter_protection>
   11378:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   1137b:	a1 00 70 01 00       	mov    0x17000,%eax
   11380:	83 ec 0c             	sub    $0xc,%esp
   11383:	50                   	push   %eax
   11384:	e8 86 fd ff ff       	call   1110f <task_set_blocked>
   11389:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   1138c:	8b 45 08             	mov    0x8(%ebp),%eax
   1138f:	83 c0 09             	add    $0x9,%eax
   11392:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11397:	f7 e2                	mul    %edx
   11399:	c1 ea 03             	shr    $0x3,%edx
   1139c:	a1 00 70 01 00       	mov    0x17000,%eax
   113a1:	83 ec 08             	sub    $0x8,%esp
   113a4:	52                   	push   %edx
   113a5:	50                   	push   %eax
   113a6:	e8 71 ff ff ff       	call   1131c <task_set_sleep>
   113ab:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   113ae:	e8 35 fe ff ff       	call   111e8 <task_dispatch>

    irq_leave_protection(state);
   113b3:	83 ec 0c             	sub    $0xc,%esp
   113b6:	ff 75 f4             	pushl  -0xc(%ebp)
   113b9:	e8 02 0c 00 00       	call   11fc0 <irq_leave_protection>
   113be:	83 c4 10             	add    $0x10,%esp
}
   113c1:	90                   	nop
   113c2:	c9                   	leave  
   113c3:	c3                   	ret    

000113c4 <sys_getpid>:


int sys_getpid(void) {
   113c4:	55                   	push   %ebp
   113c5:	89 e5                	mov    %esp,%ebp
   113c7:	83 ec 10             	sub    $0x10,%esp
    task_t* task = task_current();
   113ca:	e8 ae fd ff ff       	call   1117d <task_current>
   113cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   113d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d5:	8b 40 24             	mov    0x24(%eax),%eax
}
   113d8:	c9                   	leave  
   113d9:	c3                   	ret    

000113da <sys_fork>:


int sys_fork(void) {
   113da:	55                   	push   %ebp
   113db:	89 e5                	mov    %esp,%ebp

    return -1;
   113dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   113e2:	5d                   	pop    %ebp
   113e3:	c3                   	ret    

000113e4 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   113e4:	55                   	push   %ebp
   113e5:	89 e5                	mov    %esp,%ebp
   113e7:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   113ea:	8b 45 08             	mov    0x8(%ebp),%eax
   113ed:	c1 e8 10             	shr    $0x10,%eax
   113f0:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   113f4:	8b 45 08             	mov    0x8(%ebp),%eax
   113f7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   113fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   113fe:	83 e8 01             	sub    $0x1,%eax
   11401:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   11405:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11409:	90                   	nop
   1140a:	c9                   	leave  
   1140b:	c3                   	ret    

0001140c <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1140c:	55                   	push   %ebp
   1140d:	89 e5                	mov    %esp,%ebp
   1140f:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   11412:	8b 45 0c             	mov    0xc(%ebp),%eax
   11415:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11418:	8b 45 08             	mov    0x8(%ebp),%eax
   1141b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1141e:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11421:	ff 28                	ljmp   *(%eax)
}
   11423:	90                   	nop
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   11426:	55                   	push   %ebp
   11427:	89 e5                	mov    %esp,%ebp
   11429:	83 ec 14             	sub    $0x14,%esp
   1142c:	8b 45 14             	mov    0x14(%ebp),%eax
   1142f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   11433:	8b 45 08             	mov    0x8(%ebp),%eax
   11436:	83 e0 f8             	and    $0xfffffff8,%eax
   11439:	05 a0 81 01 00       	add    $0x181a0,%eax
   1143e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   11441:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11448:	76 0f                	jbe    11459 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   1144a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11450:	8b 45 10             	mov    0x10(%ebp),%eax
   11453:	c1 e8 0c             	shr    $0xc,%eax
   11456:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   11459:	8b 45 10             	mov    0x10(%ebp),%eax
   1145c:	89 c2                	mov    %eax,%edx
   1145e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11461:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   11464:	8b 45 0c             	mov    0xc(%ebp),%eax
   11467:	89 c2                	mov    %eax,%edx
   11469:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1146c:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   11470:	8b 45 0c             	mov    0xc(%ebp),%eax
   11473:	c1 e8 10             	shr    $0x10,%eax
   11476:	89 c2                	mov    %eax,%edx
   11478:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1147b:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   1147e:	8b 45 10             	mov    0x10(%ebp),%eax
   11481:	c1 e8 10             	shr    $0x10,%eax
   11484:	c1 e0 08             	shl    $0x8,%eax
   11487:	66 25 00 0f          	and    $0xf00,%ax
   1148b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1148f:	89 c2                	mov    %eax,%edx
   11491:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11494:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149b:	c1 e8 18             	shr    $0x18,%eax
   1149e:	89 c2                	mov    %eax,%edx
   114a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114a3:	88 50 07             	mov    %dl,0x7(%eax)
}
   114a6:	90                   	nop
   114a7:	c9                   	leave  
   114a8:	c3                   	ret    

000114a9 <gate_desc_set>:


// 设置 Interrupt /Call Gate 表项
void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   114a9:	55                   	push   %ebp
   114aa:	89 e5                	mov    %esp,%ebp
   114ac:	83 ec 08             	sub    $0x8,%esp
   114af:	8b 55 0c             	mov    0xc(%ebp),%edx
   114b2:	8b 45 14             	mov    0x14(%ebp),%eax
   114b5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   114b9:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   114bd:	8b 45 10             	mov    0x10(%ebp),%eax
   114c0:	89 c2                	mov    %eax,%edx
   114c2:	8b 45 08             	mov    0x8(%ebp),%eax
   114c5:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   114c8:	8b 45 08             	mov    0x8(%ebp),%eax
   114cb:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114cf:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   114d3:	8b 45 08             	mov    0x8(%ebp),%eax
   114d6:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   114da:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   114de:	8b 45 10             	mov    0x10(%ebp),%eax
   114e1:	c1 e8 10             	shr    $0x10,%eax
   114e4:	89 c2                	mov    %eax,%edx
   114e6:	8b 45 08             	mov    0x8(%ebp),%eax
   114e9:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   114ed:	90                   	nop
   114ee:	c9                   	leave  
   114ef:	c3                   	ret    

000114f0 <init_gdt>:


void init_gdt(void) {
   114f0:	55                   	push   %ebp
   114f1:	89 e5                	mov    %esp,%ebp
   114f3:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   114f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   114fd:	eb 19                	jmp    11518 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   114ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11502:	c1 e0 03             	shl    $0x3,%eax
   11505:	6a 00                	push   $0x0
   11507:	6a 00                	push   $0x0
   11509:	6a 00                	push   $0x0
   1150b:	50                   	push   %eax
   1150c:	e8 15 ff ff ff       	call   11426 <segment_desc_set>
   11511:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11514:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11518:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1151f:	7e de                	jle    114ff <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11521:	68 92 40 00 00       	push   $0x4092
   11526:	6a ff                	push   $0xffffffff
   11528:	6a 00                	push   $0x0
   1152a:	6a 10                	push   $0x10
   1152c:	e8 f5 fe ff ff       	call   11426 <segment_desc_set>
   11531:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11534:	68 9a 40 00 00       	push   $0x409a
   11539:	6a ff                	push   $0xffffffff
   1153b:	6a 00                	push   $0x0
   1153d:	6a 08                	push   $0x8
   1153f:	e8 e2 fe ff ff       	call   11426 <segment_desc_set>
   11544:	83 c4 10             	add    $0x10,%esp

    // syscall 初始化。syscall gate DPL 要为3，这个描述符应该能被用户代码访问
    gate_desc_set((gate_desc_t*)(gdt_table + (SELECTOR_SYSCALL >> 3)), 
   11547:	ba d7 02 01 00       	mov    $0x102d7,%edx
   1154c:	b8 b8 81 01 00       	mov    $0x181b8,%eax
   11551:	68 05 ec 00 00       	push   $0xec05
   11556:	52                   	push   %edx
   11557:	6a 08                	push   $0x8
   11559:	50                   	push   %eax
   1155a:	e8 4a ff ff ff       	call   114a9 <gate_desc_set>
   1155f:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11562:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   11567:	68 00 08 00 00       	push   $0x800
   1156c:	50                   	push   %eax
   1156d:	e8 72 fe ff ff       	call   113e4 <lgdt>
   11572:	83 c4 08             	add    $0x8,%esp
}
   11575:	90                   	nop
   11576:	c9                   	leave  
   11577:	c3                   	ret    

00011578 <cpu_init>:


void cpu_init(void) {
   11578:	55                   	push   %ebp
   11579:	89 e5                	mov    %esp,%ebp
   1157b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   1157e:	83 ec 08             	sub    $0x8,%esp
   11581:	68 78 34 01 00       	push   $0x13478
   11586:	68 a0 89 01 00       	push   $0x189a0
   1158b:	e8 4b 0e 00 00       	call   123db <mutex_init>
   11590:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11593:	e8 58 ff ff ff       	call   114f0 <init_gdt>
}
   11598:	90                   	nop
   11599:	c9                   	leave  
   1159a:	c3                   	ret    

0001159b <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   1159b:	55                   	push   %ebp
   1159c:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   1159e:	8b 45 08             	mov    0x8(%ebp),%eax
   115a1:	6a 00                	push   $0x0
   115a3:	50                   	push   %eax
   115a4:	e8 63 fe ff ff       	call   1140c <far_jump>
   115a9:	83 c4 08             	add    $0x8,%esp
}
   115ac:	90                   	nop
   115ad:	c9                   	leave  
   115ae:	c3                   	ret    

000115af <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   115af:	55                   	push   %ebp
   115b0:	89 e5                	mov    %esp,%ebp
   115b2:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   115b5:	83 ec 0c             	sub    $0xc,%esp
   115b8:	68 a0 89 01 00       	push   $0x189a0
   115bd:	e8 5a 0e 00 00       	call   1241c <mutex_acquire>
   115c2:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   115c5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   115cc:	eb 36                	jmp    11604 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   115ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115d1:	c1 e0 03             	shl    $0x3,%eax
   115d4:	05 a0 81 01 00       	add    $0x181a0,%eax
   115d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   115dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115df:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   115e3:	66 85 c0             	test   %ax,%ax
   115e6:	75 18                	jne    11600 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   115e8:	83 ec 0c             	sub    $0xc,%esp
   115eb:	68 a0 89 01 00       	push   $0x189a0
   115f0:	e8 b5 0e 00 00       	call   124aa <mutex_release>
   115f5:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   115f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115fb:	c1 e0 03             	shl    $0x3,%eax
   115fe:	eb 22                	jmp    11622 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11600:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11604:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1160b:	7e c1                	jle    115ce <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   1160d:	83 ec 0c             	sub    $0xc,%esp
   11610:	68 a0 89 01 00       	push   $0x189a0
   11615:	e8 90 0e 00 00       	call   124aa <mutex_release>
   1161a:	83 c4 10             	add    $0x10,%esp

    return -1;
   1161d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11622:	c9                   	leave  
   11623:	c3                   	ret    

00011624 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   11624:	55                   	push   %ebp
   11625:	89 e5                	mov    %esp,%ebp
   11627:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   1162a:	83 ec 0c             	sub    $0xc,%esp
   1162d:	68 a0 89 01 00       	push   $0x189a0
   11632:	e8 e5 0d 00 00       	call   1241c <mutex_acquire>
   11637:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   1163a:	8b 45 08             	mov    0x8(%ebp),%eax
   1163d:	c1 e8 03             	shr    $0x3,%eax
   11640:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   11647:	00 00 00 

    mutex_release(&mutex);
   1164a:	83 ec 0c             	sub    $0xc,%esp
   1164d:	68 a0 89 01 00       	push   $0x189a0
   11652:	e8 53 0e 00 00       	call   124aa <mutex_release>
   11657:	83 c4 10             	add    $0x10,%esp
   1165a:	90                   	nop
   1165b:	c9                   	leave  
   1165c:	c3                   	ret    

0001165d <inb>:
static inline uint8_t inb(uint16_t port) {
   1165d:	55                   	push   %ebp
   1165e:	89 e5                	mov    %esp,%ebp
   11660:	83 ec 14             	sub    $0x14,%esp
   11663:	8b 45 08             	mov    0x8(%ebp),%eax
   11666:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1166a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1166e:	89 c2                	mov    %eax,%edx
   11670:	ec                   	in     (%dx),%al
   11671:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11674:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11678:	c9                   	leave  
   11679:	c3                   	ret    

0001167a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1167a:	55                   	push   %ebp
   1167b:	89 e5                	mov    %esp,%ebp
   1167d:	83 ec 08             	sub    $0x8,%esp
   11680:	8b 55 08             	mov    0x8(%ebp),%edx
   11683:	8b 45 0c             	mov    0xc(%ebp),%eax
   11686:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1168a:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1168d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11691:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11695:	ee                   	out    %al,(%dx)
}
   11696:	90                   	nop
   11697:	c9                   	leave  
   11698:	c3                   	ret    

00011699 <cli>:
static inline void cli(void) {
   11699:	55                   	push   %ebp
   1169a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   1169c:	fa                   	cli    
}
   1169d:	90                   	nop
   1169e:	5d                   	pop    %ebp
   1169f:	c3                   	ret    

000116a0 <sti>:
static inline void sti(void) {
   116a0:	55                   	push   %ebp
   116a1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   116a3:	fb                   	sti    
}
   116a4:	90                   	nop
   116a5:	5d                   	pop    %ebp
   116a6:	c3                   	ret    

000116a7 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   116a7:	55                   	push   %ebp
   116a8:	89 e5                	mov    %esp,%ebp
   116aa:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	c1 e8 10             	shr    $0x10,%eax
   116b3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   116b7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ba:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   116be:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c1:	83 e8 01             	sub    $0x1,%eax
   116c4:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   116c8:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   116cc:	90                   	nop
   116cd:	c9                   	leave  
   116ce:	c3                   	ret    

000116cf <read_cr2>:
static inline uint32_t read_cr2() {
   116cf:	55                   	push   %ebp
   116d0:	89 e5                	mov    %esp,%ebp
   116d2:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   116d5:	0f 20 d0             	mov    %cr2,%eax
   116d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   116db:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116de:	c9                   	leave  
   116df:	c3                   	ret    

000116e0 <hlt>:
static inline void hlt(void) {
   116e0:	55                   	push   %ebp
   116e1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   116e3:	f4                   	hlt    
}
   116e4:	90                   	nop
   116e5:	5d                   	pop    %ebp
   116e6:	c3                   	ret    

000116e7 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   116e7:	55                   	push   %ebp
   116e8:	89 e5                	mov    %esp,%ebp
   116ea:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   116ed:	9c                   	pushf  
   116ee:	58                   	pop    %eax
   116ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   116f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116f5:	c9                   	leave  
   116f6:	c3                   	ret    

000116f7 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   116f7:	55                   	push   %ebp
   116f8:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   116fa:	8b 45 08             	mov    0x8(%ebp),%eax
   116fd:	50                   	push   %eax
   116fe:	9d                   	popf   
}
   116ff:	90                   	nop
   11700:	5d                   	pop    %ebp
   11701:	c3                   	ret    

00011702 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   11702:	55                   	push   %ebp
   11703:	89 e5                	mov    %esp,%ebp
   11705:	57                   	push   %edi
   11706:	56                   	push   %esi
   11707:	53                   	push   %ebx
   11708:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   1170b:	8b 45 08             	mov    0x8(%ebp),%eax
   1170e:	8b 40 3c             	mov    0x3c(%eax),%eax
   11711:	83 e0 07             	and    $0x7,%eax
   11714:	85 c0                	test   %eax,%eax
   11716:	74 14                	je     1172c <dump_core_regs+0x2a>
        ss = frame->ds;
   11718:	8b 45 08             	mov    0x8(%ebp),%eax
   1171b:	8b 40 0c             	mov    0xc(%eax),%eax
   1171e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   11721:	8b 45 08             	mov    0x8(%ebp),%eax
   11724:	8b 40 1c             	mov    0x1c(%eax),%eax
   11727:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1172a:	eb 12                	jmp    1173e <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   1172c:	8b 45 08             	mov    0x8(%ebp),%eax
   1172f:	8b 40 48             	mov    0x48(%eax),%eax
   11732:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   11735:	8b 45 08             	mov    0x8(%ebp),%eax
   11738:	8b 40 44             	mov    0x44(%eax),%eax
   1173b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   1173e:	8b 45 08             	mov    0x8(%ebp),%eax
   11741:	8b 50 34             	mov    0x34(%eax),%edx
   11744:	8b 45 08             	mov    0x8(%ebp),%eax
   11747:	8b 40 30             	mov    0x30(%eax),%eax
   1174a:	83 ec 04             	sub    $0x4,%esp
   1174d:	52                   	push   %edx
   1174e:	50                   	push   %eax
   1174f:	68 84 34 01 00       	push   $0x13484
   11754:	e8 cb 19 00 00       	call   13124 <log_printf>
   11759:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   1175c:	8b 45 08             	mov    0x8(%ebp),%eax
   1175f:	8b 30                	mov    (%eax),%esi
   11761:	8b 45 08             	mov    0x8(%ebp),%eax
   11764:	8b 58 04             	mov    0x4(%eax),%ebx
   11767:	8b 45 08             	mov    0x8(%ebp),%eax
   1176a:	8b 48 08             	mov    0x8(%eax),%ecx
   1176d:	8b 45 08             	mov    0x8(%ebp),%eax
   11770:	8b 50 0c             	mov    0xc(%eax),%edx
   11773:	8b 45 08             	mov    0x8(%ebp),%eax
   11776:	8b 40 3c             	mov    0x3c(%eax),%eax
   11779:	83 ec 04             	sub    $0x4,%esp
   1177c:	56                   	push   %esi
   1177d:	53                   	push   %ebx
   1177e:	ff 75 e0             	pushl  -0x20(%ebp)
   11781:	51                   	push   %ecx
   11782:	52                   	push   %edx
   11783:	50                   	push   %eax
   11784:	68 9c 34 01 00       	push   $0x1349c
   11789:	e8 96 19 00 00       	call   13124 <log_printf>
   1178e:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   11791:	8b 45 08             	mov    0x8(%ebp),%eax
   11794:	8b 78 18             	mov    0x18(%eax),%edi
   11797:	8b 45 08             	mov    0x8(%ebp),%eax
   1179a:	8b 70 14             	mov    0x14(%eax),%esi
   1179d:	8b 45 08             	mov    0x8(%ebp),%eax
   117a0:	8b 58 10             	mov    0x10(%eax),%ebx
   117a3:	8b 45 08             	mov    0x8(%ebp),%eax
   117a6:	8b 48 24             	mov    0x24(%eax),%ecx
   117a9:	8b 45 08             	mov    0x8(%ebp),%eax
   117ac:	8b 50 20             	mov    0x20(%eax),%edx
   117af:	8b 45 08             	mov    0x8(%ebp),%eax
   117b2:	8b 40 2c             	mov    0x2c(%eax),%eax
   117b5:	ff 75 e4             	pushl  -0x1c(%ebp)
   117b8:	57                   	push   %edi
   117b9:	56                   	push   %esi
   117ba:	53                   	push   %ebx
   117bb:	51                   	push   %ecx
   117bc:	52                   	push   %edx
   117bd:	50                   	push   %eax
   117be:	68 c8 34 01 00       	push   $0x134c8
   117c3:	e8 5c 19 00 00       	call   13124 <log_printf>
   117c8:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   117cb:	8b 45 08             	mov    0x8(%ebp),%eax
   117ce:	8b 50 40             	mov    0x40(%eax),%edx
   117d1:	8b 45 08             	mov    0x8(%ebp),%eax
   117d4:	8b 40 38             	mov    0x38(%eax),%eax
   117d7:	83 ec 04             	sub    $0x4,%esp
   117da:	52                   	push   %edx
   117db:	50                   	push   %eax
   117dc:	68 01 35 01 00       	push   $0x13501
   117e1:	e8 3e 19 00 00       	call   13124 <log_printf>
   117e6:	83 c4 10             	add    $0x10,%esp
}
   117e9:	90                   	nop
   117ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
   117ed:	5b                   	pop    %ebx
   117ee:	5e                   	pop    %esi
   117ef:	5f                   	pop    %edi
   117f0:	5d                   	pop    %ebp
   117f1:	c3                   	ret    

000117f2 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   117f2:	55                   	push   %ebp
   117f3:	89 e5                	mov    %esp,%ebp
   117f5:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   117f8:	83 ec 0c             	sub    $0xc,%esp
   117fb:	68 18 35 01 00       	push   $0x13518
   11800:	e8 1f 19 00 00       	call   13124 <log_printf>
   11805:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   11808:	83 ec 08             	sub    $0x8,%esp
   1180b:	ff 75 0c             	pushl  0xc(%ebp)
   1180e:	68 43 35 01 00       	push   $0x13543
   11813:	e8 0c 19 00 00       	call   13124 <log_printf>
   11818:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1181b:	83 ec 0c             	sub    $0xc,%esp
   1181e:	ff 75 08             	pushl  0x8(%ebp)
   11821:	e8 dc fe ff ff       	call   11702 <dump_core_regs>
   11826:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11829:	e8 b2 fe ff ff       	call   116e0 <hlt>
   1182e:	eb f9                	jmp    11829 <do_default_handler+0x37>

00011830 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11830:	55                   	push   %ebp
   11831:	89 e5                	mov    %esp,%ebp
   11833:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   11836:	83 ec 08             	sub    $0x8,%esp
   11839:	68 55 35 01 00       	push   $0x13555
   1183e:	ff 75 08             	pushl  0x8(%ebp)
   11841:	e8 ac ff ff ff       	call   117f2 <do_default_handler>
   11846:	83 c4 10             	add    $0x10,%esp
}
   11849:	90                   	nop
   1184a:	c9                   	leave  
   1184b:	c3                   	ret    

0001184c <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   1184c:	55                   	push   %ebp
   1184d:	89 e5                	mov    %esp,%ebp
   1184f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   11852:	83 ec 08             	sub    $0x8,%esp
   11855:	68 67 35 01 00       	push   $0x13567
   1185a:	ff 75 08             	pushl  0x8(%ebp)
   1185d:	e8 90 ff ff ff       	call   117f2 <do_default_handler>
   11862:	83 c4 10             	add    $0x10,%esp
}
   11865:	90                   	nop
   11866:	c9                   	leave  
   11867:	c3                   	ret    

00011868 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11868:	55                   	push   %ebp
   11869:	89 e5                	mov    %esp,%ebp
   1186b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   1186e:	83 ec 08             	sub    $0x8,%esp
   11871:	68 81 35 01 00       	push   $0x13581
   11876:	ff 75 08             	pushl  0x8(%ebp)
   11879:	e8 74 ff ff ff       	call   117f2 <do_default_handler>
   1187e:	83 c4 10             	add    $0x10,%esp
}   
   11881:	90                   	nop
   11882:	c9                   	leave  
   11883:	c3                   	ret    

00011884 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   11884:	55                   	push   %ebp
   11885:	89 e5                	mov    %esp,%ebp
   11887:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   1188a:	83 ec 08             	sub    $0x8,%esp
   1188d:	68 9c 35 01 00       	push   $0x1359c
   11892:	ff 75 08             	pushl  0x8(%ebp)
   11895:	e8 58 ff ff ff       	call   117f2 <do_default_handler>
   1189a:	83 c4 10             	add    $0x10,%esp
}   
   1189d:	90                   	nop
   1189e:	c9                   	leave  
   1189f:	c3                   	ret    

000118a0 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   118a0:	55                   	push   %ebp
   118a1:	89 e5                	mov    %esp,%ebp
   118a3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   118a6:	83 ec 08             	sub    $0x8,%esp
   118a9:	68 b5 35 01 00       	push   $0x135b5
   118ae:	ff 75 08             	pushl  0x8(%ebp)
   118b1:	e8 3c ff ff ff       	call   117f2 <do_default_handler>
   118b6:	83 c4 10             	add    $0x10,%esp
}   
   118b9:	90                   	nop
   118ba:	c9                   	leave  
   118bb:	c3                   	ret    

000118bc <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   118bc:	55                   	push   %ebp
   118bd:	89 e5                	mov    %esp,%ebp
   118bf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   118c2:	83 ec 08             	sub    $0x8,%esp
   118c5:	68 cb 35 01 00       	push   $0x135cb
   118ca:	ff 75 08             	pushl  0x8(%ebp)
   118cd:	e8 20 ff ff ff       	call   117f2 <do_default_handler>
   118d2:	83 c4 10             	add    $0x10,%esp
}   
   118d5:	90                   	nop
   118d6:	c9                   	leave  
   118d7:	c3                   	ret    

000118d8 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   118d8:	55                   	push   %ebp
   118d9:	89 e5                	mov    %esp,%ebp
   118db:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   118de:	83 ec 08             	sub    $0x8,%esp
   118e1:	68 df 35 01 00       	push   $0x135df
   118e6:	ff 75 08             	pushl  0x8(%ebp)
   118e9:	e8 04 ff ff ff       	call   117f2 <do_default_handler>
   118ee:	83 c4 10             	add    $0x10,%esp
}   
   118f1:	90                   	nop
   118f2:	c9                   	leave  
   118f3:	c3                   	ret    

000118f4 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   118f4:	55                   	push   %ebp
   118f5:	89 e5                	mov    %esp,%ebp
   118f7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   118fa:	83 ec 08             	sub    $0x8,%esp
   118fd:	68 fd 35 01 00       	push   $0x135fd
   11902:	ff 75 08             	pushl  0x8(%ebp)
   11905:	e8 e8 fe ff ff       	call   117f2 <do_default_handler>
   1190a:	83 c4 10             	add    $0x10,%esp
}   
   1190d:	90                   	nop
   1190e:	c9                   	leave  
   1190f:	c3                   	ret    

00011910 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11910:	55                   	push   %ebp
   11911:	89 e5                	mov    %esp,%ebp
   11913:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   11916:	83 ec 08             	sub    $0x8,%esp
   11919:	68 17 36 01 00       	push   $0x13617
   1191e:	ff 75 08             	pushl  0x8(%ebp)
   11921:	e8 cc fe ff ff       	call   117f2 <do_default_handler>
   11926:	83 c4 10             	add    $0x10,%esp
}   
   11929:	90                   	nop
   1192a:	c9                   	leave  
   1192b:	c3                   	ret    

0001192c <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   1192c:	55                   	push   %ebp
   1192d:	89 e5                	mov    %esp,%ebp
   1192f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11932:	83 ec 08             	sub    $0x8,%esp
   11935:	68 33 36 01 00       	push   $0x13633
   1193a:	ff 75 08             	pushl  0x8(%ebp)
   1193d:	e8 b0 fe ff ff       	call   117f2 <do_default_handler>
   11942:	83 c4 10             	add    $0x10,%esp
}   
   11945:	90                   	nop
   11946:	c9                   	leave  
   11947:	c3                   	ret    

00011948 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11948:	55                   	push   %ebp
   11949:	89 e5                	mov    %esp,%ebp
   1194b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   1194e:	83 ec 08             	sub    $0x8,%esp
   11951:	68 4b 36 01 00       	push   $0x1364b
   11956:	ff 75 08             	pushl  0x8(%ebp)
   11959:	e8 94 fe ff ff       	call   117f2 <do_default_handler>
   1195e:	83 c4 10             	add    $0x10,%esp
}   
   11961:	90                   	nop
   11962:	c9                   	leave  
   11963:	c3                   	ret    

00011964 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   11964:	55                   	push   %ebp
   11965:	89 e5                	mov    %esp,%ebp
   11967:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   1196a:	83 ec 08             	sub    $0x8,%esp
   1196d:	68 64 36 01 00       	push   $0x13664
   11972:	ff 75 08             	pushl  0x8(%ebp)
   11975:	e8 78 fe ff ff       	call   117f2 <do_default_handler>
   1197a:	83 c4 10             	add    $0x10,%esp
}   
   1197d:	90                   	nop
   1197e:	c9                   	leave  
   1197f:	c3                   	ret    

00011980 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   11980:	55                   	push   %ebp
   11981:	89 e5                	mov    %esp,%ebp
   11983:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   11986:	83 ec 08             	sub    $0x8,%esp
   11989:	68 84 36 01 00       	push   $0x13684
   1198e:	ff 75 08             	pushl  0x8(%ebp)
   11991:	e8 5c fe ff ff       	call   117f2 <do_default_handler>
   11996:	83 c4 10             	add    $0x10,%esp
}   
   11999:	90                   	nop
   1199a:	c9                   	leave  
   1199b:	c3                   	ret    

0001199c <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   1199c:	55                   	push   %ebp
   1199d:	89 e5                	mov    %esp,%ebp
   1199f:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   119a2:	83 ec 0c             	sub    $0xc,%esp
   119a5:	68 a4 36 01 00       	push   $0x136a4
   119aa:	e8 75 17 00 00       	call   13124 <log_printf>
   119af:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   119b2:	83 ec 0c             	sub    $0xc,%esp
   119b5:	68 c8 36 01 00       	push   $0x136c8
   119ba:	e8 65 17 00 00       	call   13124 <log_printf>
   119bf:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   119c2:	8b 45 08             	mov    0x8(%ebp),%eax
   119c5:	8b 40 34             	mov    0x34(%eax),%eax
   119c8:	83 e0 01             	and    $0x1,%eax
   119cb:	85 c0                	test   %eax,%eax
   119cd:	74 12                	je     119e1 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   119cf:	83 ec 0c             	sub    $0xc,%esp
   119d2:	68 f4 36 01 00       	push   $0x136f4
   119d7:	e8 48 17 00 00       	call   13124 <log_printf>
   119dc:	83 c4 10             	add    $0x10,%esp
   119df:	eb 10                	jmp    119f1 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   119e1:	83 ec 0c             	sub    $0xc,%esp
   119e4:	68 70 37 01 00       	push   $0x13770
   119e9:	e8 36 17 00 00       	call   13124 <log_printf>
   119ee:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   119f1:	8b 45 08             	mov    0x8(%ebp),%eax
   119f4:	8b 40 34             	mov    0x34(%eax),%eax
   119f7:	83 e0 02             	and    $0x2,%eax
   119fa:	85 c0                	test   %eax,%eax
   119fc:	74 12                	je     11a10 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   119fe:	83 ec 0c             	sub    $0xc,%esp
   11a01:	68 c8 37 01 00       	push   $0x137c8
   11a06:	e8 19 17 00 00       	call   13124 <log_printf>
   11a0b:	83 c4 10             	add    $0x10,%esp
   11a0e:	eb 10                	jmp    11a20 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   11a10:	83 ec 0c             	sub    $0xc,%esp
   11a13:	68 14 38 01 00       	push   $0x13814
   11a18:	e8 07 17 00 00       	call   13124 <log_printf>
   11a1d:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11a20:	8b 45 08             	mov    0x8(%ebp),%eax
   11a23:	8b 40 34             	mov    0x34(%eax),%eax
   11a26:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11a2b:	83 ec 08             	sub    $0x8,%esp
   11a2e:	50                   	push   %eax
   11a2f:	68 40 38 01 00       	push   $0x13840
   11a34:	e8 eb 16 00 00       	call   13124 <log_printf>
   11a39:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11a3c:	83 ec 0c             	sub    $0xc,%esp
   11a3f:	ff 75 08             	pushl  0x8(%ebp)
   11a42:	e8 bb fc ff ff       	call   11702 <dump_core_regs>
   11a47:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11a4a:	e8 91 fc ff ff       	call   116e0 <hlt>
   11a4f:	eb f9                	jmp    11a4a <do_handler_general_protection+0xae>

00011a51 <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   11a51:	55                   	push   %ebp
   11a52:	89 e5                	mov    %esp,%ebp
   11a54:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11a57:	83 ec 0c             	sub    $0xc,%esp
   11a5a:	68 a4 36 01 00       	push   $0x136a4
   11a5f:	e8 c0 16 00 00       	call   13124 <log_printf>
   11a64:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   11a67:	83 ec 0c             	sub    $0xc,%esp
   11a6a:	68 52 38 01 00       	push   $0x13852
   11a6f:	e8 b0 16 00 00       	call   13124 <log_printf>
   11a74:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   11a77:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7a:	8b 40 34             	mov    0x34(%eax),%eax
   11a7d:	83 e0 01             	and    $0x1,%eax
   11a80:	85 c0                	test   %eax,%eax
   11a82:	74 18                	je     11a9c <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   11a84:	e8 46 fc ff ff       	call   116cf <read_cr2>
   11a89:	83 ec 08             	sub    $0x8,%esp
   11a8c:	50                   	push   %eax
   11a8d:	68 70 38 01 00       	push   $0x13870
   11a92:	e8 8d 16 00 00       	call   13124 <log_printf>
   11a97:	83 c4 10             	add    $0x10,%esp
   11a9a:	eb 16                	jmp    11ab2 <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   11a9c:	e8 2e fc ff ff       	call   116cf <read_cr2>
   11aa1:	83 ec 08             	sub    $0x8,%esp
   11aa4:	50                   	push   %eax
   11aa5:	68 98 38 01 00       	push   $0x13898
   11aaa:	e8 75 16 00 00       	call   13124 <log_printf>
   11aaf:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11ab2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab5:	8b 40 34             	mov    0x34(%eax),%eax
   11ab8:	83 e0 02             	and    $0x2,%eax
   11abb:	85 c0                	test   %eax,%eax
   11abd:	74 12                	je     11ad1 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   11abf:	83 ec 0c             	sub    $0xc,%esp
   11ac2:	68 c8 38 01 00       	push   $0x138c8
   11ac7:	e8 58 16 00 00       	call   13124 <log_printf>
   11acc:	83 c4 10             	add    $0x10,%esp
   11acf:	eb 10                	jmp    11ae1 <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   11ad1:	83 ec 0c             	sub    $0xc,%esp
   11ad4:	68 f4 38 01 00       	push   $0x138f4
   11ad9:	e8 46 16 00 00       	call   13124 <log_printf>
   11ade:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11ae1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae4:	8b 40 34             	mov    0x34(%eax),%eax
   11ae7:	83 e0 02             	and    $0x2,%eax
   11aea:	85 c0                	test   %eax,%eax
   11aec:	74 12                	je     11b00 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   11aee:	83 ec 0c             	sub    $0xc,%esp
   11af1:	68 20 39 01 00       	push   $0x13920
   11af6:	e8 29 16 00 00       	call   13124 <log_printf>
   11afb:	83 c4 10             	add    $0x10,%esp
   11afe:	eb 10                	jmp    11b10 <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   11b00:	83 ec 0c             	sub    $0xc,%esp
   11b03:	68 4c 39 01 00       	push   $0x1394c
   11b08:	e8 17 16 00 00       	call   13124 <log_printf>
   11b0d:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11b10:	83 ec 0c             	sub    $0xc,%esp
   11b13:	ff 75 08             	pushl  0x8(%ebp)
   11b16:	e8 e7 fb ff ff       	call   11702 <dump_core_regs>
   11b1b:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11b1e:	e8 bd fb ff ff       	call   116e0 <hlt>
   11b23:	eb f9                	jmp    11b1e <do_handler_page_fault+0xcd>

00011b25 <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11b25:	55                   	push   %ebp
   11b26:	89 e5                	mov    %esp,%ebp
   11b28:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11b2b:	83 ec 08             	sub    $0x8,%esp
   11b2e:	68 74 39 01 00       	push   $0x13974
   11b33:	ff 75 08             	pushl  0x8(%ebp)
   11b36:	e8 b7 fc ff ff       	call   117f2 <do_default_handler>
   11b3b:	83 c4 10             	add    $0x10,%esp
}   
   11b3e:	90                   	nop
   11b3f:	c9                   	leave  
   11b40:	c3                   	ret    

00011b41 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11b41:	55                   	push   %ebp
   11b42:	89 e5                	mov    %esp,%ebp
   11b44:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11b47:	83 ec 08             	sub    $0x8,%esp
   11b4a:	68 94 39 01 00       	push   $0x13994
   11b4f:	ff 75 08             	pushl  0x8(%ebp)
   11b52:	e8 9b fc ff ff       	call   117f2 <do_default_handler>
   11b57:	83 c4 10             	add    $0x10,%esp
}   
   11b5a:	90                   	nop
   11b5b:	c9                   	leave  
   11b5c:	c3                   	ret    

00011b5d <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11b5d:	55                   	push   %ebp
   11b5e:	89 e5                	mov    %esp,%ebp
   11b60:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11b63:	83 ec 08             	sub    $0x8,%esp
   11b66:	68 ae 39 01 00       	push   $0x139ae
   11b6b:	ff 75 08             	pushl  0x8(%ebp)
   11b6e:	e8 7f fc ff ff       	call   117f2 <do_default_handler>
   11b73:	83 c4 10             	add    $0x10,%esp
}   
   11b76:	90                   	nop
   11b77:	c9                   	leave  
   11b78:	c3                   	ret    

00011b79 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11b79:	55                   	push   %ebp
   11b7a:	89 e5                	mov    %esp,%ebp
   11b7c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11b7f:	83 ec 08             	sub    $0x8,%esp
   11b82:	68 c8 39 01 00       	push   $0x139c8
   11b87:	ff 75 08             	pushl  0x8(%ebp)
   11b8a:	e8 63 fc ff ff       	call   117f2 <do_default_handler>
   11b8f:	83 c4 10             	add    $0x10,%esp
}
   11b92:	90                   	nop
   11b93:	c9                   	leave  
   11b94:	c3                   	ret    

00011b95 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11b95:	55                   	push   %ebp
   11b96:	89 e5                	mov    %esp,%ebp
   11b98:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11b9b:	83 ec 08             	sub    $0x8,%esp
   11b9e:	68 f4 39 01 00       	push   $0x139f4
   11ba3:	ff 75 08             	pushl  0x8(%ebp)
   11ba6:	e8 47 fc ff ff       	call   117f2 <do_default_handler>
   11bab:	83 c4 10             	add    $0x10,%esp
}
   11bae:	90                   	nop
   11baf:	c9                   	leave  
   11bb0:	c3                   	ret    

00011bb1 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11bb1:	55                   	push   %ebp
   11bb2:	89 e5                	mov    %esp,%ebp
   11bb4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11bb7:	83 ec 08             	sub    $0x8,%esp
   11bba:	68 18 3a 01 00       	push   $0x13a18
   11bbf:	ff 75 08             	pushl  0x8(%ebp)
   11bc2:	e8 2b fc ff ff       	call   117f2 <do_default_handler>
   11bc7:	83 c4 10             	add    $0x10,%esp
}
   11bca:	90                   	nop
   11bcb:	c9                   	leave  
   11bcc:	c3                   	ret    

00011bcd <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11bcd:	55                   	push   %ebp
   11bce:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11bd0:	6a 11                	push   $0x11
   11bd2:	6a 20                	push   $0x20
   11bd4:	e8 a1 fa ff ff       	call   1167a <outb>
   11bd9:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11bdc:	6a 20                	push   $0x20
   11bde:	6a 21                	push   $0x21
   11be0:	e8 95 fa ff ff       	call   1167a <outb>
   11be5:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11be8:	6a 04                	push   $0x4
   11bea:	6a 21                	push   $0x21
   11bec:	e8 89 fa ff ff       	call   1167a <outb>
   11bf1:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11bf4:	6a 01                	push   $0x1
   11bf6:	6a 21                	push   $0x21
   11bf8:	e8 7d fa ff ff       	call   1167a <outb>
   11bfd:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11c00:	6a 11                	push   $0x11
   11c02:	68 a0 00 00 00       	push   $0xa0
   11c07:	e8 6e fa ff ff       	call   1167a <outb>
   11c0c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11c0f:	6a 28                	push   $0x28
   11c11:	68 a1 00 00 00       	push   $0xa1
   11c16:	e8 5f fa ff ff       	call   1167a <outb>
   11c1b:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11c1e:	6a 02                	push   $0x2
   11c20:	68 a1 00 00 00       	push   $0xa1
   11c25:	e8 50 fa ff ff       	call   1167a <outb>
   11c2a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11c2d:	6a 01                	push   $0x1
   11c2f:	68 a1 00 00 00       	push   $0xa1
   11c34:	e8 41 fa ff ff       	call   1167a <outb>
   11c39:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11c3c:	68 fb 00 00 00       	push   $0xfb
   11c41:	6a 21                	push   $0x21
   11c43:	e8 32 fa ff ff       	call   1167a <outb>
   11c48:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11c4b:	68 ff 00 00 00       	push   $0xff
   11c50:	68 a1 00 00 00       	push   $0xa1
   11c55:	e8 20 fa ff ff       	call   1167a <outb>
   11c5a:	83 c4 08             	add    $0x8,%esp
}
   11c5d:	90                   	nop
   11c5e:	c9                   	leave  
   11c5f:	c3                   	ret    

00011c60 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11c60:	55                   	push   %ebp
   11c61:	89 e5                	mov    %esp,%ebp
   11c63:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11c66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c6d:	eb 25                	jmp    11c94 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11c6f:	ba 26 00 01 00       	mov    $0x10026,%edx
   11c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c77:	c1 e0 03             	shl    $0x3,%eax
   11c7a:	05 00 8a 01 00       	add    $0x18a00,%eax
   11c7f:	68 00 8e 00 00       	push   $0x8e00
   11c84:	52                   	push   %edx
   11c85:	6a 08                	push   $0x8
   11c87:	50                   	push   %eax
   11c88:	e8 1c f8 ff ff       	call   114a9 <gate_desc_set>
   11c8d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11c90:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c94:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11c98:	7e d5                	jle    11c6f <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11c9a:	83 ec 08             	sub    $0x8,%esp
   11c9d:	68 45 00 01 00       	push   $0x10045
   11ca2:	6a 00                	push   $0x0
   11ca4:	e8 77 01 00 00       	call   11e20 <irq_install>
   11ca9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11cac:	83 ec 08             	sub    $0x8,%esp
   11caf:	68 64 00 01 00       	push   $0x10064
   11cb4:	6a 01                	push   $0x1
   11cb6:	e8 65 01 00 00       	call   11e20 <irq_install>
   11cbb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11cbe:	83 ec 08             	sub    $0x8,%esp
   11cc1:	68 83 00 01 00       	push   $0x10083
   11cc6:	6a 02                	push   $0x2
   11cc8:	e8 53 01 00 00       	call   11e20 <irq_install>
   11ccd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11cd0:	83 ec 08             	sub    $0x8,%esp
   11cd3:	68 a2 00 01 00       	push   $0x100a2
   11cd8:	6a 03                	push   $0x3
   11cda:	e8 41 01 00 00       	call   11e20 <irq_install>
   11cdf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   11ce2:	83 ec 08             	sub    $0x8,%esp
   11ce5:	68 c1 00 01 00       	push   $0x100c1
   11cea:	6a 04                	push   $0x4
   11cec:	e8 2f 01 00 00       	call   11e20 <irq_install>
   11cf1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11cf4:	83 ec 08             	sub    $0x8,%esp
   11cf7:	68 e0 00 01 00       	push   $0x100e0
   11cfc:	6a 05                	push   $0x5
   11cfe:	e8 1d 01 00 00       	call   11e20 <irq_install>
   11d03:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11d06:	83 ec 08             	sub    $0x8,%esp
   11d09:	68 ff 00 01 00       	push   $0x100ff
   11d0e:	6a 06                	push   $0x6
   11d10:	e8 0b 01 00 00       	call   11e20 <irq_install>
   11d15:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11d18:	83 ec 08             	sub    $0x8,%esp
   11d1b:	68 1e 01 01 00       	push   $0x1011e
   11d20:	6a 07                	push   $0x7
   11d22:	e8 f9 00 00 00       	call   11e20 <irq_install>
   11d27:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11d2a:	83 ec 08             	sub    $0x8,%esp
   11d2d:	68 3d 01 01 00       	push   $0x1013d
   11d32:	6a 08                	push   $0x8
   11d34:	e8 e7 00 00 00       	call   11e20 <irq_install>
   11d39:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11d3c:	83 ec 08             	sub    $0x8,%esp
   11d3f:	68 5a 01 01 00       	push   $0x1015a
   11d44:	6a 0a                	push   $0xa
   11d46:	e8 d5 00 00 00       	call   11e20 <irq_install>
   11d4b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11d4e:	83 ec 08             	sub    $0x8,%esp
   11d51:	68 77 01 01 00       	push   $0x10177
   11d56:	6a 0b                	push   $0xb
   11d58:	e8 c3 00 00 00       	call   11e20 <irq_install>
   11d5d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11d60:	83 ec 08             	sub    $0x8,%esp
   11d63:	68 94 01 01 00       	push   $0x10194
   11d68:	6a 0c                	push   $0xc
   11d6a:	e8 b1 00 00 00       	call   11e20 <irq_install>
   11d6f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11d72:	83 ec 08             	sub    $0x8,%esp
   11d75:	68 b3 01 01 00       	push   $0x101b3
   11d7a:	6a 0d                	push   $0xd
   11d7c:	e8 9f 00 00 00       	call   11e20 <irq_install>
   11d81:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11d84:	83 ec 08             	sub    $0x8,%esp
   11d87:	68 d0 01 01 00       	push   $0x101d0
   11d8c:	6a 0e                	push   $0xe
   11d8e:	e8 8d 00 00 00       	call   11e20 <irq_install>
   11d93:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11d96:	83 ec 08             	sub    $0x8,%esp
   11d99:	68 ed 01 01 00       	push   $0x101ed
   11d9e:	6a 10                	push   $0x10
   11da0:	e8 7b 00 00 00       	call   11e20 <irq_install>
   11da5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11da8:	83 ec 08             	sub    $0x8,%esp
   11dab:	68 0c 02 01 00       	push   $0x1020c
   11db0:	6a 11                	push   $0x11
   11db2:	e8 69 00 00 00       	call   11e20 <irq_install>
   11db7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11dba:	83 ec 08             	sub    $0x8,%esp
   11dbd:	68 29 02 01 00       	push   $0x10229
   11dc2:	6a 12                	push   $0x12
   11dc4:	e8 57 00 00 00       	call   11e20 <irq_install>
   11dc9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11dcc:	83 ec 08             	sub    $0x8,%esp
   11dcf:	68 48 02 01 00       	push   $0x10248
   11dd4:	6a 13                	push   $0x13
   11dd6:	e8 45 00 00 00       	call   11e20 <irq_install>
   11ddb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11dde:	83 ec 08             	sub    $0x8,%esp
   11de1:	68 67 02 01 00       	push   $0x10267
   11de6:	6a 14                	push   $0x14
   11de8:	e8 33 00 00 00       	call   11e20 <irq_install>
   11ded:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11df0:	83 ec 08             	sub    $0x8,%esp
   11df3:	68 86 02 01 00       	push   $0x10286
   11df8:	6a 15                	push   $0x15
   11dfa:	e8 21 00 00 00       	call   11e20 <irq_install>
   11dff:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11e02:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11e07:	83 ec 08             	sub    $0x8,%esp
   11e0a:	68 00 04 00 00       	push   $0x400
   11e0f:	50                   	push   %eax
   11e10:	e8 92 f8 ff ff       	call   116a7 <lidt>
   11e15:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11e18:	e8 b0 fd ff ff       	call   11bcd <init_pic>
}
   11e1d:	90                   	nop
   11e1e:	c9                   	leave  
   11e1f:	c3                   	ret    

00011e20 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11e20:	55                   	push   %ebp
   11e21:	89 e5                	mov    %esp,%ebp
   11e23:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11e26:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11e2a:	7e 07                	jle    11e33 <irq_install+0x13>
        return -1;
   11e2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e31:	eb 20                	jmp    11e53 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11e33:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e36:	8b 55 08             	mov    0x8(%ebp),%edx
   11e39:	c1 e2 03             	shl    $0x3,%edx
   11e3c:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11e42:	68 00 8e 00 00       	push   $0x8e00
   11e47:	50                   	push   %eax
   11e48:	6a 08                	push   $0x8
   11e4a:	52                   	push   %edx
   11e4b:	e8 59 f6 ff ff       	call   114a9 <gate_desc_set>
   11e50:	83 c4 10             	add    $0x10,%esp
}
   11e53:	c9                   	leave  
   11e54:	c3                   	ret    

00011e55 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11e55:	55                   	push   %ebp
   11e56:	89 e5                	mov    %esp,%ebp
   11e58:	53                   	push   %ebx
   11e59:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11e5c:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e60:	7e 78                	jle    11eda <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11e62:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11e66:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e6a:	7f 32                	jg     11e9e <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11e6c:	6a 21                	push   $0x21
   11e6e:	e8 ea f7 ff ff       	call   1165d <inb>
   11e73:	83 c4 04             	add    $0x4,%esp
   11e76:	89 c2                	mov    %eax,%edx
   11e78:	8b 45 08             	mov    0x8(%ebp),%eax
   11e7b:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e80:	89 c1                	mov    %eax,%ecx
   11e82:	d3 e3                	shl    %cl,%ebx
   11e84:	89 d8                	mov    %ebx,%eax
   11e86:	f7 d0                	not    %eax
   11e88:	21 d0                	and    %edx,%eax
   11e8a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11e8d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e91:	50                   	push   %eax
   11e92:	6a 21                	push   $0x21
   11e94:	e8 e1 f7 ff ff       	call   1167a <outb>
   11e99:	83 c4 08             	add    $0x8,%esp
   11e9c:	eb 3d                	jmp    11edb <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11e9e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11ea2:	68 a1 00 00 00       	push   $0xa1
   11ea7:	e8 b1 f7 ff ff       	call   1165d <inb>
   11eac:	83 c4 04             	add    $0x4,%esp
   11eaf:	89 c2                	mov    %eax,%edx
   11eb1:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb4:	bb 01 00 00 00       	mov    $0x1,%ebx
   11eb9:	89 c1                	mov    %eax,%ecx
   11ebb:	d3 e3                	shl    %cl,%ebx
   11ebd:	89 d8                	mov    %ebx,%eax
   11ebf:	f7 d0                	not    %eax
   11ec1:	21 d0                	and    %edx,%eax
   11ec3:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11ec6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11eca:	50                   	push   %eax
   11ecb:	68 a1 00 00 00       	push   $0xa1
   11ed0:	e8 a5 f7 ff ff       	call   1167a <outb>
   11ed5:	83 c4 08             	add    $0x8,%esp
   11ed8:	eb 01                	jmp    11edb <irq_enable+0x86>
        return;
   11eda:	90                   	nop
    }
}
   11edb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11ede:	c9                   	leave  
   11edf:	c3                   	ret    

00011ee0 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11ee0:	55                   	push   %ebp
   11ee1:	89 e5                	mov    %esp,%ebp
   11ee3:	53                   	push   %ebx
   11ee4:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11ee7:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11eeb:	7e 74                	jle    11f61 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11eed:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11ef1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ef5:	7f 30                	jg     11f27 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11ef7:	6a 21                	push   $0x21
   11ef9:	e8 5f f7 ff ff       	call   1165d <inb>
   11efe:	83 c4 04             	add    $0x4,%esp
   11f01:	89 c3                	mov    %eax,%ebx
   11f03:	8b 45 08             	mov    0x8(%ebp),%eax
   11f06:	ba 01 00 00 00       	mov    $0x1,%edx
   11f0b:	89 c1                	mov    %eax,%ecx
   11f0d:	d3 e2                	shl    %cl,%edx
   11f0f:	89 d0                	mov    %edx,%eax
   11f11:	09 d8                	or     %ebx,%eax
   11f13:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11f16:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11f1a:	50                   	push   %eax
   11f1b:	6a 21                	push   $0x21
   11f1d:	e8 58 f7 ff ff       	call   1167a <outb>
   11f22:	83 c4 08             	add    $0x8,%esp
   11f25:	eb 3b                	jmp    11f62 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11f27:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11f2b:	68 a1 00 00 00       	push   $0xa1
   11f30:	e8 28 f7 ff ff       	call   1165d <inb>
   11f35:	83 c4 04             	add    $0x4,%esp
   11f38:	89 c3                	mov    %eax,%ebx
   11f3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3d:	ba 01 00 00 00       	mov    $0x1,%edx
   11f42:	89 c1                	mov    %eax,%ecx
   11f44:	d3 e2                	shl    %cl,%edx
   11f46:	89 d0                	mov    %edx,%eax
   11f48:	09 d8                	or     %ebx,%eax
   11f4a:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11f4d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11f51:	50                   	push   %eax
   11f52:	68 a1 00 00 00       	push   $0xa1
   11f57:	e8 1e f7 ff ff       	call   1167a <outb>
   11f5c:	83 c4 08             	add    $0x8,%esp
   11f5f:	eb 01                	jmp    11f62 <irq_disable+0x82>
        return;
   11f61:	90                   	nop
    }
}
   11f62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f65:	c9                   	leave  
   11f66:	c3                   	ret    

00011f67 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11f67:	55                   	push   %ebp
   11f68:	89 e5                	mov    %esp,%ebp
    cli();
   11f6a:	e8 2a f7 ff ff       	call   11699 <cli>
}
   11f6f:	90                   	nop
   11f70:	5d                   	pop    %ebp
   11f71:	c3                   	ret    

00011f72 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11f72:	55                   	push   %ebp
   11f73:	89 e5                	mov    %esp,%ebp
    sti();
   11f75:	e8 26 f7 ff ff       	call   116a0 <sti>
}
   11f7a:	90                   	nop
   11f7b:	5d                   	pop    %ebp
   11f7c:	c3                   	ret    

00011f7d <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11f7d:	55                   	push   %ebp
   11f7e:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11f80:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11f84:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11f88:	7e 0f                	jle    11f99 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11f8a:	6a 20                	push   $0x20
   11f8c:	68 a0 00 00 00       	push   $0xa0
   11f91:	e8 e4 f6 ff ff       	call   1167a <outb>
   11f96:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11f99:	6a 20                	push   $0x20
   11f9b:	6a 20                	push   $0x20
   11f9d:	e8 d8 f6 ff ff       	call   1167a <outb>
   11fa2:	83 c4 08             	add    $0x8,%esp
}
   11fa5:	90                   	nop
   11fa6:	c9                   	leave  
   11fa7:	c3                   	ret    

00011fa8 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11fa8:	55                   	push   %ebp
   11fa9:	89 e5                	mov    %esp,%ebp
   11fab:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11fae:	e8 34 f7 ff ff       	call   116e7 <read_eflags>
   11fb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11fb6:	e8 ac ff ff ff       	call   11f67 <irq_disable_global>
    return state;
   11fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11fbe:	c9                   	leave  
   11fbf:	c3                   	ret    

00011fc0 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11fc0:	55                   	push   %ebp
   11fc1:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11fc3:	ff 75 08             	pushl  0x8(%ebp)
   11fc6:	e8 2c f7 ff ff       	call   116f7 <write_eflags>
   11fcb:	83 c4 04             	add    $0x4,%esp
   11fce:	90                   	nop
   11fcf:	c9                   	leave  
   11fd0:	c3                   	ret    

00011fd1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11fd1:	55                   	push   %ebp
   11fd2:	89 e5                	mov    %esp,%ebp
   11fd4:	83 ec 08             	sub    $0x8,%esp
   11fd7:	8b 55 08             	mov    0x8(%ebp),%edx
   11fda:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fdd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11fe1:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11fe4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11fe8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11fec:	ee                   	out    %al,(%dx)
}
   11fed:	90                   	nop
   11fee:	c9                   	leave  
   11fef:	c3                   	ret    

00011ff0 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11ff0:	55                   	push   %ebp
   11ff1:	89 e5                	mov    %esp,%ebp
   11ff3:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11ff6:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11ffb:	83 c0 01             	add    $0x1,%eax
   11ffe:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   12003:	83 ec 0c             	sub    $0xc,%esp
   12006:	6a 20                	push   $0x20
   12008:	e8 70 ff ff ff       	call   11f7d <pic_send_eoi>
   1200d:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   12010:	e8 2e f2 ff ff       	call   11243 <task_time_tick>
}
   12015:	90                   	nop
   12016:	c9                   	leave  
   12017:	c3                   	ret    

00012018 <init_pit>:


static void init_pit(void) {
   12018:	55                   	push   %ebp
   12019:	89 e5                	mov    %esp,%ebp
   1201b:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   1201e:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   12025:	6a 36                	push   $0x36
   12027:	6a 43                	push   $0x43
   12029:	e8 a3 ff ff ff       	call   11fd1 <outb>
   1202e:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   12031:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12034:	0f b6 c0             	movzbl %al,%eax
   12037:	50                   	push   %eax
   12038:	6a 40                	push   $0x40
   1203a:	e8 92 ff ff ff       	call   11fd1 <outb>
   1203f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   12042:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12045:	c1 e8 08             	shr    $0x8,%eax
   12048:	0f b6 c0             	movzbl %al,%eax
   1204b:	50                   	push   %eax
   1204c:	6a 40                	push   $0x40
   1204e:	e8 7e ff ff ff       	call   11fd1 <outb>
   12053:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   12056:	83 ec 08             	sub    $0x8,%esp
   12059:	68 a3 02 01 00       	push   $0x102a3
   1205e:	6a 20                	push   $0x20
   12060:	e8 bb fd ff ff       	call   11e20 <irq_install>
   12065:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   12068:	83 ec 0c             	sub    $0xc,%esp
   1206b:	6a 20                	push   $0x20
   1206d:	e8 e3 fd ff ff       	call   11e55 <irq_enable>
   12072:	83 c4 10             	add    $0x10,%esp
}
   12075:	90                   	nop
   12076:	c9                   	leave  
   12077:	c3                   	ret    

00012078 <timer_init>:

void timer_init(void) {
   12078:	55                   	push   %ebp
   12079:	89 e5                	mov    %esp,%ebp
   1207b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1207e:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   12085:	00 00 00 
    init_pit();
   12088:	e8 8b ff ff ff       	call   12018 <init_pit>
   1208d:	90                   	nop
   1208e:	c9                   	leave  
   1208f:	c3                   	ret    

00012090 <list_size>:
static inline int list_size(list_t* list) {
   12090:	55                   	push   %ebp
   12091:	89 e5                	mov    %esp,%ebp
    return list->count;
   12093:	8b 45 08             	mov    0x8(%ebp),%eax
   12096:	8b 40 08             	mov    0x8(%eax),%eax
}
   12099:	5d                   	pop    %ebp
   1209a:	c3                   	ret    

0001209b <list_first>:
static inline list_node_t* list_first(list_t* list) {
   1209b:	55                   	push   %ebp
   1209c:	89 e5                	mov    %esp,%ebp
    return list->first;
   1209e:	8b 45 08             	mov    0x8(%ebp),%eax
   120a1:	8b 00                	mov    (%eax),%eax
}
   120a3:	5d                   	pop    %ebp
   120a4:	c3                   	ret    

000120a5 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   120a5:	55                   	push   %ebp
   120a6:	89 e5                	mov    %esp,%ebp
    return list->last;
   120a8:	8b 45 08             	mov    0x8(%ebp),%eax
   120ab:	8b 40 04             	mov    0x4(%eax),%eax
}
   120ae:	5d                   	pop    %ebp
   120af:	c3                   	ret    

000120b0 <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   120b0:	55                   	push   %ebp
   120b1:	89 e5                	mov    %esp,%ebp
   120b3:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   120b6:	8b 45 08             	mov    0x8(%ebp),%eax
   120b9:	8b 40 50             	mov    0x50(%eax),%eax
   120bc:	85 c0                	test   %eax,%eax
   120be:	75 19                	jne    120d9 <kernel_init+0x29>
   120c0:	68 40 3a 01 00       	push   $0x13a40
   120c5:	68 50 3b 01 00       	push   $0x13b50
   120ca:	6a 12                	push   $0x12
   120cc:	68 64 3a 01 00       	push   $0x13a64
   120d1:	e8 44 0d 00 00       	call   12e1a <pannic>
   120d6:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   120d9:	90                   	nop


    log_init();
   120da:	e8 a3 0f 00 00       	call   13082 <log_init>

    memory_init(boot_info);
   120df:	83 ec 0c             	sub    $0xc,%esp
   120e2:	ff 75 08             	pushl  0x8(%ebp)
   120e5:	e8 bf e7 ff ff       	call   108a9 <memory_init>
   120ea:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   120ed:	e8 86 f4 ff ff       	call   11578 <cpu_init>


    irq_init();
   120f2:	e8 69 fb ff ff       	call   11c60 <irq_init>
    timer_init();
   120f7:	e8 7c ff ff ff       	call   12078 <timer_init>

    task_manager_init();
   120fc:	e8 4a ee ff ff       	call   10f4b <task_manager_init>
}
   12101:	90                   	nop
   12102:	c9                   	leave  
   12103:	c3                   	ret    

00012104 <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   12104:	55                   	push   %ebp
   12105:	89 e5                	mov    %esp,%ebp
   12107:	56                   	push   %esi
   12108:	53                   	push   %ebx
   12109:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   1210c:	83 ec 0c             	sub    $0xc,%esp
   1210f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12112:	50                   	push   %eax
   12113:	e8 4b 0d 00 00       	call   12e63 <list_init>
   12118:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   1211b:	83 ec 0c             	sub    $0xc,%esp
   1211e:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12121:	50                   	push   %eax
   12122:	e8 69 ff ff ff       	call   12090 <list_size>
   12127:	83 c4 10             	add    $0x10,%esp
   1212a:	89 c6                	mov    %eax,%esi
   1212c:	83 ec 0c             	sub    $0xc,%esp
   1212f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12132:	50                   	push   %eax
   12133:	e8 6d ff ff ff       	call   120a5 <list_last>
   12138:	83 c4 10             	add    $0x10,%esp
   1213b:	89 c3                	mov    %eax,%ebx
   1213d:	83 ec 0c             	sub    $0xc,%esp
   12140:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12143:	50                   	push   %eax
   12144:	e8 52 ff ff ff       	call   1209b <list_first>
   12149:	83 c4 10             	add    $0x10,%esp
   1214c:	56                   	push   %esi
   1214d:	53                   	push   %ebx
   1214e:	50                   	push   %eax
   1214f:	68 ac 3a 01 00       	push   $0x13aac
   12154:	e8 cb 0f 00 00       	call   13124 <log_printf>
   12159:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   1215c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12163:	eb 3b                	jmp    121a0 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   12165:	8d 45 a8             	lea    -0x58(%ebp),%eax
   12168:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1216b:	c1 e2 03             	shl    $0x3,%edx
   1216e:	01 d0                	add    %edx,%eax
   12170:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   12173:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12176:	83 ec 04             	sub    $0x4,%esp
   12179:	50                   	push   %eax
   1217a:	ff 75 f4             	pushl  -0xc(%ebp)
   1217d:	68 d5 3a 01 00       	push   $0x13ad5
   12182:	e8 9d 0f 00 00       	call   13124 <log_printf>
   12187:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   1218a:	83 ec 08             	sub    $0x8,%esp
   1218d:	ff 75 dc             	pushl  -0x24(%ebp)
   12190:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12193:	50                   	push   %eax
   12194:	e8 ed 0c 00 00       	call   12e86 <list_insert_front>
   12199:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   1219c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   121a0:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   121a4:	7e bf                	jle    12165 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   121a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   121ad:	eb 33                	jmp    121e2 <link_test+0xde>
        list_remove_front(&list);
   121af:	83 ec 0c             	sub    $0xc,%esp
   121b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121b5:	50                   	push   %eax
   121b6:	e8 8d 0d 00 00       	call   12f48 <list_remove_front>
   121bb:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   121be:	83 ec 0c             	sub    $0xc,%esp
   121c1:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121c4:	50                   	push   %eax
   121c5:	e8 c6 fe ff ff       	call   12090 <list_size>
   121ca:	83 c4 10             	add    $0x10,%esp
   121cd:	83 ec 08             	sub    $0x8,%esp
   121d0:	50                   	push   %eax
   121d1:	68 dd 3a 01 00       	push   $0x13add
   121d6:	e8 49 0f 00 00       	call   13124 <log_printf>
   121db:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   121de:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121e2:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   121e6:	7e c7                	jle    121af <link_test+0xab>
    }

    list_init(&list);
   121e8:	83 ec 0c             	sub    $0xc,%esp
   121eb:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121ee:	50                   	push   %eax
   121ef:	e8 6f 0c 00 00       	call   12e63 <list_init>
   121f4:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   121f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   121fe:	eb 3b                	jmp    1223b <link_test+0x137>
        list_node_t* node = &nodes[i];
   12200:	8d 45 a8             	lea    -0x58(%ebp),%eax
   12203:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12206:	c1 e2 03             	shl    $0x3,%edx
   12209:	01 d0                	add    %edx,%eax
   1220b:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   1220e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12211:	83 ec 04             	sub    $0x4,%esp
   12214:	50                   	push   %eax
   12215:	ff 75 ec             	pushl  -0x14(%ebp)
   12218:	68 d5 3a 01 00       	push   $0x13ad5
   1221d:	e8 02 0f 00 00       	call   13124 <log_printf>
   12222:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   12225:	83 ec 08             	sub    $0x8,%esp
   12228:	ff 75 e0             	pushl  -0x20(%ebp)
   1222b:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1222e:	50                   	push   %eax
   1222f:	e8 b1 0c 00 00       	call   12ee5 <list_insert_back>
   12234:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12237:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1223b:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1223f:	7e bf                	jle    12200 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   12241:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   12248:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   1224f:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   12256:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   1225d:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12260:	83 c0 04             	add    $0x4,%eax
   12263:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   12266:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1226a:	74 08                	je     12274 <link_test+0x170>
   1226c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1226f:	83 e8 04             	sub    $0x4,%eax
   12272:	eb 05                	jmp    12279 <link_test+0x175>
   12274:	b8 00 00 00 00       	mov    $0x0,%eax
   12279:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   1227c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1227f:	8b 00                	mov    (%eax),%eax
   12281:	3d 56 34 12 00       	cmp    $0x123456,%eax
   12286:	74 10                	je     12298 <link_test+0x194>
        log_printf("error!");
   12288:	83 ec 0c             	sub    $0xc,%esp
   1228b:	68 e2 3a 01 00       	push   $0x13ae2
   12290:	e8 8f 0e 00 00       	call   13124 <log_printf>
   12295:	83 c4 10             	add    $0x10,%esp
    }

}
   12298:	90                   	nop
   12299:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1229c:	5b                   	pop    %ebx
   1229d:	5e                   	pop    %esi
   1229e:	5d                   	pop    %ebp
   1229f:	c3                   	ret    

000122a0 <move_to_first_task>:


void move_to_first_task(void) {
   122a0:	55                   	push   %ebp
   122a1:	89 e5                	mov    %esp,%ebp
   122a3:	56                   	push   %esi
   122a4:	53                   	push   %ebx
   122a5:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   122a8:	e8 d0 ee ff ff       	call   1117d <task_current>
   122ad:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   122b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   122b4:	75 19                	jne    122cf <move_to_first_task+0x2f>
   122b6:	68 e9 3a 01 00       	push   $0x13ae9
   122bb:	68 5c 3b 01 00       	push   $0x13b5c
   122c0:	6a 68                	push   $0x68
   122c2:	68 64 3a 01 00       	push   $0x13a64
   122c7:	e8 4e 0b 00 00       	call   12e1a <pannic>
   122cc:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   122cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122d2:	83 c0 4c             	add    $0x4c,%eax
   122d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"        // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   122d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122db:	8b 40 50             	mov    0x50(%eax),%eax
   122de:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122e1:	8b 52 38             	mov    0x38(%edx),%edx
   122e4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   122e7:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   122ea:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   122ed:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   122f0:	8b 75 f0             	mov    -0x10(%ebp),%esi
   122f3:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   122f6:	50                   	push   %eax
   122f7:	52                   	push   %edx
   122f8:	51                   	push   %ecx
   122f9:	53                   	push   %ebx
   122fa:	56                   	push   %esi
   122fb:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   122fc:	90                   	nop
   122fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12300:	5b                   	pop    %ebx
   12301:	5e                   	pop    %esi
   12302:	5d                   	pop    %ebp
   12303:	c3                   	ret    

00012304 <test_task1>:



static void test_task1(void) {
   12304:	55                   	push   %ebp
   12305:	89 e5                	mov    %esp,%ebp
   12307:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1230a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task1: %d", count);
   12311:	83 ec 08             	sub    $0x8,%esp
   12314:	ff 75 f4             	pushl  -0xc(%ebp)
   12317:	68 f3 3a 01 00       	push   $0x13af3
   1231c:	e8 03 0e 00 00       	call   13124 <log_printf>
   12321:	83 c4 10             	add    $0x10,%esp
        count++;
   12324:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   12328:	83 ec 0c             	sub    $0xc,%esp
   1232b:	68 e8 03 00 00       	push   $0x3e8
   12330:	e8 38 f0 ff ff       	call   1136d <sys_sleep>
   12335:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task1: %d", count);
   12338:	eb d7                	jmp    12311 <test_task1+0xd>

0001233a <test_task2>:
    }
}


static void test_task2(void) {
   1233a:	55                   	push   %ebp
   1233b:	89 e5                	mov    %esp,%ebp
   1233d:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12340:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task2: %d", count);
   12347:	83 ec 08             	sub    $0x8,%esp
   1234a:	ff 75 f4             	pushl  -0xc(%ebp)
   1234d:	68 02 3b 01 00       	push   $0x13b02
   12352:	e8 cd 0d 00 00       	call   13124 <log_printf>
   12357:	83 c4 10             	add    $0x10,%esp
        count++;
   1235a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   1235e:	83 ec 0c             	sub    $0xc,%esp
   12361:	68 e8 03 00 00       	push   $0x3e8
   12366:	e8 02 f0 ff ff       	call   1136d <sys_sleep>
   1236b:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task2: %d", count);
   1236e:	eb d7                	jmp    12347 <test_task2+0xd>

00012370 <init_main>:
static task_t task1;
static task_t task2;
static uint32_t stack1[MEM_PAGE_SIZE];
static uint32_t stack2[MEM_PAGE_SIZE];

void init_main(void) {
   12370:	55                   	push   %ebp
   12371:	89 e5                	mov    %esp,%ebp
   12373:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();    
    log_printf("Kernel is running ...");
   12376:	83 ec 0c             	sub    $0xc,%esp
   12379:	68 11 3b 01 00       	push   $0x13b11
   1237e:	e8 a1 0d 00 00       	call   13124 <log_printf>
   12383:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   12386:	83 ec 04             	sub    $0x4,%esp
   12389:	68 27 3b 01 00       	push   $0x13b27
   1238e:	68 2c 3b 01 00       	push   $0x13b2c
   12393:	68 32 3b 01 00       	push   $0x13b32
   12398:	e8 87 0d 00 00       	call   13124 <log_printf>
   1239d:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   123a0:	83 ec 0c             	sub    $0xc,%esp
   123a3:	6a 61                	push   $0x61
   123a5:	68 56 34 12 00       	push   $0x123456
   123aa:	6a 85                	push   $0xffffff85
   123ac:	68 39 30 00 00       	push   $0x3039
   123b1:	68 41 3b 01 00       	push   $0x13b41
   123b6:	e8 69 0d 00 00       	call   13124 <log_printf>
   123bb:	83 c4 20             	add    $0x20,%esp
    
    // task_init(&task1, "test_task1", TASK_FLAGS_SYSTEM, (uint32_t)test_task1, (uint32_t)&stack1[MEM_PAGE_SIZE]);
    // task_init(&task2, "test_task2", TASK_FLAGS_SYSTEM, (uint32_t)test_task2, (uint32_t)&stack2[MEM_PAGE_SIZE]);


    sys_sched_yield();
   123be:	e8 c4 ed ff ff       	call   11187 <sys_sched_yield>

    // while (1);

    task_first_init();
   123c3:	e8 40 ec ff ff       	call   11008 <task_first_init>
    move_to_first_task();
   123c8:	e8 d3 fe ff ff       	call   122a0 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   123cd:	90                   	nop
   123ce:	c9                   	leave  
   123cf:	c3                   	ret    

000123d0 <list_size>:
static inline int list_size(list_t* list) {
   123d0:	55                   	push   %ebp
   123d1:	89 e5                	mov    %esp,%ebp
    return list->count;
   123d3:	8b 45 08             	mov    0x8(%ebp),%eax
   123d6:	8b 40 08             	mov    0x8(%eax),%eax
}
   123d9:	5d                   	pop    %ebp
   123da:	c3                   	ret    

000123db <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   123db:	55                   	push   %ebp
   123dc:	89 e5                	mov    %esp,%ebp
   123de:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   123e1:	8b 45 08             	mov    0x8(%ebp),%eax
   123e4:	83 ec 08             	sub    $0x8,%esp
   123e7:	ff 75 0c             	pushl  0xc(%ebp)
   123ea:	50                   	push   %eax
   123eb:	e8 0a 05 00 00       	call   128fa <kstrcpy>
   123f0:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   123f3:	8b 45 08             	mov    0x8(%ebp),%eax
   123f6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   123fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12400:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   12407:	8b 45 08             	mov    0x8(%ebp),%eax
   1240a:	83 c0 48             	add    $0x48,%eax
   1240d:	83 ec 0c             	sub    $0xc,%esp
   12410:	50                   	push   %eax
   12411:	e8 4d 0a 00 00       	call   12e63 <list_init>
   12416:	83 c4 10             	add    $0x10,%esp
}
   12419:	90                   	nop
   1241a:	c9                   	leave  
   1241b:	c3                   	ret    

0001241c <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   1241c:	55                   	push   %ebp
   1241d:	89 e5                	mov    %esp,%ebp
   1241f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12422:	e8 81 fb ff ff       	call   11fa8 <irq_enter_protection>
   12427:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   1242a:	e8 4e ed ff ff       	call   1117d <task_current>
   1242f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   12432:	8b 45 08             	mov    0x8(%ebp),%eax
   12435:	8b 40 44             	mov    0x44(%eax),%eax
   12438:	85 c0                	test   %eax,%eax
   1243a:	75 15                	jne    12451 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   1243c:	8b 45 08             	mov    0x8(%ebp),%eax
   1243f:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   12446:	8b 45 08             	mov    0x8(%ebp),%eax
   12449:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1244c:	89 50 40             	mov    %edx,0x40(%eax)
   1244f:	eb 48                	jmp    12499 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   12451:	8b 45 08             	mov    0x8(%ebp),%eax
   12454:	8b 40 40             	mov    0x40(%eax),%eax
   12457:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1245a:	75 11                	jne    1246d <mutex_acquire+0x51>
        mutex->locked_count++;
   1245c:	8b 45 08             	mov    0x8(%ebp),%eax
   1245f:	8b 40 44             	mov    0x44(%eax),%eax
   12462:	8d 50 01             	lea    0x1(%eax),%edx
   12465:	8b 45 08             	mov    0x8(%ebp),%eax
   12468:	89 50 44             	mov    %edx,0x44(%eax)
   1246b:	eb 2c                	jmp    12499 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   1246d:	83 ec 0c             	sub    $0xc,%esp
   12470:	ff 75 f0             	pushl  -0x10(%ebp)
   12473:	e8 97 ec ff ff       	call   1110f <task_set_blocked>
   12478:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   1247b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1247e:	8d 50 38             	lea    0x38(%eax),%edx
   12481:	8b 45 08             	mov    0x8(%ebp),%eax
   12484:	83 c0 48             	add    $0x48,%eax
   12487:	83 ec 08             	sub    $0x8,%esp
   1248a:	52                   	push   %edx
   1248b:	50                   	push   %eax
   1248c:	e8 54 0a 00 00       	call   12ee5 <list_insert_back>
   12491:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12494:	e8 4f ed ff ff       	call   111e8 <task_dispatch>
    }

    irq_leave_protection(state);
   12499:	83 ec 0c             	sub    $0xc,%esp
   1249c:	ff 75 f4             	pushl  -0xc(%ebp)
   1249f:	e8 1c fb ff ff       	call   11fc0 <irq_leave_protection>
   124a4:	83 c4 10             	add    $0x10,%esp
}
   124a7:	90                   	nop
   124a8:	c9                   	leave  
   124a9:	c3                   	ret    

000124aa <mutex_release>:

void mutex_release(mutex_t* mutex) {
   124aa:	55                   	push   %ebp
   124ab:	89 e5                	mov    %esp,%ebp
   124ad:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   124b0:	e8 f3 fa ff ff       	call   11fa8 <irq_enter_protection>
   124b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   124b8:	e8 c0 ec ff ff       	call   1117d <task_current>
   124bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   124c0:	8b 45 08             	mov    0x8(%ebp),%eax
   124c3:	8b 40 40             	mov    0x40(%eax),%eax
   124c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   124c9:	0f 85 8a 00 00 00    	jne    12559 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   124cf:	8b 45 08             	mov    0x8(%ebp),%eax
   124d2:	8b 40 44             	mov    0x44(%eax),%eax
   124d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   124d8:	8b 45 08             	mov    0x8(%ebp),%eax
   124db:	89 50 44             	mov    %edx,0x44(%eax)
   124de:	8b 45 08             	mov    0x8(%ebp),%eax
   124e1:	8b 40 44             	mov    0x44(%eax),%eax
   124e4:	85 c0                	test   %eax,%eax
   124e6:	75 71                	jne    12559 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   124e8:	8b 45 08             	mov    0x8(%ebp),%eax
   124eb:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   124f2:	8b 45 08             	mov    0x8(%ebp),%eax
   124f5:	83 c0 48             	add    $0x48,%eax
   124f8:	83 ec 0c             	sub    $0xc,%esp
   124fb:	50                   	push   %eax
   124fc:	e8 cf fe ff ff       	call   123d0 <list_size>
   12501:	83 c4 10             	add    $0x10,%esp
   12504:	85 c0                	test   %eax,%eax
   12506:	74 51                	je     12559 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   12508:	8b 45 08             	mov    0x8(%ebp),%eax
   1250b:	83 c0 48             	add    $0x48,%eax
   1250e:	83 ec 0c             	sub    $0xc,%esp
   12511:	50                   	push   %eax
   12512:	e8 31 0a 00 00       	call   12f48 <list_remove_front>
   12517:	83 c4 10             	add    $0x10,%esp
   1251a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   1251d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12521:	74 08                	je     1252b <mutex_release+0x81>
   12523:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12526:	83 e8 38             	sub    $0x38,%eax
   12529:	eb 05                	jmp    12530 <mutex_release+0x86>
   1252b:	b8 00 00 00 00       	mov    $0x0,%eax
   12530:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12533:	83 ec 0c             	sub    $0xc,%esp
   12536:	ff 75 e8             	pushl  -0x18(%ebp)
   12539:	e8 9d eb ff ff       	call   110db <task_set_ready>
   1253e:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12541:	8b 45 08             	mov    0x8(%ebp),%eax
   12544:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12547:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   1254a:	8b 45 08             	mov    0x8(%ebp),%eax
   1254d:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   12554:	e8 8f ec ff ff       	call   111e8 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   12559:	83 ec 0c             	sub    $0xc,%esp
   1255c:	ff 75 f4             	pushl  -0xc(%ebp)
   1255f:	e8 5c fa ff ff       	call   11fc0 <irq_leave_protection>
   12564:	83 c4 10             	add    $0x10,%esp
   12567:	90                   	nop
   12568:	c9                   	leave  
   12569:	c3                   	ret    

0001256a <list_size>:
static inline int list_size(list_t* list) {
   1256a:	55                   	push   %ebp
   1256b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1256d:	8b 45 08             	mov    0x8(%ebp),%eax
   12570:	8b 40 08             	mov    0x8(%eax),%eax
}
   12573:	5d                   	pop    %ebp
   12574:	c3                   	ret    

00012575 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   12575:	55                   	push   %ebp
   12576:	89 e5                	mov    %esp,%ebp
   12578:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1257b:	8b 45 08             	mov    0x8(%ebp),%eax
   1257e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12581:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   12583:	8b 45 08             	mov    0x8(%ebp),%eax
   12586:	83 c0 04             	add    $0x4,%eax
   12589:	83 ec 0c             	sub    $0xc,%esp
   1258c:	50                   	push   %eax
   1258d:	e8 d1 08 00 00       	call   12e63 <list_init>
   12592:	83 c4 10             	add    $0x10,%esp
}
   12595:	90                   	nop
   12596:	c9                   	leave  
   12597:	c3                   	ret    

00012598 <sem_wait>:


void sem_wait(sem_t* sem) {
   12598:	55                   	push   %ebp
   12599:	89 e5                	mov    %esp,%ebp
   1259b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1259e:	e8 05 fa ff ff       	call   11fa8 <irq_enter_protection>
   125a3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 进程获得了一个信号，且不为0
    if (sem->count > 0) {
   125a6:	8b 45 08             	mov    0x8(%ebp),%eax
   125a9:	8b 00                	mov    (%eax),%eax
   125ab:	85 c0                	test   %eax,%eax
   125ad:	7e 0f                	jle    125be <sem_wait+0x26>
        sem->count--;
   125af:	8b 45 08             	mov    0x8(%ebp),%eax
   125b2:	8b 00                	mov    (%eax),%eax
   125b4:	8d 50 ff             	lea    -0x1(%eax),%edx
   125b7:	8b 45 08             	mov    0x8(%ebp),%eax
   125ba:	89 10                	mov    %edx,(%eax)
   125bc:	eb 34                	jmp    125f2 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   125be:	e8 ba eb ff ff       	call   1117d <task_current>
   125c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   125c6:	83 ec 0c             	sub    $0xc,%esp
   125c9:	ff 75 f0             	pushl  -0x10(%ebp)
   125cc:	e8 3e eb ff ff       	call   1110f <task_set_blocked>
   125d1:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   125d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125d7:	8d 50 38             	lea    0x38(%eax),%edx
   125da:	8b 45 08             	mov    0x8(%ebp),%eax
   125dd:	83 c0 04             	add    $0x4,%eax
   125e0:	83 ec 08             	sub    $0x8,%esp
   125e3:	52                   	push   %edx
   125e4:	50                   	push   %eax
   125e5:	e8 fb 08 00 00       	call   12ee5 <list_insert_back>
   125ea:	83 c4 10             	add    $0x10,%esp
        
        task_dispatch();
   125ed:	e8 f6 eb ff ff       	call   111e8 <task_dispatch>
    }

    irq_leave_protection(state);
   125f2:	83 ec 0c             	sub    $0xc,%esp
   125f5:	ff 75 f4             	pushl  -0xc(%ebp)
   125f8:	e8 c3 f9 ff ff       	call   11fc0 <irq_leave_protection>
   125fd:	83 c4 10             	add    $0x10,%esp
}
   12600:	90                   	nop
   12601:	c9                   	leave  
   12602:	c3                   	ret    

00012603 <sem_notify>:


void sem_notify(sem_t* sem) {
   12603:	55                   	push   %ebp
   12604:	89 e5                	mov    %esp,%ebp
   12606:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12609:	e8 9a f9 ff ff       	call   11fa8 <irq_enter_protection>
   1260e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   12611:	8b 45 08             	mov    0x8(%ebp),%eax
   12614:	83 c0 04             	add    $0x4,%eax
   12617:	83 ec 0c             	sub    $0xc,%esp
   1261a:	50                   	push   %eax
   1261b:	e8 4a ff ff ff       	call   1256a <list_size>
   12620:	83 c4 10             	add    $0x10,%esp
   12623:	85 c0                	test   %eax,%eax
   12625:	74 40                	je     12667 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   12627:	8b 45 08             	mov    0x8(%ebp),%eax
   1262a:	83 c0 04             	add    $0x4,%eax
   1262d:	83 ec 0c             	sub    $0xc,%esp
   12630:	50                   	push   %eax
   12631:	e8 12 09 00 00       	call   12f48 <list_remove_front>
   12636:	83 c4 10             	add    $0x10,%esp
   12639:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   1263c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12640:	74 08                	je     1264a <sem_notify+0x47>
   12642:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12645:	83 e8 38             	sub    $0x38,%eax
   12648:	eb 05                	jmp    1264f <sem_notify+0x4c>
   1264a:	b8 00 00 00 00       	mov    $0x0,%eax
   1264f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12652:	83 ec 0c             	sub    $0xc,%esp
   12655:	ff 75 ec             	pushl  -0x14(%ebp)
   12658:	e8 7e ea ff ff       	call   110db <task_set_ready>
   1265d:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12660:	e8 83 eb ff ff       	call   111e8 <task_dispatch>
   12665:	eb 0d                	jmp    12674 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   12667:	8b 45 08             	mov    0x8(%ebp),%eax
   1266a:	8b 00                	mov    (%eax),%eax
   1266c:	8d 50 01             	lea    0x1(%eax),%edx
   1266f:	8b 45 08             	mov    0x8(%ebp),%eax
   12672:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   12674:	83 ec 0c             	sub    $0xc,%esp
   12677:	ff 75 f4             	pushl  -0xc(%ebp)
   1267a:	e8 41 f9 ff ff       	call   11fc0 <irq_leave_protection>
   1267f:	83 c4 10             	add    $0x10,%esp
}
   12682:	90                   	nop
   12683:	c9                   	leave  
   12684:	c3                   	ret    

00012685 <sem_count>:

int sem_count(sem_t* sem) {
   12685:	55                   	push   %ebp
   12686:	89 e5                	mov    %esp,%ebp
   12688:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1268b:	e8 18 f9 ff ff       	call   11fa8 <irq_enter_protection>
   12690:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   12693:	8b 45 08             	mov    0x8(%ebp),%eax
   12696:	8b 00                	mov    (%eax),%eax
   12698:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   1269b:	83 ec 0c             	sub    $0xc,%esp
   1269e:	ff 75 f4             	pushl  -0xc(%ebp)
   126a1:	e8 1a f9 ff ff       	call   11fc0 <irq_leave_protection>
   126a6:	83 c4 10             	add    $0x10,%esp

    return count;
   126a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126ac:	c9                   	leave  
   126ad:	c3                   	ret    

000126ae <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   126ae:	55                   	push   %ebp
   126af:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   126b1:	8b 45 08             	mov    0x8(%ebp),%eax
   126b4:	83 c0 07             	add    $0x7,%eax
   126b7:	8d 50 07             	lea    0x7(%eax),%edx
   126ba:	85 c0                	test   %eax,%eax
   126bc:	0f 48 c2             	cmovs  %edx,%eax
   126bf:	c1 f8 03             	sar    $0x3,%eax
}
   126c2:	5d                   	pop    %ebp
   126c3:	c3                   	ret    

000126c4 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   126c4:	55                   	push   %ebp
   126c5:	89 e5                	mov    %esp,%ebp
   126c7:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   126ca:	8b 45 08             	mov    0x8(%ebp),%eax
   126cd:	8b 55 10             	mov    0x10(%ebp),%edx
   126d0:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   126d2:	8b 45 08             	mov    0x8(%ebp),%eax
   126d5:	8b 55 0c             	mov    0xc(%ebp),%edx
   126d8:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   126db:	8b 45 08             	mov    0x8(%ebp),%eax
   126de:	8b 00                	mov    (%eax),%eax
   126e0:	50                   	push   %eax
   126e1:	e8 c8 ff ff ff       	call   126ae <bitmap_byte_count>
   126e6:	83 c4 04             	add    $0x4,%esp
   126e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   126ec:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   126f0:	74 07                	je     126f9 <bitmap_init+0x35>
   126f2:	ba ff 00 00 00       	mov    $0xff,%edx
   126f7:	eb 05                	jmp    126fe <bitmap_init+0x3a>
   126f9:	ba 00 00 00 00       	mov    $0x0,%edx
   126fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12701:	8b 40 04             	mov    0x4(%eax),%eax
   12704:	83 ec 04             	sub    $0x4,%esp
   12707:	ff 75 f4             	pushl  -0xc(%ebp)
   1270a:	52                   	push   %edx
   1270b:	50                   	push   %eax
   1270c:	e8 a4 03 00 00       	call   12ab5 <kmemset>
   12711:	83 c4 10             	add    $0x10,%esp
}
   12714:	90                   	nop
   12715:	c9                   	leave  
   12716:	c3                   	ret    

00012717 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   12717:	55                   	push   %ebp
   12718:	89 e5                	mov    %esp,%ebp
   1271a:	56                   	push   %esi
   1271b:	53                   	push   %ebx
   1271c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1271f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12726:	e9 a2 00 00 00       	jmp    127cd <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   1272b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1272f:	74 4a                	je     1277b <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12731:	8b 45 08             	mov    0x8(%ebp),%eax
   12734:	8b 50 04             	mov    0x4(%eax),%edx
   12737:	8b 45 0c             	mov    0xc(%ebp),%eax
   1273a:	8d 48 07             	lea    0x7(%eax),%ecx
   1273d:	85 c0                	test   %eax,%eax
   1273f:	0f 48 c1             	cmovs  %ecx,%eax
   12742:	c1 f8 03             	sar    $0x3,%eax
   12745:	89 c3                	mov    %eax,%ebx
   12747:	89 d8                	mov    %ebx,%eax
   12749:	01 d0                	add    %edx,%eax
   1274b:	0f b6 00             	movzbl (%eax),%eax
   1274e:	89 c6                	mov    %eax,%esi
   12750:	8b 45 0c             	mov    0xc(%ebp),%eax
   12753:	99                   	cltd   
   12754:	c1 ea 1d             	shr    $0x1d,%edx
   12757:	01 d0                	add    %edx,%eax
   12759:	83 e0 07             	and    $0x7,%eax
   1275c:	29 d0                	sub    %edx,%eax
   1275e:	ba 01 00 00 00       	mov    $0x1,%edx
   12763:	89 c1                	mov    %eax,%ecx
   12765:	d3 e2                	shl    %cl,%edx
   12767:	89 d0                	mov    %edx,%eax
   12769:	89 f2                	mov    %esi,%edx
   1276b:	09 c2                	or     %eax,%edx
   1276d:	8b 45 08             	mov    0x8(%ebp),%eax
   12770:	8b 40 04             	mov    0x4(%eax),%eax
   12773:	89 d9                	mov    %ebx,%ecx
   12775:	01 c8                	add    %ecx,%eax
   12777:	88 10                	mov    %dl,(%eax)
   12779:	eb 4a                	jmp    127c5 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1277b:	8b 45 08             	mov    0x8(%ebp),%eax
   1277e:	8b 50 04             	mov    0x4(%eax),%edx
   12781:	8b 45 0c             	mov    0xc(%ebp),%eax
   12784:	8d 48 07             	lea    0x7(%eax),%ecx
   12787:	85 c0                	test   %eax,%eax
   12789:	0f 48 c1             	cmovs  %ecx,%eax
   1278c:	c1 f8 03             	sar    $0x3,%eax
   1278f:	89 c3                	mov    %eax,%ebx
   12791:	89 d8                	mov    %ebx,%eax
   12793:	01 d0                	add    %edx,%eax
   12795:	0f b6 00             	movzbl (%eax),%eax
   12798:	89 c6                	mov    %eax,%esi
   1279a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1279d:	99                   	cltd   
   1279e:	c1 ea 1d             	shr    $0x1d,%edx
   127a1:	01 d0                	add    %edx,%eax
   127a3:	83 e0 07             	and    $0x7,%eax
   127a6:	29 d0                	sub    %edx,%eax
   127a8:	ba 01 00 00 00       	mov    $0x1,%edx
   127ad:	89 c1                	mov    %eax,%ecx
   127af:	d3 e2                	shl    %cl,%edx
   127b1:	89 d0                	mov    %edx,%eax
   127b3:	f7 d0                	not    %eax
   127b5:	89 f2                	mov    %esi,%edx
   127b7:	21 c2                	and    %eax,%edx
   127b9:	8b 45 08             	mov    0x8(%ebp),%eax
   127bc:	8b 40 04             	mov    0x4(%eax),%eax
   127bf:	89 d9                	mov    %ebx,%ecx
   127c1:	01 c8                	add    %ecx,%eax
   127c3:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   127c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   127c9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   127cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127d0:	3b 45 10             	cmp    0x10(%ebp),%eax
   127d3:	7d 0e                	jge    127e3 <bitmap_set_bit+0xcc>
   127d5:	8b 45 08             	mov    0x8(%ebp),%eax
   127d8:	8b 00                	mov    (%eax),%eax
   127da:	39 45 0c             	cmp    %eax,0xc(%ebp)
   127dd:	0f 8c 48 ff ff ff    	jl     1272b <bitmap_set_bit+0x14>
        }
    }
}
   127e3:	90                   	nop
   127e4:	83 c4 10             	add    $0x10,%esp
   127e7:	5b                   	pop    %ebx
   127e8:	5e                   	pop    %esi
   127e9:	5d                   	pop    %ebp
   127ea:	c3                   	ret    

000127eb <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   127eb:	55                   	push   %ebp
   127ec:	89 e5                	mov    %esp,%ebp
   127ee:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   127ef:	8b 45 08             	mov    0x8(%ebp),%eax
   127f2:	8b 50 04             	mov    0x4(%eax),%edx
   127f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   127f8:	8d 48 07             	lea    0x7(%eax),%ecx
   127fb:	85 c0                	test   %eax,%eax
   127fd:	0f 48 c1             	cmovs  %ecx,%eax
   12800:	c1 f8 03             	sar    $0x3,%eax
   12803:	01 d0                	add    %edx,%eax
   12805:	0f b6 00             	movzbl (%eax),%eax
   12808:	0f b6 d8             	movzbl %al,%ebx
   1280b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1280e:	99                   	cltd   
   1280f:	c1 ea 1d             	shr    $0x1d,%edx
   12812:	01 d0                	add    %edx,%eax
   12814:	83 e0 07             	and    $0x7,%eax
   12817:	29 d0                	sub    %edx,%eax
   12819:	89 c1                	mov    %eax,%ecx
   1281b:	d3 fb                	sar    %cl,%ebx
   1281d:	89 d8                	mov    %ebx,%eax
   1281f:	83 e0 01             	and    $0x1,%eax
}
   12822:	5b                   	pop    %ebx
   12823:	5d                   	pop    %ebp
   12824:	c3                   	ret    

00012825 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   12825:	55                   	push   %ebp
   12826:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12828:	ff 75 0c             	pushl  0xc(%ebp)
   1282b:	ff 75 08             	pushl  0x8(%ebp)
   1282e:	e8 b8 ff ff ff       	call   127eb <bitmap_get_bit>
   12833:	83 c4 08             	add    $0x8,%esp
   12836:	85 c0                	test   %eax,%eax
   12838:	0f 95 c0             	setne  %al
   1283b:	0f b6 c0             	movzbl %al,%eax
}
   1283e:	c9                   	leave  
   1283f:	c3                   	ret    

00012840 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12840:	55                   	push   %ebp
   12841:	89 e5                	mov    %esp,%ebp
   12843:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12846:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1284d:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   12854:	e9 85 00 00 00       	jmp    128de <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12859:	ff 75 fc             	pushl  -0x4(%ebp)
   1285c:	ff 75 08             	pushl  0x8(%ebp)
   1285f:	e8 87 ff ff ff       	call   127eb <bitmap_get_bit>
   12864:	83 c4 08             	add    $0x8,%esp
   12867:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1286a:	74 06                	je     12872 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   1286c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12870:	eb 6c                	jmp    128de <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   12872:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12875:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12878:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1287f:	eb 27                	jmp    128a8 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12881:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12884:	8d 50 01             	lea    0x1(%eax),%edx
   12887:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1288a:	50                   	push   %eax
   1288b:	ff 75 08             	pushl  0x8(%ebp)
   1288e:	e8 58 ff ff ff       	call   127eb <bitmap_get_bit>
   12893:	83 c4 08             	add    $0x8,%esp
   12896:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12899:	74 09                	je     128a4 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   1289b:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   128a2:	eb 16                	jmp    128ba <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   128a4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   128a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128ab:	3b 45 10             	cmp    0x10(%ebp),%eax
   128ae:	7d 0a                	jge    128ba <bitmap_alloc_nbits+0x7a>
   128b0:	8b 45 08             	mov    0x8(%ebp),%eax
   128b3:	8b 00                	mov    (%eax),%eax
   128b5:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   128b8:	7c c7                	jl     12881 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   128ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128bd:	3b 45 10             	cmp    0x10(%ebp),%eax
   128c0:	7c 1c                	jl     128de <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   128c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   128c5:	f7 d0                	not    %eax
   128c7:	50                   	push   %eax
   128c8:	ff 75 10             	pushl  0x10(%ebp)
   128cb:	ff 75 f8             	pushl  -0x8(%ebp)
   128ce:	ff 75 08             	pushl  0x8(%ebp)
   128d1:	e8 41 fe ff ff       	call   12717 <bitmap_set_bit>
   128d6:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   128d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128dc:	eb 13                	jmp    128f1 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   128de:	8b 45 08             	mov    0x8(%ebp),%eax
   128e1:	8b 00                	mov    (%eax),%eax
   128e3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   128e6:	0f 8c 6d ff ff ff    	jl     12859 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   128ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   128f1:	c9                   	leave  
   128f2:	c3                   	ret    

000128f3 <hlt>:
static inline void hlt(void) {
   128f3:	55                   	push   %ebp
   128f4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   128f6:	f4                   	hlt    
}
   128f7:	90                   	nop
   128f8:	5d                   	pop    %ebp
   128f9:	c3                   	ret    

000128fa <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   128fa:	55                   	push   %ebp
   128fb:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   128fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12901:	74 3b                	je     1293e <kstrcpy+0x44>
   12903:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12907:	74 35                	je     1293e <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   12909:	eb 17                	jmp    12922 <kstrcpy+0x28>
        *dest++ = *src++;
   1290b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1290e:	8d 42 01             	lea    0x1(%edx),%eax
   12911:	89 45 0c             	mov    %eax,0xc(%ebp)
   12914:	8b 45 08             	mov    0x8(%ebp),%eax
   12917:	8d 48 01             	lea    0x1(%eax),%ecx
   1291a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1291d:	0f b6 12             	movzbl (%edx),%edx
   12920:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12922:	8b 45 08             	mov    0x8(%ebp),%eax
   12925:	0f b6 00             	movzbl (%eax),%eax
   12928:	84 c0                	test   %al,%al
   1292a:	74 0a                	je     12936 <kstrcpy+0x3c>
   1292c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1292f:	0f b6 00             	movzbl (%eax),%eax
   12932:	84 c0                	test   %al,%al
   12934:	75 d5                	jne    1290b <kstrcpy+0x11>
    }
    *dest = '\0';
   12936:	8b 45 08             	mov    0x8(%ebp),%eax
   12939:	c6 00 00             	movb   $0x0,(%eax)
   1293c:	eb 01                	jmp    1293f <kstrcpy+0x45>
        return;
   1293e:	90                   	nop
}
   1293f:	5d                   	pop    %ebp
   12940:	c3                   	ret    

00012941 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12941:	55                   	push   %ebp
   12942:	89 e5                	mov    %esp,%ebp
   12944:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1294b:	74 61                	je     129ae <kstrncpy+0x6d>
   1294d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12951:	74 5b                	je     129ae <kstrncpy+0x6d>
   12953:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12957:	74 55                	je     129ae <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   12959:	8b 45 08             	mov    0x8(%ebp),%eax
   1295c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   1295f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12962:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   12965:	eb 17                	jmp    1297e <kstrncpy+0x3d>
        *d++ = *s++;
   12967:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1296a:	8d 42 01             	lea    0x1(%edx),%eax
   1296d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12970:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12973:	8d 48 01             	lea    0x1(%eax),%ecx
   12976:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12979:	0f b6 12             	movzbl (%edx),%edx
   1297c:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1297e:	8b 45 10             	mov    0x10(%ebp),%eax
   12981:	8d 50 ff             	lea    -0x1(%eax),%edx
   12984:	89 55 10             	mov    %edx,0x10(%ebp)
   12987:	85 c0                	test   %eax,%eax
   12989:	7e 0a                	jle    12995 <kstrncpy+0x54>
   1298b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1298e:	0f b6 00             	movzbl (%eax),%eax
   12991:	84 c0                	test   %al,%al
   12993:	75 d2                	jne    12967 <kstrncpy+0x26>
    }
    if (size == 0) {
   12995:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12999:	75 0b                	jne    129a6 <kstrncpy+0x65>
        *(d - 1) = '\0';
   1299b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1299e:	83 e8 01             	sub    $0x1,%eax
   129a1:	c6 00 00             	movb   $0x0,(%eax)
   129a4:	eb 09                	jmp    129af <kstrncpy+0x6e>
    } else {
        *d = '\0';
   129a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129a9:	c6 00 00             	movb   $0x0,(%eax)
   129ac:	eb 01                	jmp    129af <kstrncpy+0x6e>
        return;
   129ae:	90                   	nop
    }
}
   129af:	c9                   	leave  
   129b0:	c3                   	ret    

000129b1 <kstrlen>:


int kstrlen(const char *str) {
   129b1:	55                   	push   %ebp
   129b2:	89 e5                	mov    %esp,%ebp
   129b4:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   129b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129bb:	75 07                	jne    129c4 <kstrlen+0x13>
        return 0;
   129bd:	b8 00 00 00 00       	mov    $0x0,%eax
   129c2:	eb 26                	jmp    129ea <kstrlen+0x39>
    }

    const char *c = str;
   129c4:	8b 45 08             	mov    0x8(%ebp),%eax
   129c7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   129ca:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   129d1:	eb 04                	jmp    129d7 <kstrlen+0x26>
        len++;
   129d3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   129d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129da:	8d 50 01             	lea    0x1(%eax),%edx
   129dd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129e0:	0f b6 00             	movzbl (%eax),%eax
   129e3:	84 c0                	test   %al,%al
   129e5:	75 ec                	jne    129d3 <kstrlen+0x22>
    }

    return len;
   129e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   129ea:	c9                   	leave  
   129eb:	c3                   	ret    

000129ec <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   129ec:	55                   	push   %ebp
   129ed:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   129ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129f3:	74 06                	je     129fb <kstrncmp+0xf>
   129f5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129f9:	75 0f                	jne    12a0a <kstrncmp+0x1e>
        return -1;
   129fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12a00:	eb 62                	jmp    12a64 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12a02:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12a06:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   12a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0d:	0f b6 00             	movzbl (%eax),%eax
   12a10:	84 c0                	test   %al,%al
   12a12:	74 20                	je     12a34 <kstrncmp+0x48>
   12a14:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a17:	0f b6 00             	movzbl (%eax),%eax
   12a1a:	84 c0                	test   %al,%al
   12a1c:	74 16                	je     12a34 <kstrncmp+0x48>
   12a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a21:	0f b6 10             	movzbl (%eax),%edx
   12a24:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a27:	0f b6 00             	movzbl (%eax),%eax
   12a2a:	38 c2                	cmp    %al,%dl
   12a2c:	75 06                	jne    12a34 <kstrncmp+0x48>
   12a2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a32:	75 ce                	jne    12a02 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12a34:	8b 45 08             	mov    0x8(%ebp),%eax
   12a37:	0f b6 00             	movzbl (%eax),%eax
   12a3a:	84 c0                	test   %al,%al
   12a3c:	74 21                	je     12a5f <kstrncmp+0x73>
   12a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a41:	0f b6 00             	movzbl (%eax),%eax
   12a44:	84 c0                	test   %al,%al
   12a46:	74 17                	je     12a5f <kstrncmp+0x73>
   12a48:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4b:	0f b6 10             	movzbl (%eax),%edx
   12a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a51:	0f b6 00             	movzbl (%eax),%eax
   12a54:	38 c2                	cmp    %al,%dl
   12a56:	74 07                	je     12a5f <kstrncmp+0x73>
   12a58:	b8 01 00 00 00       	mov    $0x1,%eax
   12a5d:	eb 05                	jmp    12a64 <kstrncmp+0x78>
   12a5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a64:	5d                   	pop    %ebp
   12a65:	c3                   	ret    

00012a66 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   12a66:	55                   	push   %ebp
   12a67:	89 e5                	mov    %esp,%ebp
   12a69:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12a6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a70:	74 40                	je     12ab2 <kmemcpy+0x4c>
   12a72:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a76:	74 3a                	je     12ab2 <kmemcpy+0x4c>
   12a78:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a7c:	74 34                	je     12ab2 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a81:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12a84:	8b 45 08             	mov    0x8(%ebp),%eax
   12a87:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12a8a:	eb 17                	jmp    12aa3 <kmemcpy+0x3d>
        *d++ = *s++;
   12a8c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12a8f:	8d 42 01             	lea    0x1(%edx),%eax
   12a92:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12a95:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a98:	8d 48 01             	lea    0x1(%eax),%ecx
   12a9b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12a9e:	0f b6 12             	movzbl (%edx),%edx
   12aa1:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12aa3:	8b 45 10             	mov    0x10(%ebp),%eax
   12aa6:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aa9:	89 55 10             	mov    %edx,0x10(%ebp)
   12aac:	85 c0                	test   %eax,%eax
   12aae:	75 dc                	jne    12a8c <kmemcpy+0x26>
   12ab0:	eb 01                	jmp    12ab3 <kmemcpy+0x4d>
        return;
   12ab2:	90                   	nop
    }
}
   12ab3:	c9                   	leave  
   12ab4:	c3                   	ret    

00012ab5 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12ab5:	55                   	push   %ebp
   12ab6:	89 e5                	mov    %esp,%ebp
   12ab8:	83 ec 14             	sub    $0x14,%esp
   12abb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12abe:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12ac1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ac5:	74 2c                	je     12af3 <kmemset+0x3e>
   12ac7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12acb:	74 26                	je     12af3 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   12acd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12ad3:	eb 0f                	jmp    12ae4 <kmemset+0x2f>
        *d++ = v;
   12ad5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ad8:	8d 50 01             	lea    0x1(%eax),%edx
   12adb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12ade:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12ae2:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12ae4:	8b 45 10             	mov    0x10(%ebp),%eax
   12ae7:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aea:	89 55 10             	mov    %edx,0x10(%ebp)
   12aed:	85 c0                	test   %eax,%eax
   12aef:	75 e4                	jne    12ad5 <kmemset+0x20>
   12af1:	eb 01                	jmp    12af4 <kmemset+0x3f>
        return;
   12af3:	90                   	nop
    }
}
   12af4:	c9                   	leave  
   12af5:	c3                   	ret    

00012af6 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12af6:	55                   	push   %ebp
   12af7:	89 e5                	mov    %esp,%ebp
   12af9:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   12afc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12b00:	74 06                	je     12b08 <kmemcmp+0x12>
   12b02:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b06:	75 07                	jne    12b0f <kmemcmp+0x19>
        return 1;
   12b08:	b8 01 00 00 00       	mov    $0x1,%eax
   12b0d:	eb 43                	jmp    12b52 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   12b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b12:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12b15:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b18:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12b1b:	eb 23                	jmp    12b40 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   12b1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b20:	8d 50 01             	lea    0x1(%eax),%edx
   12b23:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12b26:	0f b6 08             	movzbl (%eax),%ecx
   12b29:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b2c:	8d 50 01             	lea    0x1(%eax),%edx
   12b2f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b32:	0f b6 00             	movzbl (%eax),%eax
   12b35:	38 c1                	cmp    %al,%cl
   12b37:	74 07                	je     12b40 <kmemcmp+0x4a>
            return 1;
   12b39:	b8 01 00 00 00       	mov    $0x1,%eax
   12b3e:	eb 12                	jmp    12b52 <kmemcmp+0x5c>
    while (size--) {
   12b40:	8b 45 10             	mov    0x10(%ebp),%eax
   12b43:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b46:	89 55 10             	mov    %edx,0x10(%ebp)
   12b49:	85 c0                	test   %eax,%eax
   12b4b:	75 d0                	jne    12b1d <kmemcmp+0x27>
        }
    }

    return 0;
   12b4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12b52:	c9                   	leave  
   12b53:	c3                   	ret    

00012b54 <kitoa>:


void kitoa(char *buf, int num, int base) {
   12b54:	55                   	push   %ebp
   12b55:	89 e5                	mov    %esp,%ebp
   12b57:	53                   	push   %ebx
   12b58:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   12b5b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12b61:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b64:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   12b67:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12b6b:	74 1d                	je     12b8a <kitoa+0x36>
   12b6d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12b71:	74 17                	je     12b8a <kitoa+0x36>
   12b73:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b77:	74 11                	je     12b8a <kitoa+0x36>
   12b79:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12b7d:	74 0b                	je     12b8a <kitoa+0x36>
        *p = '\0';
   12b7f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b82:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12b85:	e9 03 01 00 00       	jmp    12c8d <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12b8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12b91:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b95:	79 19                	jns    12bb0 <kitoa+0x5c>
   12b97:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b9b:	75 13                	jne    12bb0 <kitoa+0x5c>
        *p++ = '-';
   12b9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ba0:	8d 50 01             	lea    0x1(%eax),%edx
   12ba3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ba6:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12ba9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12bb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12bb4:	74 3b                	je     12bf1 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12bb6:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bbf:	99                   	cltd   
   12bc0:	f7 7d 10             	idivl  0x10(%ebp)
   12bc3:	89 d0                	mov    %edx,%eax
   12bc5:	83 c0 0f             	add    $0xf,%eax
   12bc8:	01 c8                	add    %ecx,%eax
   12bca:	0f b6 00             	movzbl (%eax),%eax
   12bcd:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12bd0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bd3:	8d 50 01             	lea    0x1(%eax),%edx
   12bd6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12bd9:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12bdd:	88 10                	mov    %dl,(%eax)
            num /= base;
   12bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12be2:	99                   	cltd   
   12be3:	f7 7d 10             	idivl  0x10(%ebp)
   12be6:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12be9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bed:	75 c7                	jne    12bb6 <kitoa+0x62>
   12bef:	eb 4b                	jmp    12c3c <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12bf1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12bf7:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12bfd:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12c00:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c03:	ba 00 00 00 00       	mov    $0x0,%edx
   12c08:	f7 f3                	div    %ebx
   12c0a:	89 d0                	mov    %edx,%eax
   12c0c:	83 c0 0f             	add    $0xf,%eax
   12c0f:	01 c8                	add    %ecx,%eax
   12c11:	0f b6 00             	movzbl (%eax),%eax
   12c14:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12c17:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c1a:	8d 50 01             	lea    0x1(%eax),%edx
   12c1d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c20:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12c24:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12c26:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12c29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c2c:	ba 00 00 00 00       	mov    $0x0,%edx
   12c31:	f7 f3                	div    %ebx
   12c33:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12c36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12c3a:	75 bb                	jne    12bf7 <kitoa+0xa3>
    }
    *p-- = '\0';
   12c3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c3f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c42:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c45:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12c48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12c4c:	74 08                	je     12c56 <kitoa+0x102>
   12c4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c51:	83 c0 01             	add    $0x1,%eax
   12c54:	eb 03                	jmp    12c59 <kitoa+0x105>
   12c56:	8b 45 08             	mov    0x8(%ebp),%eax
   12c59:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12c5c:	eb 27                	jmp    12c85 <kitoa+0x131>
        char ch = *start;
   12c5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c61:	0f b6 00             	movzbl (%eax),%eax
   12c64:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12c67:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c6a:	0f b6 10             	movzbl (%eax),%edx
   12c6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c70:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12c72:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c75:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c78:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c7b:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12c7f:	88 10                	mov    %dl,(%eax)
        start++;
   12c81:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12c85:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c88:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12c8b:	72 d1                	jb     12c5e <kitoa+0x10a>
    }
}
   12c8d:	83 c4 20             	add    $0x20,%esp
   12c90:	5b                   	pop    %ebx
   12c91:	5d                   	pop    %ebp
   12c92:	c3                   	ret    

00012c93 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12c93:	55                   	push   %ebp
   12c94:	89 e5                	mov    %esp,%ebp
   12c96:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12c99:	8d 45 10             	lea    0x10(%ebp),%eax
   12c9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12c9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ca2:	83 ec 04             	sub    $0x4,%esp
   12ca5:	50                   	push   %eax
   12ca6:	ff 75 0c             	pushl  0xc(%ebp)
   12ca9:	ff 75 08             	pushl  0x8(%ebp)
   12cac:	e8 06 00 00 00       	call   12cb7 <kvsprintf>
   12cb1:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12cb4:	90                   	nop
   12cb5:	c9                   	leave  
   12cb6:	c3                   	ret    

00012cb7 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12cb7:	55                   	push   %ebp
   12cb8:	89 e5                	mov    %esp,%ebp
   12cba:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12cbd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12cca:	e9 2f 01 00 00       	jmp    12dfe <kvsprintf+0x147>
        switch (state) {
   12ccf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12cd2:	85 c0                	test   %eax,%eax
   12cd4:	74 0a                	je     12ce0 <kvsprintf+0x29>
   12cd6:	83 f8 01             	cmp    $0x1,%eax
   12cd9:	74 2b                	je     12d06 <kvsprintf+0x4f>
   12cdb:	e9 1e 01 00 00       	jmp    12dfe <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12ce0:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12ce4:	75 0c                	jne    12cf2 <kvsprintf+0x3b>
                state = READ_FMT;
   12ce6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12ced:	e9 0c 01 00 00       	jmp    12dfe <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12cf2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12cf5:	8d 50 01             	lea    0x1(%eax),%edx
   12cf8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12cfb:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12cff:	88 10                	mov    %dl,(%eax)
            }
            break;
   12d01:	e9 f8 00 00 00       	jmp    12dfe <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12d06:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12d0a:	75 31                	jne    12d3d <kvsprintf+0x86>
                int num = va_arg(args, int);
   12d0c:	8b 45 10             	mov    0x10(%ebp),%eax
   12d0f:	8d 50 04             	lea    0x4(%eax),%edx
   12d12:	89 55 10             	mov    %edx,0x10(%ebp)
   12d15:	8b 00                	mov    (%eax),%eax
   12d17:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   12d1a:	6a 0a                	push   $0xa
   12d1c:	ff 75 e4             	pushl  -0x1c(%ebp)
   12d1f:	ff 75 f8             	pushl  -0x8(%ebp)
   12d22:	e8 2d fe ff ff       	call   12b54 <kitoa>
   12d27:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12d2a:	ff 75 f8             	pushl  -0x8(%ebp)
   12d2d:	e8 7f fc ff ff       	call   129b1 <kstrlen>
   12d32:	83 c4 04             	add    $0x4,%esp
   12d35:	01 45 f8             	add    %eax,-0x8(%ebp)
   12d38:	e9 b9 00 00 00       	jmp    12df6 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12d3d:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12d41:	75 46                	jne    12d89 <kvsprintf+0xd2>
                *curr++ = '0';
   12d43:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d46:	8d 50 01             	lea    0x1(%eax),%edx
   12d49:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d4c:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12d4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d52:	8d 50 01             	lea    0x1(%eax),%edx
   12d55:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d58:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12d5b:	8b 45 10             	mov    0x10(%ebp),%eax
   12d5e:	8d 50 04             	lea    0x4(%eax),%edx
   12d61:	89 55 10             	mov    %edx,0x10(%ebp)
   12d64:	8b 00                	mov    (%eax),%eax
   12d66:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12d69:	6a 10                	push   $0x10
   12d6b:	ff 75 e8             	pushl  -0x18(%ebp)
   12d6e:	ff 75 f8             	pushl  -0x8(%ebp)
   12d71:	e8 de fd ff ff       	call   12b54 <kitoa>
   12d76:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12d79:	ff 75 f8             	pushl  -0x8(%ebp)
   12d7c:	e8 30 fc ff ff       	call   129b1 <kstrlen>
   12d81:	83 c4 04             	add    $0x4,%esp
   12d84:	01 45 f8             	add    %eax,-0x8(%ebp)
   12d87:	eb 6d                	jmp    12df6 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12d89:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12d8d:	75 1f                	jne    12dae <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12d8f:	8b 45 10             	mov    0x10(%ebp),%eax
   12d92:	8d 50 04             	lea    0x4(%eax),%edx
   12d95:	89 55 10             	mov    %edx,0x10(%ebp)
   12d98:	8b 00                	mov    (%eax),%eax
   12d9a:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12d9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12da0:	8d 50 01             	lea    0x1(%eax),%edx
   12da3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12da6:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12daa:	88 10                	mov    %dl,(%eax)
   12dac:	eb 48                	jmp    12df6 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12dae:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12db2:	75 42                	jne    12df6 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12db4:	8b 45 10             	mov    0x10(%ebp),%eax
   12db7:	8d 50 04             	lea    0x4(%eax),%edx
   12dba:	89 55 10             	mov    %edx,0x10(%ebp)
   12dbd:	8b 00                	mov    (%eax),%eax
   12dbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12dc2:	ff 75 f4             	pushl  -0xc(%ebp)
   12dc5:	e8 e7 fb ff ff       	call   129b1 <kstrlen>
   12dca:	83 c4 04             	add    $0x4,%esp
   12dcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12dd0:	eb 17                	jmp    12de9 <kvsprintf+0x132>
                    *curr++ = *str++;
   12dd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12dd5:	8d 42 01             	lea    0x1(%edx),%eax
   12dd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12ddb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12dde:	8d 48 01             	lea    0x1(%eax),%ecx
   12de1:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12de4:	0f b6 12             	movzbl (%edx),%edx
   12de7:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12dec:	8d 50 ff             	lea    -0x1(%eax),%edx
   12def:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12df2:	85 c0                	test   %eax,%eax
   12df4:	75 dc                	jne    12dd2 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12df6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12dfd:	90                   	nop
    while ((ch = *fmt++)) {
   12dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e01:	8d 50 01             	lea    0x1(%eax),%edx
   12e04:	89 55 0c             	mov    %edx,0xc(%ebp)
   12e07:	0f b6 00             	movzbl (%eax),%eax
   12e0a:	88 45 ef             	mov    %al,-0x11(%ebp)
   12e0d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12e11:	0f 85 b8 fe ff ff    	jne    12ccf <kvsprintf+0x18>
        }
    }
}
   12e17:	90                   	nop
   12e18:	c9                   	leave  
   12e19:	c3                   	ret    

00012e1a <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   12e1a:	55                   	push   %ebp
   12e1b:	89 e5                	mov    %esp,%ebp
   12e1d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12e20:	83 ec 08             	sub    $0x8,%esp
   12e23:	ff 75 14             	pushl  0x14(%ebp)
   12e26:	68 70 3b 01 00       	push   $0x13b70
   12e2b:	e8 f4 02 00 00       	call   13124 <log_printf>
   12e30:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12e33:	ff 75 10             	pushl  0x10(%ebp)
   12e36:	ff 75 0c             	pushl  0xc(%ebp)
   12e39:	ff 75 08             	pushl  0x8(%ebp)
   12e3c:	68 82 3b 01 00       	push   $0x13b82
   12e41:	e8 de 02 00 00       	call   13124 <log_printf>
   12e46:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12e49:	e8 a5 fa ff ff       	call   128f3 <hlt>
   12e4e:	eb f9                	jmp    12e49 <pannic+0x2f>

00012e50 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12e50:	55                   	push   %ebp
   12e51:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12e53:	8b 45 08             	mov    0x8(%ebp),%eax
   12e56:	8b 40 08             	mov    0x8(%eax),%eax
   12e59:	85 c0                	test   %eax,%eax
   12e5b:	0f 94 c0             	sete   %al
   12e5e:	0f b6 c0             	movzbl %al,%eax
}
   12e61:	5d                   	pop    %ebp
   12e62:	c3                   	ret    

00012e63 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12e63:	55                   	push   %ebp
   12e64:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12e66:	8b 45 08             	mov    0x8(%ebp),%eax
   12e69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12e72:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12e79:	8b 45 08             	mov    0x8(%ebp),%eax
   12e7c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12e83:	90                   	nop
   12e84:	5d                   	pop    %ebp
   12e85:	c3                   	ret    

00012e86 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12e86:	55                   	push   %ebp
   12e87:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12e89:	8b 45 08             	mov    0x8(%ebp),%eax
   12e8c:	8b 10                	mov    (%eax),%edx
   12e8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e91:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12e94:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12e9d:	ff 75 08             	pushl  0x8(%ebp)
   12ea0:	e8 ab ff ff ff       	call   12e50 <list_is_empty>
   12ea5:	83 c4 04             	add    $0x4,%esp
   12ea8:	85 c0                	test   %eax,%eax
   12eaa:	74 15                	je     12ec1 <list_insert_front+0x3b>
        list->last = list->first = node;
   12eac:	8b 45 08             	mov    0x8(%ebp),%eax
   12eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12eb2:	89 10                	mov    %edx,(%eax)
   12eb4:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb7:	8b 10                	mov    (%eax),%edx
   12eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ebc:	89 50 04             	mov    %edx,0x4(%eax)
   12ebf:	eb 12                	jmp    12ed3 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12ec1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ec4:	8b 00                	mov    (%eax),%eax
   12ec6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ec9:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12ecb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ece:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ed1:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12ed3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed6:	8b 40 08             	mov    0x8(%eax),%eax
   12ed9:	8d 50 01             	lea    0x1(%eax),%edx
   12edc:	8b 45 08             	mov    0x8(%ebp),%eax
   12edf:	89 50 08             	mov    %edx,0x8(%eax)
}
   12ee2:	90                   	nop
   12ee3:	c9                   	leave  
   12ee4:	c3                   	ret    

00012ee5 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12ee5:	55                   	push   %ebp
   12ee6:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12ee8:	8b 45 08             	mov    0x8(%ebp),%eax
   12eeb:	8b 50 04             	mov    0x4(%eax),%edx
   12eee:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ef1:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12ef3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ef6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12efd:	ff 75 08             	pushl  0x8(%ebp)
   12f00:	e8 4b ff ff ff       	call   12e50 <list_is_empty>
   12f05:	83 c4 04             	add    $0x4,%esp
   12f08:	85 c0                	test   %eax,%eax
   12f0a:	74 15                	je     12f21 <list_insert_back+0x3c>
        list->last = list->first = node;
   12f0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f0f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f12:	89 10                	mov    %edx,(%eax)
   12f14:	8b 45 08             	mov    0x8(%ebp),%eax
   12f17:	8b 10                	mov    (%eax),%edx
   12f19:	8b 45 08             	mov    0x8(%ebp),%eax
   12f1c:	89 50 04             	mov    %edx,0x4(%eax)
   12f1f:	eb 15                	jmp    12f36 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12f21:	8b 45 08             	mov    0x8(%ebp),%eax
   12f24:	8b 40 04             	mov    0x4(%eax),%eax
   12f27:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f2a:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12f2d:	8b 45 08             	mov    0x8(%ebp),%eax
   12f30:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f33:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12f36:	8b 45 08             	mov    0x8(%ebp),%eax
   12f39:	8b 40 08             	mov    0x8(%eax),%eax
   12f3c:	8d 50 01             	lea    0x1(%eax),%edx
   12f3f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f42:	89 50 08             	mov    %edx,0x8(%eax)
}
   12f45:	90                   	nop
   12f46:	c9                   	leave  
   12f47:	c3                   	ret    

00012f48 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12f48:	55                   	push   %ebp
   12f49:	89 e5                	mov    %esp,%ebp
   12f4b:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12f4e:	ff 75 08             	pushl  0x8(%ebp)
   12f51:	e8 fa fe ff ff       	call   12e50 <list_is_empty>
   12f56:	83 c4 04             	add    $0x4,%esp
   12f59:	85 c0                	test   %eax,%eax
   12f5b:	74 07                	je     12f64 <list_remove_front+0x1c>
        return (list_node_t*)0;
   12f5d:	b8 00 00 00 00       	mov    $0x0,%eax
   12f62:	eb 5b                	jmp    12fbf <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12f64:	8b 45 08             	mov    0x8(%ebp),%eax
   12f67:	8b 00                	mov    (%eax),%eax
   12f69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12f6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f6f:	8b 50 04             	mov    0x4(%eax),%edx
   12f72:	8b 45 08             	mov    0x8(%ebp),%eax
   12f75:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12f77:	8b 45 08             	mov    0x8(%ebp),%eax
   12f7a:	8b 00                	mov    (%eax),%eax
   12f7c:	85 c0                	test   %eax,%eax
   12f7e:	75 0c                	jne    12f8c <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12f80:	8b 45 08             	mov    0x8(%ebp),%eax
   12f83:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f8a:	eb 0c                	jmp    12f98 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12f8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f8f:	8b 40 04             	mov    0x4(%eax),%eax
   12f92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12f98:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f9b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12fa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fa5:	8b 50 04             	mov    0x4(%eax),%edx
   12fa8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fab:	89 10                	mov    %edx,(%eax)
    list->count--;
   12fad:	8b 45 08             	mov    0x8(%ebp),%eax
   12fb0:	8b 40 08             	mov    0x8(%eax),%eax
   12fb3:	8d 50 ff             	lea    -0x1(%eax),%edx
   12fb6:	8b 45 08             	mov    0x8(%ebp),%eax
   12fb9:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12fbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12fbf:	c9                   	leave  
   12fc0:	c3                   	ret    

00012fc1 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12fc1:	55                   	push   %ebp
   12fc2:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc7:	8b 00                	mov    (%eax),%eax
   12fc9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fcc:	75 0b                	jne    12fd9 <list_remove+0x18>
        list->first = node->next;
   12fce:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fd1:	8b 50 04             	mov    0x4(%eax),%edx
   12fd4:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd7:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12fd9:	8b 45 08             	mov    0x8(%ebp),%eax
   12fdc:	8b 40 04             	mov    0x4(%eax),%eax
   12fdf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fe2:	75 0b                	jne    12fef <list_remove+0x2e>
        list->last = node->pre;
   12fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fe7:	8b 10                	mov    (%eax),%edx
   12fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   12fec:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12fef:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ff2:	8b 00                	mov    (%eax),%eax
   12ff4:	85 c0                	test   %eax,%eax
   12ff6:	74 0e                	je     13006 <list_remove+0x45>
        node->pre->next = node->next;
   12ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ffb:	8b 00                	mov    (%eax),%eax
   12ffd:	8b 55 0c             	mov    0xc(%ebp),%edx
   13000:	8b 52 04             	mov    0x4(%edx),%edx
   13003:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   13006:	8b 45 0c             	mov    0xc(%ebp),%eax
   13009:	8b 40 04             	mov    0x4(%eax),%eax
   1300c:	85 c0                	test   %eax,%eax
   1300e:	74 0d                	je     1301d <list_remove+0x5c>
        node->next->pre = node->pre;
   13010:	8b 45 0c             	mov    0xc(%ebp),%eax
   13013:	8b 40 04             	mov    0x4(%eax),%eax
   13016:	8b 55 0c             	mov    0xc(%ebp),%edx
   13019:	8b 12                	mov    (%edx),%edx
   1301b:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   1301d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13020:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13027:	8b 45 0c             	mov    0xc(%ebp),%eax
   1302a:	8b 50 04             	mov    0x4(%eax),%edx
   1302d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13030:	89 10                	mov    %edx,(%eax)
    --list->count;
   13032:	8b 45 08             	mov    0x8(%ebp),%eax
   13035:	8b 40 08             	mov    0x8(%eax),%eax
   13038:	8d 50 ff             	lea    -0x1(%eax),%edx
   1303b:	8b 45 08             	mov    0x8(%ebp),%eax
   1303e:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   13041:	8b 45 0c             	mov    0xc(%ebp),%eax
   13044:	5d                   	pop    %ebp
   13045:	c3                   	ret    

00013046 <inb>:
static inline uint8_t inb(uint16_t port) {
   13046:	55                   	push   %ebp
   13047:	89 e5                	mov    %esp,%ebp
   13049:	83 ec 14             	sub    $0x14,%esp
   1304c:	8b 45 08             	mov    0x8(%ebp),%eax
   1304f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   13053:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13057:	89 c2                	mov    %eax,%edx
   13059:	ec                   	in     (%dx),%al
   1305a:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1305d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13061:	c9                   	leave  
   13062:	c3                   	ret    

00013063 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13063:	55                   	push   %ebp
   13064:	89 e5                	mov    %esp,%ebp
   13066:	83 ec 08             	sub    $0x8,%esp
   13069:	8b 55 08             	mov    0x8(%ebp),%edx
   1306c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1306f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13073:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   13076:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1307a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1307e:	ee                   	out    %al,(%dx)
}
   1307f:	90                   	nop
   13080:	c9                   	leave  
   13081:	c3                   	ret    

00013082 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   13082:	55                   	push   %ebp
   13083:	89 e5                	mov    %esp,%ebp
   13085:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   13088:	83 ec 08             	sub    $0x8,%esp
   1308b:	68 c0 3b 01 00       	push   $0x13bc0
   13090:	68 60 10 02 00       	push   $0x21060
   13095:	e8 41 f3 ff ff       	call   123db <mutex_init>
   1309a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   1309d:	83 ec 08             	sub    $0x8,%esp
   130a0:	6a 00                	push   $0x0
   130a2:	68 f9 03 00 00       	push   $0x3f9
   130a7:	e8 b7 ff ff ff       	call   13063 <outb>
   130ac:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   130af:	83 ec 08             	sub    $0x8,%esp
   130b2:	68 80 00 00 00       	push   $0x80
   130b7:	68 fb 03 00 00       	push   $0x3fb
   130bc:	e8 a2 ff ff ff       	call   13063 <outb>
   130c1:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   130c4:	83 ec 08             	sub    $0x8,%esp
   130c7:	6a 03                	push   $0x3
   130c9:	68 f8 03 00 00       	push   $0x3f8
   130ce:	e8 90 ff ff ff       	call   13063 <outb>
   130d3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   130d6:	83 ec 08             	sub    $0x8,%esp
   130d9:	6a 00                	push   $0x0
   130db:	68 f9 03 00 00       	push   $0x3f9
   130e0:	e8 7e ff ff ff       	call   13063 <outb>
   130e5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   130e8:	83 ec 08             	sub    $0x8,%esp
   130eb:	6a 03                	push   $0x3
   130ed:	68 fb 03 00 00       	push   $0x3fb
   130f2:	e8 6c ff ff ff       	call   13063 <outb>
   130f7:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   130fa:	83 ec 08             	sub    $0x8,%esp
   130fd:	68 c7 00 00 00       	push   $0xc7
   13102:	68 fa 03 00 00       	push   $0x3fa
   13107:	e8 57 ff ff ff       	call   13063 <outb>
   1310c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1310f:	83 ec 08             	sub    $0x8,%esp
   13112:	6a 0f                	push   $0xf
   13114:	68 fc 03 00 00       	push   $0x3fc
   13119:	e8 45 ff ff ff       	call   13063 <outb>
   1311e:	83 c4 10             	add    $0x10,%esp
}
   13121:	90                   	nop
   13122:	c9                   	leave  
   13123:	c3                   	ret    

00013124 <log_printf>:


void log_printf(const char* fmt, ...) {
   13124:	55                   	push   %ebp
   13125:	89 e5                	mov    %esp,%ebp
   13127:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   1312d:	83 ec 04             	sub    $0x4,%esp
   13130:	68 80 00 00 00       	push   $0x80
   13135:	6a 00                	push   $0x0
   13137:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1313d:	50                   	push   %eax
   1313e:	e8 72 f9 ff ff       	call   12ab5 <kmemset>
   13143:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   13146:	8d 45 0c             	lea    0xc(%ebp),%eax
   13149:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   1314f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13155:	83 ec 04             	sub    $0x4,%esp
   13158:	50                   	push   %eax
   13159:	ff 75 08             	pushl  0x8(%ebp)
   1315c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13162:	50                   	push   %eax
   13163:	e8 4f fb ff ff       	call   12cb7 <kvsprintf>
   13168:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   1316b:	83 ec 0c             	sub    $0xc,%esp
   1316e:	68 60 10 02 00       	push   $0x21060
   13173:	e8 a4 f2 ff ff       	call   1241c <mutex_acquire>
   13178:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   1317b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13181:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   13184:	eb 3b                	jmp    131c1 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   13186:	90                   	nop
   13187:	83 ec 0c             	sub    $0xc,%esp
   1318a:	68 fd 03 00 00       	push   $0x3fd
   1318f:	e8 b2 fe ff ff       	call   13046 <inb>
   13194:	83 c4 10             	add    $0x10,%esp
   13197:	0f b6 c0             	movzbl %al,%eax
   1319a:	83 e0 40             	and    $0x40,%eax
   1319d:	85 c0                	test   %eax,%eax
   1319f:	74 e6                	je     13187 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   131a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131a4:	8d 50 01             	lea    0x1(%eax),%edx
   131a7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   131aa:	0f b6 00             	movzbl (%eax),%eax
   131ad:	0f b6 c0             	movzbl %al,%eax
   131b0:	83 ec 08             	sub    $0x8,%esp
   131b3:	50                   	push   %eax
   131b4:	68 f8 03 00 00       	push   $0x3f8
   131b9:	e8 a5 fe ff ff       	call   13063 <outb>
   131be:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   131c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131c4:	0f b6 00             	movzbl (%eax),%eax
   131c7:	84 c0                	test   %al,%al
   131c9:	75 bb                	jne    13186 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   131cb:	83 ec 08             	sub    $0x8,%esp
   131ce:	6a 0d                	push   $0xd
   131d0:	68 f8 03 00 00       	push   $0x3f8
   131d5:	e8 89 fe ff ff       	call   13063 <outb>
   131da:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   131dd:	83 ec 08             	sub    $0x8,%esp
   131e0:	6a 0a                	push   $0xa
   131e2:	68 f8 03 00 00       	push   $0x3f8
   131e7:	e8 77 fe ff ff       	call   13063 <outb>
   131ec:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   131ef:	83 ec 0c             	sub    $0xc,%esp
   131f2:	68 60 10 02 00       	push   $0x21060
   131f7:	e8 ae f2 ff ff       	call   124aa <mutex_release>
   131fc:	83 c4 10             	add    $0x10,%esp
   131ff:	90                   	nop
   13200:	c9                   	leave  
   13201:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 d4 00 00 00       	jmp    800000e6 <first_task_main>

80000012 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	57                   	push   %edi
80000016:	56                   	push   %esi
80000017:	53                   	push   %ebx
80000018:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
8000001b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000022:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
80000029:	8b 45 08             	mov    0x8(%ebp),%eax
8000002c:	8b 40 10             	mov    0x10(%eax),%eax
8000002f:	8b 55 08             	mov    0x8(%ebp),%edx
80000032:	8b 52 0c             	mov    0xc(%edx),%edx
80000035:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000038:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
8000003b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003e:	8b 5b 04             	mov    0x4(%ebx),%ebx
80000041:	8b 75 08             	mov    0x8(%ebp),%esi
80000044:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000046:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000049:	50                   	push   %eax
8000004a:	52                   	push   %edx
8000004b:	51                   	push   %ecx
8000004c:	53                   	push   %ebx
8000004d:	56                   	push   %esi
8000004e:	ff 1f                	lcall  *(%edi)
80000050:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
80000053:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000056:	83 c4 10             	add    $0x10,%esp
80000059:	5b                   	pop    %ebx
8000005a:	5e                   	pop    %esi
8000005b:	5f                   	pop    %edi
8000005c:	5d                   	pop    %ebp
8000005d:	c3                   	ret    

8000005e <msleep>:
 
static inline void msleep(int ms) {
8000005e:	55                   	push   %ebp
8000005f:	89 e5                	mov    %esp,%ebp
80000061:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
80000064:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000068:	7e 1b                	jle    80000085 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
8000006a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000071:	8b 45 08             	mov    0x8(%ebp),%eax
80000074:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
80000077:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000007a:	50                   	push   %eax
8000007b:	e8 92 ff ff ff       	call   80000012 <syscall>
80000080:	83 c4 04             	add    $0x4,%esp
80000083:	eb 01                	jmp    80000086 <msleep+0x28>
        return;
80000085:	90                   	nop
}
80000086:	c9                   	leave  
80000087:	c3                   	ret    

80000088 <getpid>:


static inline int getpid(void) {
80000088:	55                   	push   %ebp
80000089:	89 e5                	mov    %esp,%ebp
8000008b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return syscall(&args);
80000095:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000098:	50                   	push   %eax
80000099:	e8 74 ff ff ff       	call   80000012 <syscall>
8000009e:	83 c4 04             	add    $0x4,%esp
}
800000a1:	c9                   	leave  
800000a2:	c3                   	ret    

800000a3 <print_msg>:


static inline void print_msg(char* fmt, int arg) {
800000a3:	55                   	push   %ebp
800000a4:	89 e5                	mov    %esp,%ebp
800000a6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
800000a9:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000b0:	8b 45 08             	mov    0x8(%ebp),%eax
800000b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b6:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
800000bc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bf:	50                   	push   %eax
800000c0:	e8 4d ff ff ff       	call   80000012 <syscall>
800000c5:	83 c4 04             	add    $0x4,%esp
}
800000c8:	90                   	nop
800000c9:	c9                   	leave  
800000ca:	c3                   	ret    

800000cb <fork>:


static inline int fork(void) {
800000cb:	55                   	push   %ebp
800000cc:	89 e5                	mov    %esp,%ebp
800000ce:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000d1:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)

    return syscall(&args);
800000d8:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000db:	50                   	push   %eax
800000dc:	e8 31 ff ff ff       	call   80000012 <syscall>
800000e1:	83 c4 04             	add    $0x4,%esp
}
800000e4:	c9                   	leave  
800000e5:	c3                   	ret    

800000e6 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void) {
800000e6:	55                   	push   %ebp
800000e7:	89 e5                	mov    %esp,%ebp
800000e9:	83 ec 10             	sub    $0x10,%esp
    int count = 3;
800000ec:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)

    int pid = getpid();
800000f3:	e8 90 ff ff ff       	call   80000088 <getpid>
800000f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    print_msg("first task id=%d", pid);
800000fb:	ff 75 f8             	pushl  -0x8(%ebp)
800000fe:	68 81 01 00 80       	push   $0x80000181
80000103:	e8 9b ff ff ff       	call   800000a3 <print_msg>
80000108:	83 c4 08             	add    $0x8,%esp
    
    pid = fork();
8000010b:	e8 bb ff ff ff       	call   800000cb <fork>
80000110:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (pid < 0) {
80000113:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
80000117:	79 11                	jns    8000012a <first_task_main+0x44>
        print_msg("create child proc failed.", 0);
80000119:	6a 00                	push   $0x0
8000011b:	68 92 01 00 80       	push   $0x80000192
80000120:	e8 7e ff ff ff       	call   800000a3 <print_msg>
80000125:	83 c4 08             	add    $0x8,%esp
80000128:	eb 38                	jmp    80000162 <first_task_main+0x7c>
    } else if (pid == 0) {
8000012a:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
8000012e:	75 12                	jne    80000142 <first_task_main+0x5c>
        print_msg("child: %d", count);
80000130:	ff 75 fc             	pushl  -0x4(%ebp)
80000133:	68 ac 01 00 80       	push   $0x800001ac
80000138:	e8 66 ff ff ff       	call   800000a3 <print_msg>
8000013d:	83 c4 08             	add    $0x8,%esp
80000140:	eb 20                	jmp    80000162 <first_task_main+0x7c>
    } else {
        print_msg("child task id=%d", pid);
80000142:	ff 75 f8             	pushl  -0x8(%ebp)
80000145:	68 b6 01 00 80       	push   $0x800001b6
8000014a:	e8 54 ff ff ff       	call   800000a3 <print_msg>
8000014f:	83 c4 08             	add    $0x8,%esp
        print_msg("parent: %d", count);
80000152:	ff 75 fc             	pushl  -0x4(%ebp)
80000155:	68 c7 01 00 80       	push   $0x800001c7
8000015a:	e8 44 ff ff ff       	call   800000a3 <print_msg>
8000015f:	83 c4 08             	add    $0x8,%esp
    }

    while (1) {
        // log_printf("first task.");

        print_msg("pid = %d", pid);
80000162:	ff 75 f8             	pushl  -0x8(%ebp)
80000165:	68 d2 01 00 80       	push   $0x800001d2
8000016a:	e8 34 ff ff ff       	call   800000a3 <print_msg>
8000016f:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
80000172:	68 e8 03 00 00       	push   $0x3e8
80000177:	e8 e2 fe ff ff       	call   8000005e <msleep>
8000017c:	83 c4 04             	add    $0x4,%esp
        print_msg("pid = %d", pid);
8000017f:	eb e1                	jmp    80000162 <first_task_main+0x7c>
80000181:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000187:	74 61                	je     800001ea <first_task_main+0x104>
80000189:	73 6b                	jae    800001f6 <first_task_main+0x110>
8000018b:	20 69 64             	and    %ch,0x64(%ecx)
8000018e:	3d 25 64 00 63       	cmp    $0x63006425,%eax
80000193:	72 65                	jb     800001fa <first_task_main+0x114>
80000195:	61                   	popa   
80000196:	74 65                	je     800001fd <first_task_main+0x117>
80000198:	20 63 68             	and    %ah,0x68(%ebx)
8000019b:	69 6c 64 20 70 72 6f 	imul   $0x636f7270,0x20(%esp,%eiz,2),%ebp
800001a2:	63 
800001a3:	20 66 61             	and    %ah,0x61(%esi)
800001a6:	69 6c 65 64 2e 00 63 	imul   $0x6863002e,0x64(%ebp,%eiz,2),%ebp
800001ad:	68 
800001ae:	69 6c 64 3a 20 25 64 	imul   $0x642520,0x3a(%esp,%eiz,2),%ebp
800001b5:	00 
800001b6:	63 68 69             	arpl   %bp,0x69(%eax)
800001b9:	6c                   	insb   (%dx),%es:(%edi)
800001ba:	64 20 74 61 73       	and    %dh,%fs:0x73(%ecx,%eiz,2)
800001bf:	6b 20 69             	imul   $0x69,(%eax),%esp
800001c2:	64 3d 25 64 00 70    	fs cmp $0x70006425,%eax
800001c8:	61                   	popa   
800001c9:	72 65                	jb     80000230 <first_task_main+0x14a>
800001cb:	6e                   	outsb  %ds:(%esi),(%dx)
800001cc:	74 3a                	je     80000208 <first_task_main+0x122>
800001ce:	20 25 64 00 70 69    	and    %ah,0x69700064
800001d4:	64 20 3d 20 25 64 00 	and    %bh,%fs:0x642520
