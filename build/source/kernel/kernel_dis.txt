
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00004ccc memsz 0x00004ccc flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x0002df60 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x00042f60 align 2**12
         filesz 0x0000029a memsz 0x0000029a flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041e9  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000ae0  000141ec  000141ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0002cf60  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   0000029a  80000000  00042f60  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000023b4  00000000  00000000  0000729a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e73  00000000  00000000  0000964e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016dd  00000000  00000000  0000f4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000220  00000000  00000000  00010ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00010dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001706  00000000  00000000  00010e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0001259e  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000018d8  00000000  00000000  000125b0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000141ec l    d  .rodata	00000000 .rodata
00015000 l    d  .data	00000000 .data
00016000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010302 l     F .text	00000017 up2
00010319 l     F .text	0000000d down2
00010326 l     F .text	0000000c write_cr3
00010332 l     F .text	00000014 pde_index
00010346 l     F .text	00000027 pde_paddr
0001036d l     F .text	00000010 pte_index
0001037d l     F .text	00000027 pte_paddr
000103a4 l     F .text	00000011 mmu_set_page_dir
000103b5 l     F .text	0000000f get_pte_perm
00016000 l     O .bss	00000068 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
000103c4 l     F .text	0000005d addr_alloc_init
00010421 l     F .text	00000067 addr_alloc_page
00010488 l     F .text	00000062 addr_free_page
000104ea l     F .text	00000066 show_mem_info
00010550 l     F .text	0000003c total_mem_size
0001058c l     F .text	000000a0 test_alloc
00014350 l     O .rodata	00000012 __func__.2258
00015000 l     O .data	00000040 kernel_map.2270
00014364 l     O .rodata	0000000c __func__.2300
00010b0f l     F .text	00000010 curr_page_dir
00014370 l     O .rodata	00000011 __func__.2346
00010bd8 l     F .text	0000001a kalloc
00010bf2 l     F .text	0000001e kfree
00014384 l     O .rodata	00000013 __func__.2357
00000000 l    df *ABS*	00000000 syscall.c
00014398 l     O .rodata	00000018 sys_table
00000000 l    df *ABS*	00000000 task.c
00011099 l     F .text	00000019 list_node_init
000110b2 l     F .text	0000000b list_node_next
000110bd l     F .text	0000000b list_size
000110c8 l     F .text	0000000a list_first
000110d2 l     F .text	0000000c write_cr3
000110de l     F .text	00000007 hlt
000110e5 l     F .text	00000017 write_tr
000110fc l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a8 task_manager
000181c0 l     O .bss	00005e00 task_table
0001dfc0 l     O .bss	00000054 task_table_mutex
0001e020 l     O .bss	00001000 idle_task_stack
0001110d l     F .text	00000188 tss_init
0001455c l     O .rodata	0000000a __func__.2373
00011426 l     F .text	0000000a idle_task_entry
00014568 l     O .rodata	00000010 __func__.2406
0001192e l     F .text	00000069 alloc_task
00011997 l     F .text	00000030 free_task
00011b51 l     F .text	000000fe load_phdr
00011c4f l     F .text	000001cc load_elf_file
00011e1b l     F .text	00000115 copy_args
00014578 l     O .rodata	0000000a __func__.2523
00000000 l    df *ABS*	00000000 cpu.c
0001211e l     F .text	00000028 lgdt
00012146 l     F .text	0000001a far_jump
0001f020 l     O .bss	00000800 gdt_table
0001f820 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
00012397 l     F .text	0000001d inb
000123b4 l     F .text	0000001f outb
000123d3 l     F .text	00000007 cli
000123da l     F .text	00000007 sti
000123e1 l     F .text	00000028 lidt
00012409 l     F .text	00000011 read_cr2
0001241a l     F .text	00000007 hlt
00012421 l     F .text	00000010 read_eflags
00012431 l     F .text	0000000b write_eflags
0001f880 l     O .bss	00000400 idt_table
0001243c l     F .text	000000f0 dump_core_regs
0001252c l     F .text	0000003e do_default_handler
00012907 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00012d0b l     F .text	0000001f outb
0001fc80 l     O .bss	00000004 sys_tick
00012d52 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 fs.c
00012dca l     F .text	0000001d inb
00012de7 l     F .text	0000001f inw
00012e06 l     F .text	0000001f outb
00012e25 l     F .text	0000012f read_disk
0001fca0 l     O .bss	00019000 TEMP_ADDR
00038ca0 l     O .bss	00000004 temp_pos
00000000 l    df *ABS*	00000000 init.c
00013004 l     F .text	0000000b list_size
0001300f l     F .text	0000000a list_first
00013019 l     F .text	0000000b list_last
00014c58 l     O .rodata	0000000c __func__.2243
00038cc0 l     O .bss	000000bc first_task
00014c64 l     O .rodata	00000013 __func__.2276
00013278 l     F .text	00000036 test_task1
000132ae l     F .text	00000036 test_task2
00038d80 l     O .bss	000000bc task1
00038e40 l     O .bss	000000bc task2
00038f00 l     O .bss	00004000 stack1
0003cf00 l     O .bss	00004000 stack2
00000000 l    df *ABS*	00000000 mutex.c
00013344 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
000134de l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00013867 l     F .text	00000007 hlt
00015040 l     O .data	00000004 num2ch.1932
00000000 l    df *ABS*	00000000 list.c
00013e37 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001402d l     F .text	0000001d inb
0001404a l     F .text	0000001f outb
00040f00 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c syscall
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
800000c9 l     F .first_task	0000001b fork
800000e4 l     F .first_task	0000002d execve
000128eb g     F .text	0000001c do_handler_control_protection_exception
0001375f g     F .text	0000003a bitmap_get_bit
00012ffa g     F .text	0000000a sys_close
000116d1 g     F .text	0000000a task_current
000125a2 g     F .text	0000001c do_handler_debug_exception
000128cf g     F .text	0000001c do_handler_virtualization_exception
00012cac g     F .text	0000000b irq_enable_global
0001269e g     F .text	0000001c do_handler_segment_not_present
0001162f g     F .text	00000034 task_set_ready
000138b5 g     F .text	00000070 kstrncpy
00013799 g     F .text	0000001b bitmap_is_set
00013078 g     F .text	0000019c link_test
000125be g     F .text	0000001c do_handler_nmi_interrupt
00012fd6 g     F .text	00000024 sys_lseek
00011004 g     F .text	00000095 do_handler_syscall
00013dc4 g     F .text	0000002d strings_count
000122b2 g     F .text	00000023 cpu_init
00014069 g     F .text	000000a2 log_init
000119c7 g     F .text	0000018a sys_fork
000132e4 g     F .text	00000060 init_main
00013a29 g     F .text	00000041 kmemset
0001235e g     F .text	00000039 gdt_free_sel
00010fea g     F .text	0000001a sys_print_msg
00015000 g       .data	00000000 s_data
00012b8f g     F .text	0000008b irq_enable
00010026 g       .text	00000000 exception_handler_unknown
000100a2 g       .text	00000000 exception_handler_breakpoint
00013925 g     F .text	0000003b kstrlen
000125f6 g     F .text	0000001c do_handler_overflow
000106dc g     F .text	00000087 memory_create_map
00012f8d g     F .text	0000003f sys_read
000101b3 g       .text	00000000 exception_handler_general_protection
000126d6 g     F .text	000000b5 do_handler_general_protection
000135f9 g     F .text	00000029 sem_count
80000111 g     F .first_task	00000119 first_task_main
00012612 g     F .text	0000001c do_handler_bound_range_exceed
0001368b g     F .text	000000d4 bitmap_set_bit
00012666 g     F .text	0000001c do_handler_double_fault
0001278b g     F .text	000000d4 do_handler_page_fault
00010267 g       .text	00000000 exception_handler_virtualization_exception
0001013d g       .text	00000000 exception_handler_double_fault
00012cb7 g     F .text	0000002b pic_send_eoi
00011625 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00010833 g     F .text	00000085 memory_create_uvm
0001350c g     F .text	0000006b sem_wait
00010aed g     F .text	00000022 memory_alloc_page_for
00012d2a g     F .text	00000028 do_handler_timer
00010194 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c1 g       .text	00000000 exception_handler_overflow
000102c2 g       .text	00000000 simple_switch
00013e6d g     F .text	0000005f list_insert_front
00040f60 g     O .bss	00002000 stack
000118c1 g     F .text	00000057 sys_sleep
00013c2b g     F .text	00000163 kvsprintf
00010b3f g     F .text	00000099 memory_free_page
00042f60 g       *ABS*	00000000 s_first_task
0001138b g     F .text	0000007d task_uninit
00010a1f g     F .text	000000ce memory_alloc_for_page_dir
00013577 g     F .text	00000082 sem_notify
0001099c g     F .text	00000083 memory_copy_uvm_data
0001262e g     F .text	0000001c do_handler_invalid_opcode
0001015a g       .text	00000000 exception_handler_invalid_tss
00012db2 g     F .text	00000018 timer_init
0001154c g     F .text	000000d9 task_first_init
00012897 g     F .text	0000001c do_handler_machine_check
00012f54 g     F .text	00000039 sys_open
0001264a g     F .text	0000001c do_handler_device_not_found
000118a1 g     F .text	00000020 task_set_wakeup
00013ecc g     F .text	00000063 list_insert_back
00012ca1 g     F .text	0000000b irq_disable_global
000116db g     F .text	00000061 sys_sched_yield
00012fcc g     F .text	0000000a sys_write
000431fa g       *ABS*	00000000 mem_free_start
00013024 g     F .text	00000054 kernel_init
000134e9 g     F .text	00000023 sem_init
00013c07 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00013df1 g     F .text	00000046 get_file_name
00011663 g     F .text	0000002b task_set_blocked
000100ff g       .text	00000000 exception_handler_invalid_opcode
00042f60 g       .bss	00000000 e_data
00013ac8 g     F .text	0000013f kitoa
0001386e g     F .text	00000047 kstrcpy
00013960 g     F .text	0000007a kstrncmp
0001287b g     F .text	0000001c do_handler_aligment_check
00013a6a g     F .text	0000005e kmemcmp
000101ed g       .text	00000000 exception_handler_floating_point_error
00010229 g       .text	00000000 exception_handler_machine_check
00012682 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00010e5d g     F .text	00000147 memory_copy_uvm2
000431fa g       *ABS*	00000000 e_first_task
00011870 g     F .text	00000031 task_set_sleep
000102a3 g       .text	00000000 exception_handler_timer
00012b5a g     F .text	00000035 irq_install
0001222a g     F .text	00000088 init_gdt
00012ce2 g     F .text	00000018 irq_enter_protection
0001334f g     F .text	00000041 mutex_init
00012c1a g     F .text	00000087 irq_disable
00010045 g       .text	00000000 exception_handler_divide_error
00010c10 g     F .text	000000f8 memory_destroy_uvm
00012586 g     F .text	0000001c do_handler_divide_error
00013622 g     F .text	00000016 bitmap_byte_count
0001173c g     F .text	0000005b task_dispatch
00010d08 g     F .text	00000155 memory_copy_uvm
00013214 g     F .text	00000064 move_to_first_task
0001168e g     F .text	00000043 task_next_run
00010763 g     F .text	000000d0 create_kernel_table
00013e4a g     F .text	00000023 list_init
000101d0 g       .text	00000000 exception_handler_page_fault
0001256a g     F .text	0000001c do_handler_unknown
00010b1f g     F .text	00000020 memory_alloc_page
00011408 g     F .text	0000001e task_switch_from_to
0001299a g     F .text	000001c0 irq_init
00012cfa g     F .text	00000011 irq_leave_protection
00010083 g       .text	00000000 exception_handler_nmi_interrupt
00012160 g     F .text	00000083 segment_desc_set
000102d7 g       .text	00000000 exception_handler_syscall
00014ccc g       .rodata	00000000 e_text
0001020c g       .text	00000000 exception_handler_aligment_check
00010286 g       .text	00000000 exception_handler_control_protection_exception
00013638 g     F .text	00000053 bitmap_init
000128b3 g     F .text	0000001c do_handler_simd_floating_point_exception
000139da g     F .text	0000004f kmemcpy
00010177 g       .text	00000000 exception_handler_segment_not_present
000137b4 g     F .text	000000b3 bitmap_alloc_nbits
0001145d g     F .text	000000ef task_manager_init
00011430 g     F .text	0000002d task_start
000100e0 g       .text	00000000 exception_handler_bound_range_exceed
00011797 g     F .text	000000d9 task_time_tick
000108b8 g     F .text	000000e4 memory_init
00011f30 g     F .text	000001a7 sys_execve
0001011e g       .text	00000000 exception_handler_device_not_found
000120d7 g     F .text	00000047 sys_exit
00013d8e g     F .text	00000036 pannic
00010fa4 g     F .text	00000046 memory_get_paddr
000126ba g     F .text	0000001c do_handler_stack_segment_fault
000125da g     F .text	0000001c do_handler_breakpoint
00010064 g       .text	00000000 exception_handler_debug_exception
0001285f g     F .text	0000001c do_handler_floating_point_error
0001410b g     F .text	000000de log_printf
00011295 g     F .text	000000f6 task_init
00013f2f g     F .text	00000079 list_remove_front
00011918 g     F .text	00000016 sys_getpid
000122e9 g     F .text	00000075 gdt_alloc_desc
0001341e g     F .text	000000c0 mutex_release
00013fa8 g     F .text	00000085 list_remove
000122d5 g     F .text	00000014 swtch_to_tss
000121e3 g     F .text	00000047 gate_desc_set
00013390 g     F .text	0000008e mutex_acquire
00010248 g       .text	00000000 exception_handler_simd_floating_point_exception
0001062c g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 18 30 00 00       	call   13024 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    # 这里改了栈指针的位置，不再是7c00了
    # mov $(stack + KERNEL_STACK_SIZE), %esp
    jmp init_main
   10021:	e9 be 32 00 00       	jmp    132e4 <init_main>

00010026 <exception_handler_unknown>:
    add $(2 * 4), %esp # 跳过压入的异常号和错误码

    iret
.endm

exception_handler unknown,                      -1, 0
   10026:	6a 00                	push   $0x0
   10028:	6a ff                	push   $0xffffffff
   1002a:	60                   	pusha  
   1002b:	1e                   	push   %ds
   1002c:	06                   	push   %es
   1002d:	0f a0                	push   %fs
   1002f:	0f a8                	push   %gs
   10031:	54                   	push   %esp
   10032:	e8 33 25 00 00       	call   1256a <do_handler_unknown>
   10037:	83 c4 04             	add    $0x4,%esp
   1003a:	0f a9                	pop    %gs
   1003c:	0f a1                	pop    %fs
   1003e:	07                   	pop    %es
   1003f:	1f                   	pop    %ds
   10040:	61                   	popa   
   10041:	83 c4 08             	add    $0x8,%esp
   10044:	cf                   	iret   

00010045 <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   10045:	6a 00                	push   $0x0
   10047:	6a 00                	push   $0x0
   10049:	60                   	pusha  
   1004a:	1e                   	push   %ds
   1004b:	06                   	push   %es
   1004c:	0f a0                	push   %fs
   1004e:	0f a8                	push   %gs
   10050:	54                   	push   %esp
   10051:	e8 30 25 00 00       	call   12586 <do_handler_divide_error>
   10056:	83 c4 04             	add    $0x4,%esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 2d 25 00 00       	call   125a2 <do_handler_debug_exception>
   10075:	83 c4 04             	add    $0x4,%esp
   10078:	0f a9                	pop    %gs
   1007a:	0f a1                	pop    %fs
   1007c:	07                   	pop    %es
   1007d:	1f                   	pop    %ds
   1007e:	61                   	popa   
   1007f:	83 c4 08             	add    $0x8,%esp
   10082:	cf                   	iret   

00010083 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10083:	6a 00                	push   $0x0
   10085:	6a 02                	push   $0x2
   10087:	60                   	pusha  
   10088:	1e                   	push   %ds
   10089:	06                   	push   %es
   1008a:	0f a0                	push   %fs
   1008c:	0f a8                	push   %gs
   1008e:	54                   	push   %esp
   1008f:	e8 2a 25 00 00       	call   125be <do_handler_nmi_interrupt>
   10094:	83 c4 04             	add    $0x4,%esp
   10097:	0f a9                	pop    %gs
   10099:	0f a1                	pop    %fs
   1009b:	07                   	pop    %es
   1009c:	1f                   	pop    %ds
   1009d:	61                   	popa   
   1009e:	83 c4 08             	add    $0x8,%esp
   100a1:	cf                   	iret   

000100a2 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a2:	6a 00                	push   $0x0
   100a4:	6a 03                	push   $0x3
   100a6:	60                   	pusha  
   100a7:	1e                   	push   %ds
   100a8:	06                   	push   %es
   100a9:	0f a0                	push   %fs
   100ab:	0f a8                	push   %gs
   100ad:	54                   	push   %esp
   100ae:	e8 27 25 00 00       	call   125da <do_handler_breakpoint>
   100b3:	83 c4 04             	add    $0x4,%esp
   100b6:	0f a9                	pop    %gs
   100b8:	0f a1                	pop    %fs
   100ba:	07                   	pop    %es
   100bb:	1f                   	pop    %ds
   100bc:	61                   	popa   
   100bd:	83 c4 08             	add    $0x8,%esp
   100c0:	cf                   	iret   

000100c1 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c1:	6a 00                	push   $0x0
   100c3:	6a 04                	push   $0x4
   100c5:	60                   	pusha  
   100c6:	1e                   	push   %ds
   100c7:	06                   	push   %es
   100c8:	0f a0                	push   %fs
   100ca:	0f a8                	push   %gs
   100cc:	54                   	push   %esp
   100cd:	e8 24 25 00 00       	call   125f6 <do_handler_overflow>
   100d2:	83 c4 04             	add    $0x4,%esp
   100d5:	0f a9                	pop    %gs
   100d7:	0f a1                	pop    %fs
   100d9:	07                   	pop    %es
   100da:	1f                   	pop    %ds
   100db:	61                   	popa   
   100dc:	83 c4 08             	add    $0x8,%esp
   100df:	cf                   	iret   

000100e0 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e0:	6a 00                	push   $0x0
   100e2:	6a 05                	push   $0x5
   100e4:	60                   	pusha  
   100e5:	1e                   	push   %ds
   100e6:	06                   	push   %es
   100e7:	0f a0                	push   %fs
   100e9:	0f a8                	push   %gs
   100eb:	54                   	push   %esp
   100ec:	e8 21 25 00 00       	call   12612 <do_handler_bound_range_exceed>
   100f1:	83 c4 04             	add    $0x4,%esp
   100f4:	0f a9                	pop    %gs
   100f6:	0f a1                	pop    %fs
   100f8:	07                   	pop    %es
   100f9:	1f                   	pop    %ds
   100fa:	61                   	popa   
   100fb:	83 c4 08             	add    $0x8,%esp
   100fe:	cf                   	iret   

000100ff <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   100ff:	6a 00                	push   $0x0
   10101:	6a 06                	push   $0x6
   10103:	60                   	pusha  
   10104:	1e                   	push   %ds
   10105:	06                   	push   %es
   10106:	0f a0                	push   %fs
   10108:	0f a8                	push   %gs
   1010a:	54                   	push   %esp
   1010b:	e8 1e 25 00 00       	call   1262e <do_handler_invalid_opcode>
   10110:	83 c4 04             	add    $0x4,%esp
   10113:	0f a9                	pop    %gs
   10115:	0f a1                	pop    %fs
   10117:	07                   	pop    %es
   10118:	1f                   	pop    %ds
   10119:	61                   	popa   
   1011a:	83 c4 08             	add    $0x8,%esp
   1011d:	cf                   	iret   

0001011e <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   1011e:	6a 00                	push   $0x0
   10120:	6a 07                	push   $0x7
   10122:	60                   	pusha  
   10123:	1e                   	push   %ds
   10124:	06                   	push   %es
   10125:	0f a0                	push   %fs
   10127:	0f a8                	push   %gs
   10129:	54                   	push   %esp
   1012a:	e8 1b 25 00 00       	call   1264a <do_handler_device_not_found>
   1012f:	83 c4 04             	add    $0x4,%esp
   10132:	0f a9                	pop    %gs
   10134:	0f a1                	pop    %fs
   10136:	07                   	pop    %es
   10137:	1f                   	pop    %ds
   10138:	61                   	popa   
   10139:	83 c4 08             	add    $0x8,%esp
   1013c:	cf                   	iret   

0001013d <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   1013d:	6a 08                	push   $0x8
   1013f:	60                   	pusha  
   10140:	1e                   	push   %ds
   10141:	06                   	push   %es
   10142:	0f a0                	push   %fs
   10144:	0f a8                	push   %gs
   10146:	54                   	push   %esp
   10147:	e8 1a 25 00 00       	call   12666 <do_handler_double_fault>
   1014c:	83 c4 04             	add    $0x4,%esp
   1014f:	0f a9                	pop    %gs
   10151:	0f a1                	pop    %fs
   10153:	07                   	pop    %es
   10154:	1f                   	pop    %ds
   10155:	61                   	popa   
   10156:	83 c4 08             	add    $0x8,%esp
   10159:	cf                   	iret   

0001015a <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015a:	6a 0a                	push   $0xa
   1015c:	60                   	pusha  
   1015d:	1e                   	push   %ds
   1015e:	06                   	push   %es
   1015f:	0f a0                	push   %fs
   10161:	0f a8                	push   %gs
   10163:	54                   	push   %esp
   10164:	e8 19 25 00 00       	call   12682 <do_handler_invalid_tss>
   10169:	83 c4 04             	add    $0x4,%esp
   1016c:	0f a9                	pop    %gs
   1016e:	0f a1                	pop    %fs
   10170:	07                   	pop    %es
   10171:	1f                   	pop    %ds
   10172:	61                   	popa   
   10173:	83 c4 08             	add    $0x8,%esp
   10176:	cf                   	iret   

00010177 <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   10177:	6a 0b                	push   $0xb
   10179:	60                   	pusha  
   1017a:	1e                   	push   %ds
   1017b:	06                   	push   %es
   1017c:	0f a0                	push   %fs
   1017e:	0f a8                	push   %gs
   10180:	54                   	push   %esp
   10181:	e8 18 25 00 00       	call   1269e <do_handler_segment_not_present>
   10186:	83 c4 04             	add    $0x4,%esp
   10189:	0f a9                	pop    %gs
   1018b:	0f a1                	pop    %fs
   1018d:	07                   	pop    %es
   1018e:	1f                   	pop    %ds
   1018f:	61                   	popa   
   10190:	83 c4 08             	add    $0x8,%esp
   10193:	cf                   	iret   

00010194 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10194:	6a 00                	push   $0x0
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 15 25 00 00       	call   126ba <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 14 25 00 00       	call   126d6 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 ac 25 00 00       	call   1278b <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 61 26 00 00       	call   1285f <do_handler_floating_point_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 60 26 00 00       	call   1287b <do_handler_aligment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 5d 26 00 00       	call   12897 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 5a 26 00 00       	call   128b3 <do_handler_simd_floating_point_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 57 26 00 00       	call   128cf <do_handler_virtualization_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   10286:	6a 15                	push   $0x15
   10288:	60                   	pusha  
   10289:	1e                   	push   %ds
   1028a:	06                   	push   %es
   1028b:	0f a0                	push   %fs
   1028d:	0f a8                	push   %gs
   1028f:	54                   	push   %esp
   10290:	e8 56 26 00 00       	call   128eb <do_handler_control_protection_exception>
   10295:	83 c4 04             	add    $0x4,%esp
   10298:	0f a9                	pop    %gs
   1029a:	0f a1                	pop    %fs
   1029c:	07                   	pop    %es
   1029d:	1f                   	pop    %ds
   1029e:	61                   	popa   
   1029f:	83 c4 08             	add    $0x8,%esp
   102a2:	cf                   	iret   

000102a3 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a3:	6a 00                	push   $0x0
   102a5:	6a 20                	push   $0x20
   102a7:	60                   	pusha  
   102a8:	1e                   	push   %ds
   102a9:	06                   	push   %es
   102aa:	0f a0                	push   %fs
   102ac:	0f a8                	push   %gs
   102ae:	54                   	push   %esp
   102af:	e8 76 2a 00 00       	call   12d2a <do_handler_timer>
   102b4:	83 c4 04             	add    $0x4,%esp
   102b7:	0f a9                	pop    %gs
   102b9:	0f a1                	pop    %fs
   102bb:	07                   	pop    %es
   102bc:	1f                   	pop    %ds
   102bd:	61                   	popa   
   102be:	83 c4 08             	add    $0x8,%esp
   102c1:	cf                   	iret   

000102c2 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c2:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102c6:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ca:	55                   	push   %ebp
    push %ebx
   102cb:	53                   	push   %ebx
    push %esi
   102cc:	56                   	push   %esi
    push %edi
   102cd:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102ce:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d0:	89 d4                	mov    %edx,%esp

    pop %edi
   102d2:	5f                   	pop    %edi
    pop %esi
   102d3:	5e                   	pop    %esi
    pop %ebx
   102d4:	5b                   	pop    %ebx
    pop %ebp
   102d5:	5d                   	pop    %ebp

    ret
   102d6:	c3                   	ret    

000102d7 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    pusha # 该指令会保存一系列指定的寄存器
   102d7:	60                   	pusha  

    push %ds
   102d8:	1e                   	push   %ds
    push %es
   102d9:	06                   	push   %es
    push %fs
   102da:	0f a0                	push   %fs
    push %gs
   102dc:	0f a8                	push   %gs

    pushf # push %eflags
   102de:	9c                   	pushf  
    
	# 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102df:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102e4:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102e6:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102e8:	8e e0                	mov    %eax,%fs
	mov %eax, %gs    
   102ea:	8e e8                	mov    %eax,%gs

    mov %esp, %eax  # 将这里作为结构体入口地址参数
   102ec:	89 e0                	mov    %esp,%eax
    push %eax
   102ee:	50                   	push   %eax

    call do_handler_syscall
   102ef:	e8 10 0d 00 00       	call   11004 <do_handler_syscall>

    add $4, %esp    # esp 向上调整，跳过结构体地址参数
   102f4:	83 c4 04             	add    $0x4,%esp

    popf  # pop %eflags
   102f7:	9d                   	popf   
    pop %gs
   102f8:	0f a9                	pop    %gs
    pop %fs
   102fa:	0f a1                	pop    %fs
    pop %es
   102fc:	07                   	pop    %es
    pop %ds
   102fd:	1f                   	pop    %ds
    popa
   102fe:	61                   	popa   

    retf $(5 * 4)
   102ff:	ca 14 00             	lret   $0x14

00010302 <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10305:	8b 55 08             	mov    0x8(%ebp),%edx
   10308:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030b:	01 d0                	add    %edx,%eax
   1030d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10310:	8b 45 0c             	mov    0xc(%ebp),%eax
   10313:	f7 d8                	neg    %eax
   10315:	21 d0                	and    %edx,%eax
}
   10317:	5d                   	pop    %ebp
   10318:	c3                   	ret    

00010319 <down2>:

// 向下对齐到界边界
static inline uint32_t down2(uint32_t size, uint32_t bound) {
   10319:	55                   	push   %ebp
   1031a:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	23 45 08             	and    0x8(%ebp),%eax
}
   10324:	5d                   	pop    %ebp
   10325:	c3                   	ret    

00010326 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10326:	55                   	push   %ebp
   10327:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10329:	8b 45 08             	mov    0x8(%ebp),%eax
   1032c:	0f 22 d8             	mov    %eax,%cr3
}
   1032f:	90                   	nop
   10330:	5d                   	pop    %ebp
   10331:	c3                   	ret    

00010332 <pde_index>:

#pragma pack()

// 返回vaddr在页目录中的索引
// 只取高10位
static inline uint32_t pde_index (uint32_t vaddr) {
   10332:	55                   	push   %ebp
   10333:	89 e5                	mov    %esp,%ebp
   10335:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	c1 e8 16             	shr    $0x16,%eax
   1033e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10341:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10344:	c9                   	leave  
   10345:	c3                   	ret    

00010346 <pde_paddr>:


// 获取pde中的地址字段
static inline uint32_t pde_paddr(pde_t * pde) {
   10346:	55                   	push   %ebp
   10347:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10350:	c0 ea 04             	shr    $0x4,%dl
   10353:	0f b6 d2             	movzbl %dl,%edx
   10356:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1035a:	c1 e1 04             	shl    $0x4,%ecx
   1035d:	09 ca                	or     %ecx,%edx
   1035f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10363:	c1 e0 0c             	shl    $0xc,%eax
   10366:	09 d0                	or     %edx,%eax
   10368:	c1 e0 0c             	shl    $0xc,%eax
}
   1036b:	5d                   	pop    %ebp
   1036c:	c3                   	ret    

0001036d <pte_index>:


// 返回vaddr在页表中的索引
// 取中间10位
static inline int pte_index(uint32_t vaddr) {
   1036d:	55                   	push   %ebp
   1036e:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	c1 e8 0c             	shr    $0xc,%eax
   10376:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <pte_paddr>:

// 获取pte中的物理地址
static inline uint32_t pte_paddr(pte_t * pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10387:	c0 ea 04             	shr    $0x4,%dl
   1038a:	0f b6 d2             	movzbl %dl,%edx
   1038d:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10391:	c1 e1 04             	shl    $0x4,%ecx
   10394:	09 ca                	or     %ecx,%edx
   10396:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1039a:	c1 e0 0c             	shl    $0xc,%eax
   1039d:	09 d0                	or     %edx,%eax
   1039f:	c1 e0 0c             	shl    $0xc,%eax
}
   103a2:	5d                   	pop    %ebp
   103a3:	c3                   	ret    

000103a4 <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   103a7:	ff 75 08             	pushl  0x8(%ebp)
   103aa:	e8 77 ff ff ff       	call   10326 <write_cr3>
   103af:	83 c4 04             	add    $0x4,%esp
}
   103b2:	90                   	nop
   103b3:	c9                   	leave  
   103b4:	c3                   	ret    

000103b5 <get_pte_perm>:


static inline uint32_t get_pte_perm(pte_t* pte) {
   103b5:	55                   	push   %ebp
   103b6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x3ff);
   103b8:	8b 45 08             	mov    0x8(%ebp),%eax
   103bb:	8b 00                	mov    (%eax),%eax
   103bd:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   103c2:	5d                   	pop    %ebp
   103c3:	c3                   	ret    

000103c4 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   103c4:	55                   	push   %ebp
   103c5:	89 e5                	mov    %esp,%ebp
   103c7:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	83 ec 08             	sub    $0x8,%esp
   103d0:	68 ec 41 01 00       	push   $0x141ec
   103d5:	50                   	push   %eax
   103d6:	e8 74 2f 00 00       	call   1334f <mutex_init>
   103db:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	8b 55 10             	mov    0x10(%ebp),%edx
   103e4:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	8b 55 14             	mov    0x14(%ebp),%edx
   103ed:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103f0:	8b 45 08             	mov    0x8(%ebp),%eax
   103f3:	8b 55 18             	mov    0x18(%ebp),%edx
   103f6:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103f9:	8b 45 08             	mov    0x8(%ebp),%eax
   103fc:	8b 40 60             	mov    0x60(%eax),%eax
   103ff:	ba 00 00 00 00       	mov    $0x0,%edx
   10404:	f7 75 18             	divl   0x18(%ebp)
   10407:	89 c2                	mov    %eax,%edx
   10409:	8b 45 08             	mov    0x8(%ebp),%eax
   1040c:	83 c0 54             	add    $0x54,%eax
   1040f:	6a 00                	push   $0x0
   10411:	52                   	push   %edx
   10412:	ff 75 0c             	pushl  0xc(%ebp)
   10415:	50                   	push   %eax
   10416:	e8 1d 32 00 00       	call   13638 <bitmap_init>
   1041b:	83 c4 10             	add    $0x10,%esp
}
   1041e:	90                   	nop
   1041f:	c9                   	leave  
   10420:	c3                   	ret    

00010421 <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   10421:	55                   	push   %ebp
   10422:	89 e5                	mov    %esp,%ebp
   10424:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10427:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	83 ec 0c             	sub    $0xc,%esp
   10434:	50                   	push   %eax
   10435:	e8 56 2f 00 00       	call   13390 <mutex_acquire>
   1043a:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1043d:	8b 45 08             	mov    0x8(%ebp),%eax
   10440:	83 c0 54             	add    $0x54,%eax
   10443:	83 ec 04             	sub    $0x4,%esp
   10446:	ff 75 0c             	pushl  0xc(%ebp)
   10449:	6a 00                	push   $0x0
   1044b:	50                   	push   %eax
   1044c:	e8 63 33 00 00       	call   137b4 <bitmap_alloc_nbits>
   10451:	83 c4 10             	add    $0x10,%esp
   10454:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10457:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1045b:	78 17                	js     10474 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	8b 50 5c             	mov    0x5c(%eax),%edx
   10463:	8b 45 08             	mov    0x8(%ebp),%eax
   10466:	8b 48 64             	mov    0x64(%eax),%ecx
   10469:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1046c:	0f af c1             	imul   %ecx,%eax
   1046f:	01 d0                	add    %edx,%eax
   10471:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	83 ec 0c             	sub    $0xc,%esp
   1047a:	50                   	push   %eax
   1047b:	e8 9e 2f 00 00       	call   1341e <mutex_release>
   10480:	83 c4 10             	add    $0x10,%esp

    return addr;
   10483:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10486:	c9                   	leave  
   10487:	c3                   	ret    

00010488 <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10488:	55                   	push   %ebp
   10489:	89 e5                	mov    %esp,%ebp
   1048b:	53                   	push   %ebx
   1048c:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   1048f:	8b 45 08             	mov    0x8(%ebp),%eax
   10492:	83 ec 0c             	sub    $0xc,%esp
   10495:	50                   	push   %eax
   10496:	e8 f5 2e 00 00       	call   13390 <mutex_acquire>
   1049b:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1049e:	8b 45 08             	mov    0x8(%ebp),%eax
   104a1:	8b 40 5c             	mov    0x5c(%eax),%eax
   104a4:	8b 55 0c             	mov    0xc(%ebp),%edx
   104a7:	89 d1                	mov    %edx,%ecx
   104a9:	29 c1                	sub    %eax,%ecx
   104ab:	8b 45 08             	mov    0x8(%ebp),%eax
   104ae:	8b 58 64             	mov    0x64(%eax),%ebx
   104b1:	89 c8                	mov    %ecx,%eax
   104b3:	ba 00 00 00 00       	mov    $0x0,%edx
   104b8:	f7 f3                	div    %ebx
   104ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   104bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c0:	8b 55 08             	mov    0x8(%ebp),%edx
   104c3:	83 c2 54             	add    $0x54,%edx
   104c6:	6a 00                	push   $0x0
   104c8:	ff 75 10             	pushl  0x10(%ebp)
   104cb:	50                   	push   %eax
   104cc:	52                   	push   %edx
   104cd:	e8 b9 31 00 00       	call   1368b <bitmap_set_bit>
   104d2:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104d5:	8b 45 08             	mov    0x8(%ebp),%eax
   104d8:	83 ec 0c             	sub    $0xc,%esp
   104db:	50                   	push   %eax
   104dc:	e8 3d 2f 00 00       	call   1341e <mutex_release>
   104e1:	83 c4 10             	add    $0x10,%esp
}
   104e4:	90                   	nop
   104e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104e8:	c9                   	leave  
   104e9:	c3                   	ret    

000104ea <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104ea:	55                   	push   %ebp
   104eb:	89 e5                	mov    %esp,%ebp
   104ed:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104f0:	83 ec 0c             	sub    $0xc,%esp
   104f3:	68 f9 41 01 00       	push   $0x141f9
   104f8:	e8 0e 3c 00 00       	call   1410b <log_printf>
   104fd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10500:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10507:	eb 29                	jmp    10532 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   10509:	8b 45 08             	mov    0x8(%ebp),%eax
   1050c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1050f:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10519:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1051c:	52                   	push   %edx
   1051d:	50                   	push   %eax
   1051e:	ff 75 f4             	pushl  -0xc(%ebp)
   10521:	68 05 42 01 00       	push   $0x14205
   10526:	e8 e0 3b 00 00       	call   1410b <log_printf>
   1052b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10532:	8b 45 08             	mov    0x8(%ebp),%eax
   10535:	8b 40 50             	mov    0x50(%eax),%eax
   10538:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1053b:	7c cc                	jl     10509 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1053d:	83 ec 0c             	sub    $0xc,%esp
   10540:	68 13 42 01 00       	push   $0x14213
   10545:	e8 c1 3b 00 00       	call   1410b <log_printf>
   1054a:	83 c4 10             	add    $0x10,%esp
}
   1054d:	90                   	nop
   1054e:	c9                   	leave  
   1054f:	c3                   	ret    

00010550 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   10550:	55                   	push   %ebp
   10551:	89 e5                	mov    %esp,%ebp
   10553:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10556:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10564:	eb 16                	jmp    1057c <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10566:	8b 45 08             	mov    0x8(%ebp),%eax
   10569:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1056c:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10570:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10573:	01 d0                	add    %edx,%eax
   10575:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10578:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1057c:	8b 45 08             	mov    0x8(%ebp),%eax
   1057f:	8b 40 50             	mov    0x50(%eax),%eax
   10582:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10585:	7c df                	jl     10566 <total_mem_size+0x16>
    }
    return mem_size;
   10587:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1058a:	c9                   	leave  
   1058b:	c3                   	ret    

0001058c <test_alloc>:


static void test_alloc(void) {
   1058c:	55                   	push   %ebp
   1058d:	89 e5                	mov    %esp,%ebp
   1058f:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10595:	83 ec 0c             	sub    $0xc,%esp
   10598:	68 00 10 00 00       	push   $0x1000
   1059d:	68 00 00 04 00       	push   $0x40000
   105a2:	68 00 10 00 00       	push   $0x1000
   105a7:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   105ad:	50                   	push   %eax
   105ae:	8d 45 80             	lea    -0x80(%ebp),%eax
   105b1:	50                   	push   %eax
   105b2:	e8 0d fe ff ff       	call   103c4 <addr_alloc_init>
   105b7:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   105ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105c1:	eb 2b                	jmp    105ee <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   105c3:	83 ec 08             	sub    $0x8,%esp
   105c6:	6a 02                	push   $0x2
   105c8:	8d 45 80             	lea    -0x80(%ebp),%eax
   105cb:	50                   	push   %eax
   105cc:	e8 50 fe ff ff       	call   10421 <addr_alloc_page>
   105d1:	83 c4 10             	add    $0x10,%esp
   105d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105d7:	83 ec 08             	sub    $0x8,%esp
   105da:	ff 75 e8             	pushl  -0x18(%ebp)
   105dd:	68 15 42 01 00       	push   $0x14215
   105e2:	e8 24 3b 00 00       	call   1410b <log_printf>
   105e7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105ee:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105f2:	7e cf                	jle    105c3 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105f4:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10602:	eb 1f                	jmp    10623 <test_alloc+0x97>
        addr += 4096 * 2;
   10604:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   1060b:	83 ec 04             	sub    $0x4,%esp
   1060e:	6a 02                	push   $0x2
   10610:	ff 75 f0             	pushl  -0x10(%ebp)
   10613:	8d 45 80             	lea    -0x80(%ebp),%eax
   10616:	50                   	push   %eax
   10617:	e8 6c fe ff ff       	call   10488 <addr_free_page>
   1061c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   1061f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10623:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   10627:	7e db                	jle    10604 <test_alloc+0x78>
    }
}
   10629:	90                   	nop
   1062a:	c9                   	leave  
   1062b:	c3                   	ret    

0001062c <find_pte>:
// 建立/查找 PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   1062c:	55                   	push   %ebp
   1062d:	89 e5                	mov    %esp,%ebp
   1062f:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t* page_table;

    // pde_t* pde = &page_dir[pde_index(vaddr)];
    pde_t *pde = page_dir + pde_index(vaddr);
   10632:	ff 75 0c             	pushl  0xc(%ebp)
   10635:	e8 f8 fc ff ff       	call   10332 <pde_index>
   1063a:	83 c4 04             	add    $0x4,%esp
   1063d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10644:	8b 45 08             	mov    0x8(%ebp),%eax
   10647:	01 d0                	add    %edx,%eax
   10649:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   1064c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1064f:	0f b6 00             	movzbl (%eax),%eax
   10652:	83 e0 01             	and    $0x1,%eax
   10655:	84 c0                	test   %al,%al
   10657:	74 10                	je     10669 <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   10659:	ff 75 f0             	pushl  -0x10(%ebp)
   1065c:	e8 e5 fc ff ff       	call   10346 <pde_paddr>
   10661:	83 c4 04             	add    $0x4,%esp
   10664:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10667:	eb 57                	jmp    106c0 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   10669:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1066d:	75 07                	jne    10676 <find_pte+0x4a>
            return (pte_t*)0;
   1066f:	b8 00 00 00 00       	mov    $0x0,%eax
   10674:	eb 64                	jmp    106da <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10676:	83 ec 08             	sub    $0x8,%esp
   10679:	6a 01                	push   $0x1
   1067b:	68 00 60 01 00       	push   $0x16000
   10680:	e8 9c fd ff ff       	call   10421 <addr_alloc_page>
   10685:	83 c4 10             	add    $0x10,%esp
   10688:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1068b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1068f:	75 07                	jne    10698 <find_pte+0x6c>
            return (pte_t*)0;
   10691:	b8 00 00 00 00       	mov    $0x0,%eax
   10696:	eb 42                	jmp    106da <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10698:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1069b:	83 c8 07             	or     $0x7,%eax
   1069e:	89 c2                	mov    %eax,%edx
   106a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a3:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   106a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   106a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   106ab:	83 ec 04             	sub    $0x4,%esp
   106ae:	68 00 10 00 00       	push   $0x1000
   106b3:	6a 00                	push   $0x0
   106b5:	ff 75 f4             	pushl  -0xc(%ebp)
   106b8:	e8 6c 33 00 00       	call   13a29 <kmemset>
   106bd:	83 c4 10             	add    $0x10,%esp
    }

    // return &page_table[pte_index(vaddr)];
    return page_table + pte_index(vaddr);
   106c0:	83 ec 0c             	sub    $0xc,%esp
   106c3:	ff 75 0c             	pushl  0xc(%ebp)
   106c6:	e8 a2 fc ff ff       	call   1036d <pte_index>
   106cb:	83 c4 10             	add    $0x10,%esp
   106ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d8:	01 d0                	add    %edx,%eax
}
   106da:	c9                   	leave  
   106db:	c3                   	ret    

000106dc <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106dc:	55                   	push   %ebp
   106dd:	89 e5                	mov    %esp,%ebp
   106df:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106e9:	eb 6e                	jmp    10759 <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106eb:	83 ec 04             	sub    $0x4,%esp
   106ee:	6a 01                	push   $0x1
   106f0:	ff 75 0c             	pushl  0xc(%ebp)
   106f3:	ff 75 08             	pushl  0x8(%ebp)
   106f6:	e8 31 ff ff ff       	call   1062c <find_pte>
   106fb:	83 c4 10             	add    $0x10,%esp
   106fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   10701:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10705:	75 07                	jne    1070e <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10707:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1070c:	eb 53                	jmp    10761 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1070e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10711:	0f b6 00             	movzbl (%eax),%eax
   10714:	83 e0 01             	and    $0x1,%eax
   10717:	84 c0                	test   %al,%al
   10719:	74 1c                	je     10737 <memory_create_map+0x5b>
   1071b:	68 25 42 01 00       	push   $0x14225
   10720:	68 50 43 01 00       	push   $0x14350
   10725:	68 a5 00 00 00       	push   $0xa5
   1072a:	68 38 42 01 00       	push   $0x14238
   1072f:	e8 5a 36 00 00       	call   13d8e <pannic>
   10734:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   10737:	8b 45 10             	mov    0x10(%ebp),%eax
   1073a:	0b 45 18             	or     0x18(%ebp),%eax
   1073d:	83 c8 01             	or     $0x1,%eax
   10740:	89 c2                	mov    %eax,%edx
   10742:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10745:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   10747:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1074e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10755:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10759:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1075c:	3b 45 14             	cmp    0x14(%ebp),%eax
   1075f:	7c 8a                	jl     106eb <memory_create_map+0xf>
    }
}
   10761:	c9                   	leave  
   10762:	c3                   	ret    

00010763 <create_kernel_table>:


void create_kernel_table(void) {
   10763:	55                   	push   %ebp
   10764:	89 e5                	mov    %esp,%ebp
   10766:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   10769:	83 ec 04             	sub    $0x4,%esp
   1076c:	68 00 10 00 00       	push   $0x1000
   10771:	6a 00                	push   $0x0
   10773:	68 00 70 01 00       	push   $0x17000
   10778:	e8 ac 32 00 00       	call   13a29 <kmemset>
   1077d:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10780:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10787:	e9 98 00 00 00       	jmp    10824 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   1078c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1078f:	c1 e0 04             	shl    $0x4,%eax
   10792:	05 00 50 01 00       	add    $0x15000,%eax
   10797:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1079a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079d:	8b 00                	mov    (%eax),%eax
   1079f:	83 ec 08             	sub    $0x8,%esp
   107a2:	68 00 10 00 00       	push   $0x1000
   107a7:	50                   	push   %eax
   107a8:	e8 6c fb ff ff       	call   10319 <down2>
   107ad:	83 c4 10             	add    $0x10,%esp
   107b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   107b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107b6:	8b 40 04             	mov    0x4(%eax),%eax
   107b9:	83 ec 08             	sub    $0x8,%esp
   107bc:	68 00 10 00 00       	push   $0x1000
   107c1:	50                   	push   %eax
   107c2:	e8 3b fb ff ff       	call   10302 <up2>
   107c7:	83 c4 10             	add    $0x10,%esp
   107ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   107cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d0:	8b 40 08             	mov    0x8(%eax),%eax
   107d3:	83 ec 08             	sub    $0x8,%esp
   107d6:	68 00 10 00 00       	push   $0x1000
   107db:	50                   	push   %eax
   107dc:	e8 38 fb ff ff       	call   10319 <down2>
   107e1:	83 c4 10             	add    $0x10,%esp
   107e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107ea:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107ed:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107f3:	85 c0                	test   %eax,%eax
   107f5:	0f 48 c2             	cmovs  %edx,%eax
   107f8:	c1 f8 0c             	sar    $0xc,%eax
   107fb:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10801:	8b 48 0c             	mov    0xc(%eax),%ecx
   10804:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10807:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1080a:	83 ec 0c             	sub    $0xc,%esp
   1080d:	51                   	push   %ecx
   1080e:	ff 75 e0             	pushl  -0x20(%ebp)
   10811:	52                   	push   %edx
   10812:	50                   	push   %eax
   10813:	68 00 70 01 00       	push   $0x17000
   10818:	e8 bf fe ff ff       	call   106dc <memory_create_map>
   1081d:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10820:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10824:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10827:	83 f8 03             	cmp    $0x3,%eax
   1082a:	0f 86 5c ff ff ff    	jbe    1078c <create_kernel_table+0x29>
    }
}
   10830:	90                   	nop
   10831:	c9                   	leave  
   10832:	c3                   	ret    

00010833 <memory_create_uvm>:

// 创建进程的初始页表
// 主要的工作创建页目录表，然后从内核页表中复制一部分
uint32_t memory_create_uvm(void) {
   10833:	55                   	push   %ebp
   10834:	89 e5                	mov    %esp,%ebp
   10836:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   10839:	83 ec 08             	sub    $0x8,%esp
   1083c:	6a 01                	push   $0x1
   1083e:	68 00 60 01 00       	push   $0x16000
   10843:	e8 d9 fb ff ff       	call   10421 <addr_alloc_page>
   10848:	83 c4 10             	add    $0x10,%esp
   1084b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   1084e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10852:	75 07                	jne    1085b <memory_create_uvm+0x28>
        return 0;
   10854:	b8 00 00 00 00       	mov    $0x0,%eax
   10859:	eb 5b                	jmp    108b6 <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   1085b:	83 ec 04             	sub    $0x4,%esp
   1085e:	68 00 10 00 00       	push   $0x1000
   10863:	6a 00                	push   $0x0
   10865:	ff 75 f0             	pushl  -0x10(%ebp)
   10868:	e8 bc 31 00 00       	call   13a29 <kmemset>
   1086d:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10870:	83 ec 0c             	sub    $0xc,%esp
   10873:	68 00 00 00 80       	push   $0x80000000
   10878:	e8 b5 fa ff ff       	call   10332 <pde_index>
   1087d:	83 c4 10             	add    $0x10,%esp
   10880:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10883:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1088a:	eb 1f                	jmp    108ab <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10896:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10899:	01 c2                	add    %eax,%edx
   1089b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089e:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   108a5:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   108a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108ae:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   108b1:	77 d9                	ja     1088c <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   108b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   108b6:	c9                   	leave  
   108b7:	c3                   	ret    

000108b8 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   108b8:	55                   	push   %ebp
   108b9:	89 e5                	mov    %esp,%ebp
   108bb:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   108be:	83 ec 0c             	sub    $0xc,%esp
   108c1:	68 7f 42 01 00       	push   $0x1427f
   108c6:	e8 40 38 00 00       	call   1410b <log_printf>
   108cb:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   108ce:	83 ec 0c             	sub    $0xc,%esp
   108d1:	ff 75 08             	pushl  0x8(%ebp)
   108d4:	e8 11 fc ff ff       	call   104ea <show_mem_info>
   108d9:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108dc:	c7 45 f4 fa 31 04 00 	movl   $0x431fa,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108e3:	83 ec 0c             	sub    $0xc,%esp
   108e6:	ff 75 08             	pushl  0x8(%ebp)
   108e9:	e8 62 fc ff ff       	call   10550 <total_mem_size>
   108ee:	83 c4 10             	add    $0x10,%esp
   108f1:	2d 00 00 10 00       	sub    $0x100000,%eax
   108f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108f9:	83 ec 08             	sub    $0x8,%esp
   108fc:	68 00 10 00 00       	push   $0x1000
   10901:	ff 75 f0             	pushl  -0x10(%ebp)
   10904:	e8 10 fa ff ff       	call   10319 <down2>
   10909:	83 c4 10             	add    $0x10,%esp
   1090c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   1090f:	83 ec 04             	sub    $0x4,%esp
   10912:	ff 75 f0             	pushl  -0x10(%ebp)
   10915:	68 00 00 10 00       	push   $0x100000
   1091a:	68 89 42 01 00       	push   $0x14289
   1091f:	e8 e7 37 00 00       	call   1410b <log_printf>
   10924:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10927:	83 ec 0c             	sub    $0xc,%esp
   1092a:	68 00 10 00 00       	push   $0x1000
   1092f:	ff 75 f0             	pushl  -0x10(%ebp)
   10932:	68 00 00 10 00       	push   $0x100000
   10937:	ff 75 f4             	pushl  -0xc(%ebp)
   1093a:	68 00 60 01 00       	push   $0x16000
   1093f:	e8 80 fa ff ff       	call   103c4 <addr_alloc_init>
   10944:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10947:	a1 60 60 01 00       	mov    0x16060,%eax
   1094c:	c1 e8 0c             	shr    $0xc,%eax
   1094f:	83 ec 0c             	sub    $0xc,%esp
   10952:	50                   	push   %eax
   10953:	e8 ca 2c 00 00       	call   13622 <bitmap_byte_count>
   10958:	83 c4 10             	add    $0x10,%esp
   1095b:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   1095e:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10965:	76 1c                	jbe    10983 <memory_init+0xcb>
   10967:	68 a4 42 01 00       	push   $0x142a4
   1096c:	68 64 43 01 00       	push   $0x14364
   10971:	68 00 01 00 00       	push   $0x100
   10976:	68 38 42 01 00       	push   $0x14238
   1097b:	e8 0e 34 00 00       	call   13d8e <pannic>
   10980:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10983:	e8 db fd ff ff       	call   10763 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10988:	b8 00 70 01 00       	mov    $0x17000,%eax
   1098d:	83 ec 0c             	sub    $0xc,%esp
   10990:	50                   	push   %eax
   10991:	e8 0e fa ff ff       	call   103a4 <mmu_set_page_dir>
   10996:	83 c4 10             	add    $0x10,%esp
}
   10999:	90                   	nop
   1099a:	c9                   	leave  
   1099b:	c3                   	ret    

0001099c <memory_copy_uvm_data>:


// 在不同的进程空间中拷贝字符串
// page_dir为目标页表，当前仍为老页表
// 和xv6的函数很像，物理页不连续要逐页拷贝
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   1099c:	55                   	push   %ebp
   1099d:	89 e5                	mov    %esp,%ebp
   1099f:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while (size > 0) {
   109a2:	eb 6e                	jmp    10a12 <memory_copy_uvm_data+0x76>
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   109a4:	83 ec 08             	sub    $0x8,%esp
   109a7:	ff 75 08             	pushl  0x8(%ebp)
   109aa:	ff 75 0c             	pushl  0xc(%ebp)
   109ad:	e8 f2 05 00 00       	call   10fa4 <memory_get_paddr>
   109b2:	83 c4 10             	add    $0x10,%esp
   109b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   109b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   109bc:	75 07                	jne    109c5 <memory_copy_uvm_data+0x29>
            return -1;
   109be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   109c3:	eb 58                	jmp    10a1d <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   109c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109c8:	25 ff 0f 00 00       	and    $0xfff,%eax
   109cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   109d0:	b8 00 10 00 00       	mov    $0x1000,%eax
   109d5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   109d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   109db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109de:	3b 45 14             	cmp    0x14(%ebp),%eax
   109e1:	76 06                	jbe    109e9 <memory_copy_uvm_data+0x4d>
            curr_size = size;       // 如果比较大，超过页边界，则只拷贝此页内的
   109e3:	8b 45 14             	mov    0x14(%ebp),%eax
   109e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kmemcpy((void *)to_paddr, (void *)from, curr_size);
   109e9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   109ec:	8b 55 10             	mov    0x10(%ebp),%edx
   109ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109f2:	83 ec 04             	sub    $0x4,%esp
   109f5:	51                   	push   %ecx
   109f6:	52                   	push   %edx
   109f7:	50                   	push   %eax
   109f8:	e8 dd 2f 00 00       	call   139da <kmemcpy>
   109fd:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10a00:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a03:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a09:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a0f:	01 45 10             	add    %eax,0x10(%ebp)
    while (size > 0) {
   10a12:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10a16:	75 8c                	jne    109a4 <memory_copy_uvm_data+0x8>
    }

    return 0;
   10a18:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a1d:	c9                   	leave  
   10a1e:	c3                   	ret    

00010a1f <memory_alloc_for_page_dir>:
// 构造可用空间
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a1f:	55                   	push   %ebp
   10a20:	89 e5                	mov    %esp,%ebp
   10a22:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10a25:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a28:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10a2b:	68 00 10 00 00       	push   $0x1000
   10a30:	ff 75 10             	pushl  0x10(%ebp)
   10a33:	e8 ca f8 ff ff       	call   10302 <up2>
   10a38:	83 c4 08             	add    $0x8,%esp
   10a3b:	c1 e8 0c             	shr    $0xc,%eax
   10a3e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   10a41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10a48:	e9 8d 00 00 00       	jmp    10ada <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10a4d:	83 ec 08             	sub    $0x8,%esp
   10a50:	6a 01                	push   $0x1
   10a52:	68 00 60 01 00       	push   $0x16000
   10a57:	e8 c5 f9 ff ff       	call   10421 <addr_alloc_page>
   10a5c:	83 c4 10             	add    $0x10,%esp
   10a5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10a62:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10a66:	75 17                	jne    10a7f <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   10a68:	83 ec 0c             	sub    $0xc,%esp
   10a6b:	68 cc 42 01 00       	push   $0x142cc
   10a70:	e8 96 36 00 00       	call   1410b <log_printf>
   10a75:	83 c4 10             	add    $0x10,%esp
            return 0;
   10a78:	b8 00 00 00 00       	mov    $0x0,%eax
   10a7d:	eb 6c                	jmp    10aeb <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   10a7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a82:	83 ec 0c             	sub    $0xc,%esp
   10a85:	ff 75 14             	pushl  0x14(%ebp)
   10a88:	6a 01                	push   $0x1
   10a8a:	ff 75 e8             	pushl  -0x18(%ebp)
   10a8d:	ff 75 f4             	pushl  -0xc(%ebp)
   10a90:	50                   	push   %eax
   10a91:	e8 46 fc ff ff       	call   106dc <memory_create_map>
   10a96:	83 c4 20             	add    $0x20,%esp
   10a99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10a9c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10aa0:	79 2d                	jns    10acf <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   10aa2:	83 ec 0c             	sub    $0xc,%esp
   10aa5:	68 ec 42 01 00       	push   $0x142ec
   10aaa:	e8 5c 36 00 00       	call   1410b <log_printf>
   10aaf:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   10ab2:	83 ec 04             	sub    $0x4,%esp
   10ab5:	ff 75 f0             	pushl  -0x10(%ebp)
   10ab8:	ff 75 0c             	pushl  0xc(%ebp)
   10abb:	68 00 60 01 00       	push   $0x16000
   10ac0:	e8 c3 f9 ff ff       	call   10488 <addr_free_page>
   10ac5:	83 c4 10             	add    $0x10,%esp

            return 0;
   10ac8:	b8 00 00 00 00       	mov    $0x0,%eax
   10acd:	eb 1c                	jmp    10aeb <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10acf:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10ad6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10add:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10ae0:	0f 8c 67 ff ff ff    	jl     10a4d <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10ae6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10aeb:	c9                   	leave  
   10aec:	c3                   	ret    

00010aed <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常是0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10aed:	55                   	push   %ebp
   10aee:	89 e5                	mov    %esp,%ebp
   10af0:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10af3:	e8 d9 0b 00 00       	call   116d1 <task_current>
   10af8:	8b 40 6c             	mov    0x6c(%eax),%eax
   10afb:	ff 75 10             	pushl  0x10(%ebp)
   10afe:	ff 75 0c             	pushl  0xc(%ebp)
   10b01:	ff 75 08             	pushl  0x8(%ebp)
   10b04:	50                   	push   %eax
   10b05:	e8 15 ff ff ff       	call   10a1f <memory_alloc_for_page_dir>
   10b0a:	83 c4 10             	add    $0x10,%esp
}
   10b0d:	c9                   	leave  
   10b0e:	c3                   	ret    

00010b0f <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10b0f:	55                   	push   %ebp
   10b10:	89 e5                	mov    %esp,%ebp
   10b12:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10b15:	e8 b7 0b 00 00       	call   116d1 <task_current>
   10b1a:	8b 40 6c             	mov    0x6c(%eax),%eax
}
   10b1d:	c9                   	leave  
   10b1e:	c3                   	ret    

00010b1f <memory_alloc_page>:


// 以页为单位，分配虚拟内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10b1f:	55                   	push   %ebp
   10b20:	89 e5                	mov    %esp,%ebp
   10b22:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10b25:	83 ec 08             	sub    $0x8,%esp
   10b28:	6a 01                	push   $0x1
   10b2a:	68 00 60 01 00       	push   $0x16000
   10b2f:	e8 ed f8 ff ff       	call   10421 <addr_alloc_page>
   10b34:	83 c4 10             	add    $0x10,%esp
   10b37:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10b3d:	c9                   	leave  
   10b3e:	c3                   	ret    

00010b3f <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的虚拟内存
void memory_free_page(uint32_t vaddr) {
   10b3f:	55                   	push   %ebp
   10b40:	89 e5                	mov    %esp,%ebp
   10b42:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10b45:	8b 45 08             	mov    0x8(%ebp),%eax
   10b48:	85 c0                	test   %eax,%eax
   10b4a:	78 17                	js     10b63 <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10b4c:	83 ec 04             	sub    $0x4,%esp
   10b4f:	6a 01                	push   $0x1
   10b51:	ff 75 08             	pushl  0x8(%ebp)
   10b54:	68 00 60 01 00       	push   $0x16000
   10b59:	e8 2a f9 ff ff       	call   10488 <addr_free_page>
   10b5e:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10b61:	eb 72                	jmp    10bd5 <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10b63:	e8 a7 ff ff ff       	call   10b0f <curr_page_dir>
   10b68:	83 ec 04             	sub    $0x4,%esp
   10b6b:	6a 00                	push   $0x0
   10b6d:	ff 75 08             	pushl  0x8(%ebp)
   10b70:	50                   	push   %eax
   10b71:	e8 b6 fa ff ff       	call   1062c <find_pte>
   10b76:	83 c4 10             	add    $0x10,%esp
   10b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10b7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b80:	75 0d                	jne    10b8f <memory_free_page+0x50>
   10b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b85:	0f b6 00             	movzbl (%eax),%eax
   10b88:	83 e0 01             	and    $0x1,%eax
   10b8b:	84 c0                	test   %al,%al
   10b8d:	75 1c                	jne    10bab <memory_free_page+0x6c>
   10b8f:	68 20 43 01 00       	push   $0x14320
   10b94:	68 70 43 01 00       	push   $0x14370
   10b99:	68 6d 01 00 00       	push   $0x16d
   10b9e:	68 38 42 01 00       	push   $0x14238
   10ba3:	e8 e6 31 00 00       	call   13d8e <pannic>
   10ba8:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10bab:	83 ec 0c             	sub    $0xc,%esp
   10bae:	ff 75 f4             	pushl  -0xc(%ebp)
   10bb1:	e8 c7 f7 ff ff       	call   1037d <pte_paddr>
   10bb6:	83 c4 10             	add    $0x10,%esp
   10bb9:	83 ec 04             	sub    $0x4,%esp
   10bbc:	6a 01                	push   $0x1
   10bbe:	50                   	push   %eax
   10bbf:	68 00 60 01 00       	push   $0x16000
   10bc4:	e8 bf f8 ff ff       	call   10488 <addr_free_page>
   10bc9:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bcf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10bd5:	90                   	nop
   10bd6:	c9                   	leave  
   10bd7:	c3                   	ret    

00010bd8 <kalloc>:

/*-- ------------------------------ --*/
// 申请一页物理内存。
static uint32_t kalloc() {
   10bd8:	55                   	push   %ebp
   10bd9:	89 e5                	mov    %esp,%ebp
   10bdb:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10bde:	83 ec 08             	sub    $0x8,%esp
   10be1:	6a 01                	push   $0x1
   10be3:	68 00 60 01 00       	push   $0x16000
   10be8:	e8 34 f8 ff ff       	call   10421 <addr_alloc_page>
   10bed:	83 c4 10             	add    $0x10,%esp
}
   10bf0:	c9                   	leave  
   10bf1:	c3                   	ret    

00010bf2 <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr) {
   10bf2:	55                   	push   %ebp
   10bf3:	89 e5                	mov    %esp,%ebp
   10bf5:	83 ec 08             	sub    $0x8,%esp
    addr_free_page(&paddr_alloc, addr, 1);
   10bf8:	83 ec 04             	sub    $0x4,%esp
   10bfb:	6a 01                	push   $0x1
   10bfd:	ff 75 08             	pushl  0x8(%ebp)
   10c00:	68 00 60 01 00       	push   $0x16000
   10c05:	e8 7e f8 ff ff       	call   10488 <addr_free_page>
   10c0a:	83 c4 10             	add    $0x10,%esp
}
   10c0d:	90                   	nop
   10c0e:	c9                   	leave  
   10c0f:	c3                   	ret    

00010c10 <memory_destroy_uvm>:
/*-- ------------------------------ --*/


// 销毁用户空间内存
void memory_destroy_uvm(uint32_t page_dir) {
   10c10:	55                   	push   %ebp
   10c11:	89 e5                	mov    %esp,%ebp
   10c13:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(page_dir);
   10c16:	ff 75 08             	pushl  0x8(%ebp)
   10c19:	e8 14 f7 ff ff       	call   10332 <pde_index>
   10c1e:	83 c4 04             	add    $0x4,%esp
   10c21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t* pde = (pde_t*)page_dir + user_pde_start;
   10c24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10c27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c31:	01 d0                	add    %edx,%eax
   10c33:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   10c36:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10c3a:	75 1c                	jne    10c58 <memory_destroy_uvm+0x48>
   10c3c:	68 41 43 01 00       	push   $0x14341
   10c41:	68 84 43 01 00       	push   $0x14384
   10c46:	68 88 01 00 00       	push   $0x188
   10c4b:	68 38 42 01 00       	push   $0x14238
   10c50:	e8 39 31 00 00       	call   13d8e <pannic>
   10c55:	83 c4 10             	add    $0x10,%esp

    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10c58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10c5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10c5e:	e9 87 00 00 00       	jmp    10cea <memory_destroy_uvm+0xda>
        if (!pde->present) {
   10c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c66:	0f b6 00             	movzbl (%eax),%eax
   10c69:	83 e0 01             	and    $0x1,%eax
   10c6c:	84 c0                	test   %al,%al
   10c6e:	74 71                	je     10ce1 <memory_destroy_uvm+0xd1>
            continue;
        }

        pte_t* pte = (pte_t*)pde_paddr(pde);
   10c70:	83 ec 0c             	sub    $0xc,%esp
   10c73:	ff 75 f4             	pushl  -0xc(%ebp)
   10c76:	e8 cb f6 ff ff       	call   10346 <pde_paddr>
   10c7b:	83 c4 10             	add    $0x10,%esp
   10c7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10c81:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10c88:	eb 32                	jmp    10cbc <memory_destroy_uvm+0xac>
            if (!pte->present) {
   10c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10c8d:	0f b6 00             	movzbl (%eax),%eax
   10c90:	83 e0 01             	and    $0x1,%eax
   10c93:	84 c0                	test   %al,%al
   10c95:	74 1c                	je     10cb3 <memory_destroy_uvm+0xa3>
                continue;
            }

            // addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
            kfree(pte_paddr(pte));
   10c97:	83 ec 0c             	sub    $0xc,%esp
   10c9a:	ff 75 ec             	pushl  -0x14(%ebp)
   10c9d:	e8 db f6 ff ff       	call   1037d <pte_paddr>
   10ca2:	83 c4 10             	add    $0x10,%esp
   10ca5:	83 ec 0c             	sub    $0xc,%esp
   10ca8:	50                   	push   %eax
   10ca9:	e8 44 ff ff ff       	call   10bf2 <kfree>
   10cae:	83 c4 10             	add    $0x10,%esp
   10cb1:	eb 01                	jmp    10cb4 <memory_destroy_uvm+0xa4>
                continue;
   10cb3:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10cb4:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10cb8:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10cbc:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10cc3:	7e c5                	jle    10c8a <memory_destroy_uvm+0x7a>
        }

        // addr_free_page(&paddr_alloc, pde_paddr(pde), 1);
        kfree(pde_paddr(pde));
   10cc5:	83 ec 0c             	sub    $0xc,%esp
   10cc8:	ff 75 f4             	pushl  -0xc(%ebp)
   10ccb:	e8 76 f6 ff ff       	call   10346 <pde_paddr>
   10cd0:	83 c4 10             	add    $0x10,%esp
   10cd3:	83 ec 0c             	sub    $0xc,%esp
   10cd6:	50                   	push   %eax
   10cd7:	e8 16 ff ff ff       	call   10bf2 <kfree>
   10cdc:	83 c4 10             	add    $0x10,%esp
   10cdf:	eb 01                	jmp    10ce2 <memory_destroy_uvm+0xd2>
            continue;
   10ce1:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10ce2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10ce6:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10cea:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10cf1:	0f 8e 6c ff ff ff    	jle    10c63 <memory_destroy_uvm+0x53>
    }

    // addr_free_page(&paddr_alloc, page_dir, 1);
    kfree(page_dir);
   10cf7:	83 ec 0c             	sub    $0xc,%esp
   10cfa:	ff 75 08             	pushl  0x8(%ebp)
   10cfd:	e8 f0 fe ff ff       	call   10bf2 <kfree>
   10d02:	83 c4 10             	add    $0x10,%esp
}
   10d05:	90                   	nop
   10d06:	c9                   	leave  
   10d07:	c3                   	ret    

00010d08 <memory_copy_uvm>:


// 新建立一个页表，并把参数中的页表内容拷贝过去
// 0x80000000以下的部分不管
uint32_t memory_copy_uvm(uint32_t page_dir) {
   10d08:	55                   	push   %ebp
   10d09:	89 e5                	mov    %esp,%ebp
   10d0b:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   10d0e:	e8 20 fb ff ff       	call   10833 <memory_create_uvm>
   10d13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10d16:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d1a:	0f 84 1b 01 00 00    	je     10e3b <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项,0x80000000以上的
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10d20:	83 ec 0c             	sub    $0xc,%esp
   10d23:	68 00 00 00 80       	push   $0x80000000
   10d28:	e8 05 f6 ff ff       	call   10332 <pde_index>
   10d2d:	83 c4 10             	add    $0x10,%esp
   10d30:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t* pde = (pde_t*)page_dir + user_pde_start;
   10d33:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10d36:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d40:	01 d0                	add    %edx,%eax
   10d42:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10d45:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10d48:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10d4b:	e9 d9 00 00 00       	jmp    10e29 <memory_copy_uvm+0x121>
        if (!pde->present) {
   10d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d53:	0f b6 00             	movzbl (%eax),%eax
   10d56:	83 e0 01             	and    $0x1,%eax
   10d59:	84 c0                	test   %al,%al
   10d5b:	0f 84 bf 00 00 00    	je     10e20 <memory_copy_uvm+0x118>
            continue;
        }

        // 遍历页表
        pte_t* pte = (pte_t*)pde_paddr(pde);
   10d61:	83 ec 0c             	sub    $0xc,%esp
   10d64:	ff 75 f4             	pushl  -0xc(%ebp)
   10d67:	e8 da f5 ff ff       	call   10346 <pde_paddr>
   10d6c:	83 c4 10             	add    $0x10,%esp
   10d6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10d72:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10d79:	e9 93 00 00 00       	jmp    10e11 <memory_copy_uvm+0x109>
            if (!pte->present) {
   10d7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10d81:	0f b6 00             	movzbl (%eax),%eax
   10d84:	83 e0 01             	and    $0x1,%eax
   10d87:	84 c0                	test   %al,%al
   10d89:	74 7d                	je     10e08 <memory_copy_uvm+0x100>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10d8b:	83 ec 08             	sub    $0x8,%esp
   10d8e:	6a 01                	push   $0x1
   10d90:	68 00 60 01 00       	push   $0x16000
   10d95:	e8 87 f6 ff ff       	call   10421 <addr_alloc_page>
   10d9a:	83 c4 10             	add    $0x10,%esp
   10d9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   10da0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   10da4:	0f 84 94 00 00 00    	je     10e3e <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   10daa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dad:	c1 e0 16             	shl    $0x16,%eax
   10db0:	89 c2                	mov    %eax,%edx
   10db2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10db5:	c1 e0 0c             	shl    $0xc,%eax
   10db8:	09 d0                	or     %edx,%eax
   10dba:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t*)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   10dbd:	83 ec 0c             	sub    $0xc,%esp
   10dc0:	ff 75 ec             	pushl  -0x14(%ebp)
   10dc3:	e8 ed f5 ff ff       	call   103b5 <get_pte_perm>
   10dc8:	83 c4 10             	add    $0x10,%esp
   10dcb:	89 c2                	mov    %eax,%edx
   10dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10dd0:	83 ec 0c             	sub    $0xc,%esp
   10dd3:	52                   	push   %edx
   10dd4:	6a 01                	push   $0x1
   10dd6:	ff 75 dc             	pushl  -0x24(%ebp)
   10dd9:	ff 75 d8             	pushl  -0x28(%ebp)
   10ddc:	50                   	push   %eax
   10ddd:	e8 fa f8 ff ff       	call   106dc <memory_create_map>
   10de2:	83 c4 20             	add    $0x20,%esp
   10de5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10de8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10dec:	78 53                	js     10e41 <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kmemcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10dee:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10df1:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10df4:	83 ec 04             	sub    $0x4,%esp
   10df7:	68 00 10 00 00       	push   $0x1000
   10dfc:	52                   	push   %edx
   10dfd:	50                   	push   %eax
   10dfe:	e8 d7 2b 00 00       	call   139da <kmemcpy>
   10e03:	83 c4 10             	add    $0x10,%esp
   10e06:	eb 01                	jmp    10e09 <memory_copy_uvm+0x101>
                continue;
   10e08:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10e09:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10e0d:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10e11:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10e18:	0f 8e 60 ff ff ff    	jle    10d7e <memory_copy_uvm+0x76>
   10e1e:	eb 01                	jmp    10e21 <memory_copy_uvm+0x119>
            continue;
   10e20:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10e21:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10e25:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10e29:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10e30:	0f 8e 1a ff ff ff    	jle    10d50 <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10e36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e39:	eb 20                	jmp    10e5b <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10e3b:	90                   	nop
   10e3c:	eb 04                	jmp    10e42 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10e3e:	90                   	nop
   10e3f:	eb 01                	jmp    10e42 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10e41:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10e42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10e46:	74 0e                	je     10e56 <memory_copy_uvm+0x14e>
        memory_destroy_uvm(to_page_dir);
   10e48:	83 ec 0c             	sub    $0xc,%esp
   10e4b:	ff 75 e4             	pushl  -0x1c(%ebp)
   10e4e:	e8 bd fd ff ff       	call   10c10 <memory_destroy_uvm>
   10e53:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   10e56:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e5b:	c9                   	leave  
   10e5c:	c3                   	ret    

00010e5d <memory_copy_uvm2>:


// 把from的页表内容拷贝至to
// 0x80000000以下的部分不管
uint32_t memory_copy_uvm2(uint32_t from, uint32_t to) {
   10e5d:	55                   	push   %ebp
   10e5e:	89 e5                	mov    %esp,%ebp
   10e60:	83 ec 28             	sub    $0x28,%esp
    // 复制基础页表
    if (to == 0) {
   10e63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e67:	0f 84 15 01 00 00    	je     10f82 <memory_copy_uvm2+0x125>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项,0x80000000以上的
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10e6d:	68 00 00 00 80       	push   $0x80000000
   10e72:	e8 bb f4 ff ff       	call   10332 <pde_index>
   10e77:	83 c4 04             	add    $0x4,%esp
   10e7a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t* pde = (pde_t*)from + user_pde_start;
   10e7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e80:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10e87:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8a:	01 d0                	add    %edx,%eax
   10e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10e8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e92:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10e95:	e9 d6 00 00 00       	jmp    10f70 <memory_copy_uvm2+0x113>
        if (!pde->present) {
   10e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e9d:	0f b6 00             	movzbl (%eax),%eax
   10ea0:	83 e0 01             	and    $0x1,%eax
   10ea3:	84 c0                	test   %al,%al
   10ea5:	0f 84 bc 00 00 00    	je     10f67 <memory_copy_uvm2+0x10a>
            continue;
        }

        // 遍历页表
        pte_t* pte = (pte_t*)pde_paddr(pde);
   10eab:	ff 75 f4             	pushl  -0xc(%ebp)
   10eae:	e8 93 f4 ff ff       	call   10346 <pde_paddr>
   10eb3:	83 c4 04             	add    $0x4,%esp
   10eb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10eb9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10ec0:	e9 93 00 00 00       	jmp    10f58 <memory_copy_uvm2+0xfb>
            if (!pte->present) {
   10ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ec8:	0f b6 00             	movzbl (%eax),%eax
   10ecb:	83 e0 01             	and    $0x1,%eax
   10ece:	84 c0                	test   %al,%al
   10ed0:	74 7d                	je     10f4f <memory_copy_uvm2+0xf2>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10ed2:	83 ec 08             	sub    $0x8,%esp
   10ed5:	6a 01                	push   $0x1
   10ed7:	68 00 60 01 00       	push   $0x16000
   10edc:	e8 40 f5 ff ff       	call   10421 <addr_alloc_page>
   10ee1:	83 c4 10             	add    $0x10,%esp
   10ee4:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (page == 0) {
   10ee7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10eeb:	0f 84 94 00 00 00    	je     10f85 <memory_copy_uvm2+0x128>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   10ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ef4:	c1 e0 16             	shl    $0x16,%eax
   10ef7:	89 c2                	mov    %eax,%edx
   10ef9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10efc:	c1 e0 0c             	shl    $0xc,%eax
   10eff:	09 d0                	or     %edx,%eax
   10f01:	89 45 dc             	mov    %eax,-0x24(%ebp)
            int err = memory_create_map((pde_t*)to, vaddr, page, 1, get_pte_perm(pte));
   10f04:	83 ec 0c             	sub    $0xc,%esp
   10f07:	ff 75 ec             	pushl  -0x14(%ebp)
   10f0a:	e8 a6 f4 ff ff       	call   103b5 <get_pte_perm>
   10f0f:	83 c4 10             	add    $0x10,%esp
   10f12:	89 c2                	mov    %eax,%edx
   10f14:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f17:	83 ec 0c             	sub    $0xc,%esp
   10f1a:	52                   	push   %edx
   10f1b:	6a 01                	push   $0x1
   10f1d:	ff 75 e0             	pushl  -0x20(%ebp)
   10f20:	ff 75 dc             	pushl  -0x24(%ebp)
   10f23:	50                   	push   %eax
   10f24:	e8 b3 f7 ff ff       	call   106dc <memory_create_map>
   10f29:	83 c4 20             	add    $0x20,%esp
   10f2c:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   10f2f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   10f33:	78 53                	js     10f88 <memory_copy_uvm2+0x12b>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kmemcpy((void*)page, (void*)vaddr, MEM_PAGE_SIZE);
   10f35:	8b 55 dc             	mov    -0x24(%ebp),%edx
   10f38:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10f3b:	83 ec 04             	sub    $0x4,%esp
   10f3e:	68 00 10 00 00       	push   $0x1000
   10f43:	52                   	push   %edx
   10f44:	50                   	push   %eax
   10f45:	e8 90 2a 00 00       	call   139da <kmemcpy>
   10f4a:	83 c4 10             	add    $0x10,%esp
   10f4d:	eb 01                	jmp    10f50 <memory_copy_uvm2+0xf3>
                continue;
   10f4f:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10f50:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10f54:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10f58:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10f5f:	0f 8e 60 ff ff ff    	jle    10ec5 <memory_copy_uvm2+0x68>
   10f65:	eb 01                	jmp    10f68 <memory_copy_uvm2+0x10b>
            continue;
   10f67:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10f68:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10f6c:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10f70:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10f77:	0f 8e 1d ff ff ff    	jle    10e9a <memory_copy_uvm2+0x3d>
        }
    }
    return to;
   10f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f80:	eb 20                	jmp    10fa2 <memory_copy_uvm2+0x145>
        goto copy_uvm_failed;
   10f82:	90                   	nop
   10f83:	eb 04                	jmp    10f89 <memory_copy_uvm2+0x12c>
                goto copy_uvm_failed;
   10f85:	90                   	nop
   10f86:	eb 01                	jmp    10f89 <memory_copy_uvm2+0x12c>
                goto copy_uvm_failed;
   10f88:	90                   	nop

copy_uvm_failed:
    if (to) {
   10f89:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f8d:	74 0e                	je     10f9d <memory_copy_uvm2+0x140>
        memory_destroy_uvm(to);
   10f8f:	83 ec 0c             	sub    $0xc,%esp
   10f92:	ff 75 0c             	pushl  0xc(%ebp)
   10f95:	e8 76 fc ff ff       	call   10c10 <memory_destroy_uvm>
   10f9a:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   10f9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10fa2:	c9                   	leave  
   10fa3:	c3                   	ret    

00010fa4 <memory_get_paddr>:


uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr) {
   10fa4:	55                   	push   %ebp
   10fa5:	89 e5                	mov    %esp,%ebp
   10fa7:	83 ec 18             	sub    $0x18,%esp
    pte_t* pte = find_pte((pde_t*)page_dir, vaddr, 0);
   10faa:	8b 45 08             	mov    0x8(%ebp),%eax
   10fad:	83 ec 04             	sub    $0x4,%esp
   10fb0:	6a 00                	push   $0x0
   10fb2:	ff 75 0c             	pushl  0xc(%ebp)
   10fb5:	50                   	push   %eax
   10fb6:	e8 71 f6 ff ff       	call   1062c <find_pte>
   10fbb:	83 c4 10             	add    $0x10,%esp
   10fbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!pte) {
   10fc1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10fc5:	75 07                	jne    10fce <memory_get_paddr+0x2a>
        return 0;
   10fc7:	b8 00 00 00 00       	mov    $0x0,%eax
   10fcc:	eb 1a                	jmp    10fe8 <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10fce:	83 ec 0c             	sub    $0xc,%esp
   10fd1:	ff 75 f4             	pushl  -0xc(%ebp)
   10fd4:	e8 a4 f3 ff ff       	call   1037d <pte_paddr>
   10fd9:	83 c4 10             	add    $0x10,%esp
   10fdc:	89 c2                	mov    %eax,%edx
   10fde:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe1:	25 ff 0f 00 00       	and    $0xfff,%eax
   10fe6:	01 d0                	add    %edx,%eax
   10fe8:	c9                   	leave  
   10fe9:	c3                   	ret    

00010fea <sys_print_msg>:
#include "tools/log.h"

typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

// test
void sys_print_msg(char* fmt, int arg) {
   10fea:	55                   	push   %ebp
   10feb:	89 e5                	mov    %esp,%ebp
   10fed:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10ff0:	83 ec 08             	sub    $0x8,%esp
   10ff3:	ff 75 0c             	pushl  0xc(%ebp)
   10ff6:	ff 75 08             	pushl  0x8(%ebp)
   10ff9:	e8 0d 31 00 00       	call   1410b <log_printf>
   10ffe:	83 c4 10             	add    $0x10,%esp
}
   11001:	90                   	nop
   11002:	c9                   	leave  
   11003:	c3                   	ret    

00011004 <do_handler_syscall>:
    [SYS_execve]     = (syscall_handler_t)sys_execve,

    [SYS_exit]       = (syscall_handler_t)sys_exit,
};

void do_handler_syscall(syscall_frame_t* frame) {
   11004:	55                   	push   %ebp
   11005:	89 e5                	mov    %esp,%ebp
   11007:	53                   	push   %ebx
   11008:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   1100b:	8b 45 08             	mov    0x8(%ebp),%eax
   1100e:	8b 40 3c             	mov    0x3c(%eax),%eax
   11011:	83 f8 05             	cmp    $0x5,%eax
   11014:	77 4e                	ja     11064 <do_handler_syscall+0x60>
        syscall_handler_t handler = sys_table[frame->func_id];
   11016:	8b 45 08             	mov    0x8(%ebp),%eax
   11019:	8b 40 3c             	mov    0x3c(%eax),%eax
   1101c:	8b 04 85 98 43 01 00 	mov    0x14398(,%eax,4),%eax
   11023:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (handler) {
   11026:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1102a:	74 38                	je     11064 <do_handler_syscall+0x60>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   1102c:	8b 45 08             	mov    0x8(%ebp),%eax
   1102f:	8b 40 4c             	mov    0x4c(%eax),%eax
   11032:	89 c3                	mov    %eax,%ebx
   11034:	8b 45 08             	mov    0x8(%ebp),%eax
   11037:	8b 40 48             	mov    0x48(%eax),%eax
   1103a:	89 c1                	mov    %eax,%ecx
   1103c:	8b 45 08             	mov    0x8(%ebp),%eax
   1103f:	8b 40 44             	mov    0x44(%eax),%eax
   11042:	89 c2                	mov    %eax,%edx
   11044:	8b 45 08             	mov    0x8(%ebp),%eax
   11047:	8b 40 40             	mov    0x40(%eax),%eax
   1104a:	53                   	push   %ebx
   1104b:	51                   	push   %ecx
   1104c:	52                   	push   %edx
   1104d:	50                   	push   %eax
   1104e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11051:	ff d0                	call   *%eax
   11053:	83 c4 10             	add    $0x10,%esp
   11056:	89 45 f0             	mov    %eax,-0x10(%ebp)

            frame->eax = ret; // Integral and pointer return values appear in %eax.
   11059:	8b 45 08             	mov    0x8(%ebp),%eax
   1105c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1105f:	89 50 30             	mov    %edx,0x30(%eax)

            return;
   11062:	eb 30                	jmp    11094 <do_handler_syscall+0x90>
        }
    }

    task_t* task = task_current();
   11064:	e8 68 06 00 00       	call   116d1 <task_current>
   11069:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   1106c:	8b 45 08             	mov    0x8(%ebp),%eax
   1106f:	8b 40 3c             	mov    0x3c(%eax),%eax
   11072:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11075:	83 c2 04             	add    $0x4,%edx
   11078:	83 ec 04             	sub    $0x4,%esp
   1107b:	50                   	push   %eax
   1107c:	52                   	push   %edx
   1107d:	68 b0 43 01 00       	push   $0x143b0
   11082:	e8 84 30 00 00       	call   1410b <log_printf>
   11087:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   1108a:	8b 45 08             	mov    0x8(%ebp),%eax
   1108d:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
   11094:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11097:	c9                   	leave  
   11098:	c3                   	ret    

00011099 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   11099:	55                   	push   %ebp
   1109a:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   1109c:	8b 45 08             	mov    0x8(%ebp),%eax
   1109f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   110a5:	8b 45 08             	mov    0x8(%ebp),%eax
   110a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   110af:	90                   	nop
   110b0:	5d                   	pop    %ebp
   110b1:	c3                   	ret    

000110b2 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   110b2:	55                   	push   %ebp
   110b3:	89 e5                	mov    %esp,%ebp
    return node->next;
   110b5:	8b 45 08             	mov    0x8(%ebp),%eax
   110b8:	8b 40 04             	mov    0x4(%eax),%eax
}
   110bb:	5d                   	pop    %ebp
   110bc:	c3                   	ret    

000110bd <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   110bd:	55                   	push   %ebp
   110be:	89 e5                	mov    %esp,%ebp
    return list->count;
   110c0:	8b 45 08             	mov    0x8(%ebp),%eax
   110c3:	8b 40 08             	mov    0x8(%eax),%eax
}
   110c6:	5d                   	pop    %ebp
   110c7:	c3                   	ret    

000110c8 <list_first>:

static inline list_node_t* list_first(list_t* list) {
   110c8:	55                   	push   %ebp
   110c9:	89 e5                	mov    %esp,%ebp
    return list->first;
   110cb:	8b 45 08             	mov    0x8(%ebp),%eax
   110ce:	8b 00                	mov    (%eax),%eax
}
   110d0:	5d                   	pop    %ebp
   110d1:	c3                   	ret    

000110d2 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   110d2:	55                   	push   %ebp
   110d3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   110d5:	8b 45 08             	mov    0x8(%ebp),%eax
   110d8:	0f 22 d8             	mov    %eax,%cr3
}
   110db:	90                   	nop
   110dc:	5d                   	pop    %ebp
   110dd:	c3                   	ret    

000110de <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   110de:	55                   	push   %ebp
   110df:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   110e1:	f4                   	hlt    
}
   110e2:	90                   	nop
   110e3:	5d                   	pop    %ebp
   110e4:	c3                   	ret    

000110e5 <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   110e5:	55                   	push   %ebp
   110e6:	89 e5                	mov    %esp,%ebp
   110e8:	83 ec 04             	sub    $0x4,%esp
   110eb:	8b 45 08             	mov    0x8(%ebp),%eax
   110ee:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   110f2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   110f6:	0f 00 d8             	ltr    %ax
}
   110f9:	90                   	nop
   110fa:	c9                   	leave  
   110fb:	c3                   	ret    

000110fc <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   110fc:	55                   	push   %ebp
   110fd:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   110ff:	ff 75 08             	pushl  0x8(%ebp)
   11102:	e8 cb ff ff ff       	call   110d2 <write_cr3>
   11107:	83 c4 04             	add    $0x4,%esp
}
   1110a:	90                   	nop
   1110b:	c9                   	leave  
   1110c:	c3                   	ret    

0001110d <tss_init>:

// 空闲进程的栈, 不是广义上的内核栈
static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   1110d:	55                   	push   %ebp
   1110e:	89 e5                	mov    %esp,%ebp
   11110:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   11113:	e8 d1 11 00 00       	call   122e9 <gdt_alloc_desc>
   11118:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   1111b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1111f:	79 1a                	jns    1113b <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   11121:	83 ec 0c             	sub    $0xc,%esp
   11124:	68 d0 43 01 00       	push   $0x143d0
   11129:	e8 dd 2f 00 00       	call   1410b <log_printf>
   1112e:	83 c4 10             	add    $0x10,%esp
        return -1;
   11131:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11136:	e9 58 01 00 00       	jmp    11293 <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	83 c0 50             	add    $0x50,%eax
   11141:	68 89 00 00 00       	push   $0x89
   11146:	6a 68                	push   $0x68
   11148:	50                   	push   %eax
   11149:	ff 75 ec             	pushl  -0x14(%ebp)
   1114c:	e8 0f 10 00 00       	call   12160 <segment_desc_set>
   11151:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   11154:	8b 45 08             	mov    0x8(%ebp),%eax
   11157:	83 c0 50             	add    $0x50,%eax
   1115a:	83 ec 04             	sub    $0x4,%esp
   1115d:	6a 68                	push   $0x68
   1115f:	6a 00                	push   $0x0
   11161:	50                   	push   %eax
   11162:	e8 c2 28 00 00       	call   13a29 <kmemset>
   11167:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间，大小为PGSIZE
    uint32_t kernel_stack = memory_alloc_page();
   1116a:	e8 b0 f9 ff ff       	call   10b1f <memory_alloc_page>
   1116f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   11172:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11176:	0f 84 ec 00 00 00    	je     11268 <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   1117c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1117f:	83 e0 01             	and    $0x1,%eax
   11182:	85 c0                	test   %eax,%eax
   11184:	74 10                	je     11196 <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   11186:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   1118d:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11194:	eb 16                	jmp    111ac <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   11196:	a1 a0 81 01 00       	mov    0x181a0,%eax
   1119b:	83 c8 03             	or     $0x3,%eax
   1119e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   111a1:	a1 a4 81 01 00       	mov    0x181a4,%eax
   111a6:	83 c8 03             	or     $0x3,%eax
   111a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   111ac:	8b 45 08             	mov    0x8(%ebp),%eax
   111af:	8b 55 10             	mov    0x10(%ebp),%edx
   111b2:	89 50 70             	mov    %edx,0x70(%eax)
    task->tss.esp    = esp;
   111b5:	8b 45 08             	mov    0x8(%ebp),%eax
   111b8:	8b 55 14             	mov    0x14(%ebp),%edx
   111bb:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   111c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   111c4:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   111ca:	8b 45 08             	mov    0x8(%ebp),%eax
   111cd:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.ss     = data_sel;
   111d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   111d3:	8b 45 08             	mov    0x8(%ebp),%eax
   111d6:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   111dc:	8b 45 08             	mov    0x8(%ebp),%eax
   111df:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   111e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   111e9:	8b 45 08             	mov    0x8(%ebp),%eax
   111ec:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   111f2:	8b 45 08             	mov    0x8(%ebp),%eax
   111f5:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   111fb:	8b 45 08             	mov    0x8(%ebp),%eax
   111fe:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   11204:	8b 45 08             	mov    0x8(%ebp),%eax
   11207:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   1120d:	8b 45 08             	mov    0x8(%ebp),%eax
   11210:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   11216:	8b 45 08             	mov    0x8(%ebp),%eax
   11219:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1121f:	8b 45 08             	mov    0x8(%ebp),%eax
   11222:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.cs     = code_sel;
   11228:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1122b:	8b 45 08             	mov    0x8(%ebp),%eax
   1122e:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   11234:	8b 45 08             	mov    0x8(%ebp),%eax
   11237:	c7 40 74 02 02 00 00 	movl   $0x202,0x74(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   1123e:	e8 f0 f5 ff ff       	call   10833 <memory_create_uvm>
   11243:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   11246:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1124a:	74 1f                	je     1126b <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   1124c:	8b 45 08             	mov    0x8(%ebp),%eax
   1124f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11252:	89 50 6c             	mov    %edx,0x6c(%eax)

    task->tss_sel    = tss_sel;
   11255:	8b 45 08             	mov    0x8(%ebp),%eax
   11258:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1125b:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
    return 0;
   11261:	b8 00 00 00 00       	mov    $0x0,%eax
   11266:	eb 2b                	jmp    11293 <tss_init+0x186>
        goto tss_init_failed;
   11268:	90                   	nop
   11269:	eb 01                	jmp    1126c <tss_init+0x15f>
        goto tss_init_failed;
   1126b:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   1126c:	83 ec 0c             	sub    $0xc,%esp
   1126f:	ff 75 ec             	pushl  -0x14(%ebp)
   11272:	e8 e7 10 00 00       	call   1235e <gdt_free_sel>
   11277:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   1127a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1127e:	74 0e                	je     1128e <tss_init+0x181>
        memory_free_page(kernel_stack);
   11280:	83 ec 0c             	sub    $0xc,%esp
   11283:	ff 75 e8             	pushl  -0x18(%ebp)
   11286:	e8 b4 f8 ff ff       	call   10b3f <memory_free_page>
   1128b:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   1128e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11293:	c9                   	leave  
   11294:	c3                   	ret    

00011295 <task_init>:
// task_t* task:     已申请内存的进程结构体
// const char* name: 进程名
// int flag:         TASK_FLAG_USER 为用户进程，TASK_FLAG_SYSTEM 为内核进程
// uint32_t entry:   进程入口地址
// uint32_t esp:     进程栈底指针
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   11295:	55                   	push   %ebp
   11296:	89 e5                	mov    %esp,%ebp
   11298:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   1129b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1129f:	75 19                	jne    112ba <task_init+0x25>
   112a1:	68 e2 43 01 00       	push   $0x143e2
   112a6:	68 5c 45 01 00       	push   $0x1455c
   112ab:	6a 59                	push   $0x59
   112ad:	68 f8 43 01 00       	push   $0x143f8
   112b2:	e8 d7 2a 00 00       	call   13d8e <pannic>
   112b7:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   112ba:	ff 75 18             	pushl  0x18(%ebp)
   112bd:	ff 75 14             	pushl  0x14(%ebp)
   112c0:	ff 75 10             	pushl  0x10(%ebp)
   112c3:	ff 75 08             	pushl  0x8(%ebp)
   112c6:	e8 42 fe ff ff       	call   1110d <tss_init>
   112cb:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   112ce:	8b 45 08             	mov    0x8(%ebp),%eax
   112d1:	83 c0 04             	add    $0x4,%eax
   112d4:	83 ec 04             	sub    $0x4,%esp
   112d7:	6a 20                	push   $0x20
   112d9:	ff 75 0c             	pushl  0xc(%ebp)
   112dc:	50                   	push   %eax
   112dd:	e8 d3 25 00 00       	call   138b5 <kstrncpy>
   112e2:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   112e5:	8b 45 08             	mov    0x8(%ebp),%eax
   112e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   112ee:	8b 45 08             	mov    0x8(%ebp),%eax
   112f1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   112f8:	8b 45 08             	mov    0x8(%ebp),%eax
   112fb:	c7 40 48 0a 00 00 00 	movl   $0xa,0x48(%eax)
    task->slice_ticks = task->time_ticks;
   11302:	8b 45 08             	mov    0x8(%ebp),%eax
   11305:	8b 50 48             	mov    0x48(%eax),%edx
   11308:	8b 45 08             	mov    0x8(%ebp),%eax
   1130b:	89 50 4c             	mov    %edx,0x4c(%eax)

    task->parent = (task_t*)0;
   1130e:	8b 45 08             	mov    0x8(%ebp),%eax
   11311:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)

    list_node_init(&task->all_node);
   11318:	8b 45 08             	mov    0x8(%ebp),%eax
   1131b:	83 c0 34             	add    $0x34,%eax
   1131e:	83 ec 0c             	sub    $0xc,%esp
   11321:	50                   	push   %eax
   11322:	e8 72 fd ff ff       	call   11099 <list_node_init>
   11327:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   1132a:	8b 45 08             	mov    0x8(%ebp),%eax
   1132d:	83 c0 2c             	add    $0x2c,%eax
   11330:	83 ec 0c             	sub    $0xc,%esp
   11333:	50                   	push   %eax
   11334:	e8 60 fd ff ff       	call   11099 <list_node_init>
   11339:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   1133c:	8b 45 08             	mov    0x8(%ebp),%eax
   1133f:	83 c0 3c             	add    $0x3c,%eax
   11342:	83 ec 0c             	sub    $0xc,%esp
   11345:	50                   	push   %eax
   11346:	e8 4e fd ff ff       	call   11099 <list_node_init>
   1134b:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   1134e:	e8 8f 19 00 00       	call   12ce2 <irq_enter_protection>
   11353:	89 45 f4             	mov    %eax,-0xc(%ebp)


    task->pid = (uint32_t)task;
   11356:	8b 55 08             	mov    0x8(%ebp),%edx
   11359:	8b 45 08             	mov    0x8(%ebp),%eax
   1135c:	89 50 24             	mov    %edx,0x24(%eax)

    // task_set_ready(task);

    list_insert_back(&task_manager.task_list, &task->all_node);
   1135f:	8b 45 08             	mov    0x8(%ebp),%eax
   11362:	83 c0 34             	add    $0x34,%eax
   11365:	83 ec 08             	sub    $0x8,%esp
   11368:	50                   	push   %eax
   11369:	68 10 80 01 00       	push   $0x18010
   1136e:	e8 59 2b 00 00       	call   13ecc <list_insert_back>
   11373:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   11376:	83 ec 0c             	sub    $0xc,%esp
   11379:	ff 75 f4             	pushl  -0xc(%ebp)
   1137c:	e8 79 19 00 00       	call   12cfa <irq_leave_protection>
   11381:	83 c4 10             	add    $0x10,%esp

    return 0;
   11384:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11389:	c9                   	leave  
   1138a:	c3                   	ret    

0001138b <task_uninit>:


void task_uninit(task_t* task) {
   1138b:	55                   	push   %ebp
   1138c:	89 e5                	mov    %esp,%ebp
   1138e:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel) {
   11391:	8b 45 08             	mov    0x8(%ebp),%eax
   11394:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   1139a:	85 c0                	test   %eax,%eax
   1139c:	74 15                	je     113b3 <task_uninit+0x28>
        gdt_free_sel(task->tss_sel);
   1139e:	8b 45 08             	mov    0x8(%ebp),%eax
   113a1:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   113a7:	83 ec 0c             	sub    $0xc,%esp
   113aa:	50                   	push   %eax
   113ab:	e8 ae 0f 00 00       	call   1235e <gdt_free_sel>
   113b0:	83 c4 10             	add    $0x10,%esp
    }

    // 把内核栈释放掉
    if (task->tss.esp0) {
   113b3:	8b 45 08             	mov    0x8(%ebp),%eax
   113b6:	8b 40 54             	mov    0x54(%eax),%eax
   113b9:	85 c0                	test   %eax,%eax
   113bb:	74 17                	je     113d4 <task_uninit+0x49>
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   113bd:	8b 45 08             	mov    0x8(%ebp),%eax
   113c0:	8b 40 54             	mov    0x54(%eax),%eax
   113c3:	2d 00 10 00 00       	sub    $0x1000,%eax
   113c8:	83 ec 0c             	sub    $0xc,%esp
   113cb:	50                   	push   %eax
   113cc:	e8 6e f7 ff ff       	call   10b3f <memory_free_page>
   113d1:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {
   113d4:	8b 45 08             	mov    0x8(%ebp),%eax
   113d7:	8b 40 6c             	mov    0x6c(%eax),%eax
   113da:	85 c0                	test   %eax,%eax
   113dc:	74 12                	je     113f0 <task_uninit+0x65>
        memory_destroy_uvm(task->tss.cr3);
   113de:	8b 45 08             	mov    0x8(%ebp),%eax
   113e1:	8b 40 6c             	mov    0x6c(%eax),%eax
   113e4:	83 ec 0c             	sub    $0xc,%esp
   113e7:	50                   	push   %eax
   113e8:	e8 23 f8 ff ff       	call   10c10 <memory_destroy_uvm>
   113ed:	83 c4 10             	add    $0x10,%esp
    }

    kmemset(task, 0, sizeof(task_t));
   113f0:	83 ec 04             	sub    $0x4,%esp
   113f3:	68 bc 00 00 00       	push   $0xbc
   113f8:	6a 00                	push   $0x0
   113fa:	ff 75 08             	pushl  0x8(%ebp)
   113fd:	e8 27 26 00 00       	call   13a29 <kmemset>
   11402:	83 c4 10             	add    $0x10,%esp
}
   11405:	90                   	nop
   11406:	c9                   	leave  
   11407:	c3                   	ret    

00011408 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   11408:	55                   	push   %ebp
   11409:	89 e5                	mov    %esp,%ebp
   1140b:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   1140e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11411:	8b 80 b8 00 00 00    	mov    0xb8(%eax),%eax
   11417:	83 ec 0c             	sub    $0xc,%esp
   1141a:	50                   	push   %eax
   1141b:	e8 b5 0e 00 00       	call   122d5 <swtch_to_tss>
   11420:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   11423:	90                   	nop
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   11426:	55                   	push   %ebp
   11427:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   11429:	e8 b0 fc ff ff       	call   110de <hlt>
   1142e:	eb f9                	jmp    11429 <idle_task_entry+0x3>

00011430 <task_start>:
    }
}

void task_start(task_t* task) {
   11430:	55                   	push   %ebp
   11431:	89 e5                	mov    %esp,%ebp
   11433:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11436:	e8 a7 18 00 00       	call   12ce2 <irq_enter_protection>
   1143b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   1143e:	83 ec 0c             	sub    $0xc,%esp
   11441:	ff 75 08             	pushl  0x8(%ebp)
   11444:	e8 e6 01 00 00       	call   1162f <task_set_ready>
   11449:	83 c4 10             	add    $0x10,%esp
    
    irq_leave_protection(state);
   1144c:	83 ec 0c             	sub    $0xc,%esp
   1144f:	ff 75 f4             	pushl  -0xc(%ebp)
   11452:	e8 a3 18 00 00       	call   12cfa <irq_leave_protection>
   11457:	83 c4 10             	add    $0x10,%esp
}
   1145a:	90                   	nop
   1145b:	c9                   	leave  
   1145c:	c3                   	ret    

0001145d <task_manager_init>:


void task_manager_init(void) {
   1145d:	55                   	push   %ebp
   1145e:	89 e5                	mov    %esp,%ebp
   11460:	83 ec 18             	sub    $0x18,%esp
    kmemset(task_table, 0, sizeof(task_table));
   11463:	83 ec 04             	sub    $0x4,%esp
   11466:	68 00 5e 00 00       	push   $0x5e00
   1146b:	6a 00                	push   $0x0
   1146d:	68 c0 81 01 00       	push   $0x181c0
   11472:	e8 b2 25 00 00       	call   13a29 <kmemset>
   11477:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex, "task_table");
   1147a:	83 ec 08             	sub    $0x8,%esp
   1147d:	68 3d 44 01 00       	push   $0x1443d
   11482:	68 c0 df 01 00       	push   $0x1dfc0
   11487:	e8 c3 1e 00 00       	call   1334f <mutex_init>
   1148c:	83 c4 10             	add    $0x10,%esp

    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   1148f:	e8 55 0e 00 00       	call   122e9 <gdt_alloc_desc>
   11494:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11497:	68 f2 40 00 00       	push   $0x40f2
   1149c:	6a ff                	push   $0xffffffff
   1149e:	6a 00                	push   $0x0
   114a0:	ff 75 f4             	pushl  -0xc(%ebp)
   114a3:	e8 b8 0c 00 00       	call   12160 <segment_desc_set>
   114a8:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   114ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114ae:	a3 a4 81 01 00       	mov    %eax,0x181a4

    sel = gdt_alloc_desc();
   114b3:	e8 31 0e 00 00       	call   122e9 <gdt_alloc_desc>
   114b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   114bb:	68 fa 40 00 00       	push   $0x40fa
   114c0:	6a ff                	push   $0xffffffff
   114c2:	6a 00                	push   $0x0
   114c4:	ff 75 f4             	pushl  -0xc(%ebp)
   114c7:	e8 94 0c 00 00       	call   12160 <segment_desc_set>
   114cc:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   114cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114d2:	a3 a0 81 01 00       	mov    %eax,0x181a0

    list_init(&task_manager.ready_list);
   114d7:	83 ec 0c             	sub    $0xc,%esp
   114da:	68 04 80 01 00       	push   $0x18004
   114df:	e8 66 29 00 00       	call   13e4a <list_init>
   114e4:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   114e7:	83 ec 0c             	sub    $0xc,%esp
   114ea:	68 10 80 01 00       	push   $0x18010
   114ef:	e8 56 29 00 00       	call   13e4a <list_init>
   114f4:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   114f7:	83 ec 0c             	sub    $0xc,%esp
   114fa:	68 1c 80 01 00       	push   $0x1801c
   114ff:	e8 46 29 00 00       	call   13e4a <list_init>
   11504:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   11507:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   1150e:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   11511:	b8 20 e0 01 00       	mov    $0x1e020,%eax
    task_init(&task_manager.idle_task, 
   11516:	05 00 04 00 00       	add    $0x400,%eax
   1151b:	ba 26 14 01 00       	mov    $0x11426,%edx
   11520:	83 ec 0c             	sub    $0xc,%esp
   11523:	50                   	push   %eax
   11524:	52                   	push   %edx
   11525:	6a 01                	push   $0x1
   11527:	68 48 44 01 00       	push   $0x14448
   1152c:	68 e4 80 01 00       	push   $0x180e4
   11531:	e8 5f fd ff ff       	call   11295 <task_init>
   11536:	83 c4 20             	add    $0x20,%esp
    );

    // task_manager.curr_task = &task_manager.idle_task;

    task_start(&task_manager.idle_task);
   11539:	83 ec 0c             	sub    $0xc,%esp
   1153c:	68 e4 80 01 00       	push   $0x180e4
   11541:	e8 ea fe ff ff       	call   11430 <task_start>
   11546:	83 c4 10             	add    $0x10,%esp
}
   11549:	90                   	nop
   1154a:	c9                   	leave  
   1154b:	c3                   	ret    

0001154c <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   1154c:	55                   	push   %ebp
   1154d:	89 e5                	mov    %esp,%ebp
   1154f:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   11552:	ba fa 31 04 00       	mov    $0x431fa,%edx
   11557:	b8 60 2f 04 00       	mov    $0x42f60,%eax
   1155c:	29 c2                	sub    %eax,%edx
   1155e:	89 d0                	mov    %edx,%eax
   11560:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11563:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   1156a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1156d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11570:	72 1c                	jb     1158e <task_first_init+0x42>
   11572:	68 52 44 01 00       	push   $0x14452
   11577:	68 68 45 01 00       	push   $0x14568
   1157c:	68 d0 00 00 00       	push   $0xd0
   11581:	68 f8 43 01 00       	push   $0x143f8
   11586:	e8 03 28 00 00       	call   13d8e <pannic>
   1158b:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1158e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", TASK_FLAGS_USER, (uint32_t)first_start, first_start + alloc_size);
   11595:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11598:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1159b:	01 d0                	add    %edx,%eax
   1159d:	83 ec 0c             	sub    $0xc,%esp
   115a0:	50                   	push   %eax
   115a1:	ff 75 ec             	pushl  -0x14(%ebp)
   115a4:	6a 00                	push   $0x0
   115a6:	68 69 44 01 00       	push   $0x14469
   115ab:	68 28 80 01 00       	push   $0x18028
   115b0:	e8 e0 fc ff ff       	call   11295 <task_init>
   115b5:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   115b8:	a1 e0 80 01 00       	mov    0x180e0,%eax
   115bd:	0f b7 c0             	movzwl %ax,%eax
   115c0:	83 ec 0c             	sub    $0xc,%esp
   115c3:	50                   	push   %eax
   115c4:	e8 1c fb ff ff       	call   110e5 <write_tr>
   115c9:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   115cc:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   115d3:	80 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   115d6:	a1 94 80 01 00       	mov    0x18094,%eax
   115db:	83 ec 0c             	sub    $0xc,%esp
   115de:	50                   	push   %eax
   115df:	e8 18 fb ff ff       	call   110fc <mmu_set_page_dir>
   115e4:	83 c4 10             	add    $0x10,%esp

    // 给该进程新开个一级页表，也就是类似于用户页表的东西
    // 并在这个一级页表里申请 alloc_size 大小的内存
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   115e7:	83 ec 04             	sub    $0x4,%esp
   115ea:	6a 07                	push   $0x7
   115ec:	ff 75 f0             	pushl  -0x10(%ebp)
   115ef:	ff 75 ec             	pushl  -0x14(%ebp)
   115f2:	e8 f6 f4 ff ff       	call   10aed <memory_alloc_page_for>
   115f7:	83 c4 10             	add    $0x10,%esp

    // 把这段代码拷贝到上面生成的页表里
    // 相当于就是把内存搬运到 virtual 0x80000000+ 了
    kmemcpy((void*)first_start, s_first_task, copy_size);
   115fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   115fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11600:	83 ec 04             	sub    $0x4,%esp
   11603:	52                   	push   %edx
   11604:	68 60 2f 04 00       	push   $0x42f60
   11609:	50                   	push   %eax
   1160a:	e8 cb 23 00 00       	call   139da <kmemcpy>
   1160f:	83 c4 10             	add    $0x10,%esp

    task_start(&task_manager.first_task);
   11612:	83 ec 0c             	sub    $0xc,%esp
   11615:	68 28 80 01 00       	push   $0x18028
   1161a:	e8 11 fe ff ff       	call   11430 <task_start>
   1161f:	83 c4 10             	add    $0x10,%esp
}
   11622:	90                   	nop
   11623:	c9                   	leave  
   11624:	c3                   	ret    

00011625 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   11625:	55                   	push   %ebp
   11626:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11628:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   1162d:	5d                   	pop    %ebp
   1162e:	c3                   	ret    

0001162f <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   1162f:	55                   	push   %ebp
   11630:	89 e5                	mov    %esp,%ebp
   11632:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   11635:	81 7d 08 e4 80 01 00 	cmpl   $0x180e4,0x8(%ebp)
   1163c:	74 22                	je     11660 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   1163e:	8b 45 08             	mov    0x8(%ebp),%eax
   11641:	83 c0 2c             	add    $0x2c,%eax
   11644:	83 ec 08             	sub    $0x8,%esp
   11647:	50                   	push   %eax
   11648:	68 04 80 01 00       	push   $0x18004
   1164d:	e8 7a 28 00 00       	call   13ecc <list_insert_back>
   11652:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11655:	8b 45 08             	mov    0x8(%ebp),%eax
   11658:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1165e:	eb 01                	jmp    11661 <task_set_ready+0x32>
        return;
   11660:	90                   	nop
}
   11661:	c9                   	leave  
   11662:	c3                   	ret    

00011663 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   11663:	55                   	push   %ebp
   11664:	89 e5                	mov    %esp,%ebp
   11666:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   11669:	81 7d 08 e4 80 01 00 	cmpl   $0x180e4,0x8(%ebp)
   11670:	74 19                	je     1168b <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   11672:	8b 45 08             	mov    0x8(%ebp),%eax
   11675:	83 c0 2c             	add    $0x2c,%eax
   11678:	83 ec 08             	sub    $0x8,%esp
   1167b:	50                   	push   %eax
   1167c:	68 04 80 01 00       	push   $0x18004
   11681:	e8 22 29 00 00       	call   13fa8 <list_remove>
   11686:	83 c4 10             	add    $0x10,%esp
   11689:	eb 01                	jmp    1168c <task_set_blocked+0x29>
        return;
   1168b:	90                   	nop
}
   1168c:	c9                   	leave  
   1168d:	c3                   	ret    

0001168e <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   1168e:	55                   	push   %ebp
   1168f:	89 e5                	mov    %esp,%ebp
   11691:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   11694:	68 04 80 01 00       	push   $0x18004
   11699:	e8 1f fa ff ff       	call   110bd <list_size>
   1169e:	83 c4 04             	add    $0x4,%esp
   116a1:	85 c0                	test   %eax,%eax
   116a3:	75 07                	jne    116ac <task_next_run+0x1e>
        return &task_manager.idle_task;
   116a5:	b8 e4 80 01 00       	mov    $0x180e4,%eax
   116aa:	eb 23                	jmp    116cf <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   116ac:	68 04 80 01 00       	push   $0x18004
   116b1:	e8 12 fa ff ff       	call   110c8 <list_first>
   116b6:	83 c4 04             	add    $0x4,%esp
   116b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   116bc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   116c0:	74 08                	je     116ca <task_next_run+0x3c>
   116c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116c5:	83 e8 2c             	sub    $0x2c,%eax
   116c8:	eb 05                	jmp    116cf <task_next_run+0x41>
   116ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116cf:	c9                   	leave  
   116d0:	c3                   	ret    

000116d1 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   116d1:	55                   	push   %ebp
   116d2:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   116d4:	a1 00 80 01 00       	mov    0x18000,%eax
}
   116d9:	5d                   	pop    %ebp
   116da:	c3                   	ret    

000116db <sys_sched_yield>:

// 当前进程主动放弃CPU
int sys_sched_yield(void) {
   116db:	55                   	push   %ebp
   116dc:	89 e5                	mov    %esp,%ebp
   116de:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   116e1:	e8 fc 15 00 00       	call   12ce2 <irq_enter_protection>
   116e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   116e9:	83 ec 0c             	sub    $0xc,%esp
   116ec:	68 04 80 01 00       	push   $0x18004
   116f1:	e8 c7 f9 ff ff       	call   110bd <list_size>
   116f6:	83 c4 10             	add    $0x10,%esp
   116f9:	83 f8 01             	cmp    $0x1,%eax
   116fc:	7e 29                	jle    11727 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   116fe:	e8 ce ff ff ff       	call   116d1 <task_current>
   11703:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   11706:	83 ec 0c             	sub    $0xc,%esp
   11709:	ff 75 f0             	pushl  -0x10(%ebp)
   1170c:	e8 52 ff ff ff       	call   11663 <task_set_blocked>
   11711:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11714:	83 ec 0c             	sub    $0xc,%esp
   11717:	ff 75 f0             	pushl  -0x10(%ebp)
   1171a:	e8 10 ff ff ff       	call   1162f <task_set_ready>
   1171f:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11722:	e8 15 00 00 00       	call   1173c <task_dispatch>
    }

    irq_leave_protection(state);
   11727:	83 ec 0c             	sub    $0xc,%esp
   1172a:	ff 75 f4             	pushl  -0xc(%ebp)
   1172d:	e8 c8 15 00 00       	call   12cfa <irq_leave_protection>
   11732:	83 c4 10             	add    $0x10,%esp

    return 0;
   11735:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1173a:	c9                   	leave  
   1173b:	c3                   	ret    

0001173c <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   1173c:	55                   	push   %ebp
   1173d:	89 e5                	mov    %esp,%ebp
   1173f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11742:	e8 9b 15 00 00       	call   12ce2 <irq_enter_protection>
   11747:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   1174a:	e8 3f ff ff ff       	call   1168e <task_next_run>
   1174f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   11752:	a1 00 80 01 00       	mov    0x18000,%eax
   11757:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1175a:	74 2a                	je     11786 <task_dispatch+0x4a>
        task_t* from = task_current();
   1175c:	e8 70 ff ff ff       	call   116d1 <task_current>
   11761:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11764:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11767:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;
   1176c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1176f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   11775:	83 ec 08             	sub    $0x8,%esp
   11778:	ff 75 f0             	pushl  -0x10(%ebp)
   1177b:	ff 75 ec             	pushl  -0x14(%ebp)
   1177e:	e8 85 fc ff ff       	call   11408 <task_switch_from_to>
   11783:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   11786:	83 ec 0c             	sub    $0xc,%esp
   11789:	ff 75 f4             	pushl  -0xc(%ebp)
   1178c:	e8 69 15 00 00       	call   12cfa <irq_leave_protection>
   11791:	83 c4 10             	add    $0x10,%esp
}
   11794:	90                   	nop
   11795:	c9                   	leave  
   11796:	c3                   	ret    

00011797 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   11797:	55                   	push   %ebp
   11798:	89 e5                	mov    %esp,%ebp
   1179a:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   1179d:	e8 2f ff ff ff       	call   116d1 <task_current>
   117a2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   117a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117a8:	8b 40 4c             	mov    0x4c(%eax),%eax
   117ab:	8d 50 ff             	lea    -0x1(%eax),%edx
   117ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117b1:	89 50 4c             	mov    %edx,0x4c(%eax)
   117b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117b7:	8b 40 4c             	mov    0x4c(%eax),%eax
   117ba:	85 c0                	test   %eax,%eax
   117bc:	75 2d                	jne    117eb <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   117be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117c1:	8b 50 48             	mov    0x48(%eax),%edx
   117c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   117c7:	89 50 4c             	mov    %edx,0x4c(%eax)

        task_set_blocked(curr_task);
   117ca:	83 ec 0c             	sub    $0xc,%esp
   117cd:	ff 75 f0             	pushl  -0x10(%ebp)
   117d0:	e8 8e fe ff ff       	call   11663 <task_set_blocked>
   117d5:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117d8:	83 ec 0c             	sub    $0xc,%esp
   117db:	ff 75 f0             	pushl  -0x10(%ebp)
   117de:	e8 4c fe ff ff       	call   1162f <task_set_ready>
   117e3:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   117e6:	e8 51 ff ff ff       	call   1173c <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   117eb:	83 ec 0c             	sub    $0xc,%esp
   117ee:	68 1c 80 01 00       	push   $0x1801c
   117f3:	e8 d0 f8 ff ff       	call   110c8 <list_first>
   117f8:	83 c4 10             	add    $0x10,%esp
   117fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   117fe:	eb 62                	jmp    11862 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   11800:	83 ec 0c             	sub    $0xc,%esp
   11803:	ff 75 f4             	pushl  -0xc(%ebp)
   11806:	e8 a7 f8 ff ff       	call   110b2 <list_node_next>
   1180b:	83 c4 10             	add    $0x10,%esp
   1180e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   11811:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11815:	74 08                	je     1181f <task_time_tick+0x88>
   11817:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1181a:	83 e8 2c             	sub    $0x2c,%eax
   1181d:	eb 05                	jmp    11824 <task_time_tick+0x8d>
   1181f:	b8 00 00 00 00       	mov    $0x0,%eax
   11824:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   11827:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1182a:	8b 40 44             	mov    0x44(%eax),%eax
   1182d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11830:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11833:	89 50 44             	mov    %edx,0x44(%eax)
   11836:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11839:	8b 40 44             	mov    0x44(%eax),%eax
   1183c:	85 c0                	test   %eax,%eax
   1183e:	75 1c                	jne    1185c <task_time_tick+0xc5>
            task_set_wakeup(task);
   11840:	83 ec 0c             	sub    $0xc,%esp
   11843:	ff 75 e8             	pushl  -0x18(%ebp)
   11846:	e8 56 00 00 00       	call   118a1 <task_set_wakeup>
   1184b:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1184e:	83 ec 0c             	sub    $0xc,%esp
   11851:	ff 75 e8             	pushl  -0x18(%ebp)
   11854:	e8 d6 fd ff ff       	call   1162f <task_set_ready>
   11859:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   1185c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1185f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11862:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11866:	75 98                	jne    11800 <task_time_tick+0x69>
    }

    task_dispatch();
   11868:	e8 cf fe ff ff       	call   1173c <task_dispatch>
}
   1186d:	90                   	nop
   1186e:	c9                   	leave  
   1186f:	c3                   	ret    

00011870 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   11870:	55                   	push   %ebp
   11871:	89 e5                	mov    %esp,%ebp
   11873:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11876:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1187a:	74 22                	je     1189e <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   1187c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1187f:	8b 45 08             	mov    0x8(%ebp),%eax
   11882:	89 50 44             	mov    %edx,0x44(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   11885:	8b 45 08             	mov    0x8(%ebp),%eax
   11888:	83 c0 2c             	add    $0x2c,%eax
   1188b:	83 ec 08             	sub    $0x8,%esp
   1188e:	50                   	push   %eax
   1188f:	68 1c 80 01 00       	push   $0x1801c
   11894:	e8 33 26 00 00       	call   13ecc <list_insert_back>
   11899:	83 c4 10             	add    $0x10,%esp
   1189c:	eb 01                	jmp    1189f <task_set_sleep+0x2f>
        return;
   1189e:	90                   	nop
}
   1189f:	c9                   	leave  
   118a0:	c3                   	ret    

000118a1 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   118a1:	55                   	push   %ebp
   118a2:	89 e5                	mov    %esp,%ebp
   118a4:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   118a7:	8b 45 08             	mov    0x8(%ebp),%eax
   118aa:	83 c0 2c             	add    $0x2c,%eax
   118ad:	83 ec 08             	sub    $0x8,%esp
   118b0:	50                   	push   %eax
   118b1:	68 1c 80 01 00       	push   $0x1801c
   118b6:	e8 ed 26 00 00       	call   13fa8 <list_remove>
   118bb:	83 c4 10             	add    $0x10,%esp
}
   118be:	90                   	nop
   118bf:	c9                   	leave  
   118c0:	c3                   	ret    

000118c1 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   118c1:	55                   	push   %ebp
   118c2:	89 e5                	mov    %esp,%ebp
   118c4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   118c7:	e8 16 14 00 00       	call   12ce2 <irq_enter_protection>
   118cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   118cf:	a1 00 80 01 00       	mov    0x18000,%eax
   118d4:	83 ec 0c             	sub    $0xc,%esp
   118d7:	50                   	push   %eax
   118d8:	e8 86 fd ff ff       	call   11663 <task_set_blocked>
   118dd:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   118e0:	8b 45 08             	mov    0x8(%ebp),%eax
   118e3:	83 c0 09             	add    $0x9,%eax
   118e6:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   118eb:	f7 e2                	mul    %edx
   118ed:	c1 ea 03             	shr    $0x3,%edx
   118f0:	a1 00 80 01 00       	mov    0x18000,%eax
   118f5:	83 ec 08             	sub    $0x8,%esp
   118f8:	52                   	push   %edx
   118f9:	50                   	push   %eax
   118fa:	e8 71 ff ff ff       	call   11870 <task_set_sleep>
   118ff:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   11902:	e8 35 fe ff ff       	call   1173c <task_dispatch>

    irq_leave_protection(state);
   11907:	83 ec 0c             	sub    $0xc,%esp
   1190a:	ff 75 f4             	pushl  -0xc(%ebp)
   1190d:	e8 e8 13 00 00       	call   12cfa <irq_leave_protection>
   11912:	83 c4 10             	add    $0x10,%esp
}
   11915:	90                   	nop
   11916:	c9                   	leave  
   11917:	c3                   	ret    

00011918 <sys_getpid>:


int sys_getpid(void) {
   11918:	55                   	push   %ebp
   11919:	89 e5                	mov    %esp,%ebp
   1191b:	83 ec 10             	sub    $0x10,%esp
    task_t* task = task_current();
   1191e:	e8 ae fd ff ff       	call   116d1 <task_current>
   11923:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   11926:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11929:	8b 40 24             	mov    0x24(%eax),%eax
}
   1192c:	c9                   	leave  
   1192d:	c3                   	ret    

0001192e <alloc_task>:



// 分配 task
static task_t* alloc_task(void) {
   1192e:	55                   	push   %ebp
   1192f:	89 e5                	mov    %esp,%ebp
   11931:	83 ec 18             	sub    $0x18,%esp
    task_t* task = (task_t*)0;
   11934:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&task_table_mutex);
   1193b:	83 ec 0c             	sub    $0xc,%esp
   1193e:	68 c0 df 01 00       	push   $0x1dfc0
   11943:	e8 48 1a 00 00       	call   13390 <mutex_acquire>
   11948:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < TASK_NR; i++) {
   1194b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11952:	eb 28                	jmp    1197c <alloc_task+0x4e>
        task_t* curr = task_table + i;
   11954:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11957:	69 c0 bc 00 00 00    	imul   $0xbc,%eax,%eax
   1195d:	05 c0 81 01 00       	add    $0x181c0,%eax
   11962:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (curr->name[0] == '\0') {
   11965:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11968:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1196c:	84 c0                	test   %al,%al
   1196e:	75 08                	jne    11978 <alloc_task+0x4a>
            task = curr;
   11970:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11973:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11976:	eb 0a                	jmp    11982 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++) {
   11978:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1197c:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11980:	7e d2                	jle    11954 <alloc_task+0x26>
        }
    }

    mutex_release(&task_table_mutex);
   11982:	83 ec 0c             	sub    $0xc,%esp
   11985:	68 c0 df 01 00       	push   $0x1dfc0
   1198a:	e8 8f 1a 00 00       	call   1341e <mutex_release>
   1198f:	83 c4 10             	add    $0x10,%esp

    return task;
   11992:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11995:	c9                   	leave  
   11996:	c3                   	ret    

00011997 <free_task>:

// 释放 task
static void free_task(task_t* task) {
   11997:	55                   	push   %ebp
   11998:	89 e5                	mov    %esp,%ebp
   1199a:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&task_table_mutex);
   1199d:	83 ec 0c             	sub    $0xc,%esp
   119a0:	68 c0 df 01 00       	push   $0x1dfc0
   119a5:	e8 e6 19 00 00       	call   13390 <mutex_acquire>
   119aa:	83 c4 10             	add    $0x10,%esp

    task->name[0] = '\0';
   119ad:	8b 45 08             	mov    0x8(%ebp),%eax
   119b0:	c6 40 04 00          	movb   $0x0,0x4(%eax)

    mutex_release(&task_table_mutex);
   119b4:	83 ec 0c             	sub    $0xc,%esp
   119b7:	68 c0 df 01 00       	push   $0x1dfc0
   119bc:	e8 5d 1a 00 00       	call   1341e <mutex_release>
   119c1:	83 c4 10             	add    $0x10,%esp
}
   119c4:	90                   	nop
   119c5:	c9                   	leave  
   119c6:	c3                   	ret    

000119c7 <sys_fork>:




int sys_fork(void) {
   119c7:	55                   	push   %ebp
   119c8:	89 e5                	mov    %esp,%ebp
   119ca:	83 ec 28             	sub    $0x28,%esp
    // 获取父进程
    task_t* parent_task = task_current();
   119cd:	e8 ff fc ff ff       	call   116d1 <task_current>
   119d2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* child_task = alloc_task();
   119d5:	e8 54 ff ff ff       	call   1192e <alloc_task>
   119da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0) {
   119dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   119e1:	0f 84 3d 01 00 00    	je     11b24 <sys_fork+0x15d>
        goto fork_failed;
    }

    // 获取进程的 寄存器结构的起始地址
    syscall_frame_t * frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   119e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119ea:	8b 40 54             	mov    0x54(%eax),%eax
   119ed:	83 e8 58             	sub    $0x58,%eax
   119f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 需要把esp指针调回去
    int err = task_init(child_task, 
                        parent_task->name, 
                        TASK_FLAGS_USER, 
                        frame->eip, 
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT); // 这里的esp是esp3
   119f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119f6:	8b 40 50             	mov    0x50(%eax),%eax
   119f9:	8d 50 14             	lea    0x14(%eax),%edx
                        frame->eip, 
   119fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119ff:	8b 40 34             	mov    0x34(%eax),%eax
    int err = task_init(child_task, 
   11a02:	89 c1                	mov    %eax,%ecx
                        parent_task->name, 
   11a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a07:	83 c0 04             	add    $0x4,%eax
    int err = task_init(child_task, 
   11a0a:	83 ec 0c             	sub    $0xc,%esp
   11a0d:	52                   	push   %edx
   11a0e:	51                   	push   %ecx
   11a0f:	6a 00                	push   $0x0
   11a11:	50                   	push   %eax
   11a12:	ff 75 f0             	pushl  -0x10(%ebp)
   11a15:	e8 7b f8 ff ff       	call   11295 <task_init>
   11a1a:	83 c4 20             	add    $0x20,%esp
   11a1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11a20:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11a24:	0f 88 fd 00 00 00    	js     11b27 <sys_fork+0x160>
        goto fork_failed;
    }

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t * tss = &child_task->tss;
   11a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a2d:	83 c0 50             	add    $0x50,%eax
   11a30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       // 子进程返回0
   11a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a36:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11a3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a40:	8b 40 24             	mov    0x24(%eax),%eax
   11a43:	89 c2                	mov    %eax,%edx
   11a45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a48:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11a4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a4e:	8b 40 2c             	mov    0x2c(%eax),%eax
   11a51:	89 c2                	mov    %eax,%edx
   11a53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a56:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a5c:	8b 40 28             	mov    0x28(%eax),%eax
   11a5f:	89 c2                	mov    %eax,%edx
   11a61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a64:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11a67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a6a:	8b 40 18             	mov    0x18(%eax),%eax
   11a6d:	89 c2                	mov    %eax,%edx
   11a6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a72:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a78:	8b 40 14             	mov    0x14(%eax),%eax
   11a7b:	89 c2                	mov    %eax,%edx
   11a7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a80:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11a83:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a86:	8b 40 1c             	mov    0x1c(%eax),%eax
   11a89:	89 c2                	mov    %eax,%edx
   11a8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a8e:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11a91:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a94:	8b 40 38             	mov    0x38(%eax),%eax
   11a97:	89 c2                	mov    %eax,%edx
   11a99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a9c:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa2:	8b 40 10             	mov    0x10(%eax),%eax
   11aa5:	89 c2                	mov    %eax,%edx
   11aa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aaa:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ab0:	8b 40 0c             	mov    0xc(%eax),%eax
   11ab3:	89 c2                	mov    %eax,%edx
   11ab5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ab8:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11abe:	8b 40 08             	mov    0x8(%eax),%eax
   11ac1:	89 c2                	mov    %eax,%edx
   11ac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ac6:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11ac9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11acc:	8b 40 04             	mov    0x4(%eax),%eax
   11acf:	89 c2                	mov    %eax,%edx
   11ad1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ad4:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11ad7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ada:	8b 00                	mov    (%eax),%eax
   11adc:	89 c2                	mov    %eax,%edx
   11ade:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ae1:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11ae4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11aea:	89 50 28             	mov    %edx,0x28(%eax)

    // 复制父进程的内存空间到子进程
    if ((tss->cr3 = memory_copy_uvm2(parent_task->tss.cr3, tss->cr3)) < 0) {
   11aed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11af0:	8b 50 1c             	mov    0x1c(%eax),%edx
   11af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11af6:	8b 40 6c             	mov    0x6c(%eax),%eax
   11af9:	83 ec 08             	sub    $0x8,%esp
   11afc:	52                   	push   %edx
   11afd:	50                   	push   %eax
   11afe:	e8 5a f3 ff ff       	call   10e5d <memory_copy_uvm2>
   11b03:	83 c4 10             	add    $0x10,%esp
   11b06:	89 c2                	mov    %eax,%edx
   11b08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b0b:	89 50 1c             	mov    %edx,0x1c(%eax)
        goto fork_failed;
    }

    task_start(child_task);
   11b0e:	83 ec 0c             	sub    $0xc,%esp
   11b11:	ff 75 f0             	pushl  -0x10(%ebp)
   11b14:	e8 17 f9 ff ff       	call   11430 <task_start>
   11b19:	83 c4 10             	add    $0x10,%esp

    return child_task->pid;
   11b1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b1f:	8b 40 24             	mov    0x24(%eax),%eax
   11b22:	eb 2b                	jmp    11b4f <sys_fork+0x188>
        goto fork_failed;
   11b24:	90                   	nop
   11b25:	eb 01                	jmp    11b28 <sys_fork+0x161>
        goto fork_failed;
   11b27:	90                   	nop

fork_failed:
    if (child_task) {
   11b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b2c:	74 1c                	je     11b4a <sys_fork+0x183>
        task_uninit(child_task);
   11b2e:	83 ec 0c             	sub    $0xc,%esp
   11b31:	ff 75 f0             	pushl  -0x10(%ebp)
   11b34:	e8 52 f8 ff ff       	call   1138b <task_uninit>
   11b39:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11b3c:	83 ec 0c             	sub    $0xc,%esp
   11b3f:	ff 75 f0             	pushl  -0x10(%ebp)
   11b42:	e8 50 fe ff ff       	call   11997 <free_task>
   11b47:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11b4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11b4f:	c9                   	leave  
   11b50:	c3                   	ret    

00011b51 <load_phdr>:


static int load_phdr(int fd, Elf32_Phdr* phdr, uint32_t page_dir) {
   11b51:	55                   	push   %ebp
   11b52:	89 e5                	mov    %esp,%ebp
   11b54:	83 ec 28             	sub    $0x28,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, 
   11b57:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b5a:	8b 50 14             	mov    0x14(%eax),%edx
   11b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b60:	8b 40 08             	mov    0x8(%eax),%eax
   11b63:	6a 07                	push   $0x7
   11b65:	52                   	push   %edx
   11b66:	50                   	push   %eax
   11b67:	ff 75 10             	pushl  0x10(%ebp)
   11b6a:	e8 b0 ee ff ff       	call   10a1f <memory_alloc_for_page_dir>
   11b6f:	83 c4 10             	add    $0x10,%esp
   11b72:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                        phdr->p_memsz, PTE_P | PTE_U | PTE_W);
    if (err < 0) {
   11b75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11b79:	79 1a                	jns    11b95 <load_phdr+0x44>
        log_printf("load_phdr: no memory");
   11b7b:	83 ec 0c             	sub    $0xc,%esp
   11b7e:	68 74 44 01 00       	push   $0x14474
   11b83:	e8 83 25 00 00       	call   1410b <log_printf>
   11b88:	83 c4 10             	add    $0x10,%esp
        return -1;
   11b8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b90:	e9 b8 00 00 00       	jmp    11c4d <load_phdr+0xfc>
    }

    // 调整当前的读写位置，指针指向当前 program 的开头
    if (sys_lseek(fd, phdr->p_offset, 0) < 0) {
   11b95:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b98:	8b 40 04             	mov    0x4(%eax),%eax
   11b9b:	83 ec 04             	sub    $0x4,%esp
   11b9e:	6a 00                	push   $0x0
   11ba0:	50                   	push   %eax
   11ba1:	ff 75 08             	pushl  0x8(%ebp)
   11ba4:	e8 2d 14 00 00       	call   12fd6 <sys_lseek>
   11ba9:	83 c4 10             	add    $0x10,%esp
   11bac:	85 c0                	test   %eax,%eax
   11bae:	79 1a                	jns    11bca <load_phdr+0x79>
        log_printf("load_phdr: read file failed");
   11bb0:	83 ec 0c             	sub    $0xc,%esp
   11bb3:	68 89 44 01 00       	push   $0x14489
   11bb8:	e8 4e 25 00 00       	call   1410b <log_printf>
   11bbd:	83 c4 10             	add    $0x10,%esp
        return -1;
   11bc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bc5:	e9 83 00 00 00       	jmp    11c4d <load_phdr+0xfc>
    }

    uint32_t vaddr = phdr->p_vaddr;
   11bca:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bcd:	8b 40 08             	mov    0x8(%eax),%eax
   11bd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11bd3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bd6:	8b 40 10             	mov    0x10(%eax),%eax
   11bd9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while (size > 0) {
   11bdc:	eb 64                	jmp    11c42 <load_phdr+0xf1>
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11bde:	b8 00 10 00 00       	mov    $0x1000,%eax
   11be3:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11bea:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11bee:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11bf1:	83 ec 08             	sub    $0x8,%esp
   11bf4:	ff 75 f4             	pushl  -0xc(%ebp)
   11bf7:	ff 75 10             	pushl  0x10(%ebp)
   11bfa:	e8 a5 f3 ff ff       	call   10fa4 <memory_get_paddr>
   11bff:	83 c4 10             	add    $0x10,%esp
   11c02:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(fd, (char *)paddr, curr_size) <  curr_size) {
   11c05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c08:	83 ec 04             	sub    $0x4,%esp
   11c0b:	ff 75 e8             	pushl  -0x18(%ebp)
   11c0e:	50                   	push   %eax
   11c0f:	ff 75 08             	pushl  0x8(%ebp)
   11c12:	e8 76 13 00 00       	call   12f8d <sys_read>
   11c17:	83 c4 10             	add    $0x10,%esp
   11c1a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11c1d:	7e 17                	jle    11c36 <load_phdr+0xe5>
            log_printf("read file failed");
   11c1f:	83 ec 0c             	sub    $0xc,%esp
   11c22:	68 a5 44 01 00       	push   $0x144a5
   11c27:	e8 df 24 00 00       	call   1410b <log_printf>
   11c2c:	83 c4 10             	add    $0x10,%esp
            return -1;
   11c2f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c34:	eb 17                	jmp    11c4d <load_phdr+0xfc>
        }

        size -= curr_size;
   11c36:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c39:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11c3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c3f:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0) {
   11c42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c46:	75 96                	jne    11bde <load_phdr+0x8d>
    }

    return 0;
   11c48:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c4d:	c9                   	leave  
   11c4e:	c3                   	ret    

00011c4f <load_elf_file>:


static uint32_t load_elf_file(task_t* task, const char* name, uint32_t page_dir) {
   11c4f:	55                   	push   %ebp
   11c50:	89 e5                	mov    %esp,%ebp
   11c52:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;     // 创建elf_hdr内存空间，用于读取elf头
    Elf32_Phdr elf_phdr;    // 创建phdr内存空间，用于读取phdr头

    int fd = sys_open(name, 0);
   11c55:	83 ec 08             	sub    $0x8,%esp
   11c58:	6a 00                	push   $0x0
   11c5a:	ff 75 0c             	pushl  0xc(%ebp)
   11c5d:	e8 f2 12 00 00       	call   12f54 <sys_open>
   11c62:	83 c4 10             	add    $0x10,%esp
   11c65:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (fd < 0) {
   11c68:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c6c:	79 18                	jns    11c86 <load_elf_file+0x37>
        log_printf("open failed: %s", name);
   11c6e:	83 ec 08             	sub    $0x8,%esp
   11c71:	ff 75 0c             	pushl  0xc(%ebp)
   11c74:	68 b6 44 01 00       	push   $0x144b6
   11c79:	e8 8d 24 00 00       	call   1410b <log_printf>
   11c7e:	83 c4 10             	add    $0x10,%esp

        goto load_failed;
   11c81:	e9 7a 01 00 00       	jmp    11e00 <load_elf_file+0x1b1>
    }

    int cnt = sys_read(fd, (char*)&elf_hdr, sizeof(elf_hdr));
   11c86:	83 ec 04             	sub    $0x4,%esp
   11c89:	6a 34                	push   $0x34
   11c8b:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11c8e:	50                   	push   %eax
   11c8f:	ff 75 ec             	pushl  -0x14(%ebp)
   11c92:	e8 f6 12 00 00       	call   12f8d <sys_read>
   11c97:	83 c4 10             	add    $0x10,%esp
   11c9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11c9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ca0:	83 f8 33             	cmp    $0x33,%eax
   11ca3:	77 18                	ja     11cbd <load_elf_file+0x6e>
        log_printf("elf hdr smaller than sizeof(Elf32_Ehdr). size = %d", cnt);
   11ca5:	83 ec 08             	sub    $0x8,%esp
   11ca8:	ff 75 e8             	pushl  -0x18(%ebp)
   11cab:	68 c8 44 01 00       	push   $0x144c8
   11cb0:	e8 56 24 00 00       	call   1410b <log_printf>
   11cb5:	83 c4 10             	add    $0x10,%esp

        goto load_failed;
   11cb8:	e9 43 01 00 00       	jmp    11e00 <load_elf_file+0x1b1>
    }

    // ELF MAGIC NUMBER 检查 
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E')
   11cbd:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11cc1:	3c 7f                	cmp    $0x7f,%al
   11cc3:	75 18                	jne    11cdd <load_elf_file+0x8e>
   11cc5:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11cc9:	3c 45                	cmp    $0x45,%al
   11ccb:	75 10                	jne    11cdd <load_elf_file+0x8e>
        || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F')) {
   11ccd:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11cd1:	3c 4c                	cmp    $0x4c,%al
   11cd3:	75 08                	jne    11cdd <load_elf_file+0x8e>
   11cd5:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11cd9:	3c 46                	cmp    $0x46,%al
   11cdb:	74 15                	je     11cf2 <load_elf_file+0xa3>
        log_printf("check elf indent failed.");
   11cdd:	83 ec 0c             	sub    $0xc,%esp
   11ce0:	68 fb 44 01 00       	push   $0x144fb
   11ce5:	e8 21 24 00 00       	call   1410b <log_printf>
   11cea:	83 c4 10             	add    $0x10,%esp

        goto load_failed;
   11ced:	e9 0e 01 00 00       	jmp    11e00 <load_elf_file+0x1b1>

    //     goto load_failed;
    // }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11cf2:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11cf6:	66 85 c0             	test   %ax,%ax
   11cf9:	74 07                	je     11d02 <load_elf_file+0xb3>
   11cfb:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11cfe:	85 c0                	test   %eax,%eax
   11d00:	75 15                	jne    11d17 <load_elf_file+0xc8>
        log_printf("none programe header");
   11d02:	83 ec 0c             	sub    $0xc,%esp
   11d05:	68 14 45 01 00       	push   $0x14514
   11d0a:	e8 fc 23 00 00       	call   1410b <log_printf>
   11d0f:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d12:	e9 e9 00 00 00       	jmp    11e00 <load_elf_file+0x1b1>
    }

    // 加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11d17:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11d1d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11d24:	e9 c0 00 00 00       	jmp    11de9 <load_elf_file+0x19a>
        // 读取偏移量
        if (sys_lseek(fd, e_phoff, 0) < 0) {
   11d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d2c:	83 ec 04             	sub    $0x4,%esp
   11d2f:	6a 00                	push   $0x0
   11d31:	50                   	push   %eax
   11d32:	ff 75 ec             	pushl  -0x14(%ebp)
   11d35:	e8 9c 12 00 00       	call   12fd6 <sys_lseek>
   11d3a:	83 c4 10             	add    $0x10,%esp
   11d3d:	85 c0                	test   %eax,%eax
   11d3f:	79 15                	jns    11d56 <load_elf_file+0x107>
            log_printf("read file failed");
   11d41:	83 ec 0c             	sub    $0xc,%esp
   11d44:	68 a5 44 01 00       	push   $0x144a5
   11d49:	e8 bd 23 00 00       	call   1410b <log_printf>
   11d4e:	83 c4 10             	add    $0x10,%esp

            goto load_failed;
   11d51:	e9 aa 00 00 00       	jmp    11e00 <load_elf_file+0x1b1>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(fd, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11d56:	83 ec 04             	sub    $0x4,%esp
   11d59:	6a 20                	push   $0x20
   11d5b:	8d 45 90             	lea    -0x70(%ebp),%eax
   11d5e:	50                   	push   %eax
   11d5f:	ff 75 ec             	pushl  -0x14(%ebp)
   11d62:	e8 26 12 00 00       	call   12f8d <sys_read>
   11d67:	83 c4 10             	add    $0x10,%esp
   11d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11d6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d70:	83 f8 1f             	cmp    $0x1f,%eax
   11d73:	77 12                	ja     11d87 <load_elf_file+0x138>
            log_printf("read file failed");
   11d75:	83 ec 0c             	sub    $0xc,%esp
   11d78:	68 a5 44 01 00       	push   $0x144a5
   11d7d:	e8 89 23 00 00       	call   1410b <log_printf>
   11d82:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11d85:	eb 79                	jmp    11e00 <load_elf_file+0x1b1>
        }

        // 简单做一些检查
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE)) {
   11d87:	8b 45 90             	mov    -0x70(%ebp),%eax
   11d8a:	83 f8 01             	cmp    $0x1,%eax
   11d8d:	75 07                	jne    11d96 <load_elf_file+0x147>
   11d8f:	8b 45 98             	mov    -0x68(%ebp),%eax
   11d92:	85 c0                	test   %eax,%eax
   11d94:	78 10                	js     11da6 <load_elf_file+0x157>
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11d96:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11d9a:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11d9e:	0f b7 c0             	movzwl %ax,%eax
   11da1:	01 45 f4             	add    %eax,-0xc(%ebp)
   11da4:	eb 43                	jmp    11de9 <load_elf_file+0x19a>
           continue;
        }

        // 加载当前程序头
        int err = load_phdr(fd, &elf_phdr, page_dir);
   11da6:	83 ec 04             	sub    $0x4,%esp
   11da9:	ff 75 10             	pushl  0x10(%ebp)
   11dac:	8d 45 90             	lea    -0x70(%ebp),%eax
   11daf:	50                   	push   %eax
   11db0:	ff 75 ec             	pushl  -0x14(%ebp)
   11db3:	e8 99 fd ff ff       	call   11b51 <load_phdr>
   11db8:	83 c4 10             	add    $0x10,%esp
   11dbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11dbe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11dc2:	79 12                	jns    11dd6 <load_elf_file+0x187>
            log_printf("load program hdr failed");
   11dc4:	83 ec 0c             	sub    $0xc,%esp
   11dc7:	68 29 45 01 00       	push   $0x14529
   11dcc:	e8 3a 23 00 00       	call   1410b <log_printf>
   11dd1:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11dd4:	eb 2a                	jmp    11e00 <load_elf_file+0x1b1>
        }

        sys_close(fd);
   11dd6:	83 ec 0c             	sub    $0xc,%esp
   11dd9:	ff 75 ec             	pushl  -0x14(%ebp)
   11ddc:	e8 19 12 00 00       	call   12ffa <sys_close>
   11de1:	83 c4 10             	add    $0x10,%esp
        return elf_hdr.e_entry;
   11de4:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11de7:	eb 30                	jmp    11e19 <load_elf_file+0x1ca>
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11de9:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11ded:	0f b7 c0             	movzwl %ax,%eax
   11df0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11df3:	0f 8c 30 ff ff ff    	jl     11d29 <load_elf_file+0xda>
    }

    return 0;
   11df9:	b8 00 00 00 00       	mov    $0x0,%eax
   11dfe:	eb 19                	jmp    11e19 <load_elf_file+0x1ca>

load_failed:
    if (fd >= 0) {
   11e00:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e04:	78 0e                	js     11e14 <load_elf_file+0x1c5>
        sys_close(fd);
   11e06:	83 ec 0c             	sub    $0xc,%esp
   11e09:	ff 75 ec             	pushl  -0x14(%ebp)
   11e0c:	e8 e9 11 00 00       	call   12ffa <sys_close>
   11e11:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11e14:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11e19:	c9                   	leave  
   11e1a:	c3                   	ret    

00011e1b <copy_args>:


static int copy_args(char* to, uint32_t page_dir, int argc, char** argv) {
   11e1b:	55                   	push   %ebp
   11e1c:	89 e5                	mov    %esp,%ebp
   11e1e:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   11e21:	8b 45 10             	mov    0x10(%ebp),%eax
   11e24:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char**)(to + sizeof(task_args_t));
   11e27:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2a:	83 c0 0c             	add    $0xc,%eax
   11e2d:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char* dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc);   // 留出结束符
   11e30:	8b 45 10             	mov    0x10(%ebp),%eax
   11e33:	83 c0 03             	add    $0x3,%eax
   11e36:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e40:	01 d0                	add    %edx,%eax
   11e42:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // argv表
    char** dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11e45:	8b 45 08             	mov    0x8(%ebp),%eax
   11e48:	83 c0 0c             	add    $0xc,%eax
   11e4b:	83 ec 08             	sub    $0x8,%esp
   11e4e:	50                   	push   %eax
   11e4f:	ff 75 0c             	pushl  0xc(%ebp)
   11e52:	e8 4d f1 ff ff       	call   10fa4 <memory_get_paddr>
   11e57:	83 c4 10             	add    $0x10,%esp
   11e5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11e5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e61:	75 1c                	jne    11e7f <copy_args+0x64>
   11e63:	68 41 45 01 00       	push   $0x14541
   11e68:	68 78 45 01 00       	push   $0x14578
   11e6d:	68 60 02 00 00       	push   $0x260
   11e72:	68 f8 43 01 00       	push   $0x143f8
   11e77:	e8 12 1f 00 00       	call   13d8e <pannic>
   11e7c:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++) {
   11e7f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e86:	e9 82 00 00 00       	jmp    11f0d <copy_args+0xf2>
        char* from = argv[i];
   11e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e8e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e95:	8b 45 14             	mov    0x14(%ebp),%eax
   11e98:	01 d0                	add    %edx,%eax
   11e9a:	8b 00                	mov    (%eax),%eax
   11e9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kstrlen(from) + 1;    // '\0'
   11e9f:	83 ec 0c             	sub    $0xc,%esp
   11ea2:	ff 75 e8             	pushl  -0x18(%ebp)
   11ea5:	e8 7b 1a 00 00       	call   13925 <kstrlen>
   11eaa:	83 c4 10             	add    $0x10,%esp
   11ead:	83 c0 01             	add    $0x1,%eax
   11eb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11eb3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11eb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ebc:	51                   	push   %ecx
   11ebd:	52                   	push   %edx
   11ebe:	ff 75 0c             	pushl  0xc(%ebp)
   11ec1:	50                   	push   %eax
   11ec2:	e8 d5 ea ff ff       	call   1099c <memory_copy_uvm_data>
   11ec7:	83 c4 10             	add    $0x10,%esp
   11eca:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11ecd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11ed1:	79 1c                	jns    11eef <copy_args+0xd4>
   11ed3:	68 53 45 01 00       	push   $0x14553
   11ed8:	68 78 45 01 00       	push   $0x14578
   11edd:	68 66 02 00 00       	push   $0x266
   11ee2:	68 f8 43 01 00       	push   $0x143f8
   11ee7:	e8 a2 1e 00 00       	call   13d8e <pannic>
   11eec:	83 c4 10             	add    $0x10,%esp

        // 关联ar
        dest_argv_tb[i] = dest_arg;
   11eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ef2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ef9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11efc:	01 c2                	add    %eax,%edx
   11efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f01:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   11f03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f06:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++) {
   11f09:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f10:	3b 45 10             	cmp    0x10(%ebp),%eax
   11f13:	0f 8c 72 ff ff ff    	jl     11e8b <copy_args+0x70>
    }

    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args));
   11f19:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   11f1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1f:	6a 0c                	push   $0xc
   11f21:	52                   	push   %edx
   11f22:	ff 75 0c             	pushl  0xc(%ebp)
   11f25:	50                   	push   %eax
   11f26:	e8 71 ea ff ff       	call   1099c <memory_copy_uvm_data>
   11f2b:	83 c4 10             	add    $0x10,%esp
}
   11f2e:	c9                   	leave  
   11f2f:	c3                   	ret    

00011f30 <sys_execve>:


int sys_execve(char* name, char** argv, char** env) {
   11f30:	55                   	push   %ebp
   11f31:	89 e5                	mov    %esp,%ebp
   11f33:	83 ec 28             	sub    $0x28,%esp
    task_t* task = task_current();
   11f36:	e8 96 f7 ff ff       	call   116d1 <task_current>
   11f3b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 更新进程的名字
    kstrncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   11f3e:	83 ec 0c             	sub    $0xc,%esp
   11f41:	ff 75 08             	pushl  0x8(%ebp)
   11f44:	e8 a8 1e 00 00       	call   13df1 <get_file_name>
   11f49:	83 c4 10             	add    $0x10,%esp
   11f4c:	89 c2                	mov    %eax,%edx
   11f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f51:	83 c0 04             	add    $0x4,%eax
   11f54:	83 ec 04             	sub    $0x4,%esp
   11f57:	6a 20                	push   $0x20
   11f59:	52                   	push   %edx
   11f5a:	50                   	push   %eax
   11f5b:	e8 55 19 00 00       	call   138b5 <kstrncpy>
   11f60:	83 c4 10             	add    $0x10,%esp

    // 获取原页表，需要销毁
    uint32_t old_page_dir = task->tss.cr3;
   11f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f66:	8b 40 6c             	mov    0x6c(%eax),%eax
   11f69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 创建一个新页表
    uint32_t new_page_dir = memory_create_uvm();
   11f6c:	e8 c2 e8 ff ff       	call   10833 <memory_create_uvm>
   11f71:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir) {
   11f74:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f78:	0f 84 1d 01 00 00    	je     1209b <sys_execve+0x16b>
        goto execve_failed;
    }

    // 加载elf文件的入口地址      给哪个进程加载，路径，页表是哪个
    uint32_t entry = load_elf_file(task, name, new_page_dir);
   11f7e:	83 ec 04             	sub    $0x4,%esp
   11f81:	ff 75 ec             	pushl  -0x14(%ebp)
   11f84:	ff 75 08             	pushl  0x8(%ebp)
   11f87:	ff 75 f4             	pushl  -0xc(%ebp)
   11f8a:	e8 c0 fc ff ff       	call   11c4f <load_elf_file>
   11f8f:	83 c4 10             	add    $0x10,%esp
   11f92:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0) {
   11f95:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f99:	0f 84 ff 00 00 00    	je     1209e <sys_execve+0x16e>
        goto execve_failed;
    }

    // 分配用户栈空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;
   11f9f:	c7 45 e4 00 00 ff df 	movl   $0xdfff0000,-0x1c(%ebp)
    
    int err = memory_alloc_for_page_dir(new_page_dir, 
   11fa6:	6a 07                	push   $0x7
   11fa8:	68 00 40 1f 00       	push   $0x1f4000
   11fad:	68 00 c0 e0 df       	push   $0xdfe0c000
   11fb2:	ff 75 ec             	pushl  -0x14(%ebp)
   11fb5:	e8 65 ea ff ff       	call   10a1f <memory_alloc_for_page_dir>
   11fba:	83 c4 10             	add    $0x10,%esp
   11fbd:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                        MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, 
                                        MEM_TASK_STACK_SIZE, 
                                        PTE_P | PTE_U | PTE_W);

    if (err < 0) {
   11fc0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11fc4:	0f 88 d7 00 00 00    	js     120a1 <sys_execve+0x171>
        goto execve_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   11fca:	83 ec 0c             	sub    $0xc,%esp
   11fcd:	ff 75 0c             	pushl  0xc(%ebp)
   11fd0:	e8 ef 1d 00 00       	call   13dc4 <strings_count>
   11fd5:	83 c4 10             	add    $0x10,%esp
   11fd8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char*)stack_top, new_page_dir, argc, argv);
   11fdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11fde:	ff 75 0c             	pushl  0xc(%ebp)
   11fe1:	ff 75 dc             	pushl  -0x24(%ebp)
   11fe4:	ff 75 ec             	pushl  -0x14(%ebp)
   11fe7:	50                   	push   %eax
   11fe8:	e8 2e fe ff ff       	call   11e1b <copy_args>
   11fed:	83 c4 10             	add    $0x10,%esp
   11ff0:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0) {
   11ff3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11ff7:	0f 88 a7 00 00 00    	js     120a4 <sys_execve+0x174>
    }

    
    // 因为要从内核返回，这里把内核栈里的EIP 等 其他寄存器 内容修改掉
    // 这样在 iret 返回时，就可以直接去新的地址，和新的环境
    syscall_frame_t * frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   11ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12000:	8b 40 54             	mov    0x54(%eax),%eax
   12003:	83 e8 58             	sub    $0x58,%eax
   12006:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   12009:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1200c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1200f:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = 0;
   12012:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12015:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    frame->ebx = 0;
   1201c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1201f:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    frame->ecx = 0;
   12026:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12029:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    frame->edx = 0;
   12030:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12033:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    frame->esi = 0;
   1203a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1203d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    frame->edi = 0;
   12044:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12047:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    frame->ebp = 0;
   1204e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12051:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   12058:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1205b:	c7 00 02 02 00 00    	movl   $0x202,(%eax)
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT; // 要执行retf $(5 * 4)
   12061:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12064:	83 e8 14             	sub    $0x14,%eax
   12067:	89 c2                	mov    %eax,%edx
   12069:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1206c:	89 50 50             	mov    %edx,0x50(%eax)

    task->tss.cr3 = new_page_dir;
   1206f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12072:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12075:	89 50 6c             	mov    %edx,0x6c(%eax)

    // 修改进程的 TR寄存器，用新页表
    mmu_set_page_dir(new_page_dir);
   12078:	83 ec 0c             	sub    $0xc,%esp
   1207b:	ff 75 ec             	pushl  -0x14(%ebp)
   1207e:	e8 79 f0 ff ff       	call   110fc <mmu_set_page_dir>
   12083:	83 c4 10             	add    $0x10,%esp

    memory_destroy_uvm(old_page_dir);
   12086:	83 ec 0c             	sub    $0xc,%esp
   12089:	ff 75 f0             	pushl  -0x10(%ebp)
   1208c:	e8 7f eb ff ff       	call   10c10 <memory_destroy_uvm>
   12091:	83 c4 10             	add    $0x10,%esp

    // 此时原进程的地址 0x80000000已经没有东西了



    return 0;
   12094:	b8 00 00 00 00       	mov    $0x0,%eax
   12099:	eb 3a                	jmp    120d5 <sys_execve+0x1a5>
        goto execve_failed;
   1209b:	90                   	nop
   1209c:	eb 07                	jmp    120a5 <sys_execve+0x175>
        goto execve_failed;
   1209e:	90                   	nop
   1209f:	eb 04                	jmp    120a5 <sys_execve+0x175>
        goto execve_failed;
   120a1:	90                   	nop
   120a2:	eb 01                	jmp    120a5 <sys_execve+0x175>
        goto execve_failed;
   120a4:	90                   	nop


execve_failed:
    if (new_page_dir) {
   120a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120a9:	74 25                	je     120d0 <sys_execve+0x1a0>
        task->tss.cr3 = old_page_dir;
   120ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
   120b1:	89 50 6c             	mov    %edx,0x6c(%eax)
        mmu_set_page_dir(old_page_dir);
   120b4:	83 ec 0c             	sub    $0xc,%esp
   120b7:	ff 75 f0             	pushl  -0x10(%ebp)
   120ba:	e8 3d f0 ff ff       	call   110fc <mmu_set_page_dir>
   120bf:	83 c4 10             	add    $0x10,%esp

        memory_destroy_uvm(new_page_dir);
   120c2:	83 ec 0c             	sub    $0xc,%esp
   120c5:	ff 75 ec             	pushl  -0x14(%ebp)
   120c8:	e8 43 eb ff ff       	call   10c10 <memory_destroy_uvm>
   120cd:	83 c4 10             	add    $0x10,%esp
    }


    return -1;
   120d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   120d5:	c9                   	leave  
   120d6:	c3                   	ret    

000120d7 <sys_exit>:


int sys_exit(int status) {
   120d7:	55                   	push   %ebp
   120d8:	89 e5                	mov    %esp,%ebp
   120da:	83 ec 18             	sub    $0x18,%esp


    irq_state_t state = irq_enter_protection();
   120dd:	e8 00 0c 00 00       	call   12ce2 <irq_enter_protection>
   120e2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   120e5:	e8 e7 f5 ff ff       	call   116d1 <task_current>
   120ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    curr->state = TASK_ZOMBIE;
   120ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120f0:	c7 00 05 00 00 00    	movl   $0x5,(%eax)

    task_set_blocked(curr);
   120f6:	83 ec 0c             	sub    $0xc,%esp
   120f9:	ff 75 f0             	pushl  -0x10(%ebp)
   120fc:	e8 62 f5 ff ff       	call   11663 <task_set_blocked>
   12101:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   12104:	e8 33 f6 ff ff       	call   1173c <task_dispatch>

    irq_leave_protection(state);
   12109:	83 ec 0c             	sub    $0xc,%esp
   1210c:	ff 75 f4             	pushl  -0xc(%ebp)
   1210f:	e8 e6 0b 00 00       	call   12cfa <irq_leave_protection>
   12114:	83 c4 10             	add    $0x10,%esp

    return 0;
   12117:	b8 00 00 00 00       	mov    $0x0,%eax
   1211c:	c9                   	leave  
   1211d:	c3                   	ret    

0001211e <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1211e:	55                   	push   %ebp
   1211f:	89 e5                	mov    %esp,%ebp
   12121:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   12124:	8b 45 08             	mov    0x8(%ebp),%eax
   12127:	c1 e8 10             	shr    $0x10,%eax
   1212a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   1212e:	8b 45 08             	mov    0x8(%ebp),%eax
   12131:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   12135:	8b 45 0c             	mov    0xc(%ebp),%eax
   12138:	83 e8 01             	sub    $0x1,%eax
   1213b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1213f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12143:	90                   	nop
   12144:	c9                   	leave  
   12145:	c3                   	ret    

00012146 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12146:	55                   	push   %ebp
   12147:	89 e5                	mov    %esp,%ebp
   12149:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   1214c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1214f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12152:	8b 45 08             	mov    0x8(%ebp),%eax
   12155:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   12158:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1215b:	ff 28                	ljmp   *(%eax)
}
   1215d:	90                   	nop
   1215e:	c9                   	leave  
   1215f:	c3                   	ret    

00012160 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   12160:	55                   	push   %ebp
   12161:	89 e5                	mov    %esp,%ebp
   12163:	83 ec 14             	sub    $0x14,%esp
   12166:	8b 45 14             	mov    0x14(%ebp),%eax
   12169:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   1216d:	8b 45 08             	mov    0x8(%ebp),%eax
   12170:	83 e0 f8             	and    $0xfffffff8,%eax
   12173:	05 20 f0 01 00       	add    $0x1f020,%eax
   12178:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   1217b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12182:	76 0f                	jbe    12193 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   12184:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1218a:	8b 45 10             	mov    0x10(%ebp),%eax
   1218d:	c1 e8 0c             	shr    $0xc,%eax
   12190:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   12193:	8b 45 10             	mov    0x10(%ebp),%eax
   12196:	89 c2                	mov    %eax,%edx
   12198:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1219b:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   1219e:	8b 45 0c             	mov    0xc(%ebp),%eax
   121a1:	89 c2                	mov    %eax,%edx
   121a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121a6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   121aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ad:	c1 e8 10             	shr    $0x10,%eax
   121b0:	89 c2                	mov    %eax,%edx
   121b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121b5:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   121b8:	8b 45 10             	mov    0x10(%ebp),%eax
   121bb:	c1 e8 10             	shr    $0x10,%eax
   121be:	c1 e0 08             	shl    $0x8,%eax
   121c1:	66 25 00 0f          	and    $0xf00,%ax
   121c5:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   121c9:	89 c2                	mov    %eax,%edx
   121cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121ce:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   121d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d5:	c1 e8 18             	shr    $0x18,%eax
   121d8:	89 c2                	mov    %eax,%edx
   121da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121dd:	88 50 07             	mov    %dl,0x7(%eax)
}
   121e0:	90                   	nop
   121e1:	c9                   	leave  
   121e2:	c3                   	ret    

000121e3 <gate_desc_set>:


// 设置 Interrupt /Call Gate 表项
void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   121e3:	55                   	push   %ebp
   121e4:	89 e5                	mov    %esp,%ebp
   121e6:	83 ec 08             	sub    $0x8,%esp
   121e9:	8b 55 0c             	mov    0xc(%ebp),%edx
   121ec:	8b 45 14             	mov    0x14(%ebp),%eax
   121ef:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   121f3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   121f7:	8b 45 10             	mov    0x10(%ebp),%eax
   121fa:	89 c2                	mov    %eax,%edx
   121fc:	8b 45 08             	mov    0x8(%ebp),%eax
   121ff:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   12202:	8b 45 08             	mov    0x8(%ebp),%eax
   12205:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12209:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1220d:	8b 45 08             	mov    0x8(%ebp),%eax
   12210:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12214:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   12218:	8b 45 10             	mov    0x10(%ebp),%eax
   1221b:	c1 e8 10             	shr    $0x10,%eax
   1221e:	89 c2                	mov    %eax,%edx
   12220:	8b 45 08             	mov    0x8(%ebp),%eax
   12223:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   12227:	90                   	nop
   12228:	c9                   	leave  
   12229:	c3                   	ret    

0001222a <init_gdt>:


void init_gdt(void) {
   1222a:	55                   	push   %ebp
   1222b:	89 e5                	mov    %esp,%ebp
   1222d:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   12230:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   12237:	eb 19                	jmp    12252 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   12239:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1223c:	c1 e0 03             	shl    $0x3,%eax
   1223f:	6a 00                	push   $0x0
   12241:	6a 00                	push   $0x0
   12243:	6a 00                	push   $0x0
   12245:	50                   	push   %eax
   12246:	e8 15 ff ff ff       	call   12160 <segment_desc_set>
   1224b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1224e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12252:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   12259:	7e de                	jle    12239 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1225b:	68 92 40 00 00       	push   $0x4092
   12260:	6a ff                	push   $0xffffffff
   12262:	6a 00                	push   $0x0
   12264:	6a 10                	push   $0x10
   12266:	e8 f5 fe ff ff       	call   12160 <segment_desc_set>
   1226b:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   1226e:	68 9a 40 00 00       	push   $0x409a
   12273:	6a ff                	push   $0xffffffff
   12275:	6a 00                	push   $0x0
   12277:	6a 08                	push   $0x8
   12279:	e8 e2 fe ff ff       	call   12160 <segment_desc_set>
   1227e:	83 c4 10             	add    $0x10,%esp

    // syscall 初始化。syscall gate DPL 要为3，这个描述符应该能被用户代码访问
    gate_desc_set((gate_desc_t*)(gdt_table + (SELECTOR_SYSCALL >> 3)), 
   12281:	ba d7 02 01 00       	mov    $0x102d7,%edx
   12286:	b8 38 f0 01 00       	mov    $0x1f038,%eax
   1228b:	68 05 ec 00 00       	push   $0xec05
   12290:	52                   	push   %edx
   12291:	6a 08                	push   $0x8
   12293:	50                   	push   %eax
   12294:	e8 4a ff ff ff       	call   121e3 <gate_desc_set>
   12299:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1229c:	b8 20 f0 01 00       	mov    $0x1f020,%eax
   122a1:	68 00 08 00 00       	push   $0x800
   122a6:	50                   	push   %eax
   122a7:	e8 72 fe ff ff       	call   1211e <lgdt>
   122ac:	83 c4 08             	add    $0x8,%esp
}
   122af:	90                   	nop
   122b0:	c9                   	leave  
   122b1:	c3                   	ret    

000122b2 <cpu_init>:


void cpu_init(void) {
   122b2:	55                   	push   %ebp
   122b3:	89 e5                	mov    %esp,%ebp
   122b5:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   122b8:	83 ec 08             	sub    $0x8,%esp
   122bb:	68 82 45 01 00       	push   $0x14582
   122c0:	68 20 f8 01 00       	push   $0x1f820
   122c5:	e8 85 10 00 00       	call   1334f <mutex_init>
   122ca:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   122cd:	e8 58 ff ff ff       	call   1222a <init_gdt>
}
   122d2:	90                   	nop
   122d3:	c9                   	leave  
   122d4:	c3                   	ret    

000122d5 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   122d5:	55                   	push   %ebp
   122d6:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   122d8:	8b 45 08             	mov    0x8(%ebp),%eax
   122db:	6a 00                	push   $0x0
   122dd:	50                   	push   %eax
   122de:	e8 63 fe ff ff       	call   12146 <far_jump>
   122e3:	83 c4 08             	add    $0x8,%esp
}
   122e6:	90                   	nop
   122e7:	c9                   	leave  
   122e8:	c3                   	ret    

000122e9 <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   122e9:	55                   	push   %ebp
   122ea:	89 e5                	mov    %esp,%ebp
   122ec:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   122ef:	83 ec 0c             	sub    $0xc,%esp
   122f2:	68 20 f8 01 00       	push   $0x1f820
   122f7:	e8 94 10 00 00       	call   13390 <mutex_acquire>
   122fc:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   122ff:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12306:	eb 36                	jmp    1233e <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   12308:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1230b:	c1 e0 03             	shl    $0x3,%eax
   1230e:	05 20 f0 01 00       	add    $0x1f020,%eax
   12313:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   12316:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12319:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1231d:	66 85 c0             	test   %ax,%ax
   12320:	75 18                	jne    1233a <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   12322:	83 ec 0c             	sub    $0xc,%esp
   12325:	68 20 f8 01 00       	push   $0x1f820
   1232a:	e8 ef 10 00 00       	call   1341e <mutex_release>
   1232f:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   12332:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12335:	c1 e0 03             	shl    $0x3,%eax
   12338:	eb 22                	jmp    1235c <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1233a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1233e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12345:	7e c1                	jle    12308 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   12347:	83 ec 0c             	sub    $0xc,%esp
   1234a:	68 20 f8 01 00       	push   $0x1f820
   1234f:	e8 ca 10 00 00       	call   1341e <mutex_release>
   12354:	83 c4 10             	add    $0x10,%esp

    return -1;
   12357:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1235c:	c9                   	leave  
   1235d:	c3                   	ret    

0001235e <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1235e:	55                   	push   %ebp
   1235f:	89 e5                	mov    %esp,%ebp
   12361:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   12364:	83 ec 0c             	sub    $0xc,%esp
   12367:	68 20 f8 01 00       	push   $0x1f820
   1236c:	e8 1f 10 00 00       	call   13390 <mutex_acquire>
   12371:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12374:	8b 45 08             	mov    0x8(%ebp),%eax
   12377:	c1 e8 03             	shr    $0x3,%eax
   1237a:	66 c7 04 c5 25 f0 01 	movw   $0x0,0x1f025(,%eax,8)
   12381:	00 00 00 

    mutex_release(&mutex);
   12384:	83 ec 0c             	sub    $0xc,%esp
   12387:	68 20 f8 01 00       	push   $0x1f820
   1238c:	e8 8d 10 00 00       	call   1341e <mutex_release>
   12391:	83 c4 10             	add    $0x10,%esp
   12394:	90                   	nop
   12395:	c9                   	leave  
   12396:	c3                   	ret    

00012397 <inb>:
static inline uint8_t inb(uint16_t port) {
   12397:	55                   	push   %ebp
   12398:	89 e5                	mov    %esp,%ebp
   1239a:	83 ec 14             	sub    $0x14,%esp
   1239d:	8b 45 08             	mov    0x8(%ebp),%eax
   123a0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   123a4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   123a8:	89 c2                	mov    %eax,%edx
   123aa:	ec                   	in     (%dx),%al
   123ab:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   123ae:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   123b2:	c9                   	leave  
   123b3:	c3                   	ret    

000123b4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   123b4:	55                   	push   %ebp
   123b5:	89 e5                	mov    %esp,%ebp
   123b7:	83 ec 08             	sub    $0x8,%esp
   123ba:	8b 55 08             	mov    0x8(%ebp),%edx
   123bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   123c0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   123c4:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   123c7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   123cb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   123cf:	ee                   	out    %al,(%dx)
}
   123d0:	90                   	nop
   123d1:	c9                   	leave  
   123d2:	c3                   	ret    

000123d3 <cli>:
static inline void cli(void) {
   123d3:	55                   	push   %ebp
   123d4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   123d6:	fa                   	cli    
}
   123d7:	90                   	nop
   123d8:	5d                   	pop    %ebp
   123d9:	c3                   	ret    

000123da <sti>:
static inline void sti(void) {
   123da:	55                   	push   %ebp
   123db:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   123dd:	fb                   	sti    
}
   123de:	90                   	nop
   123df:	5d                   	pop    %ebp
   123e0:	c3                   	ret    

000123e1 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   123e1:	55                   	push   %ebp
   123e2:	89 e5                	mov    %esp,%ebp
   123e4:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   123e7:	8b 45 08             	mov    0x8(%ebp),%eax
   123ea:	c1 e8 10             	shr    $0x10,%eax
   123ed:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   123f1:	8b 45 08             	mov    0x8(%ebp),%eax
   123f4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   123f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   123fb:	83 e8 01             	sub    $0x1,%eax
   123fe:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   12402:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12406:	90                   	nop
   12407:	c9                   	leave  
   12408:	c3                   	ret    

00012409 <read_cr2>:
static inline uint32_t read_cr2() {
   12409:	55                   	push   %ebp
   1240a:	89 e5                	mov    %esp,%ebp
   1240c:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   1240f:	0f 20 d0             	mov    %cr2,%eax
   12412:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   12415:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12418:	c9                   	leave  
   12419:	c3                   	ret    

0001241a <hlt>:
static inline void hlt(void) {
   1241a:	55                   	push   %ebp
   1241b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1241d:	f4                   	hlt    
}
   1241e:	90                   	nop
   1241f:	5d                   	pop    %ebp
   12420:	c3                   	ret    

00012421 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   12421:	55                   	push   %ebp
   12422:	89 e5                	mov    %esp,%ebp
   12424:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   12427:	9c                   	pushf  
   12428:	58                   	pop    %eax
   12429:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1242c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1242f:	c9                   	leave  
   12430:	c3                   	ret    

00012431 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   12431:	55                   	push   %ebp
   12432:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   12434:	8b 45 08             	mov    0x8(%ebp),%eax
   12437:	50                   	push   %eax
   12438:	9d                   	popf   
}
   12439:	90                   	nop
   1243a:	5d                   	pop    %ebp
   1243b:	c3                   	ret    

0001243c <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   1243c:	55                   	push   %ebp
   1243d:	89 e5                	mov    %esp,%ebp
   1243f:	57                   	push   %edi
   12440:	56                   	push   %esi
   12441:	53                   	push   %ebx
   12442:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   12445:	8b 45 08             	mov    0x8(%ebp),%eax
   12448:	8b 40 3c             	mov    0x3c(%eax),%eax
   1244b:	83 e0 07             	and    $0x7,%eax
   1244e:	85 c0                	test   %eax,%eax
   12450:	74 14                	je     12466 <dump_core_regs+0x2a>
        ss = frame->ds;
   12452:	8b 45 08             	mov    0x8(%ebp),%eax
   12455:	8b 40 0c             	mov    0xc(%eax),%eax
   12458:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1245b:	8b 45 08             	mov    0x8(%ebp),%eax
   1245e:	8b 40 1c             	mov    0x1c(%eax),%eax
   12461:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12464:	eb 12                	jmp    12478 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   12466:	8b 45 08             	mov    0x8(%ebp),%eax
   12469:	8b 40 48             	mov    0x48(%eax),%eax
   1246c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1246f:	8b 45 08             	mov    0x8(%ebp),%eax
   12472:	8b 40 44             	mov    0x44(%eax),%eax
   12475:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   12478:	8b 45 08             	mov    0x8(%ebp),%eax
   1247b:	8b 50 34             	mov    0x34(%eax),%edx
   1247e:	8b 45 08             	mov    0x8(%ebp),%eax
   12481:	8b 40 30             	mov    0x30(%eax),%eax
   12484:	83 ec 04             	sub    $0x4,%esp
   12487:	52                   	push   %edx
   12488:	50                   	push   %eax
   12489:	68 8c 45 01 00       	push   $0x1458c
   1248e:	e8 78 1c 00 00       	call   1410b <log_printf>
   12493:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   12496:	8b 45 08             	mov    0x8(%ebp),%eax
   12499:	8b 30                	mov    (%eax),%esi
   1249b:	8b 45 08             	mov    0x8(%ebp),%eax
   1249e:	8b 58 04             	mov    0x4(%eax),%ebx
   124a1:	8b 45 08             	mov    0x8(%ebp),%eax
   124a4:	8b 48 08             	mov    0x8(%eax),%ecx
   124a7:	8b 45 08             	mov    0x8(%ebp),%eax
   124aa:	8b 50 0c             	mov    0xc(%eax),%edx
   124ad:	8b 45 08             	mov    0x8(%ebp),%eax
   124b0:	8b 40 3c             	mov    0x3c(%eax),%eax
   124b3:	83 ec 04             	sub    $0x4,%esp
   124b6:	56                   	push   %esi
   124b7:	53                   	push   %ebx
   124b8:	ff 75 e0             	pushl  -0x20(%ebp)
   124bb:	51                   	push   %ecx
   124bc:	52                   	push   %edx
   124bd:	50                   	push   %eax
   124be:	68 a4 45 01 00       	push   $0x145a4
   124c3:	e8 43 1c 00 00       	call   1410b <log_printf>
   124c8:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   124cb:	8b 45 08             	mov    0x8(%ebp),%eax
   124ce:	8b 78 18             	mov    0x18(%eax),%edi
   124d1:	8b 45 08             	mov    0x8(%ebp),%eax
   124d4:	8b 70 14             	mov    0x14(%eax),%esi
   124d7:	8b 45 08             	mov    0x8(%ebp),%eax
   124da:	8b 58 10             	mov    0x10(%eax),%ebx
   124dd:	8b 45 08             	mov    0x8(%ebp),%eax
   124e0:	8b 48 24             	mov    0x24(%eax),%ecx
   124e3:	8b 45 08             	mov    0x8(%ebp),%eax
   124e6:	8b 50 20             	mov    0x20(%eax),%edx
   124e9:	8b 45 08             	mov    0x8(%ebp),%eax
   124ec:	8b 40 2c             	mov    0x2c(%eax),%eax
   124ef:	ff 75 e4             	pushl  -0x1c(%ebp)
   124f2:	57                   	push   %edi
   124f3:	56                   	push   %esi
   124f4:	53                   	push   %ebx
   124f5:	51                   	push   %ecx
   124f6:	52                   	push   %edx
   124f7:	50                   	push   %eax
   124f8:	68 d0 45 01 00       	push   $0x145d0
   124fd:	e8 09 1c 00 00       	call   1410b <log_printf>
   12502:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   12505:	8b 45 08             	mov    0x8(%ebp),%eax
   12508:	8b 50 40             	mov    0x40(%eax),%edx
   1250b:	8b 45 08             	mov    0x8(%ebp),%eax
   1250e:	8b 40 38             	mov    0x38(%eax),%eax
   12511:	83 ec 04             	sub    $0x4,%esp
   12514:	52                   	push   %edx
   12515:	50                   	push   %eax
   12516:	68 09 46 01 00       	push   $0x14609
   1251b:	e8 eb 1b 00 00       	call   1410b <log_printf>
   12520:	83 c4 10             	add    $0x10,%esp
}
   12523:	90                   	nop
   12524:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12527:	5b                   	pop    %ebx
   12528:	5e                   	pop    %esi
   12529:	5f                   	pop    %edi
   1252a:	5d                   	pop    %ebp
   1252b:	c3                   	ret    

0001252c <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   1252c:	55                   	push   %ebp
   1252d:	89 e5                	mov    %esp,%ebp
   1252f:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   12532:	83 ec 0c             	sub    $0xc,%esp
   12535:	68 20 46 01 00       	push   $0x14620
   1253a:	e8 cc 1b 00 00       	call   1410b <log_printf>
   1253f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   12542:	83 ec 08             	sub    $0x8,%esp
   12545:	ff 75 0c             	pushl  0xc(%ebp)
   12548:	68 4b 46 01 00       	push   $0x1464b
   1254d:	e8 b9 1b 00 00       	call   1410b <log_printf>
   12552:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   12555:	83 ec 0c             	sub    $0xc,%esp
   12558:	ff 75 08             	pushl  0x8(%ebp)
   1255b:	e8 dc fe ff ff       	call   1243c <dump_core_regs>
   12560:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   12563:	e8 b2 fe ff ff       	call   1241a <hlt>
   12568:	eb f9                	jmp    12563 <do_default_handler+0x37>

0001256a <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   1256a:	55                   	push   %ebp
   1256b:	89 e5                	mov    %esp,%ebp
   1256d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   12570:	83 ec 08             	sub    $0x8,%esp
   12573:	68 5d 46 01 00       	push   $0x1465d
   12578:	ff 75 08             	pushl  0x8(%ebp)
   1257b:	e8 ac ff ff ff       	call   1252c <do_default_handler>
   12580:	83 c4 10             	add    $0x10,%esp
}
   12583:	90                   	nop
   12584:	c9                   	leave  
   12585:	c3                   	ret    

00012586 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   12586:	55                   	push   %ebp
   12587:	89 e5                	mov    %esp,%ebp
   12589:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   1258c:	83 ec 08             	sub    $0x8,%esp
   1258f:	68 6f 46 01 00       	push   $0x1466f
   12594:	ff 75 08             	pushl  0x8(%ebp)
   12597:	e8 90 ff ff ff       	call   1252c <do_default_handler>
   1259c:	83 c4 10             	add    $0x10,%esp
}
   1259f:	90                   	nop
   125a0:	c9                   	leave  
   125a1:	c3                   	ret    

000125a2 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   125a2:	55                   	push   %ebp
   125a3:	89 e5                	mov    %esp,%ebp
   125a5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   125a8:	83 ec 08             	sub    $0x8,%esp
   125ab:	68 89 46 01 00       	push   $0x14689
   125b0:	ff 75 08             	pushl  0x8(%ebp)
   125b3:	e8 74 ff ff ff       	call   1252c <do_default_handler>
   125b8:	83 c4 10             	add    $0x10,%esp
}   
   125bb:	90                   	nop
   125bc:	c9                   	leave  
   125bd:	c3                   	ret    

000125be <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   125be:	55                   	push   %ebp
   125bf:	89 e5                	mov    %esp,%ebp
   125c1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   125c4:	83 ec 08             	sub    $0x8,%esp
   125c7:	68 a4 46 01 00       	push   $0x146a4
   125cc:	ff 75 08             	pushl  0x8(%ebp)
   125cf:	e8 58 ff ff ff       	call   1252c <do_default_handler>
   125d4:	83 c4 10             	add    $0x10,%esp
}   
   125d7:	90                   	nop
   125d8:	c9                   	leave  
   125d9:	c3                   	ret    

000125da <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   125da:	55                   	push   %ebp
   125db:	89 e5                	mov    %esp,%ebp
   125dd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   125e0:	83 ec 08             	sub    $0x8,%esp
   125e3:	68 bd 46 01 00       	push   $0x146bd
   125e8:	ff 75 08             	pushl  0x8(%ebp)
   125eb:	e8 3c ff ff ff       	call   1252c <do_default_handler>
   125f0:	83 c4 10             	add    $0x10,%esp
}   
   125f3:	90                   	nop
   125f4:	c9                   	leave  
   125f5:	c3                   	ret    

000125f6 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   125f6:	55                   	push   %ebp
   125f7:	89 e5                	mov    %esp,%ebp
   125f9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   125fc:	83 ec 08             	sub    $0x8,%esp
   125ff:	68 d3 46 01 00       	push   $0x146d3
   12604:	ff 75 08             	pushl  0x8(%ebp)
   12607:	e8 20 ff ff ff       	call   1252c <do_default_handler>
   1260c:	83 c4 10             	add    $0x10,%esp
}   
   1260f:	90                   	nop
   12610:	c9                   	leave  
   12611:	c3                   	ret    

00012612 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   12612:	55                   	push   %ebp
   12613:	89 e5                	mov    %esp,%ebp
   12615:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   12618:	83 ec 08             	sub    $0x8,%esp
   1261b:	68 e7 46 01 00       	push   $0x146e7
   12620:	ff 75 08             	pushl  0x8(%ebp)
   12623:	e8 04 ff ff ff       	call   1252c <do_default_handler>
   12628:	83 c4 10             	add    $0x10,%esp
}   
   1262b:	90                   	nop
   1262c:	c9                   	leave  
   1262d:	c3                   	ret    

0001262e <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   1262e:	55                   	push   %ebp
   1262f:	89 e5                	mov    %esp,%ebp
   12631:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   12634:	83 ec 08             	sub    $0x8,%esp
   12637:	68 05 47 01 00       	push   $0x14705
   1263c:	ff 75 08             	pushl  0x8(%ebp)
   1263f:	e8 e8 fe ff ff       	call   1252c <do_default_handler>
   12644:	83 c4 10             	add    $0x10,%esp
}   
   12647:	90                   	nop
   12648:	c9                   	leave  
   12649:	c3                   	ret    

0001264a <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   1264a:	55                   	push   %ebp
   1264b:	89 e5                	mov    %esp,%ebp
   1264d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   12650:	83 ec 08             	sub    $0x8,%esp
   12653:	68 1f 47 01 00       	push   $0x1471f
   12658:	ff 75 08             	pushl  0x8(%ebp)
   1265b:	e8 cc fe ff ff       	call   1252c <do_default_handler>
   12660:	83 c4 10             	add    $0x10,%esp
}   
   12663:	90                   	nop
   12664:	c9                   	leave  
   12665:	c3                   	ret    

00012666 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   12666:	55                   	push   %ebp
   12667:	89 e5                	mov    %esp,%ebp
   12669:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   1266c:	83 ec 08             	sub    $0x8,%esp
   1266f:	68 3b 47 01 00       	push   $0x1473b
   12674:	ff 75 08             	pushl  0x8(%ebp)
   12677:	e8 b0 fe ff ff       	call   1252c <do_default_handler>
   1267c:	83 c4 10             	add    $0x10,%esp
}   
   1267f:	90                   	nop
   12680:	c9                   	leave  
   12681:	c3                   	ret    

00012682 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   12682:	55                   	push   %ebp
   12683:	89 e5                	mov    %esp,%ebp
   12685:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   12688:	83 ec 08             	sub    $0x8,%esp
   1268b:	68 53 47 01 00       	push   $0x14753
   12690:	ff 75 08             	pushl  0x8(%ebp)
   12693:	e8 94 fe ff ff       	call   1252c <do_default_handler>
   12698:	83 c4 10             	add    $0x10,%esp
}   
   1269b:	90                   	nop
   1269c:	c9                   	leave  
   1269d:	c3                   	ret    

0001269e <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   1269e:	55                   	push   %ebp
   1269f:	89 e5                	mov    %esp,%ebp
   126a1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   126a4:	83 ec 08             	sub    $0x8,%esp
   126a7:	68 6c 47 01 00       	push   $0x1476c
   126ac:	ff 75 08             	pushl  0x8(%ebp)
   126af:	e8 78 fe ff ff       	call   1252c <do_default_handler>
   126b4:	83 c4 10             	add    $0x10,%esp
}   
   126b7:	90                   	nop
   126b8:	c9                   	leave  
   126b9:	c3                   	ret    

000126ba <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   126ba:	55                   	push   %ebp
   126bb:	89 e5                	mov    %esp,%ebp
   126bd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   126c0:	83 ec 08             	sub    $0x8,%esp
   126c3:	68 8c 47 01 00       	push   $0x1478c
   126c8:	ff 75 08             	pushl  0x8(%ebp)
   126cb:	e8 5c fe ff ff       	call   1252c <do_default_handler>
   126d0:	83 c4 10             	add    $0x10,%esp
}   
   126d3:	90                   	nop
   126d4:	c9                   	leave  
   126d5:	c3                   	ret    

000126d6 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   126d6:	55                   	push   %ebp
   126d7:	89 e5                	mov    %esp,%ebp
   126d9:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   126dc:	83 ec 0c             	sub    $0xc,%esp
   126df:	68 ac 47 01 00       	push   $0x147ac
   126e4:	e8 22 1a 00 00       	call   1410b <log_printf>
   126e9:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   126ec:	83 ec 0c             	sub    $0xc,%esp
   126ef:	68 d0 47 01 00       	push   $0x147d0
   126f4:	e8 12 1a 00 00       	call   1410b <log_printf>
   126f9:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   126fc:	8b 45 08             	mov    0x8(%ebp),%eax
   126ff:	8b 40 34             	mov    0x34(%eax),%eax
   12702:	83 e0 01             	and    $0x1,%eax
   12705:	85 c0                	test   %eax,%eax
   12707:	74 12                	je     1271b <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12709:	83 ec 0c             	sub    $0xc,%esp
   1270c:	68 fc 47 01 00       	push   $0x147fc
   12711:	e8 f5 19 00 00       	call   1410b <log_printf>
   12716:	83 c4 10             	add    $0x10,%esp
   12719:	eb 10                	jmp    1272b <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   1271b:	83 ec 0c             	sub    $0xc,%esp
   1271e:	68 78 48 01 00       	push   $0x14878
   12723:	e8 e3 19 00 00       	call   1410b <log_printf>
   12728:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   1272b:	8b 45 08             	mov    0x8(%ebp),%eax
   1272e:	8b 40 34             	mov    0x34(%eax),%eax
   12731:	83 e0 02             	and    $0x2,%eax
   12734:	85 c0                	test   %eax,%eax
   12736:	74 12                	je     1274a <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12738:	83 ec 0c             	sub    $0xc,%esp
   1273b:	68 d0 48 01 00       	push   $0x148d0
   12740:	e8 c6 19 00 00       	call   1410b <log_printf>
   12745:	83 c4 10             	add    $0x10,%esp
   12748:	eb 10                	jmp    1275a <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   1274a:	83 ec 0c             	sub    $0xc,%esp
   1274d:	68 1c 49 01 00       	push   $0x1491c
   12752:	e8 b4 19 00 00       	call   1410b <log_printf>
   12757:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   1275a:	8b 45 08             	mov    0x8(%ebp),%eax
   1275d:	8b 40 34             	mov    0x34(%eax),%eax
   12760:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12765:	83 ec 08             	sub    $0x8,%esp
   12768:	50                   	push   %eax
   12769:	68 48 49 01 00       	push   $0x14948
   1276e:	e8 98 19 00 00       	call   1410b <log_printf>
   12773:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12776:	83 ec 0c             	sub    $0xc,%esp
   12779:	ff 75 08             	pushl  0x8(%ebp)
   1277c:	e8 bb fc ff ff       	call   1243c <dump_core_regs>
   12781:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12784:	e8 91 fc ff ff       	call   1241a <hlt>
   12789:	eb f9                	jmp    12784 <do_handler_general_protection+0xae>

0001278b <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   1278b:	55                   	push   %ebp
   1278c:	89 e5                	mov    %esp,%ebp
   1278e:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12791:	83 ec 0c             	sub    $0xc,%esp
   12794:	68 ac 47 01 00       	push   $0x147ac
   12799:	e8 6d 19 00 00       	call   1410b <log_printf>
   1279e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   127a1:	83 ec 0c             	sub    $0xc,%esp
   127a4:	68 5a 49 01 00       	push   $0x1495a
   127a9:	e8 5d 19 00 00       	call   1410b <log_printf>
   127ae:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   127b1:	8b 45 08             	mov    0x8(%ebp),%eax
   127b4:	8b 40 34             	mov    0x34(%eax),%eax
   127b7:	83 e0 01             	and    $0x1,%eax
   127ba:	85 c0                	test   %eax,%eax
   127bc:	74 18                	je     127d6 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   127be:	e8 46 fc ff ff       	call   12409 <read_cr2>
   127c3:	83 ec 08             	sub    $0x8,%esp
   127c6:	50                   	push   %eax
   127c7:	68 78 49 01 00       	push   $0x14978
   127cc:	e8 3a 19 00 00       	call   1410b <log_printf>
   127d1:	83 c4 10             	add    $0x10,%esp
   127d4:	eb 16                	jmp    127ec <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   127d6:	e8 2e fc ff ff       	call   12409 <read_cr2>
   127db:	83 ec 08             	sub    $0x8,%esp
   127de:	50                   	push   %eax
   127df:	68 a0 49 01 00       	push   $0x149a0
   127e4:	e8 22 19 00 00       	call   1410b <log_printf>
   127e9:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   127ec:	8b 45 08             	mov    0x8(%ebp),%eax
   127ef:	8b 40 34             	mov    0x34(%eax),%eax
   127f2:	83 e0 02             	and    $0x2,%eax
   127f5:	85 c0                	test   %eax,%eax
   127f7:	74 12                	je     1280b <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   127f9:	83 ec 0c             	sub    $0xc,%esp
   127fc:	68 d0 49 01 00       	push   $0x149d0
   12801:	e8 05 19 00 00       	call   1410b <log_printf>
   12806:	83 c4 10             	add    $0x10,%esp
   12809:	eb 10                	jmp    1281b <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   1280b:	83 ec 0c             	sub    $0xc,%esp
   1280e:	68 fc 49 01 00       	push   $0x149fc
   12813:	e8 f3 18 00 00       	call   1410b <log_printf>
   12818:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   1281b:	8b 45 08             	mov    0x8(%ebp),%eax
   1281e:	8b 40 34             	mov    0x34(%eax),%eax
   12821:	83 e0 02             	and    $0x2,%eax
   12824:	85 c0                	test   %eax,%eax
   12826:	74 12                	je     1283a <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12828:	83 ec 0c             	sub    $0xc,%esp
   1282b:	68 28 4a 01 00       	push   $0x14a28
   12830:	e8 d6 18 00 00       	call   1410b <log_printf>
   12835:	83 c4 10             	add    $0x10,%esp
   12838:	eb 10                	jmp    1284a <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   1283a:	83 ec 0c             	sub    $0xc,%esp
   1283d:	68 54 4a 01 00       	push   $0x14a54
   12842:	e8 c4 18 00 00       	call   1410b <log_printf>
   12847:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   1284a:	83 ec 0c             	sub    $0xc,%esp
   1284d:	ff 75 08             	pushl  0x8(%ebp)
   12850:	e8 e7 fb ff ff       	call   1243c <dump_core_regs>
   12855:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12858:	e8 bd fb ff ff       	call   1241a <hlt>
   1285d:	eb f9                	jmp    12858 <do_handler_page_fault+0xcd>

0001285f <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   1285f:	55                   	push   %ebp
   12860:	89 e5                	mov    %esp,%ebp
   12862:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   12865:	83 ec 08             	sub    $0x8,%esp
   12868:	68 7c 4a 01 00       	push   $0x14a7c
   1286d:	ff 75 08             	pushl  0x8(%ebp)
   12870:	e8 b7 fc ff ff       	call   1252c <do_default_handler>
   12875:	83 c4 10             	add    $0x10,%esp
}   
   12878:	90                   	nop
   12879:	c9                   	leave  
   1287a:	c3                   	ret    

0001287b <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   1287b:	55                   	push   %ebp
   1287c:	89 e5                	mov    %esp,%ebp
   1287e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   12881:	83 ec 08             	sub    $0x8,%esp
   12884:	68 9c 4a 01 00       	push   $0x14a9c
   12889:	ff 75 08             	pushl  0x8(%ebp)
   1288c:	e8 9b fc ff ff       	call   1252c <do_default_handler>
   12891:	83 c4 10             	add    $0x10,%esp
}   
   12894:	90                   	nop
   12895:	c9                   	leave  
   12896:	c3                   	ret    

00012897 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   12897:	55                   	push   %ebp
   12898:	89 e5                	mov    %esp,%ebp
   1289a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   1289d:	83 ec 08             	sub    $0x8,%esp
   128a0:	68 b6 4a 01 00       	push   $0x14ab6
   128a5:	ff 75 08             	pushl  0x8(%ebp)
   128a8:	e8 7f fc ff ff       	call   1252c <do_default_handler>
   128ad:	83 c4 10             	add    $0x10,%esp
}   
   128b0:	90                   	nop
   128b1:	c9                   	leave  
   128b2:	c3                   	ret    

000128b3 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   128b3:	55                   	push   %ebp
   128b4:	89 e5                	mov    %esp,%ebp
   128b6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   128b9:	83 ec 08             	sub    $0x8,%esp
   128bc:	68 d0 4a 01 00       	push   $0x14ad0
   128c1:	ff 75 08             	pushl  0x8(%ebp)
   128c4:	e8 63 fc ff ff       	call   1252c <do_default_handler>
   128c9:	83 c4 10             	add    $0x10,%esp
}
   128cc:	90                   	nop
   128cd:	c9                   	leave  
   128ce:	c3                   	ret    

000128cf <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   128cf:	55                   	push   %ebp
   128d0:	89 e5                	mov    %esp,%ebp
   128d2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   128d5:	83 ec 08             	sub    $0x8,%esp
   128d8:	68 fc 4a 01 00       	push   $0x14afc
   128dd:	ff 75 08             	pushl  0x8(%ebp)
   128e0:	e8 47 fc ff ff       	call   1252c <do_default_handler>
   128e5:	83 c4 10             	add    $0x10,%esp
}
   128e8:	90                   	nop
   128e9:	c9                   	leave  
   128ea:	c3                   	ret    

000128eb <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   128eb:	55                   	push   %ebp
   128ec:	89 e5                	mov    %esp,%ebp
   128ee:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   128f1:	83 ec 08             	sub    $0x8,%esp
   128f4:	68 20 4b 01 00       	push   $0x14b20
   128f9:	ff 75 08             	pushl  0x8(%ebp)
   128fc:	e8 2b fc ff ff       	call   1252c <do_default_handler>
   12901:	83 c4 10             	add    $0x10,%esp
}
   12904:	90                   	nop
   12905:	c9                   	leave  
   12906:	c3                   	ret    

00012907 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   12907:	55                   	push   %ebp
   12908:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1290a:	6a 11                	push   $0x11
   1290c:	6a 20                	push   $0x20
   1290e:	e8 a1 fa ff ff       	call   123b4 <outb>
   12913:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   12916:	6a 20                	push   $0x20
   12918:	6a 21                	push   $0x21
   1291a:	e8 95 fa ff ff       	call   123b4 <outb>
   1291f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   12922:	6a 04                	push   $0x4
   12924:	6a 21                	push   $0x21
   12926:	e8 89 fa ff ff       	call   123b4 <outb>
   1292b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   1292e:	6a 01                	push   $0x1
   12930:	6a 21                	push   $0x21
   12932:	e8 7d fa ff ff       	call   123b4 <outb>
   12937:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1293a:	6a 11                	push   $0x11
   1293c:	68 a0 00 00 00       	push   $0xa0
   12941:	e8 6e fa ff ff       	call   123b4 <outb>
   12946:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12949:	6a 28                	push   $0x28
   1294b:	68 a1 00 00 00       	push   $0xa1
   12950:	e8 5f fa ff ff       	call   123b4 <outb>
   12955:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   12958:	6a 02                	push   $0x2
   1295a:	68 a1 00 00 00       	push   $0xa1
   1295f:	e8 50 fa ff ff       	call   123b4 <outb>
   12964:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12967:	6a 01                	push   $0x1
   12969:	68 a1 00 00 00       	push   $0xa1
   1296e:	e8 41 fa ff ff       	call   123b4 <outb>
   12973:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   12976:	68 fb 00 00 00       	push   $0xfb
   1297b:	6a 21                	push   $0x21
   1297d:	e8 32 fa ff ff       	call   123b4 <outb>
   12982:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   12985:	68 ff 00 00 00       	push   $0xff
   1298a:	68 a1 00 00 00       	push   $0xa1
   1298f:	e8 20 fa ff ff       	call   123b4 <outb>
   12994:	83 c4 08             	add    $0x8,%esp
}
   12997:	90                   	nop
   12998:	c9                   	leave  
   12999:	c3                   	ret    

0001299a <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   1299a:	55                   	push   %ebp
   1299b:	89 e5                	mov    %esp,%ebp
   1299d:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   129a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   129a7:	eb 25                	jmp    129ce <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   129a9:	ba 26 00 01 00       	mov    $0x10026,%edx
   129ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129b1:	c1 e0 03             	shl    $0x3,%eax
   129b4:	05 80 f8 01 00       	add    $0x1f880,%eax
   129b9:	68 00 8e 00 00       	push   $0x8e00
   129be:	52                   	push   %edx
   129bf:	6a 08                	push   $0x8
   129c1:	50                   	push   %eax
   129c2:	e8 1c f8 ff ff       	call   121e3 <gate_desc_set>
   129c7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   129ca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   129ce:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   129d2:	7e d5                	jle    129a9 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   129d4:	83 ec 08             	sub    $0x8,%esp
   129d7:	68 45 00 01 00       	push   $0x10045
   129dc:	6a 00                	push   $0x0
   129de:	e8 77 01 00 00       	call   12b5a <irq_install>
   129e3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   129e6:	83 ec 08             	sub    $0x8,%esp
   129e9:	68 64 00 01 00       	push   $0x10064
   129ee:	6a 01                	push   $0x1
   129f0:	e8 65 01 00 00       	call   12b5a <irq_install>
   129f5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   129f8:	83 ec 08             	sub    $0x8,%esp
   129fb:	68 83 00 01 00       	push   $0x10083
   12a00:	6a 02                	push   $0x2
   12a02:	e8 53 01 00 00       	call   12b5a <irq_install>
   12a07:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   12a0a:	83 ec 08             	sub    $0x8,%esp
   12a0d:	68 a2 00 01 00       	push   $0x100a2
   12a12:	6a 03                	push   $0x3
   12a14:	e8 41 01 00 00       	call   12b5a <irq_install>
   12a19:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   12a1c:	83 ec 08             	sub    $0x8,%esp
   12a1f:	68 c1 00 01 00       	push   $0x100c1
   12a24:	6a 04                	push   $0x4
   12a26:	e8 2f 01 00 00       	call   12b5a <irq_install>
   12a2b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   12a2e:	83 ec 08             	sub    $0x8,%esp
   12a31:	68 e0 00 01 00       	push   $0x100e0
   12a36:	6a 05                	push   $0x5
   12a38:	e8 1d 01 00 00       	call   12b5a <irq_install>
   12a3d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   12a40:	83 ec 08             	sub    $0x8,%esp
   12a43:	68 ff 00 01 00       	push   $0x100ff
   12a48:	6a 06                	push   $0x6
   12a4a:	e8 0b 01 00 00       	call   12b5a <irq_install>
   12a4f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   12a52:	83 ec 08             	sub    $0x8,%esp
   12a55:	68 1e 01 01 00       	push   $0x1011e
   12a5a:	6a 07                	push   $0x7
   12a5c:	e8 f9 00 00 00       	call   12b5a <irq_install>
   12a61:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   12a64:	83 ec 08             	sub    $0x8,%esp
   12a67:	68 3d 01 01 00       	push   $0x1013d
   12a6c:	6a 08                	push   $0x8
   12a6e:	e8 e7 00 00 00       	call   12b5a <irq_install>
   12a73:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   12a76:	83 ec 08             	sub    $0x8,%esp
   12a79:	68 5a 01 01 00       	push   $0x1015a
   12a7e:	6a 0a                	push   $0xa
   12a80:	e8 d5 00 00 00       	call   12b5a <irq_install>
   12a85:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   12a88:	83 ec 08             	sub    $0x8,%esp
   12a8b:	68 77 01 01 00       	push   $0x10177
   12a90:	6a 0b                	push   $0xb
   12a92:	e8 c3 00 00 00       	call   12b5a <irq_install>
   12a97:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   12a9a:	83 ec 08             	sub    $0x8,%esp
   12a9d:	68 94 01 01 00       	push   $0x10194
   12aa2:	6a 0c                	push   $0xc
   12aa4:	e8 b1 00 00 00       	call   12b5a <irq_install>
   12aa9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   12aac:	83 ec 08             	sub    $0x8,%esp
   12aaf:	68 b3 01 01 00       	push   $0x101b3
   12ab4:	6a 0d                	push   $0xd
   12ab6:	e8 9f 00 00 00       	call   12b5a <irq_install>
   12abb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   12abe:	83 ec 08             	sub    $0x8,%esp
   12ac1:	68 d0 01 01 00       	push   $0x101d0
   12ac6:	6a 0e                	push   $0xe
   12ac8:	e8 8d 00 00 00       	call   12b5a <irq_install>
   12acd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   12ad0:	83 ec 08             	sub    $0x8,%esp
   12ad3:	68 ed 01 01 00       	push   $0x101ed
   12ad8:	6a 10                	push   $0x10
   12ada:	e8 7b 00 00 00       	call   12b5a <irq_install>
   12adf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   12ae2:	83 ec 08             	sub    $0x8,%esp
   12ae5:	68 0c 02 01 00       	push   $0x1020c
   12aea:	6a 11                	push   $0x11
   12aec:	e8 69 00 00 00       	call   12b5a <irq_install>
   12af1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   12af4:	83 ec 08             	sub    $0x8,%esp
   12af7:	68 29 02 01 00       	push   $0x10229
   12afc:	6a 12                	push   $0x12
   12afe:	e8 57 00 00 00       	call   12b5a <irq_install>
   12b03:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   12b06:	83 ec 08             	sub    $0x8,%esp
   12b09:	68 48 02 01 00       	push   $0x10248
   12b0e:	6a 13                	push   $0x13
   12b10:	e8 45 00 00 00       	call   12b5a <irq_install>
   12b15:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   12b18:	83 ec 08             	sub    $0x8,%esp
   12b1b:	68 67 02 01 00       	push   $0x10267
   12b20:	6a 14                	push   $0x14
   12b22:	e8 33 00 00 00       	call   12b5a <irq_install>
   12b27:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   12b2a:	83 ec 08             	sub    $0x8,%esp
   12b2d:	68 86 02 01 00       	push   $0x10286
   12b32:	6a 15                	push   $0x15
   12b34:	e8 21 00 00 00       	call   12b5a <irq_install>
   12b39:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   12b3c:	b8 80 f8 01 00       	mov    $0x1f880,%eax
   12b41:	83 ec 08             	sub    $0x8,%esp
   12b44:	68 00 04 00 00       	push   $0x400
   12b49:	50                   	push   %eax
   12b4a:	e8 92 f8 ff ff       	call   123e1 <lidt>
   12b4f:	83 c4 10             	add    $0x10,%esp

    init_pic();
   12b52:	e8 b0 fd ff ff       	call   12907 <init_pic>
}
   12b57:	90                   	nop
   12b58:	c9                   	leave  
   12b59:	c3                   	ret    

00012b5a <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   12b5a:	55                   	push   %ebp
   12b5b:	89 e5                	mov    %esp,%ebp
   12b5d:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   12b60:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12b64:	7e 07                	jle    12b6d <irq_install+0x13>
        return -1;
   12b66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12b6b:	eb 20                	jmp    12b8d <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   12b6d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b70:	8b 55 08             	mov    0x8(%ebp),%edx
   12b73:	c1 e2 03             	shl    $0x3,%edx
   12b76:	81 c2 80 f8 01 00    	add    $0x1f880,%edx
   12b7c:	68 00 8e 00 00       	push   $0x8e00
   12b81:	50                   	push   %eax
   12b82:	6a 08                	push   $0x8
   12b84:	52                   	push   %edx
   12b85:	e8 59 f6 ff ff       	call   121e3 <gate_desc_set>
   12b8a:	83 c4 10             	add    $0x10,%esp
}
   12b8d:	c9                   	leave  
   12b8e:	c3                   	ret    

00012b8f <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   12b8f:	55                   	push   %ebp
   12b90:	89 e5                	mov    %esp,%ebp
   12b92:	53                   	push   %ebx
   12b93:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12b96:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12b9a:	7e 78                	jle    12c14 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   12b9c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12ba0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12ba4:	7f 32                	jg     12bd8 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   12ba6:	6a 21                	push   $0x21
   12ba8:	e8 ea f7 ff ff       	call   12397 <inb>
   12bad:	83 c4 04             	add    $0x4,%esp
   12bb0:	89 c2                	mov    %eax,%edx
   12bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb5:	bb 01 00 00 00       	mov    $0x1,%ebx
   12bba:	89 c1                	mov    %eax,%ecx
   12bbc:	d3 e3                	shl    %cl,%ebx
   12bbe:	89 d8                	mov    %ebx,%eax
   12bc0:	f7 d0                	not    %eax
   12bc2:	21 d0                	and    %edx,%eax
   12bc4:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   12bc7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12bcb:	50                   	push   %eax
   12bcc:	6a 21                	push   $0x21
   12bce:	e8 e1 f7 ff ff       	call   123b4 <outb>
   12bd3:	83 c4 08             	add    $0x8,%esp
   12bd6:	eb 3d                	jmp    12c15 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   12bd8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   12bdc:	68 a1 00 00 00       	push   $0xa1
   12be1:	e8 b1 f7 ff ff       	call   12397 <inb>
   12be6:	83 c4 04             	add    $0x4,%esp
   12be9:	89 c2                	mov    %eax,%edx
   12beb:	8b 45 08             	mov    0x8(%ebp),%eax
   12bee:	bb 01 00 00 00       	mov    $0x1,%ebx
   12bf3:	89 c1                	mov    %eax,%ecx
   12bf5:	d3 e3                	shl    %cl,%ebx
   12bf7:	89 d8                	mov    %ebx,%eax
   12bf9:	f7 d0                	not    %eax
   12bfb:	21 d0                	and    %edx,%eax
   12bfd:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   12c00:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12c04:	50                   	push   %eax
   12c05:	68 a1 00 00 00       	push   $0xa1
   12c0a:	e8 a5 f7 ff ff       	call   123b4 <outb>
   12c0f:	83 c4 08             	add    $0x8,%esp
   12c12:	eb 01                	jmp    12c15 <irq_enable+0x86>
        return;
   12c14:	90                   	nop
    }
}
   12c15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12c18:	c9                   	leave  
   12c19:	c3                   	ret    

00012c1a <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   12c1a:	55                   	push   %ebp
   12c1b:	89 e5                	mov    %esp,%ebp
   12c1d:	53                   	push   %ebx
   12c1e:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12c21:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12c25:	7e 74                	jle    12c9b <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   12c27:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12c2b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12c2f:	7f 30                	jg     12c61 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   12c31:	6a 21                	push   $0x21
   12c33:	e8 5f f7 ff ff       	call   12397 <inb>
   12c38:	83 c4 04             	add    $0x4,%esp
   12c3b:	89 c3                	mov    %eax,%ebx
   12c3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c40:	ba 01 00 00 00       	mov    $0x1,%edx
   12c45:	89 c1                	mov    %eax,%ecx
   12c47:	d3 e2                	shl    %cl,%edx
   12c49:	89 d0                	mov    %edx,%eax
   12c4b:	09 d8                	or     %ebx,%eax
   12c4d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   12c50:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12c54:	50                   	push   %eax
   12c55:	6a 21                	push   $0x21
   12c57:	e8 58 f7 ff ff       	call   123b4 <outb>
   12c5c:	83 c4 08             	add    $0x8,%esp
   12c5f:	eb 3b                	jmp    12c9c <irq_disable+0x82>
    } else {
        irq_num -= 8;
   12c61:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   12c65:	68 a1 00 00 00       	push   $0xa1
   12c6a:	e8 28 f7 ff ff       	call   12397 <inb>
   12c6f:	83 c4 04             	add    $0x4,%esp
   12c72:	89 c3                	mov    %eax,%ebx
   12c74:	8b 45 08             	mov    0x8(%ebp),%eax
   12c77:	ba 01 00 00 00       	mov    $0x1,%edx
   12c7c:	89 c1                	mov    %eax,%ecx
   12c7e:	d3 e2                	shl    %cl,%edx
   12c80:	89 d0                	mov    %edx,%eax
   12c82:	09 d8                	or     %ebx,%eax
   12c84:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   12c87:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12c8b:	50                   	push   %eax
   12c8c:	68 a1 00 00 00       	push   $0xa1
   12c91:	e8 1e f7 ff ff       	call   123b4 <outb>
   12c96:	83 c4 08             	add    $0x8,%esp
   12c99:	eb 01                	jmp    12c9c <irq_disable+0x82>
        return;
   12c9b:	90                   	nop
    }
}
   12c9c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12c9f:	c9                   	leave  
   12ca0:	c3                   	ret    

00012ca1 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   12ca1:	55                   	push   %ebp
   12ca2:	89 e5                	mov    %esp,%ebp
    cli();
   12ca4:	e8 2a f7 ff ff       	call   123d3 <cli>
}
   12ca9:	90                   	nop
   12caa:	5d                   	pop    %ebp
   12cab:	c3                   	ret    

00012cac <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   12cac:	55                   	push   %ebp
   12cad:	89 e5                	mov    %esp,%ebp
    sti();
   12caf:	e8 26 f7 ff ff       	call   123da <sti>
}
   12cb4:	90                   	nop
   12cb5:	5d                   	pop    %ebp
   12cb6:	c3                   	ret    

00012cb7 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   12cb7:	55                   	push   %ebp
   12cb8:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12cba:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   12cbe:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12cc2:	7e 0f                	jle    12cd3 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12cc4:	6a 20                	push   $0x20
   12cc6:	68 a0 00 00 00       	push   $0xa0
   12ccb:	e8 e4 f6 ff ff       	call   123b4 <outb>
   12cd0:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12cd3:	6a 20                	push   $0x20
   12cd5:	6a 20                	push   $0x20
   12cd7:	e8 d8 f6 ff ff       	call   123b4 <outb>
   12cdc:	83 c4 08             	add    $0x8,%esp
}
   12cdf:	90                   	nop
   12ce0:	c9                   	leave  
   12ce1:	c3                   	ret    

00012ce2 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   12ce2:	55                   	push   %ebp
   12ce3:	89 e5                	mov    %esp,%ebp
   12ce5:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   12ce8:	e8 34 f7 ff ff       	call   12421 <read_eflags>
   12ced:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   12cf0:	e8 ac ff ff ff       	call   12ca1 <irq_disable_global>
    return state;
   12cf5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12cf8:	c9                   	leave  
   12cf9:	c3                   	ret    

00012cfa <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   12cfa:	55                   	push   %ebp
   12cfb:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   12cfd:	ff 75 08             	pushl  0x8(%ebp)
   12d00:	e8 2c f7 ff ff       	call   12431 <write_eflags>
   12d05:	83 c4 04             	add    $0x4,%esp
   12d08:	90                   	nop
   12d09:	c9                   	leave  
   12d0a:	c3                   	ret    

00012d0b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12d0b:	55                   	push   %ebp
   12d0c:	89 e5                	mov    %esp,%ebp
   12d0e:	83 ec 08             	sub    $0x8,%esp
   12d11:	8b 55 08             	mov    0x8(%ebp),%edx
   12d14:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d17:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12d1b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12d1e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d22:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d26:	ee                   	out    %al,(%dx)
}
   12d27:	90                   	nop
   12d28:	c9                   	leave  
   12d29:	c3                   	ret    

00012d2a <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   12d2a:	55                   	push   %ebp
   12d2b:	89 e5                	mov    %esp,%ebp
   12d2d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12d30:	a1 80 fc 01 00       	mov    0x1fc80,%eax
   12d35:	83 c0 01             	add    $0x1,%eax
   12d38:	a3 80 fc 01 00       	mov    %eax,0x1fc80

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   12d3d:	83 ec 0c             	sub    $0xc,%esp
   12d40:	6a 20                	push   $0x20
   12d42:	e8 70 ff ff ff       	call   12cb7 <pic_send_eoi>
   12d47:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   12d4a:	e8 48 ea ff ff       	call   11797 <task_time_tick>
}
   12d4f:	90                   	nop
   12d50:	c9                   	leave  
   12d51:	c3                   	ret    

00012d52 <init_pit>:


static void init_pit(void) {
   12d52:	55                   	push   %ebp
   12d53:	89 e5                	mov    %esp,%ebp
   12d55:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   12d58:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   12d5f:	6a 36                	push   $0x36
   12d61:	6a 43                	push   $0x43
   12d63:	e8 a3 ff ff ff       	call   12d0b <outb>
   12d68:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   12d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d6e:	0f b6 c0             	movzbl %al,%eax
   12d71:	50                   	push   %eax
   12d72:	6a 40                	push   $0x40
   12d74:	e8 92 ff ff ff       	call   12d0b <outb>
   12d79:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   12d7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d7f:	c1 e8 08             	shr    $0x8,%eax
   12d82:	0f b6 c0             	movzbl %al,%eax
   12d85:	50                   	push   %eax
   12d86:	6a 40                	push   $0x40
   12d88:	e8 7e ff ff ff       	call   12d0b <outb>
   12d8d:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   12d90:	83 ec 08             	sub    $0x8,%esp
   12d93:	68 a3 02 01 00       	push   $0x102a3
   12d98:	6a 20                	push   $0x20
   12d9a:	e8 bb fd ff ff       	call   12b5a <irq_install>
   12d9f:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   12da2:	83 ec 0c             	sub    $0xc,%esp
   12da5:	6a 20                	push   $0x20
   12da7:	e8 e3 fd ff ff       	call   12b8f <irq_enable>
   12dac:	83 c4 10             	add    $0x10,%esp
}
   12daf:	90                   	nop
   12db0:	c9                   	leave  
   12db1:	c3                   	ret    

00012db2 <timer_init>:

void timer_init(void) {
   12db2:	55                   	push   %ebp
   12db3:	89 e5                	mov    %esp,%ebp
   12db5:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12db8:	c7 05 80 fc 01 00 00 	movl   $0x0,0x1fc80
   12dbf:	00 00 00 
    init_pit();
   12dc2:	e8 8b ff ff ff       	call   12d52 <init_pit>
   12dc7:	90                   	nop
   12dc8:	c9                   	leave  
   12dc9:	c3                   	ret    

00012dca <inb>:
static inline uint8_t inb(uint16_t port) {
   12dca:	55                   	push   %ebp
   12dcb:	89 e5                	mov    %esp,%ebp
   12dcd:	83 ec 14             	sub    $0x14,%esp
   12dd0:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12dd7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12ddb:	89 c2                	mov    %eax,%edx
   12ddd:	ec                   	in     (%dx),%al
   12dde:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12de1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12de5:	c9                   	leave  
   12de6:	c3                   	ret    

00012de7 <inw>:
static inline uint16_t inw(uint16_t port) {
   12de7:	55                   	push   %ebp
   12de8:	89 e5                	mov    %esp,%ebp
   12dea:	83 ec 14             	sub    $0x14,%esp
   12ded:	8b 45 08             	mov    0x8(%ebp),%eax
   12df0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12df4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12df8:	89 c2                	mov    %eax,%edx
   12dfa:	66 ed                	in     (%dx),%ax
   12dfc:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return rv;
   12e00:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   12e04:	c9                   	leave  
   12e05:	c3                   	ret    

00012e06 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12e06:	55                   	push   %ebp
   12e07:	89 e5                	mov    %esp,%ebp
   12e09:	83 ec 08             	sub    $0x8,%esp
   12e0c:	8b 55 08             	mov    0x8(%ebp),%edx
   12e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e12:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12e16:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12e19:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12e1d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12e21:	ee                   	out    %al,(%dx)
}
   12e22:	90                   	nop
   12e23:	c9                   	leave  
   12e24:	c3                   	ret    

00012e25 <read_disk>:
#include "comm/boot_info.h"


// 写寄存器读取磁盘
// 使用 LBA48 模式
static void read_disk(uint32_t sector, int sector_count, uint8_t* buf) {
   12e25:	55                   	push   %ebp
   12e26:	89 e5                	mov    %esp,%ebp
   12e28:	53                   	push   %ebx
   12e29:	83 ec 10             	sub    $0x10,%esp
    outb(0x1f6, 0xE0);  // 驱动器号  选择硬盘：主盘或从盘
   12e2c:	68 e0 00 00 00       	push   $0xe0
   12e31:	68 f6 01 00 00       	push   $0x1f6
   12e36:	e8 cb ff ff ff       	call   12e06 <outb>
   12e3b:	83 c4 08             	add    $0x8,%esp
    outb(0x1f2, (uint8_t)(sector_count >> 8));
   12e3e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e41:	c1 f8 08             	sar    $0x8,%eax
   12e44:	0f b6 c0             	movzbl %al,%eax
   12e47:	50                   	push   %eax
   12e48:	68 f2 01 00 00       	push   $0x1f2
   12e4d:	e8 b4 ff ff ff       	call   12e06 <outb>
   12e52:	83 c4 08             	add    $0x8,%esp
    outb(0x1f3, (uint8_t)(sector >> 24));
   12e55:	8b 45 08             	mov    0x8(%ebp),%eax
   12e58:	c1 e8 18             	shr    $0x18,%eax
   12e5b:	0f b6 c0             	movzbl %al,%eax
   12e5e:	50                   	push   %eax
   12e5f:	68 f3 01 00 00       	push   $0x1f3
   12e64:	e8 9d ff ff ff       	call   12e06 <outb>
   12e69:	83 c4 08             	add    $0x8,%esp
    outb(0x1f4, 0);
   12e6c:	6a 00                	push   $0x0
   12e6e:	68 f4 01 00 00       	push   $0x1f4
   12e73:	e8 8e ff ff ff       	call   12e06 <outb>
   12e78:	83 c4 08             	add    $0x8,%esp
    outb(0x1f5, 0);
   12e7b:	6a 00                	push   $0x0
   12e7d:	68 f5 01 00 00       	push   $0x1f5
   12e82:	e8 7f ff ff ff       	call   12e06 <outb>
   12e87:	83 c4 08             	add    $0x8,%esp

    outb(0x1f2, (uint8_t)sector_count);
   12e8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e8d:	0f b6 c0             	movzbl %al,%eax
   12e90:	50                   	push   %eax
   12e91:	68 f2 01 00 00       	push   $0x1f2
   12e96:	e8 6b ff ff ff       	call   12e06 <outb>
   12e9b:	83 c4 08             	add    $0x8,%esp
    outb(0x1f3, (uint8_t)sector);
   12e9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea1:	0f b6 c0             	movzbl %al,%eax
   12ea4:	50                   	push   %eax
   12ea5:	68 f3 01 00 00       	push   $0x1f3
   12eaa:	e8 57 ff ff ff       	call   12e06 <outb>
   12eaf:	83 c4 08             	add    $0x8,%esp
    outb(0x1f4, (uint8_t)(sector >> 8));
   12eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb5:	c1 e8 08             	shr    $0x8,%eax
   12eb8:	0f b6 c0             	movzbl %al,%eax
   12ebb:	50                   	push   %eax
   12ebc:	68 f4 01 00 00       	push   $0x1f4
   12ec1:	e8 40 ff ff ff       	call   12e06 <outb>
   12ec6:	83 c4 08             	add    $0x8,%esp
    outb(0x1f5, (uint8_t)(sector >> 16));
   12ec9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ecc:	c1 e8 10             	shr    $0x10,%eax
   12ecf:	0f b6 c0             	movzbl %al,%eax
   12ed2:	50                   	push   %eax
   12ed3:	68 f5 01 00 00       	push   $0x1f5
   12ed8:	e8 29 ff ff ff       	call   12e06 <outb>
   12edd:	83 c4 08             	add    $0x8,%esp

    outb(0x1f7, 0x24);
   12ee0:	6a 24                	push   $0x24
   12ee2:	68 f7 01 00 00       	push   $0x1f7
   12ee7:	e8 1a ff ff ff       	call   12e06 <outb>
   12eec:	83 c4 08             	add    $0x8,%esp

    uint16_t* data_buf = (uint16_t*)buf;
   12eef:	8b 45 10             	mov    0x10(%ebp),%eax
   12ef2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count--) {
   12ef5:	eb 4a                	jmp    12f41 <read_disk+0x11c>
        // 每次扇区读之前都要检查，等待数据就绪
        while ((inb(0x1f7) & 0x88) != 0x08) {  }
   12ef7:	90                   	nop
   12ef8:	68 f7 01 00 00       	push   $0x1f7
   12efd:	e8 c8 fe ff ff       	call   12dca <inb>
   12f02:	83 c4 04             	add    $0x4,%esp
   12f05:	0f b6 c0             	movzbl %al,%eax
   12f08:	25 88 00 00 00       	and    $0x88,%eax
   12f0d:	83 f8 08             	cmp    $0x8,%eax
   12f10:	75 e6                	jne    12ef8 <read_disk+0xd3>

        // SECTOR_SIZE = 512
        // 每次读16位，2字节，所以是 SECTOR_SIZE / 2
        for (int i = 0; i < SECTOR_SIZE / 2; i++) {
   12f12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12f19:	eb 1d                	jmp    12f38 <read_disk+0x113>
            *data_buf++ = inw(0x1f0);
   12f1b:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   12f1e:	8d 43 02             	lea    0x2(%ebx),%eax
   12f21:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12f24:	68 f0 01 00 00       	push   $0x1f0
   12f29:	e8 b9 fe ff ff       	call   12de7 <inw>
   12f2e:	83 c4 04             	add    $0x4,%esp
   12f31:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; i++) {
   12f34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12f38:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12f3f:	7e da                	jle    12f1b <read_disk+0xf6>
    while (sector_count--) {
   12f41:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f44:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f47:	89 55 0c             	mov    %edx,0xc(%ebp)
   12f4a:	85 c0                	test   %eax,%eax
   12f4c:	75 a9                	jne    12ef7 <read_disk+0xd2>
        }
    }
}
   12f4e:	90                   	nop
   12f4f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12f52:	c9                   	leave  
   12f53:	c3                   	ret    

00012f54 <sys_open>:

static uint8_t TEMP_ADDR[100 * 1024];
static uint8_t* temp_pos;
#define TEMP_FD         100

int sys_open(const char* name, int flags, ...) {
   12f54:	55                   	push   %ebp
   12f55:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/') {
   12f57:	8b 45 08             	mov    0x8(%ebp),%eax
   12f5a:	0f b6 00             	movzbl (%eax),%eax
   12f5d:	3c 2f                	cmp    $0x2f,%al
   12f5f:	75 25                	jne    12f86 <sys_open+0x32>
        // 80: 40KiB
        read_disk(5000, 80, (uint8_t*)TEMP_ADDR);
   12f61:	68 a0 fc 01 00       	push   $0x1fca0
   12f66:	6a 50                	push   $0x50
   12f68:	68 88 13 00 00       	push   $0x1388
   12f6d:	e8 b3 fe ff ff       	call   12e25 <read_disk>
   12f72:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t*)TEMP_ADDR;
   12f75:	c7 05 a0 8c 03 00 a0 	movl   $0x1fca0,0x38ca0
   12f7c:	fc 01 00 

        return TEMP_FD;
   12f7f:	b8 64 00 00 00       	mov    $0x64,%eax
   12f84:	eb 05                	jmp    12f8b <sys_open+0x37>
    }

    return -1;
   12f86:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12f8b:	c9                   	leave  
   12f8c:	c3                   	ret    

00012f8d <sys_read>:


int sys_read(int fd, char* ptr, int len) {
   12f8d:	55                   	push   %ebp
   12f8e:	89 e5                	mov    %esp,%ebp
   12f90:	83 ec 08             	sub    $0x8,%esp
    if (fd == TEMP_FD) {
   12f93:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   12f97:	75 2c                	jne    12fc5 <sys_read+0x38>
        kmemcpy(ptr, temp_pos, len);
   12f99:	a1 a0 8c 03 00       	mov    0x38ca0,%eax
   12f9e:	83 ec 04             	sub    $0x4,%esp
   12fa1:	ff 75 10             	pushl  0x10(%ebp)
   12fa4:	50                   	push   %eax
   12fa5:	ff 75 0c             	pushl  0xc(%ebp)
   12fa8:	e8 2d 0a 00 00       	call   139da <kmemcpy>
   12fad:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   12fb0:	8b 15 a0 8c 03 00    	mov    0x38ca0,%edx
   12fb6:	8b 45 10             	mov    0x10(%ebp),%eax
   12fb9:	01 d0                	add    %edx,%eax
   12fbb:	a3 a0 8c 03 00       	mov    %eax,0x38ca0
        return len;
   12fc0:	8b 45 10             	mov    0x10(%ebp),%eax
   12fc3:	eb 05                	jmp    12fca <sys_read+0x3d>
    }

    return -1;
   12fc5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12fca:	c9                   	leave  
   12fcb:	c3                   	ret    

00012fcc <sys_write>:


int sys_write(int fd, char* ptr, int len) {
   12fcc:	55                   	push   %ebp
   12fcd:	89 e5                	mov    %esp,%ebp

    return -1;
   12fcf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12fd4:	5d                   	pop    %ebp
   12fd5:	c3                   	ret    

00012fd6 <sys_lseek>:

// 调整文件指针
int sys_lseek(int fd, int offset, int dir) {
   12fd6:	55                   	push   %ebp
   12fd7:	89 e5                	mov    %esp,%ebp
    if (fd == TEMP_FD) {
   12fd9:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   12fdd:	75 14                	jne    12ff3 <sys_lseek+0x1d>
        temp_pos = (uint8_t*) TEMP_ADDR + offset;
   12fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fe2:	05 a0 fc 01 00       	add    $0x1fca0,%eax
   12fe7:	a3 a0 8c 03 00       	mov    %eax,0x38ca0
        return 0;
   12fec:	b8 00 00 00 00       	mov    $0x0,%eax
   12ff1:	eb 05                	jmp    12ff8 <sys_lseek+0x22>
    }

    return -1;
   12ff3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12ff8:	5d                   	pop    %ebp
   12ff9:	c3                   	ret    

00012ffa <sys_close>:


int sys_close(int fd) {
   12ffa:	55                   	push   %ebp
   12ffb:	89 e5                	mov    %esp,%ebp
    return 0;
   12ffd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13002:	5d                   	pop    %ebp
   13003:	c3                   	ret    

00013004 <list_size>:
static inline int list_size(list_t* list) {
   13004:	55                   	push   %ebp
   13005:	89 e5                	mov    %esp,%ebp
    return list->count;
   13007:	8b 45 08             	mov    0x8(%ebp),%eax
   1300a:	8b 40 08             	mov    0x8(%eax),%eax
}
   1300d:	5d                   	pop    %ebp
   1300e:	c3                   	ret    

0001300f <list_first>:
static inline list_node_t* list_first(list_t* list) {
   1300f:	55                   	push   %ebp
   13010:	89 e5                	mov    %esp,%ebp
    return list->first;
   13012:	8b 45 08             	mov    0x8(%ebp),%eax
   13015:	8b 00                	mov    (%eax),%eax
}
   13017:	5d                   	pop    %ebp
   13018:	c3                   	ret    

00013019 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   13019:	55                   	push   %ebp
   1301a:	89 e5                	mov    %esp,%ebp
    return list->last;
   1301c:	8b 45 08             	mov    0x8(%ebp),%eax
   1301f:	8b 40 04             	mov    0x4(%eax),%eax
}
   13022:	5d                   	pop    %ebp
   13023:	c3                   	ret    

00013024 <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   13024:	55                   	push   %ebp
   13025:	89 e5                	mov    %esp,%ebp
   13027:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   1302a:	8b 45 08             	mov    0x8(%ebp),%eax
   1302d:	8b 40 50             	mov    0x50(%eax),%eax
   13030:	85 c0                	test   %eax,%eax
   13032:	75 19                	jne    1304d <kernel_init+0x29>
   13034:	68 48 4b 01 00       	push   $0x14b48
   13039:	68 58 4c 01 00       	push   $0x14c58
   1303e:	6a 12                	push   $0x12
   13040:	68 6c 4b 01 00       	push   $0x14b6c
   13045:	e8 44 0d 00 00       	call   13d8e <pannic>
   1304a:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   1304d:	90                   	nop

    cpu_init();
   1304e:	e8 5f f2 ff ff       	call   122b2 <cpu_init>
    log_init();
   13053:	e8 11 10 00 00       	call   14069 <log_init>

    memory_init(boot_info);
   13058:	83 ec 0c             	sub    $0xc,%esp
   1305b:	ff 75 08             	pushl  0x8(%ebp)
   1305e:	e8 55 d8 ff ff       	call   108b8 <memory_init>
   13063:	83 c4 10             	add    $0x10,%esp




    irq_init();
   13066:	e8 2f f9 ff ff       	call   1299a <irq_init>
    timer_init();
   1306b:	e8 42 fd ff ff       	call   12db2 <timer_init>

    task_manager_init();
   13070:	e8 e8 e3 ff ff       	call   1145d <task_manager_init>
}
   13075:	90                   	nop
   13076:	c9                   	leave  
   13077:	c3                   	ret    

00013078 <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   13078:	55                   	push   %ebp
   13079:	89 e5                	mov    %esp,%ebp
   1307b:	56                   	push   %esi
   1307c:	53                   	push   %ebx
   1307d:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   13080:	83 ec 0c             	sub    $0xc,%esp
   13083:	8d 45 d0             	lea    -0x30(%ebp),%eax
   13086:	50                   	push   %eax
   13087:	e8 be 0d 00 00       	call   13e4a <list_init>
   1308c:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   1308f:	83 ec 0c             	sub    $0xc,%esp
   13092:	8d 45 d0             	lea    -0x30(%ebp),%eax
   13095:	50                   	push   %eax
   13096:	e8 69 ff ff ff       	call   13004 <list_size>
   1309b:	83 c4 10             	add    $0x10,%esp
   1309e:	89 c6                	mov    %eax,%esi
   130a0:	83 ec 0c             	sub    $0xc,%esp
   130a3:	8d 45 d0             	lea    -0x30(%ebp),%eax
   130a6:	50                   	push   %eax
   130a7:	e8 6d ff ff ff       	call   13019 <list_last>
   130ac:	83 c4 10             	add    $0x10,%esp
   130af:	89 c3                	mov    %eax,%ebx
   130b1:	83 ec 0c             	sub    $0xc,%esp
   130b4:	8d 45 d0             	lea    -0x30(%ebp),%eax
   130b7:	50                   	push   %eax
   130b8:	e8 52 ff ff ff       	call   1300f <list_first>
   130bd:	83 c4 10             	add    $0x10,%esp
   130c0:	56                   	push   %esi
   130c1:	53                   	push   %ebx
   130c2:	50                   	push   %eax
   130c3:	68 b4 4b 01 00       	push   $0x14bb4
   130c8:	e8 3e 10 00 00       	call   1410b <log_printf>
   130cd:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   130d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   130d7:	eb 3b                	jmp    13114 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   130d9:	8d 45 a8             	lea    -0x58(%ebp),%eax
   130dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   130df:	c1 e2 03             	shl    $0x3,%edx
   130e2:	01 d0                	add    %edx,%eax
   130e4:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   130e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
   130ea:	83 ec 04             	sub    $0x4,%esp
   130ed:	50                   	push   %eax
   130ee:	ff 75 f4             	pushl  -0xc(%ebp)
   130f1:	68 dd 4b 01 00       	push   $0x14bdd
   130f6:	e8 10 10 00 00       	call   1410b <log_printf>
   130fb:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   130fe:	83 ec 08             	sub    $0x8,%esp
   13101:	ff 75 dc             	pushl  -0x24(%ebp)
   13104:	8d 45 d0             	lea    -0x30(%ebp),%eax
   13107:	50                   	push   %eax
   13108:	e8 60 0d 00 00       	call   13e6d <list_insert_front>
   1310d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   13110:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13114:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   13118:	7e bf                	jle    130d9 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   1311a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13121:	eb 33                	jmp    13156 <link_test+0xde>
        list_remove_front(&list);
   13123:	83 ec 0c             	sub    $0xc,%esp
   13126:	8d 45 d0             	lea    -0x30(%ebp),%eax
   13129:	50                   	push   %eax
   1312a:	e8 00 0e 00 00       	call   13f2f <list_remove_front>
   1312f:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   13132:	83 ec 0c             	sub    $0xc,%esp
   13135:	8d 45 d0             	lea    -0x30(%ebp),%eax
   13138:	50                   	push   %eax
   13139:	e8 c6 fe ff ff       	call   13004 <list_size>
   1313e:	83 c4 10             	add    $0x10,%esp
   13141:	83 ec 08             	sub    $0x8,%esp
   13144:	50                   	push   %eax
   13145:	68 e5 4b 01 00       	push   $0x14be5
   1314a:	e8 bc 0f 00 00       	call   1410b <log_printf>
   1314f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   13152:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13156:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1315a:	7e c7                	jle    13123 <link_test+0xab>
    }

    list_init(&list);
   1315c:	83 ec 0c             	sub    $0xc,%esp
   1315f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   13162:	50                   	push   %eax
   13163:	e8 e2 0c 00 00       	call   13e4a <list_init>
   13168:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   1316b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   13172:	eb 3b                	jmp    131af <link_test+0x137>
        list_node_t* node = &nodes[i];
   13174:	8d 45 a8             	lea    -0x58(%ebp),%eax
   13177:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1317a:	c1 e2 03             	shl    $0x3,%edx
   1317d:	01 d0                	add    %edx,%eax
   1317f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   13182:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13185:	83 ec 04             	sub    $0x4,%esp
   13188:	50                   	push   %eax
   13189:	ff 75 ec             	pushl  -0x14(%ebp)
   1318c:	68 dd 4b 01 00       	push   $0x14bdd
   13191:	e8 75 0f 00 00       	call   1410b <log_printf>
   13196:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   13199:	83 ec 08             	sub    $0x8,%esp
   1319c:	ff 75 e0             	pushl  -0x20(%ebp)
   1319f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   131a2:	50                   	push   %eax
   131a3:	e8 24 0d 00 00       	call   13ecc <list_insert_back>
   131a8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   131ab:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   131af:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   131b3:	7e bf                	jle    13174 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   131b5:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   131bc:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   131c3:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   131ca:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   131d1:	8d 45 9c             	lea    -0x64(%ebp),%eax
   131d4:	83 c0 04             	add    $0x4,%eax
   131d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   131da:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   131de:	74 08                	je     131e8 <link_test+0x170>
   131e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   131e3:	83 e8 04             	sub    $0x4,%eax
   131e6:	eb 05                	jmp    131ed <link_test+0x175>
   131e8:	b8 00 00 00 00       	mov    $0x0,%eax
   131ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   131f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131f3:	8b 00                	mov    (%eax),%eax
   131f5:	3d 56 34 12 00       	cmp    $0x123456,%eax
   131fa:	74 10                	je     1320c <link_test+0x194>
        log_printf("error!");
   131fc:	83 ec 0c             	sub    $0xc,%esp
   131ff:	68 ea 4b 01 00       	push   $0x14bea
   13204:	e8 02 0f 00 00       	call   1410b <log_printf>
   13209:	83 c4 10             	add    $0x10,%esp
    }

}
   1320c:	90                   	nop
   1320d:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13210:	5b                   	pop    %ebx
   13211:	5e                   	pop    %esi
   13212:	5d                   	pop    %ebp
   13213:	c3                   	ret    

00013214 <move_to_first_task>:


void move_to_first_task(void) {
   13214:	55                   	push   %ebp
   13215:	89 e5                	mov    %esp,%ebp
   13217:	56                   	push   %esi
   13218:	53                   	push   %ebx
   13219:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   1321c:	e8 b0 e4 ff ff       	call   116d1 <task_current>
   13221:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   13224:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13228:	75 19                	jne    13243 <move_to_first_task+0x2f>
   1322a:	68 f1 4b 01 00       	push   $0x14bf1
   1322f:	68 64 4c 01 00       	push   $0x14c64
   13234:	6a 68                	push   $0x68
   13236:	68 6c 4b 01 00       	push   $0x14b6c
   1323b:	e8 4e 0b 00 00       	call   13d8e <pannic>
   13240:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   13243:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13246:	83 c0 50             	add    $0x50,%eax
   13249:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS (RPL = 3)
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"        // EFLAGS
        "push %[cs]\n\t"			// CS (CPL = 3)
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   1324c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1324f:	8b 40 50             	mov    0x50(%eax),%eax
   13252:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13255:	8b 52 38             	mov    0x38(%edx),%edx
   13258:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1325b:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   1325e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   13261:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   13264:	8b 75 f0             	mov    -0x10(%ebp),%esi
   13267:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   1326a:	50                   	push   %eax
   1326b:	52                   	push   %edx
   1326c:	51                   	push   %ecx
   1326d:	53                   	push   %ebx
   1326e:	56                   	push   %esi
   1326f:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   13270:	90                   	nop
   13271:	8d 65 f8             	lea    -0x8(%ebp),%esp
   13274:	5b                   	pop    %ebx
   13275:	5e                   	pop    %esi
   13276:	5d                   	pop    %ebp
   13277:	c3                   	ret    

00013278 <test_task1>:



static void test_task1(void) {
   13278:	55                   	push   %ebp
   13279:	89 e5                	mov    %esp,%ebp
   1327b:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1327e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task1: %d", count);
   13285:	83 ec 08             	sub    $0x8,%esp
   13288:	ff 75 f4             	pushl  -0xc(%ebp)
   1328b:	68 fb 4b 01 00       	push   $0x14bfb
   13290:	e8 76 0e 00 00       	call   1410b <log_printf>
   13295:	83 c4 10             	add    $0x10,%esp
        count++;
   13298:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   1329c:	83 ec 0c             	sub    $0xc,%esp
   1329f:	68 e8 03 00 00       	push   $0x3e8
   132a4:	e8 18 e6 ff ff       	call   118c1 <sys_sleep>
   132a9:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task1: %d", count);
   132ac:	eb d7                	jmp    13285 <test_task1+0xd>

000132ae <test_task2>:
    }
}


static void test_task2(void) {
   132ae:	55                   	push   %ebp
   132af:	89 e5                	mov    %esp,%ebp
   132b1:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   132b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task2: %d", count);
   132bb:	83 ec 08             	sub    $0x8,%esp
   132be:	ff 75 f4             	pushl  -0xc(%ebp)
   132c1:	68 0a 4c 01 00       	push   $0x14c0a
   132c6:	e8 40 0e 00 00       	call   1410b <log_printf>
   132cb:	83 c4 10             	add    $0x10,%esp
        count++;
   132ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   132d2:	83 ec 0c             	sub    $0xc,%esp
   132d5:	68 e8 03 00 00       	push   $0x3e8
   132da:	e8 e2 e5 ff ff       	call   118c1 <sys_sleep>
   132df:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task2: %d", count);
   132e2:	eb d7                	jmp    132bb <test_task2+0xd>

000132e4 <init_main>:
static task_t task1;
static task_t task2;
static uint32_t stack1[MEM_PAGE_SIZE];
static uint32_t stack2[MEM_PAGE_SIZE];

void init_main(void) {
   132e4:	55                   	push   %ebp
   132e5:	89 e5                	mov    %esp,%ebp
   132e7:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();    
    log_printf("Kernel is running ...");
   132ea:	83 ec 0c             	sub    $0xc,%esp
   132ed:	68 19 4c 01 00       	push   $0x14c19
   132f2:	e8 14 0e 00 00       	call   1410b <log_printf>
   132f7:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   132fa:	83 ec 04             	sub    $0x4,%esp
   132fd:	68 2f 4c 01 00       	push   $0x14c2f
   13302:	68 34 4c 01 00       	push   $0x14c34
   13307:	68 3a 4c 01 00       	push   $0x14c3a
   1330c:	e8 fa 0d 00 00       	call   1410b <log_printf>
   13311:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   13314:	83 ec 0c             	sub    $0xc,%esp
   13317:	6a 61                	push   $0x61
   13319:	68 56 34 12 00       	push   $0x123456
   1331e:	6a 85                	push   $0xffffff85
   13320:	68 39 30 00 00       	push   $0x3039
   13325:	68 49 4c 01 00       	push   $0x14c49
   1332a:	e8 dc 0d 00 00       	call   1410b <log_printf>
   1332f:	83 c4 20             	add    $0x20,%esp
    
    // task_init(&task1, "test_task1", TASK_FLAGS_SYSTEM, (uint32_t)test_task1, (uint32_t)&stack1[MEM_PAGE_SIZE]);
    // task_init(&task2, "test_task2", TASK_FLAGS_SYSTEM, (uint32_t)test_task2, (uint32_t)&stack2[MEM_PAGE_SIZE]);


    sys_sched_yield();
   13332:	e8 a4 e3 ff ff       	call   116db <sys_sched_yield>

    // while (1);

    task_first_init();
   13337:	e8 10 e2 ff ff       	call   1154c <task_first_init>
    move_to_first_task();
   1333c:	e8 d3 fe ff ff       	call   13214 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   13341:	90                   	nop
   13342:	c9                   	leave  
   13343:	c3                   	ret    

00013344 <list_size>:
static inline int list_size(list_t* list) {
   13344:	55                   	push   %ebp
   13345:	89 e5                	mov    %esp,%ebp
    return list->count;
   13347:	8b 45 08             	mov    0x8(%ebp),%eax
   1334a:	8b 40 08             	mov    0x8(%eax),%eax
}
   1334d:	5d                   	pop    %ebp
   1334e:	c3                   	ret    

0001334f <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   1334f:	55                   	push   %ebp
   13350:	89 e5                	mov    %esp,%ebp
   13352:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   13355:	8b 45 08             	mov    0x8(%ebp),%eax
   13358:	83 ec 08             	sub    $0x8,%esp
   1335b:	ff 75 0c             	pushl  0xc(%ebp)
   1335e:	50                   	push   %eax
   1335f:	e8 0a 05 00 00       	call   1386e <kstrcpy>
   13364:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   13367:	8b 45 08             	mov    0x8(%ebp),%eax
   1336a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   13371:	8b 45 08             	mov    0x8(%ebp),%eax
   13374:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   1337b:	8b 45 08             	mov    0x8(%ebp),%eax
   1337e:	83 c0 48             	add    $0x48,%eax
   13381:	83 ec 0c             	sub    $0xc,%esp
   13384:	50                   	push   %eax
   13385:	e8 c0 0a 00 00       	call   13e4a <list_init>
   1338a:	83 c4 10             	add    $0x10,%esp
}
   1338d:	90                   	nop
   1338e:	c9                   	leave  
   1338f:	c3                   	ret    

00013390 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   13390:	55                   	push   %ebp
   13391:	89 e5                	mov    %esp,%ebp
   13393:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   13396:	e8 47 f9 ff ff       	call   12ce2 <irq_enter_protection>
   1339b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   1339e:	e8 2e e3 ff ff       	call   116d1 <task_current>
   133a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   133a6:	8b 45 08             	mov    0x8(%ebp),%eax
   133a9:	8b 40 44             	mov    0x44(%eax),%eax
   133ac:	85 c0                	test   %eax,%eax
   133ae:	75 15                	jne    133c5 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   133b0:	8b 45 08             	mov    0x8(%ebp),%eax
   133b3:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   133ba:	8b 45 08             	mov    0x8(%ebp),%eax
   133bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   133c0:	89 50 40             	mov    %edx,0x40(%eax)
   133c3:	eb 48                	jmp    1340d <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   133c5:	8b 45 08             	mov    0x8(%ebp),%eax
   133c8:	8b 40 40             	mov    0x40(%eax),%eax
   133cb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   133ce:	75 11                	jne    133e1 <mutex_acquire+0x51>
        mutex->locked_count++;
   133d0:	8b 45 08             	mov    0x8(%ebp),%eax
   133d3:	8b 40 44             	mov    0x44(%eax),%eax
   133d6:	8d 50 01             	lea    0x1(%eax),%edx
   133d9:	8b 45 08             	mov    0x8(%ebp),%eax
   133dc:	89 50 44             	mov    %edx,0x44(%eax)
   133df:	eb 2c                	jmp    1340d <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   133e1:	83 ec 0c             	sub    $0xc,%esp
   133e4:	ff 75 f0             	pushl  -0x10(%ebp)
   133e7:	e8 77 e2 ff ff       	call   11663 <task_set_blocked>
   133ec:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   133ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   133f2:	8d 50 3c             	lea    0x3c(%eax),%edx
   133f5:	8b 45 08             	mov    0x8(%ebp),%eax
   133f8:	83 c0 48             	add    $0x48,%eax
   133fb:	83 ec 08             	sub    $0x8,%esp
   133fe:	52                   	push   %edx
   133ff:	50                   	push   %eax
   13400:	e8 c7 0a 00 00       	call   13ecc <list_insert_back>
   13405:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   13408:	e8 2f e3 ff ff       	call   1173c <task_dispatch>
    }

    irq_leave_protection(state);
   1340d:	83 ec 0c             	sub    $0xc,%esp
   13410:	ff 75 f4             	pushl  -0xc(%ebp)
   13413:	e8 e2 f8 ff ff       	call   12cfa <irq_leave_protection>
   13418:	83 c4 10             	add    $0x10,%esp
}
   1341b:	90                   	nop
   1341c:	c9                   	leave  
   1341d:	c3                   	ret    

0001341e <mutex_release>:

void mutex_release(mutex_t* mutex) {
   1341e:	55                   	push   %ebp
   1341f:	89 e5                	mov    %esp,%ebp
   13421:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   13424:	e8 b9 f8 ff ff       	call   12ce2 <irq_enter_protection>
   13429:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   1342c:	e8 a0 e2 ff ff       	call   116d1 <task_current>
   13431:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   13434:	8b 45 08             	mov    0x8(%ebp),%eax
   13437:	8b 40 40             	mov    0x40(%eax),%eax
   1343a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1343d:	0f 85 8a 00 00 00    	jne    134cd <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   13443:	8b 45 08             	mov    0x8(%ebp),%eax
   13446:	8b 40 44             	mov    0x44(%eax),%eax
   13449:	8d 50 ff             	lea    -0x1(%eax),%edx
   1344c:	8b 45 08             	mov    0x8(%ebp),%eax
   1344f:	89 50 44             	mov    %edx,0x44(%eax)
   13452:	8b 45 08             	mov    0x8(%ebp),%eax
   13455:	8b 40 44             	mov    0x44(%eax),%eax
   13458:	85 c0                	test   %eax,%eax
   1345a:	75 71                	jne    134cd <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   1345c:	8b 45 08             	mov    0x8(%ebp),%eax
   1345f:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   13466:	8b 45 08             	mov    0x8(%ebp),%eax
   13469:	83 c0 48             	add    $0x48,%eax
   1346c:	83 ec 0c             	sub    $0xc,%esp
   1346f:	50                   	push   %eax
   13470:	e8 cf fe ff ff       	call   13344 <list_size>
   13475:	83 c4 10             	add    $0x10,%esp
   13478:	85 c0                	test   %eax,%eax
   1347a:	74 51                	je     134cd <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   1347c:	8b 45 08             	mov    0x8(%ebp),%eax
   1347f:	83 c0 48             	add    $0x48,%eax
   13482:	83 ec 0c             	sub    $0xc,%esp
   13485:	50                   	push   %eax
   13486:	e8 a4 0a 00 00       	call   13f2f <list_remove_front>
   1348b:	83 c4 10             	add    $0x10,%esp
   1348e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   13491:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13495:	74 08                	je     1349f <mutex_release+0x81>
   13497:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1349a:	83 e8 3c             	sub    $0x3c,%eax
   1349d:	eb 05                	jmp    134a4 <mutex_release+0x86>
   1349f:	b8 00 00 00 00       	mov    $0x0,%eax
   134a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   134a7:	83 ec 0c             	sub    $0xc,%esp
   134aa:	ff 75 e8             	pushl  -0x18(%ebp)
   134ad:	e8 7d e1 ff ff       	call   1162f <task_set_ready>
   134b2:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   134b5:	8b 45 08             	mov    0x8(%ebp),%eax
   134b8:	8b 55 e8             	mov    -0x18(%ebp),%edx
   134bb:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   134be:	8b 45 08             	mov    0x8(%ebp),%eax
   134c1:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   134c8:	e8 6f e2 ff ff       	call   1173c <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   134cd:	83 ec 0c             	sub    $0xc,%esp
   134d0:	ff 75 f4             	pushl  -0xc(%ebp)
   134d3:	e8 22 f8 ff ff       	call   12cfa <irq_leave_protection>
   134d8:	83 c4 10             	add    $0x10,%esp
   134db:	90                   	nop
   134dc:	c9                   	leave  
   134dd:	c3                   	ret    

000134de <list_size>:
static inline int list_size(list_t* list) {
   134de:	55                   	push   %ebp
   134df:	89 e5                	mov    %esp,%ebp
    return list->count;
   134e1:	8b 45 08             	mov    0x8(%ebp),%eax
   134e4:	8b 40 08             	mov    0x8(%eax),%eax
}
   134e7:	5d                   	pop    %ebp
   134e8:	c3                   	ret    

000134e9 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   134e9:	55                   	push   %ebp
   134ea:	89 e5                	mov    %esp,%ebp
   134ec:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   134ef:	8b 45 08             	mov    0x8(%ebp),%eax
   134f2:	8b 55 0c             	mov    0xc(%ebp),%edx
   134f5:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   134f7:	8b 45 08             	mov    0x8(%ebp),%eax
   134fa:	83 c0 04             	add    $0x4,%eax
   134fd:	83 ec 0c             	sub    $0xc,%esp
   13500:	50                   	push   %eax
   13501:	e8 44 09 00 00       	call   13e4a <list_init>
   13506:	83 c4 10             	add    $0x10,%esp
}
   13509:	90                   	nop
   1350a:	c9                   	leave  
   1350b:	c3                   	ret    

0001350c <sem_wait>:


void sem_wait(sem_t* sem) {
   1350c:	55                   	push   %ebp
   1350d:	89 e5                	mov    %esp,%ebp
   1350f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   13512:	e8 cb f7 ff ff       	call   12ce2 <irq_enter_protection>
   13517:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 进程获得了一个信号，且不为0
    if (sem->count > 0) {
   1351a:	8b 45 08             	mov    0x8(%ebp),%eax
   1351d:	8b 00                	mov    (%eax),%eax
   1351f:	85 c0                	test   %eax,%eax
   13521:	7e 0f                	jle    13532 <sem_wait+0x26>
        sem->count--;
   13523:	8b 45 08             	mov    0x8(%ebp),%eax
   13526:	8b 00                	mov    (%eax),%eax
   13528:	8d 50 ff             	lea    -0x1(%eax),%edx
   1352b:	8b 45 08             	mov    0x8(%ebp),%eax
   1352e:	89 10                	mov    %edx,(%eax)
   13530:	eb 34                	jmp    13566 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   13532:	e8 9a e1 ff ff       	call   116d1 <task_current>
   13537:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   1353a:	83 ec 0c             	sub    $0xc,%esp
   1353d:	ff 75 f0             	pushl  -0x10(%ebp)
   13540:	e8 1e e1 ff ff       	call   11663 <task_set_blocked>
   13545:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   13548:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1354b:	8d 50 3c             	lea    0x3c(%eax),%edx
   1354e:	8b 45 08             	mov    0x8(%ebp),%eax
   13551:	83 c0 04             	add    $0x4,%eax
   13554:	83 ec 08             	sub    $0x8,%esp
   13557:	52                   	push   %edx
   13558:	50                   	push   %eax
   13559:	e8 6e 09 00 00       	call   13ecc <list_insert_back>
   1355e:	83 c4 10             	add    $0x10,%esp
        
        task_dispatch();
   13561:	e8 d6 e1 ff ff       	call   1173c <task_dispatch>
    }

    irq_leave_protection(state);
   13566:	83 ec 0c             	sub    $0xc,%esp
   13569:	ff 75 f4             	pushl  -0xc(%ebp)
   1356c:	e8 89 f7 ff ff       	call   12cfa <irq_leave_protection>
   13571:	83 c4 10             	add    $0x10,%esp
}
   13574:	90                   	nop
   13575:	c9                   	leave  
   13576:	c3                   	ret    

00013577 <sem_notify>:


void sem_notify(sem_t* sem) {
   13577:	55                   	push   %ebp
   13578:	89 e5                	mov    %esp,%ebp
   1357a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1357d:	e8 60 f7 ff ff       	call   12ce2 <irq_enter_protection>
   13582:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   13585:	8b 45 08             	mov    0x8(%ebp),%eax
   13588:	83 c0 04             	add    $0x4,%eax
   1358b:	83 ec 0c             	sub    $0xc,%esp
   1358e:	50                   	push   %eax
   1358f:	e8 4a ff ff ff       	call   134de <list_size>
   13594:	83 c4 10             	add    $0x10,%esp
   13597:	85 c0                	test   %eax,%eax
   13599:	74 40                	je     135db <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   1359b:	8b 45 08             	mov    0x8(%ebp),%eax
   1359e:	83 c0 04             	add    $0x4,%eax
   135a1:	83 ec 0c             	sub    $0xc,%esp
   135a4:	50                   	push   %eax
   135a5:	e8 85 09 00 00       	call   13f2f <list_remove_front>
   135aa:	83 c4 10             	add    $0x10,%esp
   135ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   135b0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   135b4:	74 08                	je     135be <sem_notify+0x47>
   135b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   135b9:	83 e8 3c             	sub    $0x3c,%eax
   135bc:	eb 05                	jmp    135c3 <sem_notify+0x4c>
   135be:	b8 00 00 00 00       	mov    $0x0,%eax
   135c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   135c6:	83 ec 0c             	sub    $0xc,%esp
   135c9:	ff 75 ec             	pushl  -0x14(%ebp)
   135cc:	e8 5e e0 ff ff       	call   1162f <task_set_ready>
   135d1:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   135d4:	e8 63 e1 ff ff       	call   1173c <task_dispatch>
   135d9:	eb 0d                	jmp    135e8 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   135db:	8b 45 08             	mov    0x8(%ebp),%eax
   135de:	8b 00                	mov    (%eax),%eax
   135e0:	8d 50 01             	lea    0x1(%eax),%edx
   135e3:	8b 45 08             	mov    0x8(%ebp),%eax
   135e6:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   135e8:	83 ec 0c             	sub    $0xc,%esp
   135eb:	ff 75 f4             	pushl  -0xc(%ebp)
   135ee:	e8 07 f7 ff ff       	call   12cfa <irq_leave_protection>
   135f3:	83 c4 10             	add    $0x10,%esp
}
   135f6:	90                   	nop
   135f7:	c9                   	leave  
   135f8:	c3                   	ret    

000135f9 <sem_count>:

int sem_count(sem_t* sem) {
   135f9:	55                   	push   %ebp
   135fa:	89 e5                	mov    %esp,%ebp
   135fc:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   135ff:	e8 de f6 ff ff       	call   12ce2 <irq_enter_protection>
   13604:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   13607:	8b 45 08             	mov    0x8(%ebp),%eax
   1360a:	8b 00                	mov    (%eax),%eax
   1360c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   1360f:	83 ec 0c             	sub    $0xc,%esp
   13612:	ff 75 f4             	pushl  -0xc(%ebp)
   13615:	e8 e0 f6 ff ff       	call   12cfa <irq_leave_protection>
   1361a:	83 c4 10             	add    $0x10,%esp

    return count;
   1361d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13620:	c9                   	leave  
   13621:	c3                   	ret    

00013622 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   13622:	55                   	push   %ebp
   13623:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   13625:	8b 45 08             	mov    0x8(%ebp),%eax
   13628:	83 c0 07             	add    $0x7,%eax
   1362b:	8d 50 07             	lea    0x7(%eax),%edx
   1362e:	85 c0                	test   %eax,%eax
   13630:	0f 48 c2             	cmovs  %edx,%eax
   13633:	c1 f8 03             	sar    $0x3,%eax
}
   13636:	5d                   	pop    %ebp
   13637:	c3                   	ret    

00013638 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   13638:	55                   	push   %ebp
   13639:	89 e5                	mov    %esp,%ebp
   1363b:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1363e:	8b 45 08             	mov    0x8(%ebp),%eax
   13641:	8b 55 10             	mov    0x10(%ebp),%edx
   13644:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   13646:	8b 45 08             	mov    0x8(%ebp),%eax
   13649:	8b 55 0c             	mov    0xc(%ebp),%edx
   1364c:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1364f:	8b 45 08             	mov    0x8(%ebp),%eax
   13652:	8b 00                	mov    (%eax),%eax
   13654:	50                   	push   %eax
   13655:	e8 c8 ff ff ff       	call   13622 <bitmap_byte_count>
   1365a:	83 c4 04             	add    $0x4,%esp
   1365d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   13660:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13664:	74 07                	je     1366d <bitmap_init+0x35>
   13666:	ba ff 00 00 00       	mov    $0xff,%edx
   1366b:	eb 05                	jmp    13672 <bitmap_init+0x3a>
   1366d:	ba 00 00 00 00       	mov    $0x0,%edx
   13672:	8b 45 08             	mov    0x8(%ebp),%eax
   13675:	8b 40 04             	mov    0x4(%eax),%eax
   13678:	83 ec 04             	sub    $0x4,%esp
   1367b:	ff 75 f4             	pushl  -0xc(%ebp)
   1367e:	52                   	push   %edx
   1367f:	50                   	push   %eax
   13680:	e8 a4 03 00 00       	call   13a29 <kmemset>
   13685:	83 c4 10             	add    $0x10,%esp
}
   13688:	90                   	nop
   13689:	c9                   	leave  
   1368a:	c3                   	ret    

0001368b <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   1368b:	55                   	push   %ebp
   1368c:	89 e5                	mov    %esp,%ebp
   1368e:	56                   	push   %esi
   1368f:	53                   	push   %ebx
   13690:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   13693:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1369a:	e9 a2 00 00 00       	jmp    13741 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   1369f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   136a3:	74 4a                	je     136ef <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   136a5:	8b 45 08             	mov    0x8(%ebp),%eax
   136a8:	8b 50 04             	mov    0x4(%eax),%edx
   136ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   136ae:	8d 48 07             	lea    0x7(%eax),%ecx
   136b1:	85 c0                	test   %eax,%eax
   136b3:	0f 48 c1             	cmovs  %ecx,%eax
   136b6:	c1 f8 03             	sar    $0x3,%eax
   136b9:	89 c3                	mov    %eax,%ebx
   136bb:	89 d8                	mov    %ebx,%eax
   136bd:	01 d0                	add    %edx,%eax
   136bf:	0f b6 00             	movzbl (%eax),%eax
   136c2:	89 c6                	mov    %eax,%esi
   136c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   136c7:	99                   	cltd   
   136c8:	c1 ea 1d             	shr    $0x1d,%edx
   136cb:	01 d0                	add    %edx,%eax
   136cd:	83 e0 07             	and    $0x7,%eax
   136d0:	29 d0                	sub    %edx,%eax
   136d2:	ba 01 00 00 00       	mov    $0x1,%edx
   136d7:	89 c1                	mov    %eax,%ecx
   136d9:	d3 e2                	shl    %cl,%edx
   136db:	89 d0                	mov    %edx,%eax
   136dd:	89 f2                	mov    %esi,%edx
   136df:	09 c2                	or     %eax,%edx
   136e1:	8b 45 08             	mov    0x8(%ebp),%eax
   136e4:	8b 40 04             	mov    0x4(%eax),%eax
   136e7:	89 d9                	mov    %ebx,%ecx
   136e9:	01 c8                	add    %ecx,%eax
   136eb:	88 10                	mov    %dl,(%eax)
   136ed:	eb 4a                	jmp    13739 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   136ef:	8b 45 08             	mov    0x8(%ebp),%eax
   136f2:	8b 50 04             	mov    0x4(%eax),%edx
   136f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   136f8:	8d 48 07             	lea    0x7(%eax),%ecx
   136fb:	85 c0                	test   %eax,%eax
   136fd:	0f 48 c1             	cmovs  %ecx,%eax
   13700:	c1 f8 03             	sar    $0x3,%eax
   13703:	89 c3                	mov    %eax,%ebx
   13705:	89 d8                	mov    %ebx,%eax
   13707:	01 d0                	add    %edx,%eax
   13709:	0f b6 00             	movzbl (%eax),%eax
   1370c:	89 c6                	mov    %eax,%esi
   1370e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13711:	99                   	cltd   
   13712:	c1 ea 1d             	shr    $0x1d,%edx
   13715:	01 d0                	add    %edx,%eax
   13717:	83 e0 07             	and    $0x7,%eax
   1371a:	29 d0                	sub    %edx,%eax
   1371c:	ba 01 00 00 00       	mov    $0x1,%edx
   13721:	89 c1                	mov    %eax,%ecx
   13723:	d3 e2                	shl    %cl,%edx
   13725:	89 d0                	mov    %edx,%eax
   13727:	f7 d0                	not    %eax
   13729:	89 f2                	mov    %esi,%edx
   1372b:	21 c2                	and    %eax,%edx
   1372d:	8b 45 08             	mov    0x8(%ebp),%eax
   13730:	8b 40 04             	mov    0x4(%eax),%eax
   13733:	89 d9                	mov    %ebx,%ecx
   13735:	01 c8                	add    %ecx,%eax
   13737:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   13739:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1373d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   13741:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13744:	3b 45 10             	cmp    0x10(%ebp),%eax
   13747:	7d 0e                	jge    13757 <bitmap_set_bit+0xcc>
   13749:	8b 45 08             	mov    0x8(%ebp),%eax
   1374c:	8b 00                	mov    (%eax),%eax
   1374e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13751:	0f 8c 48 ff ff ff    	jl     1369f <bitmap_set_bit+0x14>
        }
    }
}
   13757:	90                   	nop
   13758:	83 c4 10             	add    $0x10,%esp
   1375b:	5b                   	pop    %ebx
   1375c:	5e                   	pop    %esi
   1375d:	5d                   	pop    %ebp
   1375e:	c3                   	ret    

0001375f <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   1375f:	55                   	push   %ebp
   13760:	89 e5                	mov    %esp,%ebp
   13762:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   13763:	8b 45 08             	mov    0x8(%ebp),%eax
   13766:	8b 50 04             	mov    0x4(%eax),%edx
   13769:	8b 45 0c             	mov    0xc(%ebp),%eax
   1376c:	8d 48 07             	lea    0x7(%eax),%ecx
   1376f:	85 c0                	test   %eax,%eax
   13771:	0f 48 c1             	cmovs  %ecx,%eax
   13774:	c1 f8 03             	sar    $0x3,%eax
   13777:	01 d0                	add    %edx,%eax
   13779:	0f b6 00             	movzbl (%eax),%eax
   1377c:	0f b6 d8             	movzbl %al,%ebx
   1377f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13782:	99                   	cltd   
   13783:	c1 ea 1d             	shr    $0x1d,%edx
   13786:	01 d0                	add    %edx,%eax
   13788:	83 e0 07             	and    $0x7,%eax
   1378b:	29 d0                	sub    %edx,%eax
   1378d:	89 c1                	mov    %eax,%ecx
   1378f:	d3 fb                	sar    %cl,%ebx
   13791:	89 d8                	mov    %ebx,%eax
   13793:	83 e0 01             	and    $0x1,%eax
}
   13796:	5b                   	pop    %ebx
   13797:	5d                   	pop    %ebp
   13798:	c3                   	ret    

00013799 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   13799:	55                   	push   %ebp
   1379a:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1379c:	ff 75 0c             	pushl  0xc(%ebp)
   1379f:	ff 75 08             	pushl  0x8(%ebp)
   137a2:	e8 b8 ff ff ff       	call   1375f <bitmap_get_bit>
   137a7:	83 c4 08             	add    $0x8,%esp
   137aa:	85 c0                	test   %eax,%eax
   137ac:	0f 95 c0             	setne  %al
   137af:	0f b6 c0             	movzbl %al,%eax
}
   137b2:	c9                   	leave  
   137b3:	c3                   	ret    

000137b4 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   137b4:	55                   	push   %ebp
   137b5:	89 e5                	mov    %esp,%ebp
   137b7:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   137ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   137c1:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   137c8:	e9 85 00 00 00       	jmp    13852 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   137cd:	ff 75 fc             	pushl  -0x4(%ebp)
   137d0:	ff 75 08             	pushl  0x8(%ebp)
   137d3:	e8 87 ff ff ff       	call   1375f <bitmap_get_bit>
   137d8:	83 c4 08             	add    $0x8,%esp
   137db:	39 45 0c             	cmp    %eax,0xc(%ebp)
   137de:	74 06                	je     137e6 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   137e0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   137e4:	eb 6c                	jmp    13852 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   137e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137e9:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   137ec:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   137f3:	eb 27                	jmp    1381c <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   137f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137f8:	8d 50 01             	lea    0x1(%eax),%edx
   137fb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   137fe:	50                   	push   %eax
   137ff:	ff 75 08             	pushl  0x8(%ebp)
   13802:	e8 58 ff ff ff       	call   1375f <bitmap_get_bit>
   13807:	83 c4 08             	add    $0x8,%esp
   1380a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1380d:	74 09                	je     13818 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   1380f:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   13816:	eb 16                	jmp    1382e <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   13818:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1381c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1381f:	3b 45 10             	cmp    0x10(%ebp),%eax
   13822:	7d 0a                	jge    1382e <bitmap_alloc_nbits+0x7a>
   13824:	8b 45 08             	mov    0x8(%ebp),%eax
   13827:	8b 00                	mov    (%eax),%eax
   13829:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1382c:	7c c7                	jl     137f5 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   1382e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13831:	3b 45 10             	cmp    0x10(%ebp),%eax
   13834:	7c 1c                	jl     13852 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   13836:	8b 45 0c             	mov    0xc(%ebp),%eax
   13839:	f7 d0                	not    %eax
   1383b:	50                   	push   %eax
   1383c:	ff 75 10             	pushl  0x10(%ebp)
   1383f:	ff 75 f8             	pushl  -0x8(%ebp)
   13842:	ff 75 08             	pushl  0x8(%ebp)
   13845:	e8 41 fe ff ff       	call   1368b <bitmap_set_bit>
   1384a:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1384d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13850:	eb 13                	jmp    13865 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   13852:	8b 45 08             	mov    0x8(%ebp),%eax
   13855:	8b 00                	mov    (%eax),%eax
   13857:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1385a:	0f 8c 6d ff ff ff    	jl     137cd <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   13860:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13865:	c9                   	leave  
   13866:	c3                   	ret    

00013867 <hlt>:
static inline void hlt(void) {
   13867:	55                   	push   %ebp
   13868:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1386a:	f4                   	hlt    
}
   1386b:	90                   	nop
   1386c:	5d                   	pop    %ebp
   1386d:	c3                   	ret    

0001386e <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   1386e:	55                   	push   %ebp
   1386f:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   13871:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13875:	74 3b                	je     138b2 <kstrcpy+0x44>
   13877:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1387b:	74 35                	je     138b2 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   1387d:	eb 17                	jmp    13896 <kstrcpy+0x28>
        *dest++ = *src++;
   1387f:	8b 55 0c             	mov    0xc(%ebp),%edx
   13882:	8d 42 01             	lea    0x1(%edx),%eax
   13885:	89 45 0c             	mov    %eax,0xc(%ebp)
   13888:	8b 45 08             	mov    0x8(%ebp),%eax
   1388b:	8d 48 01             	lea    0x1(%eax),%ecx
   1388e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13891:	0f b6 12             	movzbl (%edx),%edx
   13894:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   13896:	8b 45 08             	mov    0x8(%ebp),%eax
   13899:	0f b6 00             	movzbl (%eax),%eax
   1389c:	84 c0                	test   %al,%al
   1389e:	74 0a                	je     138aa <kstrcpy+0x3c>
   138a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   138a3:	0f b6 00             	movzbl (%eax),%eax
   138a6:	84 c0                	test   %al,%al
   138a8:	75 d5                	jne    1387f <kstrcpy+0x11>
    }
    *dest = '\0';
   138aa:	8b 45 08             	mov    0x8(%ebp),%eax
   138ad:	c6 00 00             	movb   $0x0,(%eax)
   138b0:	eb 01                	jmp    138b3 <kstrcpy+0x45>
        return;
   138b2:	90                   	nop
}
   138b3:	5d                   	pop    %ebp
   138b4:	c3                   	ret    

000138b5 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   138b5:	55                   	push   %ebp
   138b6:	89 e5                	mov    %esp,%ebp
   138b8:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   138bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   138bf:	74 61                	je     13922 <kstrncpy+0x6d>
   138c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   138c5:	74 5b                	je     13922 <kstrncpy+0x6d>
   138c7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   138cb:	74 55                	je     13922 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   138cd:	8b 45 08             	mov    0x8(%ebp),%eax
   138d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   138d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   138d6:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   138d9:	eb 17                	jmp    138f2 <kstrncpy+0x3d>
        *d++ = *s++;
   138db:	8b 55 f8             	mov    -0x8(%ebp),%edx
   138de:	8d 42 01             	lea    0x1(%edx),%eax
   138e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   138e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   138e7:	8d 48 01             	lea    0x1(%eax),%ecx
   138ea:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   138ed:	0f b6 12             	movzbl (%edx),%edx
   138f0:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   138f2:	8b 45 10             	mov    0x10(%ebp),%eax
   138f5:	8d 50 ff             	lea    -0x1(%eax),%edx
   138f8:	89 55 10             	mov    %edx,0x10(%ebp)
   138fb:	85 c0                	test   %eax,%eax
   138fd:	7e 0a                	jle    13909 <kstrncpy+0x54>
   138ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13902:	0f b6 00             	movzbl (%eax),%eax
   13905:	84 c0                	test   %al,%al
   13907:	75 d2                	jne    138db <kstrncpy+0x26>
    }
    if (size == 0) {
   13909:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1390d:	75 0b                	jne    1391a <kstrncpy+0x65>
        *(d - 1) = '\0';
   1390f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13912:	83 e8 01             	sub    $0x1,%eax
   13915:	c6 00 00             	movb   $0x0,(%eax)
   13918:	eb 09                	jmp    13923 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   1391a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1391d:	c6 00 00             	movb   $0x0,(%eax)
   13920:	eb 01                	jmp    13923 <kstrncpy+0x6e>
        return;
   13922:	90                   	nop
    }
}
   13923:	c9                   	leave  
   13924:	c3                   	ret    

00013925 <kstrlen>:


int kstrlen(const char *str) {
   13925:	55                   	push   %ebp
   13926:	89 e5                	mov    %esp,%ebp
   13928:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   1392b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1392f:	75 07                	jne    13938 <kstrlen+0x13>
        return 0;
   13931:	b8 00 00 00 00       	mov    $0x0,%eax
   13936:	eb 26                	jmp    1395e <kstrlen+0x39>
    }

    const char *c = str;
   13938:	8b 45 08             	mov    0x8(%ebp),%eax
   1393b:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   1393e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   13945:	eb 04                	jmp    1394b <kstrlen+0x26>
        len++;
   13947:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   1394b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1394e:	8d 50 01             	lea    0x1(%eax),%edx
   13951:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13954:	0f b6 00             	movzbl (%eax),%eax
   13957:	84 c0                	test   %al,%al
   13959:	75 ec                	jne    13947 <kstrlen+0x22>
    }

    return len;
   1395b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1395e:	c9                   	leave  
   1395f:	c3                   	ret    

00013960 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   13960:	55                   	push   %ebp
   13961:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   13963:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13967:	74 06                	je     1396f <kstrncmp+0xf>
   13969:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1396d:	75 0f                	jne    1397e <kstrncmp+0x1e>
        return -1;
   1396f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13974:	eb 62                	jmp    139d8 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   13976:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1397a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   1397e:	8b 45 08             	mov    0x8(%ebp),%eax
   13981:	0f b6 00             	movzbl (%eax),%eax
   13984:	84 c0                	test   %al,%al
   13986:	74 20                	je     139a8 <kstrncmp+0x48>
   13988:	8b 45 0c             	mov    0xc(%ebp),%eax
   1398b:	0f b6 00             	movzbl (%eax),%eax
   1398e:	84 c0                	test   %al,%al
   13990:	74 16                	je     139a8 <kstrncmp+0x48>
   13992:	8b 45 08             	mov    0x8(%ebp),%eax
   13995:	0f b6 10             	movzbl (%eax),%edx
   13998:	8b 45 0c             	mov    0xc(%ebp),%eax
   1399b:	0f b6 00             	movzbl (%eax),%eax
   1399e:	38 c2                	cmp    %al,%dl
   139a0:	75 06                	jne    139a8 <kstrncmp+0x48>
   139a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   139a6:	75 ce                	jne    13976 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   139a8:	8b 45 08             	mov    0x8(%ebp),%eax
   139ab:	0f b6 00             	movzbl (%eax),%eax
   139ae:	84 c0                	test   %al,%al
   139b0:	74 21                	je     139d3 <kstrncmp+0x73>
   139b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   139b5:	0f b6 00             	movzbl (%eax),%eax
   139b8:	84 c0                	test   %al,%al
   139ba:	74 17                	je     139d3 <kstrncmp+0x73>
   139bc:	8b 45 08             	mov    0x8(%ebp),%eax
   139bf:	0f b6 10             	movzbl (%eax),%edx
   139c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   139c5:	0f b6 00             	movzbl (%eax),%eax
   139c8:	38 c2                	cmp    %al,%dl
   139ca:	74 07                	je     139d3 <kstrncmp+0x73>
   139cc:	b8 01 00 00 00       	mov    $0x1,%eax
   139d1:	eb 05                	jmp    139d8 <kstrncmp+0x78>
   139d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   139d8:	5d                   	pop    %ebp
   139d9:	c3                   	ret    

000139da <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   139da:	55                   	push   %ebp
   139db:	89 e5                	mov    %esp,%ebp
   139dd:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   139e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   139e4:	74 40                	je     13a26 <kmemcpy+0x4c>
   139e6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   139ea:	74 3a                	je     13a26 <kmemcpy+0x4c>
   139ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   139f0:	74 34                	je     13a26 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   139f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   139f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   139f8:	8b 45 08             	mov    0x8(%ebp),%eax
   139fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   139fe:	eb 17                	jmp    13a17 <kmemcpy+0x3d>
        *d++ = *s++;
   13a00:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13a03:	8d 42 01             	lea    0x1(%edx),%eax
   13a06:	89 45 fc             	mov    %eax,-0x4(%ebp)
   13a09:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a0c:	8d 48 01             	lea    0x1(%eax),%ecx
   13a0f:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   13a12:	0f b6 12             	movzbl (%edx),%edx
   13a15:	88 10                	mov    %dl,(%eax)
    while (size--) {
   13a17:	8b 45 10             	mov    0x10(%ebp),%eax
   13a1a:	8d 50 ff             	lea    -0x1(%eax),%edx
   13a1d:	89 55 10             	mov    %edx,0x10(%ebp)
   13a20:	85 c0                	test   %eax,%eax
   13a22:	75 dc                	jne    13a00 <kmemcpy+0x26>
   13a24:	eb 01                	jmp    13a27 <kmemcpy+0x4d>
        return;
   13a26:	90                   	nop
    }
}
   13a27:	c9                   	leave  
   13a28:	c3                   	ret    

00013a29 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   13a29:	55                   	push   %ebp
   13a2a:	89 e5                	mov    %esp,%ebp
   13a2c:	83 ec 14             	sub    $0x14,%esp
   13a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a32:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   13a35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13a39:	74 2c                	je     13a67 <kmemset+0x3e>
   13a3b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13a3f:	74 26                	je     13a67 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   13a41:	8b 45 08             	mov    0x8(%ebp),%eax
   13a44:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   13a47:	eb 0f                	jmp    13a58 <kmemset+0x2f>
        *d++ = v;
   13a49:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a4c:	8d 50 01             	lea    0x1(%eax),%edx
   13a4f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13a52:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13a56:	88 10                	mov    %dl,(%eax)
    while (size--) {
   13a58:	8b 45 10             	mov    0x10(%ebp),%eax
   13a5b:	8d 50 ff             	lea    -0x1(%eax),%edx
   13a5e:	89 55 10             	mov    %edx,0x10(%ebp)
   13a61:	85 c0                	test   %eax,%eax
   13a63:	75 e4                	jne    13a49 <kmemset+0x20>
   13a65:	eb 01                	jmp    13a68 <kmemset+0x3f>
        return;
   13a67:	90                   	nop
    }
}
   13a68:	c9                   	leave  
   13a69:	c3                   	ret    

00013a6a <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   13a6a:	55                   	push   %ebp
   13a6b:	89 e5                	mov    %esp,%ebp
   13a6d:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   13a70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13a74:	74 06                	je     13a7c <kmemcmp+0x12>
   13a76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13a7a:	75 07                	jne    13a83 <kmemcmp+0x19>
        return 1;
   13a7c:	b8 01 00 00 00       	mov    $0x1,%eax
   13a81:	eb 43                	jmp    13ac6 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   13a83:	8b 45 08             	mov    0x8(%ebp),%eax
   13a86:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   13a89:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a8c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   13a8f:	eb 23                	jmp    13ab4 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   13a91:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13a94:	8d 50 01             	lea    0x1(%eax),%edx
   13a97:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13a9a:	0f b6 08             	movzbl (%eax),%ecx
   13a9d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13aa0:	8d 50 01             	lea    0x1(%eax),%edx
   13aa3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13aa6:	0f b6 00             	movzbl (%eax),%eax
   13aa9:	38 c1                	cmp    %al,%cl
   13aab:	74 07                	je     13ab4 <kmemcmp+0x4a>
            return 1;
   13aad:	b8 01 00 00 00       	mov    $0x1,%eax
   13ab2:	eb 12                	jmp    13ac6 <kmemcmp+0x5c>
    while (size--) {
   13ab4:	8b 45 10             	mov    0x10(%ebp),%eax
   13ab7:	8d 50 ff             	lea    -0x1(%eax),%edx
   13aba:	89 55 10             	mov    %edx,0x10(%ebp)
   13abd:	85 c0                	test   %eax,%eax
   13abf:	75 d0                	jne    13a91 <kmemcmp+0x27>
        }
    }

    return 0;
   13ac1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13ac6:	c9                   	leave  
   13ac7:	c3                   	ret    

00013ac8 <kitoa>:


void kitoa(char *buf, int num, int base) {
   13ac8:	55                   	push   %ebp
   13ac9:	89 e5                	mov    %esp,%ebp
   13acb:	53                   	push   %ebx
   13acc:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   13acf:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   13ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ad8:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   13adb:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   13adf:	74 1d                	je     13afe <kitoa+0x36>
   13ae1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   13ae5:	74 17                	je     13afe <kitoa+0x36>
   13ae7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13aeb:	74 11                	je     13afe <kitoa+0x36>
   13aed:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   13af1:	74 0b                	je     13afe <kitoa+0x36>
        *p = '\0';
   13af3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13af6:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13af9:	e9 03 01 00 00       	jmp    13c01 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   13afe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   13b05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b09:	79 19                	jns    13b24 <kitoa+0x5c>
   13b0b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13b0f:	75 13                	jne    13b24 <kitoa+0x5c>
        *p++ = '-';
   13b11:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b14:	8d 50 01             	lea    0x1(%eax),%edx
   13b17:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13b1a:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   13b1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   13b24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13b28:	74 3b                	je     13b65 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   13b2a:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13b30:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b33:	99                   	cltd   
   13b34:	f7 7d 10             	idivl  0x10(%ebp)
   13b37:	89 d0                	mov    %edx,%eax
   13b39:	83 c0 0f             	add    $0xf,%eax
   13b3c:	01 c8                	add    %ecx,%eax
   13b3e:	0f b6 00             	movzbl (%eax),%eax
   13b41:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   13b44:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b47:	8d 50 01             	lea    0x1(%eax),%edx
   13b4a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13b4d:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13b51:	88 10                	mov    %dl,(%eax)
            num /= base;
   13b53:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b56:	99                   	cltd   
   13b57:	f7 7d 10             	idivl  0x10(%ebp)
   13b5a:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   13b5d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b61:	75 c7                	jne    13b2a <kitoa+0x62>
   13b63:	eb 4b                	jmp    13bb0 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   13b65:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b68:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   13b6b:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13b71:	8b 5d 10             	mov    0x10(%ebp),%ebx
   13b74:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13b77:	ba 00 00 00 00       	mov    $0x0,%edx
   13b7c:	f7 f3                	div    %ebx
   13b7e:	89 d0                	mov    %edx,%eax
   13b80:	83 c0 0f             	add    $0xf,%eax
   13b83:	01 c8                	add    %ecx,%eax
   13b85:	0f b6 00             	movzbl (%eax),%eax
   13b88:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   13b8b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b8e:	8d 50 01             	lea    0x1(%eax),%edx
   13b91:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13b94:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   13b98:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   13b9a:	8b 5d 10             	mov    0x10(%ebp),%ebx
   13b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13ba0:	ba 00 00 00 00       	mov    $0x0,%edx
   13ba5:	f7 f3                	div    %ebx
   13ba7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   13baa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13bae:	75 bb                	jne    13b6b <kitoa+0xa3>
    }
    *p-- = '\0';
   13bb0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bb3:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bb6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13bb9:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   13bbc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13bc0:	74 08                	je     13bca <kitoa+0x102>
   13bc2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc5:	83 c0 01             	add    $0x1,%eax
   13bc8:	eb 03                	jmp    13bcd <kitoa+0x105>
   13bca:	8b 45 08             	mov    0x8(%ebp),%eax
   13bcd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   13bd0:	eb 27                	jmp    13bf9 <kitoa+0x131>
        char ch = *start;
   13bd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13bd5:	0f b6 00             	movzbl (%eax),%eax
   13bd8:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   13bdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bde:	0f b6 10             	movzbl (%eax),%edx
   13be1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13be4:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   13be6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13be9:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bec:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13bef:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   13bf3:	88 10                	mov    %dl,(%eax)
        start++;
   13bf5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   13bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13bfc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13bff:	72 d1                	jb     13bd2 <kitoa+0x10a>
    }
}
   13c01:	83 c4 20             	add    $0x20,%esp
   13c04:	5b                   	pop    %ebx
   13c05:	5d                   	pop    %ebp
   13c06:	c3                   	ret    

00013c07 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   13c07:	55                   	push   %ebp
   13c08:	89 e5                	mov    %esp,%ebp
   13c0a:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   13c0d:	8d 45 10             	lea    0x10(%ebp),%eax
   13c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   13c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c16:	83 ec 04             	sub    $0x4,%esp
   13c19:	50                   	push   %eax
   13c1a:	ff 75 0c             	pushl  0xc(%ebp)
   13c1d:	ff 75 08             	pushl  0x8(%ebp)
   13c20:	e8 06 00 00 00       	call   13c2b <kvsprintf>
   13c25:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   13c28:	90                   	nop
   13c29:	c9                   	leave  
   13c2a:	c3                   	ret    

00013c2b <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   13c2b:	55                   	push   %ebp
   13c2c:	89 e5                	mov    %esp,%ebp
   13c2e:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   13c31:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   13c38:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   13c3e:	e9 2f 01 00 00       	jmp    13d72 <kvsprintf+0x147>
        switch (state) {
   13c43:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c46:	85 c0                	test   %eax,%eax
   13c48:	74 0a                	je     13c54 <kvsprintf+0x29>
   13c4a:	83 f8 01             	cmp    $0x1,%eax
   13c4d:	74 2b                	je     13c7a <kvsprintf+0x4f>
   13c4f:	e9 1e 01 00 00       	jmp    13d72 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   13c54:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   13c58:	75 0c                	jne    13c66 <kvsprintf+0x3b>
                state = READ_FMT;
   13c5a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   13c61:	e9 0c 01 00 00       	jmp    13d72 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   13c66:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c69:	8d 50 01             	lea    0x1(%eax),%edx
   13c6c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13c6f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   13c73:	88 10                	mov    %dl,(%eax)
            }
            break;
   13c75:	e9 f8 00 00 00       	jmp    13d72 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   13c7a:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   13c7e:	75 31                	jne    13cb1 <kvsprintf+0x86>
                int num = va_arg(args, int);
   13c80:	8b 45 10             	mov    0x10(%ebp),%eax
   13c83:	8d 50 04             	lea    0x4(%eax),%edx
   13c86:	89 55 10             	mov    %edx,0x10(%ebp)
   13c89:	8b 00                	mov    (%eax),%eax
   13c8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   13c8e:	6a 0a                	push   $0xa
   13c90:	ff 75 e4             	pushl  -0x1c(%ebp)
   13c93:	ff 75 f8             	pushl  -0x8(%ebp)
   13c96:	e8 2d fe ff ff       	call   13ac8 <kitoa>
   13c9b:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   13c9e:	ff 75 f8             	pushl  -0x8(%ebp)
   13ca1:	e8 7f fc ff ff       	call   13925 <kstrlen>
   13ca6:	83 c4 04             	add    $0x4,%esp
   13ca9:	01 45 f8             	add    %eax,-0x8(%ebp)
   13cac:	e9 b9 00 00 00       	jmp    13d6a <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   13cb1:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   13cb5:	75 46                	jne    13cfd <kvsprintf+0xd2>
                *curr++ = '0';
   13cb7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13cba:	8d 50 01             	lea    0x1(%eax),%edx
   13cbd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13cc0:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   13cc3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13cc6:	8d 50 01             	lea    0x1(%eax),%edx
   13cc9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13ccc:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   13ccf:	8b 45 10             	mov    0x10(%ebp),%eax
   13cd2:	8d 50 04             	lea    0x4(%eax),%edx
   13cd5:	89 55 10             	mov    %edx,0x10(%ebp)
   13cd8:	8b 00                	mov    (%eax),%eax
   13cda:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   13cdd:	6a 10                	push   $0x10
   13cdf:	ff 75 e8             	pushl  -0x18(%ebp)
   13ce2:	ff 75 f8             	pushl  -0x8(%ebp)
   13ce5:	e8 de fd ff ff       	call   13ac8 <kitoa>
   13cea:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   13ced:	ff 75 f8             	pushl  -0x8(%ebp)
   13cf0:	e8 30 fc ff ff       	call   13925 <kstrlen>
   13cf5:	83 c4 04             	add    $0x4,%esp
   13cf8:	01 45 f8             	add    %eax,-0x8(%ebp)
   13cfb:	eb 6d                	jmp    13d6a <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   13cfd:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   13d01:	75 1f                	jne    13d22 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   13d03:	8b 45 10             	mov    0x10(%ebp),%eax
   13d06:	8d 50 04             	lea    0x4(%eax),%edx
   13d09:	89 55 10             	mov    %edx,0x10(%ebp)
   13d0c:	8b 00                	mov    (%eax),%eax
   13d0e:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   13d11:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13d14:	8d 50 01             	lea    0x1(%eax),%edx
   13d17:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13d1a:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   13d1e:	88 10                	mov    %dl,(%eax)
   13d20:	eb 48                	jmp    13d6a <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   13d22:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   13d26:	75 42                	jne    13d6a <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   13d28:	8b 45 10             	mov    0x10(%ebp),%eax
   13d2b:	8d 50 04             	lea    0x4(%eax),%edx
   13d2e:	89 55 10             	mov    %edx,0x10(%ebp)
   13d31:	8b 00                	mov    (%eax),%eax
   13d33:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   13d36:	ff 75 f4             	pushl  -0xc(%ebp)
   13d39:	e8 e7 fb ff ff       	call   13925 <kstrlen>
   13d3e:	83 c4 04             	add    $0x4,%esp
   13d41:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   13d44:	eb 17                	jmp    13d5d <kvsprintf+0x132>
                    *curr++ = *str++;
   13d46:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13d49:	8d 42 01             	lea    0x1(%edx),%eax
   13d4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13d4f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13d52:	8d 48 01             	lea    0x1(%eax),%ecx
   13d55:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   13d58:	0f b6 12             	movzbl (%edx),%edx
   13d5b:	88 10                	mov    %dl,(%eax)
                while (len--) {
   13d5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d60:	8d 50 ff             	lea    -0x1(%eax),%edx
   13d63:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13d66:	85 c0                	test   %eax,%eax
   13d68:	75 dc                	jne    13d46 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   13d6a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   13d71:	90                   	nop
    while ((ch = *fmt++)) {
   13d72:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d75:	8d 50 01             	lea    0x1(%eax),%edx
   13d78:	89 55 0c             	mov    %edx,0xc(%ebp)
   13d7b:	0f b6 00             	movzbl (%eax),%eax
   13d7e:	88 45 ef             	mov    %al,-0x11(%ebp)
   13d81:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   13d85:	0f 85 b8 fe ff ff    	jne    13c43 <kvsprintf+0x18>
        }
    }
}
   13d8b:	90                   	nop
   13d8c:	c9                   	leave  
   13d8d:	c3                   	ret    

00013d8e <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   13d8e:	55                   	push   %ebp
   13d8f:	89 e5                	mov    %esp,%ebp
   13d91:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   13d94:	83 ec 08             	sub    $0x8,%esp
   13d97:	ff 75 14             	pushl  0x14(%ebp)
   13d9a:	68 78 4c 01 00       	push   $0x14c78
   13d9f:	e8 67 03 00 00       	call   1410b <log_printf>
   13da4:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   13da7:	ff 75 10             	pushl  0x10(%ebp)
   13daa:	ff 75 0c             	pushl  0xc(%ebp)
   13dad:	ff 75 08             	pushl  0x8(%ebp)
   13db0:	68 8a 4c 01 00       	push   $0x14c8a
   13db5:	e8 51 03 00 00       	call   1410b <log_printf>
   13dba:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   13dbd:	e8 a5 fa ff ff       	call   13867 <hlt>
   13dc2:	eb f9                	jmp    13dbd <pannic+0x2f>

00013dc4 <strings_count>:
    }
}


// 计算 char** argv中有多少个字符串
int strings_count(char** start) {
   13dc4:	55                   	push   %ebp
   13dc5:	89 e5                	mov    %esp,%ebp
   13dc7:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   13dca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   13dd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13dd5:	74 15                	je     13dec <strings_count+0x28>
        while (*start++) {
   13dd7:	eb 04                	jmp    13ddd <strings_count+0x19>
            count++;
   13dd9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   13ddd:	8b 45 08             	mov    0x8(%ebp),%eax
   13de0:	8d 50 04             	lea    0x4(%eax),%edx
   13de3:	89 55 08             	mov    %edx,0x8(%ebp)
   13de6:	8b 00                	mov    (%eax),%eax
   13de8:	85 c0                	test   %eax,%eax
   13dea:	75 ed                	jne    13dd9 <strings_count+0x15>
        }
    }

    return count;
   13dec:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13def:	c9                   	leave  
   13df0:	c3                   	ret    

00013df1 <get_file_name>:


// 获取路径中文件名
char* get_file_name(const char* name) {
   13df1:	55                   	push   %ebp
   13df2:	89 e5                	mov    %esp,%ebp
   13df4:	83 ec 10             	sub    $0x10,%esp
    char* s = name;
   13df7:	8b 45 08             	mov    0x8(%ebp),%eax
   13dfa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // 定位到结束符
    while (*s != '\0') {
   13dfd:	eb 04                	jmp    13e03 <get_file_name+0x12>
        s++;
   13dff:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   13e03:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e06:	0f b6 00             	movzbl (%eax),%eax
   13e09:	84 c0                	test   %al,%al
   13e0b:	75 f2                	jne    13dff <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   13e0d:	eb 04                	jmp    13e13 <get_file_name+0x22>
        s--;
   13e0f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   13e13:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e16:	0f b6 00             	movzbl (%eax),%eax
   13e19:	3c 5c                	cmp    $0x5c,%al
   13e1b:	74 12                	je     13e2f <get_file_name+0x3e>
   13e1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e20:	0f b6 00             	movzbl (%eax),%eax
   13e23:	3c 2f                	cmp    $0x2f,%al
   13e25:	74 08                	je     13e2f <get_file_name+0x3e>
   13e27:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e2a:	3b 45 08             	cmp    0x8(%ebp),%eax
   13e2d:	73 e0                	jae    13e0f <get_file_name+0x1e>
    }
    return s + 1;
   13e2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e32:	83 c0 01             	add    $0x1,%eax
   13e35:	c9                   	leave  
   13e36:	c3                   	ret    

00013e37 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   13e37:	55                   	push   %ebp
   13e38:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   13e3a:	8b 45 08             	mov    0x8(%ebp),%eax
   13e3d:	8b 40 08             	mov    0x8(%eax),%eax
   13e40:	85 c0                	test   %eax,%eax
   13e42:	0f 94 c0             	sete   %al
   13e45:	0f b6 c0             	movzbl %al,%eax
}
   13e48:	5d                   	pop    %ebp
   13e49:	c3                   	ret    

00013e4a <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   13e4a:	55                   	push   %ebp
   13e4b:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   13e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   13e56:	8b 45 08             	mov    0x8(%ebp),%eax
   13e59:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   13e60:	8b 45 08             	mov    0x8(%ebp),%eax
   13e63:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13e6a:	90                   	nop
   13e6b:	5d                   	pop    %ebp
   13e6c:	c3                   	ret    

00013e6d <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   13e6d:	55                   	push   %ebp
   13e6e:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   13e70:	8b 45 08             	mov    0x8(%ebp),%eax
   13e73:	8b 10                	mov    (%eax),%edx
   13e75:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e78:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   13e7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e7e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   13e84:	ff 75 08             	pushl  0x8(%ebp)
   13e87:	e8 ab ff ff ff       	call   13e37 <list_is_empty>
   13e8c:	83 c4 04             	add    $0x4,%esp
   13e8f:	85 c0                	test   %eax,%eax
   13e91:	74 15                	je     13ea8 <list_insert_front+0x3b>
        list->last = list->first = node;
   13e93:	8b 45 08             	mov    0x8(%ebp),%eax
   13e96:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e99:	89 10                	mov    %edx,(%eax)
   13e9b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e9e:	8b 10                	mov    (%eax),%edx
   13ea0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ea3:	89 50 04             	mov    %edx,0x4(%eax)
   13ea6:	eb 12                	jmp    13eba <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   13ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   13eab:	8b 00                	mov    (%eax),%eax
   13ead:	8b 55 0c             	mov    0xc(%ebp),%edx
   13eb0:	89 10                	mov    %edx,(%eax)
        list->first = node;
   13eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   13eb5:	8b 55 0c             	mov    0xc(%ebp),%edx
   13eb8:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   13eba:	8b 45 08             	mov    0x8(%ebp),%eax
   13ebd:	8b 40 08             	mov    0x8(%eax),%eax
   13ec0:	8d 50 01             	lea    0x1(%eax),%edx
   13ec3:	8b 45 08             	mov    0x8(%ebp),%eax
   13ec6:	89 50 08             	mov    %edx,0x8(%eax)
}
   13ec9:	90                   	nop
   13eca:	c9                   	leave  
   13ecb:	c3                   	ret    

00013ecc <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   13ecc:	55                   	push   %ebp
   13ecd:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   13ecf:	8b 45 08             	mov    0x8(%ebp),%eax
   13ed2:	8b 50 04             	mov    0x4(%eax),%edx
   13ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ed8:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   13eda:	8b 45 0c             	mov    0xc(%ebp),%eax
   13edd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   13ee4:	ff 75 08             	pushl  0x8(%ebp)
   13ee7:	e8 4b ff ff ff       	call   13e37 <list_is_empty>
   13eec:	83 c4 04             	add    $0x4,%esp
   13eef:	85 c0                	test   %eax,%eax
   13ef1:	74 15                	je     13f08 <list_insert_back+0x3c>
        list->last = list->first = node;
   13ef3:	8b 45 08             	mov    0x8(%ebp),%eax
   13ef6:	8b 55 0c             	mov    0xc(%ebp),%edx
   13ef9:	89 10                	mov    %edx,(%eax)
   13efb:	8b 45 08             	mov    0x8(%ebp),%eax
   13efe:	8b 10                	mov    (%eax),%edx
   13f00:	8b 45 08             	mov    0x8(%ebp),%eax
   13f03:	89 50 04             	mov    %edx,0x4(%eax)
   13f06:	eb 15                	jmp    13f1d <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   13f08:	8b 45 08             	mov    0x8(%ebp),%eax
   13f0b:	8b 40 04             	mov    0x4(%eax),%eax
   13f0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f11:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   13f14:	8b 45 08             	mov    0x8(%ebp),%eax
   13f17:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f1a:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   13f1d:	8b 45 08             	mov    0x8(%ebp),%eax
   13f20:	8b 40 08             	mov    0x8(%eax),%eax
   13f23:	8d 50 01             	lea    0x1(%eax),%edx
   13f26:	8b 45 08             	mov    0x8(%ebp),%eax
   13f29:	89 50 08             	mov    %edx,0x8(%eax)
}
   13f2c:	90                   	nop
   13f2d:	c9                   	leave  
   13f2e:	c3                   	ret    

00013f2f <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   13f2f:	55                   	push   %ebp
   13f30:	89 e5                	mov    %esp,%ebp
   13f32:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   13f35:	ff 75 08             	pushl  0x8(%ebp)
   13f38:	e8 fa fe ff ff       	call   13e37 <list_is_empty>
   13f3d:	83 c4 04             	add    $0x4,%esp
   13f40:	85 c0                	test   %eax,%eax
   13f42:	74 07                	je     13f4b <list_remove_front+0x1c>
        return (list_node_t*)0;
   13f44:	b8 00 00 00 00       	mov    $0x0,%eax
   13f49:	eb 5b                	jmp    13fa6 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   13f4b:	8b 45 08             	mov    0x8(%ebp),%eax
   13f4e:	8b 00                	mov    (%eax),%eax
   13f50:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   13f53:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f56:	8b 50 04             	mov    0x4(%eax),%edx
   13f59:	8b 45 08             	mov    0x8(%ebp),%eax
   13f5c:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   13f5e:	8b 45 08             	mov    0x8(%ebp),%eax
   13f61:	8b 00                	mov    (%eax),%eax
   13f63:	85 c0                	test   %eax,%eax
   13f65:	75 0c                	jne    13f73 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   13f67:	8b 45 08             	mov    0x8(%ebp),%eax
   13f6a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13f71:	eb 0c                	jmp    13f7f <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   13f73:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f76:	8b 40 04             	mov    0x4(%eax),%eax
   13f79:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   13f7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f82:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13f89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f8c:	8b 50 04             	mov    0x4(%eax),%edx
   13f8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f92:	89 10                	mov    %edx,(%eax)
    list->count--;
   13f94:	8b 45 08             	mov    0x8(%ebp),%eax
   13f97:	8b 40 08             	mov    0x8(%eax),%eax
   13f9a:	8d 50 ff             	lea    -0x1(%eax),%edx
   13f9d:	8b 45 08             	mov    0x8(%ebp),%eax
   13fa0:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   13fa3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13fa6:	c9                   	leave  
   13fa7:	c3                   	ret    

00013fa8 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   13fa8:	55                   	push   %ebp
   13fa9:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   13fab:	8b 45 08             	mov    0x8(%ebp),%eax
   13fae:	8b 00                	mov    (%eax),%eax
   13fb0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13fb3:	75 0b                	jne    13fc0 <list_remove+0x18>
        list->first = node->next;
   13fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fb8:	8b 50 04             	mov    0x4(%eax),%edx
   13fbb:	8b 45 08             	mov    0x8(%ebp),%eax
   13fbe:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   13fc0:	8b 45 08             	mov    0x8(%ebp),%eax
   13fc3:	8b 40 04             	mov    0x4(%eax),%eax
   13fc6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13fc9:	75 0b                	jne    13fd6 <list_remove+0x2e>
        list->last = node->pre;
   13fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fce:	8b 10                	mov    (%eax),%edx
   13fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   13fd3:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   13fd6:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fd9:	8b 00                	mov    (%eax),%eax
   13fdb:	85 c0                	test   %eax,%eax
   13fdd:	74 0e                	je     13fed <list_remove+0x45>
        node->pre->next = node->next;
   13fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
   13fe2:	8b 00                	mov    (%eax),%eax
   13fe4:	8b 55 0c             	mov    0xc(%ebp),%edx
   13fe7:	8b 52 04             	mov    0x4(%edx),%edx
   13fea:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   13fed:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ff0:	8b 40 04             	mov    0x4(%eax),%eax
   13ff3:	85 c0                	test   %eax,%eax
   13ff5:	74 0d                	je     14004 <list_remove+0x5c>
        node->next->pre = node->pre;
   13ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ffa:	8b 40 04             	mov    0x4(%eax),%eax
   13ffd:	8b 55 0c             	mov    0xc(%ebp),%edx
   14000:	8b 12                	mov    (%edx),%edx
   14002:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   14004:	8b 45 0c             	mov    0xc(%ebp),%eax
   14007:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1400e:	8b 45 0c             	mov    0xc(%ebp),%eax
   14011:	8b 50 04             	mov    0x4(%eax),%edx
   14014:	8b 45 0c             	mov    0xc(%ebp),%eax
   14017:	89 10                	mov    %edx,(%eax)
    --list->count;
   14019:	8b 45 08             	mov    0x8(%ebp),%eax
   1401c:	8b 40 08             	mov    0x8(%eax),%eax
   1401f:	8d 50 ff             	lea    -0x1(%eax),%edx
   14022:	8b 45 08             	mov    0x8(%ebp),%eax
   14025:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   14028:	8b 45 0c             	mov    0xc(%ebp),%eax
   1402b:	5d                   	pop    %ebp
   1402c:	c3                   	ret    

0001402d <inb>:
static inline uint8_t inb(uint16_t port) {
   1402d:	55                   	push   %ebp
   1402e:	89 e5                	mov    %esp,%ebp
   14030:	83 ec 14             	sub    $0x14,%esp
   14033:	8b 45 08             	mov    0x8(%ebp),%eax
   14036:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1403a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1403e:	89 c2                	mov    %eax,%edx
   14040:	ec                   	in     (%dx),%al
   14041:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   14044:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14048:	c9                   	leave  
   14049:	c3                   	ret    

0001404a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1404a:	55                   	push   %ebp
   1404b:	89 e5                	mov    %esp,%ebp
   1404d:	83 ec 08             	sub    $0x8,%esp
   14050:	8b 55 08             	mov    0x8(%ebp),%edx
   14053:	8b 45 0c             	mov    0xc(%ebp),%eax
   14056:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1405a:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1405d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14061:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14065:	ee                   	out    %al,(%dx)
}
   14066:	90                   	nop
   14067:	c9                   	leave  
   14068:	c3                   	ret    

00014069 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   14069:	55                   	push   %ebp
   1406a:	89 e5                	mov    %esp,%ebp
   1406c:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   1406f:	83 ec 08             	sub    $0x8,%esp
   14072:	68 c8 4c 01 00       	push   $0x14cc8
   14077:	68 00 0f 04 00       	push   $0x40f00
   1407c:	e8 ce f2 ff ff       	call   1334f <mutex_init>
   14081:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   14084:	83 ec 08             	sub    $0x8,%esp
   14087:	6a 00                	push   $0x0
   14089:	68 f9 03 00 00       	push   $0x3f9
   1408e:	e8 b7 ff ff ff       	call   1404a <outb>
   14093:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   14096:	83 ec 08             	sub    $0x8,%esp
   14099:	68 80 00 00 00       	push   $0x80
   1409e:	68 fb 03 00 00       	push   $0x3fb
   140a3:	e8 a2 ff ff ff       	call   1404a <outb>
   140a8:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   140ab:	83 ec 08             	sub    $0x8,%esp
   140ae:	6a 03                	push   $0x3
   140b0:	68 f8 03 00 00       	push   $0x3f8
   140b5:	e8 90 ff ff ff       	call   1404a <outb>
   140ba:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   140bd:	83 ec 08             	sub    $0x8,%esp
   140c0:	6a 00                	push   $0x0
   140c2:	68 f9 03 00 00       	push   $0x3f9
   140c7:	e8 7e ff ff ff       	call   1404a <outb>
   140cc:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   140cf:	83 ec 08             	sub    $0x8,%esp
   140d2:	6a 03                	push   $0x3
   140d4:	68 fb 03 00 00       	push   $0x3fb
   140d9:	e8 6c ff ff ff       	call   1404a <outb>
   140de:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   140e1:	83 ec 08             	sub    $0x8,%esp
   140e4:	68 c7 00 00 00       	push   $0xc7
   140e9:	68 fa 03 00 00       	push   $0x3fa
   140ee:	e8 57 ff ff ff       	call   1404a <outb>
   140f3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   140f6:	83 ec 08             	sub    $0x8,%esp
   140f9:	6a 0f                	push   $0xf
   140fb:	68 fc 03 00 00       	push   $0x3fc
   14100:	e8 45 ff ff ff       	call   1404a <outb>
   14105:	83 c4 10             	add    $0x10,%esp
}
   14108:	90                   	nop
   14109:	c9                   	leave  
   1410a:	c3                   	ret    

0001410b <log_printf>:


void log_printf(const char* fmt, ...) {
   1410b:	55                   	push   %ebp
   1410c:	89 e5                	mov    %esp,%ebp
   1410e:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   14114:	83 ec 04             	sub    $0x4,%esp
   14117:	68 80 00 00 00       	push   $0x80
   1411c:	6a 00                	push   $0x0
   1411e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14124:	50                   	push   %eax
   14125:	e8 ff f8 ff ff       	call   13a29 <kmemset>
   1412a:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   1412d:	8d 45 0c             	lea    0xc(%ebp),%eax
   14130:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   14136:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1413c:	83 ec 04             	sub    $0x4,%esp
   1413f:	50                   	push   %eax
   14140:	ff 75 08             	pushl  0x8(%ebp)
   14143:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14149:	50                   	push   %eax
   1414a:	e8 dc fa ff ff       	call   13c2b <kvsprintf>
   1414f:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   14152:	83 ec 0c             	sub    $0xc,%esp
   14155:	68 00 0f 04 00       	push   $0x40f00
   1415a:	e8 31 f2 ff ff       	call   13390 <mutex_acquire>
   1415f:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   14162:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14168:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   1416b:	eb 3b                	jmp    141a8 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   1416d:	90                   	nop
   1416e:	83 ec 0c             	sub    $0xc,%esp
   14171:	68 fd 03 00 00       	push   $0x3fd
   14176:	e8 b2 fe ff ff       	call   1402d <inb>
   1417b:	83 c4 10             	add    $0x10,%esp
   1417e:	0f b6 c0             	movzbl %al,%eax
   14181:	83 e0 40             	and    $0x40,%eax
   14184:	85 c0                	test   %eax,%eax
   14186:	74 e6                	je     1416e <log_printf+0x63>
        outb(COM1_PORT, *p++);
   14188:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1418b:	8d 50 01             	lea    0x1(%eax),%edx
   1418e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14191:	0f b6 00             	movzbl (%eax),%eax
   14194:	0f b6 c0             	movzbl %al,%eax
   14197:	83 ec 08             	sub    $0x8,%esp
   1419a:	50                   	push   %eax
   1419b:	68 f8 03 00 00       	push   $0x3f8
   141a0:	e8 a5 fe ff ff       	call   1404a <outb>
   141a5:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   141a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   141ab:	0f b6 00             	movzbl (%eax),%eax
   141ae:	84 c0                	test   %al,%al
   141b0:	75 bb                	jne    1416d <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   141b2:	83 ec 08             	sub    $0x8,%esp
   141b5:	6a 0d                	push   $0xd
   141b7:	68 f8 03 00 00       	push   $0x3f8
   141bc:	e8 89 fe ff ff       	call   1404a <outb>
   141c1:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   141c4:	83 ec 08             	sub    $0x8,%esp
   141c7:	6a 0a                	push   $0xa
   141c9:	68 f8 03 00 00       	push   $0x3f8
   141ce:	e8 77 fe ff ff       	call   1404a <outb>
   141d3:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   141d6:	83 ec 0c             	sub    $0xc,%esp
   141d9:	68 00 0f 04 00       	push   $0x40f00
   141de:	e8 3b f2 ff ff       	call   1341e <mutex_release>
   141e3:	83 c4 10             	add    $0x10,%esp
   141e6:	90                   	nop
   141e7:	c9                   	leave  
   141e8:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	# mov %ax, %ss
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

8000000b:	e9 01 01 00 00       	jmp    80000111 <first_task_main>

80000010 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
 
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <syscall>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
        return;
80000083:	90                   	nop
}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:


static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return syscall(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <syscall>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:


static inline void print_msg(char* fmt, int arg) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
800000a7:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <syscall>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <fork>:


static inline int fork(void) {
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800000cf:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)

    return syscall(&args);
800000d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000d9:	50                   	push   %eax
800000da:	e8 31 ff ff ff       	call   80000010 <syscall>
800000df:	83 c4 04             	add    $0x4,%esp
}
800000e2:	c9                   	leave  
800000e3:	c3                   	ret    

800000e4 <execve>:


static inline int execve(const char* name, char* const* argv, char* const* env) {
800000e4:	55                   	push   %ebp
800000e5:	89 e5                	mov    %esp,%ebp
800000e7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800000ea:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    args.arg0 = (int)name;
800000f1:	8b 45 08             	mov    0x8(%ebp),%eax
800000f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800000f7:	8b 45 0c             	mov    0xc(%ebp),%eax
800000fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800000fd:	8b 45 10             	mov    0x10(%ebp),%eax
80000100:	89 45 f8             	mov    %eax,-0x8(%ebp)

    return syscall(&args);
80000103:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000106:	50                   	push   %eax
80000107:	e8 04 ff ff ff       	call   80000010 <syscall>
8000010c:	83 c4 04             	add    $0x4,%esp
}
8000010f:	c9                   	leave  
80000110:	c3                   	ret    

80000111 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void) {
80000111:	55                   	push   %ebp
80000112:	89 e5                	mov    %esp,%ebp
80000114:	83 ec 20             	sub    $0x20,%esp
    int count = 3;
80000117:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%ebp)

    int pid = getpid();
8000011e:	e8 63 ff ff ff       	call   80000086 <getpid>
80000123:	89 45 f8             	mov    %eax,-0x8(%ebp)
    print_msg("first task id=%d", pid);
80000126:	ff 75 f8             	pushl  -0x8(%ebp)
80000129:	68 2a 02 00 80       	push   $0x8000022a
8000012e:	e8 6e ff ff ff       	call   800000a1 <print_msg>
80000133:	83 c4 08             	add    $0x8,%esp
    
    pid = fork();
80000136:	e8 8e ff ff ff       	call   800000c9 <fork>
8000013b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (pid < 0) {
8000013e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
80000142:	79 11                	jns    80000155 <first_task_main+0x44>
        print_msg("create child proc failed.", 0);
80000144:	6a 00                	push   $0x0
80000146:	68 3b 02 00 80       	push   $0x8000023b
8000014b:	e8 51 ff ff ff       	call   800000a1 <print_msg>
80000150:	83 c4 08             	add    $0x8,%esp
80000153:	eb 6f                	jmp    800001c4 <first_task_main+0xb3>
    } else if (pid == 0) {
80000155:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
80000159:	75 45                	jne    800001a0 <first_task_main+0x8f>
        count += 10;
8000015b:	83 45 fc 0a          	addl   $0xa,-0x4(%ebp)
        print_msg("child: %d", count);
8000015f:	ff 75 fc             	pushl  -0x4(%ebp)
80000162:	68 55 02 00 80       	push   $0x80000255
80000167:	e8 35 ff ff ff       	call   800000a1 <print_msg>
8000016c:	83 c4 08             	add    $0x8,%esp

        char* argv[] = { "arg0", "arg1", "arg2", "arg3" };
8000016f:	c7 45 e8 5f 02 00 80 	movl   $0x8000025f,-0x18(%ebp)
80000176:	c7 45 ec 64 02 00 80 	movl   $0x80000264,-0x14(%ebp)
8000017d:	c7 45 f0 69 02 00 80 	movl   $0x80000269,-0x10(%ebp)
80000184:	c7 45 f4 6e 02 00 80 	movl   $0x8000026e,-0xc(%ebp)
        execve("/shell.elf", argv, (char**)0);
8000018b:	6a 00                	push   $0x0
8000018d:	8d 45 e8             	lea    -0x18(%ebp),%eax
80000190:	50                   	push   %eax
80000191:	68 73 02 00 80       	push   $0x80000273
80000196:	e8 49 ff ff ff       	call   800000e4 <execve>
8000019b:	83 c4 0c             	add    $0xc,%esp
8000019e:	eb 24                	jmp    800001c4 <first_task_main+0xb3>
    } else {
        count += 1;
800001a0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        print_msg("child task id=%d", pid);
800001a4:	ff 75 f8             	pushl  -0x8(%ebp)
800001a7:	68 7e 02 00 80       	push   $0x8000027e
800001ac:	e8 f0 fe ff ff       	call   800000a1 <print_msg>
800001b1:	83 c4 08             	add    $0x8,%esp
        print_msg("parent: %d", count);
800001b4:	ff 75 fc             	pushl  -0x4(%ebp)
800001b7:	68 8f 02 00 80       	push   $0x8000028f
800001bc:	e8 e0 fe ff ff       	call   800000a1 <print_msg>
800001c1:	83 c4 08             	add    $0x8,%esp
    }

    while (1) {
        // log_printf("first task.");
        if (pid < 0) {
800001c4:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
800001c8:	79 11                	jns    800001db <first_task_main+0xca>
            print_msg("create child proc failed.", 0);
800001ca:	6a 00                	push   $0x0
800001cc:	68 3b 02 00 80       	push   $0x8000023b
800001d1:	e8 cb fe ff ff       	call   800000a1 <print_msg>
800001d6:	83 c4 08             	add    $0x8,%esp
800001d9:	eb 40                	jmp    8000021b <first_task_main+0x10a>
        } else if (pid == 0) {
800001db:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
800001df:	75 16                	jne    800001f7 <first_task_main+0xe6>
            count += 10;
800001e1:	83 45 fc 0a          	addl   $0xa,-0x4(%ebp)
            print_msg("child: %d", count);
800001e5:	ff 75 fc             	pushl  -0x4(%ebp)
800001e8:	68 55 02 00 80       	push   $0x80000255
800001ed:	e8 af fe ff ff       	call   800000a1 <print_msg>
800001f2:	83 c4 08             	add    $0x8,%esp
800001f5:	eb 24                	jmp    8000021b <first_task_main+0x10a>
        } else {
            count += 1;
800001f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            print_msg("child task id=%d", pid);
800001fb:	ff 75 f8             	pushl  -0x8(%ebp)
800001fe:	68 7e 02 00 80       	push   $0x8000027e
80000203:	e8 99 fe ff ff       	call   800000a1 <print_msg>
80000208:	83 c4 08             	add    $0x8,%esp
            print_msg("parent: %d", count);
8000020b:	ff 75 fc             	pushl  -0x4(%ebp)
8000020e:	68 8f 02 00 80       	push   $0x8000028f
80000213:	e8 89 fe ff ff       	call   800000a1 <print_msg>
80000218:	83 c4 08             	add    $0x8,%esp
        }

        // print_msg("pid = %d", pid);
        msleep(1000);
8000021b:	68 e8 03 00 00       	push   $0x3e8
80000220:	e8 37 fe ff ff       	call   8000005c <msleep>
80000225:	83 c4 04             	add    $0x4,%esp
        if (pid < 0) {
80000228:	eb 9a                	jmp    800001c4 <first_task_main+0xb3>
8000022a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000230:	74 61                	je     80000293 <first_task_main+0x182>
80000232:	73 6b                	jae    8000029f <first_task_main+0x18e>
80000234:	20 69 64             	and    %ch,0x64(%ecx)
80000237:	3d 25 64 00 63       	cmp    $0x63006425,%eax
8000023c:	72 65                	jb     800002a3 <first_task_main+0x192>
8000023e:	61                   	popa   
8000023f:	74 65                	je     800002a6 <first_task_main+0x195>
80000241:	20 63 68             	and    %ah,0x68(%ebx)
80000244:	69 6c 64 20 70 72 6f 	imul   $0x636f7270,0x20(%esp,%eiz,2),%ebp
8000024b:	63 
8000024c:	20 66 61             	and    %ah,0x61(%esi)
8000024f:	69 6c 65 64 2e 00 63 	imul   $0x6863002e,0x64(%ebp,%eiz,2),%ebp
80000256:	68 
80000257:	69 6c 64 3a 20 25 64 	imul   $0x642520,0x3a(%esp,%eiz,2),%ebp
8000025e:	00 
8000025f:	61                   	popa   
80000260:	72 67                	jb     800002c9 <first_task_main+0x1b8>
80000262:	30 00                	xor    %al,(%eax)
80000264:	61                   	popa   
80000265:	72 67                	jb     800002ce <first_task_main+0x1bd>
80000267:	31 00                	xor    %eax,(%eax)
80000269:	61                   	popa   
8000026a:	72 67                	jb     800002d3 <first_task_main+0x1c2>
8000026c:	32 00                	xor    (%eax),%al
8000026e:	61                   	popa   
8000026f:	72 67                	jb     800002d8 <first_task_main+0x1c7>
80000271:	33 00                	xor    (%eax),%eax
80000273:	2f                   	das    
80000274:	73 68                	jae    800002de <first_task_main+0x1cd>
80000276:	65 6c                	gs insb (%dx),%es:(%edi)
80000278:	6c                   	insb   (%dx),%es:(%edi)
80000279:	2e 65 6c             	cs gs insb (%dx),%es:(%edi)
8000027c:	66 00 63 68          	data16 add %ah,0x68(%ebx)
80000280:	69 6c 64 20 74 61 73 	imul   $0x6b736174,0x20(%esp,%eiz,2),%ebp
80000287:	6b 
80000288:	20 69 64             	and    %ch,0x64(%ecx)
8000028b:	3d 25 64 00 70       	cmp    $0x70006425,%eax
80000290:	61                   	popa   
80000291:	72 65                	jb     800002f8 <first_task_main+0x1e7>
80000293:	6e                   	outsb  %ds:(%esi),(%dx)
80000294:	74 3a                	je     800002d0 <first_task_main+0x1bf>
80000296:	20                   	.byte 0x20
80000297:	25                   	.byte 0x25
80000298:	64                   	fs
	...
