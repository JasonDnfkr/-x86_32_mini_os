
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003088 memsz 0x00003088 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000034 memsz 0x00007f80 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a7d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000608  00012a80  00012a80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000034  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00006f80  00015000  00015000  00005034  2**12
                  ALLOC
  4 .debug_line   00001b90  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000040fe  00000000  00000000  00006bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010cc  00000000  00000000  0000acc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  0000bd90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000010cc  00000000  00000000  0000bf30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000cffc  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000011f8  00000000  00000000  0000d010  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012a80 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010368 l     F .text	00000058 addr_alloc_init
000103c0 l     F .text	00000067 addr_alloc_page
00010427 l     F .text	00000062 addr_free_page
00010489 l     F .text	00000066 show_mem_info
000104ef l     F .text	0000003c total_mem_size
0001052b l     F .text	0000009a test_alloc
00012b54 l     O .rodata	00000012 __func__.2196
00014000 l     O .data	00000030 kernel_map.2208
00012b68 l     O .rodata	0000000c __func__.2229
00000000 l    df *ABS*	00000000 task.c
00010890 l     F .text	00000019 list_node_init
000108a9 l     F .text	0000000b list_node_next
000108b4 l     F .text	0000000b list_size
000108bf l     F .text	0000000a list_first
000108c9 l     F .text	00000017 write_tr
00017000 l     O .bss	00000190 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
000108e0 l     F .text	00000101 tss_init
00012bf8 l     O .rodata	0000000a __func__.2117
00010af0 l     F .text	00000005 idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010e8b l     F .text	00000028 lgdt
00010eb3 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
000110ab l     F .text	0000001d inb
000110c8 l     F .text	0000001f outb
000110e7 l     F .text	00000007 cli
000110ee l     F .text	00000007 sti
000110f5 l     F .text	00000028 lidt
0001111d l     F .text	00000007 hlt
00011124 l     F .text	00000010 read_eflags
00011134 l     F .text	0000000b write_eflags
000189c0 l     O .bss	00000400 idt_table
0001113f l     F .text	000000ca dump_core_regs
00011209 l     F .text	0000003e do_default_handler
00011493 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011897 l     F .text	0000001f outb
00018dc0 l     O .bss	00000004 sys_tick
000118de l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011956 l     F .text	0000000b list_size
00011961 l     F .text	0000000a list_first
0001196b l     F .text	0000000b list_last
0001302c l     O .rodata	0000000c __func__.2182
00018de0 l     O .bss	000000b4 init_task
00018ea0 l     O .bss	00001000 init_task_stack
00019ea0 l     O .bss	000000b4 first_task
00019f54 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011c68 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00011dea l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012173 l     F .text	00000007 hlt
00014030 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
000126d0 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000128c6 l     F .text	0000001d inb
000128e3 l     F .text	0000001f outb
00019f64 l     O .bss	00000014 mutex
00011477 g     F .text	0000001c do_handler_control_protection_exception
0001206b g     F .text	0000003a bitmap_get_bit
00010c44 g     F .text	0000000a task_current
0001127f g     F .text	0000001c do_handler_debug_exception
0001145b g     F .text	0000001c do_handler_virtualization_exception
00011838 g     F .text	0000000b irq_enable_global
0001137b g     F .text	0000001c do_handler_segment_not_present
00010ba2 g     F .text	00000034 task_set_ready
000121c1 g     F .text	00000070 kstrncpy
000120a5 g     F .text	0000001b bitmap_is_set
00011a13 g     F .text	0000019c link_test
0001129b g     F .text	0000001c do_handler_nmi_interrupt
00011004 g     F .text	0000001e cpu_init
00012902 g     F .text	0000009d log_init
00011baf g     F .text	000000b9 init_main
00012335 g     F .text	00000041 kmemset
00014000 g       .data	00000000 s_data
0001171b g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00012231 g     F .text	0000003b kstrlen
000112d3 g     F .text	0000001c do_handler_overflow
00010675 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
000113b3 g     F .text	0000001c do_handler_general_protection
00011f05 g     F .text	00000029 sem_count
000112ef g     F .text	0000001c do_handler_bound_range_exceed
00011f97 g     F .text	000000d4 bitmap_set_bit
00011343 g     F .text	0000001c do_handler_double_fault
000119ca g     F .text	00000049 init_task_entry
000113cf g     F .text	0000001c do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011843 g     F .text	0000002b pic_send_eoi
00010b98 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00011e18 g     F .text	0000006b sem_wait
000118b6 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
00012706 g     F .text	0000005f list_insert_front
00019f80 g     O .bss	00002000 stack
00010e34 g     F .text	00000057 sys_sleep
00012537 g     F .text	00000163 kvsprintf
00011e83 g     F .text	00000082 sem_notify
0001130b g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
0001193e g     F .text	00000018 timer_init
00010b5b g     F .text	0000003d task_first_init
00011423 g     F .text	0000001c do_handler_machine_check
00011327 g     F .text	0000001c do_handler_device_not_found
00010e14 g     F .text	00000020 task_set_wakeup
00012765 g     F .text	00000063 list_insert_back
0001182d g     F .text	0000000b irq_disable_global
00010c4e g     F .text	00000061 sys_sched_yield
0001bf80 g       .bss	00000000 mem_free_start
00011976 g     F .text	00000054 kernel_init
00011df5 g     F .text	00000023 sem_init
00012513 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00010bd6 g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
000123d4 g     F .text	0000013f kitoa
0001217a g     F .text	00000047 kstrcpy
0001226c g     F .text	0000007a kstrncmp
00011407 g     F .text	0000001c do_handler_aligment_check
00012376 g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
0001135f g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00010de3 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
000116e6 g     F .text	00000035 irq_install
00010f97 g     F .text	0000006d init_gdt
0001186e g     F .text	00000018 irq_enter_protection
00011c73 g     F .text	0000002e mutex_init
000117a6 g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
00011263 g     F .text	0000001c do_handler_divide_error
00011f2e g     F .text	00000016 bitmap_byte_count
00010caf g     F .text	0000005b task_dispatch
00010c01 g     F .text	00000043 task_next_run
000106fc g     F .text	000000b0 create_kernel_table
000126e3 g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
00011247 g     F .text	0000001c do_handler_unknown
00010ad2 g     F .text	0000001e task_switch_from_to
00011526 g     F .text	000001c0 irq_init
00011886 g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00010ecd g     F .text	00000083 segment_desc_set
00013088 g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
00011f44 g     F .text	00000053 bitmap_init
0001143f g     F .text	0000001c do_handler_simd_floating_point_exception
000122e6 g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
000120c0 g     F .text	000000b3 bitmap_alloc_nbits
00010af5 g     F .text	00000066 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010d0a g     F .text	000000d9 task_time_tick
000107ac g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
0001269a g     F .text	00000036 pannic
00011397 g     F .text	0000001c do_handler_stack_segment_fault
000112b7 g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
000113eb g     F .text	0000001c do_handler_floating_point_error
0001299f g     F .text	000000de log_printf
000109e1 g     F .text	000000f1 task_init
000127c8 g     F .text	00000079 list_remove_front
00011036 g     F .text	00000075 gdt_alloc_desc
00011d2d g     F .text	000000bd mutex_release
00012841 g     F .text	00000085 list_remove
00011022 g     F .text	00000014 swtch_to_tss
00010f50 g     F .text	00000047 gate_desc_set
00011ca1 g     F .text	0000008c mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105c5 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 6a 19 00 00       	call   11976 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 0，所以会直接跳转到 gdt_reload 地址处
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 80 bf 01 00       	mov    $0x1bf80,%esp
    jmp init_main
   10026:	e9 84 1b 00 00       	jmp    11baf <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 0b 12 00 00       	call   11247 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 08 12 00 00       	call   11263 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 05 12 00 00       	call   1127f <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 02 12 00 00       	call   1129b <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 ff 11 00 00       	call   112b7 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 fc 11 00 00       	call   112d3 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 f9 11 00 00       	call   112ef <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 f6 11 00 00       	call   1130b <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 f3 11 00 00       	call   11327 <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 f2 11 00 00       	call   11343 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 f1 11 00 00       	call   1135f <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 f0 11 00 00       	call   1137b <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 ed 11 00 00       	call   11397 <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 ec 11 00 00       	call   113b3 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 eb 11 00 00       	call   113cf <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 e8 11 00 00       	call   113eb <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 e7 11 00 00       	call   11407 <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 e4 11 00 00       	call   11423 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 e1 11 00 00       	call   1143f <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 de 11 00 00       	call   1145b <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 dd 11 00 00       	call   11477 <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 fd 15 00 00       	call   118b6 <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <mmu_set_page_dir>:
 */
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}

static inline void mmu_set_page_dir(uint32_t paddr) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1035a:	ff 75 08             	pushl  0x8(%ebp)
   1035d:	e8 9e ff ff ff       	call   10300 <write_cr3>
   10362:	83 c4 04             	add    $0x4,%esp
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	83 ec 0c             	sub    $0xc,%esp
   10374:	50                   	push   %eax
   10375:	e8 f9 18 00 00       	call   11c73 <mutex_init>
   1037a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1037d:	8b 45 08             	mov    0x8(%ebp),%eax
   10380:	8b 55 10             	mov    0x10(%ebp),%edx
   10383:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	8b 55 14             	mov    0x14(%ebp),%edx
   1038c:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	8b 55 18             	mov    0x18(%ebp),%edx
   10395:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	8b 40 20             	mov    0x20(%eax),%eax
   1039e:	ba 00 00 00 00       	mov    $0x0,%edx
   103a3:	f7 75 18             	divl   0x18(%ebp)
   103a6:	89 c2                	mov    %eax,%edx
   103a8:	8b 45 08             	mov    0x8(%ebp),%eax
   103ab:	83 c0 14             	add    $0x14,%eax
   103ae:	6a 00                	push   $0x0
   103b0:	52                   	push   %edx
   103b1:	ff 75 0c             	pushl  0xc(%ebp)
   103b4:	50                   	push   %eax
   103b5:	e8 8a 1b 00 00       	call   11f44 <bitmap_init>
   103ba:	83 c4 10             	add    $0x10,%esp
}
   103bd:	90                   	nop
   103be:	c9                   	leave  
   103bf:	c3                   	ret    

000103c0 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103cd:	8b 45 08             	mov    0x8(%ebp),%eax
   103d0:	83 ec 0c             	sub    $0xc,%esp
   103d3:	50                   	push   %eax
   103d4:	e8 c8 18 00 00       	call   11ca1 <mutex_acquire>
   103d9:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	83 c0 14             	add    $0x14,%eax
   103e2:	83 ec 04             	sub    $0x4,%esp
   103e5:	ff 75 0c             	pushl  0xc(%ebp)
   103e8:	6a 00                	push   $0x0
   103ea:	50                   	push   %eax
   103eb:	e8 d0 1c 00 00       	call   120c0 <bitmap_alloc_nbits>
   103f0:	83 c4 10             	add    $0x10,%esp
   103f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103fa:	78 17                	js     10413 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   103fc:	8b 45 08             	mov    0x8(%ebp),%eax
   103ff:	8b 50 1c             	mov    0x1c(%eax),%edx
   10402:	8b 45 08             	mov    0x8(%ebp),%eax
   10405:	8b 48 24             	mov    0x24(%eax),%ecx
   10408:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1040b:	0f af c1             	imul   %ecx,%eax
   1040e:	01 d0                	add    %edx,%eax
   10410:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	83 ec 0c             	sub    $0xc,%esp
   10419:	50                   	push   %eax
   1041a:	e8 0e 19 00 00       	call   11d2d <mutex_release>
   1041f:	83 c4 10             	add    $0x10,%esp

    return addr;
   10422:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10425:	c9                   	leave  
   10426:	c3                   	ret    

00010427 <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10427:	55                   	push   %ebp
   10428:	89 e5                	mov    %esp,%ebp
   1042a:	53                   	push   %ebx
   1042b:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	83 ec 0c             	sub    $0xc,%esp
   10434:	50                   	push   %eax
   10435:	e8 67 18 00 00       	call   11ca1 <mutex_acquire>
   1043a:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1043d:	8b 45 08             	mov    0x8(%ebp),%eax
   10440:	8b 40 1c             	mov    0x1c(%eax),%eax
   10443:	8b 55 0c             	mov    0xc(%ebp),%edx
   10446:	89 d1                	mov    %edx,%ecx
   10448:	29 c1                	sub    %eax,%ecx
   1044a:	8b 45 08             	mov    0x8(%ebp),%eax
   1044d:	8b 58 24             	mov    0x24(%eax),%ebx
   10450:	89 c8                	mov    %ecx,%eax
   10452:	ba 00 00 00 00       	mov    $0x0,%edx
   10457:	f7 f3                	div    %ebx
   10459:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   1045c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1045f:	8b 55 08             	mov    0x8(%ebp),%edx
   10462:	83 c2 14             	add    $0x14,%edx
   10465:	6a 00                	push   $0x0
   10467:	ff 75 10             	pushl  0x10(%ebp)
   1046a:	50                   	push   %eax
   1046b:	52                   	push   %edx
   1046c:	e8 26 1b 00 00       	call   11f97 <bitmap_set_bit>
   10471:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	83 ec 0c             	sub    $0xc,%esp
   1047a:	50                   	push   %eax
   1047b:	e8 ad 18 00 00       	call   11d2d <mutex_release>
   10480:	83 c4 10             	add    $0x10,%esp
}
   10483:	90                   	nop
   10484:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10487:	c9                   	leave  
   10488:	c3                   	ret    

00010489 <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   10489:	55                   	push   %ebp
   1048a:	89 e5                	mov    %esp,%ebp
   1048c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1048f:	83 ec 0c             	sub    $0xc,%esp
   10492:	68 80 2a 01 00       	push   $0x12a80
   10497:	e8 03 25 00 00       	call   1299f <log_printf>
   1049c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1049f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104a6:	eb 29                	jmp    104d1 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104a8:	8b 45 08             	mov    0x8(%ebp),%eax
   104ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104ae:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b2:	8b 45 08             	mov    0x8(%ebp),%eax
   104b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104b8:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104bb:	52                   	push   %edx
   104bc:	50                   	push   %eax
   104bd:	ff 75 f4             	pushl  -0xc(%ebp)
   104c0:	68 8c 2a 01 00       	push   $0x12a8c
   104c5:	e8 d5 24 00 00       	call   1299f <log_printf>
   104ca:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d1:	8b 45 08             	mov    0x8(%ebp),%eax
   104d4:	8b 40 50             	mov    0x50(%eax),%eax
   104d7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104da:	7c cc                	jl     104a8 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104dc:	83 ec 0c             	sub    $0xc,%esp
   104df:	68 9a 2a 01 00       	push   $0x12a9a
   104e4:	e8 b6 24 00 00       	call   1299f <log_printf>
   104e9:	83 c4 10             	add    $0x10,%esp
}
   104ec:	90                   	nop
   104ed:	c9                   	leave  
   104ee:	c3                   	ret    

000104ef <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   104ef:	55                   	push   %ebp
   104f0:	89 e5                	mov    %esp,%ebp
   104f2:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10503:	eb 16                	jmp    1051b <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10505:	8b 45 08             	mov    0x8(%ebp),%eax
   10508:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1050b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1050f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10512:	01 d0                	add    %edx,%eax
   10514:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10517:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1051b:	8b 45 08             	mov    0x8(%ebp),%eax
   1051e:	8b 40 50             	mov    0x50(%eax),%eax
   10521:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10524:	7c df                	jl     10505 <total_mem_size+0x16>
    }
    return mem_size;
   10526:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10529:	c9                   	leave  
   1052a:	c3                   	ret    

0001052b <test_alloc>:


static void test_alloc(void) {
   1052b:	55                   	push   %ebp
   1052c:	89 e5                	mov    %esp,%ebp
   1052e:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10531:	83 ec 0c             	sub    $0xc,%esp
   10534:	68 00 10 00 00       	push   $0x1000
   10539:	68 00 00 04 00       	push   $0x40000
   1053e:	68 00 10 00 00       	push   $0x1000
   10543:	8d 45 b8             	lea    -0x48(%ebp),%eax
   10546:	50                   	push   %eax
   10547:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1054a:	50                   	push   %eax
   1054b:	e8 18 fe ff ff       	call   10368 <addr_alloc_init>
   10550:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   10553:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1055a:	eb 2b                	jmp    10587 <test_alloc+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   1055c:	83 ec 08             	sub    $0x8,%esp
   1055f:	6a 02                	push   $0x2
   10561:	8d 45 c0             	lea    -0x40(%ebp),%eax
   10564:	50                   	push   %eax
   10565:	e8 56 fe ff ff       	call   103c0 <addr_alloc_page>
   1056a:	83 c4 10             	add    $0x10,%esp
   1056d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   10570:	83 ec 08             	sub    $0x8,%esp
   10573:	ff 75 e8             	pushl  -0x18(%ebp)
   10576:	68 9c 2a 01 00       	push   $0x12a9c
   1057b:	e8 1f 24 00 00       	call   1299f <log_printf>
   10580:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10583:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10587:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   1058b:	7e cf                	jle    1055c <test_alloc+0x31>
    }
    uint32_t addr = 0x1000;
   1058d:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   10594:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1059b:	eb 1f                	jmp    105bc <test_alloc+0x91>
        addr += 4096 * 2;
   1059d:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105a4:	83 ec 04             	sub    $0x4,%esp
   105a7:	6a 02                	push   $0x2
   105a9:	ff 75 f0             	pushl  -0x10(%ebp)
   105ac:	8d 45 c0             	lea    -0x40(%ebp),%eax
   105af:	50                   	push   %eax
   105b0:	e8 72 fe ff ff       	call   10427 <addr_free_page>
   105b5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105b8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105bc:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105c0:	7e db                	jle    1059d <test_alloc+0x72>
    }
}
   105c2:	90                   	nop
   105c3:	c9                   	leave  
   105c4:	c3                   	ret    

000105c5 <find_pte>:

// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105c5:	55                   	push   %ebp
   105c6:	89 e5                	mov    %esp,%ebp
   105c8:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105cb:	ff 75 0c             	pushl  0xc(%ebp)
   105ce:	e8 39 fd ff ff       	call   1030c <pde_index>
   105d3:	83 c4 04             	add    $0x4,%esp
   105d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105dd:	8b 45 08             	mov    0x8(%ebp),%eax
   105e0:	01 d0                	add    %edx,%eax
   105e2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   105e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105e8:	0f b6 00             	movzbl (%eax),%eax
   105eb:	83 e0 01             	and    $0x1,%eax
   105ee:	84 c0                	test   %al,%al
   105f0:	74 10                	je     10602 <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   105f2:	ff 75 f0             	pushl  -0x10(%ebp)
   105f5:	e8 26 fd ff ff       	call   10320 <pde_paddr>
   105fa:	83 c4 04             	add    $0x4,%esp
   105fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10600:	eb 57                	jmp    10659 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   10602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10606:	75 07                	jne    1060f <find_pte+0x4a>
            return (pte_t*)0;
   10608:	b8 00 00 00 00       	mov    $0x0,%eax
   1060d:	eb 64                	jmp    10673 <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1060f:	83 ec 08             	sub    $0x8,%esp
   10612:	6a 01                	push   $0x1
   10614:	68 00 50 01 00       	push   $0x15000
   10619:	e8 a2 fd ff ff       	call   103c0 <addr_alloc_page>
   1061e:	83 c4 10             	add    $0x10,%esp
   10621:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   10624:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10628:	75 07                	jne    10631 <find_pte+0x6c>
            return (pte_t*)0;
   1062a:	b8 00 00 00 00       	mov    $0x0,%eax
   1062f:	eb 42                	jmp    10673 <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10631:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10634:	83 c8 07             	or     $0x7,%eax
   10637:	89 c2                	mov    %eax,%edx
   10639:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1063c:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   1063e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10641:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   10644:	83 ec 04             	sub    $0x4,%esp
   10647:	68 00 10 00 00       	push   $0x1000
   1064c:	6a 00                	push   $0x0
   1064e:	ff 75 f4             	pushl  -0xc(%ebp)
   10651:	e8 df 1c 00 00       	call   12335 <kmemset>
   10656:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   10659:	83 ec 0c             	sub    $0xc,%esp
   1065c:	ff 75 0c             	pushl  0xc(%ebp)
   1065f:	e8 e3 fc ff ff       	call   10347 <pte_index>
   10664:	83 c4 10             	add    $0x10,%esp
   10667:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1066e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10671:	01 d0                	add    %edx,%eax
}
   10673:	c9                   	leave  
   10674:	c3                   	ret    

00010675 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   10675:	55                   	push   %ebp
   10676:	89 e5                	mov    %esp,%ebp
   10678:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   1067b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10682:	eb 6e                	jmp    106f2 <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   10684:	83 ec 04             	sub    $0x4,%esp
   10687:	6a 01                	push   $0x1
   10689:	ff 75 0c             	pushl  0xc(%ebp)
   1068c:	ff 75 08             	pushl  0x8(%ebp)
   1068f:	e8 31 ff ff ff       	call   105c5 <find_pte>
   10694:	83 c4 10             	add    $0x10,%esp
   10697:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   1069a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1069e:	75 07                	jne    106a7 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106a5:	eb 53                	jmp    106fa <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106aa:	0f b6 00             	movzbl (%eax),%eax
   106ad:	83 e0 01             	and    $0x1,%eax
   106b0:	84 c0                	test   %al,%al
   106b2:	74 1c                	je     106d0 <memory_create_map+0x5b>
   106b4:	68 ac 2a 01 00       	push   $0x12aac
   106b9:	68 54 2b 01 00       	push   $0x12b54
   106be:	68 a1 00 00 00       	push   $0xa1
   106c3:	68 c0 2a 01 00       	push   $0x12ac0
   106c8:	e8 cd 1f 00 00       	call   1269a <pannic>
   106cd:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   106d0:	8b 45 10             	mov    0x10(%ebp),%eax
   106d3:	0b 45 18             	or     0x18(%ebp),%eax
   106d6:	83 c8 01             	or     $0x1,%eax
   106d9:	89 c2                	mov    %eax,%edx
   106db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106de:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106e0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106e7:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106ee:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106f5:	3b 45 14             	cmp    0x14(%ebp),%eax
   106f8:	7c 8a                	jl     10684 <memory_create_map+0xf>
    }
}
   106fa:	c9                   	leave  
   106fb:	c3                   	ret    

000106fc <create_kernel_table>:


void create_kernel_table(void) {
   106fc:	55                   	push   %ebp
   106fd:	89 e5                	mov    %esp,%ebp
   106ff:	83 ec 28             	sub    $0x28,%esp
        { s_text,        e_text,                         s_text,         0 },         // 内核代码区
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
    };

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10702:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10709:	e9 8f 00 00 00       	jmp    1079d <create_kernel_table+0xa1>
        memory_map_t * map = kernel_map + i;
   1070e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10711:	c1 e0 04             	shl    $0x4,%eax
   10714:	05 00 40 01 00       	add    $0x14000,%eax
   10719:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1071c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1071f:	8b 00                	mov    (%eax),%eax
   10721:	68 00 10 00 00       	push   $0x1000
   10726:	50                   	push   %eax
   10727:	e8 c7 fb ff ff       	call   102f3 <down2>
   1072c:	83 c4 08             	add    $0x8,%esp
   1072f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10732:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10735:	8b 40 04             	mov    0x4(%eax),%eax
   10738:	68 00 10 00 00       	push   $0x1000
   1073d:	50                   	push   %eax
   1073e:	e8 99 fb ff ff       	call   102dc <up2>
   10743:	83 c4 08             	add    $0x8,%esp
   10746:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10749:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074c:	8b 40 08             	mov    0x8(%eax),%eax
   1074f:	68 00 10 00 00       	push   $0x1000
   10754:	50                   	push   %eax
   10755:	e8 99 fb ff ff       	call   102f3 <down2>
   1075a:	83 c4 08             	add    $0x8,%esp
   1075d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   10760:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10763:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10766:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1076c:	85 c0                	test   %eax,%eax
   1076e:	0f 48 c2             	cmovs  %edx,%eax
   10771:	c1 f8 0c             	sar    $0xc,%eax
   10774:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   10777:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1077a:	8b 48 0c             	mov    0xc(%eax),%ecx
   1077d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10780:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10783:	83 ec 0c             	sub    $0xc,%esp
   10786:	51                   	push   %ecx
   10787:	ff 75 e0             	pushl  -0x20(%ebp)
   1078a:	52                   	push   %edx
   1078b:	50                   	push   %eax
   1078c:	68 00 60 01 00       	push   $0x16000
   10791:	e8 df fe ff ff       	call   10675 <memory_create_map>
   10796:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10799:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1079d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a0:	83 f8 02             	cmp    $0x2,%eax
   107a3:	0f 86 65 ff ff ff    	jbe    1070e <create_kernel_table+0x12>
    }
}
   107a9:	90                   	nop
   107aa:	c9                   	leave  
   107ab:	c3                   	ret    

000107ac <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   107ac:	55                   	push   %ebp
   107ad:	89 e5                	mov    %esp,%ebp
   107af:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   107b2:	83 ec 0c             	sub    $0xc,%esp
   107b5:	68 07 2b 01 00       	push   $0x12b07
   107ba:	e8 e0 21 00 00       	call   1299f <log_printf>
   107bf:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   107c2:	83 ec 0c             	sub    $0xc,%esp
   107c5:	ff 75 08             	pushl  0x8(%ebp)
   107c8:	e8 bc fc ff ff       	call   10489 <show_mem_info>
   107cd:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;   // 2022年-10-1 经同学反馈，发现这里有点bug，改了下
   107d0:	c7 45 f4 80 bf 01 00 	movl   $0x1bf80,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   107d7:	83 ec 0c             	sub    $0xc,%esp
   107da:	ff 75 08             	pushl  0x8(%ebp)
   107dd:	e8 0d fd ff ff       	call   104ef <total_mem_size>
   107e2:	83 c4 10             	add    $0x10,%esp
   107e5:	2d 00 00 10 00       	sub    $0x100000,%eax
   107ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   107ed:	83 ec 08             	sub    $0x8,%esp
   107f0:	68 00 10 00 00       	push   $0x1000
   107f5:	ff 75 f0             	pushl  -0x10(%ebp)
   107f8:	e8 f6 fa ff ff       	call   102f3 <down2>
   107fd:	83 c4 10             	add    $0x10,%esp
   10800:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   10803:	83 ec 04             	sub    $0x4,%esp
   10806:	ff 75 f0             	pushl  -0x10(%ebp)
   10809:	68 00 00 10 00       	push   $0x100000
   1080e:	68 11 2b 01 00       	push   $0x12b11
   10813:	e8 87 21 00 00       	call   1299f <log_printf>
   10818:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   1081b:	83 ec 0c             	sub    $0xc,%esp
   1081e:	68 00 10 00 00       	push   $0x1000
   10823:	ff 75 f0             	pushl  -0x10(%ebp)
   10826:	68 00 00 10 00       	push   $0x100000
   1082b:	ff 75 f4             	pushl  -0xc(%ebp)
   1082e:	68 00 50 01 00       	push   $0x15000
   10833:	e8 30 fb ff ff       	call   10368 <addr_alloc_init>
   10838:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   1083b:	a1 20 50 01 00       	mov    0x15020,%eax
   10840:	c1 e8 0c             	shr    $0xc,%eax
   10843:	83 ec 0c             	sub    $0xc,%esp
   10846:	50                   	push   %eax
   10847:	e8 e2 16 00 00       	call   11f2e <bitmap_byte_count>
   1084c:	83 c4 10             	add    $0x10,%esp
   1084f:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10852:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10859:	76 1c                	jbe    10877 <memory_init+0xcb>
   1085b:	68 2c 2b 01 00       	push   $0x12b2c
   10860:	68 68 2b 01 00       	push   $0x12b68
   10865:	68 e2 00 00 00       	push   $0xe2
   1086a:	68 c0 2a 01 00       	push   $0x12ac0
   1086f:	e8 26 1e 00 00       	call   1269a <pannic>
   10874:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10877:	e8 80 fe ff ff       	call   106fc <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1087c:	b8 00 60 01 00       	mov    $0x16000,%eax
   10881:	83 ec 0c             	sub    $0xc,%esp
   10884:	50                   	push   %eax
   10885:	e8 cd fa ff ff       	call   10357 <mmu_set_page_dir>
   1088a:	83 c4 10             	add    $0x10,%esp
}
   1088d:	90                   	nop
   1088e:	c9                   	leave  
   1088f:	c3                   	ret    

00010890 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10890:	55                   	push   %ebp
   10891:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10893:	8b 45 08             	mov    0x8(%ebp),%eax
   10896:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   1089c:	8b 45 08             	mov    0x8(%ebp),%eax
   1089f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   108a6:	90                   	nop
   108a7:	5d                   	pop    %ebp
   108a8:	c3                   	ret    

000108a9 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   108a9:	55                   	push   %ebp
   108aa:	89 e5                	mov    %esp,%ebp
    return node->next;
   108ac:	8b 45 08             	mov    0x8(%ebp),%eax
   108af:	8b 40 04             	mov    0x4(%eax),%eax
}
   108b2:	5d                   	pop    %ebp
   108b3:	c3                   	ret    

000108b4 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   108b4:	55                   	push   %ebp
   108b5:	89 e5                	mov    %esp,%ebp
    return list->count;
   108b7:	8b 45 08             	mov    0x8(%ebp),%eax
   108ba:	8b 40 08             	mov    0x8(%eax),%eax
}
   108bd:	5d                   	pop    %ebp
   108be:	c3                   	ret    

000108bf <list_first>:

static inline list_node_t* list_first(list_t* list) {
   108bf:	55                   	push   %ebp
   108c0:	89 e5                	mov    %esp,%ebp
    return list->first;
   108c2:	8b 45 08             	mov    0x8(%ebp),%eax
   108c5:	8b 00                	mov    (%eax),%eax
}
   108c7:	5d                   	pop    %ebp
   108c8:	c3                   	ret    

000108c9 <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   108c9:	55                   	push   %ebp
   108ca:	89 e5                	mov    %esp,%ebp
   108cc:	83 ec 04             	sub    $0x4,%esp
   108cf:	8b 45 08             	mov    0x8(%ebp),%eax
   108d2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   108d6:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   108da:	0f 00 d8             	ltr    %ax
}
   108dd:	90                   	nop
   108de:	c9                   	leave  
   108df:	c3                   	ret    

000108e0 <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   108e0:	55                   	push   %ebp
   108e1:	89 e5                	mov    %esp,%ebp
   108e3:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   108e6:	e8 4b 07 00 00       	call   11036 <gdt_alloc_desc>
   108eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   108ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   108f2:	79 1a                	jns    1090e <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   108f4:	83 ec 0c             	sub    $0xc,%esp
   108f7:	68 74 2b 01 00       	push   $0x12b74
   108fc:	e8 9e 20 00 00       	call   1299f <log_printf>
   10901:	83 c4 10             	add    $0x10,%esp
        return -1;
   10904:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10909:	e9 d1 00 00 00       	jmp    109df <tss_init+0xff>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   1090e:	8b 45 08             	mov    0x8(%ebp),%eax
   10911:	83 c0 48             	add    $0x48,%eax
   10914:	68 89 00 00 00       	push   $0x89
   10919:	6a 68                	push   $0x68
   1091b:	50                   	push   %eax
   1091c:	ff 75 f4             	pushl  -0xc(%ebp)
   1091f:	e8 a9 05 00 00       	call   10ecd <segment_desc_set>
   10924:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10927:	8b 45 08             	mov    0x8(%ebp),%eax
   1092a:	83 c0 48             	add    $0x48,%eax
   1092d:	83 ec 04             	sub    $0x4,%esp
   10930:	6a 68                	push   $0x68
   10932:	6a 00                	push   $0x0
   10934:	50                   	push   %eax
   10935:	e8 fb 19 00 00       	call   12335 <kmemset>
   1093a:	83 c4 10             	add    $0x10,%esp
    task->tss.eip    = entry;
   1093d:	8b 45 08             	mov    0x8(%ebp),%eax
   10940:	8b 55 0c             	mov    0xc(%ebp),%edx
   10943:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10946:	8b 45 08             	mov    0x8(%ebp),%eax
   10949:	8b 55 10             	mov    0x10(%ebp),%edx
   1094c:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   10952:	8b 45 08             	mov    0x8(%ebp),%eax
   10955:	8b 55 10             	mov    0x10(%ebp),%edx
   10958:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1095b:	8b 45 08             	mov    0x8(%ebp),%eax
   1095e:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10965:	8b 45 08             	mov    0x8(%ebp),%eax
   10968:	8b 50 50             	mov    0x50(%eax),%edx
   1096b:	8b 45 08             	mov    0x8(%ebp),%eax
   1096e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10974:	8b 45 08             	mov    0x8(%ebp),%eax
   10977:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   1097e:	00 00 00 
   10981:	8b 45 08             	mov    0x8(%ebp),%eax
   10984:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   1098a:	8b 45 08             	mov    0x8(%ebp),%eax
   1098d:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10993:	8b 45 08             	mov    0x8(%ebp),%eax
   10996:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   1099c:	8b 45 08             	mov    0x8(%ebp),%eax
   1099f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   109a5:	8b 45 08             	mov    0x8(%ebp),%eax
   109a8:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   109ae:	8b 45 08             	mov    0x8(%ebp),%eax
   109b1:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = KERNEL_SELECTOR_CS;
   109b7:	8b 45 08             	mov    0x8(%ebp),%eax
   109ba:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   109c1:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   109c4:	8b 45 08             	mov    0x8(%ebp),%eax
   109c7:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    task->tss_sel    = tss_sel;
   109ce:	8b 45 08             	mov    0x8(%ebp),%eax
   109d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   109d4:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   109da:	b8 00 00 00 00       	mov    $0x0,%eax
}
   109df:	c9                   	leave  
   109e0:	c3                   	ret    

000109e1 <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   109e1:	55                   	push   %ebp
   109e2:	89 e5                	mov    %esp,%ebp
   109e4:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   109e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   109eb:	75 19                	jne    10a06 <task_init+0x25>
   109ed:	68 86 2b 01 00       	push   $0x12b86
   109f2:	68 f8 2b 01 00       	push   $0x12bf8
   109f7:	6a 28                	push   $0x28
   109f9:	68 9c 2b 01 00       	push   $0x12b9c
   109fe:	e8 97 1c 00 00       	call   1269a <pannic>
   10a03:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   10a06:	83 ec 04             	sub    $0x4,%esp
   10a09:	ff 75 14             	pushl  0x14(%ebp)
   10a0c:	ff 75 10             	pushl  0x10(%ebp)
   10a0f:	ff 75 08             	pushl  0x8(%ebp)
   10a12:	e8 c9 fe ff ff       	call   108e0 <tss_init>
   10a17:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10a1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1d:	83 c0 04             	add    $0x4,%eax
   10a20:	83 ec 04             	sub    $0x4,%esp
   10a23:	6a 20                	push   $0x20
   10a25:	ff 75 0c             	pushl  0xc(%ebp)
   10a28:	50                   	push   %eax
   10a29:	e8 93 17 00 00       	call   121c1 <kstrncpy>
   10a2e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10a31:	8b 45 08             	mov    0x8(%ebp),%eax
   10a34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3d:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10a44:	8b 45 08             	mov    0x8(%ebp),%eax
   10a47:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10a4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a51:	8b 50 40             	mov    0x40(%eax),%edx
   10a54:	8b 45 08             	mov    0x8(%ebp),%eax
   10a57:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10a5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5d:	83 c0 2c             	add    $0x2c,%eax
   10a60:	83 ec 0c             	sub    $0xc,%esp
   10a63:	50                   	push   %eax
   10a64:	e8 27 fe ff ff       	call   10890 <list_node_init>
   10a69:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6f:	83 c0 24             	add    $0x24,%eax
   10a72:	83 ec 0c             	sub    $0xc,%esp
   10a75:	50                   	push   %eax
   10a76:	e8 15 fe ff ff       	call   10890 <list_node_init>
   10a7b:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a81:	83 c0 34             	add    $0x34,%eax
   10a84:	83 ec 0c             	sub    $0xc,%esp
   10a87:	50                   	push   %eax
   10a88:	e8 03 fe ff ff       	call   10890 <list_node_init>
   10a8d:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10a90:	e8 d9 0d 00 00       	call   1186e <irq_enter_protection>
   10a95:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10a98:	83 ec 0c             	sub    $0xc,%esp
   10a9b:	ff 75 08             	pushl  0x8(%ebp)
   10a9e:	e8 ff 00 00 00       	call   10ba2 <task_set_ready>
   10aa3:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa9:	83 c0 2c             	add    $0x2c,%eax
   10aac:	83 ec 08             	sub    $0x8,%esp
   10aaf:	50                   	push   %eax
   10ab0:	68 10 70 01 00       	push   $0x17010
   10ab5:	e8 ab 1c 00 00       	call   12765 <list_insert_back>
   10aba:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10abd:	83 ec 0c             	sub    $0xc,%esp
   10ac0:	ff 75 f4             	pushl  -0xc(%ebp)
   10ac3:	e8 be 0d 00 00       	call   11886 <irq_leave_protection>
   10ac8:	83 c4 10             	add    $0x10,%esp

    return 0;
   10acb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ad0:	c9                   	leave  
   10ad1:	c3                   	ret    

00010ad2 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10ad2:	55                   	push   %ebp
   10ad3:	89 e5                	mov    %esp,%ebp
   10ad5:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10ad8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10adb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10ae1:	83 ec 0c             	sub    $0xc,%esp
   10ae4:	50                   	push   %eax
   10ae5:	e8 38 05 00 00       	call   11022 <swtch_to_tss>
   10aea:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10aed:	90                   	nop
   10aee:	c9                   	leave  
   10aef:	c3                   	ret    

00010af0 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10af0:	55                   	push   %ebp
   10af1:	89 e5                	mov    %esp,%ebp
    while (1) {
   10af3:	eb fe                	jmp    10af3 <idle_task_entry+0x3>

00010af5 <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10af5:	55                   	push   %ebp
   10af6:	89 e5                	mov    %esp,%ebp
   10af8:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10afb:	83 ec 0c             	sub    $0xc,%esp
   10afe:	68 04 70 01 00       	push   $0x17004
   10b03:	e8 db 1b 00 00       	call   126e3 <list_init>
   10b08:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10b0b:	83 ec 0c             	sub    $0xc,%esp
   10b0e:	68 10 70 01 00       	push   $0x17010
   10b13:	e8 cb 1b 00 00       	call   126e3 <list_init>
   10b18:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10b1b:	83 ec 0c             	sub    $0xc,%esp
   10b1e:	68 1c 70 01 00       	push   $0x1701c
   10b23:	e8 bb 1b 00 00       	call   126e3 <list_init>
   10b28:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10b2b:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10b32:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + IDLE_TASK_SIZE);
   10b35:	b8 a0 71 01 00       	mov    $0x171a0,%eax
   10b3a:	05 00 04 00 00       	add    $0x400,%eax
   10b3f:	ba f0 0a 01 00       	mov    $0x10af0,%edx
   10b44:	50                   	push   %eax
   10b45:	52                   	push   %edx
   10b46:	68 e1 2b 01 00       	push   $0x12be1
   10b4b:	68 dc 70 01 00       	push   $0x170dc
   10b50:	e8 8c fe ff ff       	call   109e1 <task_init>
   10b55:	83 c4 10             	add    $0x10,%esp
}
   10b58:	90                   	nop
   10b59:	c9                   	leave  
   10b5a:	c3                   	ret    

00010b5b <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 入口地址entry 和栈指针esp都无所谓的，因为现在已经在使用了
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10b5b:	55                   	push   %ebp
   10b5c:	89 e5                	mov    %esp,%ebp
   10b5e:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", (uint32_t)0, 0);
   10b61:	6a 00                	push   $0x0
   10b63:	6a 00                	push   $0x0
   10b65:	68 eb 2b 01 00       	push   $0x12beb
   10b6a:	68 28 70 01 00       	push   $0x17028
   10b6f:	e8 6d fe ff ff       	call   109e1 <task_init>
   10b74:	83 c4 10             	add    $0x10,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10b77:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10b7c:	0f b7 c0             	movzwl %ax,%eax
   10b7f:	83 ec 0c             	sub    $0xc,%esp
   10b82:	50                   	push   %eax
   10b83:	e8 41 fd ff ff       	call   108c9 <write_tr>
   10b88:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10b8b:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10b92:	70 01 00 
}
   10b95:	90                   	nop
   10b96:	c9                   	leave  
   10b97:	c3                   	ret    

00010b98 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10b9b:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10ba0:	5d                   	pop    %ebp
   10ba1:	c3                   	ret    

00010ba2 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10ba2:	55                   	push   %ebp
   10ba3:	89 e5                	mov    %esp,%ebp
   10ba5:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10ba8:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10baf:	74 22                	je     10bd3 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10bb1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb4:	83 c0 24             	add    $0x24,%eax
   10bb7:	83 ec 08             	sub    $0x8,%esp
   10bba:	50                   	push   %eax
   10bbb:	68 04 70 01 00       	push   $0x17004
   10bc0:	e8 a0 1b 00 00       	call   12765 <list_insert_back>
   10bc5:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcb:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10bd1:	eb 01                	jmp    10bd4 <task_set_ready+0x32>
        return;
   10bd3:	90                   	nop
}
   10bd4:	c9                   	leave  
   10bd5:	c3                   	ret    

00010bd6 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   10bd6:	55                   	push   %ebp
   10bd7:	89 e5                	mov    %esp,%ebp
   10bd9:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10bdc:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10be3:	74 19                	je     10bfe <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10be5:	8b 45 08             	mov    0x8(%ebp),%eax
   10be8:	83 c0 24             	add    $0x24,%eax
   10beb:	83 ec 08             	sub    $0x8,%esp
   10bee:	50                   	push   %eax
   10bef:	68 04 70 01 00       	push   $0x17004
   10bf4:	e8 48 1c 00 00       	call   12841 <list_remove>
   10bf9:	83 c4 10             	add    $0x10,%esp
   10bfc:	eb 01                	jmp    10bff <task_set_blocked+0x29>
        return;
   10bfe:	90                   	nop
}
   10bff:	c9                   	leave  
   10c00:	c3                   	ret    

00010c01 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10c01:	55                   	push   %ebp
   10c02:	89 e5                	mov    %esp,%ebp
   10c04:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   10c07:	68 04 70 01 00       	push   $0x17004
   10c0c:	e8 a3 fc ff ff       	call   108b4 <list_size>
   10c11:	83 c4 04             	add    $0x4,%esp
   10c14:	85 c0                	test   %eax,%eax
   10c16:	75 07                	jne    10c1f <task_next_run+0x1e>
        return &task_manager.idle_task;
   10c18:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10c1d:	eb 23                	jmp    10c42 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   10c1f:	68 04 70 01 00       	push   $0x17004
   10c24:	e8 96 fc ff ff       	call   108bf <list_first>
   10c29:	83 c4 04             	add    $0x4,%esp
   10c2c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10c2f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10c33:	74 08                	je     10c3d <task_next_run+0x3c>
   10c35:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c38:	83 e8 24             	sub    $0x24,%eax
   10c3b:	eb 05                	jmp    10c42 <task_next_run+0x41>
   10c3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c42:	c9                   	leave  
   10c43:	c3                   	ret    

00010c44 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   10c44:	55                   	push   %ebp
   10c45:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10c47:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10c4c:	5d                   	pop    %ebp
   10c4d:	c3                   	ret    

00010c4e <sys_sched_yield>:


int sys_sched_yield(void) {
   10c4e:	55                   	push   %ebp
   10c4f:	89 e5                	mov    %esp,%ebp
   10c51:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10c54:	e8 15 0c 00 00       	call   1186e <irq_enter_protection>
   10c59:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   10c5c:	83 ec 0c             	sub    $0xc,%esp
   10c5f:	68 04 70 01 00       	push   $0x17004
   10c64:	e8 4b fc ff ff       	call   108b4 <list_size>
   10c69:	83 c4 10             	add    $0x10,%esp
   10c6c:	83 f8 01             	cmp    $0x1,%eax
   10c6f:	7e 29                	jle    10c9a <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   10c71:	e8 ce ff ff ff       	call   10c44 <task_current>
   10c76:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   10c79:	83 ec 0c             	sub    $0xc,%esp
   10c7c:	ff 75 f0             	pushl  -0x10(%ebp)
   10c7f:	e8 52 ff ff ff       	call   10bd6 <task_set_blocked>
   10c84:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10c87:	83 ec 0c             	sub    $0xc,%esp
   10c8a:	ff 75 f0             	pushl  -0x10(%ebp)
   10c8d:	e8 10 ff ff ff       	call   10ba2 <task_set_ready>
   10c92:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10c95:	e8 15 00 00 00       	call   10caf <task_dispatch>
    }

    irq_leave_protection(state);
   10c9a:	83 ec 0c             	sub    $0xc,%esp
   10c9d:	ff 75 f4             	pushl  -0xc(%ebp)
   10ca0:	e8 e1 0b 00 00       	call   11886 <irq_leave_protection>
   10ca5:	83 c4 10             	add    $0x10,%esp

    return 0;
   10ca8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10cad:	c9                   	leave  
   10cae:	c3                   	ret    

00010caf <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10caf:	55                   	push   %ebp
   10cb0:	89 e5                	mov    %esp,%ebp
   10cb2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10cb5:	e8 b4 0b 00 00       	call   1186e <irq_enter_protection>
   10cba:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10cbd:	e8 3f ff ff ff       	call   10c01 <task_next_run>
   10cc2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10cc5:	a1 00 70 01 00       	mov    0x17000,%eax
   10cca:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10ccd:	74 2a                	je     10cf9 <task_dispatch+0x4a>
        task_t* from = task_current();
   10ccf:	e8 70 ff ff ff       	call   10c44 <task_current>
   10cd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10cda:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   10cdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ce2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10ce8:	83 ec 08             	sub    $0x8,%esp
   10ceb:	ff 75 f0             	pushl  -0x10(%ebp)
   10cee:	ff 75 ec             	pushl  -0x14(%ebp)
   10cf1:	e8 dc fd ff ff       	call   10ad2 <task_switch_from_to>
   10cf6:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10cf9:	83 ec 0c             	sub    $0xc,%esp
   10cfc:	ff 75 f4             	pushl  -0xc(%ebp)
   10cff:	e8 82 0b 00 00       	call   11886 <irq_leave_protection>
   10d04:	83 c4 10             	add    $0x10,%esp
}
   10d07:	90                   	nop
   10d08:	c9                   	leave  
   10d09:	c3                   	ret    

00010d0a <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10d0a:	55                   	push   %ebp
   10d0b:	89 e5                	mov    %esp,%ebp
   10d0d:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10d10:	e8 2f ff ff ff       	call   10c44 <task_current>
   10d15:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   10d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d1b:	8b 40 44             	mov    0x44(%eax),%eax
   10d1e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d24:	89 50 44             	mov    %edx,0x44(%eax)
   10d27:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d2a:	8b 40 44             	mov    0x44(%eax),%eax
   10d2d:	85 c0                	test   %eax,%eax
   10d2f:	75 2d                	jne    10d5e <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   10d31:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d34:	8b 50 40             	mov    0x40(%eax),%edx
   10d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d3a:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   10d3d:	83 ec 0c             	sub    $0xc,%esp
   10d40:	ff 75 f0             	pushl  -0x10(%ebp)
   10d43:	e8 8e fe ff ff       	call   10bd6 <task_set_blocked>
   10d48:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10d4b:	83 ec 0c             	sub    $0xc,%esp
   10d4e:	ff 75 f0             	pushl  -0x10(%ebp)
   10d51:	e8 4c fe ff ff       	call   10ba2 <task_set_ready>
   10d56:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10d59:	e8 51 ff ff ff       	call   10caf <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   10d5e:	83 ec 0c             	sub    $0xc,%esp
   10d61:	68 1c 70 01 00       	push   $0x1701c
   10d66:	e8 54 fb ff ff       	call   108bf <list_first>
   10d6b:	83 c4 10             	add    $0x10,%esp
   10d6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10d71:	eb 62                	jmp    10dd5 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   10d73:	83 ec 0c             	sub    $0xc,%esp
   10d76:	ff 75 f4             	pushl  -0xc(%ebp)
   10d79:	e8 2b fb ff ff       	call   108a9 <list_node_next>
   10d7e:	83 c4 10             	add    $0x10,%esp
   10d81:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   10d84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d88:	74 08                	je     10d92 <task_time_tick+0x88>
   10d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d8d:	83 e8 24             	sub    $0x24,%eax
   10d90:	eb 05                	jmp    10d97 <task_time_tick+0x8d>
   10d92:	b8 00 00 00 00       	mov    $0x0,%eax
   10d97:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   10d9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d9d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10da0:	8d 50 ff             	lea    -0x1(%eax),%edx
   10da3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10da6:	89 50 3c             	mov    %edx,0x3c(%eax)
   10da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10dac:	8b 40 3c             	mov    0x3c(%eax),%eax
   10daf:	85 c0                	test   %eax,%eax
   10db1:	75 1c                	jne    10dcf <task_time_tick+0xc5>
            task_set_wakeup(task);
   10db3:	83 ec 0c             	sub    $0xc,%esp
   10db6:	ff 75 e8             	pushl  -0x18(%ebp)
   10db9:	e8 56 00 00 00       	call   10e14 <task_set_wakeup>
   10dbe:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10dc1:	83 ec 0c             	sub    $0xc,%esp
   10dc4:	ff 75 e8             	pushl  -0x18(%ebp)
   10dc7:	e8 d6 fd ff ff       	call   10ba2 <task_set_ready>
   10dcc:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   10dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10dd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10dd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10dd9:	75 98                	jne    10d73 <task_time_tick+0x69>
    }

    task_dispatch();
   10ddb:	e8 cf fe ff ff       	call   10caf <task_dispatch>
}
   10de0:	90                   	nop
   10de1:	c9                   	leave  
   10de2:	c3                   	ret    

00010de3 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   10de3:	55                   	push   %ebp
   10de4:	89 e5                	mov    %esp,%ebp
   10de6:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10de9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ded:	74 22                	je     10e11 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   10def:	8b 55 0c             	mov    0xc(%ebp),%edx
   10df2:	8b 45 08             	mov    0x8(%ebp),%eax
   10df5:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   10df8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfb:	83 c0 24             	add    $0x24,%eax
   10dfe:	83 ec 08             	sub    $0x8,%esp
   10e01:	50                   	push   %eax
   10e02:	68 1c 70 01 00       	push   $0x1701c
   10e07:	e8 59 19 00 00       	call   12765 <list_insert_back>
   10e0c:	83 c4 10             	add    $0x10,%esp
   10e0f:	eb 01                	jmp    10e12 <task_set_sleep+0x2f>
        return;
   10e11:	90                   	nop
}
   10e12:	c9                   	leave  
   10e13:	c3                   	ret    

00010e14 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   10e14:	55                   	push   %ebp
   10e15:	89 e5                	mov    %esp,%ebp
   10e17:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   10e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1d:	83 c0 24             	add    $0x24,%eax
   10e20:	83 ec 08             	sub    $0x8,%esp
   10e23:	50                   	push   %eax
   10e24:	68 1c 70 01 00       	push   $0x1701c
   10e29:	e8 13 1a 00 00       	call   12841 <list_remove>
   10e2e:	83 c4 10             	add    $0x10,%esp
}
   10e31:	90                   	nop
   10e32:	c9                   	leave  
   10e33:	c3                   	ret    

00010e34 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   10e34:	55                   	push   %ebp
   10e35:	89 e5                	mov    %esp,%ebp
   10e37:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10e3a:	e8 2f 0a 00 00       	call   1186e <irq_enter_protection>
   10e3f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   10e42:	a1 00 70 01 00       	mov    0x17000,%eax
   10e47:	83 ec 0c             	sub    $0xc,%esp
   10e4a:	50                   	push   %eax
   10e4b:	e8 86 fd ff ff       	call   10bd6 <task_set_blocked>
   10e50:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   10e53:	8b 45 08             	mov    0x8(%ebp),%eax
   10e56:	83 c0 09             	add    $0x9,%eax
   10e59:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10e5e:	f7 e2                	mul    %edx
   10e60:	c1 ea 03             	shr    $0x3,%edx
   10e63:	a1 00 70 01 00       	mov    0x17000,%eax
   10e68:	83 ec 08             	sub    $0x8,%esp
   10e6b:	52                   	push   %edx
   10e6c:	50                   	push   %eax
   10e6d:	e8 71 ff ff ff       	call   10de3 <task_set_sleep>
   10e72:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   10e75:	e8 35 fe ff ff       	call   10caf <task_dispatch>

    irq_leave_protection(state);
   10e7a:	83 ec 0c             	sub    $0xc,%esp
   10e7d:	ff 75 f4             	pushl  -0xc(%ebp)
   10e80:	e8 01 0a 00 00       	call   11886 <irq_leave_protection>
   10e85:	83 c4 10             	add    $0x10,%esp
   10e88:	90                   	nop
   10e89:	c9                   	leave  
   10e8a:	c3                   	ret    

00010e8b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10e8b:	55                   	push   %ebp
   10e8c:	89 e5                	mov    %esp,%ebp
   10e8e:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   10e91:	8b 45 08             	mov    0x8(%ebp),%eax
   10e94:	c1 e8 10             	shr    $0x10,%eax
   10e97:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   10e9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   10ea2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ea5:	83 e8 01             	sub    $0x1,%eax
   10ea8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10eac:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10eb0:	90                   	nop
   10eb1:	c9                   	leave  
   10eb2:	c3                   	ret    

00010eb3 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10eb3:	55                   	push   %ebp
   10eb4:	89 e5                	mov    %esp,%ebp
   10eb6:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   10eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ebc:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10ebf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10ec5:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10ec8:	ff 28                	ljmp   *(%eax)
}
   10eca:	90                   	nop
   10ecb:	c9                   	leave  
   10ecc:	c3                   	ret    

00010ecd <segment_desc_set>:

// selector: 段选择子
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10ecd:	55                   	push   %ebp
   10ece:	89 e5                	mov    %esp,%ebp
   10ed0:	83 ec 14             	sub    $0x14,%esp
   10ed3:	8b 45 14             	mov    0x14(%ebp),%eax
   10ed6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   10eda:	8b 45 08             	mov    0x8(%ebp),%eax
   10edd:	83 e0 f8             	and    $0xfffffff8,%eax
   10ee0:	05 a0 81 01 00       	add    $0x181a0,%eax
   10ee5:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   10ee8:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10eef:	76 0f                	jbe    10f00 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   10ef1:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10ef7:	8b 45 10             	mov    0x10(%ebp),%eax
   10efa:	c1 e8 0c             	shr    $0xc,%eax
   10efd:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   10f00:	8b 45 10             	mov    0x10(%ebp),%eax
   10f03:	89 c2                	mov    %eax,%edx
   10f05:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f08:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   10f0b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f0e:	89 c2                	mov    %eax,%edx
   10f10:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f13:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10f17:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f1a:	c1 e8 10             	shr    $0x10,%eax
   10f1d:	89 c2                	mov    %eax,%edx
   10f1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f22:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   10f25:	8b 45 10             	mov    0x10(%ebp),%eax
   10f28:	c1 e8 10             	shr    $0x10,%eax
   10f2b:	c1 e0 08             	shl    $0x8,%eax
   10f2e:	66 25 00 0f          	and    $0xf00,%ax
   10f32:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10f36:	89 c2                	mov    %eax,%edx
   10f38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f3b:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f42:	c1 e8 18             	shr    $0x18,%eax
   10f45:	89 c2                	mov    %eax,%edx
   10f47:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f4a:	88 50 07             	mov    %dl,0x7(%eax)
}
   10f4d:	90                   	nop
   10f4e:	c9                   	leave  
   10f4f:	c3                   	ret    

00010f50 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10f50:	55                   	push   %ebp
   10f51:	89 e5                	mov    %esp,%ebp
   10f53:	83 ec 08             	sub    $0x8,%esp
   10f56:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f59:	8b 45 14             	mov    0x14(%ebp),%eax
   10f5c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10f60:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   10f64:	8b 45 10             	mov    0x10(%ebp),%eax
   10f67:	89 c2                	mov    %eax,%edx
   10f69:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6c:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f72:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10f76:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10f7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10f81:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10f85:	8b 45 10             	mov    0x10(%ebp),%eax
   10f88:	c1 e8 10             	shr    $0x10,%eax
   10f8b:	89 c2                	mov    %eax,%edx
   10f8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f90:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10f94:	90                   	nop
   10f95:	c9                   	leave  
   10f96:	c3                   	ret    

00010f97 <init_gdt>:


void init_gdt(void) {
   10f97:	55                   	push   %ebp
   10f98:	89 e5                	mov    %esp,%ebp
   10f9a:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10f9d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10fa4:	eb 19                	jmp    10fbf <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10fa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fa9:	c1 e0 03             	shl    $0x3,%eax
   10fac:	6a 00                	push   $0x0
   10fae:	6a 00                	push   $0x0
   10fb0:	6a 00                	push   $0x0
   10fb2:	50                   	push   %eax
   10fb3:	e8 15 ff ff ff       	call   10ecd <segment_desc_set>
   10fb8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10fbb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10fbf:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10fc6:	7e de                	jle    10fa6 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10fc8:	68 92 40 00 00       	push   $0x4092
   10fcd:	6a ff                	push   $0xffffffff
   10fcf:	6a 00                	push   $0x0
   10fd1:	6a 10                	push   $0x10
   10fd3:	e8 f5 fe ff ff       	call   10ecd <segment_desc_set>
   10fd8:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10fdb:	68 9a 40 00 00       	push   $0x409a
   10fe0:	6a ff                	push   $0xffffffff
   10fe2:	6a 00                	push   $0x0
   10fe4:	6a 08                	push   $0x8
   10fe6:	e8 e2 fe ff ff       	call   10ecd <segment_desc_set>
   10feb:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10fee:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   10ff3:	68 00 08 00 00       	push   $0x800
   10ff8:	50                   	push   %eax
   10ff9:	e8 8d fe ff ff       	call   10e8b <lgdt>
   10ffe:	83 c4 08             	add    $0x8,%esp
}
   11001:	90                   	nop
   11002:	c9                   	leave  
   11003:	c3                   	ret    

00011004 <cpu_init>:


void cpu_init(void) {
   11004:	55                   	push   %ebp
   11005:	89 e5                	mov    %esp,%ebp
   11007:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1100a:	83 ec 0c             	sub    $0xc,%esp
   1100d:	68 a0 89 01 00       	push   $0x189a0
   11012:	e8 5c 0c 00 00       	call   11c73 <mutex_init>
   11017:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1101a:	e8 78 ff ff ff       	call   10f97 <init_gdt>
}
   1101f:	90                   	nop
   11020:	c9                   	leave  
   11021:	c3                   	ret    

00011022 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   11022:	55                   	push   %ebp
   11023:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   11025:	8b 45 08             	mov    0x8(%ebp),%eax
   11028:	6a 00                	push   $0x0
   1102a:	50                   	push   %eax
   1102b:	e8 83 fe ff ff       	call   10eb3 <far_jump>
   11030:	83 c4 08             	add    $0x8,%esp
}
   11033:	90                   	nop
   11034:	c9                   	leave  
   11035:	c3                   	ret    

00011036 <gdt_alloc_desc>:


int gdt_alloc_desc(void) {
   11036:	55                   	push   %ebp
   11037:	89 e5                	mov    %esp,%ebp
   11039:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   1103c:	83 ec 0c             	sub    $0xc,%esp
   1103f:	68 a0 89 01 00       	push   $0x189a0
   11044:	e8 58 0c 00 00       	call   11ca1 <mutex_acquire>
   11049:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1104c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11053:	eb 36                	jmp    1108b <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   11055:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11058:	c1 e0 03             	shl    $0x3,%eax
   1105b:	05 a0 81 01 00       	add    $0x181a0,%eax
   11060:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   11063:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11066:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1106a:	66 85 c0             	test   %ax,%ax
   1106d:	75 18                	jne    11087 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   1106f:	83 ec 0c             	sub    $0xc,%esp
   11072:	68 a0 89 01 00       	push   $0x189a0
   11077:	e8 b1 0c 00 00       	call   11d2d <mutex_release>
   1107c:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   1107f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11082:	c1 e0 03             	shl    $0x3,%eax
   11085:	eb 22                	jmp    110a9 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11087:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1108b:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11092:	7e c1                	jle    11055 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11094:	83 ec 0c             	sub    $0xc,%esp
   11097:	68 a0 89 01 00       	push   $0x189a0
   1109c:	e8 8c 0c 00 00       	call   11d2d <mutex_release>
   110a1:	83 c4 10             	add    $0x10,%esp

    return -1;
   110a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110a9:	c9                   	leave  
   110aa:	c3                   	ret    

000110ab <inb>:
static inline uint8_t inb(uint16_t port) {
   110ab:	55                   	push   %ebp
   110ac:	89 e5                	mov    %esp,%ebp
   110ae:	83 ec 14             	sub    $0x14,%esp
   110b1:	8b 45 08             	mov    0x8(%ebp),%eax
   110b4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   110b8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   110bc:	89 c2                	mov    %eax,%edx
   110be:	ec                   	in     (%dx),%al
   110bf:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   110c2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   110c6:	c9                   	leave  
   110c7:	c3                   	ret    

000110c8 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   110c8:	55                   	push   %ebp
   110c9:	89 e5                	mov    %esp,%ebp
   110cb:	83 ec 08             	sub    $0x8,%esp
   110ce:	8b 55 08             	mov    0x8(%ebp),%edx
   110d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   110d8:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   110db:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   110df:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   110e3:	ee                   	out    %al,(%dx)
}
   110e4:	90                   	nop
   110e5:	c9                   	leave  
   110e6:	c3                   	ret    

000110e7 <cli>:
static inline void cli(void) {
   110e7:	55                   	push   %ebp
   110e8:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   110ea:	fa                   	cli    
}
   110eb:	90                   	nop
   110ec:	5d                   	pop    %ebp
   110ed:	c3                   	ret    

000110ee <sti>:
static inline void sti(void) {
   110ee:	55                   	push   %ebp
   110ef:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   110f1:	fb                   	sti    
}
   110f2:	90                   	nop
   110f3:	5d                   	pop    %ebp
   110f4:	c3                   	ret    

000110f5 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   110f5:	55                   	push   %ebp
   110f6:	89 e5                	mov    %esp,%ebp
   110f8:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   110fb:	8b 45 08             	mov    0x8(%ebp),%eax
   110fe:	c1 e8 10             	shr    $0x10,%eax
   11101:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   11105:	8b 45 08             	mov    0x8(%ebp),%eax
   11108:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   1110c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110f:	83 e8 01             	sub    $0x1,%eax
   11112:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   11116:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1111a:	90                   	nop
   1111b:	c9                   	leave  
   1111c:	c3                   	ret    

0001111d <hlt>:
static inline void hlt(void) {
   1111d:	55                   	push   %ebp
   1111e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11120:	f4                   	hlt    
}
   11121:	90                   	nop
   11122:	5d                   	pop    %ebp
   11123:	c3                   	ret    

00011124 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   11124:	55                   	push   %ebp
   11125:	89 e5                	mov    %esp,%ebp
   11127:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1112a:	9c                   	pushf  
   1112b:	58                   	pop    %eax
   1112c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1112f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11132:	c9                   	leave  
   11133:	c3                   	ret    

00011134 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   11134:	55                   	push   %ebp
   11135:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11137:	8b 45 08             	mov    0x8(%ebp),%eax
   1113a:	50                   	push   %eax
   1113b:	9d                   	popf   
}
   1113c:	90                   	nop
   1113d:	5d                   	pop    %ebp
   1113e:	c3                   	ret    

0001113f <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   1113f:	55                   	push   %ebp
   11140:	89 e5                	mov    %esp,%ebp
   11142:	57                   	push   %edi
   11143:	56                   	push   %esi
   11144:	53                   	push   %ebx
   11145:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11148:	8b 45 08             	mov    0x8(%ebp),%eax
   1114b:	8b 50 34             	mov    0x34(%eax),%edx
   1114e:	8b 45 08             	mov    0x8(%ebp),%eax
   11151:	8b 40 30             	mov    0x30(%eax),%eax
   11154:	83 ec 04             	sub    $0x4,%esp
   11157:	52                   	push   %edx
   11158:	50                   	push   %eax
   11159:	68 04 2c 01 00       	push   $0x12c04
   1115e:	e8 3c 18 00 00       	call   1299f <log_printf>
   11163:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
   11166:	8b 45 08             	mov    0x8(%ebp),%eax
   11169:	8b 38                	mov    (%eax),%edi
   1116b:	8b 45 08             	mov    0x8(%ebp),%eax
   1116e:	8b 70 04             	mov    0x4(%eax),%esi
   11171:	8b 45 08             	mov    0x8(%ebp),%eax
   11174:	8b 58 0c             	mov    0xc(%eax),%ebx
   11177:	8b 45 08             	mov    0x8(%ebp),%eax
   1117a:	8b 48 08             	mov    0x8(%eax),%ecx
   1117d:	8b 45 08             	mov    0x8(%ebp),%eax
   11180:	8b 50 0c             	mov    0xc(%eax),%edx
   11183:	8b 45 08             	mov    0x8(%ebp),%eax
   11186:	8b 40 3c             	mov    0x3c(%eax),%eax
   11189:	83 ec 04             	sub    $0x4,%esp
   1118c:	57                   	push   %edi
   1118d:	56                   	push   %esi
   1118e:	53                   	push   %ebx
   1118f:	51                   	push   %ecx
   11190:	52                   	push   %edx
   11191:	50                   	push   %eax
   11192:	68 1c 2c 01 00       	push   $0x12c1c
   11197:	e8 03 18 00 00       	call   1299f <log_printf>
   1119c:	83 c4 20             	add    $0x20,%esp
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, frame->esp);
   1119f:	8b 45 08             	mov    0x8(%ebp),%eax
   111a2:	8b 40 1c             	mov    0x1c(%eax),%eax
   111a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   111a8:	8b 45 08             	mov    0x8(%ebp),%eax
   111ab:	8b 78 18             	mov    0x18(%eax),%edi
   111ae:	8b 45 08             	mov    0x8(%ebp),%eax
   111b1:	8b 70 14             	mov    0x14(%eax),%esi
   111b4:	8b 45 08             	mov    0x8(%ebp),%eax
   111b7:	8b 58 10             	mov    0x10(%eax),%ebx
   111ba:	8b 45 08             	mov    0x8(%ebp),%eax
   111bd:	8b 48 24             	mov    0x24(%eax),%ecx
   111c0:	8b 45 08             	mov    0x8(%ebp),%eax
   111c3:	8b 50 20             	mov    0x20(%eax),%edx
   111c6:	8b 45 08             	mov    0x8(%ebp),%eax
   111c9:	8b 40 2c             	mov    0x2c(%eax),%eax
   111cc:	ff 75 e4             	pushl  -0x1c(%ebp)
   111cf:	57                   	push   %edi
   111d0:	56                   	push   %esi
   111d1:	53                   	push   %ebx
   111d2:	51                   	push   %ecx
   111d3:	52                   	push   %edx
   111d4:	50                   	push   %eax
   111d5:	68 48 2c 01 00       	push   $0x12c48
   111da:	e8 c0 17 00 00       	call   1299f <log_printf>
   111df:	83 c4 20             	add    $0x20,%esp
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   111e2:	8b 45 08             	mov    0x8(%ebp),%eax
   111e5:	8b 50 40             	mov    0x40(%eax),%edx
   111e8:	8b 45 08             	mov    0x8(%ebp),%eax
   111eb:	8b 40 38             	mov    0x38(%eax),%eax
   111ee:	83 ec 04             	sub    $0x4,%esp
   111f1:	52                   	push   %edx
   111f2:	50                   	push   %eax
   111f3:	68 81 2c 01 00       	push   $0x12c81
   111f8:	e8 a2 17 00 00       	call   1299f <log_printf>
   111fd:	83 c4 10             	add    $0x10,%esp
}
   11200:	90                   	nop
   11201:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11204:	5b                   	pop    %ebx
   11205:	5e                   	pop    %esi
   11206:	5f                   	pop    %edi
   11207:	5d                   	pop    %ebp
   11208:	c3                   	ret    

00011209 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   11209:	55                   	push   %ebp
   1120a:	89 e5                	mov    %esp,%ebp
   1120c:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   1120f:	83 ec 0c             	sub    $0xc,%esp
   11212:	68 98 2c 01 00       	push   $0x12c98
   11217:	e8 83 17 00 00       	call   1299f <log_printf>
   1121c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   1121f:	83 ec 08             	sub    $0x8,%esp
   11222:	ff 75 0c             	pushl  0xc(%ebp)
   11225:	68 c3 2c 01 00       	push   $0x12cc3
   1122a:	e8 70 17 00 00       	call   1299f <log_printf>
   1122f:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   11232:	83 ec 0c             	sub    $0xc,%esp
   11235:	ff 75 08             	pushl  0x8(%ebp)
   11238:	e8 02 ff ff ff       	call   1113f <dump_core_regs>
   1123d:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11240:	e8 d8 fe ff ff       	call   1111d <hlt>
   11245:	eb f9                	jmp    11240 <do_default_handler+0x37>

00011247 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11247:	55                   	push   %ebp
   11248:	89 e5                	mov    %esp,%ebp
   1124a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   1124d:	83 ec 08             	sub    $0x8,%esp
   11250:	68 d5 2c 01 00       	push   $0x12cd5
   11255:	ff 75 08             	pushl  0x8(%ebp)
   11258:	e8 ac ff ff ff       	call   11209 <do_default_handler>
   1125d:	83 c4 10             	add    $0x10,%esp
}
   11260:	90                   	nop
   11261:	c9                   	leave  
   11262:	c3                   	ret    

00011263 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   11263:	55                   	push   %ebp
   11264:	89 e5                	mov    %esp,%ebp
   11266:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   11269:	83 ec 08             	sub    $0x8,%esp
   1126c:	68 e7 2c 01 00       	push   $0x12ce7
   11271:	ff 75 08             	pushl  0x8(%ebp)
   11274:	e8 90 ff ff ff       	call   11209 <do_default_handler>
   11279:	83 c4 10             	add    $0x10,%esp
}
   1127c:	90                   	nop
   1127d:	c9                   	leave  
   1127e:	c3                   	ret    

0001127f <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   1127f:	55                   	push   %ebp
   11280:	89 e5                	mov    %esp,%ebp
   11282:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   11285:	83 ec 08             	sub    $0x8,%esp
   11288:	68 01 2d 01 00       	push   $0x12d01
   1128d:	ff 75 08             	pushl  0x8(%ebp)
   11290:	e8 74 ff ff ff       	call   11209 <do_default_handler>
   11295:	83 c4 10             	add    $0x10,%esp
}   
   11298:	90                   	nop
   11299:	c9                   	leave  
   1129a:	c3                   	ret    

0001129b <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   1129b:	55                   	push   %ebp
   1129c:	89 e5                	mov    %esp,%ebp
   1129e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   112a1:	83 ec 08             	sub    $0x8,%esp
   112a4:	68 1c 2d 01 00       	push   $0x12d1c
   112a9:	ff 75 08             	pushl  0x8(%ebp)
   112ac:	e8 58 ff ff ff       	call   11209 <do_default_handler>
   112b1:	83 c4 10             	add    $0x10,%esp
}   
   112b4:	90                   	nop
   112b5:	c9                   	leave  
   112b6:	c3                   	ret    

000112b7 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   112b7:	55                   	push   %ebp
   112b8:	89 e5                	mov    %esp,%ebp
   112ba:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   112bd:	83 ec 08             	sub    $0x8,%esp
   112c0:	68 35 2d 01 00       	push   $0x12d35
   112c5:	ff 75 08             	pushl  0x8(%ebp)
   112c8:	e8 3c ff ff ff       	call   11209 <do_default_handler>
   112cd:	83 c4 10             	add    $0x10,%esp
}   
   112d0:	90                   	nop
   112d1:	c9                   	leave  
   112d2:	c3                   	ret    

000112d3 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   112d3:	55                   	push   %ebp
   112d4:	89 e5                	mov    %esp,%ebp
   112d6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   112d9:	83 ec 08             	sub    $0x8,%esp
   112dc:	68 4b 2d 01 00       	push   $0x12d4b
   112e1:	ff 75 08             	pushl  0x8(%ebp)
   112e4:	e8 20 ff ff ff       	call   11209 <do_default_handler>
   112e9:	83 c4 10             	add    $0x10,%esp
}   
   112ec:	90                   	nop
   112ed:	c9                   	leave  
   112ee:	c3                   	ret    

000112ef <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   112ef:	55                   	push   %ebp
   112f0:	89 e5                	mov    %esp,%ebp
   112f2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   112f5:	83 ec 08             	sub    $0x8,%esp
   112f8:	68 5f 2d 01 00       	push   $0x12d5f
   112fd:	ff 75 08             	pushl  0x8(%ebp)
   11300:	e8 04 ff ff ff       	call   11209 <do_default_handler>
   11305:	83 c4 10             	add    $0x10,%esp
}   
   11308:	90                   	nop
   11309:	c9                   	leave  
   1130a:	c3                   	ret    

0001130b <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   1130b:	55                   	push   %ebp
   1130c:	89 e5                	mov    %esp,%ebp
   1130e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   11311:	83 ec 08             	sub    $0x8,%esp
   11314:	68 7d 2d 01 00       	push   $0x12d7d
   11319:	ff 75 08             	pushl  0x8(%ebp)
   1131c:	e8 e8 fe ff ff       	call   11209 <do_default_handler>
   11321:	83 c4 10             	add    $0x10,%esp
}   
   11324:	90                   	nop
   11325:	c9                   	leave  
   11326:	c3                   	ret    

00011327 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11327:	55                   	push   %ebp
   11328:	89 e5                	mov    %esp,%ebp
   1132a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   1132d:	83 ec 08             	sub    $0x8,%esp
   11330:	68 97 2d 01 00       	push   $0x12d97
   11335:	ff 75 08             	pushl  0x8(%ebp)
   11338:	e8 cc fe ff ff       	call   11209 <do_default_handler>
   1133d:	83 c4 10             	add    $0x10,%esp
}   
   11340:	90                   	nop
   11341:	c9                   	leave  
   11342:	c3                   	ret    

00011343 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   11343:	55                   	push   %ebp
   11344:	89 e5                	mov    %esp,%ebp
   11346:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11349:	83 ec 08             	sub    $0x8,%esp
   1134c:	68 b3 2d 01 00       	push   $0x12db3
   11351:	ff 75 08             	pushl  0x8(%ebp)
   11354:	e8 b0 fe ff ff       	call   11209 <do_default_handler>
   11359:	83 c4 10             	add    $0x10,%esp
}   
   1135c:	90                   	nop
   1135d:	c9                   	leave  
   1135e:	c3                   	ret    

0001135f <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   1135f:	55                   	push   %ebp
   11360:	89 e5                	mov    %esp,%ebp
   11362:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   11365:	83 ec 08             	sub    $0x8,%esp
   11368:	68 cb 2d 01 00       	push   $0x12dcb
   1136d:	ff 75 08             	pushl  0x8(%ebp)
   11370:	e8 94 fe ff ff       	call   11209 <do_default_handler>
   11375:	83 c4 10             	add    $0x10,%esp
}   
   11378:	90                   	nop
   11379:	c9                   	leave  
   1137a:	c3                   	ret    

0001137b <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   1137b:	55                   	push   %ebp
   1137c:	89 e5                	mov    %esp,%ebp
   1137e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11381:	83 ec 08             	sub    $0x8,%esp
   11384:	68 e4 2d 01 00       	push   $0x12de4
   11389:	ff 75 08             	pushl  0x8(%ebp)
   1138c:	e8 78 fe ff ff       	call   11209 <do_default_handler>
   11391:	83 c4 10             	add    $0x10,%esp
}   
   11394:	90                   	nop
   11395:	c9                   	leave  
   11396:	c3                   	ret    

00011397 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   11397:	55                   	push   %ebp
   11398:	89 e5                	mov    %esp,%ebp
   1139a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   1139d:	83 ec 08             	sub    $0x8,%esp
   113a0:	68 04 2e 01 00       	push   $0x12e04
   113a5:	ff 75 08             	pushl  0x8(%ebp)
   113a8:	e8 5c fe ff ff       	call   11209 <do_default_handler>
   113ad:	83 c4 10             	add    $0x10,%esp
}   
   113b0:	90                   	nop
   113b1:	c9                   	leave  
   113b2:	c3                   	ret    

000113b3 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   113b3:	55                   	push   %ebp
   113b4:	89 e5                	mov    %esp,%ebp
   113b6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: General protection");
   113b9:	83 ec 08             	sub    $0x8,%esp
   113bc:	68 23 2e 01 00       	push   $0x12e23
   113c1:	ff 75 08             	pushl  0x8(%ebp)
   113c4:	e8 40 fe ff ff       	call   11209 <do_default_handler>
   113c9:	83 c4 10             	add    $0x10,%esp
}   
   113cc:	90                   	nop
   113cd:	c9                   	leave  
   113ce:	c3                   	ret    

000113cf <do_handler_page_fault>:


// Exception: 
void do_handler_page_fault(exception_frame_t* frame) {
   113cf:	55                   	push   %ebp
   113d0:	89 e5                	mov    %esp,%ebp
   113d2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Page fault");
   113d5:	83 ec 08             	sub    $0x8,%esp
   113d8:	68 41 2e 01 00       	push   $0x12e41
   113dd:	ff 75 08             	pushl  0x8(%ebp)
   113e0:	e8 24 fe ff ff       	call   11209 <do_default_handler>
   113e5:	83 c4 10             	add    $0x10,%esp
}   
   113e8:	90                   	nop
   113e9:	c9                   	leave  
   113ea:	c3                   	ret    

000113eb <do_handler_floating_point_error>:


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   113eb:	55                   	push   %ebp
   113ec:	89 e5                	mov    %esp,%ebp
   113ee:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   113f1:	83 ec 08             	sub    $0x8,%esp
   113f4:	68 58 2e 01 00       	push   $0x12e58
   113f9:	ff 75 08             	pushl  0x8(%ebp)
   113fc:	e8 08 fe ff ff       	call   11209 <do_default_handler>
   11401:	83 c4 10             	add    $0x10,%esp
}   
   11404:	90                   	nop
   11405:	c9                   	leave  
   11406:	c3                   	ret    

00011407 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11407:	55                   	push   %ebp
   11408:	89 e5                	mov    %esp,%ebp
   1140a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   1140d:	83 ec 08             	sub    $0x8,%esp
   11410:	68 78 2e 01 00       	push   $0x12e78
   11415:	ff 75 08             	pushl  0x8(%ebp)
   11418:	e8 ec fd ff ff       	call   11209 <do_default_handler>
   1141d:	83 c4 10             	add    $0x10,%esp
}   
   11420:	90                   	nop
   11421:	c9                   	leave  
   11422:	c3                   	ret    

00011423 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
   11426:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11429:	83 ec 08             	sub    $0x8,%esp
   1142c:	68 92 2e 01 00       	push   $0x12e92
   11431:	ff 75 08             	pushl  0x8(%ebp)
   11434:	e8 d0 fd ff ff       	call   11209 <do_default_handler>
   11439:	83 c4 10             	add    $0x10,%esp
}   
   1143c:	90                   	nop
   1143d:	c9                   	leave  
   1143e:	c3                   	ret    

0001143f <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   1143f:	55                   	push   %ebp
   11440:	89 e5                	mov    %esp,%ebp
   11442:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11445:	83 ec 08             	sub    $0x8,%esp
   11448:	68 ac 2e 01 00       	push   $0x12eac
   1144d:	ff 75 08             	pushl  0x8(%ebp)
   11450:	e8 b4 fd ff ff       	call   11209 <do_default_handler>
   11455:	83 c4 10             	add    $0x10,%esp
}
   11458:	90                   	nop
   11459:	c9                   	leave  
   1145a:	c3                   	ret    

0001145b <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   1145b:	55                   	push   %ebp
   1145c:	89 e5                	mov    %esp,%ebp
   1145e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11461:	83 ec 08             	sub    $0x8,%esp
   11464:	68 d8 2e 01 00       	push   $0x12ed8
   11469:	ff 75 08             	pushl  0x8(%ebp)
   1146c:	e8 98 fd ff ff       	call   11209 <do_default_handler>
   11471:	83 c4 10             	add    $0x10,%esp
}
   11474:	90                   	nop
   11475:	c9                   	leave  
   11476:	c3                   	ret    

00011477 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11477:	55                   	push   %ebp
   11478:	89 e5                	mov    %esp,%ebp
   1147a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   1147d:	83 ec 08             	sub    $0x8,%esp
   11480:	68 fc 2e 01 00       	push   $0x12efc
   11485:	ff 75 08             	pushl  0x8(%ebp)
   11488:	e8 7c fd ff ff       	call   11209 <do_default_handler>
   1148d:	83 c4 10             	add    $0x10,%esp
}
   11490:	90                   	nop
   11491:	c9                   	leave  
   11492:	c3                   	ret    

00011493 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11493:	55                   	push   %ebp
   11494:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11496:	6a 11                	push   $0x11
   11498:	6a 20                	push   $0x20
   1149a:	e8 29 fc ff ff       	call   110c8 <outb>
   1149f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   114a2:	6a 20                	push   $0x20
   114a4:	6a 21                	push   $0x21
   114a6:	e8 1d fc ff ff       	call   110c8 <outb>
   114ab:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   114ae:	6a 04                	push   $0x4
   114b0:	6a 21                	push   $0x21
   114b2:	e8 11 fc ff ff       	call   110c8 <outb>
   114b7:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   114ba:	6a 01                	push   $0x1
   114bc:	6a 21                	push   $0x21
   114be:	e8 05 fc ff ff       	call   110c8 <outb>
   114c3:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   114c6:	6a 11                	push   $0x11
   114c8:	68 a0 00 00 00       	push   $0xa0
   114cd:	e8 f6 fb ff ff       	call   110c8 <outb>
   114d2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   114d5:	6a 28                	push   $0x28
   114d7:	68 a1 00 00 00       	push   $0xa1
   114dc:	e8 e7 fb ff ff       	call   110c8 <outb>
   114e1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   114e4:	6a 02                	push   $0x2
   114e6:	68 a1 00 00 00       	push   $0xa1
   114eb:	e8 d8 fb ff ff       	call   110c8 <outb>
   114f0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   114f3:	6a 01                	push   $0x1
   114f5:	68 a1 00 00 00       	push   $0xa1
   114fa:	e8 c9 fb ff ff       	call   110c8 <outb>
   114ff:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11502:	68 fb 00 00 00       	push   $0xfb
   11507:	6a 21                	push   $0x21
   11509:	e8 ba fb ff ff       	call   110c8 <outb>
   1150e:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11511:	68 ff 00 00 00       	push   $0xff
   11516:	68 a1 00 00 00       	push   $0xa1
   1151b:	e8 a8 fb ff ff       	call   110c8 <outb>
   11520:	83 c4 08             	add    $0x8,%esp
}
   11523:	90                   	nop
   11524:	c9                   	leave  
   11525:	c3                   	ret    

00011526 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11526:	55                   	push   %ebp
   11527:	89 e5                	mov    %esp,%ebp
   11529:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   1152c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11533:	eb 25                	jmp    1155a <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11535:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   1153a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1153d:	c1 e0 03             	shl    $0x3,%eax
   11540:	05 c0 89 01 00       	add    $0x189c0,%eax
   11545:	68 00 8e 00 00       	push   $0x8e00
   1154a:	52                   	push   %edx
   1154b:	6a 08                	push   $0x8
   1154d:	50                   	push   %eax
   1154e:	e8 fd f9 ff ff       	call   10f50 <gate_desc_set>
   11553:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11556:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1155a:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1155e:	7e d5                	jle    11535 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11560:	83 ec 08             	sub    $0x8,%esp
   11563:	68 4a 00 01 00       	push   $0x1004a
   11568:	6a 00                	push   $0x0
   1156a:	e8 77 01 00 00       	call   116e6 <irq_install>
   1156f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11572:	83 ec 08             	sub    $0x8,%esp
   11575:	68 69 00 01 00       	push   $0x10069
   1157a:	6a 01                	push   $0x1
   1157c:	e8 65 01 00 00       	call   116e6 <irq_install>
   11581:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11584:	83 ec 08             	sub    $0x8,%esp
   11587:	68 88 00 01 00       	push   $0x10088
   1158c:	6a 02                	push   $0x2
   1158e:	e8 53 01 00 00       	call   116e6 <irq_install>
   11593:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11596:	83 ec 08             	sub    $0x8,%esp
   11599:	68 a7 00 01 00       	push   $0x100a7
   1159e:	6a 03                	push   $0x3
   115a0:	e8 41 01 00 00       	call   116e6 <irq_install>
   115a5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   115a8:	83 ec 08             	sub    $0x8,%esp
   115ab:	68 c6 00 01 00       	push   $0x100c6
   115b0:	6a 04                	push   $0x4
   115b2:	e8 2f 01 00 00       	call   116e6 <irq_install>
   115b7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   115ba:	83 ec 08             	sub    $0x8,%esp
   115bd:	68 e5 00 01 00       	push   $0x100e5
   115c2:	6a 05                	push   $0x5
   115c4:	e8 1d 01 00 00       	call   116e6 <irq_install>
   115c9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   115cc:	83 ec 08             	sub    $0x8,%esp
   115cf:	68 04 01 01 00       	push   $0x10104
   115d4:	6a 06                	push   $0x6
   115d6:	e8 0b 01 00 00       	call   116e6 <irq_install>
   115db:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   115de:	83 ec 08             	sub    $0x8,%esp
   115e1:	68 23 01 01 00       	push   $0x10123
   115e6:	6a 07                	push   $0x7
   115e8:	e8 f9 00 00 00       	call   116e6 <irq_install>
   115ed:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   115f0:	83 ec 08             	sub    $0x8,%esp
   115f3:	68 42 01 01 00       	push   $0x10142
   115f8:	6a 08                	push   $0x8
   115fa:	e8 e7 00 00 00       	call   116e6 <irq_install>
   115ff:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11602:	83 ec 08             	sub    $0x8,%esp
   11605:	68 5f 01 01 00       	push   $0x1015f
   1160a:	6a 0a                	push   $0xa
   1160c:	e8 d5 00 00 00       	call   116e6 <irq_install>
   11611:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11614:	83 ec 08             	sub    $0x8,%esp
   11617:	68 7c 01 01 00       	push   $0x1017c
   1161c:	6a 0b                	push   $0xb
   1161e:	e8 c3 00 00 00       	call   116e6 <irq_install>
   11623:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11626:	83 ec 08             	sub    $0x8,%esp
   11629:	68 99 01 01 00       	push   $0x10199
   1162e:	6a 0c                	push   $0xc
   11630:	e8 b1 00 00 00       	call   116e6 <irq_install>
   11635:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11638:	83 ec 08             	sub    $0x8,%esp
   1163b:	68 b8 01 01 00       	push   $0x101b8
   11640:	6a 0d                	push   $0xd
   11642:	e8 9f 00 00 00       	call   116e6 <irq_install>
   11647:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   1164a:	83 ec 08             	sub    $0x8,%esp
   1164d:	68 d5 01 01 00       	push   $0x101d5
   11652:	6a 0e                	push   $0xe
   11654:	e8 8d 00 00 00       	call   116e6 <irq_install>
   11659:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   1165c:	83 ec 08             	sub    $0x8,%esp
   1165f:	68 f2 01 01 00       	push   $0x101f2
   11664:	6a 10                	push   $0x10
   11666:	e8 7b 00 00 00       	call   116e6 <irq_install>
   1166b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   1166e:	83 ec 08             	sub    $0x8,%esp
   11671:	68 11 02 01 00       	push   $0x10211
   11676:	6a 11                	push   $0x11
   11678:	e8 69 00 00 00       	call   116e6 <irq_install>
   1167d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11680:	83 ec 08             	sub    $0x8,%esp
   11683:	68 2e 02 01 00       	push   $0x1022e
   11688:	6a 12                	push   $0x12
   1168a:	e8 57 00 00 00       	call   116e6 <irq_install>
   1168f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11692:	83 ec 08             	sub    $0x8,%esp
   11695:	68 4d 02 01 00       	push   $0x1024d
   1169a:	6a 13                	push   $0x13
   1169c:	e8 45 00 00 00       	call   116e6 <irq_install>
   116a1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   116a4:	83 ec 08             	sub    $0x8,%esp
   116a7:	68 6c 02 01 00       	push   $0x1026c
   116ac:	6a 14                	push   $0x14
   116ae:	e8 33 00 00 00       	call   116e6 <irq_install>
   116b3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   116b6:	83 ec 08             	sub    $0x8,%esp
   116b9:	68 8b 02 01 00       	push   $0x1028b
   116be:	6a 15                	push   $0x15
   116c0:	e8 21 00 00 00       	call   116e6 <irq_install>
   116c5:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   116c8:	b8 c0 89 01 00       	mov    $0x189c0,%eax
   116cd:	83 ec 08             	sub    $0x8,%esp
   116d0:	68 00 04 00 00       	push   $0x400
   116d5:	50                   	push   %eax
   116d6:	e8 1a fa ff ff       	call   110f5 <lidt>
   116db:	83 c4 10             	add    $0x10,%esp

    init_pic();
   116de:	e8 b0 fd ff ff       	call   11493 <init_pic>
}
   116e3:	90                   	nop
   116e4:	c9                   	leave  
   116e5:	c3                   	ret    

000116e6 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   116e6:	55                   	push   %ebp
   116e7:	89 e5                	mov    %esp,%ebp
   116e9:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   116ec:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   116f0:	7e 07                	jle    116f9 <irq_install+0x13>
        return -1;
   116f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   116f7:	eb 20                	jmp    11719 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   116f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   116fc:	8b 55 08             	mov    0x8(%ebp),%edx
   116ff:	c1 e2 03             	shl    $0x3,%edx
   11702:	81 c2 c0 89 01 00    	add    $0x189c0,%edx
   11708:	68 00 8e 00 00       	push   $0x8e00
   1170d:	50                   	push   %eax
   1170e:	6a 08                	push   $0x8
   11710:	52                   	push   %edx
   11711:	e8 3a f8 ff ff       	call   10f50 <gate_desc_set>
   11716:	83 c4 10             	add    $0x10,%esp
}
   11719:	c9                   	leave  
   1171a:	c3                   	ret    

0001171b <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   1171b:	55                   	push   %ebp
   1171c:	89 e5                	mov    %esp,%ebp
   1171e:	53                   	push   %ebx
   1171f:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11722:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11726:	7e 78                	jle    117a0 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11728:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   1172c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11730:	7f 32                	jg     11764 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11732:	6a 21                	push   $0x21
   11734:	e8 72 f9 ff ff       	call   110ab <inb>
   11739:	83 c4 04             	add    $0x4,%esp
   1173c:	89 c2                	mov    %eax,%edx
   1173e:	8b 45 08             	mov    0x8(%ebp),%eax
   11741:	bb 01 00 00 00       	mov    $0x1,%ebx
   11746:	89 c1                	mov    %eax,%ecx
   11748:	d3 e3                	shl    %cl,%ebx
   1174a:	89 d8                	mov    %ebx,%eax
   1174c:	f7 d0                	not    %eax
   1174e:	21 d0                	and    %edx,%eax
   11750:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11753:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11757:	50                   	push   %eax
   11758:	6a 21                	push   $0x21
   1175a:	e8 69 f9 ff ff       	call   110c8 <outb>
   1175f:	83 c4 08             	add    $0x8,%esp
   11762:	eb 3d                	jmp    117a1 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11764:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11768:	68 a1 00 00 00       	push   $0xa1
   1176d:	e8 39 f9 ff ff       	call   110ab <inb>
   11772:	83 c4 04             	add    $0x4,%esp
   11775:	89 c2                	mov    %eax,%edx
   11777:	8b 45 08             	mov    0x8(%ebp),%eax
   1177a:	bb 01 00 00 00       	mov    $0x1,%ebx
   1177f:	89 c1                	mov    %eax,%ecx
   11781:	d3 e3                	shl    %cl,%ebx
   11783:	89 d8                	mov    %ebx,%eax
   11785:	f7 d0                	not    %eax
   11787:	21 d0                	and    %edx,%eax
   11789:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   1178c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11790:	50                   	push   %eax
   11791:	68 a1 00 00 00       	push   $0xa1
   11796:	e8 2d f9 ff ff       	call   110c8 <outb>
   1179b:	83 c4 08             	add    $0x8,%esp
   1179e:	eb 01                	jmp    117a1 <irq_enable+0x86>
        return;
   117a0:	90                   	nop
    }
}
   117a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   117a4:	c9                   	leave  
   117a5:	c3                   	ret    

000117a6 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   117a6:	55                   	push   %ebp
   117a7:	89 e5                	mov    %esp,%ebp
   117a9:	53                   	push   %ebx
   117aa:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   117ad:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   117b1:	7e 74                	jle    11827 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   117b3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   117b7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   117bb:	7f 30                	jg     117ed <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   117bd:	6a 21                	push   $0x21
   117bf:	e8 e7 f8 ff ff       	call   110ab <inb>
   117c4:	83 c4 04             	add    $0x4,%esp
   117c7:	89 c3                	mov    %eax,%ebx
   117c9:	8b 45 08             	mov    0x8(%ebp),%eax
   117cc:	ba 01 00 00 00       	mov    $0x1,%edx
   117d1:	89 c1                	mov    %eax,%ecx
   117d3:	d3 e2                	shl    %cl,%edx
   117d5:	89 d0                	mov    %edx,%eax
   117d7:	09 d8                	or     %ebx,%eax
   117d9:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   117dc:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   117e0:	50                   	push   %eax
   117e1:	6a 21                	push   $0x21
   117e3:	e8 e0 f8 ff ff       	call   110c8 <outb>
   117e8:	83 c4 08             	add    $0x8,%esp
   117eb:	eb 3b                	jmp    11828 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   117ed:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   117f1:	68 a1 00 00 00       	push   $0xa1
   117f6:	e8 b0 f8 ff ff       	call   110ab <inb>
   117fb:	83 c4 04             	add    $0x4,%esp
   117fe:	89 c3                	mov    %eax,%ebx
   11800:	8b 45 08             	mov    0x8(%ebp),%eax
   11803:	ba 01 00 00 00       	mov    $0x1,%edx
   11808:	89 c1                	mov    %eax,%ecx
   1180a:	d3 e2                	shl    %cl,%edx
   1180c:	89 d0                	mov    %edx,%eax
   1180e:	09 d8                	or     %ebx,%eax
   11810:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11813:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11817:	50                   	push   %eax
   11818:	68 a1 00 00 00       	push   $0xa1
   1181d:	e8 a6 f8 ff ff       	call   110c8 <outb>
   11822:	83 c4 08             	add    $0x8,%esp
   11825:	eb 01                	jmp    11828 <irq_disable+0x82>
        return;
   11827:	90                   	nop
    }
}
   11828:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1182b:	c9                   	leave  
   1182c:	c3                   	ret    

0001182d <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   1182d:	55                   	push   %ebp
   1182e:	89 e5                	mov    %esp,%ebp
    cli();
   11830:	e8 b2 f8 ff ff       	call   110e7 <cli>
}
   11835:	90                   	nop
   11836:	5d                   	pop    %ebp
   11837:	c3                   	ret    

00011838 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11838:	55                   	push   %ebp
   11839:	89 e5                	mov    %esp,%ebp
    sti();
   1183b:	e8 ae f8 ff ff       	call   110ee <sti>
}
   11840:	90                   	nop
   11841:	5d                   	pop    %ebp
   11842:	c3                   	ret    

00011843 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11843:	55                   	push   %ebp
   11844:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11846:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   1184a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1184e:	7e 0f                	jle    1185f <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11850:	6a 20                	push   $0x20
   11852:	68 a0 00 00 00       	push   $0xa0
   11857:	e8 6c f8 ff ff       	call   110c8 <outb>
   1185c:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   1185f:	6a 20                	push   $0x20
   11861:	6a 20                	push   $0x20
   11863:	e8 60 f8 ff ff       	call   110c8 <outb>
   11868:	83 c4 08             	add    $0x8,%esp
}
   1186b:	90                   	nop
   1186c:	c9                   	leave  
   1186d:	c3                   	ret    

0001186e <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   1186e:	55                   	push   %ebp
   1186f:	89 e5                	mov    %esp,%ebp
   11871:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11874:	e8 ab f8 ff ff       	call   11124 <read_eflags>
   11879:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1187c:	e8 ac ff ff ff       	call   1182d <irq_disable_global>
    return state;
   11881:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11884:	c9                   	leave  
   11885:	c3                   	ret    

00011886 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11886:	55                   	push   %ebp
   11887:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11889:	ff 75 08             	pushl  0x8(%ebp)
   1188c:	e8 a3 f8 ff ff       	call   11134 <write_eflags>
   11891:	83 c4 04             	add    $0x4,%esp
   11894:	90                   	nop
   11895:	c9                   	leave  
   11896:	c3                   	ret    

00011897 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11897:	55                   	push   %ebp
   11898:	89 e5                	mov    %esp,%ebp
   1189a:	83 ec 08             	sub    $0x8,%esp
   1189d:	8b 55 08             	mov    0x8(%ebp),%edx
   118a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118a7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   118aa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118ae:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118b2:	ee                   	out    %al,(%dx)
}
   118b3:	90                   	nop
   118b4:	c9                   	leave  
   118b5:	c3                   	ret    

000118b6 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   118b6:	55                   	push   %ebp
   118b7:	89 e5                	mov    %esp,%ebp
   118b9:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   118bc:	a1 c0 8d 01 00       	mov    0x18dc0,%eax
   118c1:	83 c0 01             	add    $0x1,%eax
   118c4:	a3 c0 8d 01 00       	mov    %eax,0x18dc0

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   118c9:	83 ec 0c             	sub    $0xc,%esp
   118cc:	6a 20                	push   $0x20
   118ce:	e8 70 ff ff ff       	call   11843 <pic_send_eoi>
   118d3:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   118d6:	e8 2f f4 ff ff       	call   10d0a <task_time_tick>
}
   118db:	90                   	nop
   118dc:	c9                   	leave  
   118dd:	c3                   	ret    

000118de <init_pit>:


static void init_pit(void) {
   118de:	55                   	push   %ebp
   118df:	89 e5                	mov    %esp,%ebp
   118e1:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   118e4:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   118eb:	6a 36                	push   $0x36
   118ed:	6a 43                	push   $0x43
   118ef:	e8 a3 ff ff ff       	call   11897 <outb>
   118f4:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   118f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118fa:	0f b6 c0             	movzbl %al,%eax
   118fd:	50                   	push   %eax
   118fe:	6a 40                	push   $0x40
   11900:	e8 92 ff ff ff       	call   11897 <outb>
   11905:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11908:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1190b:	c1 e8 08             	shr    $0x8,%eax
   1190e:	0f b6 c0             	movzbl %al,%eax
   11911:	50                   	push   %eax
   11912:	6a 40                	push   $0x40
   11914:	e8 7e ff ff ff       	call   11897 <outb>
   11919:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1191c:	83 ec 08             	sub    $0x8,%esp
   1191f:	68 a8 02 01 00       	push   $0x102a8
   11924:	6a 20                	push   $0x20
   11926:	e8 bb fd ff ff       	call   116e6 <irq_install>
   1192b:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1192e:	83 ec 0c             	sub    $0xc,%esp
   11931:	6a 20                	push   $0x20
   11933:	e8 e3 fd ff ff       	call   1171b <irq_enable>
   11938:	83 c4 10             	add    $0x10,%esp
}
   1193b:	90                   	nop
   1193c:	c9                   	leave  
   1193d:	c3                   	ret    

0001193e <timer_init>:

void timer_init(void) {
   1193e:	55                   	push   %ebp
   1193f:	89 e5                	mov    %esp,%ebp
   11941:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11944:	c7 05 c0 8d 01 00 00 	movl   $0x0,0x18dc0
   1194b:	00 00 00 
    init_pit();
   1194e:	e8 8b ff ff ff       	call   118de <init_pit>
   11953:	90                   	nop
   11954:	c9                   	leave  
   11955:	c3                   	ret    

00011956 <list_size>:
static inline int list_size(list_t* list) {
   11956:	55                   	push   %ebp
   11957:	89 e5                	mov    %esp,%ebp
    return list->count;
   11959:	8b 45 08             	mov    0x8(%ebp),%eax
   1195c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1195f:	5d                   	pop    %ebp
   11960:	c3                   	ret    

00011961 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11961:	55                   	push   %ebp
   11962:	89 e5                	mov    %esp,%ebp
    return list->first;
   11964:	8b 45 08             	mov    0x8(%ebp),%eax
   11967:	8b 00                	mov    (%eax),%eax
}
   11969:	5d                   	pop    %ebp
   1196a:	c3                   	ret    

0001196b <list_last>:

static inline list_node_t* list_last(list_t* list) {
   1196b:	55                   	push   %ebp
   1196c:	89 e5                	mov    %esp,%ebp
    return list->last;
   1196e:	8b 45 08             	mov    0x8(%ebp),%eax
   11971:	8b 40 04             	mov    0x4(%eax),%eax
}
   11974:	5d                   	pop    %ebp
   11975:	c3                   	ret    

00011976 <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   11976:	55                   	push   %ebp
   11977:	89 e5                	mov    %esp,%ebp
   11979:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   1197c:	8b 45 08             	mov    0x8(%ebp),%eax
   1197f:	8b 40 50             	mov    0x50(%eax),%eax
   11982:	85 c0                	test   %eax,%eax
   11984:	75 19                	jne    1199f <kernel_init+0x29>
   11986:	68 24 2f 01 00       	push   $0x12f24
   1198b:	68 2c 30 01 00       	push   $0x1302c
   11990:	6a 1a                	push   $0x1a
   11992:	68 48 2f 01 00       	push   $0x12f48
   11997:	e8 fe 0c 00 00       	call   1269a <pannic>
   1199c:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   1199f:	90                   	nop

    memory_init(boot_info);
   119a0:	83 ec 0c             	sub    $0xc,%esp
   119a3:	ff 75 08             	pushl  0x8(%ebp)
   119a6:	e8 01 ee ff ff       	call   107ac <memory_init>
   119ab:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   119ae:	e8 51 f6 ff ff       	call   11004 <cpu_init>

    log_init();
   119b3:	e8 4a 0f 00 00       	call   12902 <log_init>

    irq_init();
   119b8:	e8 69 fb ff ff       	call   11526 <irq_init>
    timer_init();
   119bd:	e8 7c ff ff ff       	call   1193e <timer_init>

    task_manager_init();
   119c2:	e8 2e f1 ff ff       	call   10af5 <task_manager_init>
}
   119c7:	90                   	nop
   119c8:	c9                   	leave  
   119c9:	c3                   	ret    

000119ca <init_task_entry>:
static uint32_t init_task_stack[1024];
static task_t first_task;

static sem_t sem;

void init_task_entry(void) {
   119ca:	55                   	push   %ebp
   119cb:	89 e5                	mov    %esp,%ebp
   119cd:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   119d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("int task: %d", count++);
   119d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119da:	8d 50 01             	lea    0x1(%eax),%edx
   119dd:	89 55 f4             	mov    %edx,-0xc(%ebp)
   119e0:	83 ec 08             	sub    $0x8,%esp
   119e3:	50                   	push   %eax
   119e4:	68 8d 2f 01 00       	push   $0x12f8d
   119e9:	e8 b1 0f 00 00       	call   1299f <log_printf>
   119ee:	83 c4 10             	add    $0x10,%esp

        sem_wait(&sem);
   119f1:	83 ec 0c             	sub    $0xc,%esp
   119f4:	68 54 9f 01 00       	push   $0x19f54
   119f9:	e8 1a 04 00 00       	call   11e18 <sem_wait>
   119fe:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(&init_task, task_first_task());
        // sys_sched_yield();
        sys_sleep(1000);
   11a01:	83 ec 0c             	sub    $0xc,%esp
   11a04:	68 e8 03 00 00       	push   $0x3e8
   11a09:	e8 26 f4 ff ff       	call   10e34 <sys_sleep>
   11a0e:	83 c4 10             	add    $0x10,%esp
        log_printf("int task: %d", count++);
   11a11:	eb c4                	jmp    119d7 <init_task_entry+0xd>

00011a13 <link_test>:
    }
}


void link_test(void) {
   11a13:	55                   	push   %ebp
   11a14:	89 e5                	mov    %esp,%ebp
   11a16:	56                   	push   %esi
   11a17:	53                   	push   %ebx
   11a18:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11a1b:	83 ec 0c             	sub    $0xc,%esp
   11a1e:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11a21:	50                   	push   %eax
   11a22:	e8 bc 0c 00 00       	call   126e3 <list_init>
   11a27:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11a2a:	83 ec 0c             	sub    $0xc,%esp
   11a2d:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11a30:	50                   	push   %eax
   11a31:	e8 20 ff ff ff       	call   11956 <list_size>
   11a36:	83 c4 10             	add    $0x10,%esp
   11a39:	89 c6                	mov    %eax,%esi
   11a3b:	83 ec 0c             	sub    $0xc,%esp
   11a3e:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11a41:	50                   	push   %eax
   11a42:	e8 24 ff ff ff       	call   1196b <list_last>
   11a47:	83 c4 10             	add    $0x10,%esp
   11a4a:	89 c3                	mov    %eax,%ebx
   11a4c:	83 ec 0c             	sub    $0xc,%esp
   11a4f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11a52:	50                   	push   %eax
   11a53:	e8 09 ff ff ff       	call   11961 <list_first>
   11a58:	83 c4 10             	add    $0x10,%esp
   11a5b:	56                   	push   %esi
   11a5c:	53                   	push   %ebx
   11a5d:	50                   	push   %eax
   11a5e:	68 9c 2f 01 00       	push   $0x12f9c
   11a63:	e8 37 0f 00 00       	call   1299f <log_printf>
   11a68:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11a6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a72:	eb 3b                	jmp    11aaf <link_test+0x9c>
        list_node_t* node = &nodes[i];
   11a74:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11a77:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a7a:	c1 e2 03             	shl    $0x3,%edx
   11a7d:	01 d0                	add    %edx,%eax
   11a7f:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11a82:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11a85:	83 ec 04             	sub    $0x4,%esp
   11a88:	50                   	push   %eax
   11a89:	ff 75 f4             	pushl  -0xc(%ebp)
   11a8c:	68 c5 2f 01 00       	push   $0x12fc5
   11a91:	e8 09 0f 00 00       	call   1299f <log_printf>
   11a96:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11a99:	83 ec 08             	sub    $0x8,%esp
   11a9c:	ff 75 dc             	pushl  -0x24(%ebp)
   11a9f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11aa2:	50                   	push   %eax
   11aa3:	e8 5e 0c 00 00       	call   12706 <list_insert_front>
   11aa8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11aab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11aaf:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11ab3:	7e bf                	jle    11a74 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   11ab5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11abc:	eb 33                	jmp    11af1 <link_test+0xde>
        list_remove_front(&list);
   11abe:	83 ec 0c             	sub    $0xc,%esp
   11ac1:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11ac4:	50                   	push   %eax
   11ac5:	e8 fe 0c 00 00       	call   127c8 <list_remove_front>
   11aca:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   11acd:	83 ec 0c             	sub    $0xc,%esp
   11ad0:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11ad3:	50                   	push   %eax
   11ad4:	e8 7d fe ff ff       	call   11956 <list_size>
   11ad9:	83 c4 10             	add    $0x10,%esp
   11adc:	83 ec 08             	sub    $0x8,%esp
   11adf:	50                   	push   %eax
   11ae0:	68 cd 2f 01 00       	push   $0x12fcd
   11ae5:	e8 b5 0e 00 00       	call   1299f <log_printf>
   11aea:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11aed:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11af1:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11af5:	7e c7                	jle    11abe <link_test+0xab>
    }

    list_init(&list);
   11af7:	83 ec 0c             	sub    $0xc,%esp
   11afa:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11afd:	50                   	push   %eax
   11afe:	e8 e0 0b 00 00       	call   126e3 <list_init>
   11b03:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11b06:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11b0d:	eb 3b                	jmp    11b4a <link_test+0x137>
        list_node_t* node = &nodes[i];
   11b0f:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11b12:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11b15:	c1 e2 03             	shl    $0x3,%edx
   11b18:	01 d0                	add    %edx,%eax
   11b1a:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11b1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11b20:	83 ec 04             	sub    $0x4,%esp
   11b23:	50                   	push   %eax
   11b24:	ff 75 ec             	pushl  -0x14(%ebp)
   11b27:	68 c5 2f 01 00       	push   $0x12fc5
   11b2c:	e8 6e 0e 00 00       	call   1299f <log_printf>
   11b31:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11b34:	83 ec 08             	sub    $0x8,%esp
   11b37:	ff 75 e0             	pushl  -0x20(%ebp)
   11b3a:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b3d:	50                   	push   %eax
   11b3e:	e8 22 0c 00 00       	call   12765 <list_insert_back>
   11b43:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11b46:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11b4a:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11b4e:	7e bf                	jle    11b0f <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11b50:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11b57:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11b5e:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11b65:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11b6c:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11b6f:	83 c0 04             	add    $0x4,%eax
   11b72:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11b75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11b79:	74 08                	je     11b83 <link_test+0x170>
   11b7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11b7e:	83 e8 04             	sub    $0x4,%eax
   11b81:	eb 05                	jmp    11b88 <link_test+0x175>
   11b83:	b8 00 00 00 00       	mov    $0x0,%eax
   11b88:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b8e:	8b 00                	mov    (%eax),%eax
   11b90:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11b95:	74 10                	je     11ba7 <link_test+0x194>
        log_printf("error!");
   11b97:	83 ec 0c             	sub    $0xc,%esp
   11b9a:	68 d2 2f 01 00       	push   $0x12fd2
   11b9f:	e8 fb 0d 00 00       	call   1299f <log_printf>
   11ba4:	83 c4 10             	add    $0x10,%esp
    }

}
   11ba7:	90                   	nop
   11ba8:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11bab:	5b                   	pop    %ebx
   11bac:	5e                   	pop    %esi
   11bad:	5d                   	pop    %ebp
   11bae:	c3                   	ret    

00011baf <init_main>:


void init_main(void) {
   11baf:	55                   	push   %ebp
   11bb0:	89 e5                	mov    %esp,%ebp
   11bb2:	83 ec 18             	sub    $0x18,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   11bb5:	83 ec 0c             	sub    $0xc,%esp
   11bb8:	68 d9 2f 01 00       	push   $0x12fd9
   11bbd:	e8 dd 0d 00 00       	call   1299f <log_printf>
   11bc2:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   11bc5:	83 ec 04             	sub    $0x4,%esp
   11bc8:	68 ef 2f 01 00       	push   $0x12fef
   11bcd:	68 f4 2f 01 00       	push   $0x12ff4
   11bd2:	68 fa 2f 01 00       	push   $0x12ffa
   11bd7:	e8 c3 0d 00 00       	call   1299f <log_printf>
   11bdc:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   11bdf:	83 ec 0c             	sub    $0xc,%esp
   11be2:	6a 61                	push   $0x61
   11be4:	68 56 34 12 00       	push   $0x123456
   11be9:	6a 85                	push   $0xffffff85
   11beb:	68 39 30 00 00       	push   $0x3039
   11bf0:	68 09 30 01 00       	push   $0x13009
   11bf5:	e8 a5 0d 00 00       	call   1299f <log_printf>
   11bfa:	83 c4 20             	add    $0x20,%esp

    //
    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   11bfd:	ba a0 9e 01 00       	mov    $0x19ea0,%edx
   11c02:	b8 ca 19 01 00       	mov    $0x119ca,%eax
   11c07:	52                   	push   %edx
   11c08:	50                   	push   %eax
   11c09:	68 15 30 01 00       	push   $0x13015
   11c0e:	68 e0 8d 01 00       	push   $0x18de0
   11c13:	e8 c9 ed ff ff       	call   109e1 <task_init>
   11c18:	83 c4 10             	add    $0x10,%esp
    //

    task_first_init();
   11c1b:	e8 3b ef ff ff       	call   10b5b <task_first_init>

    int count = 0;
   11c20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    // link_test();

    irq_enable_global();
   11c27:	e8 0c fc ff ff       	call   11838 <irq_enable_global>

    while (1) {
        log_printf("int main: %d", count++);
   11c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c2f:	8d 50 01             	lea    0x1(%eax),%edx
   11c32:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11c35:	83 ec 08             	sub    $0x8,%esp
   11c38:	50                   	push   %eax
   11c39:	68 1f 30 01 00       	push   $0x1301f
   11c3e:	e8 5c 0d 00 00       	call   1299f <log_printf>
   11c43:	83 c4 10             	add    $0x10,%esp
        // task_switch_from_to(task_first_task(), &init_task);
        // sys_sched_yield();
        sem_notify(&sem);
   11c46:	83 ec 0c             	sub    $0xc,%esp
   11c49:	68 54 9f 01 00       	push   $0x19f54
   11c4e:	e8 30 02 00 00       	call   11e83 <sem_notify>
   11c53:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11c56:	83 ec 0c             	sub    $0xc,%esp
   11c59:	68 e8 03 00 00       	push   $0x3e8
   11c5e:	e8 d1 f1 ff ff       	call   10e34 <sys_sleep>
   11c63:	83 c4 10             	add    $0x10,%esp
        log_printf("int main: %d", count++);
   11c66:	eb c4                	jmp    11c2c <init_main+0x7d>

00011c68 <list_size>:
static inline int list_size(list_t* list) {
   11c68:	55                   	push   %ebp
   11c69:	89 e5                	mov    %esp,%ebp
    return list->count;
   11c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11c71:	5d                   	pop    %ebp
   11c72:	c3                   	ret    

00011c73 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"

void mutex_init(mutex_t* mutex) {
   11c73:	55                   	push   %ebp
   11c74:	89 e5                	mov    %esp,%ebp
   11c76:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11c79:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t*) 0;
   11c83:	8b 45 08             	mov    0x8(%ebp),%eax
   11c86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c8f:	83 c0 08             	add    $0x8,%eax
   11c92:	83 ec 0c             	sub    $0xc,%esp
   11c95:	50                   	push   %eax
   11c96:	e8 48 0a 00 00       	call   126e3 <list_init>
   11c9b:	83 c4 10             	add    $0x10,%esp
}
   11c9e:	90                   	nop
   11c9f:	c9                   	leave  
   11ca0:	c3                   	ret    

00011ca1 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   11ca1:	55                   	push   %ebp
   11ca2:	89 e5                	mov    %esp,%ebp
   11ca4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11ca7:	e8 c2 fb ff ff       	call   1186e <irq_enter_protection>
   11cac:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11caf:	e8 90 ef ff ff       	call   10c44 <task_current>
   11cb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11cb7:	8b 45 08             	mov    0x8(%ebp),%eax
   11cba:	8b 40 04             	mov    0x4(%eax),%eax
   11cbd:	85 c0                	test   %eax,%eax
   11cbf:	75 14                	jne    11cd5 <mutex_acquire+0x34>
        mutex->locked_count = 1;
   11cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   11ccb:	8b 45 08             	mov    0x8(%ebp),%eax
   11cce:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11cd1:	89 10                	mov    %edx,(%eax)
   11cd3:	eb 47                	jmp    11d1c <mutex_acquire+0x7b>
    }
    else if (mutex->owner == curr) {
   11cd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd8:	8b 00                	mov    (%eax),%eax
   11cda:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11cdd:	75 11                	jne    11cf0 <mutex_acquire+0x4f>
        mutex->locked_count++;
   11cdf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ce2:	8b 40 04             	mov    0x4(%eax),%eax
   11ce5:	8d 50 01             	lea    0x1(%eax),%edx
   11ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   11ceb:	89 50 04             	mov    %edx,0x4(%eax)
   11cee:	eb 2c                	jmp    11d1c <mutex_acquire+0x7b>
    }
    else {
        task_set_blocked(curr);
   11cf0:	83 ec 0c             	sub    $0xc,%esp
   11cf3:	ff 75 f0             	pushl  -0x10(%ebp)
   11cf6:	e8 db ee ff ff       	call   10bd6 <task_set_blocked>
   11cfb:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   11cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d01:	8d 50 34             	lea    0x34(%eax),%edx
   11d04:	8b 45 08             	mov    0x8(%ebp),%eax
   11d07:	83 c0 08             	add    $0x8,%eax
   11d0a:	83 ec 08             	sub    $0x8,%esp
   11d0d:	52                   	push   %edx
   11d0e:	50                   	push   %eax
   11d0f:	e8 51 0a 00 00       	call   12765 <list_insert_back>
   11d14:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11d17:	e8 93 ef ff ff       	call   10caf <task_dispatch>
    }

    irq_leave_protection(state);
   11d1c:	83 ec 0c             	sub    $0xc,%esp
   11d1f:	ff 75 f4             	pushl  -0xc(%ebp)
   11d22:	e8 5f fb ff ff       	call   11886 <irq_leave_protection>
   11d27:	83 c4 10             	add    $0x10,%esp
}
   11d2a:	90                   	nop
   11d2b:	c9                   	leave  
   11d2c:	c3                   	ret    

00011d2d <mutex_release>:

void mutex_release(mutex_t* mutex) {
   11d2d:	55                   	push   %ebp
   11d2e:	89 e5                	mov    %esp,%ebp
   11d30:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11d33:	e8 36 fb ff ff       	call   1186e <irq_enter_protection>
   11d38:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11d3b:	e8 04 ef ff ff       	call   10c44 <task_current>
   11d40:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11d43:	8b 45 08             	mov    0x8(%ebp),%eax
   11d46:	8b 00                	mov    (%eax),%eax
   11d48:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11d4b:	0f 85 88 00 00 00    	jne    11dd9 <mutex_release+0xac>
        if (--mutex->locked_count == 0) {
   11d51:	8b 45 08             	mov    0x8(%ebp),%eax
   11d54:	8b 40 04             	mov    0x4(%eax),%eax
   11d57:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5d:	89 50 04             	mov    %edx,0x4(%eax)
   11d60:	8b 45 08             	mov    0x8(%ebp),%eax
   11d63:	8b 40 04             	mov    0x4(%eax),%eax
   11d66:	85 c0                	test   %eax,%eax
   11d68:	75 6f                	jne    11dd9 <mutex_release+0xac>
            mutex->owner = (task_t*)0;
   11d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_size(&mutex->wait_list)) {
   11d73:	8b 45 08             	mov    0x8(%ebp),%eax
   11d76:	83 c0 08             	add    $0x8,%eax
   11d79:	83 ec 0c             	sub    $0xc,%esp
   11d7c:	50                   	push   %eax
   11d7d:	e8 e6 fe ff ff       	call   11c68 <list_size>
   11d82:	83 c4 10             	add    $0x10,%esp
   11d85:	85 c0                	test   %eax,%eax
   11d87:	74 50                	je     11dd9 <mutex_release+0xac>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   11d89:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8c:	83 c0 08             	add    $0x8,%eax
   11d8f:	83 ec 0c             	sub    $0xc,%esp
   11d92:	50                   	push   %eax
   11d93:	e8 30 0a 00 00       	call   127c8 <list_remove_front>
   11d98:	83 c4 10             	add    $0x10,%esp
   11d9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   11d9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11da2:	74 08                	je     11dac <mutex_release+0x7f>
   11da4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11da7:	83 e8 34             	sub    $0x34,%eax
   11daa:	eb 05                	jmp    11db1 <mutex_release+0x84>
   11dac:	b8 00 00 00 00       	mov    $0x0,%eax
   11db1:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11db4:	83 ec 0c             	sub    $0xc,%esp
   11db7:	ff 75 e8             	pushl  -0x18(%ebp)
   11dba:	e8 e3 ed ff ff       	call   10ba2 <task_set_ready>
   11dbf:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   11dc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc5:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11dc8:	89 10                	mov    %edx,(%eax)
                mutex->locked_count = 1;
   11dca:	8b 45 08             	mov    0x8(%ebp),%eax
   11dcd:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

                task_dispatch();
   11dd4:	e8 d6 ee ff ff       	call   10caf <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   11dd9:	83 ec 0c             	sub    $0xc,%esp
   11ddc:	ff 75 f4             	pushl  -0xc(%ebp)
   11ddf:	e8 a2 fa ff ff       	call   11886 <irq_leave_protection>
   11de4:	83 c4 10             	add    $0x10,%esp
   11de7:	90                   	nop
   11de8:	c9                   	leave  
   11de9:	c3                   	ret    

00011dea <list_size>:
static inline int list_size(list_t* list) {
   11dea:	55                   	push   %ebp
   11deb:	89 e5                	mov    %esp,%ebp
    return list->count;
   11ded:	8b 45 08             	mov    0x8(%ebp),%eax
   11df0:	8b 40 08             	mov    0x8(%eax),%eax
}
   11df3:	5d                   	pop    %ebp
   11df4:	c3                   	ret    

00011df5 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   11df5:	55                   	push   %ebp
   11df6:	89 e5                	mov    %esp,%ebp
   11df8:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11dfb:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfe:	8b 55 0c             	mov    0xc(%ebp),%edx
   11e01:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11e03:	8b 45 08             	mov    0x8(%ebp),%eax
   11e06:	83 c0 04             	add    $0x4,%eax
   11e09:	83 ec 0c             	sub    $0xc,%esp
   11e0c:	50                   	push   %eax
   11e0d:	e8 d1 08 00 00       	call   126e3 <list_init>
   11e12:	83 c4 10             	add    $0x10,%esp
}
   11e15:	90                   	nop
   11e16:	c9                   	leave  
   11e17:	c3                   	ret    

00011e18 <sem_wait>:


void sem_wait(sem_t* sem) {
   11e18:	55                   	push   %ebp
   11e19:	89 e5                	mov    %esp,%ebp
   11e1b:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   11e1e:	e8 4b fa ff ff       	call   1186e <irq_enter_protection>
   11e23:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   11e26:	8b 45 08             	mov    0x8(%ebp),%eax
   11e29:	8b 00                	mov    (%eax),%eax
   11e2b:	85 c0                	test   %eax,%eax
   11e2d:	7e 0f                	jle    11e3e <sem_wait+0x26>
        sem->count--;
   11e2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e32:	8b 00                	mov    (%eax),%eax
   11e34:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e37:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3a:	89 10                	mov    %edx,(%eax)
   11e3c:	eb 34                	jmp    11e72 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   11e3e:	e8 01 ee ff ff       	call   10c44 <task_current>
   11e43:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   11e46:	83 ec 0c             	sub    $0xc,%esp
   11e49:	ff 75 f0             	pushl  -0x10(%ebp)
   11e4c:	e8 85 ed ff ff       	call   10bd6 <task_set_blocked>
   11e51:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   11e54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e57:	8d 50 34             	lea    0x34(%eax),%edx
   11e5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5d:	83 c0 04             	add    $0x4,%eax
   11e60:	83 ec 08             	sub    $0x8,%esp
   11e63:	52                   	push   %edx
   11e64:	50                   	push   %eax
   11e65:	e8 fb 08 00 00       	call   12765 <list_insert_back>
   11e6a:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11e6d:	e8 3d ee ff ff       	call   10caf <task_dispatch>
    }

    irq_leave_protection(state);
   11e72:	83 ec 0c             	sub    $0xc,%esp
   11e75:	ff 75 f4             	pushl  -0xc(%ebp)
   11e78:	e8 09 fa ff ff       	call   11886 <irq_leave_protection>
   11e7d:	83 c4 10             	add    $0x10,%esp
}
   11e80:	90                   	nop
   11e81:	c9                   	leave  
   11e82:	c3                   	ret    

00011e83 <sem_notify>:


void sem_notify(sem_t* sem) {
   11e83:	55                   	push   %ebp
   11e84:	89 e5                	mov    %esp,%ebp
   11e86:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e89:	e8 e0 f9 ff ff       	call   1186e <irq_enter_protection>
   11e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   11e91:	8b 45 08             	mov    0x8(%ebp),%eax
   11e94:	83 c0 04             	add    $0x4,%eax
   11e97:	83 ec 0c             	sub    $0xc,%esp
   11e9a:	50                   	push   %eax
   11e9b:	e8 4a ff ff ff       	call   11dea <list_size>
   11ea0:	83 c4 10             	add    $0x10,%esp
   11ea3:	85 c0                	test   %eax,%eax
   11ea5:	74 40                	je     11ee7 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   11ea7:	8b 45 08             	mov    0x8(%ebp),%eax
   11eaa:	83 c0 04             	add    $0x4,%eax
   11ead:	83 ec 0c             	sub    $0xc,%esp
   11eb0:	50                   	push   %eax
   11eb1:	e8 12 09 00 00       	call   127c8 <list_remove_front>
   11eb6:	83 c4 10             	add    $0x10,%esp
   11eb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   11ebc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ec0:	74 08                	je     11eca <sem_notify+0x47>
   11ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ec5:	83 e8 34             	sub    $0x34,%eax
   11ec8:	eb 05                	jmp    11ecf <sem_notify+0x4c>
   11eca:	b8 00 00 00 00       	mov    $0x0,%eax
   11ecf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11ed2:	83 ec 0c             	sub    $0xc,%esp
   11ed5:	ff 75 ec             	pushl  -0x14(%ebp)
   11ed8:	e8 c5 ec ff ff       	call   10ba2 <task_set_ready>
   11edd:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11ee0:	e8 ca ed ff ff       	call   10caf <task_dispatch>
   11ee5:	eb 0d                	jmp    11ef4 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   11ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   11eea:	8b 00                	mov    (%eax),%eax
   11eec:	8d 50 01             	lea    0x1(%eax),%edx
   11eef:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef2:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   11ef4:	83 ec 0c             	sub    $0xc,%esp
   11ef7:	ff 75 f4             	pushl  -0xc(%ebp)
   11efa:	e8 87 f9 ff ff       	call   11886 <irq_leave_protection>
   11eff:	83 c4 10             	add    $0x10,%esp
}
   11f02:	90                   	nop
   11f03:	c9                   	leave  
   11f04:	c3                   	ret    

00011f05 <sem_count>:

int sem_count(sem_t* sem) {
   11f05:	55                   	push   %ebp
   11f06:	89 e5                	mov    %esp,%ebp
   11f08:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11f0b:	e8 5e f9 ff ff       	call   1186e <irq_enter_protection>
   11f10:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   11f13:	8b 45 08             	mov    0x8(%ebp),%eax
   11f16:	8b 00                	mov    (%eax),%eax
   11f18:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   11f1b:	83 ec 0c             	sub    $0xc,%esp
   11f1e:	ff 75 f4             	pushl  -0xc(%ebp)
   11f21:	e8 60 f9 ff ff       	call   11886 <irq_leave_protection>
   11f26:	83 c4 10             	add    $0x10,%esp

    return count;
   11f29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f2c:	c9                   	leave  
   11f2d:	c3                   	ret    

00011f2e <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   11f2e:	55                   	push   %ebp
   11f2f:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   11f31:	8b 45 08             	mov    0x8(%ebp),%eax
   11f34:	83 c0 07             	add    $0x7,%eax
   11f37:	8d 50 07             	lea    0x7(%eax),%edx
   11f3a:	85 c0                	test   %eax,%eax
   11f3c:	0f 48 c2             	cmovs  %edx,%eax
   11f3f:	c1 f8 03             	sar    $0x3,%eax
}
   11f42:	5d                   	pop    %ebp
   11f43:	c3                   	ret    

00011f44 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   11f44:	55                   	push   %ebp
   11f45:	89 e5                	mov    %esp,%ebp
   11f47:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11f4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f4d:	8b 55 10             	mov    0x10(%ebp),%edx
   11f50:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11f52:	8b 45 08             	mov    0x8(%ebp),%eax
   11f55:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f58:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   11f5b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5e:	8b 00                	mov    (%eax),%eax
   11f60:	50                   	push   %eax
   11f61:	e8 c8 ff ff ff       	call   11f2e <bitmap_byte_count>
   11f66:	83 c4 04             	add    $0x4,%esp
   11f69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   11f6c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11f70:	74 07                	je     11f79 <bitmap_init+0x35>
   11f72:	ba ff 00 00 00       	mov    $0xff,%edx
   11f77:	eb 05                	jmp    11f7e <bitmap_init+0x3a>
   11f79:	ba 00 00 00 00       	mov    $0x0,%edx
   11f7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f81:	8b 40 04             	mov    0x4(%eax),%eax
   11f84:	83 ec 04             	sub    $0x4,%esp
   11f87:	ff 75 f4             	pushl  -0xc(%ebp)
   11f8a:	52                   	push   %edx
   11f8b:	50                   	push   %eax
   11f8c:	e8 a4 03 00 00       	call   12335 <kmemset>
   11f91:	83 c4 10             	add    $0x10,%esp
}
   11f94:	90                   	nop
   11f95:	c9                   	leave  
   11f96:	c3                   	ret    

00011f97 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   11f97:	55                   	push   %ebp
   11f98:	89 e5                	mov    %esp,%ebp
   11f9a:	56                   	push   %esi
   11f9b:	53                   	push   %ebx
   11f9c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11f9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11fa6:	e9 a2 00 00 00       	jmp    1204d <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   11fab:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11faf:	74 4a                	je     11ffb <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   11fb1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb4:	8b 50 04             	mov    0x4(%eax),%edx
   11fb7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fba:	8d 48 07             	lea    0x7(%eax),%ecx
   11fbd:	85 c0                	test   %eax,%eax
   11fbf:	0f 48 c1             	cmovs  %ecx,%eax
   11fc2:	c1 f8 03             	sar    $0x3,%eax
   11fc5:	89 c3                	mov    %eax,%ebx
   11fc7:	89 d8                	mov    %ebx,%eax
   11fc9:	01 d0                	add    %edx,%eax
   11fcb:	0f b6 00             	movzbl (%eax),%eax
   11fce:	89 c6                	mov    %eax,%esi
   11fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fd3:	99                   	cltd   
   11fd4:	c1 ea 1d             	shr    $0x1d,%edx
   11fd7:	01 d0                	add    %edx,%eax
   11fd9:	83 e0 07             	and    $0x7,%eax
   11fdc:	29 d0                	sub    %edx,%eax
   11fde:	ba 01 00 00 00       	mov    $0x1,%edx
   11fe3:	89 c1                	mov    %eax,%ecx
   11fe5:	d3 e2                	shl    %cl,%edx
   11fe7:	89 d0                	mov    %edx,%eax
   11fe9:	89 f2                	mov    %esi,%edx
   11feb:	09 c2                	or     %eax,%edx
   11fed:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff0:	8b 40 04             	mov    0x4(%eax),%eax
   11ff3:	89 d9                	mov    %ebx,%ecx
   11ff5:	01 c8                	add    %ecx,%eax
   11ff7:	88 10                	mov    %dl,(%eax)
   11ff9:	eb 4a                	jmp    12045 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11ffb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ffe:	8b 50 04             	mov    0x4(%eax),%edx
   12001:	8b 45 0c             	mov    0xc(%ebp),%eax
   12004:	8d 48 07             	lea    0x7(%eax),%ecx
   12007:	85 c0                	test   %eax,%eax
   12009:	0f 48 c1             	cmovs  %ecx,%eax
   1200c:	c1 f8 03             	sar    $0x3,%eax
   1200f:	89 c3                	mov    %eax,%ebx
   12011:	89 d8                	mov    %ebx,%eax
   12013:	01 d0                	add    %edx,%eax
   12015:	0f b6 00             	movzbl (%eax),%eax
   12018:	89 c6                	mov    %eax,%esi
   1201a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1201d:	99                   	cltd   
   1201e:	c1 ea 1d             	shr    $0x1d,%edx
   12021:	01 d0                	add    %edx,%eax
   12023:	83 e0 07             	and    $0x7,%eax
   12026:	29 d0                	sub    %edx,%eax
   12028:	ba 01 00 00 00       	mov    $0x1,%edx
   1202d:	89 c1                	mov    %eax,%ecx
   1202f:	d3 e2                	shl    %cl,%edx
   12031:	89 d0                	mov    %edx,%eax
   12033:	f7 d0                	not    %eax
   12035:	89 f2                	mov    %esi,%edx
   12037:	21 c2                	and    %eax,%edx
   12039:	8b 45 08             	mov    0x8(%ebp),%eax
   1203c:	8b 40 04             	mov    0x4(%eax),%eax
   1203f:	89 d9                	mov    %ebx,%ecx
   12041:	01 c8                	add    %ecx,%eax
   12043:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12045:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12049:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1204d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12050:	3b 45 10             	cmp    0x10(%ebp),%eax
   12053:	7d 0e                	jge    12063 <bitmap_set_bit+0xcc>
   12055:	8b 45 08             	mov    0x8(%ebp),%eax
   12058:	8b 00                	mov    (%eax),%eax
   1205a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1205d:	0f 8c 48 ff ff ff    	jl     11fab <bitmap_set_bit+0x14>
        }
    }
}
   12063:	90                   	nop
   12064:	83 c4 10             	add    $0x10,%esp
   12067:	5b                   	pop    %ebx
   12068:	5e                   	pop    %esi
   12069:	5d                   	pop    %ebp
   1206a:	c3                   	ret    

0001206b <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   1206b:	55                   	push   %ebp
   1206c:	89 e5                	mov    %esp,%ebp
   1206e:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   1206f:	8b 45 08             	mov    0x8(%ebp),%eax
   12072:	8b 50 04             	mov    0x4(%eax),%edx
   12075:	8b 45 0c             	mov    0xc(%ebp),%eax
   12078:	8d 48 07             	lea    0x7(%eax),%ecx
   1207b:	85 c0                	test   %eax,%eax
   1207d:	0f 48 c1             	cmovs  %ecx,%eax
   12080:	c1 f8 03             	sar    $0x3,%eax
   12083:	01 d0                	add    %edx,%eax
   12085:	0f b6 00             	movzbl (%eax),%eax
   12088:	0f b6 d8             	movzbl %al,%ebx
   1208b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1208e:	99                   	cltd   
   1208f:	c1 ea 1d             	shr    $0x1d,%edx
   12092:	01 d0                	add    %edx,%eax
   12094:	83 e0 07             	and    $0x7,%eax
   12097:	29 d0                	sub    %edx,%eax
   12099:	89 c1                	mov    %eax,%ecx
   1209b:	d3 fb                	sar    %cl,%ebx
   1209d:	89 d8                	mov    %ebx,%eax
   1209f:	83 e0 01             	and    $0x1,%eax
}
   120a2:	5b                   	pop    %ebx
   120a3:	5d                   	pop    %ebp
   120a4:	c3                   	ret    

000120a5 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   120a5:	55                   	push   %ebp
   120a6:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   120a8:	ff 75 0c             	pushl  0xc(%ebp)
   120ab:	ff 75 08             	pushl  0x8(%ebp)
   120ae:	e8 b8 ff ff ff       	call   1206b <bitmap_get_bit>
   120b3:	83 c4 08             	add    $0x8,%esp
   120b6:	85 c0                	test   %eax,%eax
   120b8:	0f 95 c0             	setne  %al
   120bb:	0f b6 c0             	movzbl %al,%eax
}
   120be:	c9                   	leave  
   120bf:	c3                   	ret    

000120c0 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   120c0:	55                   	push   %ebp
   120c1:	89 e5                	mov    %esp,%ebp
   120c3:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   120c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   120cd:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   120d4:	e9 85 00 00 00       	jmp    1215e <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   120d9:	ff 75 fc             	pushl  -0x4(%ebp)
   120dc:	ff 75 08             	pushl  0x8(%ebp)
   120df:	e8 87 ff ff ff       	call   1206b <bitmap_get_bit>
   120e4:	83 c4 08             	add    $0x8,%esp
   120e7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   120ea:	74 06                	je     120f2 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   120ec:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   120f0:	eb 6c                	jmp    1215e <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   120f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   120f5:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   120f8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   120ff:	eb 27                	jmp    12128 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12101:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12104:	8d 50 01             	lea    0x1(%eax),%edx
   12107:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1210a:	50                   	push   %eax
   1210b:	ff 75 08             	pushl  0x8(%ebp)
   1210e:	e8 58 ff ff ff       	call   1206b <bitmap_get_bit>
   12113:	83 c4 08             	add    $0x8,%esp
   12116:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12119:	74 09                	je     12124 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   1211b:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12122:	eb 16                	jmp    1213a <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12124:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12128:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1212b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1212e:	7d 0a                	jge    1213a <bitmap_alloc_nbits+0x7a>
   12130:	8b 45 08             	mov    0x8(%ebp),%eax
   12133:	8b 00                	mov    (%eax),%eax
   12135:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12138:	7c c7                	jl     12101 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   1213a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1213d:	3b 45 10             	cmp    0x10(%ebp),%eax
   12140:	7c 1c                	jl     1215e <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   12142:	8b 45 0c             	mov    0xc(%ebp),%eax
   12145:	f7 d0                	not    %eax
   12147:	50                   	push   %eax
   12148:	ff 75 10             	pushl  0x10(%ebp)
   1214b:	ff 75 f8             	pushl  -0x8(%ebp)
   1214e:	ff 75 08             	pushl  0x8(%ebp)
   12151:	e8 41 fe ff ff       	call   11f97 <bitmap_set_bit>
   12156:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   12159:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1215c:	eb 13                	jmp    12171 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1215e:	8b 45 08             	mov    0x8(%ebp),%eax
   12161:	8b 00                	mov    (%eax),%eax
   12163:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12166:	0f 8c 6d ff ff ff    	jl     120d9 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1216c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12171:	c9                   	leave  
   12172:	c3                   	ret    

00012173 <hlt>:
static inline void hlt(void) {
   12173:	55                   	push   %ebp
   12174:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12176:	f4                   	hlt    
}
   12177:	90                   	nop
   12178:	5d                   	pop    %ebp
   12179:	c3                   	ret    

0001217a <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   1217a:	55                   	push   %ebp
   1217b:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1217d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12181:	74 3b                	je     121be <kstrcpy+0x44>
   12183:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12187:	74 35                	je     121be <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   12189:	eb 17                	jmp    121a2 <kstrcpy+0x28>
        *dest++ = *src++;
   1218b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1218e:	8d 42 01             	lea    0x1(%edx),%eax
   12191:	89 45 0c             	mov    %eax,0xc(%ebp)
   12194:	8b 45 08             	mov    0x8(%ebp),%eax
   12197:	8d 48 01             	lea    0x1(%eax),%ecx
   1219a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1219d:	0f b6 12             	movzbl (%edx),%edx
   121a0:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   121a2:	8b 45 08             	mov    0x8(%ebp),%eax
   121a5:	0f b6 00             	movzbl (%eax),%eax
   121a8:	84 c0                	test   %al,%al
   121aa:	74 0a                	je     121b6 <kstrcpy+0x3c>
   121ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   121af:	0f b6 00             	movzbl (%eax),%eax
   121b2:	84 c0                	test   %al,%al
   121b4:	75 d5                	jne    1218b <kstrcpy+0x11>
    }
    *dest = '\0';
   121b6:	8b 45 08             	mov    0x8(%ebp),%eax
   121b9:	c6 00 00             	movb   $0x0,(%eax)
   121bc:	eb 01                	jmp    121bf <kstrcpy+0x45>
        return;
   121be:	90                   	nop
}
   121bf:	5d                   	pop    %ebp
   121c0:	c3                   	ret    

000121c1 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   121c1:	55                   	push   %ebp
   121c2:	89 e5                	mov    %esp,%ebp
   121c4:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   121c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121cb:	74 61                	je     1222e <kstrncpy+0x6d>
   121cd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121d1:	74 5b                	je     1222e <kstrncpy+0x6d>
   121d3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   121d7:	74 55                	je     1222e <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   121d9:	8b 45 08             	mov    0x8(%ebp),%eax
   121dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   121df:	8b 45 0c             	mov    0xc(%ebp),%eax
   121e2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   121e5:	eb 17                	jmp    121fe <kstrncpy+0x3d>
        *d++ = *s++;
   121e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
   121ea:	8d 42 01             	lea    0x1(%edx),%eax
   121ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
   121f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121f3:	8d 48 01             	lea    0x1(%eax),%ecx
   121f6:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   121f9:	0f b6 12             	movzbl (%edx),%edx
   121fc:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   121fe:	8b 45 10             	mov    0x10(%ebp),%eax
   12201:	8d 50 ff             	lea    -0x1(%eax),%edx
   12204:	89 55 10             	mov    %edx,0x10(%ebp)
   12207:	85 c0                	test   %eax,%eax
   12209:	7e 0a                	jle    12215 <kstrncpy+0x54>
   1220b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1220e:	0f b6 00             	movzbl (%eax),%eax
   12211:	84 c0                	test   %al,%al
   12213:	75 d2                	jne    121e7 <kstrncpy+0x26>
    }
    if (size == 0) {
   12215:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12219:	75 0b                	jne    12226 <kstrncpy+0x65>
        *(d - 1) = '\0';
   1221b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1221e:	83 e8 01             	sub    $0x1,%eax
   12221:	c6 00 00             	movb   $0x0,(%eax)
   12224:	eb 09                	jmp    1222f <kstrncpy+0x6e>
    } else {
        *d = '\0';
   12226:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12229:	c6 00 00             	movb   $0x0,(%eax)
   1222c:	eb 01                	jmp    1222f <kstrncpy+0x6e>
        return;
   1222e:	90                   	nop
    }
}
   1222f:	c9                   	leave  
   12230:	c3                   	ret    

00012231 <kstrlen>:


int kstrlen(const char *str) {
   12231:	55                   	push   %ebp
   12232:	89 e5                	mov    %esp,%ebp
   12234:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12237:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1223b:	75 07                	jne    12244 <kstrlen+0x13>
        return 0;
   1223d:	b8 00 00 00 00       	mov    $0x0,%eax
   12242:	eb 26                	jmp    1226a <kstrlen+0x39>
    }

    const char *c = str;
   12244:	8b 45 08             	mov    0x8(%ebp),%eax
   12247:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   1224a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   12251:	eb 04                	jmp    12257 <kstrlen+0x26>
        len++;
   12253:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   12257:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1225a:	8d 50 01             	lea    0x1(%eax),%edx
   1225d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12260:	0f b6 00             	movzbl (%eax),%eax
   12263:	84 c0                	test   %al,%al
   12265:	75 ec                	jne    12253 <kstrlen+0x22>
    }

    return len;
   12267:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1226a:	c9                   	leave  
   1226b:	c3                   	ret    

0001226c <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   1226c:	55                   	push   %ebp
   1226d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   1226f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12273:	74 06                	je     1227b <kstrncmp+0xf>
   12275:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12279:	75 0f                	jne    1228a <kstrncmp+0x1e>
        return -1;
   1227b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12280:	eb 62                	jmp    122e4 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12282:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12286:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   1228a:	8b 45 08             	mov    0x8(%ebp),%eax
   1228d:	0f b6 00             	movzbl (%eax),%eax
   12290:	84 c0                	test   %al,%al
   12292:	74 20                	je     122b4 <kstrncmp+0x48>
   12294:	8b 45 0c             	mov    0xc(%ebp),%eax
   12297:	0f b6 00             	movzbl (%eax),%eax
   1229a:	84 c0                	test   %al,%al
   1229c:	74 16                	je     122b4 <kstrncmp+0x48>
   1229e:	8b 45 08             	mov    0x8(%ebp),%eax
   122a1:	0f b6 10             	movzbl (%eax),%edx
   122a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   122a7:	0f b6 00             	movzbl (%eax),%eax
   122aa:	38 c2                	cmp    %al,%dl
   122ac:	75 06                	jne    122b4 <kstrncmp+0x48>
   122ae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122b2:	75 ce                	jne    12282 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   122b4:	8b 45 08             	mov    0x8(%ebp),%eax
   122b7:	0f b6 00             	movzbl (%eax),%eax
   122ba:	84 c0                	test   %al,%al
   122bc:	74 21                	je     122df <kstrncmp+0x73>
   122be:	8b 45 0c             	mov    0xc(%ebp),%eax
   122c1:	0f b6 00             	movzbl (%eax),%eax
   122c4:	84 c0                	test   %al,%al
   122c6:	74 17                	je     122df <kstrncmp+0x73>
   122c8:	8b 45 08             	mov    0x8(%ebp),%eax
   122cb:	0f b6 10             	movzbl (%eax),%edx
   122ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   122d1:	0f b6 00             	movzbl (%eax),%eax
   122d4:	38 c2                	cmp    %al,%dl
   122d6:	74 07                	je     122df <kstrncmp+0x73>
   122d8:	b8 01 00 00 00       	mov    $0x1,%eax
   122dd:	eb 05                	jmp    122e4 <kstrncmp+0x78>
   122df:	b8 00 00 00 00       	mov    $0x0,%eax
}
   122e4:	5d                   	pop    %ebp
   122e5:	c3                   	ret    

000122e6 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   122e6:	55                   	push   %ebp
   122e7:	89 e5                	mov    %esp,%ebp
   122e9:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   122ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122f0:	74 40                	je     12332 <kmemcpy+0x4c>
   122f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122f6:	74 3a                	je     12332 <kmemcpy+0x4c>
   122f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122fc:	74 34                	je     12332 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   122fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   12301:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12304:	8b 45 08             	mov    0x8(%ebp),%eax
   12307:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1230a:	eb 17                	jmp    12323 <kmemcpy+0x3d>
        *d++ = *s++;
   1230c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1230f:	8d 42 01             	lea    0x1(%edx),%eax
   12312:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12315:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12318:	8d 48 01             	lea    0x1(%eax),%ecx
   1231b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1231e:	0f b6 12             	movzbl (%edx),%edx
   12321:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12323:	8b 45 10             	mov    0x10(%ebp),%eax
   12326:	8d 50 ff             	lea    -0x1(%eax),%edx
   12329:	89 55 10             	mov    %edx,0x10(%ebp)
   1232c:	85 c0                	test   %eax,%eax
   1232e:	75 dc                	jne    1230c <kmemcpy+0x26>
   12330:	eb 01                	jmp    12333 <kmemcpy+0x4d>
        return;
   12332:	90                   	nop
    }
}
   12333:	c9                   	leave  
   12334:	c3                   	ret    

00012335 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12335:	55                   	push   %ebp
   12336:	89 e5                	mov    %esp,%ebp
   12338:	83 ec 14             	sub    $0x14,%esp
   1233b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1233e:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12345:	74 2c                	je     12373 <kmemset+0x3e>
   12347:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1234b:	74 26                	je     12373 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   1234d:	8b 45 08             	mov    0x8(%ebp),%eax
   12350:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12353:	eb 0f                	jmp    12364 <kmemset+0x2f>
        *d++ = v;
   12355:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12358:	8d 50 01             	lea    0x1(%eax),%edx
   1235b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1235e:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12362:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12364:	8b 45 10             	mov    0x10(%ebp),%eax
   12367:	8d 50 ff             	lea    -0x1(%eax),%edx
   1236a:	89 55 10             	mov    %edx,0x10(%ebp)
   1236d:	85 c0                	test   %eax,%eax
   1236f:	75 e4                	jne    12355 <kmemset+0x20>
   12371:	eb 01                	jmp    12374 <kmemset+0x3f>
        return;
   12373:	90                   	nop
    }
}
   12374:	c9                   	leave  
   12375:	c3                   	ret    

00012376 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12376:	55                   	push   %ebp
   12377:	89 e5                	mov    %esp,%ebp
   12379:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   1237c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12380:	74 06                	je     12388 <kmemcmp+0x12>
   12382:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12386:	75 07                	jne    1238f <kmemcmp+0x19>
        return 1;
   12388:	b8 01 00 00 00       	mov    $0x1,%eax
   1238d:	eb 43                	jmp    123d2 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   1238f:	8b 45 08             	mov    0x8(%ebp),%eax
   12392:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12395:	8b 45 0c             	mov    0xc(%ebp),%eax
   12398:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1239b:	eb 23                	jmp    123c0 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   1239d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123a0:	8d 50 01             	lea    0x1(%eax),%edx
   123a3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   123a6:	0f b6 08             	movzbl (%eax),%ecx
   123a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   123ac:	8d 50 01             	lea    0x1(%eax),%edx
   123af:	89 55 f8             	mov    %edx,-0x8(%ebp)
   123b2:	0f b6 00             	movzbl (%eax),%eax
   123b5:	38 c1                	cmp    %al,%cl
   123b7:	74 07                	je     123c0 <kmemcmp+0x4a>
            return 1;
   123b9:	b8 01 00 00 00       	mov    $0x1,%eax
   123be:	eb 12                	jmp    123d2 <kmemcmp+0x5c>
    while (size--) {
   123c0:	8b 45 10             	mov    0x10(%ebp),%eax
   123c3:	8d 50 ff             	lea    -0x1(%eax),%edx
   123c6:	89 55 10             	mov    %edx,0x10(%ebp)
   123c9:	85 c0                	test   %eax,%eax
   123cb:	75 d0                	jne    1239d <kmemcmp+0x27>
        }
    }

    return 0;
   123cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   123d2:	c9                   	leave  
   123d3:	c3                   	ret    

000123d4 <kitoa>:


void kitoa(char *buf, int num, int base) {
   123d4:	55                   	push   %ebp
   123d5:	89 e5                	mov    %esp,%ebp
   123d7:	53                   	push   %ebx
   123d8:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   123db:	8b 45 08             	mov    0x8(%ebp),%eax
   123de:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   123e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   123e4:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   123e7:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   123eb:	74 1d                	je     1240a <kitoa+0x36>
   123ed:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   123f1:	74 17                	je     1240a <kitoa+0x36>
   123f3:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   123f7:	74 11                	je     1240a <kitoa+0x36>
   123f9:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   123fd:	74 0b                	je     1240a <kitoa+0x36>
        *p = '\0';
   123ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12402:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12405:	e9 03 01 00 00       	jmp    1250d <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1240a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12411:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12415:	79 19                	jns    12430 <kitoa+0x5c>
   12417:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1241b:	75 13                	jne    12430 <kitoa+0x5c>
        *p++ = '-';
   1241d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12420:	8d 50 01             	lea    0x1(%eax),%edx
   12423:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12426:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12429:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12430:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12434:	74 3b                	je     12471 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12436:	8b 0d 30 40 01 00    	mov    0x14030,%ecx
   1243c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1243f:	99                   	cltd   
   12440:	f7 7d 10             	idivl  0x10(%ebp)
   12443:	89 d0                	mov    %edx,%eax
   12445:	83 c0 0f             	add    $0xf,%eax
   12448:	01 c8                	add    %ecx,%eax
   1244a:	0f b6 00             	movzbl (%eax),%eax
   1244d:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12450:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12453:	8d 50 01             	lea    0x1(%eax),%edx
   12456:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12459:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1245d:	88 10                	mov    %dl,(%eax)
            num /= base;
   1245f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12462:	99                   	cltd   
   12463:	f7 7d 10             	idivl  0x10(%ebp)
   12466:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12469:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1246d:	75 c7                	jne    12436 <kitoa+0x62>
   1246f:	eb 4b                	jmp    124bc <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12471:	8b 45 0c             	mov    0xc(%ebp),%eax
   12474:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12477:	8b 0d 30 40 01 00    	mov    0x14030,%ecx
   1247d:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12480:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12483:	ba 00 00 00 00       	mov    $0x0,%edx
   12488:	f7 f3                	div    %ebx
   1248a:	89 d0                	mov    %edx,%eax
   1248c:	83 c0 0f             	add    $0xf,%eax
   1248f:	01 c8                	add    %ecx,%eax
   12491:	0f b6 00             	movzbl (%eax),%eax
   12494:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12497:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1249a:	8d 50 01             	lea    0x1(%eax),%edx
   1249d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124a0:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   124a4:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   124a6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   124a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124ac:	ba 00 00 00 00       	mov    $0x0,%edx
   124b1:	f7 f3                	div    %ebx
   124b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   124b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124ba:	75 bb                	jne    12477 <kitoa+0xa3>
    }
    *p-- = '\0';
   124bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124bf:	8d 50 ff             	lea    -0x1(%eax),%edx
   124c2:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124c5:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   124c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   124cc:	74 08                	je     124d6 <kitoa+0x102>
   124ce:	8b 45 08             	mov    0x8(%ebp),%eax
   124d1:	83 c0 01             	add    $0x1,%eax
   124d4:	eb 03                	jmp    124d9 <kitoa+0x105>
   124d6:	8b 45 08             	mov    0x8(%ebp),%eax
   124d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   124dc:	eb 27                	jmp    12505 <kitoa+0x131>
        char ch = *start;
   124de:	8b 45 ec             	mov    -0x14(%ebp),%eax
   124e1:	0f b6 00             	movzbl (%eax),%eax
   124e4:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   124e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124ea:	0f b6 10             	movzbl (%eax),%edx
   124ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
   124f0:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   124f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124f5:	8d 50 ff             	lea    -0x1(%eax),%edx
   124f8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124fb:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   124ff:	88 10                	mov    %dl,(%eax)
        start++;
   12501:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12505:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12508:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1250b:	72 d1                	jb     124de <kitoa+0x10a>
    }
}
   1250d:	83 c4 20             	add    $0x20,%esp
   12510:	5b                   	pop    %ebx
   12511:	5d                   	pop    %ebp
   12512:	c3                   	ret    

00012513 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12513:	55                   	push   %ebp
   12514:	89 e5                	mov    %esp,%ebp
   12516:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12519:	8d 45 10             	lea    0x10(%ebp),%eax
   1251c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   1251f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12522:	83 ec 04             	sub    $0x4,%esp
   12525:	50                   	push   %eax
   12526:	ff 75 0c             	pushl  0xc(%ebp)
   12529:	ff 75 08             	pushl  0x8(%ebp)
   1252c:	e8 06 00 00 00       	call   12537 <kvsprintf>
   12531:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12534:	90                   	nop
   12535:	c9                   	leave  
   12536:	c3                   	ret    

00012537 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12537:	55                   	push   %ebp
   12538:	89 e5                	mov    %esp,%ebp
   1253a:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   1253d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12544:	8b 45 08             	mov    0x8(%ebp),%eax
   12547:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   1254a:	e9 2f 01 00 00       	jmp    1267e <kvsprintf+0x147>
        switch (state) {
   1254f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12552:	85 c0                	test   %eax,%eax
   12554:	74 0a                	je     12560 <kvsprintf+0x29>
   12556:	83 f8 01             	cmp    $0x1,%eax
   12559:	74 2b                	je     12586 <kvsprintf+0x4f>
   1255b:	e9 1e 01 00 00       	jmp    1267e <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12560:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12564:	75 0c                	jne    12572 <kvsprintf+0x3b>
                state = READ_FMT;
   12566:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1256d:	e9 0c 01 00 00       	jmp    1267e <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12572:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12575:	8d 50 01             	lea    0x1(%eax),%edx
   12578:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1257b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1257f:	88 10                	mov    %dl,(%eax)
            }
            break;
   12581:	e9 f8 00 00 00       	jmp    1267e <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12586:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1258a:	75 31                	jne    125bd <kvsprintf+0x86>
                int num = va_arg(args, int);
   1258c:	8b 45 10             	mov    0x10(%ebp),%eax
   1258f:	8d 50 04             	lea    0x4(%eax),%edx
   12592:	89 55 10             	mov    %edx,0x10(%ebp)
   12595:	8b 00                	mov    (%eax),%eax
   12597:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   1259a:	6a 0a                	push   $0xa
   1259c:	ff 75 e4             	pushl  -0x1c(%ebp)
   1259f:	ff 75 f8             	pushl  -0x8(%ebp)
   125a2:	e8 2d fe ff ff       	call   123d4 <kitoa>
   125a7:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   125aa:	ff 75 f8             	pushl  -0x8(%ebp)
   125ad:	e8 7f fc ff ff       	call   12231 <kstrlen>
   125b2:	83 c4 04             	add    $0x4,%esp
   125b5:	01 45 f8             	add    %eax,-0x8(%ebp)
   125b8:	e9 b9 00 00 00       	jmp    12676 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   125bd:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   125c1:	75 46                	jne    12609 <kvsprintf+0xd2>
                *curr++ = '0';
   125c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125c6:	8d 50 01             	lea    0x1(%eax),%edx
   125c9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125cc:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   125cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125d2:	8d 50 01             	lea    0x1(%eax),%edx
   125d5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125d8:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   125db:	8b 45 10             	mov    0x10(%ebp),%eax
   125de:	8d 50 04             	lea    0x4(%eax),%edx
   125e1:	89 55 10             	mov    %edx,0x10(%ebp)
   125e4:	8b 00                	mov    (%eax),%eax
   125e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   125e9:	6a 10                	push   $0x10
   125eb:	ff 75 e8             	pushl  -0x18(%ebp)
   125ee:	ff 75 f8             	pushl  -0x8(%ebp)
   125f1:	e8 de fd ff ff       	call   123d4 <kitoa>
   125f6:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   125f9:	ff 75 f8             	pushl  -0x8(%ebp)
   125fc:	e8 30 fc ff ff       	call   12231 <kstrlen>
   12601:	83 c4 04             	add    $0x4,%esp
   12604:	01 45 f8             	add    %eax,-0x8(%ebp)
   12607:	eb 6d                	jmp    12676 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12609:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1260d:	75 1f                	jne    1262e <kvsprintf+0xf7>
                char c = va_arg(args, int);
   1260f:	8b 45 10             	mov    0x10(%ebp),%eax
   12612:	8d 50 04             	lea    0x4(%eax),%edx
   12615:	89 55 10             	mov    %edx,0x10(%ebp)
   12618:	8b 00                	mov    (%eax),%eax
   1261a:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   1261d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12620:	8d 50 01             	lea    0x1(%eax),%edx
   12623:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12626:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1262a:	88 10                	mov    %dl,(%eax)
   1262c:	eb 48                	jmp    12676 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   1262e:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12632:	75 42                	jne    12676 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12634:	8b 45 10             	mov    0x10(%ebp),%eax
   12637:	8d 50 04             	lea    0x4(%eax),%edx
   1263a:	89 55 10             	mov    %edx,0x10(%ebp)
   1263d:	8b 00                	mov    (%eax),%eax
   1263f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12642:	ff 75 f4             	pushl  -0xc(%ebp)
   12645:	e8 e7 fb ff ff       	call   12231 <kstrlen>
   1264a:	83 c4 04             	add    $0x4,%esp
   1264d:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12650:	eb 17                	jmp    12669 <kvsprintf+0x132>
                    *curr++ = *str++;
   12652:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12655:	8d 42 01             	lea    0x1(%edx),%eax
   12658:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1265b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1265e:	8d 48 01             	lea    0x1(%eax),%ecx
   12661:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12664:	0f b6 12             	movzbl (%edx),%edx
   12667:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12669:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1266c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1266f:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12672:	85 c0                	test   %eax,%eax
   12674:	75 dc                	jne    12652 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12676:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1267d:	90                   	nop
    while ((ch = *fmt++)) {
   1267e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12681:	8d 50 01             	lea    0x1(%eax),%edx
   12684:	89 55 0c             	mov    %edx,0xc(%ebp)
   12687:	0f b6 00             	movzbl (%eax),%eax
   1268a:	88 45 ef             	mov    %al,-0x11(%ebp)
   1268d:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12691:	0f 85 b8 fe ff ff    	jne    1254f <kvsprintf+0x18>
        }
    }
}
   12697:	90                   	nop
   12698:	c9                   	leave  
   12699:	c3                   	ret    

0001269a <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   1269a:	55                   	push   %ebp
   1269b:	89 e5                	mov    %esp,%ebp
   1269d:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   126a0:	83 ec 08             	sub    $0x8,%esp
   126a3:	ff 75 14             	pushl  0x14(%ebp)
   126a6:	68 38 30 01 00       	push   $0x13038
   126ab:	e8 ef 02 00 00       	call   1299f <log_printf>
   126b0:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   126b3:	ff 75 10             	pushl  0x10(%ebp)
   126b6:	ff 75 0c             	pushl  0xc(%ebp)
   126b9:	ff 75 08             	pushl  0x8(%ebp)
   126bc:	68 4a 30 01 00       	push   $0x1304a
   126c1:	e8 d9 02 00 00       	call   1299f <log_printf>
   126c6:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   126c9:	e8 a5 fa ff ff       	call   12173 <hlt>
   126ce:	eb f9                	jmp    126c9 <pannic+0x2f>

000126d0 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   126d0:	55                   	push   %ebp
   126d1:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   126d3:	8b 45 08             	mov    0x8(%ebp),%eax
   126d6:	8b 40 08             	mov    0x8(%eax),%eax
   126d9:	85 c0                	test   %eax,%eax
   126db:	0f 94 c0             	sete   %al
   126de:	0f b6 c0             	movzbl %al,%eax
}
   126e1:	5d                   	pop    %ebp
   126e2:	c3                   	ret    

000126e3 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   126e3:	55                   	push   %ebp
   126e4:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   126e6:	8b 45 08             	mov    0x8(%ebp),%eax
   126e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   126ef:	8b 45 08             	mov    0x8(%ebp),%eax
   126f2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   126f9:	8b 45 08             	mov    0x8(%ebp),%eax
   126fc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12703:	90                   	nop
   12704:	5d                   	pop    %ebp
   12705:	c3                   	ret    

00012706 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12706:	55                   	push   %ebp
   12707:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12709:	8b 45 08             	mov    0x8(%ebp),%eax
   1270c:	8b 10                	mov    (%eax),%edx
   1270e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12711:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12714:	8b 45 0c             	mov    0xc(%ebp),%eax
   12717:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1271d:	ff 75 08             	pushl  0x8(%ebp)
   12720:	e8 ab ff ff ff       	call   126d0 <list_is_empty>
   12725:	83 c4 04             	add    $0x4,%esp
   12728:	85 c0                	test   %eax,%eax
   1272a:	74 15                	je     12741 <list_insert_front+0x3b>
        list->last = list->first = node;
   1272c:	8b 45 08             	mov    0x8(%ebp),%eax
   1272f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12732:	89 10                	mov    %edx,(%eax)
   12734:	8b 45 08             	mov    0x8(%ebp),%eax
   12737:	8b 10                	mov    (%eax),%edx
   12739:	8b 45 08             	mov    0x8(%ebp),%eax
   1273c:	89 50 04             	mov    %edx,0x4(%eax)
   1273f:	eb 12                	jmp    12753 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12741:	8b 45 08             	mov    0x8(%ebp),%eax
   12744:	8b 00                	mov    (%eax),%eax
   12746:	8b 55 0c             	mov    0xc(%ebp),%edx
   12749:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1274b:	8b 45 08             	mov    0x8(%ebp),%eax
   1274e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12751:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12753:	8b 45 08             	mov    0x8(%ebp),%eax
   12756:	8b 40 08             	mov    0x8(%eax),%eax
   12759:	8d 50 01             	lea    0x1(%eax),%edx
   1275c:	8b 45 08             	mov    0x8(%ebp),%eax
   1275f:	89 50 08             	mov    %edx,0x8(%eax)
}
   12762:	90                   	nop
   12763:	c9                   	leave  
   12764:	c3                   	ret    

00012765 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12765:	55                   	push   %ebp
   12766:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12768:	8b 45 08             	mov    0x8(%ebp),%eax
   1276b:	8b 50 04             	mov    0x4(%eax),%edx
   1276e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12771:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12773:	8b 45 0c             	mov    0xc(%ebp),%eax
   12776:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   1277d:	ff 75 08             	pushl  0x8(%ebp)
   12780:	e8 4b ff ff ff       	call   126d0 <list_is_empty>
   12785:	83 c4 04             	add    $0x4,%esp
   12788:	85 c0                	test   %eax,%eax
   1278a:	74 15                	je     127a1 <list_insert_back+0x3c>
        list->last = list->first = node;
   1278c:	8b 45 08             	mov    0x8(%ebp),%eax
   1278f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12792:	89 10                	mov    %edx,(%eax)
   12794:	8b 45 08             	mov    0x8(%ebp),%eax
   12797:	8b 10                	mov    (%eax),%edx
   12799:	8b 45 08             	mov    0x8(%ebp),%eax
   1279c:	89 50 04             	mov    %edx,0x4(%eax)
   1279f:	eb 15                	jmp    127b6 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   127a1:	8b 45 08             	mov    0x8(%ebp),%eax
   127a4:	8b 40 04             	mov    0x4(%eax),%eax
   127a7:	8b 55 0c             	mov    0xc(%ebp),%edx
   127aa:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   127ad:	8b 45 08             	mov    0x8(%ebp),%eax
   127b0:	8b 55 0c             	mov    0xc(%ebp),%edx
   127b3:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   127b6:	8b 45 08             	mov    0x8(%ebp),%eax
   127b9:	8b 40 08             	mov    0x8(%eax),%eax
   127bc:	8d 50 01             	lea    0x1(%eax),%edx
   127bf:	8b 45 08             	mov    0x8(%ebp),%eax
   127c2:	89 50 08             	mov    %edx,0x8(%eax)
}
   127c5:	90                   	nop
   127c6:	c9                   	leave  
   127c7:	c3                   	ret    

000127c8 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   127c8:	55                   	push   %ebp
   127c9:	89 e5                	mov    %esp,%ebp
   127cb:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   127ce:	ff 75 08             	pushl  0x8(%ebp)
   127d1:	e8 fa fe ff ff       	call   126d0 <list_is_empty>
   127d6:	83 c4 04             	add    $0x4,%esp
   127d9:	85 c0                	test   %eax,%eax
   127db:	74 07                	je     127e4 <list_remove_front+0x1c>
        return (list_node_t*)0;
   127dd:	b8 00 00 00 00       	mov    $0x0,%eax
   127e2:	eb 5b                	jmp    1283f <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   127e4:	8b 45 08             	mov    0x8(%ebp),%eax
   127e7:	8b 00                	mov    (%eax),%eax
   127e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   127ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ef:	8b 50 04             	mov    0x4(%eax),%edx
   127f2:	8b 45 08             	mov    0x8(%ebp),%eax
   127f5:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   127f7:	8b 45 08             	mov    0x8(%ebp),%eax
   127fa:	8b 00                	mov    (%eax),%eax
   127fc:	85 c0                	test   %eax,%eax
   127fe:	75 0c                	jne    1280c <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12800:	8b 45 08             	mov    0x8(%ebp),%eax
   12803:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1280a:	eb 0c                	jmp    12818 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   1280c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280f:	8b 40 04             	mov    0x4(%eax),%eax
   12812:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12818:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1281b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12822:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12825:	8b 50 04             	mov    0x4(%eax),%edx
   12828:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1282b:	89 10                	mov    %edx,(%eax)
    list->count--;
   1282d:	8b 45 08             	mov    0x8(%ebp),%eax
   12830:	8b 40 08             	mov    0x8(%eax),%eax
   12833:	8d 50 ff             	lea    -0x1(%eax),%edx
   12836:	8b 45 08             	mov    0x8(%ebp),%eax
   12839:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   1283c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1283f:	c9                   	leave  
   12840:	c3                   	ret    

00012841 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12841:	55                   	push   %ebp
   12842:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12844:	8b 45 08             	mov    0x8(%ebp),%eax
   12847:	8b 00                	mov    (%eax),%eax
   12849:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1284c:	75 0b                	jne    12859 <list_remove+0x18>
        list->first = node->next;
   1284e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12851:	8b 50 04             	mov    0x4(%eax),%edx
   12854:	8b 45 08             	mov    0x8(%ebp),%eax
   12857:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12859:	8b 45 08             	mov    0x8(%ebp),%eax
   1285c:	8b 40 04             	mov    0x4(%eax),%eax
   1285f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12862:	75 0b                	jne    1286f <list_remove+0x2e>
        list->last = node->pre;
   12864:	8b 45 0c             	mov    0xc(%ebp),%eax
   12867:	8b 10                	mov    (%eax),%edx
   12869:	8b 45 08             	mov    0x8(%ebp),%eax
   1286c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   1286f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12872:	8b 00                	mov    (%eax),%eax
   12874:	85 c0                	test   %eax,%eax
   12876:	74 0e                	je     12886 <list_remove+0x45>
        node->pre->next = node->next;
   12878:	8b 45 0c             	mov    0xc(%ebp),%eax
   1287b:	8b 00                	mov    (%eax),%eax
   1287d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12880:	8b 52 04             	mov    0x4(%edx),%edx
   12883:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12886:	8b 45 0c             	mov    0xc(%ebp),%eax
   12889:	8b 40 04             	mov    0x4(%eax),%eax
   1288c:	85 c0                	test   %eax,%eax
   1288e:	74 0d                	je     1289d <list_remove+0x5c>
        node->next->pre = node->pre;
   12890:	8b 45 0c             	mov    0xc(%ebp),%eax
   12893:	8b 40 04             	mov    0x4(%eax),%eax
   12896:	8b 55 0c             	mov    0xc(%ebp),%edx
   12899:	8b 12                	mov    (%edx),%edx
   1289b:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   1289d:	8b 45 0c             	mov    0xc(%ebp),%eax
   128a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   128a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   128aa:	8b 50 04             	mov    0x4(%eax),%edx
   128ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   128b0:	89 10                	mov    %edx,(%eax)
    --list->count;
   128b2:	8b 45 08             	mov    0x8(%ebp),%eax
   128b5:	8b 40 08             	mov    0x8(%eax),%eax
   128b8:	8d 50 ff             	lea    -0x1(%eax),%edx
   128bb:	8b 45 08             	mov    0x8(%ebp),%eax
   128be:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   128c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   128c4:	5d                   	pop    %ebp
   128c5:	c3                   	ret    

000128c6 <inb>:
static inline uint8_t inb(uint16_t port) {
   128c6:	55                   	push   %ebp
   128c7:	89 e5                	mov    %esp,%ebp
   128c9:	83 ec 14             	sub    $0x14,%esp
   128cc:	8b 45 08             	mov    0x8(%ebp),%eax
   128cf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   128d3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   128d7:	89 c2                	mov    %eax,%edx
   128d9:	ec                   	in     (%dx),%al
   128da:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   128dd:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   128e1:	c9                   	leave  
   128e2:	c3                   	ret    

000128e3 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   128e3:	55                   	push   %ebp
   128e4:	89 e5                	mov    %esp,%ebp
   128e6:	83 ec 08             	sub    $0x8,%esp
   128e9:	8b 55 08             	mov    0x8(%ebp),%edx
   128ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ef:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   128f3:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   128f6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   128fa:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   128fe:	ee                   	out    %al,(%dx)
}
   128ff:	90                   	nop
   12900:	c9                   	leave  
   12901:	c3                   	ret    

00012902 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12902:	55                   	push   %ebp
   12903:	89 e5                	mov    %esp,%ebp
   12905:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12908:	83 ec 0c             	sub    $0xc,%esp
   1290b:	68 64 9f 01 00       	push   $0x19f64
   12910:	e8 5e f3 ff ff       	call   11c73 <mutex_init>
   12915:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12918:	83 ec 08             	sub    $0x8,%esp
   1291b:	6a 00                	push   $0x0
   1291d:	68 f9 03 00 00       	push   $0x3f9
   12922:	e8 bc ff ff ff       	call   128e3 <outb>
   12927:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1292a:	83 ec 08             	sub    $0x8,%esp
   1292d:	68 80 00 00 00       	push   $0x80
   12932:	68 fb 03 00 00       	push   $0x3fb
   12937:	e8 a7 ff ff ff       	call   128e3 <outb>
   1293c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   1293f:	83 ec 08             	sub    $0x8,%esp
   12942:	6a 03                	push   $0x3
   12944:	68 f8 03 00 00       	push   $0x3f8
   12949:	e8 95 ff ff ff       	call   128e3 <outb>
   1294e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12951:	83 ec 08             	sub    $0x8,%esp
   12954:	6a 00                	push   $0x0
   12956:	68 f9 03 00 00       	push   $0x3f9
   1295b:	e8 83 ff ff ff       	call   128e3 <outb>
   12960:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12963:	83 ec 08             	sub    $0x8,%esp
   12966:	6a 03                	push   $0x3
   12968:	68 fb 03 00 00       	push   $0x3fb
   1296d:	e8 71 ff ff ff       	call   128e3 <outb>
   12972:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12975:	83 ec 08             	sub    $0x8,%esp
   12978:	68 c7 00 00 00       	push   $0xc7
   1297d:	68 fa 03 00 00       	push   $0x3fa
   12982:	e8 5c ff ff ff       	call   128e3 <outb>
   12987:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1298a:	83 ec 08             	sub    $0x8,%esp
   1298d:	6a 0f                	push   $0xf
   1298f:	68 fc 03 00 00       	push   $0x3fc
   12994:	e8 4a ff ff ff       	call   128e3 <outb>
   12999:	83 c4 10             	add    $0x10,%esp
}
   1299c:	90                   	nop
   1299d:	c9                   	leave  
   1299e:	c3                   	ret    

0001299f <log_printf>:


void log_printf(const char* fmt, ...) {
   1299f:	55                   	push   %ebp
   129a0:	89 e5                	mov    %esp,%ebp
   129a2:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   129a8:	83 ec 04             	sub    $0x4,%esp
   129ab:	68 80 00 00 00       	push   $0x80
   129b0:	6a 00                	push   $0x0
   129b2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   129b8:	50                   	push   %eax
   129b9:	e8 77 f9 ff ff       	call   12335 <kmemset>
   129be:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   129c1:	8d 45 0c             	lea    0xc(%ebp),%eax
   129c4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   129ca:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   129d0:	83 ec 04             	sub    $0x4,%esp
   129d3:	50                   	push   %eax
   129d4:	ff 75 08             	pushl  0x8(%ebp)
   129d7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   129dd:	50                   	push   %eax
   129de:	e8 54 fb ff ff       	call   12537 <kvsprintf>
   129e3:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   129e6:	83 ec 0c             	sub    $0xc,%esp
   129e9:	68 64 9f 01 00       	push   $0x19f64
   129ee:	e8 ae f2 ff ff       	call   11ca1 <mutex_acquire>
   129f3:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   129f6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   129fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   129ff:	eb 3b                	jmp    12a3c <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12a01:	90                   	nop
   12a02:	83 ec 0c             	sub    $0xc,%esp
   12a05:	68 fd 03 00 00       	push   $0x3fd
   12a0a:	e8 b7 fe ff ff       	call   128c6 <inb>
   12a0f:	83 c4 10             	add    $0x10,%esp
   12a12:	0f b6 c0             	movzbl %al,%eax
   12a15:	83 e0 40             	and    $0x40,%eax
   12a18:	85 c0                	test   %eax,%eax
   12a1a:	74 e6                	je     12a02 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a1f:	8d 50 01             	lea    0x1(%eax),%edx
   12a22:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12a25:	0f b6 00             	movzbl (%eax),%eax
   12a28:	0f b6 c0             	movzbl %al,%eax
   12a2b:	83 ec 08             	sub    $0x8,%esp
   12a2e:	50                   	push   %eax
   12a2f:	68 f8 03 00 00       	push   $0x3f8
   12a34:	e8 aa fe ff ff       	call   128e3 <outb>
   12a39:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a3f:	0f b6 00             	movzbl (%eax),%eax
   12a42:	84 c0                	test   %al,%al
   12a44:	75 bb                	jne    12a01 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   12a46:	83 ec 08             	sub    $0x8,%esp
   12a49:	6a 0d                	push   $0xd
   12a4b:	68 f8 03 00 00       	push   $0x3f8
   12a50:	e8 8e fe ff ff       	call   128e3 <outb>
   12a55:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12a58:	83 ec 08             	sub    $0x8,%esp
   12a5b:	6a 0a                	push   $0xa
   12a5d:	68 f8 03 00 00       	push   $0x3f8
   12a62:	e8 7c fe ff ff       	call   128e3 <outb>
   12a67:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   12a6a:	83 ec 0c             	sub    $0xc,%esp
   12a6d:	68 64 9f 01 00       	push   $0x19f64
   12a72:	e8 b6 f2 ff ff       	call   11d2d <mutex_release>
   12a77:	83 c4 10             	add    $0x10,%esp
   12a7a:	90                   	nop
   12a7b:	c9                   	leave  
   12a7c:	c3                   	ret    
