
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003bb8 memsz 0x00003bb8 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x0000f0c0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x000230c0 align 2**12
         filesz 0x000000ff memsz 0x000000ff flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031fa  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000009bc  000131fc  000131fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000e0c0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   000000ff  80000000  000230c0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001fb7  00000000  00000000  000060ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e19  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d3  00000000  00000000  0000cecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001367  00000000  00000000  0000e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000f90f  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001520  00000000  00000000  0000f920  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000131fc l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010302 l     F .text	00000017 up2
00010319 l     F .text	0000000d down2
00010326 l     F .text	0000000c write_cr3
00010332 l     F .text	00000014 pde_index
00010346 l     F .text	00000027 pde_paddr
0001036d l     F .text	00000010 pte_index
0001037d l     F .text	00000027 pte_paddr
000103a4 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
000103b5 l     F .text	0000005d addr_alloc_init
00010412 l     F .text	00000067 addr_alloc_page
00010479 l     F .text	00000062 addr_free_page
000104db l     F .text	00000066 show_mem_info
00010541 l     F .text	0000003c total_mem_size
0001057d l     F .text	000000a0 test_alloc
00013354 l     O .rodata	00000012 __func__.2216
00014000 l     O .data	00000040 kernel_map.2228
00013368 l     O .rodata	0000000c __func__.2258
00010a7d l     F .text	00000010 curr_page_dir
00013374 l     O .rodata	00000011 __func__.2290
00010b46 l     F .text	0000001a kalloc
00010b60 l     F .text	0000001e kfree
00000000 l    df *ABS*	00000000 syscall.c
00013388 l     O .rodata	0000000c sys_table
00000000 l    df *ABS*	00000000 task.c
00010c2d l     F .text	00000019 list_node_init
00010c46 l     F .text	0000000b list_node_next
00010c51 l     F .text	0000000b list_size
00010c5c l     F .text	0000000a list_first
00010c66 l     F .text	0000000c write_cr3
00010c72 l     F .text	00000007 hlt
00010c79 l     F .text	00000017 write_tr
00010c90 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	000001a0 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010ca1 l     F .text	00000188 tss_init
00013450 l     O .rodata	0000000a __func__.2254
00010f41 l     F .text	0000000a idle_task_entry
0001345c l     O .rodata	00000010 __func__.2280
00000000 l    df *ABS*	00000000 cpu.c
000113dc l     F .text	00000028 lgdt
00011404 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
00011655 l     F .text	0000001d inb
00011672 l     F .text	0000001f outb
00011691 l     F .text	00000007 cli
00011698 l     F .text	00000007 sti
0001169f l     F .text	00000028 lidt
000116c7 l     F .text	00000011 read_cr2
000116d8 l     F .text	00000007 hlt
000116df l     F .text	00000010 read_eflags
000116ef l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
000116fa l     F .text	000000f0 dump_core_regs
000117ea l     F .text	0000003e do_default_handler
00011bc5 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011fc9 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00012010 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012088 l     F .text	0000000b list_size
00012093 l     F .text	0000000a list_first
0001209d l     F .text	0000000b list_last
00013b44 l     O .rodata	0000000c __func__.2204
00018e20 l     O .bss	000000b8 first_task
00013b50 l     O .rodata	00000013 __func__.2237
000122fc l     F .text	00000036 test_task1
00012332 l     F .text	00000036 test_task2
00018ee0 l     O .bss	000000b8 task1
00018fa0 l     O .bss	000000b8 task2
00019060 l     O .bss	00004000 stack1
0001d060 l     O .bss	00004000 stack2
00000000 l    df *ABS*	00000000 mutex.c
000123c8 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00012562 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000128eb l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012e48 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001303e l     F .text	0000001d inb
0001305b l     F .text	0000001f outb
00021060 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c syscall
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
00011ba9 g     F .text	0000001c do_handler_control_protection_exception
000127e3 g     F .text	0000003a bitmap_get_bit
0001117f g     F .text	0000000a task_current
00011860 g     F .text	0000001c do_handler_debug_exception
00011b8d g     F .text	0000001c do_handler_virtualization_exception
00011f6a g     F .text	0000000b irq_enable_global
0001195c g     F .text	0000001c do_handler_segment_not_present
000110dd g     F .text	00000034 task_set_ready
00012939 g     F .text	00000070 kstrncpy
0001281d g     F .text	0000001b bitmap_is_set
000120fc g     F .text	0000019c link_test
0001187c g     F .text	0000001c do_handler_nmi_interrupt
00010b98 g     F .text	00000095 do_handler_syscall
00011570 g     F .text	00000023 cpu_init
0001307a g     F .text	000000a2 log_init
00012368 g     F .text	00000060 init_main
00012aad g     F .text	00000041 kmemset
0001161c g     F .text	00000039 gdt_free_sel
00010b7e g     F .text	0000001a sys_print_msg
00014000 g       .data	00000000 s_data
00011e4d g     F .text	0000008b irq_enable
00010026 g       .text	00000000 exception_handler_unknown
000100a2 g       .text	00000000 exception_handler_breakpoint
000129a9 g     F .text	0000003b kstrlen
000118b4 g     F .text	0000001c do_handler_overflow
000106cd g     F .text	00000087 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
00011994 g     F .text	000000b5 do_handler_general_protection
0001267d g     F .text	00000029 sem_count
800000c9 g     F .first_task	0000002d first_task_main
000118d0 g     F .text	0000001c do_handler_bound_range_exceed
0001270f g     F .text	000000d4 bitmap_set_bit
00011924 g     F .text	0000001c do_handler_double_fault
00011a49 g     F .text	000000d4 do_handler_page_fault
00010267 g       .text	00000000 exception_handler_virtualization_exception
0001013d g       .text	00000000 exception_handler_double_fault
00011f75 g     F .text	0000002b pic_send_eoi
000110d3 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00010824 g     F .text	00000085 memory_create_uvm
00012590 g     F .text	0000006b sem_wait
00010a5b g     F .text	00000022 memory_alloc_page_for
00011fe8 g     F .text	00000028 do_handler_timer
00010194 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c1 g       .text	00000000 exception_handler_overflow
000102c2 g       .text	00000000 simple_switch
00012e7e g     F .text	0000005f list_insert_front
000210c0 g     O .bss	00002000 stack
0001136f g     F .text	00000057 sys_sleep
00012caf g     F .text	00000163 kvsprintf
00010aad g     F .text	00000099 memory_free_page
000230c0 g       *ABS*	00000000 s_first_task
0001098d g     F .text	000000ce memory_alloc_for_page_dir
000125fb g     F .text	00000082 sem_notify
000118ec g     F .text	0000001c do_handler_invalid_opcode
0001015a g       .text	00000000 exception_handler_invalid_tss
00012070 g     F .text	00000018 timer_init
00011008 g     F .text	000000cb task_first_init
00011b55 g     F .text	0000001c do_handler_machine_check
00011908 g     F .text	0000001c do_handler_device_not_found
0001134f g     F .text	00000020 task_set_wakeup
00012edd g     F .text	00000063 list_insert_back
00011f5f g     F .text	0000000b irq_disable_global
00011189 g     F .text	00000061 sys_sched_yield
000231bf g       *ABS*	00000000 mem_free_start
000120a8 g     F .text	00000054 kernel_init
0001256d g     F .text	00000023 sem_init
00012c8b g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00011111 g     F .text	0000002b task_set_blocked
000100ff g       .text	00000000 exception_handler_invalid_opcode
000230c0 g       .bss	00000000 e_data
00012b4c g     F .text	0000013f kitoa
000128f2 g     F .text	00000047 kstrcpy
000129e4 g     F .text	0000007a kstrncmp
00011b39 g     F .text	0000001c do_handler_aligment_check
00012aee g     F .text	0000005e kmemcmp
000101ed g       .text	00000000 exception_handler_floating_point_error
00010229 g       .text	00000000 exception_handler_machine_check
00011940 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
000231bf g       *ABS*	00000000 e_first_task
0001131e g     F .text	00000031 task_set_sleep
000102a3 g       .text	00000000 exception_handler_timer
00011e18 g     F .text	00000035 irq_install
000114e8 g     F .text	00000088 init_gdt
00011fa0 g     F .text	00000018 irq_enter_protection
000123d3 g     F .text	00000041 mutex_init
00011ed8 g     F .text	00000087 irq_disable
00010045 g       .text	00000000 exception_handler_divide_error
00011844 g     F .text	0000001c do_handler_divide_error
000126a6 g     F .text	00000016 bitmap_byte_count
000111ea g     F .text	0000005b task_dispatch
00012298 g     F .text	00000064 move_to_first_task
0001113c g     F .text	00000043 task_next_run
00010754 g     F .text	000000d0 create_kernel_table
00012e5b g     F .text	00000023 list_init
000101d0 g       .text	00000000 exception_handler_page_fault
00011828 g     F .text	0000001c do_handler_unknown
00010a8d g     F .text	00000020 memory_alloc_page
00010f23 g     F .text	0000001e task_switch_from_to
00011c58 g     F .text	000001c0 irq_init
00011fb8 g     F .text	00000011 irq_leave_protection
00010083 g       .text	00000000 exception_handler_nmi_interrupt
0001141e g     F .text	00000083 segment_desc_set
000102d7 g       .text	00000000 exception_handler_syscall
00013bb8 g       .rodata	00000000 e_text
0001020c g       .text	00000000 exception_handler_aligment_check
00010286 g       .text	00000000 exception_handler_control_protection_exception
000126bc g     F .text	00000053 bitmap_init
00011b71 g     F .text	0000001c do_handler_simd_floating_point_exception
00012a5e g     F .text	0000004f kmemcpy
00010177 g       .text	00000000 exception_handler_segment_not_present
00012838 g     F .text	000000b3 bitmap_alloc_nbits
00010f4b g     F .text	000000bd task_manager_init
000100e0 g       .text	00000000 exception_handler_bound_range_exceed
00011245 g     F .text	000000d9 task_time_tick
000108a9 g     F .text	000000e4 memory_init
0001011e g       .text	00000000 exception_handler_device_not_found
00012e12 g     F .text	00000036 pannic
00011978 g     F .text	0000001c do_handler_stack_segment_fault
00011898 g     F .text	0000001c do_handler_breakpoint
00010064 g       .text	00000000 exception_handler_debug_exception
00011b1d g     F .text	0000001c do_handler_floating_point_error
0001311c g     F .text	000000de log_printf
00010e29 g     F .text	000000fa task_init
00012f40 g     F .text	00000079 list_remove_front
000113c6 g     F .text	00000016 sys_getpid
000115a7 g     F .text	00000075 gdt_alloc_desc
000124a2 g     F .text	000000c0 mutex_release
00012fb9 g     F .text	00000085 list_remove
00011593 g     F .text	00000014 swtch_to_tss
000114a1 g     F .text	00000047 gate_desc_set
00012414 g     F .text	0000008e mutex_acquire
00010248 g       .text	00000000 exception_handler_simd_floating_point_exception
0001061d g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 9c 20 00 00       	call   120a8 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    # 这里改了栈指针的位置，不再是7c00了
    # mov $(stack + KERNEL_STACK_SIZE), %esp
    jmp init_main
   10021:	e9 42 23 00 00       	jmp    12368 <init_main>

00010026 <exception_handler_unknown>:
    add $(2 * 4), %esp # 跳过压入的异常号和错误码

    iret
.endm

exception_handler unknown,                      -1, 0
   10026:	6a 00                	push   $0x0
   10028:	6a ff                	push   $0xffffffff
   1002a:	60                   	pusha  
   1002b:	1e                   	push   %ds
   1002c:	06                   	push   %es
   1002d:	0f a0                	push   %fs
   1002f:	0f a8                	push   %gs
   10031:	54                   	push   %esp
   10032:	e8 f1 17 00 00       	call   11828 <do_handler_unknown>
   10037:	83 c4 04             	add    $0x4,%esp
   1003a:	0f a9                	pop    %gs
   1003c:	0f a1                	pop    %fs
   1003e:	07                   	pop    %es
   1003f:	1f                   	pop    %ds
   10040:	61                   	popa   
   10041:	83 c4 08             	add    $0x8,%esp
   10044:	cf                   	iret   

00010045 <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   10045:	6a 00                	push   $0x0
   10047:	6a 00                	push   $0x0
   10049:	60                   	pusha  
   1004a:	1e                   	push   %ds
   1004b:	06                   	push   %es
   1004c:	0f a0                	push   %fs
   1004e:	0f a8                	push   %gs
   10050:	54                   	push   %esp
   10051:	e8 ee 17 00 00       	call   11844 <do_handler_divide_error>
   10056:	83 c4 04             	add    $0x4,%esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 eb 17 00 00       	call   11860 <do_handler_debug_exception>
   10075:	83 c4 04             	add    $0x4,%esp
   10078:	0f a9                	pop    %gs
   1007a:	0f a1                	pop    %fs
   1007c:	07                   	pop    %es
   1007d:	1f                   	pop    %ds
   1007e:	61                   	popa   
   1007f:	83 c4 08             	add    $0x8,%esp
   10082:	cf                   	iret   

00010083 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10083:	6a 00                	push   $0x0
   10085:	6a 02                	push   $0x2
   10087:	60                   	pusha  
   10088:	1e                   	push   %ds
   10089:	06                   	push   %es
   1008a:	0f a0                	push   %fs
   1008c:	0f a8                	push   %gs
   1008e:	54                   	push   %esp
   1008f:	e8 e8 17 00 00       	call   1187c <do_handler_nmi_interrupt>
   10094:	83 c4 04             	add    $0x4,%esp
   10097:	0f a9                	pop    %gs
   10099:	0f a1                	pop    %fs
   1009b:	07                   	pop    %es
   1009c:	1f                   	pop    %ds
   1009d:	61                   	popa   
   1009e:	83 c4 08             	add    $0x8,%esp
   100a1:	cf                   	iret   

000100a2 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a2:	6a 00                	push   $0x0
   100a4:	6a 03                	push   $0x3
   100a6:	60                   	pusha  
   100a7:	1e                   	push   %ds
   100a8:	06                   	push   %es
   100a9:	0f a0                	push   %fs
   100ab:	0f a8                	push   %gs
   100ad:	54                   	push   %esp
   100ae:	e8 e5 17 00 00       	call   11898 <do_handler_breakpoint>
   100b3:	83 c4 04             	add    $0x4,%esp
   100b6:	0f a9                	pop    %gs
   100b8:	0f a1                	pop    %fs
   100ba:	07                   	pop    %es
   100bb:	1f                   	pop    %ds
   100bc:	61                   	popa   
   100bd:	83 c4 08             	add    $0x8,%esp
   100c0:	cf                   	iret   

000100c1 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c1:	6a 00                	push   $0x0
   100c3:	6a 04                	push   $0x4
   100c5:	60                   	pusha  
   100c6:	1e                   	push   %ds
   100c7:	06                   	push   %es
   100c8:	0f a0                	push   %fs
   100ca:	0f a8                	push   %gs
   100cc:	54                   	push   %esp
   100cd:	e8 e2 17 00 00       	call   118b4 <do_handler_overflow>
   100d2:	83 c4 04             	add    $0x4,%esp
   100d5:	0f a9                	pop    %gs
   100d7:	0f a1                	pop    %fs
   100d9:	07                   	pop    %es
   100da:	1f                   	pop    %ds
   100db:	61                   	popa   
   100dc:	83 c4 08             	add    $0x8,%esp
   100df:	cf                   	iret   

000100e0 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e0:	6a 00                	push   $0x0
   100e2:	6a 05                	push   $0x5
   100e4:	60                   	pusha  
   100e5:	1e                   	push   %ds
   100e6:	06                   	push   %es
   100e7:	0f a0                	push   %fs
   100e9:	0f a8                	push   %gs
   100eb:	54                   	push   %esp
   100ec:	e8 df 17 00 00       	call   118d0 <do_handler_bound_range_exceed>
   100f1:	83 c4 04             	add    $0x4,%esp
   100f4:	0f a9                	pop    %gs
   100f6:	0f a1                	pop    %fs
   100f8:	07                   	pop    %es
   100f9:	1f                   	pop    %ds
   100fa:	61                   	popa   
   100fb:	83 c4 08             	add    $0x8,%esp
   100fe:	cf                   	iret   

000100ff <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   100ff:	6a 00                	push   $0x0
   10101:	6a 06                	push   $0x6
   10103:	60                   	pusha  
   10104:	1e                   	push   %ds
   10105:	06                   	push   %es
   10106:	0f a0                	push   %fs
   10108:	0f a8                	push   %gs
   1010a:	54                   	push   %esp
   1010b:	e8 dc 17 00 00       	call   118ec <do_handler_invalid_opcode>
   10110:	83 c4 04             	add    $0x4,%esp
   10113:	0f a9                	pop    %gs
   10115:	0f a1                	pop    %fs
   10117:	07                   	pop    %es
   10118:	1f                   	pop    %ds
   10119:	61                   	popa   
   1011a:	83 c4 08             	add    $0x8,%esp
   1011d:	cf                   	iret   

0001011e <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   1011e:	6a 00                	push   $0x0
   10120:	6a 07                	push   $0x7
   10122:	60                   	pusha  
   10123:	1e                   	push   %ds
   10124:	06                   	push   %es
   10125:	0f a0                	push   %fs
   10127:	0f a8                	push   %gs
   10129:	54                   	push   %esp
   1012a:	e8 d9 17 00 00       	call   11908 <do_handler_device_not_found>
   1012f:	83 c4 04             	add    $0x4,%esp
   10132:	0f a9                	pop    %gs
   10134:	0f a1                	pop    %fs
   10136:	07                   	pop    %es
   10137:	1f                   	pop    %ds
   10138:	61                   	popa   
   10139:	83 c4 08             	add    $0x8,%esp
   1013c:	cf                   	iret   

0001013d <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   1013d:	6a 08                	push   $0x8
   1013f:	60                   	pusha  
   10140:	1e                   	push   %ds
   10141:	06                   	push   %es
   10142:	0f a0                	push   %fs
   10144:	0f a8                	push   %gs
   10146:	54                   	push   %esp
   10147:	e8 d8 17 00 00       	call   11924 <do_handler_double_fault>
   1014c:	83 c4 04             	add    $0x4,%esp
   1014f:	0f a9                	pop    %gs
   10151:	0f a1                	pop    %fs
   10153:	07                   	pop    %es
   10154:	1f                   	pop    %ds
   10155:	61                   	popa   
   10156:	83 c4 08             	add    $0x8,%esp
   10159:	cf                   	iret   

0001015a <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015a:	6a 0a                	push   $0xa
   1015c:	60                   	pusha  
   1015d:	1e                   	push   %ds
   1015e:	06                   	push   %es
   1015f:	0f a0                	push   %fs
   10161:	0f a8                	push   %gs
   10163:	54                   	push   %esp
   10164:	e8 d7 17 00 00       	call   11940 <do_handler_invalid_tss>
   10169:	83 c4 04             	add    $0x4,%esp
   1016c:	0f a9                	pop    %gs
   1016e:	0f a1                	pop    %fs
   10170:	07                   	pop    %es
   10171:	1f                   	pop    %ds
   10172:	61                   	popa   
   10173:	83 c4 08             	add    $0x8,%esp
   10176:	cf                   	iret   

00010177 <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   10177:	6a 0b                	push   $0xb
   10179:	60                   	pusha  
   1017a:	1e                   	push   %ds
   1017b:	06                   	push   %es
   1017c:	0f a0                	push   %fs
   1017e:	0f a8                	push   %gs
   10180:	54                   	push   %esp
   10181:	e8 d6 17 00 00       	call   1195c <do_handler_segment_not_present>
   10186:	83 c4 04             	add    $0x4,%esp
   10189:	0f a9                	pop    %gs
   1018b:	0f a1                	pop    %fs
   1018d:	07                   	pop    %es
   1018e:	1f                   	pop    %ds
   1018f:	61                   	popa   
   10190:	83 c4 08             	add    $0x8,%esp
   10193:	cf                   	iret   

00010194 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10194:	6a 00                	push   $0x0
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 d3 17 00 00       	call   11978 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 d2 17 00 00       	call   11994 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 6a 18 00 00       	call   11a49 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 1f 19 00 00       	call   11b1d <do_handler_floating_point_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 1e 19 00 00       	call   11b39 <do_handler_aligment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 1b 19 00 00       	call   11b55 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 18 19 00 00       	call   11b71 <do_handler_simd_floating_point_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 15 19 00 00       	call   11b8d <do_handler_virtualization_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   10286:	6a 15                	push   $0x15
   10288:	60                   	pusha  
   10289:	1e                   	push   %ds
   1028a:	06                   	push   %es
   1028b:	0f a0                	push   %fs
   1028d:	0f a8                	push   %gs
   1028f:	54                   	push   %esp
   10290:	e8 14 19 00 00       	call   11ba9 <do_handler_control_protection_exception>
   10295:	83 c4 04             	add    $0x4,%esp
   10298:	0f a9                	pop    %gs
   1029a:	0f a1                	pop    %fs
   1029c:	07                   	pop    %es
   1029d:	1f                   	pop    %ds
   1029e:	61                   	popa   
   1029f:	83 c4 08             	add    $0x8,%esp
   102a2:	cf                   	iret   

000102a3 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a3:	6a 00                	push   $0x0
   102a5:	6a 20                	push   $0x20
   102a7:	60                   	pusha  
   102a8:	1e                   	push   %ds
   102a9:	06                   	push   %es
   102aa:	0f a0                	push   %fs
   102ac:	0f a8                	push   %gs
   102ae:	54                   	push   %esp
   102af:	e8 34 1d 00 00       	call   11fe8 <do_handler_timer>
   102b4:	83 c4 04             	add    $0x4,%esp
   102b7:	0f a9                	pop    %gs
   102b9:	0f a1                	pop    %fs
   102bb:	07                   	pop    %es
   102bc:	1f                   	pop    %ds
   102bd:	61                   	popa   
   102be:	83 c4 08             	add    $0x8,%esp
   102c1:	cf                   	iret   

000102c2 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c2:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102c6:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ca:	55                   	push   %ebp
    push %ebx
   102cb:	53                   	push   %ebx
    push %esi
   102cc:	56                   	push   %esi
    push %edi
   102cd:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102ce:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d0:	89 d4                	mov    %edx,%esp

    pop %edi
   102d2:	5f                   	pop    %edi
    pop %esi
   102d3:	5e                   	pop    %esi
    pop %ebx
   102d4:	5b                   	pop    %ebx
    pop %ebp
   102d5:	5d                   	pop    %ebp

    ret
   102d6:	c3                   	ret    

000102d7 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    pusha # 该指令会保存一系列指定的寄存器
   102d7:	60                   	pusha  

    push %ds
   102d8:	1e                   	push   %ds
    push %es
   102d9:	06                   	push   %es
    push %fs
   102da:	0f a0                	push   %fs
    push %gs
   102dc:	0f a8                	push   %gs

    pushf # push %eflags
   102de:	9c                   	pushf  
    
	# 使用内核段寄存器，避免使用应用层的
	; mov $(KERNEL_SELECTOR_DS), %eax
   102df:	b8 10 00 00 00       	mov    $0x10,%eax
	; mov %eax, %ds
   102e4:	8e d8                	mov    %eax,%ds
	; mov %eax, %es
   102e6:	8e c0                	mov    %eax,%es
	; mov %eax, %fs
   102e8:	8e e0                	mov    %eax,%fs
	; mov %eax, %gs    
   102ea:	8e e8                	mov    %eax,%gs

    mov %esp, %eax  # 将这里作为结构体入口地址参数
   102ec:	89 e0                	mov    %esp,%eax
    push %eax
   102ee:	50                   	push   %eax

    call do_handler_syscall
   102ef:	e8 a4 08 00 00       	call   10b98 <do_handler_syscall>

    add $4, %esp    # esp 向上调整，跳过结构体地址参数
   102f4:	83 c4 04             	add    $0x4,%esp

    popf  # pop %eflags
   102f7:	9d                   	popf   
    pop %gs
   102f8:	0f a9                	pop    %gs
    pop %fs
   102fa:	0f a1                	pop    %fs
    pop %es
   102fc:	07                   	pop    %es
    pop %ds
   102fd:	1f                   	pop    %ds
    popa
   102fe:	61                   	popa   

    retf $(5 * 4)
   102ff:	ca 14 00             	lret   $0x14

00010302 <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10305:	8b 55 08             	mov    0x8(%ebp),%edx
   10308:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030b:	01 d0                	add    %edx,%eax
   1030d:	8d 50 ff             	lea    -0x1(%eax),%edx
   10310:	8b 45 0c             	mov    0xc(%ebp),%eax
   10313:	f7 d8                	neg    %eax
   10315:	21 d0                	and    %edx,%eax
}
   10317:	5d                   	pop    %ebp
   10318:	c3                   	ret    

00010319 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   10319:	55                   	push   %ebp
   1031a:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1031c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031f:	f7 d8                	neg    %eax
   10321:	23 45 08             	and    0x8(%ebp),%eax
}
   10324:	5d                   	pop    %ebp
   10325:	c3                   	ret    

00010326 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10326:	55                   	push   %ebp
   10327:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10329:	8b 45 08             	mov    0x8(%ebp),%eax
   1032c:	0f 22 d8             	mov    %eax,%cr3
}
   1032f:	90                   	nop
   10330:	5d                   	pop    %ebp
   10331:	c3                   	ret    

00010332 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10332:	55                   	push   %ebp
   10333:	89 e5                	mov    %esp,%ebp
   10335:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	c1 e8 16             	shr    $0x16,%eax
   1033e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10341:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10344:	c9                   	leave  
   10345:	c3                   	ret    

00010346 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10346:	55                   	push   %ebp
   10347:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10350:	c0 ea 04             	shr    $0x4,%dl
   10353:	0f b6 d2             	movzbl %dl,%edx
   10356:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1035a:	c1 e1 04             	shl    $0x4,%ecx
   1035d:	09 ca                	or     %ecx,%edx
   1035f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10363:	c1 e0 0c             	shl    $0xc,%eax
   10366:	09 d0                	or     %edx,%eax
   10368:	c1 e0 0c             	shl    $0xc,%eax
}
   1036b:	5d                   	pop    %ebp
   1036c:	c3                   	ret    

0001036d <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   1036d:	55                   	push   %ebp
   1036e:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	c1 e8 0c             	shr    $0xc,%eax
   10376:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1037b:	5d                   	pop    %ebp
   1037c:	c3                   	ret    

0001037d <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1037d:	55                   	push   %ebp
   1037e:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10387:	c0 ea 04             	shr    $0x4,%dl
   1038a:	0f b6 d2             	movzbl %dl,%edx
   1038d:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10391:	c1 e1 04             	shl    $0x4,%ecx
   10394:	09 ca                	or     %ecx,%edx
   10396:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1039a:	c1 e0 0c             	shl    $0xc,%eax
   1039d:	09 d0                	or     %edx,%eax
   1039f:	c1 e0 0c             	shl    $0xc,%eax
}
   103a2:	5d                   	pop    %ebp
   103a3:	c3                   	ret    

000103a4 <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   103a7:	ff 75 08             	pushl  0x8(%ebp)
   103aa:	e8 77 ff ff ff       	call   10326 <write_cr3>
   103af:	83 c4 04             	add    $0x4,%esp
}
   103b2:	90                   	nop
   103b3:	c9                   	leave  
   103b4:	c3                   	ret    

000103b5 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   103b5:	55                   	push   %ebp
   103b6:	89 e5                	mov    %esp,%ebp
   103b8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	83 ec 08             	sub    $0x8,%esp
   103c1:	68 fc 31 01 00       	push   $0x131fc
   103c6:	50                   	push   %eax
   103c7:	e8 07 20 00 00       	call   123d3 <mutex_init>
   103cc:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	8b 55 10             	mov    0x10(%ebp),%edx
   103d5:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103d8:	8b 45 08             	mov    0x8(%ebp),%eax
   103db:	8b 55 14             	mov    0x14(%ebp),%edx
   103de:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	8b 55 18             	mov    0x18(%ebp),%edx
   103e7:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	8b 40 60             	mov    0x60(%eax),%eax
   103f0:	ba 00 00 00 00       	mov    $0x0,%edx
   103f5:	f7 75 18             	divl   0x18(%ebp)
   103f8:	89 c2                	mov    %eax,%edx
   103fa:	8b 45 08             	mov    0x8(%ebp),%eax
   103fd:	83 c0 54             	add    $0x54,%eax
   10400:	6a 00                	push   $0x0
   10402:	52                   	push   %edx
   10403:	ff 75 0c             	pushl  0xc(%ebp)
   10406:	50                   	push   %eax
   10407:	e8 b0 22 00 00       	call   126bc <bitmap_init>
   1040c:	83 c4 10             	add    $0x10,%esp
}
   1040f:	90                   	nop
   10410:	c9                   	leave  
   10411:	c3                   	ret    

00010412 <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   10412:	55                   	push   %ebp
   10413:	89 e5                	mov    %esp,%ebp
   10415:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	83 ec 0c             	sub    $0xc,%esp
   10425:	50                   	push   %eax
   10426:	e8 e9 1f 00 00       	call   12414 <mutex_acquire>
   1042b:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	83 c0 54             	add    $0x54,%eax
   10434:	83 ec 04             	sub    $0x4,%esp
   10437:	ff 75 0c             	pushl  0xc(%ebp)
   1043a:	6a 00                	push   $0x0
   1043c:	50                   	push   %eax
   1043d:	e8 f6 23 00 00       	call   12838 <bitmap_alloc_nbits>
   10442:	83 c4 10             	add    $0x10,%esp
   10445:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10448:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1044c:	78 17                	js     10465 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 50 5c             	mov    0x5c(%eax),%edx
   10454:	8b 45 08             	mov    0x8(%ebp),%eax
   10457:	8b 48 64             	mov    0x64(%eax),%ecx
   1045a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1045d:	0f af c1             	imul   %ecx,%eax
   10460:	01 d0                	add    %edx,%eax
   10462:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10465:	8b 45 08             	mov    0x8(%ebp),%eax
   10468:	83 ec 0c             	sub    $0xc,%esp
   1046b:	50                   	push   %eax
   1046c:	e8 31 20 00 00       	call   124a2 <mutex_release>
   10471:	83 c4 10             	add    $0x10,%esp

    return addr;
   10474:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10477:	c9                   	leave  
   10478:	c3                   	ret    

00010479 <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10479:	55                   	push   %ebp
   1047a:	89 e5                	mov    %esp,%ebp
   1047c:	53                   	push   %ebx
   1047d:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	83 ec 0c             	sub    $0xc,%esp
   10486:	50                   	push   %eax
   10487:	e8 88 1f 00 00       	call   12414 <mutex_acquire>
   1048c:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   1048f:	8b 45 08             	mov    0x8(%ebp),%eax
   10492:	8b 40 5c             	mov    0x5c(%eax),%eax
   10495:	8b 55 0c             	mov    0xc(%ebp),%edx
   10498:	89 d1                	mov    %edx,%ecx
   1049a:	29 c1                	sub    %eax,%ecx
   1049c:	8b 45 08             	mov    0x8(%ebp),%eax
   1049f:	8b 58 64             	mov    0x64(%eax),%ebx
   104a2:	89 c8                	mov    %ecx,%eax
   104a4:	ba 00 00 00 00       	mov    $0x0,%edx
   104a9:	f7 f3                	div    %ebx
   104ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   104ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104b1:	8b 55 08             	mov    0x8(%ebp),%edx
   104b4:	83 c2 54             	add    $0x54,%edx
   104b7:	6a 00                	push   $0x0
   104b9:	ff 75 10             	pushl  0x10(%ebp)
   104bc:	50                   	push   %eax
   104bd:	52                   	push   %edx
   104be:	e8 4c 22 00 00       	call   1270f <bitmap_set_bit>
   104c3:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104c6:	8b 45 08             	mov    0x8(%ebp),%eax
   104c9:	83 ec 0c             	sub    $0xc,%esp
   104cc:	50                   	push   %eax
   104cd:	e8 d0 1f 00 00       	call   124a2 <mutex_release>
   104d2:	83 c4 10             	add    $0x10,%esp
}
   104d5:	90                   	nop
   104d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
   104de:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	68 09 32 01 00       	push   $0x13209
   104e9:	e8 2e 2c 00 00       	call   1311c <log_printf>
   104ee:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104f8:	eb 29                	jmp    10523 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104fa:	8b 45 08             	mov    0x8(%ebp),%eax
   104fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10500:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1050a:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1050d:	52                   	push   %edx
   1050e:	50                   	push   %eax
   1050f:	ff 75 f4             	pushl  -0xc(%ebp)
   10512:	68 15 32 01 00       	push   $0x13215
   10517:	e8 00 2c 00 00       	call   1311c <log_printf>
   1051c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1051f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	8b 40 50             	mov    0x50(%eax),%eax
   10529:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1052c:	7c cc                	jl     104fa <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1052e:	83 ec 0c             	sub    $0xc,%esp
   10531:	68 23 32 01 00       	push   $0x13223
   10536:	e8 e1 2b 00 00       	call   1311c <log_printf>
   1053b:	83 c4 10             	add    $0x10,%esp
}
   1053e:	90                   	nop
   1053f:	c9                   	leave  
   10540:	c3                   	ret    

00010541 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   10541:	55                   	push   %ebp
   10542:	89 e5                	mov    %esp,%ebp
   10544:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10547:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1054e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10555:	eb 16                	jmp    1056d <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10557:	8b 45 08             	mov    0x8(%ebp),%eax
   1055a:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1055d:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10561:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10564:	01 d0                	add    %edx,%eax
   10566:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10569:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1056d:	8b 45 08             	mov    0x8(%ebp),%eax
   10570:	8b 40 50             	mov    0x50(%eax),%eax
   10573:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10576:	7c df                	jl     10557 <total_mem_size+0x16>
    }
    return mem_size;
   10578:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1057b:	c9                   	leave  
   1057c:	c3                   	ret    

0001057d <test_alloc>:


static void test_alloc(void) {
   1057d:	55                   	push   %ebp
   1057e:	89 e5                	mov    %esp,%ebp
   10580:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10586:	83 ec 0c             	sub    $0xc,%esp
   10589:	68 00 10 00 00       	push   $0x1000
   1058e:	68 00 00 04 00       	push   $0x40000
   10593:	68 00 10 00 00       	push   $0x1000
   10598:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   1059e:	50                   	push   %eax
   1059f:	8d 45 80             	lea    -0x80(%ebp),%eax
   105a2:	50                   	push   %eax
   105a3:	e8 0d fe ff ff       	call   103b5 <addr_alloc_init>
   105a8:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   105ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105b2:	eb 2b                	jmp    105df <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   105b4:	83 ec 08             	sub    $0x8,%esp
   105b7:	6a 02                	push   $0x2
   105b9:	8d 45 80             	lea    -0x80(%ebp),%eax
   105bc:	50                   	push   %eax
   105bd:	e8 50 fe ff ff       	call   10412 <addr_alloc_page>
   105c2:	83 c4 10             	add    $0x10,%esp
   105c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105c8:	83 ec 08             	sub    $0x8,%esp
   105cb:	ff 75 e8             	pushl  -0x18(%ebp)
   105ce:	68 25 32 01 00       	push   $0x13225
   105d3:	e8 44 2b 00 00       	call   1311c <log_printf>
   105d8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105df:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105e3:	7e cf                	jle    105b4 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105e5:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105f3:	eb 1f                	jmp    10614 <test_alloc+0x97>
        addr += 4096 * 2;
   105f5:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105fc:	83 ec 04             	sub    $0x4,%esp
   105ff:	6a 02                	push   $0x2
   10601:	ff 75 f0             	pushl  -0x10(%ebp)
   10604:	8d 45 80             	lea    -0x80(%ebp),%eax
   10607:	50                   	push   %eax
   10608:	e8 6c fe ff ff       	call   10479 <addr_free_page>
   1060d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10610:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10614:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   10618:	7e db                	jle    105f5 <test_alloc+0x78>
    }
}
   1061a:	90                   	nop
   1061b:	c9                   	leave  
   1061c:	c3                   	ret    

0001061d <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   1061d:	55                   	push   %ebp
   1061e:	89 e5                	mov    %esp,%ebp
   10620:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   10623:	ff 75 0c             	pushl  0xc(%ebp)
   10626:	e8 07 fd ff ff       	call   10332 <pde_index>
   1062b:	83 c4 04             	add    $0x4,%esp
   1062e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10635:	8b 45 08             	mov    0x8(%ebp),%eax
   10638:	01 d0                	add    %edx,%eax
   1063a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   1063d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10640:	0f b6 00             	movzbl (%eax),%eax
   10643:	83 e0 01             	and    $0x1,%eax
   10646:	84 c0                	test   %al,%al
   10648:	74 10                	je     1065a <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   1064a:	ff 75 f0             	pushl  -0x10(%ebp)
   1064d:	e8 f4 fc ff ff       	call   10346 <pde_paddr>
   10652:	83 c4 04             	add    $0x4,%esp
   10655:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10658:	eb 57                	jmp    106b1 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1065a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1065e:	75 07                	jne    10667 <find_pte+0x4a>
            return (pte_t*)0;
   10660:	b8 00 00 00 00       	mov    $0x0,%eax
   10665:	eb 64                	jmp    106cb <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10667:	83 ec 08             	sub    $0x8,%esp
   1066a:	6a 01                	push   $0x1
   1066c:	68 00 50 01 00       	push   $0x15000
   10671:	e8 9c fd ff ff       	call   10412 <addr_alloc_page>
   10676:	83 c4 10             	add    $0x10,%esp
   10679:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1067c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10680:	75 07                	jne    10689 <find_pte+0x6c>
            return (pte_t*)0;
   10682:	b8 00 00 00 00       	mov    $0x0,%eax
   10687:	eb 42                	jmp    106cb <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10689:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1068c:	83 c8 07             	or     $0x7,%eax
   1068f:	89 c2                	mov    %eax,%edx
   10691:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10694:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10696:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10699:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1069c:	83 ec 04             	sub    $0x4,%esp
   1069f:	68 00 10 00 00       	push   $0x1000
   106a4:	6a 00                	push   $0x0
   106a6:	ff 75 f4             	pushl  -0xc(%ebp)
   106a9:	e8 ff 23 00 00       	call   12aad <kmemset>
   106ae:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   106b1:	83 ec 0c             	sub    $0xc,%esp
   106b4:	ff 75 0c             	pushl  0xc(%ebp)
   106b7:	e8 b1 fc ff ff       	call   1036d <pte_index>
   106bc:	83 c4 10             	add    $0x10,%esp
   106bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106c9:	01 d0                	add    %edx,%eax
}
   106cb:	c9                   	leave  
   106cc:	c3                   	ret    

000106cd <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106cd:	55                   	push   %ebp
   106ce:	89 e5                	mov    %esp,%ebp
   106d0:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106da:	eb 6e                	jmp    1074a <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106dc:	83 ec 04             	sub    $0x4,%esp
   106df:	6a 01                	push   $0x1
   106e1:	ff 75 0c             	pushl  0xc(%ebp)
   106e4:	ff 75 08             	pushl  0x8(%ebp)
   106e7:	e8 31 ff ff ff       	call   1061d <find_pte>
   106ec:	83 c4 10             	add    $0x10,%esp
   106ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106f6:	75 07                	jne    106ff <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106fd:	eb 53                	jmp    10752 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10702:	0f b6 00             	movzbl (%eax),%eax
   10705:	83 e0 01             	and    $0x1,%eax
   10708:	84 c0                	test   %al,%al
   1070a:	74 1c                	je     10728 <memory_create_map+0x5b>
   1070c:	68 35 32 01 00       	push   $0x13235
   10711:	68 54 33 01 00       	push   $0x13354
   10716:	68 a3 00 00 00       	push   $0xa3
   1071b:	68 48 32 01 00       	push   $0x13248
   10720:	e8 ed 26 00 00       	call   12e12 <pannic>
   10725:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   10728:	8b 45 10             	mov    0x10(%ebp),%eax
   1072b:	0b 45 18             	or     0x18(%ebp),%eax
   1072e:	83 c8 01             	or     $0x1,%eax
   10731:	89 c2                	mov    %eax,%edx
   10733:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10736:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   10738:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1073f:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10746:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1074a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1074d:	3b 45 14             	cmp    0x14(%ebp),%eax
   10750:	7c 8a                	jl     106dc <memory_create_map+0xf>
    }
}
   10752:	c9                   	leave  
   10753:	c3                   	ret    

00010754 <create_kernel_table>:


void create_kernel_table(void) {
   10754:	55                   	push   %ebp
   10755:	89 e5                	mov    %esp,%ebp
   10757:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1075a:	83 ec 04             	sub    $0x4,%esp
   1075d:	68 00 10 00 00       	push   $0x1000
   10762:	6a 00                	push   $0x0
   10764:	68 00 60 01 00       	push   $0x16000
   10769:	e8 3f 23 00 00       	call   12aad <kmemset>
   1076e:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10771:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10778:	e9 98 00 00 00       	jmp    10815 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   1077d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10780:	c1 e0 04             	shl    $0x4,%eax
   10783:	05 00 40 01 00       	add    $0x14000,%eax
   10788:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1078b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1078e:	8b 00                	mov    (%eax),%eax
   10790:	83 ec 08             	sub    $0x8,%esp
   10793:	68 00 10 00 00       	push   $0x1000
   10798:	50                   	push   %eax
   10799:	e8 7b fb ff ff       	call   10319 <down2>
   1079e:	83 c4 10             	add    $0x10,%esp
   107a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   107a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a7:	8b 40 04             	mov    0x4(%eax),%eax
   107aa:	83 ec 08             	sub    $0x8,%esp
   107ad:	68 00 10 00 00       	push   $0x1000
   107b2:	50                   	push   %eax
   107b3:	e8 4a fb ff ff       	call   10302 <up2>
   107b8:	83 c4 10             	add    $0x10,%esp
   107bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   107be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c1:	8b 40 08             	mov    0x8(%eax),%eax
   107c4:	83 ec 08             	sub    $0x8,%esp
   107c7:	68 00 10 00 00       	push   $0x1000
   107cc:	50                   	push   %eax
   107cd:	e8 47 fb ff ff       	call   10319 <down2>
   107d2:	83 c4 10             	add    $0x10,%esp
   107d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107db:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107de:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107e4:	85 c0                	test   %eax,%eax
   107e6:	0f 48 c2             	cmovs  %edx,%eax
   107e9:	c1 f8 0c             	sar    $0xc,%eax
   107ec:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f2:	8b 48 0c             	mov    0xc(%eax),%ecx
   107f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107fb:	83 ec 0c             	sub    $0xc,%esp
   107fe:	51                   	push   %ecx
   107ff:	ff 75 e0             	pushl  -0x20(%ebp)
   10802:	52                   	push   %edx
   10803:	50                   	push   %eax
   10804:	68 00 60 01 00       	push   $0x16000
   10809:	e8 bf fe ff ff       	call   106cd <memory_create_map>
   1080e:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10811:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10815:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10818:	83 f8 03             	cmp    $0x3,%eax
   1081b:	0f 86 5c ff ff ff    	jbe    1077d <create_kernel_table+0x29>
    }
}
   10821:	90                   	nop
   10822:	c9                   	leave  
   10823:	c3                   	ret    

00010824 <memory_create_uvm>:

// 创建进程的初始页表
// 主要的工作创建页目录表，然后从内核页表中复制一部分
uint32_t memory_create_uvm(void) {
   10824:	55                   	push   %ebp
   10825:	89 e5                	mov    %esp,%ebp
   10827:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   1082a:	83 ec 08             	sub    $0x8,%esp
   1082d:	6a 01                	push   $0x1
   1082f:	68 00 50 01 00       	push   $0x15000
   10834:	e8 d9 fb ff ff       	call   10412 <addr_alloc_page>
   10839:	83 c4 10             	add    $0x10,%esp
   1083c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   1083f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10843:	75 07                	jne    1084c <memory_create_uvm+0x28>
        return 0;
   10845:	b8 00 00 00 00       	mov    $0x0,%eax
   1084a:	eb 5b                	jmp    108a7 <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   1084c:	83 ec 04             	sub    $0x4,%esp
   1084f:	68 00 10 00 00       	push   $0x1000
   10854:	6a 00                	push   $0x0
   10856:	ff 75 f0             	pushl  -0x10(%ebp)
   10859:	e8 4f 22 00 00       	call   12aad <kmemset>
   1085e:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10861:	83 ec 0c             	sub    $0xc,%esp
   10864:	68 00 00 00 80       	push   $0x80000000
   10869:	e8 c4 fa ff ff       	call   10332 <pde_index>
   1086e:	83 c4 10             	add    $0x10,%esp
   10871:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10874:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1087b:	eb 1f                	jmp    1089c <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1087d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10880:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10887:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1088a:	01 c2                	add    %eax,%edx
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10896:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10898:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1089c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   108a2:	77 d9                	ja     1087d <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   108a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   108a7:	c9                   	leave  
   108a8:	c3                   	ret    

000108a9 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   108a9:	55                   	push   %ebp
   108aa:	89 e5                	mov    %esp,%ebp
   108ac:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   108af:	83 ec 0c             	sub    $0xc,%esp
   108b2:	68 8f 32 01 00       	push   $0x1328f
   108b7:	e8 60 28 00 00       	call   1311c <log_printf>
   108bc:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   108bf:	83 ec 0c             	sub    $0xc,%esp
   108c2:	ff 75 08             	pushl  0x8(%ebp)
   108c5:	e8 11 fc ff ff       	call   104db <show_mem_info>
   108ca:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108cd:	c7 45 f4 bf 31 02 00 	movl   $0x231bf,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108d4:	83 ec 0c             	sub    $0xc,%esp
   108d7:	ff 75 08             	pushl  0x8(%ebp)
   108da:	e8 62 fc ff ff       	call   10541 <total_mem_size>
   108df:	83 c4 10             	add    $0x10,%esp
   108e2:	2d 00 00 10 00       	sub    $0x100000,%eax
   108e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108ea:	83 ec 08             	sub    $0x8,%esp
   108ed:	68 00 10 00 00       	push   $0x1000
   108f2:	ff 75 f0             	pushl  -0x10(%ebp)
   108f5:	e8 1f fa ff ff       	call   10319 <down2>
   108fa:	83 c4 10             	add    $0x10,%esp
   108fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   10900:	83 ec 04             	sub    $0x4,%esp
   10903:	ff 75 f0             	pushl  -0x10(%ebp)
   10906:	68 00 00 10 00       	push   $0x100000
   1090b:	68 99 32 01 00       	push   $0x13299
   10910:	e8 07 28 00 00       	call   1311c <log_printf>
   10915:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10918:	83 ec 0c             	sub    $0xc,%esp
   1091b:	68 00 10 00 00       	push   $0x1000
   10920:	ff 75 f0             	pushl  -0x10(%ebp)
   10923:	68 00 00 10 00       	push   $0x100000
   10928:	ff 75 f4             	pushl  -0xc(%ebp)
   1092b:	68 00 50 01 00       	push   $0x15000
   10930:	e8 80 fa ff ff       	call   103b5 <addr_alloc_init>
   10935:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10938:	a1 60 50 01 00       	mov    0x15060,%eax
   1093d:	c1 e8 0c             	shr    $0xc,%eax
   10940:	83 ec 0c             	sub    $0xc,%esp
   10943:	50                   	push   %eax
   10944:	e8 5d 1d 00 00       	call   126a6 <bitmap_byte_count>
   10949:	83 c4 10             	add    $0x10,%esp
   1094c:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   1094f:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10956:	76 1c                	jbe    10974 <memory_init+0xcb>
   10958:	68 b4 32 01 00       	push   $0x132b4
   1095d:	68 68 33 01 00       	push   $0x13368
   10962:	68 fe 00 00 00       	push   $0xfe
   10967:	68 48 32 01 00       	push   $0x13248
   1096c:	e8 a1 24 00 00       	call   12e12 <pannic>
   10971:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10974:	e8 db fd ff ff       	call   10754 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10979:	b8 00 60 01 00       	mov    $0x16000,%eax
   1097e:	83 ec 0c             	sub    $0xc,%esp
   10981:	50                   	push   %eax
   10982:	e8 1d fa ff ff       	call   103a4 <mmu_set_page_dir>
   10987:	83 c4 10             	add    $0x10,%esp
}
   1098a:	90                   	nop
   1098b:	c9                   	leave  
   1098c:	c3                   	ret    

0001098d <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   1098d:	55                   	push   %ebp
   1098e:	89 e5                	mov    %esp,%ebp
   10990:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10993:	8b 45 0c             	mov    0xc(%ebp),%eax
   10996:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10999:	68 00 10 00 00       	push   $0x1000
   1099e:	ff 75 10             	pushl  0x10(%ebp)
   109a1:	e8 5c f9 ff ff       	call   10302 <up2>
   109a6:	83 c4 08             	add    $0x8,%esp
   109a9:	c1 e8 0c             	shr    $0xc,%eax
   109ac:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   109af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109b6:	e9 8d 00 00 00       	jmp    10a48 <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   109bb:	83 ec 08             	sub    $0x8,%esp
   109be:	6a 01                	push   $0x1
   109c0:	68 00 50 01 00       	push   $0x15000
   109c5:	e8 48 fa ff ff       	call   10412 <addr_alloc_page>
   109ca:	83 c4 10             	add    $0x10,%esp
   109cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   109d0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109d4:	75 17                	jne    109ed <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   109d6:	83 ec 0c             	sub    $0xc,%esp
   109d9:	68 dc 32 01 00       	push   $0x132dc
   109de:	e8 39 27 00 00       	call   1311c <log_printf>
   109e3:	83 c4 10             	add    $0x10,%esp
            return 0;
   109e6:	b8 00 00 00 00       	mov    $0x0,%eax
   109eb:	eb 6c                	jmp    10a59 <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109ed:	8b 45 08             	mov    0x8(%ebp),%eax
   109f0:	83 ec 0c             	sub    $0xc,%esp
   109f3:	ff 75 14             	pushl  0x14(%ebp)
   109f6:	6a 01                	push   $0x1
   109f8:	ff 75 e8             	pushl  -0x18(%ebp)
   109fb:	ff 75 f4             	pushl  -0xc(%ebp)
   109fe:	50                   	push   %eax
   109ff:	e8 c9 fc ff ff       	call   106cd <memory_create_map>
   10a04:	83 c4 20             	add    $0x20,%esp
   10a07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10a0a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a0e:	79 2d                	jns    10a3d <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   10a10:	83 ec 0c             	sub    $0xc,%esp
   10a13:	68 fc 32 01 00       	push   $0x132fc
   10a18:	e8 ff 26 00 00       	call   1311c <log_printf>
   10a1d:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   10a20:	83 ec 04             	sub    $0x4,%esp
   10a23:	ff 75 f0             	pushl  -0x10(%ebp)
   10a26:	ff 75 0c             	pushl  0xc(%ebp)
   10a29:	68 00 50 01 00       	push   $0x15000
   10a2e:	e8 46 fa ff ff       	call   10479 <addr_free_page>
   10a33:	83 c4 10             	add    $0x10,%esp

            return 0;
   10a36:	b8 00 00 00 00       	mov    $0x0,%eax
   10a3b:	eb 1c                	jmp    10a59 <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a3d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10a44:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a4b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a4e:	0f 8c 67 ff ff ff    	jl     109bb <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a59:	c9                   	leave  
   10a5a:	c3                   	ret    

00010a5b <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常是0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a5b:	55                   	push   %ebp
   10a5c:	89 e5                	mov    %esp,%ebp
   10a5e:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10a61:	e8 19 07 00 00       	call   1117f <task_current>
   10a66:	8b 40 68             	mov    0x68(%eax),%eax
   10a69:	ff 75 10             	pushl  0x10(%ebp)
   10a6c:	ff 75 0c             	pushl  0xc(%ebp)
   10a6f:	ff 75 08             	pushl  0x8(%ebp)
   10a72:	50                   	push   %eax
   10a73:	e8 15 ff ff ff       	call   1098d <memory_alloc_for_page_dir>
   10a78:	83 c4 10             	add    $0x10,%esp
}
   10a7b:	c9                   	leave  
   10a7c:	c3                   	ret    

00010a7d <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10a7d:	55                   	push   %ebp
   10a7e:	89 e5                	mov    %esp,%ebp
   10a80:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10a83:	e8 f7 06 00 00       	call   1117f <task_current>
   10a88:	8b 40 68             	mov    0x68(%eax),%eax
}
   10a8b:	c9                   	leave  
   10a8c:	c3                   	ret    

00010a8d <memory_alloc_page>:


// 以页为单位，分配物理内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10a8d:	55                   	push   %ebp
   10a8e:	89 e5                	mov    %esp,%ebp
   10a90:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10a93:	83 ec 08             	sub    $0x8,%esp
   10a96:	6a 01                	push   $0x1
   10a98:	68 00 50 01 00       	push   $0x15000
   10a9d:	e8 70 f9 ff ff       	call   10412 <addr_alloc_page>
   10aa2:	83 c4 10             	add    $0x10,%esp
   10aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10aab:	c9                   	leave  
   10aac:	c3                   	ret    

00010aad <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的物理内存
void memory_free_page(uint32_t vaddr) {
   10aad:	55                   	push   %ebp
   10aae:	89 e5                	mov    %esp,%ebp
   10ab0:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab6:	85 c0                	test   %eax,%eax
   10ab8:	78 17                	js     10ad1 <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10aba:	83 ec 04             	sub    $0x4,%esp
   10abd:	6a 01                	push   $0x1
   10abf:	ff 75 08             	pushl  0x8(%ebp)
   10ac2:	68 00 50 01 00       	push   $0x15000
   10ac7:	e8 ad f9 ff ff       	call   10479 <addr_free_page>
   10acc:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10acf:	eb 72                	jmp    10b43 <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10ad1:	e8 a7 ff ff ff       	call   10a7d <curr_page_dir>
   10ad6:	83 ec 04             	sub    $0x4,%esp
   10ad9:	6a 00                	push   $0x0
   10adb:	ff 75 08             	pushl  0x8(%ebp)
   10ade:	50                   	push   %eax
   10adf:	e8 39 fb ff ff       	call   1061d <find_pte>
   10ae4:	83 c4 10             	add    $0x10,%esp
   10ae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10aea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aee:	75 0d                	jne    10afd <memory_free_page+0x50>
   10af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10af3:	0f b6 00             	movzbl (%eax),%eax
   10af6:	83 e0 01             	and    $0x1,%eax
   10af9:	84 c0                	test   %al,%al
   10afb:	75 1c                	jne    10b19 <memory_free_page+0x6c>
   10afd:	68 30 33 01 00       	push   $0x13330
   10b02:	68 74 33 01 00       	push   $0x13374
   10b07:	68 46 01 00 00       	push   $0x146
   10b0c:	68 48 32 01 00       	push   $0x13248
   10b11:	e8 fc 22 00 00       	call   12e12 <pannic>
   10b16:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10b19:	83 ec 0c             	sub    $0xc,%esp
   10b1c:	ff 75 f4             	pushl  -0xc(%ebp)
   10b1f:	e8 59 f8 ff ff       	call   1037d <pte_paddr>
   10b24:	83 c4 10             	add    $0x10,%esp
   10b27:	83 ec 04             	sub    $0x4,%esp
   10b2a:	6a 01                	push   $0x1
   10b2c:	50                   	push   %eax
   10b2d:	68 00 50 01 00       	push   $0x15000
   10b32:	e8 42 f9 ff ff       	call   10479 <addr_free_page>
   10b37:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10b43:	90                   	nop
   10b44:	c9                   	leave  
   10b45:	c3                   	ret    

00010b46 <kalloc>:

/*-- ------------------------------ --*/
// 申请一页物理内存。
static uint32_t kalloc() {
   10b46:	55                   	push   %ebp
   10b47:	89 e5                	mov    %esp,%ebp
   10b49:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10b4c:	83 ec 08             	sub    $0x8,%esp
   10b4f:	6a 01                	push   $0x1
   10b51:	68 00 50 01 00       	push   $0x15000
   10b56:	e8 b7 f8 ff ff       	call   10412 <addr_alloc_page>
   10b5b:	83 c4 10             	add    $0x10,%esp
}
   10b5e:	c9                   	leave  
   10b5f:	c3                   	ret    

00010b60 <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr) {
   10b60:	55                   	push   %ebp
   10b61:	89 e5                	mov    %esp,%ebp
   10b63:	83 ec 08             	sub    $0x8,%esp
    addr_free_page(&paddr_alloc, addr, 1);
   10b66:	83 ec 04             	sub    $0x4,%esp
   10b69:	6a 01                	push   $0x1
   10b6b:	ff 75 08             	pushl  0x8(%ebp)
   10b6e:	68 00 50 01 00       	push   $0x15000
   10b73:	e8 01 f9 ff ff       	call   10479 <addr_free_page>
   10b78:	83 c4 10             	add    $0x10,%esp
}
   10b7b:	90                   	nop
   10b7c:	c9                   	leave  
   10b7d:	c3                   	ret    

00010b7e <sys_print_msg>:
#include "tools/log.h"

typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

// test
void sys_print_msg(char* fmt, int arg) {
   10b7e:	55                   	push   %ebp
   10b7f:	89 e5                	mov    %esp,%ebp
   10b81:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10b84:	83 ec 08             	sub    $0x8,%esp
   10b87:	ff 75 0c             	pushl  0xc(%ebp)
   10b8a:	ff 75 08             	pushl  0x8(%ebp)
   10b8d:	e8 8a 25 00 00       	call   1311c <log_printf>
   10b92:	83 c4 10             	add    $0x10,%esp
}
   10b95:	90                   	nop
   10b96:	c9                   	leave  
   10b97:	c3                   	ret    

00010b98 <do_handler_syscall>:
    [SYS_sleep]      = (syscall_handler_t)sys_sleep,
    [SYS_getpid]     = (syscall_handler_t)sys_getpid,
    [SYS_print_msg]  = (syscall_handler_t)sys_print_msg,
};

void do_handler_syscall(syscall_frame_t* frame) {
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
   10b9b:	53                   	push   %ebx
   10b9c:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba2:	8b 40 3c             	mov    0x3c(%eax),%eax
   10ba5:	83 f8 02             	cmp    $0x2,%eax
   10ba8:	77 4e                	ja     10bf8 <do_handler_syscall+0x60>
        syscall_handler_t handler = sys_table[frame->func_id];
   10baa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bad:	8b 40 3c             	mov    0x3c(%eax),%eax
   10bb0:	8b 04 85 88 33 01 00 	mov    0x13388(,%eax,4),%eax
   10bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (handler) {
   10bba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10bbe:	74 38                	je     10bf8 <do_handler_syscall+0x60>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc3:	8b 40 4c             	mov    0x4c(%eax),%eax
   10bc6:	89 c3                	mov    %eax,%ebx
   10bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcb:	8b 40 48             	mov    0x48(%eax),%eax
   10bce:	89 c1                	mov    %eax,%ecx
   10bd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd3:	8b 40 44             	mov    0x44(%eax),%eax
   10bd6:	89 c2                	mov    %eax,%edx
   10bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdb:	8b 40 40             	mov    0x40(%eax),%eax
   10bde:	53                   	push   %ebx
   10bdf:	51                   	push   %ecx
   10be0:	52                   	push   %edx
   10be1:	50                   	push   %eax
   10be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10be5:	ff d0                	call   *%eax
   10be7:	83 c4 10             	add    $0x10,%esp
   10bea:	89 45 f0             	mov    %eax,-0x10(%ebp)

            frame->eax = ret; // Integral and pointer return values appear in %eax.
   10bed:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10bf3:	89 50 30             	mov    %edx,0x30(%eax)

            return;
   10bf6:	eb 30                	jmp    10c28 <do_handler_syscall+0x90>
        }
    }

    task_t* task = task_current();
   10bf8:	e8 82 05 00 00       	call   1117f <task_current>
   10bfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10c00:	8b 45 08             	mov    0x8(%ebp),%eax
   10c03:	8b 40 3c             	mov    0x3c(%eax),%eax
   10c06:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10c09:	83 c2 04             	add    $0x4,%edx
   10c0c:	83 ec 04             	sub    $0x4,%esp
   10c0f:	50                   	push   %eax
   10c10:	52                   	push   %edx
   10c11:	68 94 33 01 00       	push   $0x13394
   10c16:	e8 01 25 00 00       	call   1311c <log_printf>
   10c1b:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   10c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c21:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
   10c28:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c2b:	c9                   	leave  
   10c2c:	c3                   	ret    

00010c2d <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10c2d:	55                   	push   %ebp
   10c2e:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10c30:	8b 45 08             	mov    0x8(%ebp),%eax
   10c33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10c39:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10c43:	90                   	nop
   10c44:	5d                   	pop    %ebp
   10c45:	c3                   	ret    

00010c46 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10c46:	55                   	push   %ebp
   10c47:	89 e5                	mov    %esp,%ebp
    return node->next;
   10c49:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4c:	8b 40 04             	mov    0x4(%eax),%eax
}
   10c4f:	5d                   	pop    %ebp
   10c50:	c3                   	ret    

00010c51 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10c51:	55                   	push   %ebp
   10c52:	89 e5                	mov    %esp,%ebp
    return list->count;
   10c54:	8b 45 08             	mov    0x8(%ebp),%eax
   10c57:	8b 40 08             	mov    0x8(%eax),%eax
}
   10c5a:	5d                   	pop    %ebp
   10c5b:	c3                   	ret    

00010c5c <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10c5c:	55                   	push   %ebp
   10c5d:	89 e5                	mov    %esp,%ebp
    return list->first;
   10c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c62:	8b 00                	mov    (%eax),%eax
}
   10c64:	5d                   	pop    %ebp
   10c65:	c3                   	ret    

00010c66 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10c66:	55                   	push   %ebp
   10c67:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10c69:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6c:	0f 22 d8             	mov    %eax,%cr3
}
   10c6f:	90                   	nop
   10c70:	5d                   	pop    %ebp
   10c71:	c3                   	ret    

00010c72 <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   10c72:	55                   	push   %ebp
   10c73:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10c75:	f4                   	hlt    
}
   10c76:	90                   	nop
   10c77:	5d                   	pop    %ebp
   10c78:	c3                   	ret    

00010c79 <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10c79:	55                   	push   %ebp
   10c7a:	89 e5                	mov    %esp,%ebp
   10c7c:	83 ec 04             	sub    $0x4,%esp
   10c7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c82:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10c86:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10c8a:	0f 00 d8             	ltr    %ax
}
   10c8d:	90                   	nop
   10c8e:	c9                   	leave  
   10c8f:	c3                   	ret    

00010c90 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10c90:	55                   	push   %ebp
   10c91:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10c93:	ff 75 08             	pushl  0x8(%ebp)
   10c96:	e8 cb ff ff ff       	call   10c66 <write_cr3>
   10c9b:	83 c4 04             	add    $0x4,%esp
}
   10c9e:	90                   	nop
   10c9f:	c9                   	leave  
   10ca0:	c3                   	ret    

00010ca1 <tss_init>:

// 空闲进程的栈, 不是广义上的内核栈
static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   10ca1:	55                   	push   %ebp
   10ca2:	89 e5                	mov    %esp,%ebp
   10ca4:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10ca7:	e8 fb 08 00 00       	call   115a7 <gdt_alloc_desc>
   10cac:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10caf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10cb3:	79 1a                	jns    10ccf <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10cb5:	83 ec 0c             	sub    $0xc,%esp
   10cb8:	68 b4 33 01 00       	push   $0x133b4
   10cbd:	e8 5a 24 00 00       	call   1311c <log_printf>
   10cc2:	83 c4 10             	add    $0x10,%esp
        return -1;
   10cc5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10cca:	e9 58 01 00 00       	jmp    10e27 <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd2:	83 c0 4c             	add    $0x4c,%eax
   10cd5:	68 89 00 00 00       	push   $0x89
   10cda:	6a 68                	push   $0x68
   10cdc:	50                   	push   %eax
   10cdd:	ff 75 ec             	pushl  -0x14(%ebp)
   10ce0:	e8 39 07 00 00       	call   1141e <segment_desc_set>
   10ce5:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   10ceb:	83 c0 4c             	add    $0x4c,%eax
   10cee:	83 ec 04             	sub    $0x4,%esp
   10cf1:	6a 68                	push   $0x68
   10cf3:	6a 00                	push   $0x0
   10cf5:	50                   	push   %eax
   10cf6:	e8 b2 1d 00 00       	call   12aad <kmemset>
   10cfb:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间，大小为PGSIZE
    uint32_t kernel_stack = memory_alloc_page();
   10cfe:	e8 8a fd ff ff       	call   10a8d <memory_alloc_page>
   10d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   10d06:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d0a:	0f 84 ec 00 00 00    	je     10dfc <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10d10:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d13:	83 e0 01             	and    $0x1,%eax
   10d16:	85 c0                	test   %eax,%eax
   10d18:	74 10                	je     10d2a <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   10d1a:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10d21:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10d28:	eb 16                	jmp    10d40 <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10d2a:	a1 98 71 01 00       	mov    0x17198,%eax
   10d2f:	83 c8 03             	or     $0x3,%eax
   10d32:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10d35:	a1 9c 71 01 00       	mov    0x1719c,%eax
   10d3a:	83 c8 03             	or     $0x3,%eax
   10d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   10d40:	8b 45 08             	mov    0x8(%ebp),%eax
   10d43:	8b 55 10             	mov    0x10(%ebp),%edx
   10d46:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp    = esp;
   10d49:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4c:	8b 55 14             	mov    0x14(%ebp),%edx
   10d4f:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   10d55:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d58:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10d5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d61:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss     = data_sel;
   10d64:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d67:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   10d70:	8b 45 08             	mov    0x8(%ebp),%eax
   10d73:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10d7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d80:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d86:	8b 45 08             	mov    0x8(%ebp),%eax
   10d89:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d92:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10d98:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9b:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10da1:	8b 45 08             	mov    0x8(%ebp),%eax
   10da4:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10daa:	8b 45 08             	mov    0x8(%ebp),%eax
   10dad:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10db3:	8b 45 08             	mov    0x8(%ebp),%eax
   10db6:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs     = code_sel;
   10dbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10dbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc2:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10dc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcb:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10dd2:	e8 4d fa ff ff       	call   10824 <memory_create_uvm>
   10dd7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   10dda:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10dde:	74 1f                	je     10dff <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   10de0:	8b 45 08             	mov    0x8(%ebp),%eax
   10de3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10de6:	89 50 68             	mov    %edx,0x68(%eax)

    task->tss_sel    = tss_sel;
   10de9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dec:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10def:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    return 0;
   10df5:	b8 00 00 00 00       	mov    $0x0,%eax
   10dfa:	eb 2b                	jmp    10e27 <tss_init+0x186>
        goto tss_init_failed;
   10dfc:	90                   	nop
   10dfd:	eb 01                	jmp    10e00 <tss_init+0x15f>
        goto tss_init_failed;
   10dff:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   10e00:	83 ec 0c             	sub    $0xc,%esp
   10e03:	ff 75 ec             	pushl  -0x14(%ebp)
   10e06:	e8 11 08 00 00       	call   1161c <gdt_free_sel>
   10e0b:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   10e0e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10e12:	74 0e                	je     10e22 <tss_init+0x181>
        memory_free_page(kernel_stack);
   10e14:	83 ec 0c             	sub    $0xc,%esp
   10e17:	ff 75 e8             	pushl  -0x18(%ebp)
   10e1a:	e8 8e fc ff ff       	call   10aad <memory_free_page>
   10e1f:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   10e22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e27:	c9                   	leave  
   10e28:	c3                   	ret    

00010e29 <task_init>:
// task_t* task:     已申请内存的进程结构体
// const char* name: 进程名
// int flag:         TASK_FLAG_USER 为用户进程，TASK_FLAG_SYSTEM 为内核进程
// uint32_t entry:   进程入口地址
// uint32_t esp:     进程栈底指针
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   10e29:	55                   	push   %ebp
   10e2a:	89 e5                	mov    %esp,%ebp
   10e2c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10e2f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e33:	75 19                	jne    10e4e <task_init+0x25>
   10e35:	68 c6 33 01 00       	push   $0x133c6
   10e3a:	68 50 34 01 00       	push   $0x13450
   10e3f:	6a 51                	push   $0x51
   10e41:	68 dc 33 01 00       	push   $0x133dc
   10e46:	e8 c7 1f 00 00       	call   12e12 <pannic>
   10e4b:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   10e4e:	ff 75 18             	pushl  0x18(%ebp)
   10e51:	ff 75 14             	pushl  0x14(%ebp)
   10e54:	ff 75 10             	pushl  0x10(%ebp)
   10e57:	ff 75 08             	pushl  0x8(%ebp)
   10e5a:	e8 42 fe ff ff       	call   10ca1 <tss_init>
   10e5f:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	83 c0 04             	add    $0x4,%eax
   10e68:	83 ec 04             	sub    $0x4,%esp
   10e6b:	6a 20                	push   $0x20
   10e6d:	ff 75 0c             	pushl  0xc(%ebp)
   10e70:	50                   	push   %eax
   10e71:	e8 c3 1a 00 00       	call   12939 <kstrncpy>
   10e76:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10e79:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10e82:	8b 45 08             	mov    0x8(%ebp),%eax
   10e85:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8f:	c7 40 44 0a 00 00 00 	movl   $0xa,0x44(%eax)
    task->slice_ticks = task->time_ticks;
   10e96:	8b 45 08             	mov    0x8(%ebp),%eax
   10e99:	8b 50 44             	mov    0x44(%eax),%edx
   10e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9f:	89 50 48             	mov    %edx,0x48(%eax)

    list_node_init(&task->all_node);
   10ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea5:	83 c0 30             	add    $0x30,%eax
   10ea8:	83 ec 0c             	sub    $0xc,%esp
   10eab:	50                   	push   %eax
   10eac:	e8 7c fd ff ff       	call   10c2d <list_node_init>
   10eb1:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10eb4:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb7:	83 c0 28             	add    $0x28,%eax
   10eba:	83 ec 0c             	sub    $0xc,%esp
   10ebd:	50                   	push   %eax
   10ebe:	e8 6a fd ff ff       	call   10c2d <list_node_init>
   10ec3:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10ec6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec9:	83 c0 38             	add    $0x38,%eax
   10ecc:	83 ec 0c             	sub    $0xc,%esp
   10ecf:	50                   	push   %eax
   10ed0:	e8 58 fd ff ff       	call   10c2d <list_node_init>
   10ed5:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10ed8:	e8 c3 10 00 00       	call   11fa0 <irq_enter_protection>
   10edd:	89 45 f4             	mov    %eax,-0xc(%ebp)


    task->pid = (uint32_t)task;
   10ee0:	8b 55 08             	mov    0x8(%ebp),%edx
   10ee3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee6:	89 50 24             	mov    %edx,0x24(%eax)

    task_set_ready(task);
   10ee9:	83 ec 0c             	sub    $0xc,%esp
   10eec:	ff 75 08             	pushl  0x8(%ebp)
   10eef:	e8 e9 01 00 00       	call   110dd <task_set_ready>
   10ef4:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10ef7:	8b 45 08             	mov    0x8(%ebp),%eax
   10efa:	83 c0 30             	add    $0x30,%eax
   10efd:	83 ec 08             	sub    $0x8,%esp
   10f00:	50                   	push   %eax
   10f01:	68 10 70 01 00       	push   $0x17010
   10f06:	e8 d2 1f 00 00       	call   12edd <list_insert_back>
   10f0b:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10f0e:	83 ec 0c             	sub    $0xc,%esp
   10f11:	ff 75 f4             	pushl  -0xc(%ebp)
   10f14:	e8 9f 10 00 00       	call   11fb8 <irq_leave_protection>
   10f19:	83 c4 10             	add    $0x10,%esp

    return 0;
   10f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f21:	c9                   	leave  
   10f22:	c3                   	ret    

00010f23 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10f23:	55                   	push   %ebp
   10f24:	89 e5                	mov    %esp,%ebp
   10f26:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10f29:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f2c:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   10f32:	83 ec 0c             	sub    $0xc,%esp
   10f35:	50                   	push   %eax
   10f36:	e8 58 06 00 00       	call   11593 <swtch_to_tss>
   10f3b:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10f3e:	90                   	nop
   10f3f:	c9                   	leave  
   10f40:	c3                   	ret    

00010f41 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10f41:	55                   	push   %ebp
   10f42:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   10f44:	e8 29 fd ff ff       	call   10c72 <hlt>
   10f49:	eb f9                	jmp    10f44 <idle_task_entry+0x3>

00010f4b <task_manager_init>:
    }
}


void task_manager_init(void) {
   10f4b:	55                   	push   %ebp
   10f4c:	89 e5                	mov    %esp,%ebp
   10f4e:	83 ec 18             	sub    $0x18,%esp
    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   10f51:	e8 51 06 00 00       	call   115a7 <gdt_alloc_desc>
   10f56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f59:	68 f2 40 00 00       	push   $0x40f2
   10f5e:	6a ff                	push   $0xffffffff
   10f60:	6a 00                	push   $0x0
   10f62:	ff 75 f4             	pushl  -0xc(%ebp)
   10f65:	e8 b4 04 00 00       	call   1141e <segment_desc_set>
   10f6a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f70:	a3 9c 71 01 00       	mov    %eax,0x1719c

    sel = gdt_alloc_desc();
   10f75:	e8 2d 06 00 00       	call   115a7 <gdt_alloc_desc>
   10f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f7d:	68 fa 40 00 00       	push   $0x40fa
   10f82:	6a ff                	push   $0xffffffff
   10f84:	6a 00                	push   $0x0
   10f86:	ff 75 f4             	pushl  -0xc(%ebp)
   10f89:	e8 90 04 00 00       	call   1141e <segment_desc_set>
   10f8e:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f94:	a3 98 71 01 00       	mov    %eax,0x17198

    list_init(&task_manager.ready_list);
   10f99:	83 ec 0c             	sub    $0xc,%esp
   10f9c:	68 04 70 01 00       	push   $0x17004
   10fa1:	e8 b5 1e 00 00       	call   12e5b <list_init>
   10fa6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10fa9:	83 ec 0c             	sub    $0xc,%esp
   10fac:	68 10 70 01 00       	push   $0x17010
   10fb1:	e8 a5 1e 00 00       	call   12e5b <list_init>
   10fb6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10fb9:	83 ec 0c             	sub    $0xc,%esp
   10fbc:	68 1c 70 01 00       	push   $0x1701c
   10fc1:	e8 95 1e 00 00       	call   12e5b <list_init>
   10fc6:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10fc9:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10fd0:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   10fd3:	b8 a0 71 01 00       	mov    $0x171a0,%eax
    task_init(&task_manager.idle_task, 
   10fd8:	05 00 04 00 00       	add    $0x400,%eax
   10fdd:	ba 41 0f 01 00       	mov    $0x10f41,%edx
   10fe2:	83 ec 0c             	sub    $0xc,%esp
   10fe5:	50                   	push   %eax
   10fe6:	52                   	push   %edx
   10fe7:	6a 01                	push   $0x1
   10fe9:	68 21 34 01 00       	push   $0x13421
   10fee:	68 e0 70 01 00       	push   $0x170e0
   10ff3:	e8 31 fe ff ff       	call   10e29 <task_init>
   10ff8:	83 c4 20             	add    $0x20,%esp
    );

    task_manager.curr_task = &task_manager.idle_task;
   10ffb:	c7 05 00 70 01 00 e0 	movl   $0x170e0,0x17000
   11002:	70 01 00 
}
   11005:	90                   	nop
   11006:	c9                   	leave  
   11007:	c3                   	ret    

00011008 <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   11008:	55                   	push   %ebp
   11009:	89 e5                	mov    %esp,%ebp
   1100b:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1100e:	ba bf 31 02 00       	mov    $0x231bf,%edx
   11013:	b8 c0 30 02 00       	mov    $0x230c0,%eax
   11018:	29 c2                	sub    %eax,%edx
   1101a:	89 d0                	mov    %edx,%eax
   1101c:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1101f:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11026:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1102a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1102d:	77 1c                	ja     1104b <task_first_init+0x43>
   1102f:	68 2b 34 01 00       	push   $0x1342b
   11034:	68 5c 34 01 00       	push   $0x1345c
   11039:	68 a7 00 00 00       	push   $0xa7
   1103e:	68 dc 33 01 00       	push   $0x133dc
   11043:	e8 ca 1d 00 00       	call   12e12 <pannic>
   11048:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1104b:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", TASK_FLAGS_USER, (uint32_t)first_start, first_start + alloc_size);
   11052:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11055:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11058:	01 d0                	add    %edx,%eax
   1105a:	83 ec 0c             	sub    $0xc,%esp
   1105d:	50                   	push   %eax
   1105e:	ff 75 ec             	pushl  -0x14(%ebp)
   11061:	6a 00                	push   $0x0
   11063:	68 42 34 01 00       	push   $0x13442
   11068:	68 28 70 01 00       	push   $0x17028
   1106d:	e8 b7 fd ff ff       	call   10e29 <task_init>
   11072:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   11075:	a1 dc 70 01 00       	mov    0x170dc,%eax
   1107a:	0f b7 c0             	movzwl %ax,%eax
   1107d:	83 ec 0c             	sub    $0xc,%esp
   11080:	50                   	push   %eax
   11081:	e8 f3 fb ff ff       	call   10c79 <write_tr>
   11086:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   11089:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   11090:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11093:	a1 90 70 01 00       	mov    0x17090,%eax
   11098:	83 ec 0c             	sub    $0xc,%esp
   1109b:	50                   	push   %eax
   1109c:	e8 ef fb ff ff       	call   10c90 <mmu_set_page_dir>
   110a1:	83 c4 10             	add    $0x10,%esp

    // 给该进程新开个一级页表，也就是类似于用户页表的东西
    // 并在这个一级页表里申请 alloc_size 大小的内存
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   110a4:	83 ec 04             	sub    $0x4,%esp
   110a7:	6a 07                	push   $0x7
   110a9:	ff 75 f0             	pushl  -0x10(%ebp)
   110ac:	ff 75 ec             	pushl  -0x14(%ebp)
   110af:	e8 a7 f9 ff ff       	call   10a5b <memory_alloc_page_for>
   110b4:	83 c4 10             	add    $0x10,%esp

    // 把这段代码拷贝到上面生成的页表里
    // 相当于就是把内存搬运到 virtual 0x80000000+ 了
    kmemcpy((void*)first_start, s_first_task, copy_size);
   110b7:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   110bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   110be:	83 ec 04             	sub    $0x4,%esp
   110c1:	52                   	push   %edx
   110c2:	68 c0 30 02 00       	push   $0x230c0
   110c7:	50                   	push   %eax
   110c8:	e8 91 19 00 00       	call   12a5e <kmemcpy>
   110cd:	83 c4 10             	add    $0x10,%esp
}
   110d0:	90                   	nop
   110d1:	c9                   	leave  
   110d2:	c3                   	ret    

000110d3 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   110d3:	55                   	push   %ebp
   110d4:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   110d6:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   110db:	5d                   	pop    %ebp
   110dc:	c3                   	ret    

000110dd <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   110dd:	55                   	push   %ebp
   110de:	89 e5                	mov    %esp,%ebp
   110e0:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   110e3:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   110ea:	74 22                	je     1110e <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   110ec:	8b 45 08             	mov    0x8(%ebp),%eax
   110ef:	83 c0 28             	add    $0x28,%eax
   110f2:	83 ec 08             	sub    $0x8,%esp
   110f5:	50                   	push   %eax
   110f6:	68 04 70 01 00       	push   $0x17004
   110fb:	e8 dd 1d 00 00       	call   12edd <list_insert_back>
   11100:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11103:	8b 45 08             	mov    0x8(%ebp),%eax
   11106:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1110c:	eb 01                	jmp    1110f <task_set_ready+0x32>
        return;
   1110e:	90                   	nop
}
   1110f:	c9                   	leave  
   11110:	c3                   	ret    

00011111 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   11111:	55                   	push   %ebp
   11112:	89 e5                	mov    %esp,%ebp
   11114:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   11117:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   1111e:	74 19                	je     11139 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   11120:	8b 45 08             	mov    0x8(%ebp),%eax
   11123:	83 c0 28             	add    $0x28,%eax
   11126:	83 ec 08             	sub    $0x8,%esp
   11129:	50                   	push   %eax
   1112a:	68 04 70 01 00       	push   $0x17004
   1112f:	e8 85 1e 00 00       	call   12fb9 <list_remove>
   11134:	83 c4 10             	add    $0x10,%esp
   11137:	eb 01                	jmp    1113a <task_set_blocked+0x29>
        return;
   11139:	90                   	nop
}
   1113a:	c9                   	leave  
   1113b:	c3                   	ret    

0001113c <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   1113c:	55                   	push   %ebp
   1113d:	89 e5                	mov    %esp,%ebp
   1113f:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   11142:	68 04 70 01 00       	push   $0x17004
   11147:	e8 05 fb ff ff       	call   10c51 <list_size>
   1114c:	83 c4 04             	add    $0x4,%esp
   1114f:	85 c0                	test   %eax,%eax
   11151:	75 07                	jne    1115a <task_next_run+0x1e>
        return &task_manager.idle_task;
   11153:	b8 e0 70 01 00       	mov    $0x170e0,%eax
   11158:	eb 23                	jmp    1117d <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   1115a:	68 04 70 01 00       	push   $0x17004
   1115f:	e8 f8 fa ff ff       	call   10c5c <list_first>
   11164:	83 c4 04             	add    $0x4,%esp
   11167:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   1116a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1116e:	74 08                	je     11178 <task_next_run+0x3c>
   11170:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11173:	83 e8 28             	sub    $0x28,%eax
   11176:	eb 05                	jmp    1117d <task_next_run+0x41>
   11178:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1117d:	c9                   	leave  
   1117e:	c3                   	ret    

0001117f <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   1117f:	55                   	push   %ebp
   11180:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11182:	a1 00 70 01 00       	mov    0x17000,%eax
}
   11187:	5d                   	pop    %ebp
   11188:	c3                   	ret    

00011189 <sys_sched_yield>:

// 当前进程主动放弃CPU
int sys_sched_yield(void) {
   11189:	55                   	push   %ebp
   1118a:	89 e5                	mov    %esp,%ebp
   1118c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1118f:	e8 0c 0e 00 00       	call   11fa0 <irq_enter_protection>
   11194:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   11197:	83 ec 0c             	sub    $0xc,%esp
   1119a:	68 04 70 01 00       	push   $0x17004
   1119f:	e8 ad fa ff ff       	call   10c51 <list_size>
   111a4:	83 c4 10             	add    $0x10,%esp
   111a7:	83 f8 01             	cmp    $0x1,%eax
   111aa:	7e 29                	jle    111d5 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   111ac:	e8 ce ff ff ff       	call   1117f <task_current>
   111b1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   111b4:	83 ec 0c             	sub    $0xc,%esp
   111b7:	ff 75 f0             	pushl  -0x10(%ebp)
   111ba:	e8 52 ff ff ff       	call   11111 <task_set_blocked>
   111bf:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   111c2:	83 ec 0c             	sub    $0xc,%esp
   111c5:	ff 75 f0             	pushl  -0x10(%ebp)
   111c8:	e8 10 ff ff ff       	call   110dd <task_set_ready>
   111cd:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   111d0:	e8 15 00 00 00       	call   111ea <task_dispatch>
    }

    irq_leave_protection(state);
   111d5:	83 ec 0c             	sub    $0xc,%esp
   111d8:	ff 75 f4             	pushl  -0xc(%ebp)
   111db:	e8 d8 0d 00 00       	call   11fb8 <irq_leave_protection>
   111e0:	83 c4 10             	add    $0x10,%esp

    return 0;
   111e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111e8:	c9                   	leave  
   111e9:	c3                   	ret    

000111ea <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   111ea:	55                   	push   %ebp
   111eb:	89 e5                	mov    %esp,%ebp
   111ed:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   111f0:	e8 ab 0d 00 00       	call   11fa0 <irq_enter_protection>
   111f5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   111f8:	e8 3f ff ff ff       	call   1113c <task_next_run>
   111fd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   11200:	a1 00 70 01 00       	mov    0x17000,%eax
   11205:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11208:	74 2a                	je     11234 <task_dispatch+0x4a>
        task_t* from = task_current();
   1120a:	e8 70 ff ff ff       	call   1117f <task_current>
   1120f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11212:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11215:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   1121a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1121d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   11223:	83 ec 08             	sub    $0x8,%esp
   11226:	ff 75 f0             	pushl  -0x10(%ebp)
   11229:	ff 75 ec             	pushl  -0x14(%ebp)
   1122c:	e8 f2 fc ff ff       	call   10f23 <task_switch_from_to>
   11231:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   11234:	83 ec 0c             	sub    $0xc,%esp
   11237:	ff 75 f4             	pushl  -0xc(%ebp)
   1123a:	e8 79 0d 00 00       	call   11fb8 <irq_leave_protection>
   1123f:	83 c4 10             	add    $0x10,%esp
}
   11242:	90                   	nop
   11243:	c9                   	leave  
   11244:	c3                   	ret    

00011245 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   11245:	55                   	push   %ebp
   11246:	89 e5                	mov    %esp,%ebp
   11248:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   1124b:	e8 2f ff ff ff       	call   1117f <task_current>
   11250:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   11253:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11256:	8b 40 48             	mov    0x48(%eax),%eax
   11259:	8d 50 ff             	lea    -0x1(%eax),%edx
   1125c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1125f:	89 50 48             	mov    %edx,0x48(%eax)
   11262:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11265:	8b 40 48             	mov    0x48(%eax),%eax
   11268:	85 c0                	test   %eax,%eax
   1126a:	75 2d                	jne    11299 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   1126c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1126f:	8b 50 44             	mov    0x44(%eax),%edx
   11272:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11275:	89 50 48             	mov    %edx,0x48(%eax)

        task_set_blocked(curr_task);
   11278:	83 ec 0c             	sub    $0xc,%esp
   1127b:	ff 75 f0             	pushl  -0x10(%ebp)
   1127e:	e8 8e fe ff ff       	call   11111 <task_set_blocked>
   11283:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11286:	83 ec 0c             	sub    $0xc,%esp
   11289:	ff 75 f0             	pushl  -0x10(%ebp)
   1128c:	e8 4c fe ff ff       	call   110dd <task_set_ready>
   11291:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11294:	e8 51 ff ff ff       	call   111ea <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   11299:	83 ec 0c             	sub    $0xc,%esp
   1129c:	68 1c 70 01 00       	push   $0x1701c
   112a1:	e8 b6 f9 ff ff       	call   10c5c <list_first>
   112a6:	83 c4 10             	add    $0x10,%esp
   112a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   112ac:	eb 62                	jmp    11310 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   112ae:	83 ec 0c             	sub    $0xc,%esp
   112b1:	ff 75 f4             	pushl  -0xc(%ebp)
   112b4:	e8 8d f9 ff ff       	call   10c46 <list_node_next>
   112b9:	83 c4 10             	add    $0x10,%esp
   112bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   112bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112c3:	74 08                	je     112cd <task_time_tick+0x88>
   112c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112c8:	83 e8 28             	sub    $0x28,%eax
   112cb:	eb 05                	jmp    112d2 <task_time_tick+0x8d>
   112cd:	b8 00 00 00 00       	mov    $0x0,%eax
   112d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   112d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112d8:	8b 40 40             	mov    0x40(%eax),%eax
   112db:	8d 50 ff             	lea    -0x1(%eax),%edx
   112de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112e1:	89 50 40             	mov    %edx,0x40(%eax)
   112e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112e7:	8b 40 40             	mov    0x40(%eax),%eax
   112ea:	85 c0                	test   %eax,%eax
   112ec:	75 1c                	jne    1130a <task_time_tick+0xc5>
            task_set_wakeup(task);
   112ee:	83 ec 0c             	sub    $0xc,%esp
   112f1:	ff 75 e8             	pushl  -0x18(%ebp)
   112f4:	e8 56 00 00 00       	call   1134f <task_set_wakeup>
   112f9:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   112fc:	83 ec 0c             	sub    $0xc,%esp
   112ff:	ff 75 e8             	pushl  -0x18(%ebp)
   11302:	e8 d6 fd ff ff       	call   110dd <task_set_ready>
   11307:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   1130a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1130d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11310:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11314:	75 98                	jne    112ae <task_time_tick+0x69>
    }

    task_dispatch();
   11316:	e8 cf fe ff ff       	call   111ea <task_dispatch>
}
   1131b:	90                   	nop
   1131c:	c9                   	leave  
   1131d:	c3                   	ret    

0001131e <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   1131e:	55                   	push   %ebp
   1131f:	89 e5                	mov    %esp,%ebp
   11321:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11324:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11328:	74 22                	je     1134c <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   1132a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1132d:	8b 45 08             	mov    0x8(%ebp),%eax
   11330:	89 50 40             	mov    %edx,0x40(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   11333:	8b 45 08             	mov    0x8(%ebp),%eax
   11336:	83 c0 28             	add    $0x28,%eax
   11339:	83 ec 08             	sub    $0x8,%esp
   1133c:	50                   	push   %eax
   1133d:	68 1c 70 01 00       	push   $0x1701c
   11342:	e8 96 1b 00 00       	call   12edd <list_insert_back>
   11347:	83 c4 10             	add    $0x10,%esp
   1134a:	eb 01                	jmp    1134d <task_set_sleep+0x2f>
        return;
   1134c:	90                   	nop
}
   1134d:	c9                   	leave  
   1134e:	c3                   	ret    

0001134f <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   1134f:	55                   	push   %ebp
   11350:	89 e5                	mov    %esp,%ebp
   11352:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11355:	8b 45 08             	mov    0x8(%ebp),%eax
   11358:	83 c0 28             	add    $0x28,%eax
   1135b:	83 ec 08             	sub    $0x8,%esp
   1135e:	50                   	push   %eax
   1135f:	68 1c 70 01 00       	push   $0x1701c
   11364:	e8 50 1c 00 00       	call   12fb9 <list_remove>
   11369:	83 c4 10             	add    $0x10,%esp
}
   1136c:	90                   	nop
   1136d:	c9                   	leave  
   1136e:	c3                   	ret    

0001136f <sys_sleep>:


void sys_sleep(uint32_t ms) {
   1136f:	55                   	push   %ebp
   11370:	89 e5                	mov    %esp,%ebp
   11372:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11375:	e8 26 0c 00 00       	call   11fa0 <irq_enter_protection>
   1137a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   1137d:	a1 00 70 01 00       	mov    0x17000,%eax
   11382:	83 ec 0c             	sub    $0xc,%esp
   11385:	50                   	push   %eax
   11386:	e8 86 fd ff ff       	call   11111 <task_set_blocked>
   1138b:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   1138e:	8b 45 08             	mov    0x8(%ebp),%eax
   11391:	83 c0 09             	add    $0x9,%eax
   11394:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11399:	f7 e2                	mul    %edx
   1139b:	c1 ea 03             	shr    $0x3,%edx
   1139e:	a1 00 70 01 00       	mov    0x17000,%eax
   113a3:	83 ec 08             	sub    $0x8,%esp
   113a6:	52                   	push   %edx
   113a7:	50                   	push   %eax
   113a8:	e8 71 ff ff ff       	call   1131e <task_set_sleep>
   113ad:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   113b0:	e8 35 fe ff ff       	call   111ea <task_dispatch>

    irq_leave_protection(state);
   113b5:	83 ec 0c             	sub    $0xc,%esp
   113b8:	ff 75 f4             	pushl  -0xc(%ebp)
   113bb:	e8 f8 0b 00 00       	call   11fb8 <irq_leave_protection>
   113c0:	83 c4 10             	add    $0x10,%esp
}
   113c3:	90                   	nop
   113c4:	c9                   	leave  
   113c5:	c3                   	ret    

000113c6 <sys_getpid>:


int sys_getpid(void) {
   113c6:	55                   	push   %ebp
   113c7:	89 e5                	mov    %esp,%ebp
   113c9:	83 ec 10             	sub    $0x10,%esp
    task_t* task = task_current();
   113cc:	e8 ae fd ff ff       	call   1117f <task_current>
   113d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   113d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d7:	8b 40 24             	mov    0x24(%eax),%eax
   113da:	c9                   	leave  
   113db:	c3                   	ret    

000113dc <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   113dc:	55                   	push   %ebp
   113dd:	89 e5                	mov    %esp,%ebp
   113df:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   113e2:	8b 45 08             	mov    0x8(%ebp),%eax
   113e5:	c1 e8 10             	shr    $0x10,%eax
   113e8:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   113ec:	8b 45 08             	mov    0x8(%ebp),%eax
   113ef:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   113f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   113f6:	83 e8 01             	sub    $0x1,%eax
   113f9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   113fd:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11401:	90                   	nop
   11402:	c9                   	leave  
   11403:	c3                   	ret    

00011404 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11404:	55                   	push   %ebp
   11405:	89 e5                	mov    %esp,%ebp
   11407:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   1140a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1140d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11410:	8b 45 08             	mov    0x8(%ebp),%eax
   11413:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11416:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11419:	ff 28                	ljmp   *(%eax)
}
   1141b:	90                   	nop
   1141c:	c9                   	leave  
   1141d:	c3                   	ret    

0001141e <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1141e:	55                   	push   %ebp
   1141f:	89 e5                	mov    %esp,%ebp
   11421:	83 ec 14             	sub    $0x14,%esp
   11424:	8b 45 14             	mov    0x14(%ebp),%eax
   11427:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   1142b:	8b 45 08             	mov    0x8(%ebp),%eax
   1142e:	83 e0 f8             	and    $0xfffffff8,%eax
   11431:	05 a0 81 01 00       	add    $0x181a0,%eax
   11436:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   11439:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11440:	76 0f                	jbe    11451 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   11442:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11448:	8b 45 10             	mov    0x10(%ebp),%eax
   1144b:	c1 e8 0c             	shr    $0xc,%eax
   1144e:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   11451:	8b 45 10             	mov    0x10(%ebp),%eax
   11454:	89 c2                	mov    %eax,%edx
   11456:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11459:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   1145c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1145f:	89 c2                	mov    %eax,%edx
   11461:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11464:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   11468:	8b 45 0c             	mov    0xc(%ebp),%eax
   1146b:	c1 e8 10             	shr    $0x10,%eax
   1146e:	89 c2                	mov    %eax,%edx
   11470:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11473:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   11476:	8b 45 10             	mov    0x10(%ebp),%eax
   11479:	c1 e8 10             	shr    $0x10,%eax
   1147c:	c1 e0 08             	shl    $0x8,%eax
   1147f:	66 25 00 0f          	and    $0xf00,%ax
   11483:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11487:	89 c2                	mov    %eax,%edx
   11489:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1148c:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11490:	8b 45 0c             	mov    0xc(%ebp),%eax
   11493:	c1 e8 18             	shr    $0x18,%eax
   11496:	89 c2                	mov    %eax,%edx
   11498:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1149b:	88 50 07             	mov    %dl,0x7(%eax)
}
   1149e:	90                   	nop
   1149f:	c9                   	leave  
   114a0:	c3                   	ret    

000114a1 <gate_desc_set>:


// 设置 Interrupt /Call Gate 表项
void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   114a1:	55                   	push   %ebp
   114a2:	89 e5                	mov    %esp,%ebp
   114a4:	83 ec 08             	sub    $0x8,%esp
   114a7:	8b 55 0c             	mov    0xc(%ebp),%edx
   114aa:	8b 45 14             	mov    0x14(%ebp),%eax
   114ad:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   114b1:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   114b5:	8b 45 10             	mov    0x10(%ebp),%eax
   114b8:	89 c2                	mov    %eax,%edx
   114ba:	8b 45 08             	mov    0x8(%ebp),%eax
   114bd:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   114c0:	8b 45 08             	mov    0x8(%ebp),%eax
   114c3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114c7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   114cb:	8b 45 08             	mov    0x8(%ebp),%eax
   114ce:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   114d2:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   114d6:	8b 45 10             	mov    0x10(%ebp),%eax
   114d9:	c1 e8 10             	shr    $0x10,%eax
   114dc:	89 c2                	mov    %eax,%edx
   114de:	8b 45 08             	mov    0x8(%ebp),%eax
   114e1:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   114e5:	90                   	nop
   114e6:	c9                   	leave  
   114e7:	c3                   	ret    

000114e8 <init_gdt>:


void init_gdt(void) {
   114e8:	55                   	push   %ebp
   114e9:	89 e5                	mov    %esp,%ebp
   114eb:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   114ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   114f5:	eb 19                	jmp    11510 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   114f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114fa:	c1 e0 03             	shl    $0x3,%eax
   114fd:	6a 00                	push   $0x0
   114ff:	6a 00                	push   $0x0
   11501:	6a 00                	push   $0x0
   11503:	50                   	push   %eax
   11504:	e8 15 ff ff ff       	call   1141e <segment_desc_set>
   11509:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1150c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11510:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11517:	7e de                	jle    114f7 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11519:	68 92 40 00 00       	push   $0x4092
   1151e:	6a ff                	push   $0xffffffff
   11520:	6a 00                	push   $0x0
   11522:	6a 10                	push   $0x10
   11524:	e8 f5 fe ff ff       	call   1141e <segment_desc_set>
   11529:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   1152c:	68 9a 40 00 00       	push   $0x409a
   11531:	6a ff                	push   $0xffffffff
   11533:	6a 00                	push   $0x0
   11535:	6a 08                	push   $0x8
   11537:	e8 e2 fe ff ff       	call   1141e <segment_desc_set>
   1153c:	83 c4 10             	add    $0x10,%esp

    // syscall 初始化。syscall gate DPL 要为3，这个描述符应该能被用户代码访问
    gate_desc_set((gate_desc_t*)(gdt_table + (SELECTOR_SYSCALL >> 3)), 
   1153f:	ba d7 02 01 00       	mov    $0x102d7,%edx
   11544:	b8 b8 81 01 00       	mov    $0x181b8,%eax
   11549:	68 05 ec 00 00       	push   $0xec05
   1154e:	52                   	push   %edx
   1154f:	6a 08                	push   $0x8
   11551:	50                   	push   %eax
   11552:	e8 4a ff ff ff       	call   114a1 <gate_desc_set>
   11557:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1155a:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   1155f:	68 00 08 00 00       	push   $0x800
   11564:	50                   	push   %eax
   11565:	e8 72 fe ff ff       	call   113dc <lgdt>
   1156a:	83 c4 08             	add    $0x8,%esp
}
   1156d:	90                   	nop
   1156e:	c9                   	leave  
   1156f:	c3                   	ret    

00011570 <cpu_init>:


void cpu_init(void) {
   11570:	55                   	push   %ebp
   11571:	89 e5                	mov    %esp,%ebp
   11573:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   11576:	83 ec 08             	sub    $0x8,%esp
   11579:	68 6c 34 01 00       	push   $0x1346c
   1157e:	68 a0 89 01 00       	push   $0x189a0
   11583:	e8 4b 0e 00 00       	call   123d3 <mutex_init>
   11588:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1158b:	e8 58 ff ff ff       	call   114e8 <init_gdt>
}
   11590:	90                   	nop
   11591:	c9                   	leave  
   11592:	c3                   	ret    

00011593 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   11593:	55                   	push   %ebp
   11594:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   11596:	8b 45 08             	mov    0x8(%ebp),%eax
   11599:	6a 00                	push   $0x0
   1159b:	50                   	push   %eax
   1159c:	e8 63 fe ff ff       	call   11404 <far_jump>
   115a1:	83 c4 08             	add    $0x8,%esp
}
   115a4:	90                   	nop
   115a5:	c9                   	leave  
   115a6:	c3                   	ret    

000115a7 <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   115a7:	55                   	push   %ebp
   115a8:	89 e5                	mov    %esp,%ebp
   115aa:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   115ad:	83 ec 0c             	sub    $0xc,%esp
   115b0:	68 a0 89 01 00       	push   $0x189a0
   115b5:	e8 5a 0e 00 00       	call   12414 <mutex_acquire>
   115ba:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   115bd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   115c4:	eb 36                	jmp    115fc <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   115c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115c9:	c1 e0 03             	shl    $0x3,%eax
   115cc:	05 a0 81 01 00       	add    $0x181a0,%eax
   115d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   115d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115d7:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   115db:	66 85 c0             	test   %ax,%ax
   115de:	75 18                	jne    115f8 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   115e0:	83 ec 0c             	sub    $0xc,%esp
   115e3:	68 a0 89 01 00       	push   $0x189a0
   115e8:	e8 b5 0e 00 00       	call   124a2 <mutex_release>
   115ed:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   115f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115f3:	c1 e0 03             	shl    $0x3,%eax
   115f6:	eb 22                	jmp    1161a <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   115f8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   115fc:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11603:	7e c1                	jle    115c6 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11605:	83 ec 0c             	sub    $0xc,%esp
   11608:	68 a0 89 01 00       	push   $0x189a0
   1160d:	e8 90 0e 00 00       	call   124a2 <mutex_release>
   11612:	83 c4 10             	add    $0x10,%esp

    return -1;
   11615:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1161a:	c9                   	leave  
   1161b:	c3                   	ret    

0001161c <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1161c:	55                   	push   %ebp
   1161d:	89 e5                	mov    %esp,%ebp
   1161f:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   11622:	83 ec 0c             	sub    $0xc,%esp
   11625:	68 a0 89 01 00       	push   $0x189a0
   1162a:	e8 e5 0d 00 00       	call   12414 <mutex_acquire>
   1162f:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   11632:	8b 45 08             	mov    0x8(%ebp),%eax
   11635:	c1 e8 03             	shr    $0x3,%eax
   11638:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   1163f:	00 00 00 

    mutex_release(&mutex);
   11642:	83 ec 0c             	sub    $0xc,%esp
   11645:	68 a0 89 01 00       	push   $0x189a0
   1164a:	e8 53 0e 00 00       	call   124a2 <mutex_release>
   1164f:	83 c4 10             	add    $0x10,%esp
   11652:	90                   	nop
   11653:	c9                   	leave  
   11654:	c3                   	ret    

00011655 <inb>:
static inline uint8_t inb(uint16_t port) {
   11655:	55                   	push   %ebp
   11656:	89 e5                	mov    %esp,%ebp
   11658:	83 ec 14             	sub    $0x14,%esp
   1165b:	8b 45 08             	mov    0x8(%ebp),%eax
   1165e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   11662:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11666:	89 c2                	mov    %eax,%edx
   11668:	ec                   	in     (%dx),%al
   11669:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1166c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11670:	c9                   	leave  
   11671:	c3                   	ret    

00011672 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11672:	55                   	push   %ebp
   11673:	89 e5                	mov    %esp,%ebp
   11675:	83 ec 08             	sub    $0x8,%esp
   11678:	8b 55 08             	mov    0x8(%ebp),%edx
   1167b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1167e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11682:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11685:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11689:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1168d:	ee                   	out    %al,(%dx)
}
   1168e:	90                   	nop
   1168f:	c9                   	leave  
   11690:	c3                   	ret    

00011691 <cli>:
static inline void cli(void) {
   11691:	55                   	push   %ebp
   11692:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   11694:	fa                   	cli    
}
   11695:	90                   	nop
   11696:	5d                   	pop    %ebp
   11697:	c3                   	ret    

00011698 <sti>:
static inline void sti(void) {
   11698:	55                   	push   %ebp
   11699:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   1169b:	fb                   	sti    
}
   1169c:	90                   	nop
   1169d:	5d                   	pop    %ebp
   1169e:	c3                   	ret    

0001169f <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1169f:	55                   	push   %ebp
   116a0:	89 e5                	mov    %esp,%ebp
   116a2:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   116a5:	8b 45 08             	mov    0x8(%ebp),%eax
   116a8:	c1 e8 10             	shr    $0x10,%eax
   116ab:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   116af:	8b 45 08             	mov    0x8(%ebp),%eax
   116b2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   116b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   116b9:	83 e8 01             	sub    $0x1,%eax
   116bc:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   116c0:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   116c4:	90                   	nop
   116c5:	c9                   	leave  
   116c6:	c3                   	ret    

000116c7 <read_cr2>:
static inline uint32_t read_cr2() {
   116c7:	55                   	push   %ebp
   116c8:	89 e5                	mov    %esp,%ebp
   116ca:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   116cd:	0f 20 d0             	mov    %cr2,%eax
   116d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   116d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116d6:	c9                   	leave  
   116d7:	c3                   	ret    

000116d8 <hlt>:
static inline void hlt(void) {
   116d8:	55                   	push   %ebp
   116d9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   116db:	f4                   	hlt    
}
   116dc:	90                   	nop
   116dd:	5d                   	pop    %ebp
   116de:	c3                   	ret    

000116df <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   116df:	55                   	push   %ebp
   116e0:	89 e5                	mov    %esp,%ebp
   116e2:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   116e5:	9c                   	pushf  
   116e6:	58                   	pop    %eax
   116e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   116ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116ed:	c9                   	leave  
   116ee:	c3                   	ret    

000116ef <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   116ef:	55                   	push   %ebp
   116f0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   116f2:	8b 45 08             	mov    0x8(%ebp),%eax
   116f5:	50                   	push   %eax
   116f6:	9d                   	popf   
}
   116f7:	90                   	nop
   116f8:	5d                   	pop    %ebp
   116f9:	c3                   	ret    

000116fa <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   116fa:	55                   	push   %ebp
   116fb:	89 e5                	mov    %esp,%ebp
   116fd:	57                   	push   %edi
   116fe:	56                   	push   %esi
   116ff:	53                   	push   %ebx
   11700:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	8b 40 3c             	mov    0x3c(%eax),%eax
   11709:	83 e0 07             	and    $0x7,%eax
   1170c:	85 c0                	test   %eax,%eax
   1170e:	74 14                	je     11724 <dump_core_regs+0x2a>
        ss = frame->ds;
   11710:	8b 45 08             	mov    0x8(%ebp),%eax
   11713:	8b 40 0c             	mov    0xc(%eax),%eax
   11716:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   11719:	8b 45 08             	mov    0x8(%ebp),%eax
   1171c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1171f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11722:	eb 12                	jmp    11736 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   11724:	8b 45 08             	mov    0x8(%ebp),%eax
   11727:	8b 40 48             	mov    0x48(%eax),%eax
   1172a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1172d:	8b 45 08             	mov    0x8(%ebp),%eax
   11730:	8b 40 44             	mov    0x44(%eax),%eax
   11733:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11736:	8b 45 08             	mov    0x8(%ebp),%eax
   11739:	8b 50 34             	mov    0x34(%eax),%edx
   1173c:	8b 45 08             	mov    0x8(%ebp),%eax
   1173f:	8b 40 30             	mov    0x30(%eax),%eax
   11742:	83 ec 04             	sub    $0x4,%esp
   11745:	52                   	push   %edx
   11746:	50                   	push   %eax
   11747:	68 78 34 01 00       	push   $0x13478
   1174c:	e8 cb 19 00 00       	call   1311c <log_printf>
   11751:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   11754:	8b 45 08             	mov    0x8(%ebp),%eax
   11757:	8b 30                	mov    (%eax),%esi
   11759:	8b 45 08             	mov    0x8(%ebp),%eax
   1175c:	8b 58 04             	mov    0x4(%eax),%ebx
   1175f:	8b 45 08             	mov    0x8(%ebp),%eax
   11762:	8b 48 08             	mov    0x8(%eax),%ecx
   11765:	8b 45 08             	mov    0x8(%ebp),%eax
   11768:	8b 50 0c             	mov    0xc(%eax),%edx
   1176b:	8b 45 08             	mov    0x8(%ebp),%eax
   1176e:	8b 40 3c             	mov    0x3c(%eax),%eax
   11771:	83 ec 04             	sub    $0x4,%esp
   11774:	56                   	push   %esi
   11775:	53                   	push   %ebx
   11776:	ff 75 e0             	pushl  -0x20(%ebp)
   11779:	51                   	push   %ecx
   1177a:	52                   	push   %edx
   1177b:	50                   	push   %eax
   1177c:	68 90 34 01 00       	push   $0x13490
   11781:	e8 96 19 00 00       	call   1311c <log_printf>
   11786:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   11789:	8b 45 08             	mov    0x8(%ebp),%eax
   1178c:	8b 78 18             	mov    0x18(%eax),%edi
   1178f:	8b 45 08             	mov    0x8(%ebp),%eax
   11792:	8b 70 14             	mov    0x14(%eax),%esi
   11795:	8b 45 08             	mov    0x8(%ebp),%eax
   11798:	8b 58 10             	mov    0x10(%eax),%ebx
   1179b:	8b 45 08             	mov    0x8(%ebp),%eax
   1179e:	8b 48 24             	mov    0x24(%eax),%ecx
   117a1:	8b 45 08             	mov    0x8(%ebp),%eax
   117a4:	8b 50 20             	mov    0x20(%eax),%edx
   117a7:	8b 45 08             	mov    0x8(%ebp),%eax
   117aa:	8b 40 2c             	mov    0x2c(%eax),%eax
   117ad:	ff 75 e4             	pushl  -0x1c(%ebp)
   117b0:	57                   	push   %edi
   117b1:	56                   	push   %esi
   117b2:	53                   	push   %ebx
   117b3:	51                   	push   %ecx
   117b4:	52                   	push   %edx
   117b5:	50                   	push   %eax
   117b6:	68 bc 34 01 00       	push   $0x134bc
   117bb:	e8 5c 19 00 00       	call   1311c <log_printf>
   117c0:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   117c3:	8b 45 08             	mov    0x8(%ebp),%eax
   117c6:	8b 50 40             	mov    0x40(%eax),%edx
   117c9:	8b 45 08             	mov    0x8(%ebp),%eax
   117cc:	8b 40 38             	mov    0x38(%eax),%eax
   117cf:	83 ec 04             	sub    $0x4,%esp
   117d2:	52                   	push   %edx
   117d3:	50                   	push   %eax
   117d4:	68 f5 34 01 00       	push   $0x134f5
   117d9:	e8 3e 19 00 00       	call   1311c <log_printf>
   117de:	83 c4 10             	add    $0x10,%esp
}
   117e1:	90                   	nop
   117e2:	8d 65 f4             	lea    -0xc(%ebp),%esp
   117e5:	5b                   	pop    %ebx
   117e6:	5e                   	pop    %esi
   117e7:	5f                   	pop    %edi
   117e8:	5d                   	pop    %ebp
   117e9:	c3                   	ret    

000117ea <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   117ea:	55                   	push   %ebp
   117eb:	89 e5                	mov    %esp,%ebp
   117ed:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   117f0:	83 ec 0c             	sub    $0xc,%esp
   117f3:	68 0c 35 01 00       	push   $0x1350c
   117f8:	e8 1f 19 00 00       	call   1311c <log_printf>
   117fd:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   11800:	83 ec 08             	sub    $0x8,%esp
   11803:	ff 75 0c             	pushl  0xc(%ebp)
   11806:	68 37 35 01 00       	push   $0x13537
   1180b:	e8 0c 19 00 00       	call   1311c <log_printf>
   11810:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   11813:	83 ec 0c             	sub    $0xc,%esp
   11816:	ff 75 08             	pushl  0x8(%ebp)
   11819:	e8 dc fe ff ff       	call   116fa <dump_core_regs>
   1181e:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11821:	e8 b2 fe ff ff       	call   116d8 <hlt>
   11826:	eb f9                	jmp    11821 <do_default_handler+0x37>

00011828 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11828:	55                   	push   %ebp
   11829:	89 e5                	mov    %esp,%ebp
   1182b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   1182e:	83 ec 08             	sub    $0x8,%esp
   11831:	68 49 35 01 00       	push   $0x13549
   11836:	ff 75 08             	pushl  0x8(%ebp)
   11839:	e8 ac ff ff ff       	call   117ea <do_default_handler>
   1183e:	83 c4 10             	add    $0x10,%esp
}
   11841:	90                   	nop
   11842:	c9                   	leave  
   11843:	c3                   	ret    

00011844 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   11844:	55                   	push   %ebp
   11845:	89 e5                	mov    %esp,%ebp
   11847:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   1184a:	83 ec 08             	sub    $0x8,%esp
   1184d:	68 5b 35 01 00       	push   $0x1355b
   11852:	ff 75 08             	pushl  0x8(%ebp)
   11855:	e8 90 ff ff ff       	call   117ea <do_default_handler>
   1185a:	83 c4 10             	add    $0x10,%esp
}
   1185d:	90                   	nop
   1185e:	c9                   	leave  
   1185f:	c3                   	ret    

00011860 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11860:	55                   	push   %ebp
   11861:	89 e5                	mov    %esp,%ebp
   11863:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   11866:	83 ec 08             	sub    $0x8,%esp
   11869:	68 75 35 01 00       	push   $0x13575
   1186e:	ff 75 08             	pushl  0x8(%ebp)
   11871:	e8 74 ff ff ff       	call   117ea <do_default_handler>
   11876:	83 c4 10             	add    $0x10,%esp
}   
   11879:	90                   	nop
   1187a:	c9                   	leave  
   1187b:	c3                   	ret    

0001187c <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   1187c:	55                   	push   %ebp
   1187d:	89 e5                	mov    %esp,%ebp
   1187f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   11882:	83 ec 08             	sub    $0x8,%esp
   11885:	68 90 35 01 00       	push   $0x13590
   1188a:	ff 75 08             	pushl  0x8(%ebp)
   1188d:	e8 58 ff ff ff       	call   117ea <do_default_handler>
   11892:	83 c4 10             	add    $0x10,%esp
}   
   11895:	90                   	nop
   11896:	c9                   	leave  
   11897:	c3                   	ret    

00011898 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   11898:	55                   	push   %ebp
   11899:	89 e5                	mov    %esp,%ebp
   1189b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   1189e:	83 ec 08             	sub    $0x8,%esp
   118a1:	68 a9 35 01 00       	push   $0x135a9
   118a6:	ff 75 08             	pushl  0x8(%ebp)
   118a9:	e8 3c ff ff ff       	call   117ea <do_default_handler>
   118ae:	83 c4 10             	add    $0x10,%esp
}   
   118b1:	90                   	nop
   118b2:	c9                   	leave  
   118b3:	c3                   	ret    

000118b4 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   118b4:	55                   	push   %ebp
   118b5:	89 e5                	mov    %esp,%ebp
   118b7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   118ba:	83 ec 08             	sub    $0x8,%esp
   118bd:	68 bf 35 01 00       	push   $0x135bf
   118c2:	ff 75 08             	pushl  0x8(%ebp)
   118c5:	e8 20 ff ff ff       	call   117ea <do_default_handler>
   118ca:	83 c4 10             	add    $0x10,%esp
}   
   118cd:	90                   	nop
   118ce:	c9                   	leave  
   118cf:	c3                   	ret    

000118d0 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   118d0:	55                   	push   %ebp
   118d1:	89 e5                	mov    %esp,%ebp
   118d3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   118d6:	83 ec 08             	sub    $0x8,%esp
   118d9:	68 d3 35 01 00       	push   $0x135d3
   118de:	ff 75 08             	pushl  0x8(%ebp)
   118e1:	e8 04 ff ff ff       	call   117ea <do_default_handler>
   118e6:	83 c4 10             	add    $0x10,%esp
}   
   118e9:	90                   	nop
   118ea:	c9                   	leave  
   118eb:	c3                   	ret    

000118ec <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   118ec:	55                   	push   %ebp
   118ed:	89 e5                	mov    %esp,%ebp
   118ef:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   118f2:	83 ec 08             	sub    $0x8,%esp
   118f5:	68 f1 35 01 00       	push   $0x135f1
   118fa:	ff 75 08             	pushl  0x8(%ebp)
   118fd:	e8 e8 fe ff ff       	call   117ea <do_default_handler>
   11902:	83 c4 10             	add    $0x10,%esp
}   
   11905:	90                   	nop
   11906:	c9                   	leave  
   11907:	c3                   	ret    

00011908 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11908:	55                   	push   %ebp
   11909:	89 e5                	mov    %esp,%ebp
   1190b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   1190e:	83 ec 08             	sub    $0x8,%esp
   11911:	68 0b 36 01 00       	push   $0x1360b
   11916:	ff 75 08             	pushl  0x8(%ebp)
   11919:	e8 cc fe ff ff       	call   117ea <do_default_handler>
   1191e:	83 c4 10             	add    $0x10,%esp
}   
   11921:	90                   	nop
   11922:	c9                   	leave  
   11923:	c3                   	ret    

00011924 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   11924:	55                   	push   %ebp
   11925:	89 e5                	mov    %esp,%ebp
   11927:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   1192a:	83 ec 08             	sub    $0x8,%esp
   1192d:	68 27 36 01 00       	push   $0x13627
   11932:	ff 75 08             	pushl  0x8(%ebp)
   11935:	e8 b0 fe ff ff       	call   117ea <do_default_handler>
   1193a:	83 c4 10             	add    $0x10,%esp
}   
   1193d:	90                   	nop
   1193e:	c9                   	leave  
   1193f:	c3                   	ret    

00011940 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11940:	55                   	push   %ebp
   11941:	89 e5                	mov    %esp,%ebp
   11943:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   11946:	83 ec 08             	sub    $0x8,%esp
   11949:	68 3f 36 01 00       	push   $0x1363f
   1194e:	ff 75 08             	pushl  0x8(%ebp)
   11951:	e8 94 fe ff ff       	call   117ea <do_default_handler>
   11956:	83 c4 10             	add    $0x10,%esp
}   
   11959:	90                   	nop
   1195a:	c9                   	leave  
   1195b:	c3                   	ret    

0001195c <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   1195c:	55                   	push   %ebp
   1195d:	89 e5                	mov    %esp,%ebp
   1195f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11962:	83 ec 08             	sub    $0x8,%esp
   11965:	68 58 36 01 00       	push   $0x13658
   1196a:	ff 75 08             	pushl  0x8(%ebp)
   1196d:	e8 78 fe ff ff       	call   117ea <do_default_handler>
   11972:	83 c4 10             	add    $0x10,%esp
}   
   11975:	90                   	nop
   11976:	c9                   	leave  
   11977:	c3                   	ret    

00011978 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   11978:	55                   	push   %ebp
   11979:	89 e5                	mov    %esp,%ebp
   1197b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   1197e:	83 ec 08             	sub    $0x8,%esp
   11981:	68 78 36 01 00       	push   $0x13678
   11986:	ff 75 08             	pushl  0x8(%ebp)
   11989:	e8 5c fe ff ff       	call   117ea <do_default_handler>
   1198e:	83 c4 10             	add    $0x10,%esp
}   
   11991:	90                   	nop
   11992:	c9                   	leave  
   11993:	c3                   	ret    

00011994 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   11994:	55                   	push   %ebp
   11995:	89 e5                	mov    %esp,%ebp
   11997:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1199a:	83 ec 0c             	sub    $0xc,%esp
   1199d:	68 98 36 01 00       	push   $0x13698
   119a2:	e8 75 17 00 00       	call   1311c <log_printf>
   119a7:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   119aa:	83 ec 0c             	sub    $0xc,%esp
   119ad:	68 bc 36 01 00       	push   $0x136bc
   119b2:	e8 65 17 00 00       	call   1311c <log_printf>
   119b7:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   119ba:	8b 45 08             	mov    0x8(%ebp),%eax
   119bd:	8b 40 34             	mov    0x34(%eax),%eax
   119c0:	83 e0 01             	and    $0x1,%eax
   119c3:	85 c0                	test   %eax,%eax
   119c5:	74 12                	je     119d9 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   119c7:	83 ec 0c             	sub    $0xc,%esp
   119ca:	68 e8 36 01 00       	push   $0x136e8
   119cf:	e8 48 17 00 00       	call   1311c <log_printf>
   119d4:	83 c4 10             	add    $0x10,%esp
   119d7:	eb 10                	jmp    119e9 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   119d9:	83 ec 0c             	sub    $0xc,%esp
   119dc:	68 64 37 01 00       	push   $0x13764
   119e1:	e8 36 17 00 00       	call   1311c <log_printf>
   119e6:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   119e9:	8b 45 08             	mov    0x8(%ebp),%eax
   119ec:	8b 40 34             	mov    0x34(%eax),%eax
   119ef:	83 e0 02             	and    $0x2,%eax
   119f2:	85 c0                	test   %eax,%eax
   119f4:	74 12                	je     11a08 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   119f6:	83 ec 0c             	sub    $0xc,%esp
   119f9:	68 bc 37 01 00       	push   $0x137bc
   119fe:	e8 19 17 00 00       	call   1311c <log_printf>
   11a03:	83 c4 10             	add    $0x10,%esp
   11a06:	eb 10                	jmp    11a18 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   11a08:	83 ec 0c             	sub    $0xc,%esp
   11a0b:	68 08 38 01 00       	push   $0x13808
   11a10:	e8 07 17 00 00       	call   1311c <log_printf>
   11a15:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   11a18:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1b:	8b 40 34             	mov    0x34(%eax),%eax
   11a1e:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11a23:	83 ec 08             	sub    $0x8,%esp
   11a26:	50                   	push   %eax
   11a27:	68 34 38 01 00       	push   $0x13834
   11a2c:	e8 eb 16 00 00       	call   1311c <log_printf>
   11a31:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11a34:	83 ec 0c             	sub    $0xc,%esp
   11a37:	ff 75 08             	pushl  0x8(%ebp)
   11a3a:	e8 bb fc ff ff       	call   116fa <dump_core_regs>
   11a3f:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11a42:	e8 91 fc ff ff       	call   116d8 <hlt>
   11a47:	eb f9                	jmp    11a42 <do_handler_general_protection+0xae>

00011a49 <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   11a49:	55                   	push   %ebp
   11a4a:	89 e5                	mov    %esp,%ebp
   11a4c:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11a4f:	83 ec 0c             	sub    $0xc,%esp
   11a52:	68 98 36 01 00       	push   $0x13698
   11a57:	e8 c0 16 00 00       	call   1311c <log_printf>
   11a5c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   11a5f:	83 ec 0c             	sub    $0xc,%esp
   11a62:	68 46 38 01 00       	push   $0x13846
   11a67:	e8 b0 16 00 00       	call   1311c <log_printf>
   11a6c:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   11a6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a72:	8b 40 34             	mov    0x34(%eax),%eax
   11a75:	83 e0 01             	and    $0x1,%eax
   11a78:	85 c0                	test   %eax,%eax
   11a7a:	74 18                	je     11a94 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   11a7c:	e8 46 fc ff ff       	call   116c7 <read_cr2>
   11a81:	83 ec 08             	sub    $0x8,%esp
   11a84:	50                   	push   %eax
   11a85:	68 64 38 01 00       	push   $0x13864
   11a8a:	e8 8d 16 00 00       	call   1311c <log_printf>
   11a8f:	83 c4 10             	add    $0x10,%esp
   11a92:	eb 16                	jmp    11aaa <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   11a94:	e8 2e fc ff ff       	call   116c7 <read_cr2>
   11a99:	83 ec 08             	sub    $0x8,%esp
   11a9c:	50                   	push   %eax
   11a9d:	68 8c 38 01 00       	push   $0x1388c
   11aa2:	e8 75 16 00 00       	call   1311c <log_printf>
   11aa7:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   11aad:	8b 40 34             	mov    0x34(%eax),%eax
   11ab0:	83 e0 02             	and    $0x2,%eax
   11ab3:	85 c0                	test   %eax,%eax
   11ab5:	74 12                	je     11ac9 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   11ab7:	83 ec 0c             	sub    $0xc,%esp
   11aba:	68 bc 38 01 00       	push   $0x138bc
   11abf:	e8 58 16 00 00       	call   1311c <log_printf>
   11ac4:	83 c4 10             	add    $0x10,%esp
   11ac7:	eb 10                	jmp    11ad9 <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   11ac9:	83 ec 0c             	sub    $0xc,%esp
   11acc:	68 e8 38 01 00       	push   $0x138e8
   11ad1:	e8 46 16 00 00       	call   1311c <log_printf>
   11ad6:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11ad9:	8b 45 08             	mov    0x8(%ebp),%eax
   11adc:	8b 40 34             	mov    0x34(%eax),%eax
   11adf:	83 e0 02             	and    $0x2,%eax
   11ae2:	85 c0                	test   %eax,%eax
   11ae4:	74 12                	je     11af8 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   11ae6:	83 ec 0c             	sub    $0xc,%esp
   11ae9:	68 14 39 01 00       	push   $0x13914
   11aee:	e8 29 16 00 00       	call   1311c <log_printf>
   11af3:	83 c4 10             	add    $0x10,%esp
   11af6:	eb 10                	jmp    11b08 <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   11af8:	83 ec 0c             	sub    $0xc,%esp
   11afb:	68 40 39 01 00       	push   $0x13940
   11b00:	e8 17 16 00 00       	call   1311c <log_printf>
   11b05:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11b08:	83 ec 0c             	sub    $0xc,%esp
   11b0b:	ff 75 08             	pushl  0x8(%ebp)
   11b0e:	e8 e7 fb ff ff       	call   116fa <dump_core_regs>
   11b13:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11b16:	e8 bd fb ff ff       	call   116d8 <hlt>
   11b1b:	eb f9                	jmp    11b16 <do_handler_page_fault+0xcd>

00011b1d <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11b1d:	55                   	push   %ebp
   11b1e:	89 e5                	mov    %esp,%ebp
   11b20:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11b23:	83 ec 08             	sub    $0x8,%esp
   11b26:	68 68 39 01 00       	push   $0x13968
   11b2b:	ff 75 08             	pushl  0x8(%ebp)
   11b2e:	e8 b7 fc ff ff       	call   117ea <do_default_handler>
   11b33:	83 c4 10             	add    $0x10,%esp
}   
   11b36:	90                   	nop
   11b37:	c9                   	leave  
   11b38:	c3                   	ret    

00011b39 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11b39:	55                   	push   %ebp
   11b3a:	89 e5                	mov    %esp,%ebp
   11b3c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11b3f:	83 ec 08             	sub    $0x8,%esp
   11b42:	68 88 39 01 00       	push   $0x13988
   11b47:	ff 75 08             	pushl  0x8(%ebp)
   11b4a:	e8 9b fc ff ff       	call   117ea <do_default_handler>
   11b4f:	83 c4 10             	add    $0x10,%esp
}   
   11b52:	90                   	nop
   11b53:	c9                   	leave  
   11b54:	c3                   	ret    

00011b55 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11b55:	55                   	push   %ebp
   11b56:	89 e5                	mov    %esp,%ebp
   11b58:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11b5b:	83 ec 08             	sub    $0x8,%esp
   11b5e:	68 a2 39 01 00       	push   $0x139a2
   11b63:	ff 75 08             	pushl  0x8(%ebp)
   11b66:	e8 7f fc ff ff       	call   117ea <do_default_handler>
   11b6b:	83 c4 10             	add    $0x10,%esp
}   
   11b6e:	90                   	nop
   11b6f:	c9                   	leave  
   11b70:	c3                   	ret    

00011b71 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11b71:	55                   	push   %ebp
   11b72:	89 e5                	mov    %esp,%ebp
   11b74:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11b77:	83 ec 08             	sub    $0x8,%esp
   11b7a:	68 bc 39 01 00       	push   $0x139bc
   11b7f:	ff 75 08             	pushl  0x8(%ebp)
   11b82:	e8 63 fc ff ff       	call   117ea <do_default_handler>
   11b87:	83 c4 10             	add    $0x10,%esp
}
   11b8a:	90                   	nop
   11b8b:	c9                   	leave  
   11b8c:	c3                   	ret    

00011b8d <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11b8d:	55                   	push   %ebp
   11b8e:	89 e5                	mov    %esp,%ebp
   11b90:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11b93:	83 ec 08             	sub    $0x8,%esp
   11b96:	68 e8 39 01 00       	push   $0x139e8
   11b9b:	ff 75 08             	pushl  0x8(%ebp)
   11b9e:	e8 47 fc ff ff       	call   117ea <do_default_handler>
   11ba3:	83 c4 10             	add    $0x10,%esp
}
   11ba6:	90                   	nop
   11ba7:	c9                   	leave  
   11ba8:	c3                   	ret    

00011ba9 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11ba9:	55                   	push   %ebp
   11baa:	89 e5                	mov    %esp,%ebp
   11bac:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11baf:	83 ec 08             	sub    $0x8,%esp
   11bb2:	68 0c 3a 01 00       	push   $0x13a0c
   11bb7:	ff 75 08             	pushl  0x8(%ebp)
   11bba:	e8 2b fc ff ff       	call   117ea <do_default_handler>
   11bbf:	83 c4 10             	add    $0x10,%esp
}
   11bc2:	90                   	nop
   11bc3:	c9                   	leave  
   11bc4:	c3                   	ret    

00011bc5 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11bc5:	55                   	push   %ebp
   11bc6:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11bc8:	6a 11                	push   $0x11
   11bca:	6a 20                	push   $0x20
   11bcc:	e8 a1 fa ff ff       	call   11672 <outb>
   11bd1:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11bd4:	6a 20                	push   $0x20
   11bd6:	6a 21                	push   $0x21
   11bd8:	e8 95 fa ff ff       	call   11672 <outb>
   11bdd:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11be0:	6a 04                	push   $0x4
   11be2:	6a 21                	push   $0x21
   11be4:	e8 89 fa ff ff       	call   11672 <outb>
   11be9:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11bec:	6a 01                	push   $0x1
   11bee:	6a 21                	push   $0x21
   11bf0:	e8 7d fa ff ff       	call   11672 <outb>
   11bf5:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11bf8:	6a 11                	push   $0x11
   11bfa:	68 a0 00 00 00       	push   $0xa0
   11bff:	e8 6e fa ff ff       	call   11672 <outb>
   11c04:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11c07:	6a 28                	push   $0x28
   11c09:	68 a1 00 00 00       	push   $0xa1
   11c0e:	e8 5f fa ff ff       	call   11672 <outb>
   11c13:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11c16:	6a 02                	push   $0x2
   11c18:	68 a1 00 00 00       	push   $0xa1
   11c1d:	e8 50 fa ff ff       	call   11672 <outb>
   11c22:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11c25:	6a 01                	push   $0x1
   11c27:	68 a1 00 00 00       	push   $0xa1
   11c2c:	e8 41 fa ff ff       	call   11672 <outb>
   11c31:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11c34:	68 fb 00 00 00       	push   $0xfb
   11c39:	6a 21                	push   $0x21
   11c3b:	e8 32 fa ff ff       	call   11672 <outb>
   11c40:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11c43:	68 ff 00 00 00       	push   $0xff
   11c48:	68 a1 00 00 00       	push   $0xa1
   11c4d:	e8 20 fa ff ff       	call   11672 <outb>
   11c52:	83 c4 08             	add    $0x8,%esp
}
   11c55:	90                   	nop
   11c56:	c9                   	leave  
   11c57:	c3                   	ret    

00011c58 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11c58:	55                   	push   %ebp
   11c59:	89 e5                	mov    %esp,%ebp
   11c5b:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11c5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c65:	eb 25                	jmp    11c8c <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11c67:	ba 26 00 01 00       	mov    $0x10026,%edx
   11c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c6f:	c1 e0 03             	shl    $0x3,%eax
   11c72:	05 00 8a 01 00       	add    $0x18a00,%eax
   11c77:	68 00 8e 00 00       	push   $0x8e00
   11c7c:	52                   	push   %edx
   11c7d:	6a 08                	push   $0x8
   11c7f:	50                   	push   %eax
   11c80:	e8 1c f8 ff ff       	call   114a1 <gate_desc_set>
   11c85:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11c88:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c8c:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11c90:	7e d5                	jle    11c67 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11c92:	83 ec 08             	sub    $0x8,%esp
   11c95:	68 45 00 01 00       	push   $0x10045
   11c9a:	6a 00                	push   $0x0
   11c9c:	e8 77 01 00 00       	call   11e18 <irq_install>
   11ca1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11ca4:	83 ec 08             	sub    $0x8,%esp
   11ca7:	68 64 00 01 00       	push   $0x10064
   11cac:	6a 01                	push   $0x1
   11cae:	e8 65 01 00 00       	call   11e18 <irq_install>
   11cb3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11cb6:	83 ec 08             	sub    $0x8,%esp
   11cb9:	68 83 00 01 00       	push   $0x10083
   11cbe:	6a 02                	push   $0x2
   11cc0:	e8 53 01 00 00       	call   11e18 <irq_install>
   11cc5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11cc8:	83 ec 08             	sub    $0x8,%esp
   11ccb:	68 a2 00 01 00       	push   $0x100a2
   11cd0:	6a 03                	push   $0x3
   11cd2:	e8 41 01 00 00       	call   11e18 <irq_install>
   11cd7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   11cda:	83 ec 08             	sub    $0x8,%esp
   11cdd:	68 c1 00 01 00       	push   $0x100c1
   11ce2:	6a 04                	push   $0x4
   11ce4:	e8 2f 01 00 00       	call   11e18 <irq_install>
   11ce9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11cec:	83 ec 08             	sub    $0x8,%esp
   11cef:	68 e0 00 01 00       	push   $0x100e0
   11cf4:	6a 05                	push   $0x5
   11cf6:	e8 1d 01 00 00       	call   11e18 <irq_install>
   11cfb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11cfe:	83 ec 08             	sub    $0x8,%esp
   11d01:	68 ff 00 01 00       	push   $0x100ff
   11d06:	6a 06                	push   $0x6
   11d08:	e8 0b 01 00 00       	call   11e18 <irq_install>
   11d0d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11d10:	83 ec 08             	sub    $0x8,%esp
   11d13:	68 1e 01 01 00       	push   $0x1011e
   11d18:	6a 07                	push   $0x7
   11d1a:	e8 f9 00 00 00       	call   11e18 <irq_install>
   11d1f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11d22:	83 ec 08             	sub    $0x8,%esp
   11d25:	68 3d 01 01 00       	push   $0x1013d
   11d2a:	6a 08                	push   $0x8
   11d2c:	e8 e7 00 00 00       	call   11e18 <irq_install>
   11d31:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11d34:	83 ec 08             	sub    $0x8,%esp
   11d37:	68 5a 01 01 00       	push   $0x1015a
   11d3c:	6a 0a                	push   $0xa
   11d3e:	e8 d5 00 00 00       	call   11e18 <irq_install>
   11d43:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11d46:	83 ec 08             	sub    $0x8,%esp
   11d49:	68 77 01 01 00       	push   $0x10177
   11d4e:	6a 0b                	push   $0xb
   11d50:	e8 c3 00 00 00       	call   11e18 <irq_install>
   11d55:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11d58:	83 ec 08             	sub    $0x8,%esp
   11d5b:	68 94 01 01 00       	push   $0x10194
   11d60:	6a 0c                	push   $0xc
   11d62:	e8 b1 00 00 00       	call   11e18 <irq_install>
   11d67:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11d6a:	83 ec 08             	sub    $0x8,%esp
   11d6d:	68 b3 01 01 00       	push   $0x101b3
   11d72:	6a 0d                	push   $0xd
   11d74:	e8 9f 00 00 00       	call   11e18 <irq_install>
   11d79:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11d7c:	83 ec 08             	sub    $0x8,%esp
   11d7f:	68 d0 01 01 00       	push   $0x101d0
   11d84:	6a 0e                	push   $0xe
   11d86:	e8 8d 00 00 00       	call   11e18 <irq_install>
   11d8b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11d8e:	83 ec 08             	sub    $0x8,%esp
   11d91:	68 ed 01 01 00       	push   $0x101ed
   11d96:	6a 10                	push   $0x10
   11d98:	e8 7b 00 00 00       	call   11e18 <irq_install>
   11d9d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11da0:	83 ec 08             	sub    $0x8,%esp
   11da3:	68 0c 02 01 00       	push   $0x1020c
   11da8:	6a 11                	push   $0x11
   11daa:	e8 69 00 00 00       	call   11e18 <irq_install>
   11daf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11db2:	83 ec 08             	sub    $0x8,%esp
   11db5:	68 29 02 01 00       	push   $0x10229
   11dba:	6a 12                	push   $0x12
   11dbc:	e8 57 00 00 00       	call   11e18 <irq_install>
   11dc1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11dc4:	83 ec 08             	sub    $0x8,%esp
   11dc7:	68 48 02 01 00       	push   $0x10248
   11dcc:	6a 13                	push   $0x13
   11dce:	e8 45 00 00 00       	call   11e18 <irq_install>
   11dd3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11dd6:	83 ec 08             	sub    $0x8,%esp
   11dd9:	68 67 02 01 00       	push   $0x10267
   11dde:	6a 14                	push   $0x14
   11de0:	e8 33 00 00 00       	call   11e18 <irq_install>
   11de5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11de8:	83 ec 08             	sub    $0x8,%esp
   11deb:	68 86 02 01 00       	push   $0x10286
   11df0:	6a 15                	push   $0x15
   11df2:	e8 21 00 00 00       	call   11e18 <irq_install>
   11df7:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11dfa:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11dff:	83 ec 08             	sub    $0x8,%esp
   11e02:	68 00 04 00 00       	push   $0x400
   11e07:	50                   	push   %eax
   11e08:	e8 92 f8 ff ff       	call   1169f <lidt>
   11e0d:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11e10:	e8 b0 fd ff ff       	call   11bc5 <init_pic>
}
   11e15:	90                   	nop
   11e16:	c9                   	leave  
   11e17:	c3                   	ret    

00011e18 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11e18:	55                   	push   %ebp
   11e19:	89 e5                	mov    %esp,%ebp
   11e1b:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11e1e:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11e22:	7e 07                	jle    11e2b <irq_install+0x13>
        return -1;
   11e24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e29:	eb 20                	jmp    11e4b <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11e2b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e2e:	8b 55 08             	mov    0x8(%ebp),%edx
   11e31:	c1 e2 03             	shl    $0x3,%edx
   11e34:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11e3a:	68 00 8e 00 00       	push   $0x8e00
   11e3f:	50                   	push   %eax
   11e40:	6a 08                	push   $0x8
   11e42:	52                   	push   %edx
   11e43:	e8 59 f6 ff ff       	call   114a1 <gate_desc_set>
   11e48:	83 c4 10             	add    $0x10,%esp
}
   11e4b:	c9                   	leave  
   11e4c:	c3                   	ret    

00011e4d <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11e4d:	55                   	push   %ebp
   11e4e:	89 e5                	mov    %esp,%ebp
   11e50:	53                   	push   %ebx
   11e51:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11e54:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e58:	7e 78                	jle    11ed2 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11e5a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11e5e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e62:	7f 32                	jg     11e96 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11e64:	6a 21                	push   $0x21
   11e66:	e8 ea f7 ff ff       	call   11655 <inb>
   11e6b:	83 c4 04             	add    $0x4,%esp
   11e6e:	89 c2                	mov    %eax,%edx
   11e70:	8b 45 08             	mov    0x8(%ebp),%eax
   11e73:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e78:	89 c1                	mov    %eax,%ecx
   11e7a:	d3 e3                	shl    %cl,%ebx
   11e7c:	89 d8                	mov    %ebx,%eax
   11e7e:	f7 d0                	not    %eax
   11e80:	21 d0                	and    %edx,%eax
   11e82:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11e85:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e89:	50                   	push   %eax
   11e8a:	6a 21                	push   $0x21
   11e8c:	e8 e1 f7 ff ff       	call   11672 <outb>
   11e91:	83 c4 08             	add    $0x8,%esp
   11e94:	eb 3d                	jmp    11ed3 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11e96:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11e9a:	68 a1 00 00 00       	push   $0xa1
   11e9f:	e8 b1 f7 ff ff       	call   11655 <inb>
   11ea4:	83 c4 04             	add    $0x4,%esp
   11ea7:	89 c2                	mov    %eax,%edx
   11ea9:	8b 45 08             	mov    0x8(%ebp),%eax
   11eac:	bb 01 00 00 00       	mov    $0x1,%ebx
   11eb1:	89 c1                	mov    %eax,%ecx
   11eb3:	d3 e3                	shl    %cl,%ebx
   11eb5:	89 d8                	mov    %ebx,%eax
   11eb7:	f7 d0                	not    %eax
   11eb9:	21 d0                	and    %edx,%eax
   11ebb:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11ebe:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11ec2:	50                   	push   %eax
   11ec3:	68 a1 00 00 00       	push   $0xa1
   11ec8:	e8 a5 f7 ff ff       	call   11672 <outb>
   11ecd:	83 c4 08             	add    $0x8,%esp
   11ed0:	eb 01                	jmp    11ed3 <irq_enable+0x86>
        return;
   11ed2:	90                   	nop
    }
}
   11ed3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11ed6:	c9                   	leave  
   11ed7:	c3                   	ret    

00011ed8 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11ed8:	55                   	push   %ebp
   11ed9:	89 e5                	mov    %esp,%ebp
   11edb:	53                   	push   %ebx
   11edc:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11edf:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11ee3:	7e 74                	jle    11f59 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11ee5:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11ee9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11eed:	7f 30                	jg     11f1f <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11eef:	6a 21                	push   $0x21
   11ef1:	e8 5f f7 ff ff       	call   11655 <inb>
   11ef6:	83 c4 04             	add    $0x4,%esp
   11ef9:	89 c3                	mov    %eax,%ebx
   11efb:	8b 45 08             	mov    0x8(%ebp),%eax
   11efe:	ba 01 00 00 00       	mov    $0x1,%edx
   11f03:	89 c1                	mov    %eax,%ecx
   11f05:	d3 e2                	shl    %cl,%edx
   11f07:	89 d0                	mov    %edx,%eax
   11f09:	09 d8                	or     %ebx,%eax
   11f0b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11f0e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11f12:	50                   	push   %eax
   11f13:	6a 21                	push   $0x21
   11f15:	e8 58 f7 ff ff       	call   11672 <outb>
   11f1a:	83 c4 08             	add    $0x8,%esp
   11f1d:	eb 3b                	jmp    11f5a <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11f1f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11f23:	68 a1 00 00 00       	push   $0xa1
   11f28:	e8 28 f7 ff ff       	call   11655 <inb>
   11f2d:	83 c4 04             	add    $0x4,%esp
   11f30:	89 c3                	mov    %eax,%ebx
   11f32:	8b 45 08             	mov    0x8(%ebp),%eax
   11f35:	ba 01 00 00 00       	mov    $0x1,%edx
   11f3a:	89 c1                	mov    %eax,%ecx
   11f3c:	d3 e2                	shl    %cl,%edx
   11f3e:	89 d0                	mov    %edx,%eax
   11f40:	09 d8                	or     %ebx,%eax
   11f42:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11f45:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11f49:	50                   	push   %eax
   11f4a:	68 a1 00 00 00       	push   $0xa1
   11f4f:	e8 1e f7 ff ff       	call   11672 <outb>
   11f54:	83 c4 08             	add    $0x8,%esp
   11f57:	eb 01                	jmp    11f5a <irq_disable+0x82>
        return;
   11f59:	90                   	nop
    }
}
   11f5a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f5d:	c9                   	leave  
   11f5e:	c3                   	ret    

00011f5f <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11f5f:	55                   	push   %ebp
   11f60:	89 e5                	mov    %esp,%ebp
    cli();
   11f62:	e8 2a f7 ff ff       	call   11691 <cli>
}
   11f67:	90                   	nop
   11f68:	5d                   	pop    %ebp
   11f69:	c3                   	ret    

00011f6a <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11f6a:	55                   	push   %ebp
   11f6b:	89 e5                	mov    %esp,%ebp
    sti();
   11f6d:	e8 26 f7 ff ff       	call   11698 <sti>
}
   11f72:	90                   	nop
   11f73:	5d                   	pop    %ebp
   11f74:	c3                   	ret    

00011f75 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11f75:	55                   	push   %ebp
   11f76:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11f78:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11f7c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11f80:	7e 0f                	jle    11f91 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11f82:	6a 20                	push   $0x20
   11f84:	68 a0 00 00 00       	push   $0xa0
   11f89:	e8 e4 f6 ff ff       	call   11672 <outb>
   11f8e:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11f91:	6a 20                	push   $0x20
   11f93:	6a 20                	push   $0x20
   11f95:	e8 d8 f6 ff ff       	call   11672 <outb>
   11f9a:	83 c4 08             	add    $0x8,%esp
}
   11f9d:	90                   	nop
   11f9e:	c9                   	leave  
   11f9f:	c3                   	ret    

00011fa0 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11fa0:	55                   	push   %ebp
   11fa1:	89 e5                	mov    %esp,%ebp
   11fa3:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11fa6:	e8 34 f7 ff ff       	call   116df <read_eflags>
   11fab:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11fae:	e8 ac ff ff ff       	call   11f5f <irq_disable_global>
    return state;
   11fb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11fb6:	c9                   	leave  
   11fb7:	c3                   	ret    

00011fb8 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11fb8:	55                   	push   %ebp
   11fb9:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11fbb:	ff 75 08             	pushl  0x8(%ebp)
   11fbe:	e8 2c f7 ff ff       	call   116ef <write_eflags>
   11fc3:	83 c4 04             	add    $0x4,%esp
   11fc6:	90                   	nop
   11fc7:	c9                   	leave  
   11fc8:	c3                   	ret    

00011fc9 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11fc9:	55                   	push   %ebp
   11fca:	89 e5                	mov    %esp,%ebp
   11fcc:	83 ec 08             	sub    $0x8,%esp
   11fcf:	8b 55 08             	mov    0x8(%ebp),%edx
   11fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fd5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11fd9:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11fdc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11fe0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11fe4:	ee                   	out    %al,(%dx)
}
   11fe5:	90                   	nop
   11fe6:	c9                   	leave  
   11fe7:	c3                   	ret    

00011fe8 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11fe8:	55                   	push   %ebp
   11fe9:	89 e5                	mov    %esp,%ebp
   11feb:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11fee:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11ff3:	83 c0 01             	add    $0x1,%eax
   11ff6:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11ffb:	83 ec 0c             	sub    $0xc,%esp
   11ffe:	6a 20                	push   $0x20
   12000:	e8 70 ff ff ff       	call   11f75 <pic_send_eoi>
   12005:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   12008:	e8 38 f2 ff ff       	call   11245 <task_time_tick>
}
   1200d:	90                   	nop
   1200e:	c9                   	leave  
   1200f:	c3                   	ret    

00012010 <init_pit>:


static void init_pit(void) {
   12010:	55                   	push   %ebp
   12011:	89 e5                	mov    %esp,%ebp
   12013:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   12016:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   1201d:	6a 36                	push   $0x36
   1201f:	6a 43                	push   $0x43
   12021:	e8 a3 ff ff ff       	call   11fc9 <outb>
   12026:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   12029:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1202c:	0f b6 c0             	movzbl %al,%eax
   1202f:	50                   	push   %eax
   12030:	6a 40                	push   $0x40
   12032:	e8 92 ff ff ff       	call   11fc9 <outb>
   12037:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   1203a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1203d:	c1 e8 08             	shr    $0x8,%eax
   12040:	0f b6 c0             	movzbl %al,%eax
   12043:	50                   	push   %eax
   12044:	6a 40                	push   $0x40
   12046:	e8 7e ff ff ff       	call   11fc9 <outb>
   1204b:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1204e:	83 ec 08             	sub    $0x8,%esp
   12051:	68 a3 02 01 00       	push   $0x102a3
   12056:	6a 20                	push   $0x20
   12058:	e8 bb fd ff ff       	call   11e18 <irq_install>
   1205d:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   12060:	83 ec 0c             	sub    $0xc,%esp
   12063:	6a 20                	push   $0x20
   12065:	e8 e3 fd ff ff       	call   11e4d <irq_enable>
   1206a:	83 c4 10             	add    $0x10,%esp
}
   1206d:	90                   	nop
   1206e:	c9                   	leave  
   1206f:	c3                   	ret    

00012070 <timer_init>:

void timer_init(void) {
   12070:	55                   	push   %ebp
   12071:	89 e5                	mov    %esp,%ebp
   12073:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12076:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   1207d:	00 00 00 
    init_pit();
   12080:	e8 8b ff ff ff       	call   12010 <init_pit>
   12085:	90                   	nop
   12086:	c9                   	leave  
   12087:	c3                   	ret    

00012088 <list_size>:
static inline int list_size(list_t* list) {
   12088:	55                   	push   %ebp
   12089:	89 e5                	mov    %esp,%ebp
    return list->count;
   1208b:	8b 45 08             	mov    0x8(%ebp),%eax
   1208e:	8b 40 08             	mov    0x8(%eax),%eax
}
   12091:	5d                   	pop    %ebp
   12092:	c3                   	ret    

00012093 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   12093:	55                   	push   %ebp
   12094:	89 e5                	mov    %esp,%ebp
    return list->first;
   12096:	8b 45 08             	mov    0x8(%ebp),%eax
   12099:	8b 00                	mov    (%eax),%eax
}
   1209b:	5d                   	pop    %ebp
   1209c:	c3                   	ret    

0001209d <list_last>:

static inline list_node_t* list_last(list_t* list) {
   1209d:	55                   	push   %ebp
   1209e:	89 e5                	mov    %esp,%ebp
    return list->last;
   120a0:	8b 45 08             	mov    0x8(%ebp),%eax
   120a3:	8b 40 04             	mov    0x4(%eax),%eax
}
   120a6:	5d                   	pop    %ebp
   120a7:	c3                   	ret    

000120a8 <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   120a8:	55                   	push   %ebp
   120a9:	89 e5                	mov    %esp,%ebp
   120ab:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   120ae:	8b 45 08             	mov    0x8(%ebp),%eax
   120b1:	8b 40 50             	mov    0x50(%eax),%eax
   120b4:	85 c0                	test   %eax,%eax
   120b6:	75 19                	jne    120d1 <kernel_init+0x29>
   120b8:	68 34 3a 01 00       	push   $0x13a34
   120bd:	68 44 3b 01 00       	push   $0x13b44
   120c2:	6a 12                	push   $0x12
   120c4:	68 58 3a 01 00       	push   $0x13a58
   120c9:	e8 44 0d 00 00       	call   12e12 <pannic>
   120ce:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   120d1:	90                   	nop


    log_init();
   120d2:	e8 a3 0f 00 00       	call   1307a <log_init>

    memory_init(boot_info);
   120d7:	83 ec 0c             	sub    $0xc,%esp
   120da:	ff 75 08             	pushl  0x8(%ebp)
   120dd:	e8 c7 e7 ff ff       	call   108a9 <memory_init>
   120e2:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   120e5:	e8 86 f4 ff ff       	call   11570 <cpu_init>


    irq_init();
   120ea:	e8 69 fb ff ff       	call   11c58 <irq_init>
    timer_init();
   120ef:	e8 7c ff ff ff       	call   12070 <timer_init>

    task_manager_init();
   120f4:	e8 52 ee ff ff       	call   10f4b <task_manager_init>
}
   120f9:	90                   	nop
   120fa:	c9                   	leave  
   120fb:	c3                   	ret    

000120fc <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   120fc:	55                   	push   %ebp
   120fd:	89 e5                	mov    %esp,%ebp
   120ff:	56                   	push   %esi
   12100:	53                   	push   %ebx
   12101:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   12104:	83 ec 0c             	sub    $0xc,%esp
   12107:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1210a:	50                   	push   %eax
   1210b:	e8 4b 0d 00 00       	call   12e5b <list_init>
   12110:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   12113:	83 ec 0c             	sub    $0xc,%esp
   12116:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12119:	50                   	push   %eax
   1211a:	e8 69 ff ff ff       	call   12088 <list_size>
   1211f:	83 c4 10             	add    $0x10,%esp
   12122:	89 c6                	mov    %eax,%esi
   12124:	83 ec 0c             	sub    $0xc,%esp
   12127:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1212a:	50                   	push   %eax
   1212b:	e8 6d ff ff ff       	call   1209d <list_last>
   12130:	83 c4 10             	add    $0x10,%esp
   12133:	89 c3                	mov    %eax,%ebx
   12135:	83 ec 0c             	sub    $0xc,%esp
   12138:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1213b:	50                   	push   %eax
   1213c:	e8 52 ff ff ff       	call   12093 <list_first>
   12141:	83 c4 10             	add    $0x10,%esp
   12144:	56                   	push   %esi
   12145:	53                   	push   %ebx
   12146:	50                   	push   %eax
   12147:	68 a0 3a 01 00       	push   $0x13aa0
   1214c:	e8 cb 0f 00 00       	call   1311c <log_printf>
   12151:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   12154:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1215b:	eb 3b                	jmp    12198 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   1215d:	8d 45 a8             	lea    -0x58(%ebp),%eax
   12160:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12163:	c1 e2 03             	shl    $0x3,%edx
   12166:	01 d0                	add    %edx,%eax
   12168:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   1216b:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1216e:	83 ec 04             	sub    $0x4,%esp
   12171:	50                   	push   %eax
   12172:	ff 75 f4             	pushl  -0xc(%ebp)
   12175:	68 c9 3a 01 00       	push   $0x13ac9
   1217a:	e8 9d 0f 00 00       	call   1311c <log_printf>
   1217f:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   12182:	83 ec 08             	sub    $0x8,%esp
   12185:	ff 75 dc             	pushl  -0x24(%ebp)
   12188:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1218b:	50                   	push   %eax
   1218c:	e8 ed 0c 00 00       	call   12e7e <list_insert_front>
   12191:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12194:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12198:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1219c:	7e bf                	jle    1215d <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   1219e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   121a5:	eb 33                	jmp    121da <link_test+0xde>
        list_remove_front(&list);
   121a7:	83 ec 0c             	sub    $0xc,%esp
   121aa:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121ad:	50                   	push   %eax
   121ae:	e8 8d 0d 00 00       	call   12f40 <list_remove_front>
   121b3:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   121b6:	83 ec 0c             	sub    $0xc,%esp
   121b9:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121bc:	50                   	push   %eax
   121bd:	e8 c6 fe ff ff       	call   12088 <list_size>
   121c2:	83 c4 10             	add    $0x10,%esp
   121c5:	83 ec 08             	sub    $0x8,%esp
   121c8:	50                   	push   %eax
   121c9:	68 d1 3a 01 00       	push   $0x13ad1
   121ce:	e8 49 0f 00 00       	call   1311c <log_printf>
   121d3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   121d6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121da:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   121de:	7e c7                	jle    121a7 <link_test+0xab>
    }

    list_init(&list);
   121e0:	83 ec 0c             	sub    $0xc,%esp
   121e3:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121e6:	50                   	push   %eax
   121e7:	e8 6f 0c 00 00       	call   12e5b <list_init>
   121ec:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   121ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   121f6:	eb 3b                	jmp    12233 <link_test+0x137>
        list_node_t* node = &nodes[i];
   121f8:	8d 45 a8             	lea    -0x58(%ebp),%eax
   121fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
   121fe:	c1 e2 03             	shl    $0x3,%edx
   12201:	01 d0                	add    %edx,%eax
   12203:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   12206:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12209:	83 ec 04             	sub    $0x4,%esp
   1220c:	50                   	push   %eax
   1220d:	ff 75 ec             	pushl  -0x14(%ebp)
   12210:	68 c9 3a 01 00       	push   $0x13ac9
   12215:	e8 02 0f 00 00       	call   1311c <log_printf>
   1221a:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   1221d:	83 ec 08             	sub    $0x8,%esp
   12220:	ff 75 e0             	pushl  -0x20(%ebp)
   12223:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12226:	50                   	push   %eax
   12227:	e8 b1 0c 00 00       	call   12edd <list_insert_back>
   1222c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   1222f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12233:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12237:	7e bf                	jle    121f8 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   12239:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   12240:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   12247:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   1224e:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   12255:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12258:	83 c0 04             	add    $0x4,%eax
   1225b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   1225e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12262:	74 08                	je     1226c <link_test+0x170>
   12264:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12267:	83 e8 04             	sub    $0x4,%eax
   1226a:	eb 05                	jmp    12271 <link_test+0x175>
   1226c:	b8 00 00 00 00       	mov    $0x0,%eax
   12271:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   12274:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12277:	8b 00                	mov    (%eax),%eax
   12279:	3d 56 34 12 00       	cmp    $0x123456,%eax
   1227e:	74 10                	je     12290 <link_test+0x194>
        log_printf("error!");
   12280:	83 ec 0c             	sub    $0xc,%esp
   12283:	68 d6 3a 01 00       	push   $0x13ad6
   12288:	e8 8f 0e 00 00       	call   1311c <log_printf>
   1228d:	83 c4 10             	add    $0x10,%esp
    }

}
   12290:	90                   	nop
   12291:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12294:	5b                   	pop    %ebx
   12295:	5e                   	pop    %esi
   12296:	5d                   	pop    %ebp
   12297:	c3                   	ret    

00012298 <move_to_first_task>:


void move_to_first_task(void) {
   12298:	55                   	push   %ebp
   12299:	89 e5                	mov    %esp,%ebp
   1229b:	56                   	push   %esi
   1229c:	53                   	push   %ebx
   1229d:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   122a0:	e8 da ee ff ff       	call   1117f <task_current>
   122a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   122a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   122ac:	75 19                	jne    122c7 <move_to_first_task+0x2f>
   122ae:	68 dd 3a 01 00       	push   $0x13add
   122b3:	68 50 3b 01 00       	push   $0x13b50
   122b8:	6a 68                	push   $0x68
   122ba:	68 58 3a 01 00       	push   $0x13a58
   122bf:	e8 4e 0b 00 00       	call   12e12 <pannic>
   122c4:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   122c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122ca:	83 c0 4c             	add    $0x4c,%eax
   122cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"        // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   122d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122d3:	8b 40 50             	mov    0x50(%eax),%eax
   122d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122d9:	8b 52 38             	mov    0x38(%edx),%edx
   122dc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   122df:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   122e2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   122e5:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   122e8:	8b 75 f0             	mov    -0x10(%ebp),%esi
   122eb:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   122ee:	50                   	push   %eax
   122ef:	52                   	push   %edx
   122f0:	51                   	push   %ecx
   122f1:	53                   	push   %ebx
   122f2:	56                   	push   %esi
   122f3:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   122f4:	90                   	nop
   122f5:	8d 65 f8             	lea    -0x8(%ebp),%esp
   122f8:	5b                   	pop    %ebx
   122f9:	5e                   	pop    %esi
   122fa:	5d                   	pop    %ebp
   122fb:	c3                   	ret    

000122fc <test_task1>:



static void test_task1(void) {
   122fc:	55                   	push   %ebp
   122fd:	89 e5                	mov    %esp,%ebp
   122ff:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12302:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task1: %d", count);
   12309:	83 ec 08             	sub    $0x8,%esp
   1230c:	ff 75 f4             	pushl  -0xc(%ebp)
   1230f:	68 e7 3a 01 00       	push   $0x13ae7
   12314:	e8 03 0e 00 00       	call   1311c <log_printf>
   12319:	83 c4 10             	add    $0x10,%esp
        count++;
   1231c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   12320:	83 ec 0c             	sub    $0xc,%esp
   12323:	68 e8 03 00 00       	push   $0x3e8
   12328:	e8 42 f0 ff ff       	call   1136f <sys_sleep>
   1232d:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task1: %d", count);
   12330:	eb d7                	jmp    12309 <test_task1+0xd>

00012332 <test_task2>:
    }
}


static void test_task2(void) {
   12332:	55                   	push   %ebp
   12333:	89 e5                	mov    %esp,%ebp
   12335:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12338:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task2: %d", count);
   1233f:	83 ec 08             	sub    $0x8,%esp
   12342:	ff 75 f4             	pushl  -0xc(%ebp)
   12345:	68 f6 3a 01 00       	push   $0x13af6
   1234a:	e8 cd 0d 00 00       	call   1311c <log_printf>
   1234f:	83 c4 10             	add    $0x10,%esp
        count++;
   12352:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   12356:	83 ec 0c             	sub    $0xc,%esp
   12359:	68 e8 03 00 00       	push   $0x3e8
   1235e:	e8 0c f0 ff ff       	call   1136f <sys_sleep>
   12363:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task2: %d", count);
   12366:	eb d7                	jmp    1233f <test_task2+0xd>

00012368 <init_main>:
static task_t task1;
static task_t task2;
static uint32_t stack1[MEM_PAGE_SIZE];
static uint32_t stack2[MEM_PAGE_SIZE];

void init_main(void) {
   12368:	55                   	push   %ebp
   12369:	89 e5                	mov    %esp,%ebp
   1236b:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();    
    log_printf("Kernel is running ...");
   1236e:	83 ec 0c             	sub    $0xc,%esp
   12371:	68 05 3b 01 00       	push   $0x13b05
   12376:	e8 a1 0d 00 00       	call   1311c <log_printf>
   1237b:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   1237e:	83 ec 04             	sub    $0x4,%esp
   12381:	68 1b 3b 01 00       	push   $0x13b1b
   12386:	68 20 3b 01 00       	push   $0x13b20
   1238b:	68 26 3b 01 00       	push   $0x13b26
   12390:	e8 87 0d 00 00       	call   1311c <log_printf>
   12395:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   12398:	83 ec 0c             	sub    $0xc,%esp
   1239b:	6a 61                	push   $0x61
   1239d:	68 56 34 12 00       	push   $0x123456
   123a2:	6a 85                	push   $0xffffff85
   123a4:	68 39 30 00 00       	push   $0x3039
   123a9:	68 35 3b 01 00       	push   $0x13b35
   123ae:	e8 69 0d 00 00       	call   1311c <log_printf>
   123b3:	83 c4 20             	add    $0x20,%esp
    
    // task_init(&task1, "test_task1", TASK_FLAGS_SYSTEM, (uint32_t)test_task1, (uint32_t)&stack1[MEM_PAGE_SIZE]);
    // task_init(&task2, "test_task2", TASK_FLAGS_SYSTEM, (uint32_t)test_task2, (uint32_t)&stack2[MEM_PAGE_SIZE]);


    sys_sched_yield();
   123b6:	e8 ce ed ff ff       	call   11189 <sys_sched_yield>

    // while (1);

    task_first_init();
   123bb:	e8 48 ec ff ff       	call   11008 <task_first_init>
    move_to_first_task();
   123c0:	e8 d3 fe ff ff       	call   12298 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   123c5:	90                   	nop
   123c6:	c9                   	leave  
   123c7:	c3                   	ret    

000123c8 <list_size>:
static inline int list_size(list_t* list) {
   123c8:	55                   	push   %ebp
   123c9:	89 e5                	mov    %esp,%ebp
    return list->count;
   123cb:	8b 45 08             	mov    0x8(%ebp),%eax
   123ce:	8b 40 08             	mov    0x8(%eax),%eax
}
   123d1:	5d                   	pop    %ebp
   123d2:	c3                   	ret    

000123d3 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   123d3:	55                   	push   %ebp
   123d4:	89 e5                	mov    %esp,%ebp
   123d6:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   123d9:	8b 45 08             	mov    0x8(%ebp),%eax
   123dc:	83 ec 08             	sub    $0x8,%esp
   123df:	ff 75 0c             	pushl  0xc(%ebp)
   123e2:	50                   	push   %eax
   123e3:	e8 0a 05 00 00       	call   128f2 <kstrcpy>
   123e8:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   123eb:	8b 45 08             	mov    0x8(%ebp),%eax
   123ee:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   123f5:	8b 45 08             	mov    0x8(%ebp),%eax
   123f8:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   123ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12402:	83 c0 48             	add    $0x48,%eax
   12405:	83 ec 0c             	sub    $0xc,%esp
   12408:	50                   	push   %eax
   12409:	e8 4d 0a 00 00       	call   12e5b <list_init>
   1240e:	83 c4 10             	add    $0x10,%esp
}
   12411:	90                   	nop
   12412:	c9                   	leave  
   12413:	c3                   	ret    

00012414 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   12414:	55                   	push   %ebp
   12415:	89 e5                	mov    %esp,%ebp
   12417:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1241a:	e8 81 fb ff ff       	call   11fa0 <irq_enter_protection>
   1241f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12422:	e8 58 ed ff ff       	call   1117f <task_current>
   12427:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   1242a:	8b 45 08             	mov    0x8(%ebp),%eax
   1242d:	8b 40 44             	mov    0x44(%eax),%eax
   12430:	85 c0                	test   %eax,%eax
   12432:	75 15                	jne    12449 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   12434:	8b 45 08             	mov    0x8(%ebp),%eax
   12437:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   1243e:	8b 45 08             	mov    0x8(%ebp),%eax
   12441:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12444:	89 50 40             	mov    %edx,0x40(%eax)
   12447:	eb 48                	jmp    12491 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   12449:	8b 45 08             	mov    0x8(%ebp),%eax
   1244c:	8b 40 40             	mov    0x40(%eax),%eax
   1244f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12452:	75 11                	jne    12465 <mutex_acquire+0x51>
        mutex->locked_count++;
   12454:	8b 45 08             	mov    0x8(%ebp),%eax
   12457:	8b 40 44             	mov    0x44(%eax),%eax
   1245a:	8d 50 01             	lea    0x1(%eax),%edx
   1245d:	8b 45 08             	mov    0x8(%ebp),%eax
   12460:	89 50 44             	mov    %edx,0x44(%eax)
   12463:	eb 2c                	jmp    12491 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   12465:	83 ec 0c             	sub    $0xc,%esp
   12468:	ff 75 f0             	pushl  -0x10(%ebp)
   1246b:	e8 a1 ec ff ff       	call   11111 <task_set_blocked>
   12470:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   12473:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12476:	8d 50 38             	lea    0x38(%eax),%edx
   12479:	8b 45 08             	mov    0x8(%ebp),%eax
   1247c:	83 c0 48             	add    $0x48,%eax
   1247f:	83 ec 08             	sub    $0x8,%esp
   12482:	52                   	push   %edx
   12483:	50                   	push   %eax
   12484:	e8 54 0a 00 00       	call   12edd <list_insert_back>
   12489:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1248c:	e8 59 ed ff ff       	call   111ea <task_dispatch>
    }

    irq_leave_protection(state);
   12491:	83 ec 0c             	sub    $0xc,%esp
   12494:	ff 75 f4             	pushl  -0xc(%ebp)
   12497:	e8 1c fb ff ff       	call   11fb8 <irq_leave_protection>
   1249c:	83 c4 10             	add    $0x10,%esp
}
   1249f:	90                   	nop
   124a0:	c9                   	leave  
   124a1:	c3                   	ret    

000124a2 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   124a2:	55                   	push   %ebp
   124a3:	89 e5                	mov    %esp,%ebp
   124a5:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   124a8:	e8 f3 fa ff ff       	call   11fa0 <irq_enter_protection>
   124ad:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   124b0:	e8 ca ec ff ff       	call   1117f <task_current>
   124b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   124b8:	8b 45 08             	mov    0x8(%ebp),%eax
   124bb:	8b 40 40             	mov    0x40(%eax),%eax
   124be:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   124c1:	0f 85 8a 00 00 00    	jne    12551 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   124c7:	8b 45 08             	mov    0x8(%ebp),%eax
   124ca:	8b 40 44             	mov    0x44(%eax),%eax
   124cd:	8d 50 ff             	lea    -0x1(%eax),%edx
   124d0:	8b 45 08             	mov    0x8(%ebp),%eax
   124d3:	89 50 44             	mov    %edx,0x44(%eax)
   124d6:	8b 45 08             	mov    0x8(%ebp),%eax
   124d9:	8b 40 44             	mov    0x44(%eax),%eax
   124dc:	85 c0                	test   %eax,%eax
   124de:	75 71                	jne    12551 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   124e0:	8b 45 08             	mov    0x8(%ebp),%eax
   124e3:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   124ea:	8b 45 08             	mov    0x8(%ebp),%eax
   124ed:	83 c0 48             	add    $0x48,%eax
   124f0:	83 ec 0c             	sub    $0xc,%esp
   124f3:	50                   	push   %eax
   124f4:	e8 cf fe ff ff       	call   123c8 <list_size>
   124f9:	83 c4 10             	add    $0x10,%esp
   124fc:	85 c0                	test   %eax,%eax
   124fe:	74 51                	je     12551 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   12500:	8b 45 08             	mov    0x8(%ebp),%eax
   12503:	83 c0 48             	add    $0x48,%eax
   12506:	83 ec 0c             	sub    $0xc,%esp
   12509:	50                   	push   %eax
   1250a:	e8 31 0a 00 00       	call   12f40 <list_remove_front>
   1250f:	83 c4 10             	add    $0x10,%esp
   12512:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   12515:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12519:	74 08                	je     12523 <mutex_release+0x81>
   1251b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1251e:	83 e8 38             	sub    $0x38,%eax
   12521:	eb 05                	jmp    12528 <mutex_release+0x86>
   12523:	b8 00 00 00 00       	mov    $0x0,%eax
   12528:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1252b:	83 ec 0c             	sub    $0xc,%esp
   1252e:	ff 75 e8             	pushl  -0x18(%ebp)
   12531:	e8 a7 eb ff ff       	call   110dd <task_set_ready>
   12536:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12539:	8b 45 08             	mov    0x8(%ebp),%eax
   1253c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1253f:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   12542:	8b 45 08             	mov    0x8(%ebp),%eax
   12545:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   1254c:	e8 99 ec ff ff       	call   111ea <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   12551:	83 ec 0c             	sub    $0xc,%esp
   12554:	ff 75 f4             	pushl  -0xc(%ebp)
   12557:	e8 5c fa ff ff       	call   11fb8 <irq_leave_protection>
   1255c:	83 c4 10             	add    $0x10,%esp
   1255f:	90                   	nop
   12560:	c9                   	leave  
   12561:	c3                   	ret    

00012562 <list_size>:
static inline int list_size(list_t* list) {
   12562:	55                   	push   %ebp
   12563:	89 e5                	mov    %esp,%ebp
    return list->count;
   12565:	8b 45 08             	mov    0x8(%ebp),%eax
   12568:	8b 40 08             	mov    0x8(%eax),%eax
}
   1256b:	5d                   	pop    %ebp
   1256c:	c3                   	ret    

0001256d <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   1256d:	55                   	push   %ebp
   1256e:	89 e5                	mov    %esp,%ebp
   12570:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12573:	8b 45 08             	mov    0x8(%ebp),%eax
   12576:	8b 55 0c             	mov    0xc(%ebp),%edx
   12579:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1257b:	8b 45 08             	mov    0x8(%ebp),%eax
   1257e:	83 c0 04             	add    $0x4,%eax
   12581:	83 ec 0c             	sub    $0xc,%esp
   12584:	50                   	push   %eax
   12585:	e8 d1 08 00 00       	call   12e5b <list_init>
   1258a:	83 c4 10             	add    $0x10,%esp
}
   1258d:	90                   	nop
   1258e:	c9                   	leave  
   1258f:	c3                   	ret    

00012590 <sem_wait>:


void sem_wait(sem_t* sem) {
   12590:	55                   	push   %ebp
   12591:	89 e5                	mov    %esp,%ebp
   12593:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12596:	e8 05 fa ff ff       	call   11fa0 <irq_enter_protection>
   1259b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 进程获得了一个信号，且不为0
    if (sem->count > 0) {
   1259e:	8b 45 08             	mov    0x8(%ebp),%eax
   125a1:	8b 00                	mov    (%eax),%eax
   125a3:	85 c0                	test   %eax,%eax
   125a5:	7e 0f                	jle    125b6 <sem_wait+0x26>
        sem->count--;
   125a7:	8b 45 08             	mov    0x8(%ebp),%eax
   125aa:	8b 00                	mov    (%eax),%eax
   125ac:	8d 50 ff             	lea    -0x1(%eax),%edx
   125af:	8b 45 08             	mov    0x8(%ebp),%eax
   125b2:	89 10                	mov    %edx,(%eax)
   125b4:	eb 34                	jmp    125ea <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   125b6:	e8 c4 eb ff ff       	call   1117f <task_current>
   125bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   125be:	83 ec 0c             	sub    $0xc,%esp
   125c1:	ff 75 f0             	pushl  -0x10(%ebp)
   125c4:	e8 48 eb ff ff       	call   11111 <task_set_blocked>
   125c9:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   125cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125cf:	8d 50 38             	lea    0x38(%eax),%edx
   125d2:	8b 45 08             	mov    0x8(%ebp),%eax
   125d5:	83 c0 04             	add    $0x4,%eax
   125d8:	83 ec 08             	sub    $0x8,%esp
   125db:	52                   	push   %edx
   125dc:	50                   	push   %eax
   125dd:	e8 fb 08 00 00       	call   12edd <list_insert_back>
   125e2:	83 c4 10             	add    $0x10,%esp
        
        task_dispatch();
   125e5:	e8 00 ec ff ff       	call   111ea <task_dispatch>
    }

    irq_leave_protection(state);
   125ea:	83 ec 0c             	sub    $0xc,%esp
   125ed:	ff 75 f4             	pushl  -0xc(%ebp)
   125f0:	e8 c3 f9 ff ff       	call   11fb8 <irq_leave_protection>
   125f5:	83 c4 10             	add    $0x10,%esp
}
   125f8:	90                   	nop
   125f9:	c9                   	leave  
   125fa:	c3                   	ret    

000125fb <sem_notify>:


void sem_notify(sem_t* sem) {
   125fb:	55                   	push   %ebp
   125fc:	89 e5                	mov    %esp,%ebp
   125fe:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12601:	e8 9a f9 ff ff       	call   11fa0 <irq_enter_protection>
   12606:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   12609:	8b 45 08             	mov    0x8(%ebp),%eax
   1260c:	83 c0 04             	add    $0x4,%eax
   1260f:	83 ec 0c             	sub    $0xc,%esp
   12612:	50                   	push   %eax
   12613:	e8 4a ff ff ff       	call   12562 <list_size>
   12618:	83 c4 10             	add    $0x10,%esp
   1261b:	85 c0                	test   %eax,%eax
   1261d:	74 40                	je     1265f <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   1261f:	8b 45 08             	mov    0x8(%ebp),%eax
   12622:	83 c0 04             	add    $0x4,%eax
   12625:	83 ec 0c             	sub    $0xc,%esp
   12628:	50                   	push   %eax
   12629:	e8 12 09 00 00       	call   12f40 <list_remove_front>
   1262e:	83 c4 10             	add    $0x10,%esp
   12631:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   12634:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12638:	74 08                	je     12642 <sem_notify+0x47>
   1263a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1263d:	83 e8 38             	sub    $0x38,%eax
   12640:	eb 05                	jmp    12647 <sem_notify+0x4c>
   12642:	b8 00 00 00 00       	mov    $0x0,%eax
   12647:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1264a:	83 ec 0c             	sub    $0xc,%esp
   1264d:	ff 75 ec             	pushl  -0x14(%ebp)
   12650:	e8 88 ea ff ff       	call   110dd <task_set_ready>
   12655:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12658:	e8 8d eb ff ff       	call   111ea <task_dispatch>
   1265d:	eb 0d                	jmp    1266c <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   1265f:	8b 45 08             	mov    0x8(%ebp),%eax
   12662:	8b 00                	mov    (%eax),%eax
   12664:	8d 50 01             	lea    0x1(%eax),%edx
   12667:	8b 45 08             	mov    0x8(%ebp),%eax
   1266a:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   1266c:	83 ec 0c             	sub    $0xc,%esp
   1266f:	ff 75 f4             	pushl  -0xc(%ebp)
   12672:	e8 41 f9 ff ff       	call   11fb8 <irq_leave_protection>
   12677:	83 c4 10             	add    $0x10,%esp
}
   1267a:	90                   	nop
   1267b:	c9                   	leave  
   1267c:	c3                   	ret    

0001267d <sem_count>:

int sem_count(sem_t* sem) {
   1267d:	55                   	push   %ebp
   1267e:	89 e5                	mov    %esp,%ebp
   12680:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12683:	e8 18 f9 ff ff       	call   11fa0 <irq_enter_protection>
   12688:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   1268b:	8b 45 08             	mov    0x8(%ebp),%eax
   1268e:	8b 00                	mov    (%eax),%eax
   12690:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   12693:	83 ec 0c             	sub    $0xc,%esp
   12696:	ff 75 f4             	pushl  -0xc(%ebp)
   12699:	e8 1a f9 ff ff       	call   11fb8 <irq_leave_protection>
   1269e:	83 c4 10             	add    $0x10,%esp

    return count;
   126a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126a4:	c9                   	leave  
   126a5:	c3                   	ret    

000126a6 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   126a6:	55                   	push   %ebp
   126a7:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   126a9:	8b 45 08             	mov    0x8(%ebp),%eax
   126ac:	83 c0 07             	add    $0x7,%eax
   126af:	8d 50 07             	lea    0x7(%eax),%edx
   126b2:	85 c0                	test   %eax,%eax
   126b4:	0f 48 c2             	cmovs  %edx,%eax
   126b7:	c1 f8 03             	sar    $0x3,%eax
}
   126ba:	5d                   	pop    %ebp
   126bb:	c3                   	ret    

000126bc <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   126bc:	55                   	push   %ebp
   126bd:	89 e5                	mov    %esp,%ebp
   126bf:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   126c2:	8b 45 08             	mov    0x8(%ebp),%eax
   126c5:	8b 55 10             	mov    0x10(%ebp),%edx
   126c8:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   126ca:	8b 45 08             	mov    0x8(%ebp),%eax
   126cd:	8b 55 0c             	mov    0xc(%ebp),%edx
   126d0:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   126d3:	8b 45 08             	mov    0x8(%ebp),%eax
   126d6:	8b 00                	mov    (%eax),%eax
   126d8:	50                   	push   %eax
   126d9:	e8 c8 ff ff ff       	call   126a6 <bitmap_byte_count>
   126de:	83 c4 04             	add    $0x4,%esp
   126e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   126e4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   126e8:	74 07                	je     126f1 <bitmap_init+0x35>
   126ea:	ba ff 00 00 00       	mov    $0xff,%edx
   126ef:	eb 05                	jmp    126f6 <bitmap_init+0x3a>
   126f1:	ba 00 00 00 00       	mov    $0x0,%edx
   126f6:	8b 45 08             	mov    0x8(%ebp),%eax
   126f9:	8b 40 04             	mov    0x4(%eax),%eax
   126fc:	83 ec 04             	sub    $0x4,%esp
   126ff:	ff 75 f4             	pushl  -0xc(%ebp)
   12702:	52                   	push   %edx
   12703:	50                   	push   %eax
   12704:	e8 a4 03 00 00       	call   12aad <kmemset>
   12709:	83 c4 10             	add    $0x10,%esp
}
   1270c:	90                   	nop
   1270d:	c9                   	leave  
   1270e:	c3                   	ret    

0001270f <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   1270f:	55                   	push   %ebp
   12710:	89 e5                	mov    %esp,%ebp
   12712:	56                   	push   %esi
   12713:	53                   	push   %ebx
   12714:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12717:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1271e:	e9 a2 00 00 00       	jmp    127c5 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   12723:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12727:	74 4a                	je     12773 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12729:	8b 45 08             	mov    0x8(%ebp),%eax
   1272c:	8b 50 04             	mov    0x4(%eax),%edx
   1272f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12732:	8d 48 07             	lea    0x7(%eax),%ecx
   12735:	85 c0                	test   %eax,%eax
   12737:	0f 48 c1             	cmovs  %ecx,%eax
   1273a:	c1 f8 03             	sar    $0x3,%eax
   1273d:	89 c3                	mov    %eax,%ebx
   1273f:	89 d8                	mov    %ebx,%eax
   12741:	01 d0                	add    %edx,%eax
   12743:	0f b6 00             	movzbl (%eax),%eax
   12746:	89 c6                	mov    %eax,%esi
   12748:	8b 45 0c             	mov    0xc(%ebp),%eax
   1274b:	99                   	cltd   
   1274c:	c1 ea 1d             	shr    $0x1d,%edx
   1274f:	01 d0                	add    %edx,%eax
   12751:	83 e0 07             	and    $0x7,%eax
   12754:	29 d0                	sub    %edx,%eax
   12756:	ba 01 00 00 00       	mov    $0x1,%edx
   1275b:	89 c1                	mov    %eax,%ecx
   1275d:	d3 e2                	shl    %cl,%edx
   1275f:	89 d0                	mov    %edx,%eax
   12761:	89 f2                	mov    %esi,%edx
   12763:	09 c2                	or     %eax,%edx
   12765:	8b 45 08             	mov    0x8(%ebp),%eax
   12768:	8b 40 04             	mov    0x4(%eax),%eax
   1276b:	89 d9                	mov    %ebx,%ecx
   1276d:	01 c8                	add    %ecx,%eax
   1276f:	88 10                	mov    %dl,(%eax)
   12771:	eb 4a                	jmp    127bd <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12773:	8b 45 08             	mov    0x8(%ebp),%eax
   12776:	8b 50 04             	mov    0x4(%eax),%edx
   12779:	8b 45 0c             	mov    0xc(%ebp),%eax
   1277c:	8d 48 07             	lea    0x7(%eax),%ecx
   1277f:	85 c0                	test   %eax,%eax
   12781:	0f 48 c1             	cmovs  %ecx,%eax
   12784:	c1 f8 03             	sar    $0x3,%eax
   12787:	89 c3                	mov    %eax,%ebx
   12789:	89 d8                	mov    %ebx,%eax
   1278b:	01 d0                	add    %edx,%eax
   1278d:	0f b6 00             	movzbl (%eax),%eax
   12790:	89 c6                	mov    %eax,%esi
   12792:	8b 45 0c             	mov    0xc(%ebp),%eax
   12795:	99                   	cltd   
   12796:	c1 ea 1d             	shr    $0x1d,%edx
   12799:	01 d0                	add    %edx,%eax
   1279b:	83 e0 07             	and    $0x7,%eax
   1279e:	29 d0                	sub    %edx,%eax
   127a0:	ba 01 00 00 00       	mov    $0x1,%edx
   127a5:	89 c1                	mov    %eax,%ecx
   127a7:	d3 e2                	shl    %cl,%edx
   127a9:	89 d0                	mov    %edx,%eax
   127ab:	f7 d0                	not    %eax
   127ad:	89 f2                	mov    %esi,%edx
   127af:	21 c2                	and    %eax,%edx
   127b1:	8b 45 08             	mov    0x8(%ebp),%eax
   127b4:	8b 40 04             	mov    0x4(%eax),%eax
   127b7:	89 d9                	mov    %ebx,%ecx
   127b9:	01 c8                	add    %ecx,%eax
   127bb:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   127bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   127c1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   127c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127c8:	3b 45 10             	cmp    0x10(%ebp),%eax
   127cb:	7d 0e                	jge    127db <bitmap_set_bit+0xcc>
   127cd:	8b 45 08             	mov    0x8(%ebp),%eax
   127d0:	8b 00                	mov    (%eax),%eax
   127d2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   127d5:	0f 8c 48 ff ff ff    	jl     12723 <bitmap_set_bit+0x14>
        }
    }
}
   127db:	90                   	nop
   127dc:	83 c4 10             	add    $0x10,%esp
   127df:	5b                   	pop    %ebx
   127e0:	5e                   	pop    %esi
   127e1:	5d                   	pop    %ebp
   127e2:	c3                   	ret    

000127e3 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   127e3:	55                   	push   %ebp
   127e4:	89 e5                	mov    %esp,%ebp
   127e6:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   127e7:	8b 45 08             	mov    0x8(%ebp),%eax
   127ea:	8b 50 04             	mov    0x4(%eax),%edx
   127ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   127f0:	8d 48 07             	lea    0x7(%eax),%ecx
   127f3:	85 c0                	test   %eax,%eax
   127f5:	0f 48 c1             	cmovs  %ecx,%eax
   127f8:	c1 f8 03             	sar    $0x3,%eax
   127fb:	01 d0                	add    %edx,%eax
   127fd:	0f b6 00             	movzbl (%eax),%eax
   12800:	0f b6 d8             	movzbl %al,%ebx
   12803:	8b 45 0c             	mov    0xc(%ebp),%eax
   12806:	99                   	cltd   
   12807:	c1 ea 1d             	shr    $0x1d,%edx
   1280a:	01 d0                	add    %edx,%eax
   1280c:	83 e0 07             	and    $0x7,%eax
   1280f:	29 d0                	sub    %edx,%eax
   12811:	89 c1                	mov    %eax,%ecx
   12813:	d3 fb                	sar    %cl,%ebx
   12815:	89 d8                	mov    %ebx,%eax
   12817:	83 e0 01             	and    $0x1,%eax
}
   1281a:	5b                   	pop    %ebx
   1281b:	5d                   	pop    %ebp
   1281c:	c3                   	ret    

0001281d <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   1281d:	55                   	push   %ebp
   1281e:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12820:	ff 75 0c             	pushl  0xc(%ebp)
   12823:	ff 75 08             	pushl  0x8(%ebp)
   12826:	e8 b8 ff ff ff       	call   127e3 <bitmap_get_bit>
   1282b:	83 c4 08             	add    $0x8,%esp
   1282e:	85 c0                	test   %eax,%eax
   12830:	0f 95 c0             	setne  %al
   12833:	0f b6 c0             	movzbl %al,%eax
}
   12836:	c9                   	leave  
   12837:	c3                   	ret    

00012838 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12838:	55                   	push   %ebp
   12839:	89 e5                	mov    %esp,%ebp
   1283b:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1283e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   12845:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1284c:	e9 85 00 00 00       	jmp    128d6 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12851:	ff 75 fc             	pushl  -0x4(%ebp)
   12854:	ff 75 08             	pushl  0x8(%ebp)
   12857:	e8 87 ff ff ff       	call   127e3 <bitmap_get_bit>
   1285c:	83 c4 08             	add    $0x8,%esp
   1285f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12862:	74 06                	je     1286a <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   12864:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12868:	eb 6c                	jmp    128d6 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1286a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1286d:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12870:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12877:	eb 27                	jmp    128a0 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12879:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1287c:	8d 50 01             	lea    0x1(%eax),%edx
   1287f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12882:	50                   	push   %eax
   12883:	ff 75 08             	pushl  0x8(%ebp)
   12886:	e8 58 ff ff ff       	call   127e3 <bitmap_get_bit>
   1288b:	83 c4 08             	add    $0x8,%esp
   1288e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12891:	74 09                	je     1289c <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12893:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1289a:	eb 16                	jmp    128b2 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1289c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   128a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128a3:	3b 45 10             	cmp    0x10(%ebp),%eax
   128a6:	7d 0a                	jge    128b2 <bitmap_alloc_nbits+0x7a>
   128a8:	8b 45 08             	mov    0x8(%ebp),%eax
   128ab:	8b 00                	mov    (%eax),%eax
   128ad:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   128b0:	7c c7                	jl     12879 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   128b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   128b5:	3b 45 10             	cmp    0x10(%ebp),%eax
   128b8:	7c 1c                	jl     128d6 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   128ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   128bd:	f7 d0                	not    %eax
   128bf:	50                   	push   %eax
   128c0:	ff 75 10             	pushl  0x10(%ebp)
   128c3:	ff 75 f8             	pushl  -0x8(%ebp)
   128c6:	ff 75 08             	pushl  0x8(%ebp)
   128c9:	e8 41 fe ff ff       	call   1270f <bitmap_set_bit>
   128ce:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   128d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128d4:	eb 13                	jmp    128e9 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   128d6:	8b 45 08             	mov    0x8(%ebp),%eax
   128d9:	8b 00                	mov    (%eax),%eax
   128db:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   128de:	0f 8c 6d ff ff ff    	jl     12851 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   128e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   128e9:	c9                   	leave  
   128ea:	c3                   	ret    

000128eb <hlt>:
static inline void hlt(void) {
   128eb:	55                   	push   %ebp
   128ec:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   128ee:	f4                   	hlt    
}
   128ef:	90                   	nop
   128f0:	5d                   	pop    %ebp
   128f1:	c3                   	ret    

000128f2 <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   128f2:	55                   	push   %ebp
   128f3:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   128f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128f9:	74 3b                	je     12936 <kstrcpy+0x44>
   128fb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128ff:	74 35                	je     12936 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   12901:	eb 17                	jmp    1291a <kstrcpy+0x28>
        *dest++ = *src++;
   12903:	8b 55 0c             	mov    0xc(%ebp),%edx
   12906:	8d 42 01             	lea    0x1(%edx),%eax
   12909:	89 45 0c             	mov    %eax,0xc(%ebp)
   1290c:	8b 45 08             	mov    0x8(%ebp),%eax
   1290f:	8d 48 01             	lea    0x1(%eax),%ecx
   12912:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12915:	0f b6 12             	movzbl (%edx),%edx
   12918:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   1291a:	8b 45 08             	mov    0x8(%ebp),%eax
   1291d:	0f b6 00             	movzbl (%eax),%eax
   12920:	84 c0                	test   %al,%al
   12922:	74 0a                	je     1292e <kstrcpy+0x3c>
   12924:	8b 45 0c             	mov    0xc(%ebp),%eax
   12927:	0f b6 00             	movzbl (%eax),%eax
   1292a:	84 c0                	test   %al,%al
   1292c:	75 d5                	jne    12903 <kstrcpy+0x11>
    }
    *dest = '\0';
   1292e:	8b 45 08             	mov    0x8(%ebp),%eax
   12931:	c6 00 00             	movb   $0x0,(%eax)
   12934:	eb 01                	jmp    12937 <kstrcpy+0x45>
        return;
   12936:	90                   	nop
}
   12937:	5d                   	pop    %ebp
   12938:	c3                   	ret    

00012939 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12939:	55                   	push   %ebp
   1293a:	89 e5                	mov    %esp,%ebp
   1293c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1293f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12943:	74 61                	je     129a6 <kstrncpy+0x6d>
   12945:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12949:	74 5b                	je     129a6 <kstrncpy+0x6d>
   1294b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1294f:	74 55                	je     129a6 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   12951:	8b 45 08             	mov    0x8(%ebp),%eax
   12954:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12957:	8b 45 0c             	mov    0xc(%ebp),%eax
   1295a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   1295d:	eb 17                	jmp    12976 <kstrncpy+0x3d>
        *d++ = *s++;
   1295f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12962:	8d 42 01             	lea    0x1(%edx),%eax
   12965:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12968:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1296b:	8d 48 01             	lea    0x1(%eax),%ecx
   1296e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12971:	0f b6 12             	movzbl (%edx),%edx
   12974:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   12976:	8b 45 10             	mov    0x10(%ebp),%eax
   12979:	8d 50 ff             	lea    -0x1(%eax),%edx
   1297c:	89 55 10             	mov    %edx,0x10(%ebp)
   1297f:	85 c0                	test   %eax,%eax
   12981:	7e 0a                	jle    1298d <kstrncpy+0x54>
   12983:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12986:	0f b6 00             	movzbl (%eax),%eax
   12989:	84 c0                	test   %al,%al
   1298b:	75 d2                	jne    1295f <kstrncpy+0x26>
    }
    if (size == 0) {
   1298d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12991:	75 0b                	jne    1299e <kstrncpy+0x65>
        *(d - 1) = '\0';
   12993:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12996:	83 e8 01             	sub    $0x1,%eax
   12999:	c6 00 00             	movb   $0x0,(%eax)
   1299c:	eb 09                	jmp    129a7 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   1299e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129a1:	c6 00 00             	movb   $0x0,(%eax)
   129a4:	eb 01                	jmp    129a7 <kstrncpy+0x6e>
        return;
   129a6:	90                   	nop
    }
}
   129a7:	c9                   	leave  
   129a8:	c3                   	ret    

000129a9 <kstrlen>:


int kstrlen(const char *str) {
   129a9:	55                   	push   %ebp
   129aa:	89 e5                	mov    %esp,%ebp
   129ac:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   129af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129b3:	75 07                	jne    129bc <kstrlen+0x13>
        return 0;
   129b5:	b8 00 00 00 00       	mov    $0x0,%eax
   129ba:	eb 26                	jmp    129e2 <kstrlen+0x39>
    }

    const char *c = str;
   129bc:	8b 45 08             	mov    0x8(%ebp),%eax
   129bf:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   129c2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   129c9:	eb 04                	jmp    129cf <kstrlen+0x26>
        len++;
   129cb:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   129cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129d2:	8d 50 01             	lea    0x1(%eax),%edx
   129d5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129d8:	0f b6 00             	movzbl (%eax),%eax
   129db:	84 c0                	test   %al,%al
   129dd:	75 ec                	jne    129cb <kstrlen+0x22>
    }

    return len;
   129df:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   129e2:	c9                   	leave  
   129e3:	c3                   	ret    

000129e4 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   129e4:	55                   	push   %ebp
   129e5:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   129e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129eb:	74 06                	je     129f3 <kstrncmp+0xf>
   129ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129f1:	75 0f                	jne    12a02 <kstrncmp+0x1e>
        return -1;
   129f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   129f8:	eb 62                	jmp    12a5c <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   129fa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   129fe:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   12a02:	8b 45 08             	mov    0x8(%ebp),%eax
   12a05:	0f b6 00             	movzbl (%eax),%eax
   12a08:	84 c0                	test   %al,%al
   12a0a:	74 20                	je     12a2c <kstrncmp+0x48>
   12a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a0f:	0f b6 00             	movzbl (%eax),%eax
   12a12:	84 c0                	test   %al,%al
   12a14:	74 16                	je     12a2c <kstrncmp+0x48>
   12a16:	8b 45 08             	mov    0x8(%ebp),%eax
   12a19:	0f b6 10             	movzbl (%eax),%edx
   12a1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a1f:	0f b6 00             	movzbl (%eax),%eax
   12a22:	38 c2                	cmp    %al,%dl
   12a24:	75 06                	jne    12a2c <kstrncmp+0x48>
   12a26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a2a:	75 ce                	jne    129fa <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2f:	0f b6 00             	movzbl (%eax),%eax
   12a32:	84 c0                	test   %al,%al
   12a34:	74 21                	je     12a57 <kstrncmp+0x73>
   12a36:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a39:	0f b6 00             	movzbl (%eax),%eax
   12a3c:	84 c0                	test   %al,%al
   12a3e:	74 17                	je     12a57 <kstrncmp+0x73>
   12a40:	8b 45 08             	mov    0x8(%ebp),%eax
   12a43:	0f b6 10             	movzbl (%eax),%edx
   12a46:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a49:	0f b6 00             	movzbl (%eax),%eax
   12a4c:	38 c2                	cmp    %al,%dl
   12a4e:	74 07                	je     12a57 <kstrncmp+0x73>
   12a50:	b8 01 00 00 00       	mov    $0x1,%eax
   12a55:	eb 05                	jmp    12a5c <kstrncmp+0x78>
   12a57:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a5c:	5d                   	pop    %ebp
   12a5d:	c3                   	ret    

00012a5e <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   12a5e:	55                   	push   %ebp
   12a5f:	89 e5                	mov    %esp,%ebp
   12a61:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12a64:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a68:	74 40                	je     12aaa <kmemcpy+0x4c>
   12a6a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a6e:	74 3a                	je     12aaa <kmemcpy+0x4c>
   12a70:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a74:	74 34                	je     12aaa <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12a76:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a79:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12a7c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12a82:	eb 17                	jmp    12a9b <kmemcpy+0x3d>
        *d++ = *s++;
   12a84:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12a87:	8d 42 01             	lea    0x1(%edx),%eax
   12a8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12a8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a90:	8d 48 01             	lea    0x1(%eax),%ecx
   12a93:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12a96:	0f b6 12             	movzbl (%edx),%edx
   12a99:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12a9b:	8b 45 10             	mov    0x10(%ebp),%eax
   12a9e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aa1:	89 55 10             	mov    %edx,0x10(%ebp)
   12aa4:	85 c0                	test   %eax,%eax
   12aa6:	75 dc                	jne    12a84 <kmemcpy+0x26>
   12aa8:	eb 01                	jmp    12aab <kmemcpy+0x4d>
        return;
   12aaa:	90                   	nop
    }
}
   12aab:	c9                   	leave  
   12aac:	c3                   	ret    

00012aad <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12aad:	55                   	push   %ebp
   12aae:	89 e5                	mov    %esp,%ebp
   12ab0:	83 ec 14             	sub    $0x14,%esp
   12ab3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ab6:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12ab9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12abd:	74 2c                	je     12aeb <kmemset+0x3e>
   12abf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12ac3:	74 26                	je     12aeb <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   12ac5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12acb:	eb 0f                	jmp    12adc <kmemset+0x2f>
        *d++ = v;
   12acd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ad0:	8d 50 01             	lea    0x1(%eax),%edx
   12ad3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12ad6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12ada:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12adc:	8b 45 10             	mov    0x10(%ebp),%eax
   12adf:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ae2:	89 55 10             	mov    %edx,0x10(%ebp)
   12ae5:	85 c0                	test   %eax,%eax
   12ae7:	75 e4                	jne    12acd <kmemset+0x20>
   12ae9:	eb 01                	jmp    12aec <kmemset+0x3f>
        return;
   12aeb:	90                   	nop
    }
}
   12aec:	c9                   	leave  
   12aed:	c3                   	ret    

00012aee <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12aee:	55                   	push   %ebp
   12aef:	89 e5                	mov    %esp,%ebp
   12af1:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   12af4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12af8:	74 06                	je     12b00 <kmemcmp+0x12>
   12afa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12afe:	75 07                	jne    12b07 <kmemcmp+0x19>
        return 1;
   12b00:	b8 01 00 00 00       	mov    $0x1,%eax
   12b05:	eb 43                	jmp    12b4a <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   12b07:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12b0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b10:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12b13:	eb 23                	jmp    12b38 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   12b15:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b18:	8d 50 01             	lea    0x1(%eax),%edx
   12b1b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12b1e:	0f b6 08             	movzbl (%eax),%ecx
   12b21:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b24:	8d 50 01             	lea    0x1(%eax),%edx
   12b27:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b2a:	0f b6 00             	movzbl (%eax),%eax
   12b2d:	38 c1                	cmp    %al,%cl
   12b2f:	74 07                	je     12b38 <kmemcmp+0x4a>
            return 1;
   12b31:	b8 01 00 00 00       	mov    $0x1,%eax
   12b36:	eb 12                	jmp    12b4a <kmemcmp+0x5c>
    while (size--) {
   12b38:	8b 45 10             	mov    0x10(%ebp),%eax
   12b3b:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b3e:	89 55 10             	mov    %edx,0x10(%ebp)
   12b41:	85 c0                	test   %eax,%eax
   12b43:	75 d0                	jne    12b15 <kmemcmp+0x27>
        }
    }

    return 0;
   12b45:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12b4a:	c9                   	leave  
   12b4b:	c3                   	ret    

00012b4c <kitoa>:


void kitoa(char *buf, int num, int base) {
   12b4c:	55                   	push   %ebp
   12b4d:	89 e5                	mov    %esp,%ebp
   12b4f:	53                   	push   %ebx
   12b50:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   12b53:	8b 45 08             	mov    0x8(%ebp),%eax
   12b56:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12b59:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b5c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   12b5f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12b63:	74 1d                	je     12b82 <kitoa+0x36>
   12b65:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12b69:	74 17                	je     12b82 <kitoa+0x36>
   12b6b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b6f:	74 11                	je     12b82 <kitoa+0x36>
   12b71:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12b75:	74 0b                	je     12b82 <kitoa+0x36>
        *p = '\0';
   12b77:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b7a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12b7d:	e9 03 01 00 00       	jmp    12c85 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12b82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12b89:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b8d:	79 19                	jns    12ba8 <kitoa+0x5c>
   12b8f:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b93:	75 13                	jne    12ba8 <kitoa+0x5c>
        *p++ = '-';
   12b95:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b98:	8d 50 01             	lea    0x1(%eax),%edx
   12b9b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b9e:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12ba1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12ba8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12bac:	74 3b                	je     12be9 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12bae:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bb7:	99                   	cltd   
   12bb8:	f7 7d 10             	idivl  0x10(%ebp)
   12bbb:	89 d0                	mov    %edx,%eax
   12bbd:	83 c0 0f             	add    $0xf,%eax
   12bc0:	01 c8                	add    %ecx,%eax
   12bc2:	0f b6 00             	movzbl (%eax),%eax
   12bc5:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12bc8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bcb:	8d 50 01             	lea    0x1(%eax),%edx
   12bce:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12bd1:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12bd5:	88 10                	mov    %dl,(%eax)
            num /= base;
   12bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bda:	99                   	cltd   
   12bdb:	f7 7d 10             	idivl  0x10(%ebp)
   12bde:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12be1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12be5:	75 c7                	jne    12bae <kitoa+0x62>
   12be7:	eb 4b                	jmp    12c34 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12be9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12bef:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12bf5:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12bf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bfb:	ba 00 00 00 00       	mov    $0x0,%edx
   12c00:	f7 f3                	div    %ebx
   12c02:	89 d0                	mov    %edx,%eax
   12c04:	83 c0 0f             	add    $0xf,%eax
   12c07:	01 c8                	add    %ecx,%eax
   12c09:	0f b6 00             	movzbl (%eax),%eax
   12c0c:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12c0f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c12:	8d 50 01             	lea    0x1(%eax),%edx
   12c15:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c18:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12c1c:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12c1e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c24:	ba 00 00 00 00       	mov    $0x0,%edx
   12c29:	f7 f3                	div    %ebx
   12c2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12c2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12c32:	75 bb                	jne    12bef <kitoa+0xa3>
    }
    *p-- = '\0';
   12c34:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c37:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c3a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c3d:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12c40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12c44:	74 08                	je     12c4e <kitoa+0x102>
   12c46:	8b 45 08             	mov    0x8(%ebp),%eax
   12c49:	83 c0 01             	add    $0x1,%eax
   12c4c:	eb 03                	jmp    12c51 <kitoa+0x105>
   12c4e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c51:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12c54:	eb 27                	jmp    12c7d <kitoa+0x131>
        char ch = *start;
   12c56:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c59:	0f b6 00             	movzbl (%eax),%eax
   12c5c:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12c5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c62:	0f b6 10             	movzbl (%eax),%edx
   12c65:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c68:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12c6a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c6d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c70:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c73:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12c77:	88 10                	mov    %dl,(%eax)
        start++;
   12c79:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12c7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c80:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12c83:	72 d1                	jb     12c56 <kitoa+0x10a>
    }
}
   12c85:	83 c4 20             	add    $0x20,%esp
   12c88:	5b                   	pop    %ebx
   12c89:	5d                   	pop    %ebp
   12c8a:	c3                   	ret    

00012c8b <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12c8b:	55                   	push   %ebp
   12c8c:	89 e5                	mov    %esp,%ebp
   12c8e:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12c91:	8d 45 10             	lea    0x10(%ebp),%eax
   12c94:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c9a:	83 ec 04             	sub    $0x4,%esp
   12c9d:	50                   	push   %eax
   12c9e:	ff 75 0c             	pushl  0xc(%ebp)
   12ca1:	ff 75 08             	pushl  0x8(%ebp)
   12ca4:	e8 06 00 00 00       	call   12caf <kvsprintf>
   12ca9:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12cac:	90                   	nop
   12cad:	c9                   	leave  
   12cae:	c3                   	ret    

00012caf <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12caf:	55                   	push   %ebp
   12cb0:	89 e5                	mov    %esp,%ebp
   12cb2:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12cb5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12cbc:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12cc2:	e9 2f 01 00 00       	jmp    12df6 <kvsprintf+0x147>
        switch (state) {
   12cc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12cca:	85 c0                	test   %eax,%eax
   12ccc:	74 0a                	je     12cd8 <kvsprintf+0x29>
   12cce:	83 f8 01             	cmp    $0x1,%eax
   12cd1:	74 2b                	je     12cfe <kvsprintf+0x4f>
   12cd3:	e9 1e 01 00 00       	jmp    12df6 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12cd8:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12cdc:	75 0c                	jne    12cea <kvsprintf+0x3b>
                state = READ_FMT;
   12cde:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12ce5:	e9 0c 01 00 00       	jmp    12df6 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12cea:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ced:	8d 50 01             	lea    0x1(%eax),%edx
   12cf0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12cf3:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12cf7:	88 10                	mov    %dl,(%eax)
            }
            break;
   12cf9:	e9 f8 00 00 00       	jmp    12df6 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12cfe:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12d02:	75 31                	jne    12d35 <kvsprintf+0x86>
                int num = va_arg(args, int);
   12d04:	8b 45 10             	mov    0x10(%ebp),%eax
   12d07:	8d 50 04             	lea    0x4(%eax),%edx
   12d0a:	89 55 10             	mov    %edx,0x10(%ebp)
   12d0d:	8b 00                	mov    (%eax),%eax
   12d0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   12d12:	6a 0a                	push   $0xa
   12d14:	ff 75 e4             	pushl  -0x1c(%ebp)
   12d17:	ff 75 f8             	pushl  -0x8(%ebp)
   12d1a:	e8 2d fe ff ff       	call   12b4c <kitoa>
   12d1f:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12d22:	ff 75 f8             	pushl  -0x8(%ebp)
   12d25:	e8 7f fc ff ff       	call   129a9 <kstrlen>
   12d2a:	83 c4 04             	add    $0x4,%esp
   12d2d:	01 45 f8             	add    %eax,-0x8(%ebp)
   12d30:	e9 b9 00 00 00       	jmp    12dee <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12d35:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12d39:	75 46                	jne    12d81 <kvsprintf+0xd2>
                *curr++ = '0';
   12d3b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d3e:	8d 50 01             	lea    0x1(%eax),%edx
   12d41:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d44:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12d47:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d4a:	8d 50 01             	lea    0x1(%eax),%edx
   12d4d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d50:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12d53:	8b 45 10             	mov    0x10(%ebp),%eax
   12d56:	8d 50 04             	lea    0x4(%eax),%edx
   12d59:	89 55 10             	mov    %edx,0x10(%ebp)
   12d5c:	8b 00                	mov    (%eax),%eax
   12d5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12d61:	6a 10                	push   $0x10
   12d63:	ff 75 e8             	pushl  -0x18(%ebp)
   12d66:	ff 75 f8             	pushl  -0x8(%ebp)
   12d69:	e8 de fd ff ff       	call   12b4c <kitoa>
   12d6e:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12d71:	ff 75 f8             	pushl  -0x8(%ebp)
   12d74:	e8 30 fc ff ff       	call   129a9 <kstrlen>
   12d79:	83 c4 04             	add    $0x4,%esp
   12d7c:	01 45 f8             	add    %eax,-0x8(%ebp)
   12d7f:	eb 6d                	jmp    12dee <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12d81:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12d85:	75 1f                	jne    12da6 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12d87:	8b 45 10             	mov    0x10(%ebp),%eax
   12d8a:	8d 50 04             	lea    0x4(%eax),%edx
   12d8d:	89 55 10             	mov    %edx,0x10(%ebp)
   12d90:	8b 00                	mov    (%eax),%eax
   12d92:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12d95:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d98:	8d 50 01             	lea    0x1(%eax),%edx
   12d9b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d9e:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12da2:	88 10                	mov    %dl,(%eax)
   12da4:	eb 48                	jmp    12dee <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12da6:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12daa:	75 42                	jne    12dee <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12dac:	8b 45 10             	mov    0x10(%ebp),%eax
   12daf:	8d 50 04             	lea    0x4(%eax),%edx
   12db2:	89 55 10             	mov    %edx,0x10(%ebp)
   12db5:	8b 00                	mov    (%eax),%eax
   12db7:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12dba:	ff 75 f4             	pushl  -0xc(%ebp)
   12dbd:	e8 e7 fb ff ff       	call   129a9 <kstrlen>
   12dc2:	83 c4 04             	add    $0x4,%esp
   12dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12dc8:	eb 17                	jmp    12de1 <kvsprintf+0x132>
                    *curr++ = *str++;
   12dca:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12dcd:	8d 42 01             	lea    0x1(%edx),%eax
   12dd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12dd3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12dd6:	8d 48 01             	lea    0x1(%eax),%ecx
   12dd9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12ddc:	0f b6 12             	movzbl (%edx),%edx
   12ddf:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12de1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12de4:	8d 50 ff             	lea    -0x1(%eax),%edx
   12de7:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12dea:	85 c0                	test   %eax,%eax
   12dec:	75 dc                	jne    12dca <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12dee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12df5:	90                   	nop
    while ((ch = *fmt++)) {
   12df6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12df9:	8d 50 01             	lea    0x1(%eax),%edx
   12dfc:	89 55 0c             	mov    %edx,0xc(%ebp)
   12dff:	0f b6 00             	movzbl (%eax),%eax
   12e02:	88 45 ef             	mov    %al,-0x11(%ebp)
   12e05:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12e09:	0f 85 b8 fe ff ff    	jne    12cc7 <kvsprintf+0x18>
        }
    }
}
   12e0f:	90                   	nop
   12e10:	c9                   	leave  
   12e11:	c3                   	ret    

00012e12 <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   12e12:	55                   	push   %ebp
   12e13:	89 e5                	mov    %esp,%ebp
   12e15:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12e18:	83 ec 08             	sub    $0x8,%esp
   12e1b:	ff 75 14             	pushl  0x14(%ebp)
   12e1e:	68 64 3b 01 00       	push   $0x13b64
   12e23:	e8 f4 02 00 00       	call   1311c <log_printf>
   12e28:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12e2b:	ff 75 10             	pushl  0x10(%ebp)
   12e2e:	ff 75 0c             	pushl  0xc(%ebp)
   12e31:	ff 75 08             	pushl  0x8(%ebp)
   12e34:	68 76 3b 01 00       	push   $0x13b76
   12e39:	e8 de 02 00 00       	call   1311c <log_printf>
   12e3e:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12e41:	e8 a5 fa ff ff       	call   128eb <hlt>
   12e46:	eb f9                	jmp    12e41 <pannic+0x2f>

00012e48 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12e48:	55                   	push   %ebp
   12e49:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12e4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e4e:	8b 40 08             	mov    0x8(%eax),%eax
   12e51:	85 c0                	test   %eax,%eax
   12e53:	0f 94 c0             	sete   %al
   12e56:	0f b6 c0             	movzbl %al,%eax
}
   12e59:	5d                   	pop    %ebp
   12e5a:	c3                   	ret    

00012e5b <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12e5b:	55                   	push   %ebp
   12e5c:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12e5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12e61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12e67:	8b 45 08             	mov    0x8(%ebp),%eax
   12e6a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12e71:	8b 45 08             	mov    0x8(%ebp),%eax
   12e74:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12e7b:	90                   	nop
   12e7c:	5d                   	pop    %ebp
   12e7d:	c3                   	ret    

00012e7e <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12e7e:	55                   	push   %ebp
   12e7f:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12e81:	8b 45 08             	mov    0x8(%ebp),%eax
   12e84:	8b 10                	mov    (%eax),%edx
   12e86:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e89:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e8f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12e95:	ff 75 08             	pushl  0x8(%ebp)
   12e98:	e8 ab ff ff ff       	call   12e48 <list_is_empty>
   12e9d:	83 c4 04             	add    $0x4,%esp
   12ea0:	85 c0                	test   %eax,%eax
   12ea2:	74 15                	je     12eb9 <list_insert_front+0x3b>
        list->last = list->first = node;
   12ea4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12eaa:	89 10                	mov    %edx,(%eax)
   12eac:	8b 45 08             	mov    0x8(%ebp),%eax
   12eaf:	8b 10                	mov    (%eax),%edx
   12eb1:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb4:	89 50 04             	mov    %edx,0x4(%eax)
   12eb7:	eb 12                	jmp    12ecb <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ebc:	8b 00                	mov    (%eax),%eax
   12ebe:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ec1:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12ec3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ec6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ec9:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12ecb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ece:	8b 40 08             	mov    0x8(%eax),%eax
   12ed1:	8d 50 01             	lea    0x1(%eax),%edx
   12ed4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed7:	89 50 08             	mov    %edx,0x8(%eax)
}
   12eda:	90                   	nop
   12edb:	c9                   	leave  
   12edc:	c3                   	ret    

00012edd <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12edd:	55                   	push   %ebp
   12ede:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12ee0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee3:	8b 50 04             	mov    0x4(%eax),%edx
   12ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ee9:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12eeb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12eee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12ef5:	ff 75 08             	pushl  0x8(%ebp)
   12ef8:	e8 4b ff ff ff       	call   12e48 <list_is_empty>
   12efd:	83 c4 04             	add    $0x4,%esp
   12f00:	85 c0                	test   %eax,%eax
   12f02:	74 15                	je     12f19 <list_insert_back+0x3c>
        list->last = list->first = node;
   12f04:	8b 45 08             	mov    0x8(%ebp),%eax
   12f07:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f0a:	89 10                	mov    %edx,(%eax)
   12f0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f0f:	8b 10                	mov    (%eax),%edx
   12f11:	8b 45 08             	mov    0x8(%ebp),%eax
   12f14:	89 50 04             	mov    %edx,0x4(%eax)
   12f17:	eb 15                	jmp    12f2e <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12f19:	8b 45 08             	mov    0x8(%ebp),%eax
   12f1c:	8b 40 04             	mov    0x4(%eax),%eax
   12f1f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f22:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12f25:	8b 45 08             	mov    0x8(%ebp),%eax
   12f28:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f2b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12f2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f31:	8b 40 08             	mov    0x8(%eax),%eax
   12f34:	8d 50 01             	lea    0x1(%eax),%edx
   12f37:	8b 45 08             	mov    0x8(%ebp),%eax
   12f3a:	89 50 08             	mov    %edx,0x8(%eax)
}
   12f3d:	90                   	nop
   12f3e:	c9                   	leave  
   12f3f:	c3                   	ret    

00012f40 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12f40:	55                   	push   %ebp
   12f41:	89 e5                	mov    %esp,%ebp
   12f43:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12f46:	ff 75 08             	pushl  0x8(%ebp)
   12f49:	e8 fa fe ff ff       	call   12e48 <list_is_empty>
   12f4e:	83 c4 04             	add    $0x4,%esp
   12f51:	85 c0                	test   %eax,%eax
   12f53:	74 07                	je     12f5c <list_remove_front+0x1c>
        return (list_node_t*)0;
   12f55:	b8 00 00 00 00       	mov    $0x0,%eax
   12f5a:	eb 5b                	jmp    12fb7 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12f5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12f5f:	8b 00                	mov    (%eax),%eax
   12f61:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12f64:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f67:	8b 50 04             	mov    0x4(%eax),%edx
   12f6a:	8b 45 08             	mov    0x8(%ebp),%eax
   12f6d:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f72:	8b 00                	mov    (%eax),%eax
   12f74:	85 c0                	test   %eax,%eax
   12f76:	75 0c                	jne    12f84 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12f78:	8b 45 08             	mov    0x8(%ebp),%eax
   12f7b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f82:	eb 0c                	jmp    12f90 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12f84:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f87:	8b 40 04             	mov    0x4(%eax),%eax
   12f8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12f90:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f93:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f9d:	8b 50 04             	mov    0x4(%eax),%edx
   12fa0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fa3:	89 10                	mov    %edx,(%eax)
    list->count--;
   12fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa8:	8b 40 08             	mov    0x8(%eax),%eax
   12fab:	8d 50 ff             	lea    -0x1(%eax),%edx
   12fae:	8b 45 08             	mov    0x8(%ebp),%eax
   12fb1:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12fb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12fb7:	c9                   	leave  
   12fb8:	c3                   	ret    

00012fb9 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12fb9:	55                   	push   %ebp
   12fba:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12fbc:	8b 45 08             	mov    0x8(%ebp),%eax
   12fbf:	8b 00                	mov    (%eax),%eax
   12fc1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fc4:	75 0b                	jne    12fd1 <list_remove+0x18>
        list->first = node->next;
   12fc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc9:	8b 50 04             	mov    0x4(%eax),%edx
   12fcc:	8b 45 08             	mov    0x8(%ebp),%eax
   12fcf:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12fd1:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd4:	8b 40 04             	mov    0x4(%eax),%eax
   12fd7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fda:	75 0b                	jne    12fe7 <list_remove+0x2e>
        list->last = node->pre;
   12fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fdf:	8b 10                	mov    (%eax),%edx
   12fe1:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12fe7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fea:	8b 00                	mov    (%eax),%eax
   12fec:	85 c0                	test   %eax,%eax
   12fee:	74 0e                	je     12ffe <list_remove+0x45>
        node->pre->next = node->next;
   12ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ff3:	8b 00                	mov    (%eax),%eax
   12ff5:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ff8:	8b 52 04             	mov    0x4(%edx),%edx
   12ffb:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12ffe:	8b 45 0c             	mov    0xc(%ebp),%eax
   13001:	8b 40 04             	mov    0x4(%eax),%eax
   13004:	85 c0                	test   %eax,%eax
   13006:	74 0d                	je     13015 <list_remove+0x5c>
        node->next->pre = node->pre;
   13008:	8b 45 0c             	mov    0xc(%ebp),%eax
   1300b:	8b 40 04             	mov    0x4(%eax),%eax
   1300e:	8b 55 0c             	mov    0xc(%ebp),%edx
   13011:	8b 12                	mov    (%edx),%edx
   13013:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   13015:	8b 45 0c             	mov    0xc(%ebp),%eax
   13018:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1301f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13022:	8b 50 04             	mov    0x4(%eax),%edx
   13025:	8b 45 0c             	mov    0xc(%ebp),%eax
   13028:	89 10                	mov    %edx,(%eax)
    --list->count;
   1302a:	8b 45 08             	mov    0x8(%ebp),%eax
   1302d:	8b 40 08             	mov    0x8(%eax),%eax
   13030:	8d 50 ff             	lea    -0x1(%eax),%edx
   13033:	8b 45 08             	mov    0x8(%ebp),%eax
   13036:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   13039:	8b 45 0c             	mov    0xc(%ebp),%eax
   1303c:	5d                   	pop    %ebp
   1303d:	c3                   	ret    

0001303e <inb>:
static inline uint8_t inb(uint16_t port) {
   1303e:	55                   	push   %ebp
   1303f:	89 e5                	mov    %esp,%ebp
   13041:	83 ec 14             	sub    $0x14,%esp
   13044:	8b 45 08             	mov    0x8(%ebp),%eax
   13047:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1304b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1304f:	89 c2                	mov    %eax,%edx
   13051:	ec                   	in     (%dx),%al
   13052:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   13055:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13059:	c9                   	leave  
   1305a:	c3                   	ret    

0001305b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1305b:	55                   	push   %ebp
   1305c:	89 e5                	mov    %esp,%ebp
   1305e:	83 ec 08             	sub    $0x8,%esp
   13061:	8b 55 08             	mov    0x8(%ebp),%edx
   13064:	8b 45 0c             	mov    0xc(%ebp),%eax
   13067:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1306b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1306e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13072:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13076:	ee                   	out    %al,(%dx)
}
   13077:	90                   	nop
   13078:	c9                   	leave  
   13079:	c3                   	ret    

0001307a <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   1307a:	55                   	push   %ebp
   1307b:	89 e5                	mov    %esp,%ebp
   1307d:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   13080:	83 ec 08             	sub    $0x8,%esp
   13083:	68 b4 3b 01 00       	push   $0x13bb4
   13088:	68 60 10 02 00       	push   $0x21060
   1308d:	e8 41 f3 ff ff       	call   123d3 <mutex_init>
   13092:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   13095:	83 ec 08             	sub    $0x8,%esp
   13098:	6a 00                	push   $0x0
   1309a:	68 f9 03 00 00       	push   $0x3f9
   1309f:	e8 b7 ff ff ff       	call   1305b <outb>
   130a4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   130a7:	83 ec 08             	sub    $0x8,%esp
   130aa:	68 80 00 00 00       	push   $0x80
   130af:	68 fb 03 00 00       	push   $0x3fb
   130b4:	e8 a2 ff ff ff       	call   1305b <outb>
   130b9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   130bc:	83 ec 08             	sub    $0x8,%esp
   130bf:	6a 03                	push   $0x3
   130c1:	68 f8 03 00 00       	push   $0x3f8
   130c6:	e8 90 ff ff ff       	call   1305b <outb>
   130cb:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   130ce:	83 ec 08             	sub    $0x8,%esp
   130d1:	6a 00                	push   $0x0
   130d3:	68 f9 03 00 00       	push   $0x3f9
   130d8:	e8 7e ff ff ff       	call   1305b <outb>
   130dd:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   130e0:	83 ec 08             	sub    $0x8,%esp
   130e3:	6a 03                	push   $0x3
   130e5:	68 fb 03 00 00       	push   $0x3fb
   130ea:	e8 6c ff ff ff       	call   1305b <outb>
   130ef:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   130f2:	83 ec 08             	sub    $0x8,%esp
   130f5:	68 c7 00 00 00       	push   $0xc7
   130fa:	68 fa 03 00 00       	push   $0x3fa
   130ff:	e8 57 ff ff ff       	call   1305b <outb>
   13104:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   13107:	83 ec 08             	sub    $0x8,%esp
   1310a:	6a 0f                	push   $0xf
   1310c:	68 fc 03 00 00       	push   $0x3fc
   13111:	e8 45 ff ff ff       	call   1305b <outb>
   13116:	83 c4 10             	add    $0x10,%esp
}
   13119:	90                   	nop
   1311a:	c9                   	leave  
   1311b:	c3                   	ret    

0001311c <log_printf>:


void log_printf(const char* fmt, ...) {
   1311c:	55                   	push   %ebp
   1311d:	89 e5                	mov    %esp,%ebp
   1311f:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   13125:	83 ec 04             	sub    $0x4,%esp
   13128:	68 80 00 00 00       	push   $0x80
   1312d:	6a 00                	push   $0x0
   1312f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13135:	50                   	push   %eax
   13136:	e8 72 f9 ff ff       	call   12aad <kmemset>
   1313b:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   1313e:	8d 45 0c             	lea    0xc(%ebp),%eax
   13141:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   13147:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1314d:	83 ec 04             	sub    $0x4,%esp
   13150:	50                   	push   %eax
   13151:	ff 75 08             	pushl  0x8(%ebp)
   13154:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1315a:	50                   	push   %eax
   1315b:	e8 4f fb ff ff       	call   12caf <kvsprintf>
   13160:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   13163:	83 ec 0c             	sub    $0xc,%esp
   13166:	68 60 10 02 00       	push   $0x21060
   1316b:	e8 a4 f2 ff ff       	call   12414 <mutex_acquire>
   13170:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   13173:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13179:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   1317c:	eb 3b                	jmp    131b9 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   1317e:	90                   	nop
   1317f:	83 ec 0c             	sub    $0xc,%esp
   13182:	68 fd 03 00 00       	push   $0x3fd
   13187:	e8 b2 fe ff ff       	call   1303e <inb>
   1318c:	83 c4 10             	add    $0x10,%esp
   1318f:	0f b6 c0             	movzbl %al,%eax
   13192:	83 e0 40             	and    $0x40,%eax
   13195:	85 c0                	test   %eax,%eax
   13197:	74 e6                	je     1317f <log_printf+0x63>
        outb(COM1_PORT, *p++);
   13199:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1319c:	8d 50 01             	lea    0x1(%eax),%edx
   1319f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   131a2:	0f b6 00             	movzbl (%eax),%eax
   131a5:	0f b6 c0             	movzbl %al,%eax
   131a8:	83 ec 08             	sub    $0x8,%esp
   131ab:	50                   	push   %eax
   131ac:	68 f8 03 00 00       	push   $0x3f8
   131b1:	e8 a5 fe ff ff       	call   1305b <outb>
   131b6:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   131b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131bc:	0f b6 00             	movzbl (%eax),%eax
   131bf:	84 c0                	test   %al,%al
   131c1:	75 bb                	jne    1317e <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   131c3:	83 ec 08             	sub    $0x8,%esp
   131c6:	6a 0d                	push   $0xd
   131c8:	68 f8 03 00 00       	push   $0x3f8
   131cd:	e8 89 fe ff ff       	call   1305b <outb>
   131d2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   131d5:	83 ec 08             	sub    $0x8,%esp
   131d8:	6a 0a                	push   $0xa
   131da:	68 f8 03 00 00       	push   $0x3f8
   131df:	e8 77 fe ff ff       	call   1305b <outb>
   131e4:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   131e7:	83 ec 0c             	sub    $0xc,%esp
   131ea:	68 60 10 02 00       	push   $0x21060
   131ef:	e8 ae f2 ff ff       	call   124a2 <mutex_release>
   131f4:	83 c4 10             	add    $0x10,%esp
   131f7:	90                   	nop
   131f8:	c9                   	leave  
   131f9:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	# mov %ax, %ss
	mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

8000000b:	e9 b9 00 00 00       	jmp    800000c9 <first_task_main>

80000010 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:
 
static inline void msleep(int ms) {
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <syscall>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
        return;
80000083:	90                   	nop
}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:


static inline int getpid(void) {
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return syscall(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <syscall>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:


static inline void print_msg(char* fmt, int arg) {
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_print_msg;
800000a7:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    syscall(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <syscall>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void) {
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000cf:	e8 b2 ff ff ff       	call   80000086 <getpid>
800000d4:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (1) {
        // log_printf("first task.");

    print_msg("pid = %d", pid);
800000d7:	ff 75 fc             	pushl  -0x4(%ebp)
800000da:	68 f6 00 00 80       	push   $0x800000f6
800000df:	e8 bd ff ff ff       	call   800000a1 <print_msg>
800000e4:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
800000e7:	68 e8 03 00 00       	push   $0x3e8
800000ec:	e8 6b ff ff ff       	call   8000005c <msleep>
800000f1:	83 c4 04             	add    $0x4,%esp
    print_msg("pid = %d", pid);
800000f4:	eb e1                	jmp    800000d7 <first_task_main+0xe>
800000f6:	70 69                	jo     80000161 <first_task_main+0x98>
800000f8:	64 20 3d 20 25 64 00 	and    %bh,%fs:0x642520
