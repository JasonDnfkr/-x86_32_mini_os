
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000033d4 memsz 0x000033d4 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006f40 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001af40 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d35  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000069c  00012d38  00012d38  00003d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005f40  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000046  80000000  0001af40  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001cba  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044f7  00000000  00000000  00007d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001220  00000000  00000000  0000c1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011e3  00000000  00000000  0000d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000e7db  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000012f4  00000000  00000000  0000e7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012d38 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010368 l     F .text	0000005d addr_alloc_init
000103c5 l     F .text	00000067 addr_alloc_page
0001042c l     F .text	00000062 addr_free_page
0001048e l     F .text	00000066 show_mem_info
000104f4 l     F .text	0000003c total_mem_size
00010530 l     F .text	000000a0 test_alloc
00012e6c l     O .rodata	00000012 __func__.2208
00014000 l     O .data	00000040 kernel_map.2220
00012e80 l     O .rodata	0000000c __func__.2250
00000000 l    df *ABS*	00000000 task.c
00010a30 l     F .text	00000019 list_node_init
00010a49 l     F .text	0000000b list_node_next
00010a54 l     F .text	0000000b list_size
00010a5f l     F .text	0000000a list_first
00010a69 l     F .text	0000000c write_cr3
00010a75 l     F .text	00000017 write_tr
00010a8c l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000198 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010a9d l     F .text	00000140 tss_init
00012f28 l     O .rodata	0000000a __func__.2240
00010cec l     F .text	00000005 idle_task_entry
00012f34 l     O .rodata	00000010 __func__.2266
00000000 l    df *ABS*	00000000 cpu.c
0001114e l     F .text	00000028 lgdt
00011176 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
000113ac l     F .text	0000001d inb
000113c9 l     F .text	0000001f outb
000113e8 l     F .text	00000007 cli
000113ef l     F .text	00000007 sti
000113f6 l     F .text	00000028 lidt
0001141e l     F .text	00000007 hlt
00011425 l     F .text	00000010 read_eflags
00011435 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
00011440 l     F .text	000000ca dump_core_regs
0001150a l     F .text	0000003e do_default_handler
00011794 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011b98 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011bdf l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011c57 l     F .text	0000000b list_size
00011c62 l     F .text	0000000a list_first
00011c6c l     F .text	0000000b list_last
00013360 l     O .rodata	0000000c __func__.2194
00018e20 l     O .bss	000000b4 first_task
0001336c l     O .rodata	00000013 __func__.2227
00000000 l    df *ABS*	00000000 mutex.c
00011f03 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
0001209d l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012426 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012983 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012b79 l     F .text	0000001d inb
00012b96 l     F .text	0000001f outb
00018ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
00011778 g     F .text	0000001c do_handler_control_protection_exception
0001231e g     F .text	0000003a bitmap_get_bit
00010f07 g     F .text	0000000a task_current
00011580 g     F .text	0000001c do_handler_debug_exception
0001175c g     F .text	0000001c do_handler_virtualization_exception
00011b39 g     F .text	0000000b irq_enable_global
0001167c g     F .text	0000001c do_handler_segment_not_present
00010e65 g     F .text	00000034 task_set_ready
00012474 g     F .text	00000070 kstrncpy
00012358 g     F .text	0000001b bitmap_is_set
00011ccb g     F .text	0000019c link_test
0001159c g     F .text	0000001c do_handler_nmi_interrupt
000112c7 g     F .text	00000023 cpu_init
00012bb5 g     F .text	000000a2 log_init
00011ea8 g     F .text	0000005b init_main
000125e8 g     F .text	00000041 kmemset
00011373 g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
00011a1c g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
000124e4 g     F .text	0000003b kstrlen
000115d4 g     F .text	0000001c do_handler_overflow
00010680 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
000116b4 g     F .text	0000001c do_handler_general_protection
000121b8 g     F .text	00000029 sem_count
80000012 g     F .first_task	00000028 first_task_main
000115f0 g     F .text	0000001c do_handler_bound_range_exceed
0001224a g     F .text	000000d4 bitmap_set_bit
00011644 g     F .text	0000001c do_handler_double_fault
000116d0 g     F .text	0000001c do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011b44 g     F .text	0000002b pic_send_eoi
00010e5b g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107d7 g     F .text	00000085 memory_create_uvm
000120cb g     F .text	0000006b sem_wait
00010a0e g     F .text	00000022 memory_alloc_page_for
00011bb7 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
000129b9 g     F .text	0000005f list_insert_front
00018f40 g     O .bss	00002000 stack
000110f7 g     F .text	00000057 sys_sleep
000127ea g     F .text	00000163 kvsprintf
0001af40 g       *ABS*	00000000 s_first_task
00010940 g     F .text	000000ce memory_alloc_for_page_dir
00012136 g     F .text	00000082 sem_notify
0001160c g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011c3f g     F .text	00000018 timer_init
00010d9f g     F .text	000000bc task_first_init
00011724 g     F .text	0000001c do_handler_machine_check
00011628 g     F .text	0000001c do_handler_device_not_found
000110d7 g     F .text	00000020 task_set_wakeup
00012a18 g     F .text	00000063 list_insert_back
00011b2e g     F .text	0000000b irq_disable_global
00010f11 g     F .text	00000061 sys_sched_yield
0001af86 g       *ABS*	00000000 mem_free_start
00011c77 g     F .text	00000054 kernel_init
000120a8 g     F .text	00000023 sem_init
000127c6 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00010e99 g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001af40 g       .bss	00000000 e_data
00012687 g     F .text	0000013f kitoa
0001242d g     F .text	00000047 kstrcpy
0001251f g     F .text	0000007a kstrncmp
00011708 g     F .text	0000001c do_handler_aligment_check
00012629 g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
00011660 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001af86 g       *ABS*	00000000 e_first_task
000110a6 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
000119e7 g     F .text	00000035 irq_install
0001125a g     F .text	0000006d init_gdt
00011b6f g     F .text	00000018 irq_enter_protection
00011f0e g     F .text	00000041 mutex_init
00011aa7 g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
00011564 g     F .text	0000001c do_handler_divide_error
000121e1 g     F .text	00000016 bitmap_byte_count
00010f72 g     F .text	0000005b task_dispatch
00011e67 g     F .text	00000041 move_to_first_task
00010ec4 g     F .text	00000043 task_next_run
00010707 g     F .text	000000d0 create_kernel_table
00012996 g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
00011548 g     F .text	0000001c do_handler_unknown
00010cce g     F .text	0000001e task_switch_from_to
00011827 g     F .text	000001c0 irq_init
00011b87 g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00011190 g     F .text	00000083 segment_desc_set
000133d4 g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
000121f7 g     F .text	00000053 bitmap_init
00011740 g     F .text	0000001c do_handler_simd_floating_point_exception
00012599 g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
00012373 g     F .text	000000b3 bitmap_alloc_nbits
00010cf1 g     F .text	000000ae task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010fcd g     F .text	000000d9 task_time_tick
0001085c g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
0001294d g     F .text	00000036 pannic
00011698 g     F .text	0000001c do_handler_stack_segment_fault
000115b8 g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
000116ec g     F .text	0000001c do_handler_floating_point_error
00012c57 g     F .text	000000de log_printf
00010bdd g     F .text	000000f1 task_init
00012a7b g     F .text	00000079 list_remove_front
000112fe g     F .text	00000075 gdt_alloc_desc
00011fdd g     F .text	000000c0 mutex_release
00012af4 g     F .text	00000085 list_remove
000112ea g     F .text	00000014 swtch_to_tss
00011213 g     F .text	00000047 gate_desc_set
00011f4f g     F .text	0000008e mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105d0 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 6b 1c 00 00       	call   11c77 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 af 01 00       	mov    $0x1af40,%esp
    jmp init_main
   10026:	e9 7d 1e 00 00       	jmp    11ea8 <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 0c 15 00 00       	call   11548 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 09 15 00 00       	call   11564 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 06 15 00 00       	call   11580 <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 03 15 00 00       	call   1159c <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 00 15 00 00       	call   115b8 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 fd 14 00 00       	call   115d4 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 fa 14 00 00       	call   115f0 <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 f7 14 00 00       	call   1160c <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 f4 14 00 00       	call   11628 <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 f3 14 00 00       	call   11644 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 f2 14 00 00       	call   11660 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 f1 14 00 00       	call   1167c <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 ee 14 00 00       	call   11698 <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 ed 14 00 00       	call   116b4 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 ec 14 00 00       	call   116d0 <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 e9 14 00 00       	call   116ec <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 e8 14 00 00       	call   11708 <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 e5 14 00 00       	call   11724 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 e2 14 00 00       	call   11740 <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 df 14 00 00       	call   1175c <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 de 14 00 00       	call   11778 <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 fe 18 00 00       	call   11bb7 <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <mmu_set_page_dir>:
 */
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}

static inline void mmu_set_page_dir(uint32_t paddr) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1035a:	ff 75 08             	pushl  0x8(%ebp)
   1035d:	e8 9e ff ff ff       	call   10300 <write_cr3>
   10362:	83 c4 04             	add    $0x4,%esp
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	83 ec 08             	sub    $0x8,%esp
   10374:	68 38 2d 01 00       	push   $0x12d38
   10379:	50                   	push   %eax
   1037a:	e8 8f 1b 00 00       	call   11f0e <mutex_init>
   1037f:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	8b 55 10             	mov    0x10(%ebp),%edx
   10388:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	8b 55 14             	mov    0x14(%ebp),%edx
   10391:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 55 18             	mov    0x18(%ebp),%edx
   1039a:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 40 60             	mov    0x60(%eax),%eax
   103a3:	ba 00 00 00 00       	mov    $0x0,%edx
   103a8:	f7 75 18             	divl   0x18(%ebp)
   103ab:	89 c2                	mov    %eax,%edx
   103ad:	8b 45 08             	mov    0x8(%ebp),%eax
   103b0:	83 c0 54             	add    $0x54,%eax
   103b3:	6a 00                	push   $0x0
   103b5:	52                   	push   %edx
   103b6:	ff 75 0c             	pushl  0xc(%ebp)
   103b9:	50                   	push   %eax
   103ba:	e8 38 1e 00 00       	call   121f7 <bitmap_init>
   103bf:	83 c4 10             	add    $0x10,%esp
}
   103c2:	90                   	nop
   103c3:	c9                   	leave  
   103c4:	c3                   	ret    

000103c5 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
   103c8:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	83 ec 0c             	sub    $0xc,%esp
   103d8:	50                   	push   %eax
   103d9:	e8 71 1b 00 00       	call   11f4f <mutex_acquire>
   103de:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	83 c0 54             	add    $0x54,%eax
   103e7:	83 ec 04             	sub    $0x4,%esp
   103ea:	ff 75 0c             	pushl  0xc(%ebp)
   103ed:	6a 00                	push   $0x0
   103ef:	50                   	push   %eax
   103f0:	e8 7e 1f 00 00       	call   12373 <bitmap_alloc_nbits>
   103f5:	83 c4 10             	add    $0x10,%esp
   103f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103ff:	78 17                	js     10418 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	8b 50 5c             	mov    0x5c(%eax),%edx
   10407:	8b 45 08             	mov    0x8(%ebp),%eax
   1040a:	8b 48 64             	mov    0x64(%eax),%ecx
   1040d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10410:	0f af c1             	imul   %ecx,%eax
   10413:	01 d0                	add    %edx,%eax
   10415:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10418:	8b 45 08             	mov    0x8(%ebp),%eax
   1041b:	83 ec 0c             	sub    $0xc,%esp
   1041e:	50                   	push   %eax
   1041f:	e8 b9 1b 00 00       	call   11fdd <mutex_release>
   10424:	83 c4 10             	add    $0x10,%esp

    return addr;
   10427:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1042a:	c9                   	leave  
   1042b:	c3                   	ret    

0001042c <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   1042c:	55                   	push   %ebp
   1042d:	89 e5                	mov    %esp,%ebp
   1042f:	53                   	push   %ebx
   10430:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10433:	8b 45 08             	mov    0x8(%ebp),%eax
   10436:	83 ec 0c             	sub    $0xc,%esp
   10439:	50                   	push   %eax
   1043a:	e8 10 1b 00 00       	call   11f4f <mutex_acquire>
   1043f:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10442:	8b 45 08             	mov    0x8(%ebp),%eax
   10445:	8b 40 5c             	mov    0x5c(%eax),%eax
   10448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044b:	89 d1                	mov    %edx,%ecx
   1044d:	29 c1                	sub    %eax,%ecx
   1044f:	8b 45 08             	mov    0x8(%ebp),%eax
   10452:	8b 58 64             	mov    0x64(%eax),%ebx
   10455:	89 c8                	mov    %ecx,%eax
   10457:	ba 00 00 00 00       	mov    $0x0,%edx
   1045c:	f7 f3                	div    %ebx
   1045e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10461:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10464:	8b 55 08             	mov    0x8(%ebp),%edx
   10467:	83 c2 54             	add    $0x54,%edx
   1046a:	6a 00                	push   $0x0
   1046c:	ff 75 10             	pushl  0x10(%ebp)
   1046f:	50                   	push   %eax
   10470:	52                   	push   %edx
   10471:	e8 d4 1d 00 00       	call   1224a <bitmap_set_bit>
   10476:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	83 ec 0c             	sub    $0xc,%esp
   1047f:	50                   	push   %eax
   10480:	e8 58 1b 00 00       	call   11fdd <mutex_release>
   10485:	83 c4 10             	add    $0x10,%esp
}
   10488:	90                   	nop
   10489:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1048c:	c9                   	leave  
   1048d:	c3                   	ret    

0001048e <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1048e:	55                   	push   %ebp
   1048f:	89 e5                	mov    %esp,%ebp
   10491:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10494:	83 ec 0c             	sub    $0xc,%esp
   10497:	68 45 2d 01 00       	push   $0x12d45
   1049c:	e8 b6 27 00 00       	call   12c57 <log_printf>
   104a1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104ab:	eb 29                	jmp    104d6 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104ad:	8b 45 08             	mov    0x8(%ebp),%eax
   104b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104b3:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104bd:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c0:	52                   	push   %edx
   104c1:	50                   	push   %eax
   104c2:	ff 75 f4             	pushl  -0xc(%ebp)
   104c5:	68 51 2d 01 00       	push   $0x12d51
   104ca:	e8 88 27 00 00       	call   12c57 <log_printf>
   104cf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d6:	8b 45 08             	mov    0x8(%ebp),%eax
   104d9:	8b 40 50             	mov    0x50(%eax),%eax
   104dc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104df:	7c cc                	jl     104ad <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	68 5f 2d 01 00       	push   $0x12d5f
   104e9:	e8 69 27 00 00       	call   12c57 <log_printf>
   104ee:	83 c4 10             	add    $0x10,%esp
}
   104f1:	90                   	nop
   104f2:	c9                   	leave  
   104f3:	c3                   	ret    

000104f4 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   104f4:	55                   	push   %ebp
   104f5:	89 e5                	mov    %esp,%ebp
   104f7:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10501:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10508:	eb 16                	jmp    10520 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10510:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10514:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10517:	01 d0                	add    %edx,%eax
   10519:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1051c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 40 50             	mov    0x50(%eax),%eax
   10526:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10529:	7c df                	jl     1050a <total_mem_size+0x16>
    }
    return mem_size;
   1052b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1052e:	c9                   	leave  
   1052f:	c3                   	ret    

00010530 <test_alloc>:


static void test_alloc(void) {
   10530:	55                   	push   %ebp
   10531:	89 e5                	mov    %esp,%ebp
   10533:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10539:	83 ec 0c             	sub    $0xc,%esp
   1053c:	68 00 10 00 00       	push   $0x1000
   10541:	68 00 00 04 00       	push   $0x40000
   10546:	68 00 10 00 00       	push   $0x1000
   1054b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10551:	50                   	push   %eax
   10552:	8d 45 80             	lea    -0x80(%ebp),%eax
   10555:	50                   	push   %eax
   10556:	e8 0d fe ff ff       	call   10368 <addr_alloc_init>
   1055b:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   1055e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10565:	eb 2b                	jmp    10592 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   10567:	83 ec 08             	sub    $0x8,%esp
   1056a:	6a 02                	push   $0x2
   1056c:	8d 45 80             	lea    -0x80(%ebp),%eax
   1056f:	50                   	push   %eax
   10570:	e8 50 fe ff ff       	call   103c5 <addr_alloc_page>
   10575:	83 c4 10             	add    $0x10,%esp
   10578:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   1057b:	83 ec 08             	sub    $0x8,%esp
   1057e:	ff 75 e8             	pushl  -0x18(%ebp)
   10581:	68 61 2d 01 00       	push   $0x12d61
   10586:	e8 cc 26 00 00       	call   12c57 <log_printf>
   1058b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   1058e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10592:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10596:	7e cf                	jle    10567 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   10598:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   1059f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105a6:	eb 1f                	jmp    105c7 <test_alloc+0x97>
        addr += 4096 * 2;
   105a8:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105af:	83 ec 04             	sub    $0x4,%esp
   105b2:	6a 02                	push   $0x2
   105b4:	ff 75 f0             	pushl  -0x10(%ebp)
   105b7:	8d 45 80             	lea    -0x80(%ebp),%eax
   105ba:	50                   	push   %eax
   105bb:	e8 6c fe ff ff       	call   1042c <addr_free_page>
   105c0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105c3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105c7:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105cb:	7e db                	jle    105a8 <test_alloc+0x78>
    }
}
   105cd:	90                   	nop
   105ce:	c9                   	leave  
   105cf:	c3                   	ret    

000105d0 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105d0:	55                   	push   %ebp
   105d1:	89 e5                	mov    %esp,%ebp
   105d3:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105d6:	ff 75 0c             	pushl  0xc(%ebp)
   105d9:	e8 2e fd ff ff       	call   1030c <pde_index>
   105de:	83 c4 04             	add    $0x4,%esp
   105e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	01 d0                	add    %edx,%eax
   105ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   105f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f3:	0f b6 00             	movzbl (%eax),%eax
   105f6:	83 e0 01             	and    $0x1,%eax
   105f9:	84 c0                	test   %al,%al
   105fb:	74 10                	je     1060d <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   105fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10600:	e8 1b fd ff ff       	call   10320 <pde_paddr>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1060b:	eb 57                	jmp    10664 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1060d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10611:	75 07                	jne    1061a <find_pte+0x4a>
            return (pte_t*)0;
   10613:	b8 00 00 00 00       	mov    $0x0,%eax
   10618:	eb 64                	jmp    1067e <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1061a:	83 ec 08             	sub    $0x8,%esp
   1061d:	6a 01                	push   $0x1
   1061f:	68 00 50 01 00       	push   $0x15000
   10624:	e8 9c fd ff ff       	call   103c5 <addr_alloc_page>
   10629:	83 c4 10             	add    $0x10,%esp
   1062c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1062f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10633:	75 07                	jne    1063c <find_pte+0x6c>
            return (pte_t*)0;
   10635:	b8 00 00 00 00       	mov    $0x0,%eax
   1063a:	eb 42                	jmp    1067e <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   1063c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1063f:	83 c8 07             	or     $0x7,%eax
   10642:	89 c2                	mov    %eax,%edx
   10644:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10647:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10649:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1064c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1064f:	83 ec 04             	sub    $0x4,%esp
   10652:	68 00 10 00 00       	push   $0x1000
   10657:	6a 00                	push   $0x0
   10659:	ff 75 f4             	pushl  -0xc(%ebp)
   1065c:	e8 87 1f 00 00       	call   125e8 <kmemset>
   10661:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   10664:	83 ec 0c             	sub    $0xc,%esp
   10667:	ff 75 0c             	pushl  0xc(%ebp)
   1066a:	e8 d8 fc ff ff       	call   10347 <pte_index>
   1066f:	83 c4 10             	add    $0x10,%esp
   10672:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067c:	01 d0                	add    %edx,%eax
}
   1067e:	c9                   	leave  
   1067f:	c3                   	ret    

00010680 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   10680:	55                   	push   %ebp
   10681:	89 e5                	mov    %esp,%ebp
   10683:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068d:	eb 6e                	jmp    106fd <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   1068f:	83 ec 04             	sub    $0x4,%esp
   10692:	6a 01                	push   $0x1
   10694:	ff 75 0c             	pushl  0xc(%ebp)
   10697:	ff 75 08             	pushl  0x8(%ebp)
   1069a:	e8 31 ff ff ff       	call   105d0 <find_pte>
   1069f:	83 c4 10             	add    $0x10,%esp
   106a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106a9:	75 07                	jne    106b2 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106b0:	eb 53                	jmp    10705 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	0f b6 00             	movzbl (%eax),%eax
   106b8:	83 e0 01             	and    $0x1,%eax
   106bb:	84 c0                	test   %al,%al
   106bd:	74 1c                	je     106db <memory_create_map+0x5b>
   106bf:	68 71 2d 01 00       	push   $0x12d71
   106c4:	68 6c 2e 01 00       	push   $0x12e6c
   106c9:	68 a2 00 00 00       	push   $0xa2
   106ce:	68 84 2d 01 00       	push   $0x12d84
   106d3:	e8 75 22 00 00       	call   1294d <pannic>
   106d8:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   106db:	8b 45 10             	mov    0x10(%ebp),%eax
   106de:	0b 45 18             	or     0x18(%ebp),%eax
   106e1:	83 c8 01             	or     $0x1,%eax
   106e4:	89 c2                	mov    %eax,%edx
   106e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e9:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   106eb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106f2:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10700:	3b 45 14             	cmp    0x14(%ebp),%eax
   10703:	7c 8a                	jl     1068f <memory_create_map+0xf>
    }
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <create_kernel_table>:


void create_kernel_table(void) {
   10707:	55                   	push   %ebp
   10708:	89 e5                	mov    %esp,%ebp
   1070a:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1070d:	83 ec 04             	sub    $0x4,%esp
   10710:	68 00 10 00 00       	push   $0x1000
   10715:	6a 00                	push   $0x0
   10717:	68 00 60 01 00       	push   $0x16000
   1071c:	e8 c7 1e 00 00       	call   125e8 <kmemset>
   10721:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1072b:	e9 98 00 00 00       	jmp    107c8 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10730:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10733:	c1 e0 04             	shl    $0x4,%eax
   10736:	05 00 40 01 00       	add    $0x14000,%eax
   1073b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1073e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10741:	8b 00                	mov    (%eax),%eax
   10743:	83 ec 08             	sub    $0x8,%esp
   10746:	68 00 10 00 00       	push   $0x1000
   1074b:	50                   	push   %eax
   1074c:	e8 a2 fb ff ff       	call   102f3 <down2>
   10751:	83 c4 10             	add    $0x10,%esp
   10754:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10757:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1075a:	8b 40 04             	mov    0x4(%eax),%eax
   1075d:	83 ec 08             	sub    $0x8,%esp
   10760:	68 00 10 00 00       	push   $0x1000
   10765:	50                   	push   %eax
   10766:	e8 71 fb ff ff       	call   102dc <up2>
   1076b:	83 c4 10             	add    $0x10,%esp
   1076e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10771:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10774:	8b 40 08             	mov    0x8(%eax),%eax
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	68 00 10 00 00       	push   $0x1000
   1077f:	50                   	push   %eax
   10780:	e8 6e fb ff ff       	call   102f3 <down2>
   10785:	83 c4 10             	add    $0x10,%esp
   10788:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   1078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1078e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10791:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   10797:	85 c0                	test   %eax,%eax
   10799:	0f 48 c2             	cmovs  %edx,%eax
   1079c:	c1 f8 0c             	sar    $0xc,%eax
   1079f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a5:	8b 48 0c             	mov    0xc(%eax),%ecx
   107a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ae:	83 ec 0c             	sub    $0xc,%esp
   107b1:	51                   	push   %ecx
   107b2:	ff 75 e0             	pushl  -0x20(%ebp)
   107b5:	52                   	push   %edx
   107b6:	50                   	push   %eax
   107b7:	68 00 60 01 00       	push   $0x16000
   107bc:	e8 bf fe ff ff       	call   10680 <memory_create_map>
   107c1:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107cb:	83 f8 03             	cmp    $0x3,%eax
   107ce:	0f 86 5c ff ff ff    	jbe    10730 <create_kernel_table+0x29>
    }
}
   107d4:	90                   	nop
   107d5:	c9                   	leave  
   107d6:	c3                   	ret    

000107d7 <memory_create_uvm>:

// 创建用户页表
uint32_t memory_create_uvm(void) {
   107d7:	55                   	push   %ebp
   107d8:	89 e5                	mov    %esp,%ebp
   107da:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	6a 01                	push   $0x1
   107e2:	68 00 50 01 00       	push   $0x15000
   107e7:	e8 d9 fb ff ff       	call   103c5 <addr_alloc_page>
   107ec:	83 c4 10             	add    $0x10,%esp
   107ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107f6:	75 07                	jne    107ff <memory_create_uvm+0x28>
        return 0;
   107f8:	b8 00 00 00 00       	mov    $0x0,%eax
   107fd:	eb 5b                	jmp    1085a <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   107ff:	83 ec 04             	sub    $0x4,%esp
   10802:	68 00 10 00 00       	push   $0x1000
   10807:	6a 00                	push   $0x0
   10809:	ff 75 f0             	pushl  -0x10(%ebp)
   1080c:	e8 d7 1d 00 00       	call   125e8 <kmemset>
   10811:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10814:	83 ec 0c             	sub    $0xc,%esp
   10817:	68 00 00 00 80       	push   $0x80000000
   1081c:	e8 eb fa ff ff       	call   1030c <pde_index>
   10821:	83 c4 10             	add    $0x10,%esp
   10824:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10827:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1082e:	eb 1f                	jmp    1084f <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10830:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10833:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1083a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083d:	01 c2                	add    %eax,%edx
   1083f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10842:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10849:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   1084b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1084f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10852:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10855:	77 d9                	ja     10830 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10857:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1085a:	c9                   	leave  
   1085b:	c3                   	ret    

0001085c <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   1085c:	55                   	push   %ebp
   1085d:	89 e5                	mov    %esp,%ebp
   1085f:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10862:	83 ec 0c             	sub    $0xc,%esp
   10865:	68 cb 2d 01 00       	push   $0x12dcb
   1086a:	e8 e8 23 00 00       	call   12c57 <log_printf>
   1086f:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10872:	83 ec 0c             	sub    $0xc,%esp
   10875:	ff 75 08             	pushl  0x8(%ebp)
   10878:	e8 11 fc ff ff       	call   1048e <show_mem_info>
   1087d:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   10880:	c7 45 f4 86 af 01 00 	movl   $0x1af86,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10887:	83 ec 0c             	sub    $0xc,%esp
   1088a:	ff 75 08             	pushl  0x8(%ebp)
   1088d:	e8 62 fc ff ff       	call   104f4 <total_mem_size>
   10892:	83 c4 10             	add    $0x10,%esp
   10895:	2d 00 00 10 00       	sub    $0x100000,%eax
   1089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   1089d:	83 ec 08             	sub    $0x8,%esp
   108a0:	68 00 10 00 00       	push   $0x1000
   108a5:	ff 75 f0             	pushl  -0x10(%ebp)
   108a8:	e8 46 fa ff ff       	call   102f3 <down2>
   108ad:	83 c4 10             	add    $0x10,%esp
   108b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108b3:	83 ec 04             	sub    $0x4,%esp
   108b6:	ff 75 f0             	pushl  -0x10(%ebp)
   108b9:	68 00 00 10 00       	push   $0x100000
   108be:	68 d5 2d 01 00       	push   $0x12dd5
   108c3:	e8 8f 23 00 00       	call   12c57 <log_printf>
   108c8:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108cb:	83 ec 0c             	sub    $0xc,%esp
   108ce:	68 00 10 00 00       	push   $0x1000
   108d3:	ff 75 f0             	pushl  -0x10(%ebp)
   108d6:	68 00 00 10 00       	push   $0x100000
   108db:	ff 75 f4             	pushl  -0xc(%ebp)
   108de:	68 00 50 01 00       	push   $0x15000
   108e3:	e8 80 fa ff ff       	call   10368 <addr_alloc_init>
   108e8:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   108eb:	a1 60 50 01 00       	mov    0x15060,%eax
   108f0:	c1 e8 0c             	shr    $0xc,%eax
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	50                   	push   %eax
   108f7:	e8 e5 18 00 00       	call   121e1 <bitmap_byte_count>
   108fc:	83 c4 10             	add    $0x10,%esp
   108ff:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10902:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10909:	76 1c                	jbe    10927 <memory_init+0xcb>
   1090b:	68 f0 2d 01 00       	push   $0x12df0
   10910:	68 80 2e 01 00       	push   $0x12e80
   10915:	68 fa 00 00 00       	push   $0xfa
   1091a:	68 84 2d 01 00       	push   $0x12d84
   1091f:	e8 29 20 00 00       	call   1294d <pannic>
   10924:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10927:	e8 db fd ff ff       	call   10707 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1092c:	b8 00 60 01 00       	mov    $0x16000,%eax
   10931:	83 ec 0c             	sub    $0xc,%esp
   10934:	50                   	push   %eax
   10935:	e8 1d fa ff ff       	call   10357 <mmu_set_page_dir>
   1093a:	83 c4 10             	add    $0x10,%esp
}
   1093d:	90                   	nop
   1093e:	c9                   	leave  
   1093f:	c3                   	ret    

00010940 <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10940:	55                   	push   %ebp
   10941:	89 e5                	mov    %esp,%ebp
   10943:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10946:	8b 45 0c             	mov    0xc(%ebp),%eax
   10949:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   1094c:	68 00 10 00 00       	push   $0x1000
   10951:	ff 75 10             	pushl  0x10(%ebp)
   10954:	e8 83 f9 ff ff       	call   102dc <up2>
   10959:	83 c4 08             	add    $0x8,%esp
   1095c:	c1 e8 0c             	shr    $0xc,%eax
   1095f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   10962:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10969:	e9 8d 00 00 00       	jmp    109fb <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   1096e:	83 ec 08             	sub    $0x8,%esp
   10971:	6a 01                	push   $0x1
   10973:	68 00 50 01 00       	push   $0x15000
   10978:	e8 48 fa ff ff       	call   103c5 <addr_alloc_page>
   1097d:	83 c4 10             	add    $0x10,%esp
   10980:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10983:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10987:	75 17                	jne    109a0 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   10989:	83 ec 0c             	sub    $0xc,%esp
   1098c:	68 18 2e 01 00       	push   $0x12e18
   10991:	e8 c1 22 00 00       	call   12c57 <log_printf>
   10996:	83 c4 10             	add    $0x10,%esp
            return 0;
   10999:	b8 00 00 00 00       	mov    $0x0,%eax
   1099e:	eb 6c                	jmp    10a0c <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	83 ec 0c             	sub    $0xc,%esp
   109a6:	ff 75 14             	pushl  0x14(%ebp)
   109a9:	6a 01                	push   $0x1
   109ab:	ff 75 e8             	pushl  -0x18(%ebp)
   109ae:	ff 75 f4             	pushl  -0xc(%ebp)
   109b1:	50                   	push   %eax
   109b2:	e8 c9 fc ff ff       	call   10680 <memory_create_map>
   109b7:	83 c4 20             	add    $0x20,%esp
   109ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   109bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   109c1:	79 2d                	jns    109f0 <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   109c3:	83 ec 0c             	sub    $0xc,%esp
   109c6:	68 38 2e 01 00       	push   $0x12e38
   109cb:	e8 87 22 00 00       	call   12c57 <log_printf>
   109d0:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   109d3:	83 ec 04             	sub    $0x4,%esp
   109d6:	ff 75 f0             	pushl  -0x10(%ebp)
   109d9:	ff 75 0c             	pushl  0xc(%ebp)
   109dc:	68 00 50 01 00       	push   $0x15000
   109e1:	e8 46 fa ff ff       	call   1042c <addr_free_page>
   109e6:	83 c4 10             	add    $0x10,%esp

            return 0;
   109e9:	b8 00 00 00 00       	mov    $0x0,%eax
   109ee:	eb 1c                	jmp    10a0c <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   109f0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   109f7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   109fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a01:	0f 8c 67 ff ff ff    	jl     1096e <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a07:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a0c:	c9                   	leave  
   10a0d:	c3                   	ret    

00010a0e <memory_alloc_page_for>:
// 给当前进程的页表，建立映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t addr, uint32_t size, uint32_t perm) {
   10a0e:	55                   	push   %ebp
   10a0f:	89 e5                	mov    %esp,%ebp
   10a11:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10a14:	e8 ee 04 00 00       	call   10f07 <task_current>
   10a19:	8b 40 64             	mov    0x64(%eax),%eax
   10a1c:	ff 75 10             	pushl  0x10(%ebp)
   10a1f:	ff 75 0c             	pushl  0xc(%ebp)
   10a22:	ff 75 08             	pushl  0x8(%ebp)
   10a25:	50                   	push   %eax
   10a26:	e8 15 ff ff ff       	call   10940 <memory_alloc_for_page_dir>
   10a2b:	83 c4 10             	add    $0x10,%esp
   10a2e:	c9                   	leave  
   10a2f:	c3                   	ret    

00010a30 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10a30:	55                   	push   %ebp
   10a31:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10a33:	8b 45 08             	mov    0x8(%ebp),%eax
   10a36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10a46:	90                   	nop
   10a47:	5d                   	pop    %ebp
   10a48:	c3                   	ret    

00010a49 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10a49:	55                   	push   %ebp
   10a4a:	89 e5                	mov    %esp,%ebp
    return node->next;
   10a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4f:	8b 40 04             	mov    0x4(%eax),%eax
}
   10a52:	5d                   	pop    %ebp
   10a53:	c3                   	ret    

00010a54 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10a54:	55                   	push   %ebp
   10a55:	89 e5                	mov    %esp,%ebp
    return list->count;
   10a57:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5a:	8b 40 08             	mov    0x8(%eax),%eax
}
   10a5d:	5d                   	pop    %ebp
   10a5e:	c3                   	ret    

00010a5f <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10a5f:	55                   	push   %ebp
   10a60:	89 e5                	mov    %esp,%ebp
    return list->first;
   10a62:	8b 45 08             	mov    0x8(%ebp),%eax
   10a65:	8b 00                	mov    (%eax),%eax
}
   10a67:	5d                   	pop    %ebp
   10a68:	c3                   	ret    

00010a69 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10a69:	55                   	push   %ebp
   10a6a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6f:	0f 22 d8             	mov    %eax,%cr3
}
   10a72:	90                   	nop
   10a73:	5d                   	pop    %ebp
   10a74:	c3                   	ret    

00010a75 <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10a75:	55                   	push   %ebp
   10a76:	89 e5                	mov    %esp,%ebp
   10a78:	83 ec 04             	sub    $0x4,%esp
   10a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10a82:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10a86:	0f 00 d8             	ltr    %ax
}
   10a89:	90                   	nop
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10a8f:	ff 75 08             	pushl  0x8(%ebp)
   10a92:	e8 d2 ff ff ff       	call   10a69 <write_cr3>
   10a97:	83 c4 04             	add    $0x4,%esp
}
   10a9a:	90                   	nop
   10a9b:	c9                   	leave  
   10a9c:	c3                   	ret    

00010a9d <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   10a9d:	55                   	push   %ebp
   10a9e:	89 e5                	mov    %esp,%ebp
   10aa0:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   10aa3:	e8 56 08 00 00       	call   112fe <gdt_alloc_desc>
   10aa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   10aab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aaf:	79 1a                	jns    10acb <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10ab1:	83 ec 0c             	sub    $0xc,%esp
   10ab4:	68 8c 2e 01 00       	push   $0x12e8c
   10ab9:	e8 99 21 00 00       	call   12c57 <log_printf>
   10abe:	83 c4 10             	add    $0x10,%esp
        return -1;
   10ac1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ac6:	e9 10 01 00 00       	jmp    10bdb <tss_init+0x13e>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10acb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ace:	83 c0 48             	add    $0x48,%eax
   10ad1:	68 89 00 00 00       	push   $0x89
   10ad6:	6a 68                	push   $0x68
   10ad8:	50                   	push   %eax
   10ad9:	ff 75 f4             	pushl  -0xc(%ebp)
   10adc:	e8 af 06 00 00       	call   11190 <segment_desc_set>
   10ae1:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae7:	83 c0 48             	add    $0x48,%eax
   10aea:	83 ec 04             	sub    $0x4,%esp
   10aed:	6a 68                	push   $0x68
   10aef:	6a 00                	push   $0x0
   10af1:	50                   	push   %eax
   10af2:	e8 f1 1a 00 00       	call   125e8 <kmemset>
   10af7:	83 c4 10             	add    $0x10,%esp

    int code_sel;
    int data_sel;
    code_sel = task_manager.app_code_sel | SEG_RPL3;
   10afa:	a1 90 71 01 00       	mov    0x17190,%eax
   10aff:	83 c8 03             	or     $0x3,%eax
   10b02:	89 45 f0             	mov    %eax,-0x10(%ebp)
    data_sel = task_manager.app_data_sel | SEG_RPL3;
   10b05:	a1 94 71 01 00       	mov    0x17194,%eax
   10b0a:	83 c8 03             	or     $0x3,%eax
   10b0d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    task->tss.eip    = entry;
   10b10:	8b 45 08             	mov    0x8(%ebp),%eax
   10b13:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b16:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10b19:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1c:	8b 55 10             	mov    0x10(%ebp),%edx
   10b1f:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   10b25:	8b 45 08             	mov    0x8(%ebp),%eax
   10b28:	8b 55 10             	mov    0x10(%ebp),%edx
   10b2b:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = task->tss.ss0 = data_sel;
   10b2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10b31:	8b 45 08             	mov    0x8(%ebp),%eax
   10b34:	89 50 50             	mov    %edx,0x50(%eax)
   10b37:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3a:	8b 50 50             	mov    0x50(%eax),%edx
   10b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b40:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10b46:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10b49:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4c:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10b52:	8b 45 08             	mov    0x8(%ebp),%eax
   10b55:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10b5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5e:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10b64:	8b 45 08             	mov    0x8(%ebp),%eax
   10b67:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b70:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10b76:	8b 45 08             	mov    0x8(%ebp),%eax
   10b79:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b82:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = code_sel;
   10b88:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10b94:	8b 45 08             	mov    0x8(%ebp),%eax
   10b97:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10b9e:	e8 34 fc ff ff       	call   107d7 <memory_create_uvm>
   10ba3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (uvm_pgtbl == 0) {
   10ba6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10baa:	75 15                	jne    10bc1 <tss_init+0x124>
        gdt_free_sel(tss_sel);
   10bac:	83 ec 0c             	sub    $0xc,%esp
   10baf:	ff 75 f4             	pushl  -0xc(%ebp)
   10bb2:	e8 bc 07 00 00       	call   11373 <gdt_free_sel>
   10bb7:	83 c4 10             	add    $0x10,%esp
        return -1;
   10bba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bbf:	eb 1a                	jmp    10bdb <tss_init+0x13e>
    }
    task->tss.cr3    = uvm_pgtbl;
   10bc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc4:	8b 55 e8             	mov    -0x18(%ebp),%edx
   10bc7:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10bca:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10bd0:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10bd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bdb:	c9                   	leave  
   10bdc:	c3                   	ret    

00010bdd <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   10bdd:	55                   	push   %ebp
   10bde:	89 e5                	mov    %esp,%ebp
   10be0:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10be3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10be7:	75 19                	jne    10c02 <task_init+0x25>
   10be9:	68 9e 2e 01 00       	push   $0x12e9e
   10bee:	68 28 2f 01 00       	push   $0x12f28
   10bf3:	6a 37                	push   $0x37
   10bf5:	68 b4 2e 01 00       	push   $0x12eb4
   10bfa:	e8 4e 1d 00 00       	call   1294d <pannic>
   10bff:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   10c02:	83 ec 04             	sub    $0x4,%esp
   10c05:	ff 75 14             	pushl  0x14(%ebp)
   10c08:	ff 75 10             	pushl  0x10(%ebp)
   10c0b:	ff 75 08             	pushl  0x8(%ebp)
   10c0e:	e8 8a fe ff ff       	call   10a9d <tss_init>
   10c13:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10c16:	8b 45 08             	mov    0x8(%ebp),%eax
   10c19:	83 c0 04             	add    $0x4,%eax
   10c1c:	83 ec 04             	sub    $0x4,%esp
   10c1f:	6a 20                	push   $0x20
   10c21:	ff 75 0c             	pushl  0xc(%ebp)
   10c24:	50                   	push   %eax
   10c25:	e8 4a 18 00 00       	call   12474 <kstrncpy>
   10c2a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10c2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10c36:	8b 45 08             	mov    0x8(%ebp),%eax
   10c39:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10c40:	8b 45 08             	mov    0x8(%ebp),%eax
   10c43:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10c4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4d:	8b 50 40             	mov    0x40(%eax),%edx
   10c50:	8b 45 08             	mov    0x8(%ebp),%eax
   10c53:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10c56:	8b 45 08             	mov    0x8(%ebp),%eax
   10c59:	83 c0 2c             	add    $0x2c,%eax
   10c5c:	83 ec 0c             	sub    $0xc,%esp
   10c5f:	50                   	push   %eax
   10c60:	e8 cb fd ff ff       	call   10a30 <list_node_init>
   10c65:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10c68:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6b:	83 c0 24             	add    $0x24,%eax
   10c6e:	83 ec 0c             	sub    $0xc,%esp
   10c71:	50                   	push   %eax
   10c72:	e8 b9 fd ff ff       	call   10a30 <list_node_init>
   10c77:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10c7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c7d:	83 c0 34             	add    $0x34,%eax
   10c80:	83 ec 0c             	sub    $0xc,%esp
   10c83:	50                   	push   %eax
   10c84:	e8 a7 fd ff ff       	call   10a30 <list_node_init>
   10c89:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10c8c:	e8 de 0e 00 00       	call   11b6f <irq_enter_protection>
   10c91:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10c94:	83 ec 0c             	sub    $0xc,%esp
   10c97:	ff 75 08             	pushl  0x8(%ebp)
   10c9a:	e8 c6 01 00 00       	call   10e65 <task_set_ready>
   10c9f:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10ca2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca5:	83 c0 2c             	add    $0x2c,%eax
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	50                   	push   %eax
   10cac:	68 10 70 01 00       	push   $0x17010
   10cb1:	e8 62 1d 00 00       	call   12a18 <list_insert_back>
   10cb6:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10cb9:	83 ec 0c             	sub    $0xc,%esp
   10cbc:	ff 75 f4             	pushl  -0xc(%ebp)
   10cbf:	e8 c3 0e 00 00       	call   11b87 <irq_leave_protection>
   10cc4:	83 c4 10             	add    $0x10,%esp

    return 0;
   10cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ccc:	c9                   	leave  
   10ccd:	c3                   	ret    

00010cce <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10cce:	55                   	push   %ebp
   10ccf:	89 e5                	mov    %esp,%ebp
   10cd1:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cd7:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10cdd:	83 ec 0c             	sub    $0xc,%esp
   10ce0:	50                   	push   %eax
   10ce1:	e8 04 06 00 00       	call   112ea <swtch_to_tss>
   10ce6:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10ce9:	90                   	nop
   10cea:	c9                   	leave  
   10ceb:	c3                   	ret    

00010cec <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10cec:	55                   	push   %ebp
   10ced:	89 e5                	mov    %esp,%ebp
    while (1) {
   10cef:	eb fe                	jmp    10cef <idle_task_entry+0x3>

00010cf1 <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10cf1:	55                   	push   %ebp
   10cf2:	89 e5                	mov    %esp,%ebp
   10cf4:	83 ec 18             	sub    $0x18,%esp
    // 初始化用户程序的 code selector
    int sel = gdt_alloc_desc();
   10cf7:	e8 02 06 00 00       	call   112fe <gdt_alloc_desc>
   10cfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xffffffff, SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10cff:	68 fa 40 00 00       	push   $0x40fa
   10d04:	6a ff                	push   $0xffffffff
   10d06:	6a 00                	push   $0x0
   10d08:	ff 75 f4             	pushl  -0xc(%ebp)
   10d0b:	e8 80 04 00 00       	call   11190 <segment_desc_set>
   10d10:	83 c4 10             	add    $0x10,%esp
    task_manager.app_code_sel = sel;
   10d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d16:	a3 90 71 01 00       	mov    %eax,0x17190

    // 初始化用户程序的 data selector
    sel = gdt_alloc_desc();
   10d1b:	e8 de 05 00 00       	call   112fe <gdt_alloc_desc>
   10d20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xffffffff, SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10d23:	68 f2 40 00 00       	push   $0x40f2
   10d28:	6a ff                	push   $0xffffffff
   10d2a:	6a 00                	push   $0x0
   10d2c:	ff 75 f4             	pushl  -0xc(%ebp)
   10d2f:	e8 5c 04 00 00       	call   11190 <segment_desc_set>
   10d34:	83 c4 10             	add    $0x10,%esp
    task_manager.app_data_sel = sel;
   10d37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d3a:	a3 94 71 01 00       	mov    %eax,0x17194

    list_init(&task_manager.ready_list);
   10d3f:	83 ec 0c             	sub    $0xc,%esp
   10d42:	68 04 70 01 00       	push   $0x17004
   10d47:	e8 4a 1c 00 00       	call   12996 <list_init>
   10d4c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10d4f:	83 ec 0c             	sub    $0xc,%esp
   10d52:	68 10 70 01 00       	push   $0x17010
   10d57:	e8 3a 1c 00 00       	call   12996 <list_init>
   10d5c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10d5f:	83 ec 0c             	sub    $0xc,%esp
   10d62:	68 1c 70 01 00       	push   $0x1701c
   10d67:	e8 2a 1c 00 00       	call   12996 <list_init>
   10d6c:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10d6f:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10d76:	00 00 00 

    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + IDLE_TASK_SIZE);
   10d79:	b8 a0 71 01 00       	mov    $0x171a0,%eax
   10d7e:	05 00 04 00 00       	add    $0x400,%eax
   10d83:	ba ec 0c 01 00       	mov    $0x10cec,%edx
   10d88:	50                   	push   %eax
   10d89:	52                   	push   %edx
   10d8a:	68 f9 2e 01 00       	push   $0x12ef9
   10d8f:	68 dc 70 01 00       	push   $0x170dc
   10d94:	e8 44 fe ff ff       	call   10bdd <task_init>
   10d99:	83 c4 10             	add    $0x10,%esp
}
   10d9c:	90                   	nop
   10d9d:	c9                   	leave  
   10d9e:	c3                   	ret    

00010d9f <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10d9f:	55                   	push   %ebp
   10da0:	89 e5                	mov    %esp,%ebp
   10da2:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10da5:	ba 86 af 01 00       	mov    $0x1af86,%edx
   10daa:	b8 40 af 01 00       	mov    $0x1af40,%eax
   10daf:	29 c2                	sub    %eax,%edx
   10db1:	89 d0                	mov    %edx,%eax
   10db3:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10db6:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10dbd:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   10dc1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10dc4:	77 19                	ja     10ddf <task_first_init+0x40>
   10dc6:	68 03 2f 01 00       	push   $0x12f03
   10dcb:	68 34 2f 01 00       	push   $0x12f34
   10dd0:	6a 7f                	push   $0x7f
   10dd2:	68 b4 2e 01 00       	push   $0x12eb4
   10dd7:	e8 71 1b 00 00       	call   1294d <pannic>
   10ddc:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10ddf:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    task_init(&task_manager.first_task, "first task", (uint32_t)first_start, 0);
   10de6:	6a 00                	push   $0x0
   10de8:	ff 75 ec             	pushl  -0x14(%ebp)
   10deb:	68 1a 2f 01 00       	push   $0x12f1a
   10df0:	68 28 70 01 00       	push   $0x17028
   10df5:	e8 e3 fd ff ff       	call   10bdd <task_init>
   10dfa:	83 c4 10             	add    $0x10,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10dfd:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10e02:	0f b7 c0             	movzwl %ax,%eax
   10e05:	83 ec 0c             	sub    $0xc,%esp
   10e08:	50                   	push   %eax
   10e09:	e8 67 fc ff ff       	call   10a75 <write_tr>
   10e0e:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10e11:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10e18:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10e1b:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10e20:	83 ec 0c             	sub    $0xc,%esp
   10e23:	50                   	push   %eax
   10e24:	e8 63 fc ff ff       	call   10a8c <mmu_set_page_dir>
   10e29:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W);
   10e2c:	83 ec 04             	sub    $0x4,%esp
   10e2f:	6a 03                	push   $0x3
   10e31:	ff 75 f0             	pushl  -0x10(%ebp)
   10e34:	ff 75 ec             	pushl  -0x14(%ebp)
   10e37:	e8 d2 fb ff ff       	call   10a0e <memory_alloc_page_for>
   10e3c:	83 c4 10             	add    $0x10,%esp

    kmemcpy((void*)first_start, s_first_task, copy_size);
   10e3f:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   10e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e46:	83 ec 04             	sub    $0x4,%esp
   10e49:	52                   	push   %edx
   10e4a:	68 40 af 01 00       	push   $0x1af40
   10e4f:	50                   	push   %eax
   10e50:	e8 44 17 00 00       	call   12599 <kmemcpy>
   10e55:	83 c4 10             	add    $0x10,%esp
}
   10e58:	90                   	nop
   10e59:	c9                   	leave  
   10e5a:	c3                   	ret    

00010e5b <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10e5b:	55                   	push   %ebp
   10e5c:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10e5e:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10e63:	5d                   	pop    %ebp
   10e64:	c3                   	ret    

00010e65 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10e65:	55                   	push   %ebp
   10e66:	89 e5                	mov    %esp,%ebp
   10e68:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10e6b:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10e72:	74 22                	je     10e96 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10e74:	8b 45 08             	mov    0x8(%ebp),%eax
   10e77:	83 c0 24             	add    $0x24,%eax
   10e7a:	83 ec 08             	sub    $0x8,%esp
   10e7d:	50                   	push   %eax
   10e7e:	68 04 70 01 00       	push   $0x17004
   10e83:	e8 90 1b 00 00       	call   12a18 <list_insert_back>
   10e88:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10e8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10e94:	eb 01                	jmp    10e97 <task_set_ready+0x32>
        return;
   10e96:	90                   	nop
}
   10e97:	c9                   	leave  
   10e98:	c3                   	ret    

00010e99 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   10e99:	55                   	push   %ebp
   10e9a:	89 e5                	mov    %esp,%ebp
   10e9c:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10e9f:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10ea6:	74 19                	je     10ec1 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   10eab:	83 c0 24             	add    $0x24,%eax
   10eae:	83 ec 08             	sub    $0x8,%esp
   10eb1:	50                   	push   %eax
   10eb2:	68 04 70 01 00       	push   $0x17004
   10eb7:	e8 38 1c 00 00       	call   12af4 <list_remove>
   10ebc:	83 c4 10             	add    $0x10,%esp
   10ebf:	eb 01                	jmp    10ec2 <task_set_blocked+0x29>
        return;
   10ec1:	90                   	nop
}
   10ec2:	c9                   	leave  
   10ec3:	c3                   	ret    

00010ec4 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10ec4:	55                   	push   %ebp
   10ec5:	89 e5                	mov    %esp,%ebp
   10ec7:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   10eca:	68 04 70 01 00       	push   $0x17004
   10ecf:	e8 80 fb ff ff       	call   10a54 <list_size>
   10ed4:	83 c4 04             	add    $0x4,%esp
   10ed7:	85 c0                	test   %eax,%eax
   10ed9:	75 07                	jne    10ee2 <task_next_run+0x1e>
        return &task_manager.idle_task;
   10edb:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10ee0:	eb 23                	jmp    10f05 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   10ee2:	68 04 70 01 00       	push   $0x17004
   10ee7:	e8 73 fb ff ff       	call   10a5f <list_first>
   10eec:	83 c4 04             	add    $0x4,%esp
   10eef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10ef2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10ef6:	74 08                	je     10f00 <task_next_run+0x3c>
   10ef8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10efb:	83 e8 24             	sub    $0x24,%eax
   10efe:	eb 05                	jmp    10f05 <task_next_run+0x41>
   10f00:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f05:	c9                   	leave  
   10f06:	c3                   	ret    

00010f07 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   10f07:	55                   	push   %ebp
   10f08:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10f0a:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10f0f:	5d                   	pop    %ebp
   10f10:	c3                   	ret    

00010f11 <sys_sched_yield>:


int sys_sched_yield(void) {
   10f11:	55                   	push   %ebp
   10f12:	89 e5                	mov    %esp,%ebp
   10f14:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f17:	e8 53 0c 00 00       	call   11b6f <irq_enter_protection>
   10f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   10f1f:	83 ec 0c             	sub    $0xc,%esp
   10f22:	68 04 70 01 00       	push   $0x17004
   10f27:	e8 28 fb ff ff       	call   10a54 <list_size>
   10f2c:	83 c4 10             	add    $0x10,%esp
   10f2f:	83 f8 01             	cmp    $0x1,%eax
   10f32:	7e 29                	jle    10f5d <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   10f34:	e8 ce ff ff ff       	call   10f07 <task_current>
   10f39:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   10f3c:	83 ec 0c             	sub    $0xc,%esp
   10f3f:	ff 75 f0             	pushl  -0x10(%ebp)
   10f42:	e8 52 ff ff ff       	call   10e99 <task_set_blocked>
   10f47:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10f4a:	83 ec 0c             	sub    $0xc,%esp
   10f4d:	ff 75 f0             	pushl  -0x10(%ebp)
   10f50:	e8 10 ff ff ff       	call   10e65 <task_set_ready>
   10f55:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10f58:	e8 15 00 00 00       	call   10f72 <task_dispatch>
    }

    irq_leave_protection(state);
   10f5d:	83 ec 0c             	sub    $0xc,%esp
   10f60:	ff 75 f4             	pushl  -0xc(%ebp)
   10f63:	e8 1f 0c 00 00       	call   11b87 <irq_leave_protection>
   10f68:	83 c4 10             	add    $0x10,%esp

    return 0;
   10f6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f70:	c9                   	leave  
   10f71:	c3                   	ret    

00010f72 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10f72:	55                   	push   %ebp
   10f73:	89 e5                	mov    %esp,%ebp
   10f75:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f78:	e8 f2 0b 00 00       	call   11b6f <irq_enter_protection>
   10f7d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10f80:	e8 3f ff ff ff       	call   10ec4 <task_next_run>
   10f85:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10f88:	a1 00 70 01 00       	mov    0x17000,%eax
   10f8d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10f90:	74 2a                	je     10fbc <task_dispatch+0x4a>
        task_t* from = task_current();
   10f92:	e8 70 ff ff ff       	call   10f07 <task_current>
   10f97:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10f9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9d:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   10fa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fa5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10fab:	83 ec 08             	sub    $0x8,%esp
   10fae:	ff 75 f0             	pushl  -0x10(%ebp)
   10fb1:	ff 75 ec             	pushl  -0x14(%ebp)
   10fb4:	e8 15 fd ff ff       	call   10cce <task_switch_from_to>
   10fb9:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10fbc:	83 ec 0c             	sub    $0xc,%esp
   10fbf:	ff 75 f4             	pushl  -0xc(%ebp)
   10fc2:	e8 c0 0b 00 00       	call   11b87 <irq_leave_protection>
   10fc7:	83 c4 10             	add    $0x10,%esp
}
   10fca:	90                   	nop
   10fcb:	c9                   	leave  
   10fcc:	c3                   	ret    

00010fcd <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10fcd:	55                   	push   %ebp
   10fce:	89 e5                	mov    %esp,%ebp
   10fd0:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10fd3:	e8 2f ff ff ff       	call   10f07 <task_current>
   10fd8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   10fdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fde:	8b 40 44             	mov    0x44(%eax),%eax
   10fe1:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fe7:	89 50 44             	mov    %edx,0x44(%eax)
   10fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fed:	8b 40 44             	mov    0x44(%eax),%eax
   10ff0:	85 c0                	test   %eax,%eax
   10ff2:	75 2d                	jne    11021 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   10ff4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ff7:	8b 50 40             	mov    0x40(%eax),%edx
   10ffa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ffd:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   11000:	83 ec 0c             	sub    $0xc,%esp
   11003:	ff 75 f0             	pushl  -0x10(%ebp)
   11006:	e8 8e fe ff ff       	call   10e99 <task_set_blocked>
   1100b:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1100e:	83 ec 0c             	sub    $0xc,%esp
   11011:	ff 75 f0             	pushl  -0x10(%ebp)
   11014:	e8 4c fe ff ff       	call   10e65 <task_set_ready>
   11019:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1101c:	e8 51 ff ff ff       	call   10f72 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   11021:	83 ec 0c             	sub    $0xc,%esp
   11024:	68 1c 70 01 00       	push   $0x1701c
   11029:	e8 31 fa ff ff       	call   10a5f <list_first>
   1102e:	83 c4 10             	add    $0x10,%esp
   11031:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11034:	eb 62                	jmp    11098 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   11036:	83 ec 0c             	sub    $0xc,%esp
   11039:	ff 75 f4             	pushl  -0xc(%ebp)
   1103c:	e8 08 fa ff ff       	call   10a49 <list_node_next>
   11041:	83 c4 10             	add    $0x10,%esp
   11044:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   11047:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1104b:	74 08                	je     11055 <task_time_tick+0x88>
   1104d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11050:	83 e8 24             	sub    $0x24,%eax
   11053:	eb 05                	jmp    1105a <task_time_tick+0x8d>
   11055:	b8 00 00 00 00       	mov    $0x0,%eax
   1105a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   1105d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11060:	8b 40 3c             	mov    0x3c(%eax),%eax
   11063:	8d 50 ff             	lea    -0x1(%eax),%edx
   11066:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11069:	89 50 3c             	mov    %edx,0x3c(%eax)
   1106c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1106f:	8b 40 3c             	mov    0x3c(%eax),%eax
   11072:	85 c0                	test   %eax,%eax
   11074:	75 1c                	jne    11092 <task_time_tick+0xc5>
            task_set_wakeup(task);
   11076:	83 ec 0c             	sub    $0xc,%esp
   11079:	ff 75 e8             	pushl  -0x18(%ebp)
   1107c:	e8 56 00 00 00       	call   110d7 <task_set_wakeup>
   11081:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11084:	83 ec 0c             	sub    $0xc,%esp
   11087:	ff 75 e8             	pushl  -0x18(%ebp)
   1108a:	e8 d6 fd ff ff       	call   10e65 <task_set_ready>
   1108f:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   11092:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11095:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11098:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1109c:	75 98                	jne    11036 <task_time_tick+0x69>
    }

    task_dispatch();
   1109e:	e8 cf fe ff ff       	call   10f72 <task_dispatch>
}
   110a3:	90                   	nop
   110a4:	c9                   	leave  
   110a5:	c3                   	ret    

000110a6 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   110a6:	55                   	push   %ebp
   110a7:	89 e5                	mov    %esp,%ebp
   110a9:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   110ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110b0:	74 22                	je     110d4 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   110b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   110b5:	8b 45 08             	mov    0x8(%ebp),%eax
   110b8:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   110bb:	8b 45 08             	mov    0x8(%ebp),%eax
   110be:	83 c0 24             	add    $0x24,%eax
   110c1:	83 ec 08             	sub    $0x8,%esp
   110c4:	50                   	push   %eax
   110c5:	68 1c 70 01 00       	push   $0x1701c
   110ca:	e8 49 19 00 00       	call   12a18 <list_insert_back>
   110cf:	83 c4 10             	add    $0x10,%esp
   110d2:	eb 01                	jmp    110d5 <task_set_sleep+0x2f>
        return;
   110d4:	90                   	nop
}
   110d5:	c9                   	leave  
   110d6:	c3                   	ret    

000110d7 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   110d7:	55                   	push   %ebp
   110d8:	89 e5                	mov    %esp,%ebp
   110da:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   110dd:	8b 45 08             	mov    0x8(%ebp),%eax
   110e0:	83 c0 24             	add    $0x24,%eax
   110e3:	83 ec 08             	sub    $0x8,%esp
   110e6:	50                   	push   %eax
   110e7:	68 1c 70 01 00       	push   $0x1701c
   110ec:	e8 03 1a 00 00       	call   12af4 <list_remove>
   110f1:	83 c4 10             	add    $0x10,%esp
}
   110f4:	90                   	nop
   110f5:	c9                   	leave  
   110f6:	c3                   	ret    

000110f7 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   110f7:	55                   	push   %ebp
   110f8:	89 e5                	mov    %esp,%ebp
   110fa:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   110fd:	e8 6d 0a 00 00       	call   11b6f <irq_enter_protection>
   11102:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   11105:	a1 00 70 01 00       	mov    0x17000,%eax
   1110a:	83 ec 0c             	sub    $0xc,%esp
   1110d:	50                   	push   %eax
   1110e:	e8 86 fd ff ff       	call   10e99 <task_set_blocked>
   11113:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	83 c0 09             	add    $0x9,%eax
   1111c:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11121:	f7 e2                	mul    %edx
   11123:	c1 ea 03             	shr    $0x3,%edx
   11126:	a1 00 70 01 00       	mov    0x17000,%eax
   1112b:	83 ec 08             	sub    $0x8,%esp
   1112e:	52                   	push   %edx
   1112f:	50                   	push   %eax
   11130:	e8 71 ff ff ff       	call   110a6 <task_set_sleep>
   11135:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   11138:	e8 35 fe ff ff       	call   10f72 <task_dispatch>

    irq_leave_protection(state);
   1113d:	83 ec 0c             	sub    $0xc,%esp
   11140:	ff 75 f4             	pushl  -0xc(%ebp)
   11143:	e8 3f 0a 00 00       	call   11b87 <irq_leave_protection>
   11148:	83 c4 10             	add    $0x10,%esp
   1114b:	90                   	nop
   1114c:	c9                   	leave  
   1114d:	c3                   	ret    

0001114e <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1114e:	55                   	push   %ebp
   1114f:	89 e5                	mov    %esp,%ebp
   11151:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11154:	8b 45 08             	mov    0x8(%ebp),%eax
   11157:	c1 e8 10             	shr    $0x10,%eax
   1115a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   1115e:	8b 45 08             	mov    0x8(%ebp),%eax
   11161:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   11165:	8b 45 0c             	mov    0xc(%ebp),%eax
   11168:	83 e8 01             	sub    $0x1,%eax
   1116b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1116f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11173:	90                   	nop
   11174:	c9                   	leave  
   11175:	c3                   	ret    

00011176 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11176:	55                   	push   %ebp
   11177:	89 e5                	mov    %esp,%ebp
   11179:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   1117c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1117f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11182:	8b 45 08             	mov    0x8(%ebp),%eax
   11185:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11188:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1118b:	ff 28                	ljmp   *(%eax)
}
   1118d:	90                   	nop
   1118e:	c9                   	leave  
   1118f:	c3                   	ret    

00011190 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   11190:	55                   	push   %ebp
   11191:	89 e5                	mov    %esp,%ebp
   11193:	83 ec 14             	sub    $0x14,%esp
   11196:	8b 45 14             	mov    0x14(%ebp),%eax
   11199:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   1119d:	8b 45 08             	mov    0x8(%ebp),%eax
   111a0:	83 e0 f8             	and    $0xfffffff8,%eax
   111a3:	05 a0 81 01 00       	add    $0x181a0,%eax
   111a8:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   111ab:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   111b2:	76 0f                	jbe    111c3 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   111b4:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   111ba:	8b 45 10             	mov    0x10(%ebp),%eax
   111bd:	c1 e8 0c             	shr    $0xc,%eax
   111c0:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   111c3:	8b 45 10             	mov    0x10(%ebp),%eax
   111c6:	89 c2                	mov    %eax,%edx
   111c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111cb:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   111ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   111d1:	89 c2                	mov    %eax,%edx
   111d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111d6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   111da:	8b 45 0c             	mov    0xc(%ebp),%eax
   111dd:	c1 e8 10             	shr    $0x10,%eax
   111e0:	89 c2                	mov    %eax,%edx
   111e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111e5:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   111e8:	8b 45 10             	mov    0x10(%ebp),%eax
   111eb:	c1 e8 10             	shr    $0x10,%eax
   111ee:	c1 e0 08             	shl    $0x8,%eax
   111f1:	66 25 00 0f          	and    $0xf00,%ax
   111f5:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   111f9:	89 c2                	mov    %eax,%edx
   111fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111fe:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11202:	8b 45 0c             	mov    0xc(%ebp),%eax
   11205:	c1 e8 18             	shr    $0x18,%eax
   11208:	89 c2                	mov    %eax,%edx
   1120a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1120d:	88 50 07             	mov    %dl,0x7(%eax)
}
   11210:	90                   	nop
   11211:	c9                   	leave  
   11212:	c3                   	ret    

00011213 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   11213:	55                   	push   %ebp
   11214:	89 e5                	mov    %esp,%ebp
   11216:	83 ec 08             	sub    $0x8,%esp
   11219:	8b 55 0c             	mov    0xc(%ebp),%edx
   1121c:	8b 45 14             	mov    0x14(%ebp),%eax
   1121f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11223:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   11227:	8b 45 10             	mov    0x10(%ebp),%eax
   1122a:	89 c2                	mov    %eax,%edx
   1122c:	8b 45 08             	mov    0x8(%ebp),%eax
   1122f:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11232:	8b 45 08             	mov    0x8(%ebp),%eax
   11235:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11239:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1123d:	8b 45 08             	mov    0x8(%ebp),%eax
   11240:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11244:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   11248:	8b 45 10             	mov    0x10(%ebp),%eax
   1124b:	c1 e8 10             	shr    $0x10,%eax
   1124e:	89 c2                	mov    %eax,%edx
   11250:	8b 45 08             	mov    0x8(%ebp),%eax
   11253:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   11257:	90                   	nop
   11258:	c9                   	leave  
   11259:	c3                   	ret    

0001125a <init_gdt>:


void init_gdt(void) {
   1125a:	55                   	push   %ebp
   1125b:	89 e5                	mov    %esp,%ebp
   1125d:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11260:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11267:	eb 19                	jmp    11282 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   11269:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1126c:	c1 e0 03             	shl    $0x3,%eax
   1126f:	6a 00                	push   $0x0
   11271:	6a 00                	push   $0x0
   11273:	6a 00                	push   $0x0
   11275:	50                   	push   %eax
   11276:	e8 15 ff ff ff       	call   11190 <segment_desc_set>
   1127b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1127e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11282:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11289:	7e de                	jle    11269 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1128b:	68 92 40 00 00       	push   $0x4092
   11290:	6a ff                	push   $0xffffffff
   11292:	6a 00                	push   $0x0
   11294:	6a 10                	push   $0x10
   11296:	e8 f5 fe ff ff       	call   11190 <segment_desc_set>
   1129b:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   1129e:	68 9a 40 00 00       	push   $0x409a
   112a3:	6a ff                	push   $0xffffffff
   112a5:	6a 00                	push   $0x0
   112a7:	6a 08                	push   $0x8
   112a9:	e8 e2 fe ff ff       	call   11190 <segment_desc_set>
   112ae:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   112b1:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   112b6:	68 00 08 00 00       	push   $0x800
   112bb:	50                   	push   %eax
   112bc:	e8 8d fe ff ff       	call   1114e <lgdt>
   112c1:	83 c4 08             	add    $0x8,%esp
}
   112c4:	90                   	nop
   112c5:	c9                   	leave  
   112c6:	c3                   	ret    

000112c7 <cpu_init>:


void cpu_init(void) {
   112c7:	55                   	push   %ebp
   112c8:	89 e5                	mov    %esp,%ebp
   112ca:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   112cd:	83 ec 08             	sub    $0x8,%esp
   112d0:	68 44 2f 01 00       	push   $0x12f44
   112d5:	68 a0 89 01 00       	push   $0x189a0
   112da:	e8 2f 0c 00 00       	call   11f0e <mutex_init>
   112df:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   112e2:	e8 73 ff ff ff       	call   1125a <init_gdt>
}
   112e7:	90                   	nop
   112e8:	c9                   	leave  
   112e9:	c3                   	ret    

000112ea <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   112ea:	55                   	push   %ebp
   112eb:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   112ed:	8b 45 08             	mov    0x8(%ebp),%eax
   112f0:	6a 00                	push   $0x0
   112f2:	50                   	push   %eax
   112f3:	e8 7e fe ff ff       	call   11176 <far_jump>
   112f8:	83 c4 08             	add    $0x8,%esp
}
   112fb:	90                   	nop
   112fc:	c9                   	leave  
   112fd:	c3                   	ret    

000112fe <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   112fe:	55                   	push   %ebp
   112ff:	89 e5                	mov    %esp,%ebp
   11301:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   11304:	83 ec 0c             	sub    $0xc,%esp
   11307:	68 a0 89 01 00       	push   $0x189a0
   1130c:	e8 3e 0c 00 00       	call   11f4f <mutex_acquire>
   11311:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11314:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1131b:	eb 36                	jmp    11353 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   1131d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11320:	c1 e0 03             	shl    $0x3,%eax
   11323:	05 a0 81 01 00       	add    $0x181a0,%eax
   11328:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   1132b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1132e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11332:	66 85 c0             	test   %ax,%ax
   11335:	75 18                	jne    1134f <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   11337:	83 ec 0c             	sub    $0xc,%esp
   1133a:	68 a0 89 01 00       	push   $0x189a0
   1133f:	e8 99 0c 00 00       	call   11fdd <mutex_release>
   11344:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   11347:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1134a:	c1 e0 03             	shl    $0x3,%eax
   1134d:	eb 22                	jmp    11371 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1134f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11353:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1135a:	7e c1                	jle    1131d <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   1135c:	83 ec 0c             	sub    $0xc,%esp
   1135f:	68 a0 89 01 00       	push   $0x189a0
   11364:	e8 74 0c 00 00       	call   11fdd <mutex_release>
   11369:	83 c4 10             	add    $0x10,%esp

    return -1;
   1136c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11371:	c9                   	leave  
   11372:	c3                   	ret    

00011373 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   11373:	55                   	push   %ebp
   11374:	89 e5                	mov    %esp,%ebp
   11376:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   11379:	83 ec 0c             	sub    $0xc,%esp
   1137c:	68 a0 89 01 00       	push   $0x189a0
   11381:	e8 c9 0b 00 00       	call   11f4f <mutex_acquire>
   11386:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   11389:	8b 45 08             	mov    0x8(%ebp),%eax
   1138c:	c1 e8 03             	shr    $0x3,%eax
   1138f:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   11396:	00 00 00 

    mutex_release(&mutex);
   11399:	83 ec 0c             	sub    $0xc,%esp
   1139c:	68 a0 89 01 00       	push   $0x189a0
   113a1:	e8 37 0c 00 00       	call   11fdd <mutex_release>
   113a6:	83 c4 10             	add    $0x10,%esp
   113a9:	90                   	nop
   113aa:	c9                   	leave  
   113ab:	c3                   	ret    

000113ac <inb>:
static inline uint8_t inb(uint16_t port) {
   113ac:	55                   	push   %ebp
   113ad:	89 e5                	mov    %esp,%ebp
   113af:	83 ec 14             	sub    $0x14,%esp
   113b2:	8b 45 08             	mov    0x8(%ebp),%eax
   113b5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   113b9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   113bd:	89 c2                	mov    %eax,%edx
   113bf:	ec                   	in     (%dx),%al
   113c0:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   113c3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   113c7:	c9                   	leave  
   113c8:	c3                   	ret    

000113c9 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   113c9:	55                   	push   %ebp
   113ca:	89 e5                	mov    %esp,%ebp
   113cc:	83 ec 08             	sub    $0x8,%esp
   113cf:	8b 55 08             	mov    0x8(%ebp),%edx
   113d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113d9:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   113dc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113e0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   113e4:	ee                   	out    %al,(%dx)
}
   113e5:	90                   	nop
   113e6:	c9                   	leave  
   113e7:	c3                   	ret    

000113e8 <cli>:
static inline void cli(void) {
   113e8:	55                   	push   %ebp
   113e9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   113eb:	fa                   	cli    
}
   113ec:	90                   	nop
   113ed:	5d                   	pop    %ebp
   113ee:	c3                   	ret    

000113ef <sti>:
static inline void sti(void) {
   113ef:	55                   	push   %ebp
   113f0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   113f2:	fb                   	sti    
}
   113f3:	90                   	nop
   113f4:	5d                   	pop    %ebp
   113f5:	c3                   	ret    

000113f6 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   113f6:	55                   	push   %ebp
   113f7:	89 e5                	mov    %esp,%ebp
   113f9:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   113fc:	8b 45 08             	mov    0x8(%ebp),%eax
   113ff:	c1 e8 10             	shr    $0x10,%eax
   11402:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   11406:	8b 45 08             	mov    0x8(%ebp),%eax
   11409:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   1140d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11410:	83 e8 01             	sub    $0x1,%eax
   11413:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   11417:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1141b:	90                   	nop
   1141c:	c9                   	leave  
   1141d:	c3                   	ret    

0001141e <hlt>:
static inline void hlt(void) {
   1141e:	55                   	push   %ebp
   1141f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11421:	f4                   	hlt    
}
   11422:	90                   	nop
   11423:	5d                   	pop    %ebp
   11424:	c3                   	ret    

00011425 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
   11428:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1142b:	9c                   	pushf  
   1142c:	58                   	pop    %eax
   1142d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11430:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11433:	c9                   	leave  
   11434:	c3                   	ret    

00011435 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   11435:	55                   	push   %ebp
   11436:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11438:	8b 45 08             	mov    0x8(%ebp),%eax
   1143b:	50                   	push   %eax
   1143c:	9d                   	popf   
}
   1143d:	90                   	nop
   1143e:	5d                   	pop    %ebp
   1143f:	c3                   	ret    

00011440 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   11440:	55                   	push   %ebp
   11441:	89 e5                	mov    %esp,%ebp
   11443:	57                   	push   %edi
   11444:	56                   	push   %esi
   11445:	53                   	push   %ebx
   11446:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11449:	8b 45 08             	mov    0x8(%ebp),%eax
   1144c:	8b 50 34             	mov    0x34(%eax),%edx
   1144f:	8b 45 08             	mov    0x8(%ebp),%eax
   11452:	8b 40 30             	mov    0x30(%eax),%eax
   11455:	83 ec 04             	sub    $0x4,%esp
   11458:	52                   	push   %edx
   11459:	50                   	push   %eax
   1145a:	68 50 2f 01 00       	push   $0x12f50
   1145f:	e8 f3 17 00 00       	call   12c57 <log_printf>
   11464:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
   11467:	8b 45 08             	mov    0x8(%ebp),%eax
   1146a:	8b 38                	mov    (%eax),%edi
   1146c:	8b 45 08             	mov    0x8(%ebp),%eax
   1146f:	8b 70 04             	mov    0x4(%eax),%esi
   11472:	8b 45 08             	mov    0x8(%ebp),%eax
   11475:	8b 58 0c             	mov    0xc(%eax),%ebx
   11478:	8b 45 08             	mov    0x8(%ebp),%eax
   1147b:	8b 48 08             	mov    0x8(%eax),%ecx
   1147e:	8b 45 08             	mov    0x8(%ebp),%eax
   11481:	8b 50 0c             	mov    0xc(%eax),%edx
   11484:	8b 45 08             	mov    0x8(%ebp),%eax
   11487:	8b 40 3c             	mov    0x3c(%eax),%eax
   1148a:	83 ec 04             	sub    $0x4,%esp
   1148d:	57                   	push   %edi
   1148e:	56                   	push   %esi
   1148f:	53                   	push   %ebx
   11490:	51                   	push   %ecx
   11491:	52                   	push   %edx
   11492:	50                   	push   %eax
   11493:	68 68 2f 01 00       	push   $0x12f68
   11498:	e8 ba 17 00 00       	call   12c57 <log_printf>
   1149d:	83 c4 20             	add    $0x20,%esp
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, frame->esp);
   114a0:	8b 45 08             	mov    0x8(%ebp),%eax
   114a3:	8b 40 1c             	mov    0x1c(%eax),%eax
   114a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   114a9:	8b 45 08             	mov    0x8(%ebp),%eax
   114ac:	8b 78 18             	mov    0x18(%eax),%edi
   114af:	8b 45 08             	mov    0x8(%ebp),%eax
   114b2:	8b 70 14             	mov    0x14(%eax),%esi
   114b5:	8b 45 08             	mov    0x8(%ebp),%eax
   114b8:	8b 58 10             	mov    0x10(%eax),%ebx
   114bb:	8b 45 08             	mov    0x8(%ebp),%eax
   114be:	8b 48 24             	mov    0x24(%eax),%ecx
   114c1:	8b 45 08             	mov    0x8(%ebp),%eax
   114c4:	8b 50 20             	mov    0x20(%eax),%edx
   114c7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ca:	8b 40 2c             	mov    0x2c(%eax),%eax
   114cd:	ff 75 e4             	pushl  -0x1c(%ebp)
   114d0:	57                   	push   %edi
   114d1:	56                   	push   %esi
   114d2:	53                   	push   %ebx
   114d3:	51                   	push   %ecx
   114d4:	52                   	push   %edx
   114d5:	50                   	push   %eax
   114d6:	68 94 2f 01 00       	push   $0x12f94
   114db:	e8 77 17 00 00       	call   12c57 <log_printf>
   114e0:	83 c4 20             	add    $0x20,%esp
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   114e3:	8b 45 08             	mov    0x8(%ebp),%eax
   114e6:	8b 50 40             	mov    0x40(%eax),%edx
   114e9:	8b 45 08             	mov    0x8(%ebp),%eax
   114ec:	8b 40 38             	mov    0x38(%eax),%eax
   114ef:	83 ec 04             	sub    $0x4,%esp
   114f2:	52                   	push   %edx
   114f3:	50                   	push   %eax
   114f4:	68 cd 2f 01 00       	push   $0x12fcd
   114f9:	e8 59 17 00 00       	call   12c57 <log_printf>
   114fe:	83 c4 10             	add    $0x10,%esp
}
   11501:	90                   	nop
   11502:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11505:	5b                   	pop    %ebx
   11506:	5e                   	pop    %esi
   11507:	5f                   	pop    %edi
   11508:	5d                   	pop    %ebp
   11509:	c3                   	ret    

0001150a <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   1150a:	55                   	push   %ebp
   1150b:	89 e5                	mov    %esp,%ebp
   1150d:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   11510:	83 ec 0c             	sub    $0xc,%esp
   11513:	68 e4 2f 01 00       	push   $0x12fe4
   11518:	e8 3a 17 00 00       	call   12c57 <log_printf>
   1151d:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   11520:	83 ec 08             	sub    $0x8,%esp
   11523:	ff 75 0c             	pushl  0xc(%ebp)
   11526:	68 0f 30 01 00       	push   $0x1300f
   1152b:	e8 27 17 00 00       	call   12c57 <log_printf>
   11530:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   11533:	83 ec 0c             	sub    $0xc,%esp
   11536:	ff 75 08             	pushl  0x8(%ebp)
   11539:	e8 02 ff ff ff       	call   11440 <dump_core_regs>
   1153e:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11541:	e8 d8 fe ff ff       	call   1141e <hlt>
   11546:	eb f9                	jmp    11541 <do_default_handler+0x37>

00011548 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11548:	55                   	push   %ebp
   11549:	89 e5                	mov    %esp,%ebp
   1154b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   1154e:	83 ec 08             	sub    $0x8,%esp
   11551:	68 21 30 01 00       	push   $0x13021
   11556:	ff 75 08             	pushl  0x8(%ebp)
   11559:	e8 ac ff ff ff       	call   1150a <do_default_handler>
   1155e:	83 c4 10             	add    $0x10,%esp
}
   11561:	90                   	nop
   11562:	c9                   	leave  
   11563:	c3                   	ret    

00011564 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   11564:	55                   	push   %ebp
   11565:	89 e5                	mov    %esp,%ebp
   11567:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   1156a:	83 ec 08             	sub    $0x8,%esp
   1156d:	68 33 30 01 00       	push   $0x13033
   11572:	ff 75 08             	pushl  0x8(%ebp)
   11575:	e8 90 ff ff ff       	call   1150a <do_default_handler>
   1157a:	83 c4 10             	add    $0x10,%esp
}
   1157d:	90                   	nop
   1157e:	c9                   	leave  
   1157f:	c3                   	ret    

00011580 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11580:	55                   	push   %ebp
   11581:	89 e5                	mov    %esp,%ebp
   11583:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   11586:	83 ec 08             	sub    $0x8,%esp
   11589:	68 4d 30 01 00       	push   $0x1304d
   1158e:	ff 75 08             	pushl  0x8(%ebp)
   11591:	e8 74 ff ff ff       	call   1150a <do_default_handler>
   11596:	83 c4 10             	add    $0x10,%esp
}   
   11599:	90                   	nop
   1159a:	c9                   	leave  
   1159b:	c3                   	ret    

0001159c <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   1159c:	55                   	push   %ebp
   1159d:	89 e5                	mov    %esp,%ebp
   1159f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   115a2:	83 ec 08             	sub    $0x8,%esp
   115a5:	68 68 30 01 00       	push   $0x13068
   115aa:	ff 75 08             	pushl  0x8(%ebp)
   115ad:	e8 58 ff ff ff       	call   1150a <do_default_handler>
   115b2:	83 c4 10             	add    $0x10,%esp
}   
   115b5:	90                   	nop
   115b6:	c9                   	leave  
   115b7:	c3                   	ret    

000115b8 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   115b8:	55                   	push   %ebp
   115b9:	89 e5                	mov    %esp,%ebp
   115bb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   115be:	83 ec 08             	sub    $0x8,%esp
   115c1:	68 81 30 01 00       	push   $0x13081
   115c6:	ff 75 08             	pushl  0x8(%ebp)
   115c9:	e8 3c ff ff ff       	call   1150a <do_default_handler>
   115ce:	83 c4 10             	add    $0x10,%esp
}   
   115d1:	90                   	nop
   115d2:	c9                   	leave  
   115d3:	c3                   	ret    

000115d4 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   115d4:	55                   	push   %ebp
   115d5:	89 e5                	mov    %esp,%ebp
   115d7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   115da:	83 ec 08             	sub    $0x8,%esp
   115dd:	68 97 30 01 00       	push   $0x13097
   115e2:	ff 75 08             	pushl  0x8(%ebp)
   115e5:	e8 20 ff ff ff       	call   1150a <do_default_handler>
   115ea:	83 c4 10             	add    $0x10,%esp
}   
   115ed:	90                   	nop
   115ee:	c9                   	leave  
   115ef:	c3                   	ret    

000115f0 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   115f0:	55                   	push   %ebp
   115f1:	89 e5                	mov    %esp,%ebp
   115f3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   115f6:	83 ec 08             	sub    $0x8,%esp
   115f9:	68 ab 30 01 00       	push   $0x130ab
   115fe:	ff 75 08             	pushl  0x8(%ebp)
   11601:	e8 04 ff ff ff       	call   1150a <do_default_handler>
   11606:	83 c4 10             	add    $0x10,%esp
}   
   11609:	90                   	nop
   1160a:	c9                   	leave  
   1160b:	c3                   	ret    

0001160c <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   1160c:	55                   	push   %ebp
   1160d:	89 e5                	mov    %esp,%ebp
   1160f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   11612:	83 ec 08             	sub    $0x8,%esp
   11615:	68 c9 30 01 00       	push   $0x130c9
   1161a:	ff 75 08             	pushl  0x8(%ebp)
   1161d:	e8 e8 fe ff ff       	call   1150a <do_default_handler>
   11622:	83 c4 10             	add    $0x10,%esp
}   
   11625:	90                   	nop
   11626:	c9                   	leave  
   11627:	c3                   	ret    

00011628 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11628:	55                   	push   %ebp
   11629:	89 e5                	mov    %esp,%ebp
   1162b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   1162e:	83 ec 08             	sub    $0x8,%esp
   11631:	68 e3 30 01 00       	push   $0x130e3
   11636:	ff 75 08             	pushl  0x8(%ebp)
   11639:	e8 cc fe ff ff       	call   1150a <do_default_handler>
   1163e:	83 c4 10             	add    $0x10,%esp
}   
   11641:	90                   	nop
   11642:	c9                   	leave  
   11643:	c3                   	ret    

00011644 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   11644:	55                   	push   %ebp
   11645:	89 e5                	mov    %esp,%ebp
   11647:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   1164a:	83 ec 08             	sub    $0x8,%esp
   1164d:	68 ff 30 01 00       	push   $0x130ff
   11652:	ff 75 08             	pushl  0x8(%ebp)
   11655:	e8 b0 fe ff ff       	call   1150a <do_default_handler>
   1165a:	83 c4 10             	add    $0x10,%esp
}   
   1165d:	90                   	nop
   1165e:	c9                   	leave  
   1165f:	c3                   	ret    

00011660 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11660:	55                   	push   %ebp
   11661:	89 e5                	mov    %esp,%ebp
   11663:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   11666:	83 ec 08             	sub    $0x8,%esp
   11669:	68 17 31 01 00       	push   $0x13117
   1166e:	ff 75 08             	pushl  0x8(%ebp)
   11671:	e8 94 fe ff ff       	call   1150a <do_default_handler>
   11676:	83 c4 10             	add    $0x10,%esp
}   
   11679:	90                   	nop
   1167a:	c9                   	leave  
   1167b:	c3                   	ret    

0001167c <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   1167c:	55                   	push   %ebp
   1167d:	89 e5                	mov    %esp,%ebp
   1167f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11682:	83 ec 08             	sub    $0x8,%esp
   11685:	68 30 31 01 00       	push   $0x13130
   1168a:	ff 75 08             	pushl  0x8(%ebp)
   1168d:	e8 78 fe ff ff       	call   1150a <do_default_handler>
   11692:	83 c4 10             	add    $0x10,%esp
}   
   11695:	90                   	nop
   11696:	c9                   	leave  
   11697:	c3                   	ret    

00011698 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   11698:	55                   	push   %ebp
   11699:	89 e5                	mov    %esp,%ebp
   1169b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   1169e:	83 ec 08             	sub    $0x8,%esp
   116a1:	68 50 31 01 00       	push   $0x13150
   116a6:	ff 75 08             	pushl  0x8(%ebp)
   116a9:	e8 5c fe ff ff       	call   1150a <do_default_handler>
   116ae:	83 c4 10             	add    $0x10,%esp
}   
   116b1:	90                   	nop
   116b2:	c9                   	leave  
   116b3:	c3                   	ret    

000116b4 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   116b4:	55                   	push   %ebp
   116b5:	89 e5                	mov    %esp,%ebp
   116b7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: General protection");
   116ba:	83 ec 08             	sub    $0x8,%esp
   116bd:	68 6f 31 01 00       	push   $0x1316f
   116c2:	ff 75 08             	pushl  0x8(%ebp)
   116c5:	e8 40 fe ff ff       	call   1150a <do_default_handler>
   116ca:	83 c4 10             	add    $0x10,%esp
}   
   116cd:	90                   	nop
   116ce:	c9                   	leave  
   116cf:	c3                   	ret    

000116d0 <do_handler_page_fault>:


// Exception: 
void do_handler_page_fault(exception_frame_t* frame) {
   116d0:	55                   	push   %ebp
   116d1:	89 e5                	mov    %esp,%ebp
   116d3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Page fault");
   116d6:	83 ec 08             	sub    $0x8,%esp
   116d9:	68 8d 31 01 00       	push   $0x1318d
   116de:	ff 75 08             	pushl  0x8(%ebp)
   116e1:	e8 24 fe ff ff       	call   1150a <do_default_handler>
   116e6:	83 c4 10             	add    $0x10,%esp
}   
   116e9:	90                   	nop
   116ea:	c9                   	leave  
   116eb:	c3                   	ret    

000116ec <do_handler_floating_point_error>:


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   116ec:	55                   	push   %ebp
   116ed:	89 e5                	mov    %esp,%ebp
   116ef:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   116f2:	83 ec 08             	sub    $0x8,%esp
   116f5:	68 a4 31 01 00       	push   $0x131a4
   116fa:	ff 75 08             	pushl  0x8(%ebp)
   116fd:	e8 08 fe ff ff       	call   1150a <do_default_handler>
   11702:	83 c4 10             	add    $0x10,%esp
}   
   11705:	90                   	nop
   11706:	c9                   	leave  
   11707:	c3                   	ret    

00011708 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11708:	55                   	push   %ebp
   11709:	89 e5                	mov    %esp,%ebp
   1170b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   1170e:	83 ec 08             	sub    $0x8,%esp
   11711:	68 c4 31 01 00       	push   $0x131c4
   11716:	ff 75 08             	pushl  0x8(%ebp)
   11719:	e8 ec fd ff ff       	call   1150a <do_default_handler>
   1171e:	83 c4 10             	add    $0x10,%esp
}   
   11721:	90                   	nop
   11722:	c9                   	leave  
   11723:	c3                   	ret    

00011724 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11724:	55                   	push   %ebp
   11725:	89 e5                	mov    %esp,%ebp
   11727:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   1172a:	83 ec 08             	sub    $0x8,%esp
   1172d:	68 de 31 01 00       	push   $0x131de
   11732:	ff 75 08             	pushl  0x8(%ebp)
   11735:	e8 d0 fd ff ff       	call   1150a <do_default_handler>
   1173a:	83 c4 10             	add    $0x10,%esp
}   
   1173d:	90                   	nop
   1173e:	c9                   	leave  
   1173f:	c3                   	ret    

00011740 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11740:	55                   	push   %ebp
   11741:	89 e5                	mov    %esp,%ebp
   11743:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11746:	83 ec 08             	sub    $0x8,%esp
   11749:	68 f8 31 01 00       	push   $0x131f8
   1174e:	ff 75 08             	pushl  0x8(%ebp)
   11751:	e8 b4 fd ff ff       	call   1150a <do_default_handler>
   11756:	83 c4 10             	add    $0x10,%esp
}
   11759:	90                   	nop
   1175a:	c9                   	leave  
   1175b:	c3                   	ret    

0001175c <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   1175c:	55                   	push   %ebp
   1175d:	89 e5                	mov    %esp,%ebp
   1175f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11762:	83 ec 08             	sub    $0x8,%esp
   11765:	68 24 32 01 00       	push   $0x13224
   1176a:	ff 75 08             	pushl  0x8(%ebp)
   1176d:	e8 98 fd ff ff       	call   1150a <do_default_handler>
   11772:	83 c4 10             	add    $0x10,%esp
}
   11775:	90                   	nop
   11776:	c9                   	leave  
   11777:	c3                   	ret    

00011778 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11778:	55                   	push   %ebp
   11779:	89 e5                	mov    %esp,%ebp
   1177b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   1177e:	83 ec 08             	sub    $0x8,%esp
   11781:	68 48 32 01 00       	push   $0x13248
   11786:	ff 75 08             	pushl  0x8(%ebp)
   11789:	e8 7c fd ff ff       	call   1150a <do_default_handler>
   1178e:	83 c4 10             	add    $0x10,%esp
}
   11791:	90                   	nop
   11792:	c9                   	leave  
   11793:	c3                   	ret    

00011794 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11794:	55                   	push   %ebp
   11795:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11797:	6a 11                	push   $0x11
   11799:	6a 20                	push   $0x20
   1179b:	e8 29 fc ff ff       	call   113c9 <outb>
   117a0:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   117a3:	6a 20                	push   $0x20
   117a5:	6a 21                	push   $0x21
   117a7:	e8 1d fc ff ff       	call   113c9 <outb>
   117ac:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   117af:	6a 04                	push   $0x4
   117b1:	6a 21                	push   $0x21
   117b3:	e8 11 fc ff ff       	call   113c9 <outb>
   117b8:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   117bb:	6a 01                	push   $0x1
   117bd:	6a 21                	push   $0x21
   117bf:	e8 05 fc ff ff       	call   113c9 <outb>
   117c4:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   117c7:	6a 11                	push   $0x11
   117c9:	68 a0 00 00 00       	push   $0xa0
   117ce:	e8 f6 fb ff ff       	call   113c9 <outb>
   117d3:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   117d6:	6a 28                	push   $0x28
   117d8:	68 a1 00 00 00       	push   $0xa1
   117dd:	e8 e7 fb ff ff       	call   113c9 <outb>
   117e2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   117e5:	6a 02                	push   $0x2
   117e7:	68 a1 00 00 00       	push   $0xa1
   117ec:	e8 d8 fb ff ff       	call   113c9 <outb>
   117f1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   117f4:	6a 01                	push   $0x1
   117f6:	68 a1 00 00 00       	push   $0xa1
   117fb:	e8 c9 fb ff ff       	call   113c9 <outb>
   11800:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11803:	68 fb 00 00 00       	push   $0xfb
   11808:	6a 21                	push   $0x21
   1180a:	e8 ba fb ff ff       	call   113c9 <outb>
   1180f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11812:	68 ff 00 00 00       	push   $0xff
   11817:	68 a1 00 00 00       	push   $0xa1
   1181c:	e8 a8 fb ff ff       	call   113c9 <outb>
   11821:	83 c4 08             	add    $0x8,%esp
}
   11824:	90                   	nop
   11825:	c9                   	leave  
   11826:	c3                   	ret    

00011827 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11827:	55                   	push   %ebp
   11828:	89 e5                	mov    %esp,%ebp
   1182a:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   1182d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11834:	eb 25                	jmp    1185b <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11836:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   1183b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1183e:	c1 e0 03             	shl    $0x3,%eax
   11841:	05 00 8a 01 00       	add    $0x18a00,%eax
   11846:	68 00 8e 00 00       	push   $0x8e00
   1184b:	52                   	push   %edx
   1184c:	6a 08                	push   $0x8
   1184e:	50                   	push   %eax
   1184f:	e8 bf f9 ff ff       	call   11213 <gate_desc_set>
   11854:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11857:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1185b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1185f:	7e d5                	jle    11836 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11861:	83 ec 08             	sub    $0x8,%esp
   11864:	68 4a 00 01 00       	push   $0x1004a
   11869:	6a 00                	push   $0x0
   1186b:	e8 77 01 00 00       	call   119e7 <irq_install>
   11870:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11873:	83 ec 08             	sub    $0x8,%esp
   11876:	68 69 00 01 00       	push   $0x10069
   1187b:	6a 01                	push   $0x1
   1187d:	e8 65 01 00 00       	call   119e7 <irq_install>
   11882:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11885:	83 ec 08             	sub    $0x8,%esp
   11888:	68 88 00 01 00       	push   $0x10088
   1188d:	6a 02                	push   $0x2
   1188f:	e8 53 01 00 00       	call   119e7 <irq_install>
   11894:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11897:	83 ec 08             	sub    $0x8,%esp
   1189a:	68 a7 00 01 00       	push   $0x100a7
   1189f:	6a 03                	push   $0x3
   118a1:	e8 41 01 00 00       	call   119e7 <irq_install>
   118a6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   118a9:	83 ec 08             	sub    $0x8,%esp
   118ac:	68 c6 00 01 00       	push   $0x100c6
   118b1:	6a 04                	push   $0x4
   118b3:	e8 2f 01 00 00       	call   119e7 <irq_install>
   118b8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   118bb:	83 ec 08             	sub    $0x8,%esp
   118be:	68 e5 00 01 00       	push   $0x100e5
   118c3:	6a 05                	push   $0x5
   118c5:	e8 1d 01 00 00       	call   119e7 <irq_install>
   118ca:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   118cd:	83 ec 08             	sub    $0x8,%esp
   118d0:	68 04 01 01 00       	push   $0x10104
   118d5:	6a 06                	push   $0x6
   118d7:	e8 0b 01 00 00       	call   119e7 <irq_install>
   118dc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   118df:	83 ec 08             	sub    $0x8,%esp
   118e2:	68 23 01 01 00       	push   $0x10123
   118e7:	6a 07                	push   $0x7
   118e9:	e8 f9 00 00 00       	call   119e7 <irq_install>
   118ee:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   118f1:	83 ec 08             	sub    $0x8,%esp
   118f4:	68 42 01 01 00       	push   $0x10142
   118f9:	6a 08                	push   $0x8
   118fb:	e8 e7 00 00 00       	call   119e7 <irq_install>
   11900:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11903:	83 ec 08             	sub    $0x8,%esp
   11906:	68 5f 01 01 00       	push   $0x1015f
   1190b:	6a 0a                	push   $0xa
   1190d:	e8 d5 00 00 00       	call   119e7 <irq_install>
   11912:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11915:	83 ec 08             	sub    $0x8,%esp
   11918:	68 7c 01 01 00       	push   $0x1017c
   1191d:	6a 0b                	push   $0xb
   1191f:	e8 c3 00 00 00       	call   119e7 <irq_install>
   11924:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11927:	83 ec 08             	sub    $0x8,%esp
   1192a:	68 99 01 01 00       	push   $0x10199
   1192f:	6a 0c                	push   $0xc
   11931:	e8 b1 00 00 00       	call   119e7 <irq_install>
   11936:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11939:	83 ec 08             	sub    $0x8,%esp
   1193c:	68 b8 01 01 00       	push   $0x101b8
   11941:	6a 0d                	push   $0xd
   11943:	e8 9f 00 00 00       	call   119e7 <irq_install>
   11948:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   1194b:	83 ec 08             	sub    $0x8,%esp
   1194e:	68 d5 01 01 00       	push   $0x101d5
   11953:	6a 0e                	push   $0xe
   11955:	e8 8d 00 00 00       	call   119e7 <irq_install>
   1195a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   1195d:	83 ec 08             	sub    $0x8,%esp
   11960:	68 f2 01 01 00       	push   $0x101f2
   11965:	6a 10                	push   $0x10
   11967:	e8 7b 00 00 00       	call   119e7 <irq_install>
   1196c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   1196f:	83 ec 08             	sub    $0x8,%esp
   11972:	68 11 02 01 00       	push   $0x10211
   11977:	6a 11                	push   $0x11
   11979:	e8 69 00 00 00       	call   119e7 <irq_install>
   1197e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11981:	83 ec 08             	sub    $0x8,%esp
   11984:	68 2e 02 01 00       	push   $0x1022e
   11989:	6a 12                	push   $0x12
   1198b:	e8 57 00 00 00       	call   119e7 <irq_install>
   11990:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11993:	83 ec 08             	sub    $0x8,%esp
   11996:	68 4d 02 01 00       	push   $0x1024d
   1199b:	6a 13                	push   $0x13
   1199d:	e8 45 00 00 00       	call   119e7 <irq_install>
   119a2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   119a5:	83 ec 08             	sub    $0x8,%esp
   119a8:	68 6c 02 01 00       	push   $0x1026c
   119ad:	6a 14                	push   $0x14
   119af:	e8 33 00 00 00       	call   119e7 <irq_install>
   119b4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   119b7:	83 ec 08             	sub    $0x8,%esp
   119ba:	68 8b 02 01 00       	push   $0x1028b
   119bf:	6a 15                	push   $0x15
   119c1:	e8 21 00 00 00       	call   119e7 <irq_install>
   119c6:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   119c9:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   119ce:	83 ec 08             	sub    $0x8,%esp
   119d1:	68 00 04 00 00       	push   $0x400
   119d6:	50                   	push   %eax
   119d7:	e8 1a fa ff ff       	call   113f6 <lidt>
   119dc:	83 c4 10             	add    $0x10,%esp

    init_pic();
   119df:	e8 b0 fd ff ff       	call   11794 <init_pic>
}
   119e4:	90                   	nop
   119e5:	c9                   	leave  
   119e6:	c3                   	ret    

000119e7 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   119e7:	55                   	push   %ebp
   119e8:	89 e5                	mov    %esp,%ebp
   119ea:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   119ed:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   119f1:	7e 07                	jle    119fa <irq_install+0x13>
        return -1;
   119f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   119f8:	eb 20                	jmp    11a1a <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   119fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   119fd:	8b 55 08             	mov    0x8(%ebp),%edx
   11a00:	c1 e2 03             	shl    $0x3,%edx
   11a03:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11a09:	68 00 8e 00 00       	push   $0x8e00
   11a0e:	50                   	push   %eax
   11a0f:	6a 08                	push   $0x8
   11a11:	52                   	push   %edx
   11a12:	e8 fc f7 ff ff       	call   11213 <gate_desc_set>
   11a17:	83 c4 10             	add    $0x10,%esp
}
   11a1a:	c9                   	leave  
   11a1b:	c3                   	ret    

00011a1c <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11a1c:	55                   	push   %ebp
   11a1d:	89 e5                	mov    %esp,%ebp
   11a1f:	53                   	push   %ebx
   11a20:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11a23:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11a27:	7e 78                	jle    11aa1 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11a29:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11a2d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a31:	7f 32                	jg     11a65 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11a33:	6a 21                	push   $0x21
   11a35:	e8 72 f9 ff ff       	call   113ac <inb>
   11a3a:	83 c4 04             	add    $0x4,%esp
   11a3d:	89 c2                	mov    %eax,%edx
   11a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a42:	bb 01 00 00 00       	mov    $0x1,%ebx
   11a47:	89 c1                	mov    %eax,%ecx
   11a49:	d3 e3                	shl    %cl,%ebx
   11a4b:	89 d8                	mov    %ebx,%eax
   11a4d:	f7 d0                	not    %eax
   11a4f:	21 d0                	and    %edx,%eax
   11a51:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11a54:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11a58:	50                   	push   %eax
   11a59:	6a 21                	push   $0x21
   11a5b:	e8 69 f9 ff ff       	call   113c9 <outb>
   11a60:	83 c4 08             	add    $0x8,%esp
   11a63:	eb 3d                	jmp    11aa2 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11a65:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11a69:	68 a1 00 00 00       	push   $0xa1
   11a6e:	e8 39 f9 ff ff       	call   113ac <inb>
   11a73:	83 c4 04             	add    $0x4,%esp
   11a76:	89 c2                	mov    %eax,%edx
   11a78:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7b:	bb 01 00 00 00       	mov    $0x1,%ebx
   11a80:	89 c1                	mov    %eax,%ecx
   11a82:	d3 e3                	shl    %cl,%ebx
   11a84:	89 d8                	mov    %ebx,%eax
   11a86:	f7 d0                	not    %eax
   11a88:	21 d0                	and    %edx,%eax
   11a8a:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11a8d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11a91:	50                   	push   %eax
   11a92:	68 a1 00 00 00       	push   $0xa1
   11a97:	e8 2d f9 ff ff       	call   113c9 <outb>
   11a9c:	83 c4 08             	add    $0x8,%esp
   11a9f:	eb 01                	jmp    11aa2 <irq_enable+0x86>
        return;
   11aa1:	90                   	nop
    }
}
   11aa2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11aa5:	c9                   	leave  
   11aa6:	c3                   	ret    

00011aa7 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11aa7:	55                   	push   %ebp
   11aa8:	89 e5                	mov    %esp,%ebp
   11aaa:	53                   	push   %ebx
   11aab:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11aae:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11ab2:	7e 74                	jle    11b28 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11ab4:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11ab8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11abc:	7f 30                	jg     11aee <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11abe:	6a 21                	push   $0x21
   11ac0:	e8 e7 f8 ff ff       	call   113ac <inb>
   11ac5:	83 c4 04             	add    $0x4,%esp
   11ac8:	89 c3                	mov    %eax,%ebx
   11aca:	8b 45 08             	mov    0x8(%ebp),%eax
   11acd:	ba 01 00 00 00       	mov    $0x1,%edx
   11ad2:	89 c1                	mov    %eax,%ecx
   11ad4:	d3 e2                	shl    %cl,%edx
   11ad6:	89 d0                	mov    %edx,%eax
   11ad8:	09 d8                	or     %ebx,%eax
   11ada:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11add:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11ae1:	50                   	push   %eax
   11ae2:	6a 21                	push   $0x21
   11ae4:	e8 e0 f8 ff ff       	call   113c9 <outb>
   11ae9:	83 c4 08             	add    $0x8,%esp
   11aec:	eb 3b                	jmp    11b29 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11aee:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11af2:	68 a1 00 00 00       	push   $0xa1
   11af7:	e8 b0 f8 ff ff       	call   113ac <inb>
   11afc:	83 c4 04             	add    $0x4,%esp
   11aff:	89 c3                	mov    %eax,%ebx
   11b01:	8b 45 08             	mov    0x8(%ebp),%eax
   11b04:	ba 01 00 00 00       	mov    $0x1,%edx
   11b09:	89 c1                	mov    %eax,%ecx
   11b0b:	d3 e2                	shl    %cl,%edx
   11b0d:	89 d0                	mov    %edx,%eax
   11b0f:	09 d8                	or     %ebx,%eax
   11b11:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11b14:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11b18:	50                   	push   %eax
   11b19:	68 a1 00 00 00       	push   $0xa1
   11b1e:	e8 a6 f8 ff ff       	call   113c9 <outb>
   11b23:	83 c4 08             	add    $0x8,%esp
   11b26:	eb 01                	jmp    11b29 <irq_disable+0x82>
        return;
   11b28:	90                   	nop
    }
}
   11b29:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11b2c:	c9                   	leave  
   11b2d:	c3                   	ret    

00011b2e <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11b2e:	55                   	push   %ebp
   11b2f:	89 e5                	mov    %esp,%ebp
    cli();
   11b31:	e8 b2 f8 ff ff       	call   113e8 <cli>
}
   11b36:	90                   	nop
   11b37:	5d                   	pop    %ebp
   11b38:	c3                   	ret    

00011b39 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11b39:	55                   	push   %ebp
   11b3a:	89 e5                	mov    %esp,%ebp
    sti();
   11b3c:	e8 ae f8 ff ff       	call   113ef <sti>
}
   11b41:	90                   	nop
   11b42:	5d                   	pop    %ebp
   11b43:	c3                   	ret    

00011b44 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11b44:	55                   	push   %ebp
   11b45:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11b47:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11b4b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11b4f:	7e 0f                	jle    11b60 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11b51:	6a 20                	push   $0x20
   11b53:	68 a0 00 00 00       	push   $0xa0
   11b58:	e8 6c f8 ff ff       	call   113c9 <outb>
   11b5d:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11b60:	6a 20                	push   $0x20
   11b62:	6a 20                	push   $0x20
   11b64:	e8 60 f8 ff ff       	call   113c9 <outb>
   11b69:	83 c4 08             	add    $0x8,%esp
}
   11b6c:	90                   	nop
   11b6d:	c9                   	leave  
   11b6e:	c3                   	ret    

00011b6f <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11b6f:	55                   	push   %ebp
   11b70:	89 e5                	mov    %esp,%ebp
   11b72:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11b75:	e8 ab f8 ff ff       	call   11425 <read_eflags>
   11b7a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11b7d:	e8 ac ff ff ff       	call   11b2e <irq_disable_global>
    return state;
   11b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11b85:	c9                   	leave  
   11b86:	c3                   	ret    

00011b87 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11b87:	55                   	push   %ebp
   11b88:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11b8a:	ff 75 08             	pushl  0x8(%ebp)
   11b8d:	e8 a3 f8 ff ff       	call   11435 <write_eflags>
   11b92:	83 c4 04             	add    $0x4,%esp
   11b95:	90                   	nop
   11b96:	c9                   	leave  
   11b97:	c3                   	ret    

00011b98 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11b98:	55                   	push   %ebp
   11b99:	89 e5                	mov    %esp,%ebp
   11b9b:	83 ec 08             	sub    $0x8,%esp
   11b9e:	8b 55 08             	mov    0x8(%ebp),%edx
   11ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ba4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11ba8:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11bab:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11baf:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11bb3:	ee                   	out    %al,(%dx)
}
   11bb4:	90                   	nop
   11bb5:	c9                   	leave  
   11bb6:	c3                   	ret    

00011bb7 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11bb7:	55                   	push   %ebp
   11bb8:	89 e5                	mov    %esp,%ebp
   11bba:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11bbd:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11bc2:	83 c0 01             	add    $0x1,%eax
   11bc5:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11bca:	83 ec 0c             	sub    $0xc,%esp
   11bcd:	6a 20                	push   $0x20
   11bcf:	e8 70 ff ff ff       	call   11b44 <pic_send_eoi>
   11bd4:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11bd7:	e8 f1 f3 ff ff       	call   10fcd <task_time_tick>
}
   11bdc:	90                   	nop
   11bdd:	c9                   	leave  
   11bde:	c3                   	ret    

00011bdf <init_pit>:


static void init_pit(void) {
   11bdf:	55                   	push   %ebp
   11be0:	89 e5                	mov    %esp,%ebp
   11be2:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11be5:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11bec:	6a 36                	push   $0x36
   11bee:	6a 43                	push   $0x43
   11bf0:	e8 a3 ff ff ff       	call   11b98 <outb>
   11bf5:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11bf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bfb:	0f b6 c0             	movzbl %al,%eax
   11bfe:	50                   	push   %eax
   11bff:	6a 40                	push   $0x40
   11c01:	e8 92 ff ff ff       	call   11b98 <outb>
   11c06:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c0c:	c1 e8 08             	shr    $0x8,%eax
   11c0f:	0f b6 c0             	movzbl %al,%eax
   11c12:	50                   	push   %eax
   11c13:	6a 40                	push   $0x40
   11c15:	e8 7e ff ff ff       	call   11b98 <outb>
   11c1a:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11c1d:	83 ec 08             	sub    $0x8,%esp
   11c20:	68 a8 02 01 00       	push   $0x102a8
   11c25:	6a 20                	push   $0x20
   11c27:	e8 bb fd ff ff       	call   119e7 <irq_install>
   11c2c:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11c2f:	83 ec 0c             	sub    $0xc,%esp
   11c32:	6a 20                	push   $0x20
   11c34:	e8 e3 fd ff ff       	call   11a1c <irq_enable>
   11c39:	83 c4 10             	add    $0x10,%esp
}
   11c3c:	90                   	nop
   11c3d:	c9                   	leave  
   11c3e:	c3                   	ret    

00011c3f <timer_init>:

void timer_init(void) {
   11c3f:	55                   	push   %ebp
   11c40:	89 e5                	mov    %esp,%ebp
   11c42:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11c45:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   11c4c:	00 00 00 
    init_pit();
   11c4f:	e8 8b ff ff ff       	call   11bdf <init_pit>
   11c54:	90                   	nop
   11c55:	c9                   	leave  
   11c56:	c3                   	ret    

00011c57 <list_size>:
static inline int list_size(list_t* list) {
   11c57:	55                   	push   %ebp
   11c58:	89 e5                	mov    %esp,%ebp
    return list->count;
   11c5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c5d:	8b 40 08             	mov    0x8(%eax),%eax
}
   11c60:	5d                   	pop    %ebp
   11c61:	c3                   	ret    

00011c62 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11c62:	55                   	push   %ebp
   11c63:	89 e5                	mov    %esp,%ebp
    return list->first;
   11c65:	8b 45 08             	mov    0x8(%ebp),%eax
   11c68:	8b 00                	mov    (%eax),%eax
}
   11c6a:	5d                   	pop    %ebp
   11c6b:	c3                   	ret    

00011c6c <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11c6c:	55                   	push   %ebp
   11c6d:	89 e5                	mov    %esp,%ebp
    return list->last;
   11c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11c72:	8b 40 04             	mov    0x4(%eax),%eax
}
   11c75:	5d                   	pop    %ebp
   11c76:	c3                   	ret    

00011c77 <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   11c77:	55                   	push   %ebp
   11c78:	89 e5                	mov    %esp,%ebp
   11c7a:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11c7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c80:	8b 40 50             	mov    0x50(%eax),%eax
   11c83:	85 c0                	test   %eax,%eax
   11c85:	75 19                	jne    11ca0 <kernel_init+0x29>
   11c87:	68 70 32 01 00       	push   $0x13270
   11c8c:	68 60 33 01 00       	push   $0x13360
   11c91:	6a 12                	push   $0x12
   11c93:	68 94 32 01 00       	push   $0x13294
   11c98:	e8 b0 0c 00 00       	call   1294d <pannic>
   11c9d:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11ca0:	90                   	nop


    log_init();
   11ca1:	e8 0f 0f 00 00       	call   12bb5 <log_init>

    memory_init(boot_info);
   11ca6:	83 ec 0c             	sub    $0xc,%esp
   11ca9:	ff 75 08             	pushl  0x8(%ebp)
   11cac:	e8 ab eb ff ff       	call   1085c <memory_init>
   11cb1:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11cb4:	e8 0e f6 ff ff       	call   112c7 <cpu_init>


    irq_init();
   11cb9:	e8 69 fb ff ff       	call   11827 <irq_init>
    timer_init();
   11cbe:	e8 7c ff ff ff       	call   11c3f <timer_init>

    task_manager_init();
   11cc3:	e8 29 f0 ff ff       	call   10cf1 <task_manager_init>
}
   11cc8:	90                   	nop
   11cc9:	c9                   	leave  
   11cca:	c3                   	ret    

00011ccb <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   11ccb:	55                   	push   %ebp
   11ccc:	89 e5                	mov    %esp,%ebp
   11cce:	56                   	push   %esi
   11ccf:	53                   	push   %ebx
   11cd0:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11cd3:	83 ec 0c             	sub    $0xc,%esp
   11cd6:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11cd9:	50                   	push   %eax
   11cda:	e8 b7 0c 00 00       	call   12996 <list_init>
   11cdf:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11ce2:	83 ec 0c             	sub    $0xc,%esp
   11ce5:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11ce8:	50                   	push   %eax
   11ce9:	e8 69 ff ff ff       	call   11c57 <list_size>
   11cee:	83 c4 10             	add    $0x10,%esp
   11cf1:	89 c6                	mov    %eax,%esi
   11cf3:	83 ec 0c             	sub    $0xc,%esp
   11cf6:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11cf9:	50                   	push   %eax
   11cfa:	e8 6d ff ff ff       	call   11c6c <list_last>
   11cff:	83 c4 10             	add    $0x10,%esp
   11d02:	89 c3                	mov    %eax,%ebx
   11d04:	83 ec 0c             	sub    $0xc,%esp
   11d07:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d0a:	50                   	push   %eax
   11d0b:	e8 52 ff ff ff       	call   11c62 <list_first>
   11d10:	83 c4 10             	add    $0x10,%esp
   11d13:	56                   	push   %esi
   11d14:	53                   	push   %ebx
   11d15:	50                   	push   %eax
   11d16:	68 dc 32 01 00       	push   $0x132dc
   11d1b:	e8 37 0f 00 00       	call   12c57 <log_printf>
   11d20:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11d23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d2a:	eb 3b                	jmp    11d67 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   11d2c:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11d2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d32:	c1 e2 03             	shl    $0x3,%edx
   11d35:	01 d0                	add    %edx,%eax
   11d37:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11d3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11d3d:	83 ec 04             	sub    $0x4,%esp
   11d40:	50                   	push   %eax
   11d41:	ff 75 f4             	pushl  -0xc(%ebp)
   11d44:	68 05 33 01 00       	push   $0x13305
   11d49:	e8 09 0f 00 00       	call   12c57 <log_printf>
   11d4e:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11d51:	83 ec 08             	sub    $0x8,%esp
   11d54:	ff 75 dc             	pushl  -0x24(%ebp)
   11d57:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d5a:	50                   	push   %eax
   11d5b:	e8 59 0c 00 00       	call   129b9 <list_insert_front>
   11d60:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11d63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d67:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11d6b:	7e bf                	jle    11d2c <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   11d6d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11d74:	eb 33                	jmp    11da9 <link_test+0xde>
        list_remove_front(&list);
   11d76:	83 ec 0c             	sub    $0xc,%esp
   11d79:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d7c:	50                   	push   %eax
   11d7d:	e8 f9 0c 00 00       	call   12a7b <list_remove_front>
   11d82:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   11d85:	83 ec 0c             	sub    $0xc,%esp
   11d88:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d8b:	50                   	push   %eax
   11d8c:	e8 c6 fe ff ff       	call   11c57 <list_size>
   11d91:	83 c4 10             	add    $0x10,%esp
   11d94:	83 ec 08             	sub    $0x8,%esp
   11d97:	50                   	push   %eax
   11d98:	68 0d 33 01 00       	push   $0x1330d
   11d9d:	e8 b5 0e 00 00       	call   12c57 <log_printf>
   11da2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11da5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11da9:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11dad:	7e c7                	jle    11d76 <link_test+0xab>
    }

    list_init(&list);
   11daf:	83 ec 0c             	sub    $0xc,%esp
   11db2:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11db5:	50                   	push   %eax
   11db6:	e8 db 0b 00 00       	call   12996 <list_init>
   11dbb:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11dbe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11dc5:	eb 3b                	jmp    11e02 <link_test+0x137>
        list_node_t* node = &nodes[i];
   11dc7:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11dca:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11dcd:	c1 e2 03             	shl    $0x3,%edx
   11dd0:	01 d0                	add    %edx,%eax
   11dd2:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11dd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11dd8:	83 ec 04             	sub    $0x4,%esp
   11ddb:	50                   	push   %eax
   11ddc:	ff 75 ec             	pushl  -0x14(%ebp)
   11ddf:	68 05 33 01 00       	push   $0x13305
   11de4:	e8 6e 0e 00 00       	call   12c57 <log_printf>
   11de9:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11dec:	83 ec 08             	sub    $0x8,%esp
   11def:	ff 75 e0             	pushl  -0x20(%ebp)
   11df2:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11df5:	50                   	push   %eax
   11df6:	e8 1d 0c 00 00       	call   12a18 <list_insert_back>
   11dfb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11dfe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11e02:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11e06:	7e bf                	jle    11dc7 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11e08:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11e0f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11e16:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11e1d:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11e24:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11e27:	83 c0 04             	add    $0x4,%eax
   11e2a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11e2d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11e31:	74 08                	je     11e3b <link_test+0x170>
   11e33:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11e36:	83 e8 04             	sub    $0x4,%eax
   11e39:	eb 05                	jmp    11e40 <link_test+0x175>
   11e3b:	b8 00 00 00 00       	mov    $0x0,%eax
   11e40:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11e43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11e46:	8b 00                	mov    (%eax),%eax
   11e48:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11e4d:	74 10                	je     11e5f <link_test+0x194>
        log_printf("error!");
   11e4f:	83 ec 0c             	sub    $0xc,%esp
   11e52:	68 12 33 01 00       	push   $0x13312
   11e57:	e8 fb 0d 00 00       	call   12c57 <log_printf>
   11e5c:	83 c4 10             	add    $0x10,%esp
    }

}
   11e5f:	90                   	nop
   11e60:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11e63:	5b                   	pop    %ebx
   11e64:	5e                   	pop    %esi
   11e65:	5d                   	pop    %ebp
   11e66:	c3                   	ret    

00011e67 <move_to_first_task>:


void move_to_first_task(void) {
   11e67:	55                   	push   %ebp
   11e68:	89 e5                	mov    %esp,%ebp
   11e6a:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   11e6d:	e8 95 f0 ff ff       	call   10f07 <task_current>
   11e72:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   11e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e79:	75 19                	jne    11e94 <move_to_first_task+0x2d>
   11e7b:	68 19 33 01 00       	push   $0x13319
   11e80:	68 6c 33 01 00       	push   $0x1336c
   11e85:	6a 68                	push   $0x68
   11e87:	68 94 32 01 00       	push   $0x13294
   11e8c:	e8 bc 0a 00 00       	call   1294d <pannic>
   11e91:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   11e94:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e97:	83 c0 48             	add    $0x48,%eax
   11e9a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    __asm__ __volatile__(
        "jmp *%[ip]"::[ip]"r"(tss->eip)
   11e9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ea0:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   11ea3:	ff e0                	jmp    *%eax
    );

    // far_jump((uint32_t)tss, 0);
}
   11ea5:	90                   	nop
   11ea6:	c9                   	leave  
   11ea7:	c3                   	ret    

00011ea8 <init_main>:


void init_main(void) {
   11ea8:	55                   	push   %ebp
   11ea9:	89 e5                	mov    %esp,%ebp
   11eab:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   11eae:	83 ec 0c             	sub    $0xc,%esp
   11eb1:	68 23 33 01 00       	push   $0x13323
   11eb6:	e8 9c 0d 00 00       	call   12c57 <log_printf>
   11ebb:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   11ebe:	83 ec 04             	sub    $0x4,%esp
   11ec1:	68 39 33 01 00       	push   $0x13339
   11ec6:	68 3e 33 01 00       	push   $0x1333e
   11ecb:	68 44 33 01 00       	push   $0x13344
   11ed0:	e8 82 0d 00 00       	call   12c57 <log_printf>
   11ed5:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   11ed8:	83 ec 0c             	sub    $0xc,%esp
   11edb:	6a 61                	push   $0x61
   11edd:	68 56 34 12 00       	push   $0x123456
   11ee2:	6a 85                	push   $0xffffff85
   11ee4:	68 39 30 00 00       	push   $0x3039
   11ee9:	68 53 33 01 00       	push   $0x13353
   11eee:	e8 64 0d 00 00       	call   12c57 <log_printf>
   11ef3:	83 c4 20             	add    $0x20,%esp

    //
    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
    //

    task_first_init();
   11ef6:	e8 a4 ee ff ff       	call   10d9f <task_first_init>
    move_to_first_task();
   11efb:	e8 67 ff ff ff       	call   11e67 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   11f00:	90                   	nop
   11f01:	c9                   	leave  
   11f02:	c3                   	ret    

00011f03 <list_size>:
static inline int list_size(list_t* list) {
   11f03:	55                   	push   %ebp
   11f04:	89 e5                	mov    %esp,%ebp
    return list->count;
   11f06:	8b 45 08             	mov    0x8(%ebp),%eax
   11f09:	8b 40 08             	mov    0x8(%eax),%eax
}
   11f0c:	5d                   	pop    %ebp
   11f0d:	c3                   	ret    

00011f0e <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   11f0e:	55                   	push   %ebp
   11f0f:	89 e5                	mov    %esp,%ebp
   11f11:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   11f14:	8b 45 08             	mov    0x8(%ebp),%eax
   11f17:	83 ec 08             	sub    $0x8,%esp
   11f1a:	ff 75 0c             	pushl  0xc(%ebp)
   11f1d:	50                   	push   %eax
   11f1e:	e8 0a 05 00 00       	call   1242d <kstrcpy>
   11f23:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   11f26:	8b 45 08             	mov    0x8(%ebp),%eax
   11f29:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   11f30:	8b 45 08             	mov    0x8(%ebp),%eax
   11f33:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   11f3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3d:	83 c0 48             	add    $0x48,%eax
   11f40:	83 ec 0c             	sub    $0xc,%esp
   11f43:	50                   	push   %eax
   11f44:	e8 4d 0a 00 00       	call   12996 <list_init>
   11f49:	83 c4 10             	add    $0x10,%esp
}
   11f4c:	90                   	nop
   11f4d:	c9                   	leave  
   11f4e:	c3                   	ret    

00011f4f <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   11f4f:	55                   	push   %ebp
   11f50:	89 e5                	mov    %esp,%ebp
   11f52:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11f55:	e8 15 fc ff ff       	call   11b6f <irq_enter_protection>
   11f5a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11f5d:	e8 a5 ef ff ff       	call   10f07 <task_current>
   11f62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11f65:	8b 45 08             	mov    0x8(%ebp),%eax
   11f68:	8b 40 44             	mov    0x44(%eax),%eax
   11f6b:	85 c0                	test   %eax,%eax
   11f6d:	75 15                	jne    11f84 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   11f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f72:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   11f79:	8b 45 08             	mov    0x8(%ebp),%eax
   11f7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11f7f:	89 50 40             	mov    %edx,0x40(%eax)
   11f82:	eb 48                	jmp    11fcc <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   11f84:	8b 45 08             	mov    0x8(%ebp),%eax
   11f87:	8b 40 40             	mov    0x40(%eax),%eax
   11f8a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f8d:	75 11                	jne    11fa0 <mutex_acquire+0x51>
        mutex->locked_count++;
   11f8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f92:	8b 40 44             	mov    0x44(%eax),%eax
   11f95:	8d 50 01             	lea    0x1(%eax),%edx
   11f98:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9b:	89 50 44             	mov    %edx,0x44(%eax)
   11f9e:	eb 2c                	jmp    11fcc <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   11fa0:	83 ec 0c             	sub    $0xc,%esp
   11fa3:	ff 75 f0             	pushl  -0x10(%ebp)
   11fa6:	e8 ee ee ff ff       	call   10e99 <task_set_blocked>
   11fab:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   11fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fb1:	8d 50 34             	lea    0x34(%eax),%edx
   11fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb7:	83 c0 48             	add    $0x48,%eax
   11fba:	83 ec 08             	sub    $0x8,%esp
   11fbd:	52                   	push   %edx
   11fbe:	50                   	push   %eax
   11fbf:	e8 54 0a 00 00       	call   12a18 <list_insert_back>
   11fc4:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11fc7:	e8 a6 ef ff ff       	call   10f72 <task_dispatch>
    }

    irq_leave_protection(state);
   11fcc:	83 ec 0c             	sub    $0xc,%esp
   11fcf:	ff 75 f4             	pushl  -0xc(%ebp)
   11fd2:	e8 b0 fb ff ff       	call   11b87 <irq_leave_protection>
   11fd7:	83 c4 10             	add    $0x10,%esp
}
   11fda:	90                   	nop
   11fdb:	c9                   	leave  
   11fdc:	c3                   	ret    

00011fdd <mutex_release>:

void mutex_release(mutex_t* mutex) {
   11fdd:	55                   	push   %ebp
   11fde:	89 e5                	mov    %esp,%ebp
   11fe0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11fe3:	e8 87 fb ff ff       	call   11b6f <irq_enter_protection>
   11fe8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11feb:	e8 17 ef ff ff       	call   10f07 <task_current>
   11ff0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11ff3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff6:	8b 40 40             	mov    0x40(%eax),%eax
   11ff9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11ffc:	0f 85 8a 00 00 00    	jne    1208c <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   12002:	8b 45 08             	mov    0x8(%ebp),%eax
   12005:	8b 40 44             	mov    0x44(%eax),%eax
   12008:	8d 50 ff             	lea    -0x1(%eax),%edx
   1200b:	8b 45 08             	mov    0x8(%ebp),%eax
   1200e:	89 50 44             	mov    %edx,0x44(%eax)
   12011:	8b 45 08             	mov    0x8(%ebp),%eax
   12014:	8b 40 44             	mov    0x44(%eax),%eax
   12017:	85 c0                	test   %eax,%eax
   12019:	75 71                	jne    1208c <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   1201b:	8b 45 08             	mov    0x8(%ebp),%eax
   1201e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   12025:	8b 45 08             	mov    0x8(%ebp),%eax
   12028:	83 c0 48             	add    $0x48,%eax
   1202b:	83 ec 0c             	sub    $0xc,%esp
   1202e:	50                   	push   %eax
   1202f:	e8 cf fe ff ff       	call   11f03 <list_size>
   12034:	83 c4 10             	add    $0x10,%esp
   12037:	85 c0                	test   %eax,%eax
   12039:	74 51                	je     1208c <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   1203b:	8b 45 08             	mov    0x8(%ebp),%eax
   1203e:	83 c0 48             	add    $0x48,%eax
   12041:	83 ec 0c             	sub    $0xc,%esp
   12044:	50                   	push   %eax
   12045:	e8 31 0a 00 00       	call   12a7b <list_remove_front>
   1204a:	83 c4 10             	add    $0x10,%esp
   1204d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   12050:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12054:	74 08                	je     1205e <mutex_release+0x81>
   12056:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12059:	83 e8 34             	sub    $0x34,%eax
   1205c:	eb 05                	jmp    12063 <mutex_release+0x86>
   1205e:	b8 00 00 00 00       	mov    $0x0,%eax
   12063:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12066:	83 ec 0c             	sub    $0xc,%esp
   12069:	ff 75 e8             	pushl  -0x18(%ebp)
   1206c:	e8 f4 ed ff ff       	call   10e65 <task_set_ready>
   12071:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12074:	8b 45 08             	mov    0x8(%ebp),%eax
   12077:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1207a:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   1207d:	8b 45 08             	mov    0x8(%ebp),%eax
   12080:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   12087:	e8 e6 ee ff ff       	call   10f72 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   1208c:	83 ec 0c             	sub    $0xc,%esp
   1208f:	ff 75 f4             	pushl  -0xc(%ebp)
   12092:	e8 f0 fa ff ff       	call   11b87 <irq_leave_protection>
   12097:	83 c4 10             	add    $0x10,%esp
   1209a:	90                   	nop
   1209b:	c9                   	leave  
   1209c:	c3                   	ret    

0001209d <list_size>:
static inline int list_size(list_t* list) {
   1209d:	55                   	push   %ebp
   1209e:	89 e5                	mov    %esp,%ebp
    return list->count;
   120a0:	8b 45 08             	mov    0x8(%ebp),%eax
   120a3:	8b 40 08             	mov    0x8(%eax),%eax
}
   120a6:	5d                   	pop    %ebp
   120a7:	c3                   	ret    

000120a8 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   120a8:	55                   	push   %ebp
   120a9:	89 e5                	mov    %esp,%ebp
   120ab:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   120ae:	8b 45 08             	mov    0x8(%ebp),%eax
   120b1:	8b 55 0c             	mov    0xc(%ebp),%edx
   120b4:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   120b6:	8b 45 08             	mov    0x8(%ebp),%eax
   120b9:	83 c0 04             	add    $0x4,%eax
   120bc:	83 ec 0c             	sub    $0xc,%esp
   120bf:	50                   	push   %eax
   120c0:	e8 d1 08 00 00       	call   12996 <list_init>
   120c5:	83 c4 10             	add    $0x10,%esp
}
   120c8:	90                   	nop
   120c9:	c9                   	leave  
   120ca:	c3                   	ret    

000120cb <sem_wait>:


void sem_wait(sem_t* sem) {
   120cb:	55                   	push   %ebp
   120cc:	89 e5                	mov    %esp,%ebp
   120ce:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   120d1:	e8 99 fa ff ff       	call   11b6f <irq_enter_protection>
   120d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   120d9:	8b 45 08             	mov    0x8(%ebp),%eax
   120dc:	8b 00                	mov    (%eax),%eax
   120de:	85 c0                	test   %eax,%eax
   120e0:	7e 0f                	jle    120f1 <sem_wait+0x26>
        sem->count--;
   120e2:	8b 45 08             	mov    0x8(%ebp),%eax
   120e5:	8b 00                	mov    (%eax),%eax
   120e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   120ea:	8b 45 08             	mov    0x8(%ebp),%eax
   120ed:	89 10                	mov    %edx,(%eax)
   120ef:	eb 34                	jmp    12125 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   120f1:	e8 11 ee ff ff       	call   10f07 <task_current>
   120f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   120f9:	83 ec 0c             	sub    $0xc,%esp
   120fc:	ff 75 f0             	pushl  -0x10(%ebp)
   120ff:	e8 95 ed ff ff       	call   10e99 <task_set_blocked>
   12104:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   12107:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1210a:	8d 50 34             	lea    0x34(%eax),%edx
   1210d:	8b 45 08             	mov    0x8(%ebp),%eax
   12110:	83 c0 04             	add    $0x4,%eax
   12113:	83 ec 08             	sub    $0x8,%esp
   12116:	52                   	push   %edx
   12117:	50                   	push   %eax
   12118:	e8 fb 08 00 00       	call   12a18 <list_insert_back>
   1211d:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12120:	e8 4d ee ff ff       	call   10f72 <task_dispatch>
    }

    irq_leave_protection(state);
   12125:	83 ec 0c             	sub    $0xc,%esp
   12128:	ff 75 f4             	pushl  -0xc(%ebp)
   1212b:	e8 57 fa ff ff       	call   11b87 <irq_leave_protection>
   12130:	83 c4 10             	add    $0x10,%esp
}
   12133:	90                   	nop
   12134:	c9                   	leave  
   12135:	c3                   	ret    

00012136 <sem_notify>:


void sem_notify(sem_t* sem) {
   12136:	55                   	push   %ebp
   12137:	89 e5                	mov    %esp,%ebp
   12139:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1213c:	e8 2e fa ff ff       	call   11b6f <irq_enter_protection>
   12141:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   12144:	8b 45 08             	mov    0x8(%ebp),%eax
   12147:	83 c0 04             	add    $0x4,%eax
   1214a:	83 ec 0c             	sub    $0xc,%esp
   1214d:	50                   	push   %eax
   1214e:	e8 4a ff ff ff       	call   1209d <list_size>
   12153:	83 c4 10             	add    $0x10,%esp
   12156:	85 c0                	test   %eax,%eax
   12158:	74 40                	je     1219a <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   1215a:	8b 45 08             	mov    0x8(%ebp),%eax
   1215d:	83 c0 04             	add    $0x4,%eax
   12160:	83 ec 0c             	sub    $0xc,%esp
   12163:	50                   	push   %eax
   12164:	e8 12 09 00 00       	call   12a7b <list_remove_front>
   12169:	83 c4 10             	add    $0x10,%esp
   1216c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   1216f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12173:	74 08                	je     1217d <sem_notify+0x47>
   12175:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12178:	83 e8 34             	sub    $0x34,%eax
   1217b:	eb 05                	jmp    12182 <sem_notify+0x4c>
   1217d:	b8 00 00 00 00       	mov    $0x0,%eax
   12182:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12185:	83 ec 0c             	sub    $0xc,%esp
   12188:	ff 75 ec             	pushl  -0x14(%ebp)
   1218b:	e8 d5 ec ff ff       	call   10e65 <task_set_ready>
   12190:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12193:	e8 da ed ff ff       	call   10f72 <task_dispatch>
   12198:	eb 0d                	jmp    121a7 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   1219a:	8b 45 08             	mov    0x8(%ebp),%eax
   1219d:	8b 00                	mov    (%eax),%eax
   1219f:	8d 50 01             	lea    0x1(%eax),%edx
   121a2:	8b 45 08             	mov    0x8(%ebp),%eax
   121a5:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   121a7:	83 ec 0c             	sub    $0xc,%esp
   121aa:	ff 75 f4             	pushl  -0xc(%ebp)
   121ad:	e8 d5 f9 ff ff       	call   11b87 <irq_leave_protection>
   121b2:	83 c4 10             	add    $0x10,%esp
}
   121b5:	90                   	nop
   121b6:	c9                   	leave  
   121b7:	c3                   	ret    

000121b8 <sem_count>:

int sem_count(sem_t* sem) {
   121b8:	55                   	push   %ebp
   121b9:	89 e5                	mov    %esp,%ebp
   121bb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   121be:	e8 ac f9 ff ff       	call   11b6f <irq_enter_protection>
   121c3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   121c6:	8b 45 08             	mov    0x8(%ebp),%eax
   121c9:	8b 00                	mov    (%eax),%eax
   121cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   121ce:	83 ec 0c             	sub    $0xc,%esp
   121d1:	ff 75 f4             	pushl  -0xc(%ebp)
   121d4:	e8 ae f9 ff ff       	call   11b87 <irq_leave_protection>
   121d9:	83 c4 10             	add    $0x10,%esp

    return count;
   121dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121df:	c9                   	leave  
   121e0:	c3                   	ret    

000121e1 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   121e1:	55                   	push   %ebp
   121e2:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   121e4:	8b 45 08             	mov    0x8(%ebp),%eax
   121e7:	83 c0 07             	add    $0x7,%eax
   121ea:	8d 50 07             	lea    0x7(%eax),%edx
   121ed:	85 c0                	test   %eax,%eax
   121ef:	0f 48 c2             	cmovs  %edx,%eax
   121f2:	c1 f8 03             	sar    $0x3,%eax
}
   121f5:	5d                   	pop    %ebp
   121f6:	c3                   	ret    

000121f7 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   121f7:	55                   	push   %ebp
   121f8:	89 e5                	mov    %esp,%ebp
   121fa:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   121fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12200:	8b 55 10             	mov    0x10(%ebp),%edx
   12203:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12205:	8b 45 08             	mov    0x8(%ebp),%eax
   12208:	8b 55 0c             	mov    0xc(%ebp),%edx
   1220b:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1220e:	8b 45 08             	mov    0x8(%ebp),%eax
   12211:	8b 00                	mov    (%eax),%eax
   12213:	50                   	push   %eax
   12214:	e8 c8 ff ff ff       	call   121e1 <bitmap_byte_count>
   12219:	83 c4 04             	add    $0x4,%esp
   1221c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1221f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12223:	74 07                	je     1222c <bitmap_init+0x35>
   12225:	ba ff 00 00 00       	mov    $0xff,%edx
   1222a:	eb 05                	jmp    12231 <bitmap_init+0x3a>
   1222c:	ba 00 00 00 00       	mov    $0x0,%edx
   12231:	8b 45 08             	mov    0x8(%ebp),%eax
   12234:	8b 40 04             	mov    0x4(%eax),%eax
   12237:	83 ec 04             	sub    $0x4,%esp
   1223a:	ff 75 f4             	pushl  -0xc(%ebp)
   1223d:	52                   	push   %edx
   1223e:	50                   	push   %eax
   1223f:	e8 a4 03 00 00       	call   125e8 <kmemset>
   12244:	83 c4 10             	add    $0x10,%esp
}
   12247:	90                   	nop
   12248:	c9                   	leave  
   12249:	c3                   	ret    

0001224a <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   1224a:	55                   	push   %ebp
   1224b:	89 e5                	mov    %esp,%ebp
   1224d:	56                   	push   %esi
   1224e:	53                   	push   %ebx
   1224f:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12252:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12259:	e9 a2 00 00 00       	jmp    12300 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   1225e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12262:	74 4a                	je     122ae <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12264:	8b 45 08             	mov    0x8(%ebp),%eax
   12267:	8b 50 04             	mov    0x4(%eax),%edx
   1226a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1226d:	8d 48 07             	lea    0x7(%eax),%ecx
   12270:	85 c0                	test   %eax,%eax
   12272:	0f 48 c1             	cmovs  %ecx,%eax
   12275:	c1 f8 03             	sar    $0x3,%eax
   12278:	89 c3                	mov    %eax,%ebx
   1227a:	89 d8                	mov    %ebx,%eax
   1227c:	01 d0                	add    %edx,%eax
   1227e:	0f b6 00             	movzbl (%eax),%eax
   12281:	89 c6                	mov    %eax,%esi
   12283:	8b 45 0c             	mov    0xc(%ebp),%eax
   12286:	99                   	cltd   
   12287:	c1 ea 1d             	shr    $0x1d,%edx
   1228a:	01 d0                	add    %edx,%eax
   1228c:	83 e0 07             	and    $0x7,%eax
   1228f:	29 d0                	sub    %edx,%eax
   12291:	ba 01 00 00 00       	mov    $0x1,%edx
   12296:	89 c1                	mov    %eax,%ecx
   12298:	d3 e2                	shl    %cl,%edx
   1229a:	89 d0                	mov    %edx,%eax
   1229c:	89 f2                	mov    %esi,%edx
   1229e:	09 c2                	or     %eax,%edx
   122a0:	8b 45 08             	mov    0x8(%ebp),%eax
   122a3:	8b 40 04             	mov    0x4(%eax),%eax
   122a6:	89 d9                	mov    %ebx,%ecx
   122a8:	01 c8                	add    %ecx,%eax
   122aa:	88 10                	mov    %dl,(%eax)
   122ac:	eb 4a                	jmp    122f8 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   122ae:	8b 45 08             	mov    0x8(%ebp),%eax
   122b1:	8b 50 04             	mov    0x4(%eax),%edx
   122b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   122b7:	8d 48 07             	lea    0x7(%eax),%ecx
   122ba:	85 c0                	test   %eax,%eax
   122bc:	0f 48 c1             	cmovs  %ecx,%eax
   122bf:	c1 f8 03             	sar    $0x3,%eax
   122c2:	89 c3                	mov    %eax,%ebx
   122c4:	89 d8                	mov    %ebx,%eax
   122c6:	01 d0                	add    %edx,%eax
   122c8:	0f b6 00             	movzbl (%eax),%eax
   122cb:	89 c6                	mov    %eax,%esi
   122cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   122d0:	99                   	cltd   
   122d1:	c1 ea 1d             	shr    $0x1d,%edx
   122d4:	01 d0                	add    %edx,%eax
   122d6:	83 e0 07             	and    $0x7,%eax
   122d9:	29 d0                	sub    %edx,%eax
   122db:	ba 01 00 00 00       	mov    $0x1,%edx
   122e0:	89 c1                	mov    %eax,%ecx
   122e2:	d3 e2                	shl    %cl,%edx
   122e4:	89 d0                	mov    %edx,%eax
   122e6:	f7 d0                	not    %eax
   122e8:	89 f2                	mov    %esi,%edx
   122ea:	21 c2                	and    %eax,%edx
   122ec:	8b 45 08             	mov    0x8(%ebp),%eax
   122ef:	8b 40 04             	mov    0x4(%eax),%eax
   122f2:	89 d9                	mov    %ebx,%ecx
   122f4:	01 c8                	add    %ecx,%eax
   122f6:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   122f8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122fc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12300:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12303:	3b 45 10             	cmp    0x10(%ebp),%eax
   12306:	7d 0e                	jge    12316 <bitmap_set_bit+0xcc>
   12308:	8b 45 08             	mov    0x8(%ebp),%eax
   1230b:	8b 00                	mov    (%eax),%eax
   1230d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12310:	0f 8c 48 ff ff ff    	jl     1225e <bitmap_set_bit+0x14>
        }
    }
}
   12316:	90                   	nop
   12317:	83 c4 10             	add    $0x10,%esp
   1231a:	5b                   	pop    %ebx
   1231b:	5e                   	pop    %esi
   1231c:	5d                   	pop    %ebp
   1231d:	c3                   	ret    

0001231e <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   1231e:	55                   	push   %ebp
   1231f:	89 e5                	mov    %esp,%ebp
   12321:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   12322:	8b 45 08             	mov    0x8(%ebp),%eax
   12325:	8b 50 04             	mov    0x4(%eax),%edx
   12328:	8b 45 0c             	mov    0xc(%ebp),%eax
   1232b:	8d 48 07             	lea    0x7(%eax),%ecx
   1232e:	85 c0                	test   %eax,%eax
   12330:	0f 48 c1             	cmovs  %ecx,%eax
   12333:	c1 f8 03             	sar    $0x3,%eax
   12336:	01 d0                	add    %edx,%eax
   12338:	0f b6 00             	movzbl (%eax),%eax
   1233b:	0f b6 d8             	movzbl %al,%ebx
   1233e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12341:	99                   	cltd   
   12342:	c1 ea 1d             	shr    $0x1d,%edx
   12345:	01 d0                	add    %edx,%eax
   12347:	83 e0 07             	and    $0x7,%eax
   1234a:	29 d0                	sub    %edx,%eax
   1234c:	89 c1                	mov    %eax,%ecx
   1234e:	d3 fb                	sar    %cl,%ebx
   12350:	89 d8                	mov    %ebx,%eax
   12352:	83 e0 01             	and    $0x1,%eax
}
   12355:	5b                   	pop    %ebx
   12356:	5d                   	pop    %ebp
   12357:	c3                   	ret    

00012358 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   12358:	55                   	push   %ebp
   12359:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1235b:	ff 75 0c             	pushl  0xc(%ebp)
   1235e:	ff 75 08             	pushl  0x8(%ebp)
   12361:	e8 b8 ff ff ff       	call   1231e <bitmap_get_bit>
   12366:	83 c4 08             	add    $0x8,%esp
   12369:	85 c0                	test   %eax,%eax
   1236b:	0f 95 c0             	setne  %al
   1236e:	0f b6 c0             	movzbl %al,%eax
}
   12371:	c9                   	leave  
   12372:	c3                   	ret    

00012373 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12373:	55                   	push   %ebp
   12374:	89 e5                	mov    %esp,%ebp
   12376:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12379:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   12380:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   12387:	e9 85 00 00 00       	jmp    12411 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   1238c:	ff 75 fc             	pushl  -0x4(%ebp)
   1238f:	ff 75 08             	pushl  0x8(%ebp)
   12392:	e8 87 ff ff ff       	call   1231e <bitmap_get_bit>
   12397:	83 c4 08             	add    $0x8,%esp
   1239a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1239d:	74 06                	je     123a5 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   1239f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   123a3:	eb 6c                	jmp    12411 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   123a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123a8:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   123ab:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   123b2:	eb 27                	jmp    123db <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   123b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123b7:	8d 50 01             	lea    0x1(%eax),%edx
   123ba:	89 55 fc             	mov    %edx,-0x4(%ebp)
   123bd:	50                   	push   %eax
   123be:	ff 75 08             	pushl  0x8(%ebp)
   123c1:	e8 58 ff ff ff       	call   1231e <bitmap_get_bit>
   123c6:	83 c4 08             	add    $0x8,%esp
   123c9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   123cc:	74 09                	je     123d7 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   123ce:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   123d5:	eb 16                	jmp    123ed <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   123d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123de:	3b 45 10             	cmp    0x10(%ebp),%eax
   123e1:	7d 0a                	jge    123ed <bitmap_alloc_nbits+0x7a>
   123e3:	8b 45 08             	mov    0x8(%ebp),%eax
   123e6:	8b 00                	mov    (%eax),%eax
   123e8:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   123eb:	7c c7                	jl     123b4 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   123ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123f0:	3b 45 10             	cmp    0x10(%ebp),%eax
   123f3:	7c 1c                	jl     12411 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   123f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   123f8:	f7 d0                	not    %eax
   123fa:	50                   	push   %eax
   123fb:	ff 75 10             	pushl  0x10(%ebp)
   123fe:	ff 75 f8             	pushl  -0x8(%ebp)
   12401:	ff 75 08             	pushl  0x8(%ebp)
   12404:	e8 41 fe ff ff       	call   1224a <bitmap_set_bit>
   12409:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1240c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1240f:	eb 13                	jmp    12424 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   12411:	8b 45 08             	mov    0x8(%ebp),%eax
   12414:	8b 00                	mov    (%eax),%eax
   12416:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12419:	0f 8c 6d ff ff ff    	jl     1238c <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1241f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12424:	c9                   	leave  
   12425:	c3                   	ret    

00012426 <hlt>:
static inline void hlt(void) {
   12426:	55                   	push   %ebp
   12427:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12429:	f4                   	hlt    
}
   1242a:	90                   	nop
   1242b:	5d                   	pop    %ebp
   1242c:	c3                   	ret    

0001242d <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   1242d:	55                   	push   %ebp
   1242e:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   12430:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12434:	74 3b                	je     12471 <kstrcpy+0x44>
   12436:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1243a:	74 35                	je     12471 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   1243c:	eb 17                	jmp    12455 <kstrcpy+0x28>
        *dest++ = *src++;
   1243e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12441:	8d 42 01             	lea    0x1(%edx),%eax
   12444:	89 45 0c             	mov    %eax,0xc(%ebp)
   12447:	8b 45 08             	mov    0x8(%ebp),%eax
   1244a:	8d 48 01             	lea    0x1(%eax),%ecx
   1244d:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12450:	0f b6 12             	movzbl (%edx),%edx
   12453:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12455:	8b 45 08             	mov    0x8(%ebp),%eax
   12458:	0f b6 00             	movzbl (%eax),%eax
   1245b:	84 c0                	test   %al,%al
   1245d:	74 0a                	je     12469 <kstrcpy+0x3c>
   1245f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12462:	0f b6 00             	movzbl (%eax),%eax
   12465:	84 c0                	test   %al,%al
   12467:	75 d5                	jne    1243e <kstrcpy+0x11>
    }
    *dest = '\0';
   12469:	8b 45 08             	mov    0x8(%ebp),%eax
   1246c:	c6 00 00             	movb   $0x0,(%eax)
   1246f:	eb 01                	jmp    12472 <kstrcpy+0x45>
        return;
   12471:	90                   	nop
}
   12472:	5d                   	pop    %ebp
   12473:	c3                   	ret    

00012474 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12474:	55                   	push   %ebp
   12475:	89 e5                	mov    %esp,%ebp
   12477:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1247a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1247e:	74 61                	je     124e1 <kstrncpy+0x6d>
   12480:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12484:	74 5b                	je     124e1 <kstrncpy+0x6d>
   12486:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1248a:	74 55                	je     124e1 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   1248c:	8b 45 08             	mov    0x8(%ebp),%eax
   1248f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12492:	8b 45 0c             	mov    0xc(%ebp),%eax
   12495:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   12498:	eb 17                	jmp    124b1 <kstrncpy+0x3d>
        *d++ = *s++;
   1249a:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1249d:	8d 42 01             	lea    0x1(%edx),%eax
   124a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
   124a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124a6:	8d 48 01             	lea    0x1(%eax),%ecx
   124a9:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   124ac:	0f b6 12             	movzbl (%edx),%edx
   124af:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   124b1:	8b 45 10             	mov    0x10(%ebp),%eax
   124b4:	8d 50 ff             	lea    -0x1(%eax),%edx
   124b7:	89 55 10             	mov    %edx,0x10(%ebp)
   124ba:	85 c0                	test   %eax,%eax
   124bc:	7e 0a                	jle    124c8 <kstrncpy+0x54>
   124be:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124c1:	0f b6 00             	movzbl (%eax),%eax
   124c4:	84 c0                	test   %al,%al
   124c6:	75 d2                	jne    1249a <kstrncpy+0x26>
    }
    if (size == 0) {
   124c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124cc:	75 0b                	jne    124d9 <kstrncpy+0x65>
        *(d - 1) = '\0';
   124ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124d1:	83 e8 01             	sub    $0x1,%eax
   124d4:	c6 00 00             	movb   $0x0,(%eax)
   124d7:	eb 09                	jmp    124e2 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   124d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124dc:	c6 00 00             	movb   $0x0,(%eax)
   124df:	eb 01                	jmp    124e2 <kstrncpy+0x6e>
        return;
   124e1:	90                   	nop
    }
}
   124e2:	c9                   	leave  
   124e3:	c3                   	ret    

000124e4 <kstrlen>:


int kstrlen(const char *str) {
   124e4:	55                   	push   %ebp
   124e5:	89 e5                	mov    %esp,%ebp
   124e7:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   124ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124ee:	75 07                	jne    124f7 <kstrlen+0x13>
        return 0;
   124f0:	b8 00 00 00 00       	mov    $0x0,%eax
   124f5:	eb 26                	jmp    1251d <kstrlen+0x39>
    }

    const char *c = str;
   124f7:	8b 45 08             	mov    0x8(%ebp),%eax
   124fa:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   124fd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   12504:	eb 04                	jmp    1250a <kstrlen+0x26>
        len++;
   12506:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   1250a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1250d:	8d 50 01             	lea    0x1(%eax),%edx
   12510:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12513:	0f b6 00             	movzbl (%eax),%eax
   12516:	84 c0                	test   %al,%al
   12518:	75 ec                	jne    12506 <kstrlen+0x22>
    }

    return len;
   1251a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1251d:	c9                   	leave  
   1251e:	c3                   	ret    

0001251f <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   1251f:	55                   	push   %ebp
   12520:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   12522:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12526:	74 06                	je     1252e <kstrncmp+0xf>
   12528:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1252c:	75 0f                	jne    1253d <kstrncmp+0x1e>
        return -1;
   1252e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12533:	eb 62                	jmp    12597 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12535:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12539:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   1253d:	8b 45 08             	mov    0x8(%ebp),%eax
   12540:	0f b6 00             	movzbl (%eax),%eax
   12543:	84 c0                	test   %al,%al
   12545:	74 20                	je     12567 <kstrncmp+0x48>
   12547:	8b 45 0c             	mov    0xc(%ebp),%eax
   1254a:	0f b6 00             	movzbl (%eax),%eax
   1254d:	84 c0                	test   %al,%al
   1254f:	74 16                	je     12567 <kstrncmp+0x48>
   12551:	8b 45 08             	mov    0x8(%ebp),%eax
   12554:	0f b6 10             	movzbl (%eax),%edx
   12557:	8b 45 0c             	mov    0xc(%ebp),%eax
   1255a:	0f b6 00             	movzbl (%eax),%eax
   1255d:	38 c2                	cmp    %al,%dl
   1255f:	75 06                	jne    12567 <kstrncmp+0x48>
   12561:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12565:	75 ce                	jne    12535 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12567:	8b 45 08             	mov    0x8(%ebp),%eax
   1256a:	0f b6 00             	movzbl (%eax),%eax
   1256d:	84 c0                	test   %al,%al
   1256f:	74 21                	je     12592 <kstrncmp+0x73>
   12571:	8b 45 0c             	mov    0xc(%ebp),%eax
   12574:	0f b6 00             	movzbl (%eax),%eax
   12577:	84 c0                	test   %al,%al
   12579:	74 17                	je     12592 <kstrncmp+0x73>
   1257b:	8b 45 08             	mov    0x8(%ebp),%eax
   1257e:	0f b6 10             	movzbl (%eax),%edx
   12581:	8b 45 0c             	mov    0xc(%ebp),%eax
   12584:	0f b6 00             	movzbl (%eax),%eax
   12587:	38 c2                	cmp    %al,%dl
   12589:	74 07                	je     12592 <kstrncmp+0x73>
   1258b:	b8 01 00 00 00       	mov    $0x1,%eax
   12590:	eb 05                	jmp    12597 <kstrncmp+0x78>
   12592:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12597:	5d                   	pop    %ebp
   12598:	c3                   	ret    

00012599 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   12599:	55                   	push   %ebp
   1259a:	89 e5                	mov    %esp,%ebp
   1259c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1259f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125a3:	74 40                	je     125e5 <kmemcpy+0x4c>
   125a5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125a9:	74 3a                	je     125e5 <kmemcpy+0x4c>
   125ab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125af:	74 34                	je     125e5 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   125b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   125b7:	8b 45 08             	mov    0x8(%ebp),%eax
   125ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   125bd:	eb 17                	jmp    125d6 <kmemcpy+0x3d>
        *d++ = *s++;
   125bf:	8b 55 fc             	mov    -0x4(%ebp),%edx
   125c2:	8d 42 01             	lea    0x1(%edx),%eax
   125c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
   125c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125cb:	8d 48 01             	lea    0x1(%eax),%ecx
   125ce:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   125d1:	0f b6 12             	movzbl (%edx),%edx
   125d4:	88 10                	mov    %dl,(%eax)
    while (size--) {
   125d6:	8b 45 10             	mov    0x10(%ebp),%eax
   125d9:	8d 50 ff             	lea    -0x1(%eax),%edx
   125dc:	89 55 10             	mov    %edx,0x10(%ebp)
   125df:	85 c0                	test   %eax,%eax
   125e1:	75 dc                	jne    125bf <kmemcpy+0x26>
   125e3:	eb 01                	jmp    125e6 <kmemcpy+0x4d>
        return;
   125e5:	90                   	nop
    }
}
   125e6:	c9                   	leave  
   125e7:	c3                   	ret    

000125e8 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   125e8:	55                   	push   %ebp
   125e9:	89 e5                	mov    %esp,%ebp
   125eb:	83 ec 14             	sub    $0x14,%esp
   125ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f1:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   125f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125f8:	74 2c                	je     12626 <kmemset+0x3e>
   125fa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125fe:	74 26                	je     12626 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   12600:	8b 45 08             	mov    0x8(%ebp),%eax
   12603:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12606:	eb 0f                	jmp    12617 <kmemset+0x2f>
        *d++ = v;
   12608:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1260b:	8d 50 01             	lea    0x1(%eax),%edx
   1260e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12611:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12615:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12617:	8b 45 10             	mov    0x10(%ebp),%eax
   1261a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1261d:	89 55 10             	mov    %edx,0x10(%ebp)
   12620:	85 c0                	test   %eax,%eax
   12622:	75 e4                	jne    12608 <kmemset+0x20>
   12624:	eb 01                	jmp    12627 <kmemset+0x3f>
        return;
   12626:	90                   	nop
    }
}
   12627:	c9                   	leave  
   12628:	c3                   	ret    

00012629 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12629:	55                   	push   %ebp
   1262a:	89 e5                	mov    %esp,%ebp
   1262c:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   1262f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12633:	74 06                	je     1263b <kmemcmp+0x12>
   12635:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12639:	75 07                	jne    12642 <kmemcmp+0x19>
        return 1;
   1263b:	b8 01 00 00 00       	mov    $0x1,%eax
   12640:	eb 43                	jmp    12685 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   12642:	8b 45 08             	mov    0x8(%ebp),%eax
   12645:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12648:	8b 45 0c             	mov    0xc(%ebp),%eax
   1264b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1264e:	eb 23                	jmp    12673 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   12650:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12653:	8d 50 01             	lea    0x1(%eax),%edx
   12656:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12659:	0f b6 08             	movzbl (%eax),%ecx
   1265c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1265f:	8d 50 01             	lea    0x1(%eax),%edx
   12662:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12665:	0f b6 00             	movzbl (%eax),%eax
   12668:	38 c1                	cmp    %al,%cl
   1266a:	74 07                	je     12673 <kmemcmp+0x4a>
            return 1;
   1266c:	b8 01 00 00 00       	mov    $0x1,%eax
   12671:	eb 12                	jmp    12685 <kmemcmp+0x5c>
    while (size--) {
   12673:	8b 45 10             	mov    0x10(%ebp),%eax
   12676:	8d 50 ff             	lea    -0x1(%eax),%edx
   12679:	89 55 10             	mov    %edx,0x10(%ebp)
   1267c:	85 c0                	test   %eax,%eax
   1267e:	75 d0                	jne    12650 <kmemcmp+0x27>
        }
    }

    return 0;
   12680:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12685:	c9                   	leave  
   12686:	c3                   	ret    

00012687 <kitoa>:


void kitoa(char *buf, int num, int base) {
   12687:	55                   	push   %ebp
   12688:	89 e5                	mov    %esp,%ebp
   1268a:	53                   	push   %ebx
   1268b:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   1268e:	8b 45 08             	mov    0x8(%ebp),%eax
   12691:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12694:	8b 45 0c             	mov    0xc(%ebp),%eax
   12697:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1269a:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1269e:	74 1d                	je     126bd <kitoa+0x36>
   126a0:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   126a4:	74 17                	je     126bd <kitoa+0x36>
   126a6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   126aa:	74 11                	je     126bd <kitoa+0x36>
   126ac:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   126b0:	74 0b                	je     126bd <kitoa+0x36>
        *p = '\0';
   126b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126b5:	c6 00 00             	movb   $0x0,(%eax)
        return;
   126b8:	e9 03 01 00 00       	jmp    127c0 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   126bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   126c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126c8:	79 19                	jns    126e3 <kitoa+0x5c>
   126ca:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   126ce:	75 13                	jne    126e3 <kitoa+0x5c>
        *p++ = '-';
   126d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126d3:	8d 50 01             	lea    0x1(%eax),%edx
   126d6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126d9:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   126dc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   126e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   126e7:	74 3b                	je     12724 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   126e9:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   126ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f2:	99                   	cltd   
   126f3:	f7 7d 10             	idivl  0x10(%ebp)
   126f6:	89 d0                	mov    %edx,%eax
   126f8:	83 c0 0f             	add    $0xf,%eax
   126fb:	01 c8                	add    %ecx,%eax
   126fd:	0f b6 00             	movzbl (%eax),%eax
   12700:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12703:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12706:	8d 50 01             	lea    0x1(%eax),%edx
   12709:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1270c:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12710:	88 10                	mov    %dl,(%eax)
            num /= base;
   12712:	8b 45 0c             	mov    0xc(%ebp),%eax
   12715:	99                   	cltd   
   12716:	f7 7d 10             	idivl  0x10(%ebp)
   12719:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   1271c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12720:	75 c7                	jne    126e9 <kitoa+0x62>
   12722:	eb 4b                	jmp    1276f <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12724:	8b 45 0c             	mov    0xc(%ebp),%eax
   12727:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   1272a:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12730:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12733:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12736:	ba 00 00 00 00       	mov    $0x0,%edx
   1273b:	f7 f3                	div    %ebx
   1273d:	89 d0                	mov    %edx,%eax
   1273f:	83 c0 0f             	add    $0xf,%eax
   12742:	01 c8                	add    %ecx,%eax
   12744:	0f b6 00             	movzbl (%eax),%eax
   12747:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   1274a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1274d:	8d 50 01             	lea    0x1(%eax),%edx
   12750:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12753:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12757:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12759:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1275c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1275f:	ba 00 00 00 00       	mov    $0x0,%edx
   12764:	f7 f3                	div    %ebx
   12766:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12769:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1276d:	75 bb                	jne    1272a <kitoa+0xa3>
    }
    *p-- = '\0';
   1276f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12772:	8d 50 ff             	lea    -0x1(%eax),%edx
   12775:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12778:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   1277b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1277f:	74 08                	je     12789 <kitoa+0x102>
   12781:	8b 45 08             	mov    0x8(%ebp),%eax
   12784:	83 c0 01             	add    $0x1,%eax
   12787:	eb 03                	jmp    1278c <kitoa+0x105>
   12789:	8b 45 08             	mov    0x8(%ebp),%eax
   1278c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1278f:	eb 27                	jmp    127b8 <kitoa+0x131>
        char ch = *start;
   12791:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12794:	0f b6 00             	movzbl (%eax),%eax
   12797:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1279a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1279d:	0f b6 10             	movzbl (%eax),%edx
   127a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   127a3:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   127a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127a8:	8d 50 ff             	lea    -0x1(%eax),%edx
   127ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
   127ae:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   127b2:	88 10                	mov    %dl,(%eax)
        start++;
   127b4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   127b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   127bb:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   127be:	72 d1                	jb     12791 <kitoa+0x10a>
    }
}
   127c0:	83 c4 20             	add    $0x20,%esp
   127c3:	5b                   	pop    %ebx
   127c4:	5d                   	pop    %ebp
   127c5:	c3                   	ret    

000127c6 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   127c6:	55                   	push   %ebp
   127c7:	89 e5                	mov    %esp,%ebp
   127c9:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   127cc:	8d 45 10             	lea    0x10(%ebp),%eax
   127cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   127d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127d5:	83 ec 04             	sub    $0x4,%esp
   127d8:	50                   	push   %eax
   127d9:	ff 75 0c             	pushl  0xc(%ebp)
   127dc:	ff 75 08             	pushl  0x8(%ebp)
   127df:	e8 06 00 00 00       	call   127ea <kvsprintf>
   127e4:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   127e7:	90                   	nop
   127e8:	c9                   	leave  
   127e9:	c3                   	ret    

000127ea <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   127ea:	55                   	push   %ebp
   127eb:	89 e5                	mov    %esp,%ebp
   127ed:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   127f0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   127f7:	8b 45 08             	mov    0x8(%ebp),%eax
   127fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   127fd:	e9 2f 01 00 00       	jmp    12931 <kvsprintf+0x147>
        switch (state) {
   12802:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12805:	85 c0                	test   %eax,%eax
   12807:	74 0a                	je     12813 <kvsprintf+0x29>
   12809:	83 f8 01             	cmp    $0x1,%eax
   1280c:	74 2b                	je     12839 <kvsprintf+0x4f>
   1280e:	e9 1e 01 00 00       	jmp    12931 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12813:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12817:	75 0c                	jne    12825 <kvsprintf+0x3b>
                state = READ_FMT;
   12819:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12820:	e9 0c 01 00 00       	jmp    12931 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12825:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12828:	8d 50 01             	lea    0x1(%eax),%edx
   1282b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1282e:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12832:	88 10                	mov    %dl,(%eax)
            }
            break;
   12834:	e9 f8 00 00 00       	jmp    12931 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12839:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1283d:	75 31                	jne    12870 <kvsprintf+0x86>
                int num = va_arg(args, int);
   1283f:	8b 45 10             	mov    0x10(%ebp),%eax
   12842:	8d 50 04             	lea    0x4(%eax),%edx
   12845:	89 55 10             	mov    %edx,0x10(%ebp)
   12848:	8b 00                	mov    (%eax),%eax
   1284a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   1284d:	6a 0a                	push   $0xa
   1284f:	ff 75 e4             	pushl  -0x1c(%ebp)
   12852:	ff 75 f8             	pushl  -0x8(%ebp)
   12855:	e8 2d fe ff ff       	call   12687 <kitoa>
   1285a:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   1285d:	ff 75 f8             	pushl  -0x8(%ebp)
   12860:	e8 7f fc ff ff       	call   124e4 <kstrlen>
   12865:	83 c4 04             	add    $0x4,%esp
   12868:	01 45 f8             	add    %eax,-0x8(%ebp)
   1286b:	e9 b9 00 00 00       	jmp    12929 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12870:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12874:	75 46                	jne    128bc <kvsprintf+0xd2>
                *curr++ = '0';
   12876:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12879:	8d 50 01             	lea    0x1(%eax),%edx
   1287c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1287f:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12882:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12885:	8d 50 01             	lea    0x1(%eax),%edx
   12888:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1288b:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   1288e:	8b 45 10             	mov    0x10(%ebp),%eax
   12891:	8d 50 04             	lea    0x4(%eax),%edx
   12894:	89 55 10             	mov    %edx,0x10(%ebp)
   12897:	8b 00                	mov    (%eax),%eax
   12899:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   1289c:	6a 10                	push   $0x10
   1289e:	ff 75 e8             	pushl  -0x18(%ebp)
   128a1:	ff 75 f8             	pushl  -0x8(%ebp)
   128a4:	e8 de fd ff ff       	call   12687 <kitoa>
   128a9:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   128ac:	ff 75 f8             	pushl  -0x8(%ebp)
   128af:	e8 30 fc ff ff       	call   124e4 <kstrlen>
   128b4:	83 c4 04             	add    $0x4,%esp
   128b7:	01 45 f8             	add    %eax,-0x8(%ebp)
   128ba:	eb 6d                	jmp    12929 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   128bc:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   128c0:	75 1f                	jne    128e1 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   128c2:	8b 45 10             	mov    0x10(%ebp),%eax
   128c5:	8d 50 04             	lea    0x4(%eax),%edx
   128c8:	89 55 10             	mov    %edx,0x10(%ebp)
   128cb:	8b 00                	mov    (%eax),%eax
   128cd:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   128d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128d3:	8d 50 01             	lea    0x1(%eax),%edx
   128d6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   128d9:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   128dd:	88 10                	mov    %dl,(%eax)
   128df:	eb 48                	jmp    12929 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   128e1:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   128e5:	75 42                	jne    12929 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   128e7:	8b 45 10             	mov    0x10(%ebp),%eax
   128ea:	8d 50 04             	lea    0x4(%eax),%edx
   128ed:	89 55 10             	mov    %edx,0x10(%ebp)
   128f0:	8b 00                	mov    (%eax),%eax
   128f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   128f5:	ff 75 f4             	pushl  -0xc(%ebp)
   128f8:	e8 e7 fb ff ff       	call   124e4 <kstrlen>
   128fd:	83 c4 04             	add    $0x4,%esp
   12900:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12903:	eb 17                	jmp    1291c <kvsprintf+0x132>
                    *curr++ = *str++;
   12905:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12908:	8d 42 01             	lea    0x1(%edx),%eax
   1290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1290e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12911:	8d 48 01             	lea    0x1(%eax),%ecx
   12914:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12917:	0f b6 12             	movzbl (%edx),%edx
   1291a:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1291c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1291f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12922:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12925:	85 c0                	test   %eax,%eax
   12927:	75 dc                	jne    12905 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12929:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12930:	90                   	nop
    while ((ch = *fmt++)) {
   12931:	8b 45 0c             	mov    0xc(%ebp),%eax
   12934:	8d 50 01             	lea    0x1(%eax),%edx
   12937:	89 55 0c             	mov    %edx,0xc(%ebp)
   1293a:	0f b6 00             	movzbl (%eax),%eax
   1293d:	88 45 ef             	mov    %al,-0x11(%ebp)
   12940:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12944:	0f 85 b8 fe ff ff    	jne    12802 <kvsprintf+0x18>
        }
    }
}
   1294a:	90                   	nop
   1294b:	c9                   	leave  
   1294c:	c3                   	ret    

0001294d <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   1294d:	55                   	push   %ebp
   1294e:	89 e5                	mov    %esp,%ebp
   12950:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12953:	83 ec 08             	sub    $0x8,%esp
   12956:	ff 75 14             	pushl  0x14(%ebp)
   12959:	68 80 33 01 00       	push   $0x13380
   1295e:	e8 f4 02 00 00       	call   12c57 <log_printf>
   12963:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12966:	ff 75 10             	pushl  0x10(%ebp)
   12969:	ff 75 0c             	pushl  0xc(%ebp)
   1296c:	ff 75 08             	pushl  0x8(%ebp)
   1296f:	68 92 33 01 00       	push   $0x13392
   12974:	e8 de 02 00 00       	call   12c57 <log_printf>
   12979:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   1297c:	e8 a5 fa ff ff       	call   12426 <hlt>
   12981:	eb f9                	jmp    1297c <pannic+0x2f>

00012983 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12983:	55                   	push   %ebp
   12984:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12986:	8b 45 08             	mov    0x8(%ebp),%eax
   12989:	8b 40 08             	mov    0x8(%eax),%eax
   1298c:	85 c0                	test   %eax,%eax
   1298e:	0f 94 c0             	sete   %al
   12991:	0f b6 c0             	movzbl %al,%eax
}
   12994:	5d                   	pop    %ebp
   12995:	c3                   	ret    

00012996 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12996:	55                   	push   %ebp
   12997:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12999:	8b 45 08             	mov    0x8(%ebp),%eax
   1299c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   129a2:	8b 45 08             	mov    0x8(%ebp),%eax
   129a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   129ac:	8b 45 08             	mov    0x8(%ebp),%eax
   129af:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   129b6:	90                   	nop
   129b7:	5d                   	pop    %ebp
   129b8:	c3                   	ret    

000129b9 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   129b9:	55                   	push   %ebp
   129ba:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   129bc:	8b 45 08             	mov    0x8(%ebp),%eax
   129bf:	8b 10                	mov    (%eax),%edx
   129c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   129c4:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   129c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   129ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   129d0:	ff 75 08             	pushl  0x8(%ebp)
   129d3:	e8 ab ff ff ff       	call   12983 <list_is_empty>
   129d8:	83 c4 04             	add    $0x4,%esp
   129db:	85 c0                	test   %eax,%eax
   129dd:	74 15                	je     129f4 <list_insert_front+0x3b>
        list->last = list->first = node;
   129df:	8b 45 08             	mov    0x8(%ebp),%eax
   129e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   129e5:	89 10                	mov    %edx,(%eax)
   129e7:	8b 45 08             	mov    0x8(%ebp),%eax
   129ea:	8b 10                	mov    (%eax),%edx
   129ec:	8b 45 08             	mov    0x8(%ebp),%eax
   129ef:	89 50 04             	mov    %edx,0x4(%eax)
   129f2:	eb 12                	jmp    12a06 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   129f4:	8b 45 08             	mov    0x8(%ebp),%eax
   129f7:	8b 00                	mov    (%eax),%eax
   129f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   129fc:	89 10                	mov    %edx,(%eax)
        list->first = node;
   129fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12a01:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a04:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12a06:	8b 45 08             	mov    0x8(%ebp),%eax
   12a09:	8b 40 08             	mov    0x8(%eax),%eax
   12a0c:	8d 50 01             	lea    0x1(%eax),%edx
   12a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a12:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a15:	90                   	nop
   12a16:	c9                   	leave  
   12a17:	c3                   	ret    

00012a18 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12a18:	55                   	push   %ebp
   12a19:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12a1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1e:	8b 50 04             	mov    0x4(%eax),%edx
   12a21:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a24:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12a26:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a29:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12a30:	ff 75 08             	pushl  0x8(%ebp)
   12a33:	e8 4b ff ff ff       	call   12983 <list_is_empty>
   12a38:	83 c4 04             	add    $0x4,%esp
   12a3b:	85 c0                	test   %eax,%eax
   12a3d:	74 15                	je     12a54 <list_insert_back+0x3c>
        list->last = list->first = node;
   12a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a42:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a45:	89 10                	mov    %edx,(%eax)
   12a47:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4a:	8b 10                	mov    (%eax),%edx
   12a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4f:	89 50 04             	mov    %edx,0x4(%eax)
   12a52:	eb 15                	jmp    12a69 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12a54:	8b 45 08             	mov    0x8(%ebp),%eax
   12a57:	8b 40 04             	mov    0x4(%eax),%eax
   12a5a:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a5d:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12a60:	8b 45 08             	mov    0x8(%ebp),%eax
   12a63:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a66:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12a69:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6c:	8b 40 08             	mov    0x8(%eax),%eax
   12a6f:	8d 50 01             	lea    0x1(%eax),%edx
   12a72:	8b 45 08             	mov    0x8(%ebp),%eax
   12a75:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a78:	90                   	nop
   12a79:	c9                   	leave  
   12a7a:	c3                   	ret    

00012a7b <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12a7b:	55                   	push   %ebp
   12a7c:	89 e5                	mov    %esp,%ebp
   12a7e:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12a81:	ff 75 08             	pushl  0x8(%ebp)
   12a84:	e8 fa fe ff ff       	call   12983 <list_is_empty>
   12a89:	83 c4 04             	add    $0x4,%esp
   12a8c:	85 c0                	test   %eax,%eax
   12a8e:	74 07                	je     12a97 <list_remove_front+0x1c>
        return (list_node_t*)0;
   12a90:	b8 00 00 00 00       	mov    $0x0,%eax
   12a95:	eb 5b                	jmp    12af2 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12a97:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9a:	8b 00                	mov    (%eax),%eax
   12a9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12a9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12aa2:	8b 50 04             	mov    0x4(%eax),%edx
   12aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa8:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   12aad:	8b 00                	mov    (%eax),%eax
   12aaf:	85 c0                	test   %eax,%eax
   12ab1:	75 0c                	jne    12abf <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12abd:	eb 0c                	jmp    12acb <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12abf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ac2:	8b 40 04             	mov    0x4(%eax),%eax
   12ac5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12acb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ace:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ad5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ad8:	8b 50 04             	mov    0x4(%eax),%edx
   12adb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ade:	89 10                	mov    %edx,(%eax)
    list->count--;
   12ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae3:	8b 40 08             	mov    0x8(%eax),%eax
   12ae6:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   12aec:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12aef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12af2:	c9                   	leave  
   12af3:	c3                   	ret    

00012af4 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12af4:	55                   	push   %ebp
   12af5:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12af7:	8b 45 08             	mov    0x8(%ebp),%eax
   12afa:	8b 00                	mov    (%eax),%eax
   12afc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12aff:	75 0b                	jne    12b0c <list_remove+0x18>
        list->first = node->next;
   12b01:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b04:	8b 50 04             	mov    0x4(%eax),%edx
   12b07:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0a:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12b0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0f:	8b 40 04             	mov    0x4(%eax),%eax
   12b12:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12b15:	75 0b                	jne    12b22 <list_remove+0x2e>
        list->last = node->pre;
   12b17:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b1a:	8b 10                	mov    (%eax),%edx
   12b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12b22:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b25:	8b 00                	mov    (%eax),%eax
   12b27:	85 c0                	test   %eax,%eax
   12b29:	74 0e                	je     12b39 <list_remove+0x45>
        node->pre->next = node->next;
   12b2b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b2e:	8b 00                	mov    (%eax),%eax
   12b30:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b33:	8b 52 04             	mov    0x4(%edx),%edx
   12b36:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12b39:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b3c:	8b 40 04             	mov    0x4(%eax),%eax
   12b3f:	85 c0                	test   %eax,%eax
   12b41:	74 0d                	je     12b50 <list_remove+0x5c>
        node->next->pre = node->pre;
   12b43:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b46:	8b 40 04             	mov    0x4(%eax),%eax
   12b49:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b4c:	8b 12                	mov    (%edx),%edx
   12b4e:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12b50:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b53:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b5d:	8b 50 04             	mov    0x4(%eax),%edx
   12b60:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b63:	89 10                	mov    %edx,(%eax)
    --list->count;
   12b65:	8b 45 08             	mov    0x8(%ebp),%eax
   12b68:	8b 40 08             	mov    0x8(%eax),%eax
   12b6b:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b6e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b71:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12b74:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b77:	5d                   	pop    %ebp
   12b78:	c3                   	ret    

00012b79 <inb>:
static inline uint8_t inb(uint16_t port) {
   12b79:	55                   	push   %ebp
   12b7a:	89 e5                	mov    %esp,%ebp
   12b7c:	83 ec 14             	sub    $0x14,%esp
   12b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b82:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12b86:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12b8a:	89 c2                	mov    %eax,%edx
   12b8c:	ec                   	in     (%dx),%al
   12b8d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12b90:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12b94:	c9                   	leave  
   12b95:	c3                   	ret    

00012b96 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12b96:	55                   	push   %ebp
   12b97:	89 e5                	mov    %esp,%ebp
   12b99:	83 ec 08             	sub    $0x8,%esp
   12b9c:	8b 55 08             	mov    0x8(%ebp),%edx
   12b9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ba2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12ba6:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12ba9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12bad:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12bb1:	ee                   	out    %al,(%dx)
}
   12bb2:	90                   	nop
   12bb3:	c9                   	leave  
   12bb4:	c3                   	ret    

00012bb5 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12bb5:	55                   	push   %ebp
   12bb6:	89 e5                	mov    %esp,%ebp
   12bb8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   12bbb:	83 ec 08             	sub    $0x8,%esp
   12bbe:	68 d0 33 01 00       	push   $0x133d0
   12bc3:	68 e0 8e 01 00       	push   $0x18ee0
   12bc8:	e8 41 f3 ff ff       	call   11f0e <mutex_init>
   12bcd:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12bd0:	83 ec 08             	sub    $0x8,%esp
   12bd3:	6a 00                	push   $0x0
   12bd5:	68 f9 03 00 00       	push   $0x3f9
   12bda:	e8 b7 ff ff ff       	call   12b96 <outb>
   12bdf:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12be2:	83 ec 08             	sub    $0x8,%esp
   12be5:	68 80 00 00 00       	push   $0x80
   12bea:	68 fb 03 00 00       	push   $0x3fb
   12bef:	e8 a2 ff ff ff       	call   12b96 <outb>
   12bf4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12bf7:	83 ec 08             	sub    $0x8,%esp
   12bfa:	6a 03                	push   $0x3
   12bfc:	68 f8 03 00 00       	push   $0x3f8
   12c01:	e8 90 ff ff ff       	call   12b96 <outb>
   12c06:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12c09:	83 ec 08             	sub    $0x8,%esp
   12c0c:	6a 00                	push   $0x0
   12c0e:	68 f9 03 00 00       	push   $0x3f9
   12c13:	e8 7e ff ff ff       	call   12b96 <outb>
   12c18:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12c1b:	83 ec 08             	sub    $0x8,%esp
   12c1e:	6a 03                	push   $0x3
   12c20:	68 fb 03 00 00       	push   $0x3fb
   12c25:	e8 6c ff ff ff       	call   12b96 <outb>
   12c2a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12c2d:	83 ec 08             	sub    $0x8,%esp
   12c30:	68 c7 00 00 00       	push   $0xc7
   12c35:	68 fa 03 00 00       	push   $0x3fa
   12c3a:	e8 57 ff ff ff       	call   12b96 <outb>
   12c3f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12c42:	83 ec 08             	sub    $0x8,%esp
   12c45:	6a 0f                	push   $0xf
   12c47:	68 fc 03 00 00       	push   $0x3fc
   12c4c:	e8 45 ff ff ff       	call   12b96 <outb>
   12c51:	83 c4 10             	add    $0x10,%esp
}
   12c54:	90                   	nop
   12c55:	c9                   	leave  
   12c56:	c3                   	ret    

00012c57 <log_printf>:


void log_printf(const char* fmt, ...) {
   12c57:	55                   	push   %ebp
   12c58:	89 e5                	mov    %esp,%ebp
   12c5a:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12c60:	83 ec 04             	sub    $0x4,%esp
   12c63:	68 80 00 00 00       	push   $0x80
   12c68:	6a 00                	push   $0x0
   12c6a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c70:	50                   	push   %eax
   12c71:	e8 72 f9 ff ff       	call   125e8 <kmemset>
   12c76:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12c79:	8d 45 0c             	lea    0xc(%ebp),%eax
   12c7c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12c82:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12c88:	83 ec 04             	sub    $0x4,%esp
   12c8b:	50                   	push   %eax
   12c8c:	ff 75 08             	pushl  0x8(%ebp)
   12c8f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c95:	50                   	push   %eax
   12c96:	e8 4f fb ff ff       	call   127ea <kvsprintf>
   12c9b:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   12c9e:	83 ec 0c             	sub    $0xc,%esp
   12ca1:	68 e0 8e 01 00       	push   $0x18ee0
   12ca6:	e8 a4 f2 ff ff       	call   11f4f <mutex_acquire>
   12cab:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   12cae:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12cb7:	eb 3b                	jmp    12cf4 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12cb9:	90                   	nop
   12cba:	83 ec 0c             	sub    $0xc,%esp
   12cbd:	68 fd 03 00 00       	push   $0x3fd
   12cc2:	e8 b2 fe ff ff       	call   12b79 <inb>
   12cc7:	83 c4 10             	add    $0x10,%esp
   12cca:	0f b6 c0             	movzbl %al,%eax
   12ccd:	83 e0 40             	and    $0x40,%eax
   12cd0:	85 c0                	test   %eax,%eax
   12cd2:	74 e6                	je     12cba <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12cd7:	8d 50 01             	lea    0x1(%eax),%edx
   12cda:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12cdd:	0f b6 00             	movzbl (%eax),%eax
   12ce0:	0f b6 c0             	movzbl %al,%eax
   12ce3:	83 ec 08             	sub    $0x8,%esp
   12ce6:	50                   	push   %eax
   12ce7:	68 f8 03 00 00       	push   $0x3f8
   12cec:	e8 a5 fe ff ff       	call   12b96 <outb>
   12cf1:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12cf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12cf7:	0f b6 00             	movzbl (%eax),%eax
   12cfa:	84 c0                	test   %al,%al
   12cfc:	75 bb                	jne    12cb9 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   12cfe:	83 ec 08             	sub    $0x8,%esp
   12d01:	6a 0d                	push   $0xd
   12d03:	68 f8 03 00 00       	push   $0x3f8
   12d08:	e8 89 fe ff ff       	call   12b96 <outb>
   12d0d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12d10:	83 ec 08             	sub    $0x8,%esp
   12d13:	6a 0a                	push   $0xa
   12d15:	68 f8 03 00 00       	push   $0x3f8
   12d1a:	e8 77 fe ff ff       	call   12b96 <outb>
   12d1f:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   12d22:	83 ec 0c             	sub    $0xc,%esp
   12d25:	68 e0 8e 01 00       	push   $0x18ee0
   12d2a:	e8 ae f2 ff ff       	call   11fdd <mutex_release>
   12d2f:	83 c4 10             	add    $0x10,%esp
   12d32:	90                   	nop
   12d33:	c9                   	leave  
   12d34:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 00 00 00 00       	jmp    80000012 <first_task_main>

80000012 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"

int first_task_main(void) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        log_printf("first task.");
80000018:	83 ec 0c             	sub    $0xc,%esp
8000001b:	68 3a 00 00 80       	push   $0x8000003a
80000020:	e8 32 2c 01 80       	call   12c57 <log_printf>
80000025:	83 c4 10             	add    $0x10,%esp
        sys_sleep(10000);
80000028:	83 ec 0c             	sub    $0xc,%esp
8000002b:	68 10 27 00 00       	push   $0x2710
80000030:	e8 c2 10 01 80       	call   110f7 <sys_sleep>
80000035:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000038:	eb de                	jmp    80000018 <first_task_main+0x6>
8000003a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000040:	74 61                	je     800000a3 <first_task_main+0x91>
80000042:	73 6b                	jae    800000af <first_task_main+0x9d>
80000044:	2e                   	cs
	...
