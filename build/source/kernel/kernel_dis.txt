
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000315 memsz 0x00002f20 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000023  000102f2  000102f2  000012f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00002c00  00010320  00010320  00001315  2**5
                  ALLOC
  3 .debug_line   000003f5  00000000  00000000  00001315  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000756  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000335  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000080  00000000  00000000  00002198  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000003a7  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000011  00000000  00000000  000025bf  2**0
                  CONTENTS, READONLY
  9 .debug_frame  000001cc  00000000  00000000  000025d0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000102f2 l    d  .rodata	00000000 .rodata
00010320 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
00010069 l     F .text	00000028 lgdt
00010320 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000101d3 l     F .text	00000028 lidt
00010b20 l     O .bss	00000400 idt_table
000101fb l     F .text	00000005 do_default_handler
00000000 l    df *ABS*	00000000 init.c
000101c8 g     F .text	0000000b cpu_init
000102da g     F .text	00000018 init_main
0001002b g       .text	00000000 exception_handler_unknown
00010f20 g     O .bss	00002000 stack
000102c6 g     F .text	00000014 kernel_init
00010000 g       .text	00000000 _start
00010291 g     F .text	00000035 irq_install
0001015b g     F .text	0000006d init_gdt
0001004a g       .text	00000000 exception_handler_divide_error
00010216 g     F .text	00000016 do_handler_divide_error
00010200 g     F .text	00000016 do_handler_unknown
0001022c g     F .text	00000065 irq_init
00010091 g     F .text	00000083 segment_desc_set
00010114 g     F .text	00000047 gate_desc_set



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 ba 02 00 00       	call   102c6 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 0，所以会直接跳转到 gdt_reload 地址处
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 20 2f 01 00       	mov    $0x12f20,%esp
    jmp init_main
   10026:	e9 af 02 00 00       	jmp    102da <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 c4 01 00 00       	call   10200 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 bb 01 00 00       	call   10216 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <lgdt>:
    __asm__ __volatile("sti");
}

// lgdt 
// 将 GDT 表加载进 内存中，即写GDTR寄存器，保存GDT表的地址
static inline void lgdt(uint32_t start, uint32_t size) {
   10069:	55                   	push   %ebp
   1006a:	89 e5                	mov    %esp,%ebp
   1006c:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } gdt;

    gdt.start31_16 = start >> 16;
   1006f:	8b 45 08             	mov    0x8(%ebp),%eax
   10072:	c1 e8 10             	shr    $0x10,%eax
   10075:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   10079:	8b 45 08             	mov    0x8(%ebp),%eax
   1007c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   10080:	8b 45 0c             	mov    0xc(%ebp),%eax
   10083:	83 e8 01             	sub    $0x1,%eax
   10086:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1008a:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1008e:	90                   	nop
   1008f:	c9                   	leave  
   10090:	c3                   	ret    

00010091 <segment_desc_set>:

// selector: 段选择子
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10091:	55                   	push   %ebp
   10092:	89 e5                	mov    %esp,%ebp
   10094:	83 ec 14             	sub    $0x14,%esp
   10097:	8b 45 14             	mov    0x14(%ebp),%eax
   1009a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   1009e:	8b 45 08             	mov    0x8(%ebp),%eax
   100a1:	83 e0 f8             	and    $0xfffffff8,%eax
   100a4:	05 20 03 01 00       	add    $0x10320,%eax
   100a9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   100ac:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   100b3:	76 0f                	jbe    100c4 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   100b5:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   100bb:	8b 45 10             	mov    0x10(%ebp),%eax
   100be:	c1 e8 0c             	shr    $0xc,%eax
   100c1:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   100c4:	8b 45 10             	mov    0x10(%ebp),%eax
   100c7:	89 c2                	mov    %eax,%edx
   100c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100cc:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   100cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   100d2:	89 c2                	mov    %eax,%edx
   100d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100d7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   100db:	8b 45 0c             	mov    0xc(%ebp),%eax
   100de:	c1 e8 10             	shr    $0x10,%eax
   100e1:	89 c2                	mov    %eax,%edx
   100e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100e6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   100e9:	8b 45 10             	mov    0x10(%ebp),%eax
   100ec:	c1 e8 10             	shr    $0x10,%eax
   100ef:	c1 e0 08             	shl    $0x8,%eax
   100f2:	66 25 00 0f          	and    $0xf00,%ax
   100f6:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   100fa:	89 c2                	mov    %eax,%edx
   100fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100ff:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10103:	8b 45 0c             	mov    0xc(%ebp),%eax
   10106:	c1 e8 18             	shr    $0x18,%eax
   10109:	89 c2                	mov    %eax,%edx
   1010b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1010e:	88 50 07             	mov    %dl,0x7(%eax)
}
   10111:	90                   	nop
   10112:	c9                   	leave  
   10113:	c3                   	ret    

00010114 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10114:	55                   	push   %ebp
   10115:	89 e5                	mov    %esp,%ebp
   10117:	83 ec 08             	sub    $0x8,%esp
   1011a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1011d:	8b 45 14             	mov    0x14(%ebp),%eax
   10120:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10124:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   10128:	8b 45 10             	mov    0x10(%ebp),%eax
   1012b:	89 c2                	mov    %eax,%edx
   1012d:	8b 45 08             	mov    0x8(%ebp),%eax
   10130:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10133:	8b 45 08             	mov    0x8(%ebp),%eax
   10136:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1013a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1013e:	8b 45 08             	mov    0x8(%ebp),%eax
   10141:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10145:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   10149:	8b 45 10             	mov    0x10(%ebp),%eax
   1014c:	c1 e8 10             	shr    $0x10,%eax
   1014f:	89 c2                	mov    %eax,%edx
   10151:	8b 45 08             	mov    0x8(%ebp),%eax
   10154:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10158:	90                   	nop
   10159:	c9                   	leave  
   1015a:	c3                   	ret    

0001015b <init_gdt>:


void init_gdt(void) {
   1015b:	55                   	push   %ebp
   1015c:	89 e5                	mov    %esp,%ebp
   1015e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10161:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10168:	eb 19                	jmp    10183 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1016a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1016d:	c1 e0 03             	shl    $0x3,%eax
   10170:	6a 00                	push   $0x0
   10172:	6a 00                	push   $0x0
   10174:	6a 00                	push   $0x0
   10176:	50                   	push   %eax
   10177:	e8 15 ff ff ff       	call   10091 <segment_desc_set>
   1017c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1017f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10183:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1018a:	7e de                	jle    1016a <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1018c:	68 92 40 00 00       	push   $0x4092
   10191:	6a ff                	push   $0xffffffff
   10193:	6a 00                	push   $0x0
   10195:	6a 10                	push   $0x10
   10197:	e8 f5 fe ff ff       	call   10091 <segment_desc_set>
   1019c:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   1019f:	68 9a 40 00 00       	push   $0x409a
   101a4:	6a ff                	push   $0xffffffff
   101a6:	6a 00                	push   $0x0
   101a8:	6a 08                	push   $0x8
   101aa:	e8 e2 fe ff ff       	call   10091 <segment_desc_set>
   101af:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   101b2:	b8 20 03 01 00       	mov    $0x10320,%eax
   101b7:	68 00 08 00 00       	push   $0x800
   101bc:	50                   	push   %eax
   101bd:	e8 a7 fe ff ff       	call   10069 <lgdt>
   101c2:	83 c4 08             	add    $0x8,%esp
}
   101c5:	90                   	nop
   101c6:	c9                   	leave  
   101c7:	c3                   	ret    

000101c8 <cpu_init>:


void cpu_init(void) {
   101c8:	55                   	push   %ebp
   101c9:	89 e5                	mov    %esp,%ebp
    init_gdt();
   101cb:	e8 8b ff ff ff       	call   1015b <init_gdt>
   101d0:	90                   	nop
   101d1:	5d                   	pop    %ebp
   101d2:	c3                   	ret    

000101d3 <lidt>:


// lidt 
// 将 IDT 表加载进 内存中，即写IDTR寄存器，保存IDT表的地址
static inline void lidt(uint32_t start, uint32_t size) {
   101d3:	55                   	push   %ebp
   101d4:	89 e5                	mov    %esp,%ebp
   101d6:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } idt;

    idt.start31_16 = start >> 16;
   101d9:	8b 45 08             	mov    0x8(%ebp),%eax
   101dc:	c1 e8 10             	shr    $0x10,%eax
   101df:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   101e3:	8b 45 08             	mov    0x8(%ebp),%eax
   101e6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   101ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   101ed:	83 e8 01             	sub    $0x1,%eax
   101f0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   101f4:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   101f8:	90                   	nop
   101f9:	c9                   	leave  
   101fa:	c3                   	ret    

000101fb <do_default_handler>:
static gate_desc_t idt_table[IDT_TABLE_NO];

void exception_handler_unknown(void);


static void do_default_handler(exception_frame_t* frame, const char* message) {
   101fb:	55                   	push   %ebp
   101fc:	89 e5                	mov    %esp,%ebp
    while (1) { }
   101fe:	eb fe                	jmp    101fe <do_default_handler+0x3>

00010200 <do_handler_unknown>:
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   10200:	55                   	push   %ebp
   10201:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknown exception");
   10203:	68 f2 02 01 00       	push   $0x102f2
   10208:	ff 75 08             	pushl  0x8(%ebp)
   1020b:	e8 eb ff ff ff       	call   101fb <do_default_handler>
   10210:	83 c4 08             	add    $0x8,%esp
}
   10213:	90                   	nop
   10214:	c9                   	leave  
   10215:	c3                   	ret    

00010216 <do_handler_divide_error>:


// divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   10216:	55                   	push   %ebp
   10217:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "divide exception");
   10219:	68 04 03 01 00       	push   $0x10304
   1021e:	ff 75 08             	pushl  0x8(%ebp)
   10221:	e8 d5 ff ff ff       	call   101fb <do_default_handler>
   10226:	83 c4 08             	add    $0x8,%esp
}
   10229:	90                   	nop
   1022a:	c9                   	leave  
   1022b:	c3                   	ret    

0001022c <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   1022c:	55                   	push   %ebp
   1022d:	89 e5                	mov    %esp,%ebp
   1022f:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   10232:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10239:	eb 25                	jmp    10260 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   1023b:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10240:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10243:	c1 e0 03             	shl    $0x3,%eax
   10246:	05 20 0b 01 00       	add    $0x10b20,%eax
   1024b:	68 00 8e 00 00       	push   $0x8e00
   10250:	52                   	push   %edx
   10251:	6a 08                	push   $0x8
   10253:	50                   	push   %eax
   10254:	e8 bb fe ff ff       	call   10114 <gate_desc_set>
   10259:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   1025c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10260:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10264:	7e d5                	jle    1023b <irq_init+0xf>
    }

    irq_install(IRQ0_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   10266:	83 ec 08             	sub    $0x8,%esp
   10269:	68 4a 00 01 00       	push   $0x1004a
   1026e:	6a 00                	push   $0x0
   10270:	e8 1c 00 00 00       	call   10291 <irq_install>
   10275:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10278:	b8 20 0b 01 00       	mov    $0x10b20,%eax
   1027d:	83 ec 08             	sub    $0x8,%esp
   10280:	68 00 04 00 00       	push   $0x400
   10285:	50                   	push   %eax
   10286:	e8 48 ff ff ff       	call   101d3 <lidt>
   1028b:	83 c4 10             	add    $0x10,%esp
}
   1028e:	90                   	nop
   1028f:	c9                   	leave  
   10290:	c3                   	ret    

00010291 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   10291:	55                   	push   %ebp
   10292:	89 e5                	mov    %esp,%ebp
   10294:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   10297:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1029b:	7e 07                	jle    102a4 <irq_install+0x13>
        return -1;
   1029d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102a2:	eb 20                	jmp    102c4 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   102a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102a7:	8b 55 08             	mov    0x8(%ebp),%edx
   102aa:	c1 e2 03             	shl    $0x3,%edx
   102ad:	81 c2 20 0b 01 00    	add    $0x10b20,%edx
   102b3:	68 00 8e 00 00       	push   $0x8e00
   102b8:	50                   	push   %eax
   102b9:	6a 08                	push   $0x8
   102bb:	52                   	push   %edx
   102bc:	e8 53 fe ff ff       	call   10114 <gate_desc_set>
   102c1:	83 c4 10             	add    $0x10,%esp
   102c4:	c9                   	leave  
   102c5:	c3                   	ret    

000102c6 <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   102c6:	55                   	push   %ebp
   102c7:	89 e5                	mov    %esp,%ebp
   102c9:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    __asm__ __volatile__("nop");
   102cc:	90                   	nop

    cpu_init();
   102cd:	e8 f6 fe ff ff       	call   101c8 <cpu_init>
    irq_init();
   102d2:	e8 55 ff ff ff       	call   1022c <irq_init>
}
   102d7:	90                   	nop
   102d8:	c9                   	leave  
   102d9:	c3                   	ret    

000102da <init_main>:


void init_main(void) {
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
   102dd:	83 ec 10             	sub    $0x10,%esp
    int a = 3 / 0;
   102e0:	b8 03 00 00 00       	mov    $0x3,%eax
   102e5:	b9 00 00 00 00       	mov    $0x0,%ecx
   102ea:	99                   	cltd   
   102eb:	f7 f9                	idiv   %ecx
   102ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (1) {  }
   102f0:	eb fe                	jmp    102f0 <init_main+0x16>
