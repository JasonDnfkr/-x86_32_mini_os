
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x0000001c memsz 0x0000001c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000015  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00100018  00100018  00001018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_line   00000146  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a2  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cb  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  000013d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    0000018f  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  0000159f  2**0
                  CONTENTS, READONLY
  8 .debug_frame  00000034  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00100000 l    d  .text	00000000 .text
00100018 l    d  .data	00000000 .data
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 init.c
00100018 g     O .data	00000004 test_var
0010000e g     F .text	00000007 kernel_init
00100000 g       .text	00000000 _start



Disassembly of section .text:

00100000 <_start>:

    .text
    .extern kernel_init
    .global _start
_start:
    push %ebp
  100000:	55                   	push   %ebp
    mov %esp, %ebp
  100001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
  100003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
  100006:	50                   	push   %eax
    call kernel_init
  100007:	e8 02 00 00 00       	call   10000e <kernel_init>
  10000c:	eb fe                	jmp    10000c <_start+0xc>

0010000e <kernel_init>:
//     __asm__ __volatile__("nop");
int test_var = 4;

// }

void kernel_init(boot_info_t* boot_info) {
  10000e:	55                   	push   %ebp
  10000f:	89 e5                	mov    %esp,%ebp
    // while (1) { }
    __asm__ __volatile__("nop");
  100011:	90                   	nop

  100012:	90                   	nop
  100013:	5d                   	pop    %ebp
  100014:	c3                   	ret    
