
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000031a0 memsz 0x000031a0 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006f40 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001af40 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b84  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000061c  00012b84  00012b84  00003b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005f40  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000046  80000000  0001af40  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001c74  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000433e  00000000  00000000  00007cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001183  00000000  00000000  0000bff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d180  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001165  00000000  00000000  0000d360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000e4c5  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000012b4  00000000  00000000  0000e4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012b84 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010368 l     F .text	0000005d addr_alloc_init
000103c5 l     F .text	00000067 addr_alloc_page
0001042c l     F .text	00000062 addr_free_page
0001048e l     F .text	00000066 show_mem_info
000104f4 l     F .text	0000003c total_mem_size
00010530 l     F .text	000000a0 test_alloc
00012c64 l     O .rodata	00000012 __func__.2202
00014000 l     O .data	00000040 kernel_map.2214
00012c78 l     O .rodata	0000000c __func__.2244
00000000 l    df *ABS*	00000000 task.c
00010940 l     F .text	00000019 list_node_init
00010959 l     F .text	0000000b list_node_next
00010964 l     F .text	0000000b list_size
0001096f l     F .text	0000000a list_first
00010979 l     F .text	0000000c write_cr3
00010985 l     F .text	00000017 write_tr
0001099c l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000190 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
000109ad l     F .text	0000012d tss_init
00012d08 l     O .rodata	0000000a __func__.2232
00010be9 l     F .text	00000005 idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010f9d l     F .text	00000028 lgdt
00010fc5 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
000111fb l     F .text	0000001d inb
00011218 l     F .text	0000001f outb
00011237 l     F .text	00000007 cli
0001123e l     F .text	00000007 sti
00011245 l     F .text	00000028 lidt
0001126d l     F .text	00000007 hlt
00011274 l     F .text	00000010 read_eflags
00011284 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
0001128f l     F .text	000000ca dump_core_regs
00011359 l     F .text	0000003e do_default_handler
000115e3 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
000119e7 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011a2e l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011aa6 l     F .text	0000000b list_size
00011ab1 l     F .text	0000000a list_first
00011abb l     F .text	0000000b list_last
0001312c l     O .rodata	0000000c __func__.2188
00018e20 l     O .bss	000000b4 first_task
00013138 l     O .rodata	00000013 __func__.2221
00000000 l    df *ABS*	00000000 mutex.c
00011d52 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00011eec l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012275 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
000127d2 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000129c8 l     F .text	0000001d inb
000129e5 l     F .text	0000001f outb
00018ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
000115c7 g     F .text	0000001c do_handler_control_protection_exception
0001216d g     F .text	0000003a bitmap_get_bit
00010d56 g     F .text	0000000a task_current
000113cf g     F .text	0000001c do_handler_debug_exception
000115ab g     F .text	0000001c do_handler_virtualization_exception
00011988 g     F .text	0000000b irq_enable_global
000114cb g     F .text	0000001c do_handler_segment_not_present
00010cb4 g     F .text	00000034 task_set_ready
000122c3 g     F .text	00000070 kstrncpy
000121a7 g     F .text	0000001b bitmap_is_set
00011b1a g     F .text	0000019c link_test
000113eb g     F .text	0000001c do_handler_nmi_interrupt
00011116 g     F .text	00000023 cpu_init
00012a04 g     F .text	000000a2 log_init
00011cf7 g     F .text	0000005b init_main
00012437 g     F .text	00000041 kmemset
000111c2 g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
0001186b g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00012333 g     F .text	0000003b kstrlen
00011423 g     F .text	0000001c do_handler_overflow
00010680 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
00011503 g     F .text	0000001c do_handler_general_protection
00012007 g     F .text	00000029 sem_count
80000012 g     F .first_task	00000028 first_task_main
0001143f g     F .text	0000001c do_handler_bound_range_exceed
00012099 g     F .text	000000d4 bitmap_set_bit
00011493 g     F .text	0000001c do_handler_double_fault
0001151f g     F .text	0000001c do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011993 g     F .text	0000002b pic_send_eoi
00010caa g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107d7 g     F .text	00000085 memory_create_uvm
00011f1a g     F .text	0000006b sem_wait
00011a06 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
00012808 g     F .text	0000005f list_insert_front
00018f40 g     O .bss	00002000 stack
00010f46 g     F .text	00000057 sys_sleep
00012639 g     F .text	00000163 kvsprintf
00011f85 g     F .text	00000082 sem_notify
0001145b g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011a8e g     F .text	00000018 timer_init
00010c54 g     F .text	00000056 task_first_init
00011573 g     F .text	0000001c do_handler_machine_check
00011477 g     F .text	0000001c do_handler_device_not_found
00010f26 g     F .text	00000020 task_set_wakeup
00012867 g     F .text	00000063 list_insert_back
0001197d g     F .text	0000000b irq_disable_global
00010d60 g     F .text	00000061 sys_sched_yield
0001af86 g       *ABS*	00000000 mem_free_start
00011ac6 g     F .text	00000054 kernel_init
00011ef7 g     F .text	00000023 sem_init
00012615 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00010ce8 g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001af40 g       .bss	00000000 e_data
000124d6 g     F .text	0000013f kitoa
0001227c g     F .text	00000047 kstrcpy
0001236e g     F .text	0000007a kstrncmp
00011557 g     F .text	0000001c do_handler_aligment_check
00012478 g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
000114af g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001af86 g       *ABS*	00000000 e_first_task
00010ef5 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
00011836 g     F .text	00000035 irq_install
000110a9 g     F .text	0000006d init_gdt
000119be g     F .text	00000018 irq_enter_protection
00011d5d g     F .text	00000041 mutex_init
000118f6 g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
000113b3 g     F .text	0000001c do_handler_divide_error
00012030 g     F .text	00000016 bitmap_byte_count
00010dc1 g     F .text	0000005b task_dispatch
00011cb6 g     F .text	00000041 move_to_first_task
00010d13 g     F .text	00000043 task_next_run
00010707 g     F .text	000000d0 create_kernel_table
000127e5 g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
00011397 g     F .text	0000001c do_handler_unknown
00010bcb g     F .text	0000001e task_switch_from_to
00011676 g     F .text	000001c0 irq_init
000119d6 g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00010fdf g     F .text	00000083 segment_desc_set
000131a0 g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
00012046 g     F .text	00000053 bitmap_init
0001158f g     F .text	0000001c do_handler_simd_floating_point_exception
000123e8 g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
000121c2 g     F .text	000000b3 bitmap_alloc_nbits
00010bee g     F .text	00000066 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010e1c g     F .text	000000d9 task_time_tick
0001085c g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
0001279c g     F .text	00000036 pannic
000114e7 g     F .text	0000001c do_handler_stack_segment_fault
00011407 g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
0001153b g     F .text	0000001c do_handler_floating_point_error
00012aa6 g     F .text	000000de log_printf
00010ada g     F .text	000000f1 task_init
000128ca g     F .text	00000079 list_remove_front
0001114d g     F .text	00000075 gdt_alloc_desc
00011e2c g     F .text	000000c0 mutex_release
00012943 g     F .text	00000085 list_remove
00011139 g     F .text	00000014 swtch_to_tss
00011062 g     F .text	00000047 gate_desc_set
00011d9e g     F .text	0000008e mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105d0 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 ba 1a 00 00       	call   11ac6 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 af 01 00       	mov    $0x1af40,%esp
    jmp init_main
   10026:	e9 cc 1c 00 00       	jmp    11cf7 <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 5b 13 00 00       	call   11397 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 58 13 00 00       	call   113b3 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 55 13 00 00       	call   113cf <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 52 13 00 00       	call   113eb <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 4f 13 00 00       	call   11407 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 4c 13 00 00       	call   11423 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 49 13 00 00       	call   1143f <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 46 13 00 00       	call   1145b <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 43 13 00 00       	call   11477 <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 42 13 00 00       	call   11493 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 41 13 00 00       	call   114af <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 40 13 00 00       	call   114cb <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 3d 13 00 00       	call   114e7 <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 3c 13 00 00       	call   11503 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 3b 13 00 00       	call   1151f <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 38 13 00 00       	call   1153b <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 37 13 00 00       	call   11557 <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 34 13 00 00       	call   11573 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 31 13 00 00       	call   1158f <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 2e 13 00 00       	call   115ab <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 2d 13 00 00       	call   115c7 <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 4d 17 00 00       	call   11a06 <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <mmu_set_page_dir>:
 */
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}

static inline void mmu_set_page_dir(uint32_t paddr) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1035a:	ff 75 08             	pushl  0x8(%ebp)
   1035d:	e8 9e ff ff ff       	call   10300 <write_cr3>
   10362:	83 c4 04             	add    $0x4,%esp
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	83 ec 08             	sub    $0x8,%esp
   10374:	68 84 2b 01 00       	push   $0x12b84
   10379:	50                   	push   %eax
   1037a:	e8 de 19 00 00       	call   11d5d <mutex_init>
   1037f:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	8b 55 10             	mov    0x10(%ebp),%edx
   10388:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	8b 55 14             	mov    0x14(%ebp),%edx
   10391:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 55 18             	mov    0x18(%ebp),%edx
   1039a:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 40 60             	mov    0x60(%eax),%eax
   103a3:	ba 00 00 00 00       	mov    $0x0,%edx
   103a8:	f7 75 18             	divl   0x18(%ebp)
   103ab:	89 c2                	mov    %eax,%edx
   103ad:	8b 45 08             	mov    0x8(%ebp),%eax
   103b0:	83 c0 54             	add    $0x54,%eax
   103b3:	6a 00                	push   $0x0
   103b5:	52                   	push   %edx
   103b6:	ff 75 0c             	pushl  0xc(%ebp)
   103b9:	50                   	push   %eax
   103ba:	e8 87 1c 00 00       	call   12046 <bitmap_init>
   103bf:	83 c4 10             	add    $0x10,%esp
}
   103c2:	90                   	nop
   103c3:	c9                   	leave  
   103c4:	c3                   	ret    

000103c5 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
   103c8:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	83 ec 0c             	sub    $0xc,%esp
   103d8:	50                   	push   %eax
   103d9:	e8 c0 19 00 00       	call   11d9e <mutex_acquire>
   103de:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	83 c0 54             	add    $0x54,%eax
   103e7:	83 ec 04             	sub    $0x4,%esp
   103ea:	ff 75 0c             	pushl  0xc(%ebp)
   103ed:	6a 00                	push   $0x0
   103ef:	50                   	push   %eax
   103f0:	e8 cd 1d 00 00       	call   121c2 <bitmap_alloc_nbits>
   103f5:	83 c4 10             	add    $0x10,%esp
   103f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103ff:	78 17                	js     10418 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	8b 50 5c             	mov    0x5c(%eax),%edx
   10407:	8b 45 08             	mov    0x8(%ebp),%eax
   1040a:	8b 48 64             	mov    0x64(%eax),%ecx
   1040d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10410:	0f af c1             	imul   %ecx,%eax
   10413:	01 d0                	add    %edx,%eax
   10415:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10418:	8b 45 08             	mov    0x8(%ebp),%eax
   1041b:	83 ec 0c             	sub    $0xc,%esp
   1041e:	50                   	push   %eax
   1041f:	e8 08 1a 00 00       	call   11e2c <mutex_release>
   10424:	83 c4 10             	add    $0x10,%esp

    return addr;
   10427:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1042a:	c9                   	leave  
   1042b:	c3                   	ret    

0001042c <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   1042c:	55                   	push   %ebp
   1042d:	89 e5                	mov    %esp,%ebp
   1042f:	53                   	push   %ebx
   10430:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10433:	8b 45 08             	mov    0x8(%ebp),%eax
   10436:	83 ec 0c             	sub    $0xc,%esp
   10439:	50                   	push   %eax
   1043a:	e8 5f 19 00 00       	call   11d9e <mutex_acquire>
   1043f:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10442:	8b 45 08             	mov    0x8(%ebp),%eax
   10445:	8b 40 5c             	mov    0x5c(%eax),%eax
   10448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044b:	89 d1                	mov    %edx,%ecx
   1044d:	29 c1                	sub    %eax,%ecx
   1044f:	8b 45 08             	mov    0x8(%ebp),%eax
   10452:	8b 58 64             	mov    0x64(%eax),%ebx
   10455:	89 c8                	mov    %ecx,%eax
   10457:	ba 00 00 00 00       	mov    $0x0,%edx
   1045c:	f7 f3                	div    %ebx
   1045e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10461:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10464:	8b 55 08             	mov    0x8(%ebp),%edx
   10467:	83 c2 54             	add    $0x54,%edx
   1046a:	6a 00                	push   $0x0
   1046c:	ff 75 10             	pushl  0x10(%ebp)
   1046f:	50                   	push   %eax
   10470:	52                   	push   %edx
   10471:	e8 23 1c 00 00       	call   12099 <bitmap_set_bit>
   10476:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	83 ec 0c             	sub    $0xc,%esp
   1047f:	50                   	push   %eax
   10480:	e8 a7 19 00 00       	call   11e2c <mutex_release>
   10485:	83 c4 10             	add    $0x10,%esp
}
   10488:	90                   	nop
   10489:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1048c:	c9                   	leave  
   1048d:	c3                   	ret    

0001048e <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1048e:	55                   	push   %ebp
   1048f:	89 e5                	mov    %esp,%ebp
   10491:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10494:	83 ec 0c             	sub    $0xc,%esp
   10497:	68 91 2b 01 00       	push   $0x12b91
   1049c:	e8 05 26 00 00       	call   12aa6 <log_printf>
   104a1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104ab:	eb 29                	jmp    104d6 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104ad:	8b 45 08             	mov    0x8(%ebp),%eax
   104b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104b3:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104bd:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c0:	52                   	push   %edx
   104c1:	50                   	push   %eax
   104c2:	ff 75 f4             	pushl  -0xc(%ebp)
   104c5:	68 9d 2b 01 00       	push   $0x12b9d
   104ca:	e8 d7 25 00 00       	call   12aa6 <log_printf>
   104cf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d6:	8b 45 08             	mov    0x8(%ebp),%eax
   104d9:	8b 40 50             	mov    0x50(%eax),%eax
   104dc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104df:	7c cc                	jl     104ad <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	68 ab 2b 01 00       	push   $0x12bab
   104e9:	e8 b8 25 00 00       	call   12aa6 <log_printf>
   104ee:	83 c4 10             	add    $0x10,%esp
}
   104f1:	90                   	nop
   104f2:	c9                   	leave  
   104f3:	c3                   	ret    

000104f4 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   104f4:	55                   	push   %ebp
   104f5:	89 e5                	mov    %esp,%ebp
   104f7:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10501:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10508:	eb 16                	jmp    10520 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10510:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10514:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10517:	01 d0                	add    %edx,%eax
   10519:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1051c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 40 50             	mov    0x50(%eax),%eax
   10526:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10529:	7c df                	jl     1050a <total_mem_size+0x16>
    }
    return mem_size;
   1052b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1052e:	c9                   	leave  
   1052f:	c3                   	ret    

00010530 <test_alloc>:


static void test_alloc(void) {
   10530:	55                   	push   %ebp
   10531:	89 e5                	mov    %esp,%ebp
   10533:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10539:	83 ec 0c             	sub    $0xc,%esp
   1053c:	68 00 10 00 00       	push   $0x1000
   10541:	68 00 00 04 00       	push   $0x40000
   10546:	68 00 10 00 00       	push   $0x1000
   1054b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10551:	50                   	push   %eax
   10552:	8d 45 80             	lea    -0x80(%ebp),%eax
   10555:	50                   	push   %eax
   10556:	e8 0d fe ff ff       	call   10368 <addr_alloc_init>
   1055b:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   1055e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10565:	eb 2b                	jmp    10592 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   10567:	83 ec 08             	sub    $0x8,%esp
   1056a:	6a 02                	push   $0x2
   1056c:	8d 45 80             	lea    -0x80(%ebp),%eax
   1056f:	50                   	push   %eax
   10570:	e8 50 fe ff ff       	call   103c5 <addr_alloc_page>
   10575:	83 c4 10             	add    $0x10,%esp
   10578:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   1057b:	83 ec 08             	sub    $0x8,%esp
   1057e:	ff 75 e8             	pushl  -0x18(%ebp)
   10581:	68 ad 2b 01 00       	push   $0x12bad
   10586:	e8 1b 25 00 00       	call   12aa6 <log_printf>
   1058b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   1058e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10592:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10596:	7e cf                	jle    10567 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   10598:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   1059f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105a6:	eb 1f                	jmp    105c7 <test_alloc+0x97>
        addr += 4096 * 2;
   105a8:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105af:	83 ec 04             	sub    $0x4,%esp
   105b2:	6a 02                	push   $0x2
   105b4:	ff 75 f0             	pushl  -0x10(%ebp)
   105b7:	8d 45 80             	lea    -0x80(%ebp),%eax
   105ba:	50                   	push   %eax
   105bb:	e8 6c fe ff ff       	call   1042c <addr_free_page>
   105c0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105c3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105c7:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105cb:	7e db                	jle    105a8 <test_alloc+0x78>
    }
}
   105cd:	90                   	nop
   105ce:	c9                   	leave  
   105cf:	c3                   	ret    

000105d0 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105d0:	55                   	push   %ebp
   105d1:	89 e5                	mov    %esp,%ebp
   105d3:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105d6:	ff 75 0c             	pushl  0xc(%ebp)
   105d9:	e8 2e fd ff ff       	call   1030c <pde_index>
   105de:	83 c4 04             	add    $0x4,%esp
   105e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	01 d0                	add    %edx,%eax
   105ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   105f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f3:	0f b6 00             	movzbl (%eax),%eax
   105f6:	83 e0 01             	and    $0x1,%eax
   105f9:	84 c0                	test   %al,%al
   105fb:	74 10                	je     1060d <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   105fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10600:	e8 1b fd ff ff       	call   10320 <pde_paddr>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1060b:	eb 57                	jmp    10664 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1060d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10611:	75 07                	jne    1061a <find_pte+0x4a>
            return (pte_t*)0;
   10613:	b8 00 00 00 00       	mov    $0x0,%eax
   10618:	eb 64                	jmp    1067e <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1061a:	83 ec 08             	sub    $0x8,%esp
   1061d:	6a 01                	push   $0x1
   1061f:	68 00 50 01 00       	push   $0x15000
   10624:	e8 9c fd ff ff       	call   103c5 <addr_alloc_page>
   10629:	83 c4 10             	add    $0x10,%esp
   1062c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1062f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10633:	75 07                	jne    1063c <find_pte+0x6c>
            return (pte_t*)0;
   10635:	b8 00 00 00 00       	mov    $0x0,%eax
   1063a:	eb 42                	jmp    1067e <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   1063c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1063f:	83 c8 07             	or     $0x7,%eax
   10642:	89 c2                	mov    %eax,%edx
   10644:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10647:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10649:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1064c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1064f:	83 ec 04             	sub    $0x4,%esp
   10652:	68 00 10 00 00       	push   $0x1000
   10657:	6a 00                	push   $0x0
   10659:	ff 75 f4             	pushl  -0xc(%ebp)
   1065c:	e8 d6 1d 00 00       	call   12437 <kmemset>
   10661:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   10664:	83 ec 0c             	sub    $0xc,%esp
   10667:	ff 75 0c             	pushl  0xc(%ebp)
   1066a:	e8 d8 fc ff ff       	call   10347 <pte_index>
   1066f:	83 c4 10             	add    $0x10,%esp
   10672:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067c:	01 d0                	add    %edx,%eax
}
   1067e:	c9                   	leave  
   1067f:	c3                   	ret    

00010680 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   10680:	55                   	push   %ebp
   10681:	89 e5                	mov    %esp,%ebp
   10683:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068d:	eb 6e                	jmp    106fd <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   1068f:	83 ec 04             	sub    $0x4,%esp
   10692:	6a 01                	push   $0x1
   10694:	ff 75 0c             	pushl  0xc(%ebp)
   10697:	ff 75 08             	pushl  0x8(%ebp)
   1069a:	e8 31 ff ff ff       	call   105d0 <find_pte>
   1069f:	83 c4 10             	add    $0x10,%esp
   106a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106a9:	75 07                	jne    106b2 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106b0:	eb 53                	jmp    10705 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	0f b6 00             	movzbl (%eax),%eax
   106b8:	83 e0 01             	and    $0x1,%eax
   106bb:	84 c0                	test   %al,%al
   106bd:	74 1c                	je     106db <memory_create_map+0x5b>
   106bf:	68 bd 2b 01 00       	push   $0x12bbd
   106c4:	68 64 2c 01 00       	push   $0x12c64
   106c9:	68 a2 00 00 00       	push   $0xa2
   106ce:	68 d0 2b 01 00       	push   $0x12bd0
   106d3:	e8 c4 20 00 00       	call   1279c <pannic>
   106d8:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   106db:	8b 45 10             	mov    0x10(%ebp),%eax
   106de:	0b 45 18             	or     0x18(%ebp),%eax
   106e1:	83 c8 01             	or     $0x1,%eax
   106e4:	89 c2                	mov    %eax,%edx
   106e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e9:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   106eb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106f2:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10700:	3b 45 14             	cmp    0x14(%ebp),%eax
   10703:	7c 8a                	jl     1068f <memory_create_map+0xf>
    }
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <create_kernel_table>:


void create_kernel_table(void) {
   10707:	55                   	push   %ebp
   10708:	89 e5                	mov    %esp,%ebp
   1070a:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1070d:	83 ec 04             	sub    $0x4,%esp
   10710:	68 00 10 00 00       	push   $0x1000
   10715:	6a 00                	push   $0x0
   10717:	68 00 60 01 00       	push   $0x16000
   1071c:	e8 16 1d 00 00       	call   12437 <kmemset>
   10721:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1072b:	e9 98 00 00 00       	jmp    107c8 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10730:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10733:	c1 e0 04             	shl    $0x4,%eax
   10736:	05 00 40 01 00       	add    $0x14000,%eax
   1073b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1073e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10741:	8b 00                	mov    (%eax),%eax
   10743:	83 ec 08             	sub    $0x8,%esp
   10746:	68 00 10 00 00       	push   $0x1000
   1074b:	50                   	push   %eax
   1074c:	e8 a2 fb ff ff       	call   102f3 <down2>
   10751:	83 c4 10             	add    $0x10,%esp
   10754:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10757:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1075a:	8b 40 04             	mov    0x4(%eax),%eax
   1075d:	83 ec 08             	sub    $0x8,%esp
   10760:	68 00 10 00 00       	push   $0x1000
   10765:	50                   	push   %eax
   10766:	e8 71 fb ff ff       	call   102dc <up2>
   1076b:	83 c4 10             	add    $0x10,%esp
   1076e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10771:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10774:	8b 40 08             	mov    0x8(%eax),%eax
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	68 00 10 00 00       	push   $0x1000
   1077f:	50                   	push   %eax
   10780:	e8 6e fb ff ff       	call   102f3 <down2>
   10785:	83 c4 10             	add    $0x10,%esp
   10788:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   1078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1078e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10791:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   10797:	85 c0                	test   %eax,%eax
   10799:	0f 48 c2             	cmovs  %edx,%eax
   1079c:	c1 f8 0c             	sar    $0xc,%eax
   1079f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a5:	8b 48 0c             	mov    0xc(%eax),%ecx
   107a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ae:	83 ec 0c             	sub    $0xc,%esp
   107b1:	51                   	push   %ecx
   107b2:	ff 75 e0             	pushl  -0x20(%ebp)
   107b5:	52                   	push   %edx
   107b6:	50                   	push   %eax
   107b7:	68 00 60 01 00       	push   $0x16000
   107bc:	e8 bf fe ff ff       	call   10680 <memory_create_map>
   107c1:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107cb:	83 f8 03             	cmp    $0x3,%eax
   107ce:	0f 86 5c ff ff ff    	jbe    10730 <create_kernel_table+0x29>
    }
}
   107d4:	90                   	nop
   107d5:	c9                   	leave  
   107d6:	c3                   	ret    

000107d7 <memory_create_uvm>:

// 创建用户页表
uint32_t memory_create_uvm(void) {
   107d7:	55                   	push   %ebp
   107d8:	89 e5                	mov    %esp,%ebp
   107da:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	6a 01                	push   $0x1
   107e2:	68 00 50 01 00       	push   $0x15000
   107e7:	e8 d9 fb ff ff       	call   103c5 <addr_alloc_page>
   107ec:	83 c4 10             	add    $0x10,%esp
   107ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107f6:	75 07                	jne    107ff <memory_create_uvm+0x28>
        return 0;
   107f8:	b8 00 00 00 00       	mov    $0x0,%eax
   107fd:	eb 5b                	jmp    1085a <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   107ff:	83 ec 04             	sub    $0x4,%esp
   10802:	68 00 10 00 00       	push   $0x1000
   10807:	6a 00                	push   $0x0
   10809:	ff 75 f0             	pushl  -0x10(%ebp)
   1080c:	e8 26 1c 00 00       	call   12437 <kmemset>
   10811:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10814:	83 ec 0c             	sub    $0xc,%esp
   10817:	68 00 00 00 80       	push   $0x80000000
   1081c:	e8 eb fa ff ff       	call   1030c <pde_index>
   10821:	83 c4 10             	add    $0x10,%esp
   10824:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10827:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1082e:	eb 1f                	jmp    1084f <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10830:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10833:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1083a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083d:	01 c2                	add    %eax,%edx
   1083f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10842:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10849:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   1084b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1084f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10852:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10855:	77 d9                	ja     10830 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10857:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1085a:	c9                   	leave  
   1085b:	c3                   	ret    

0001085c <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   1085c:	55                   	push   %ebp
   1085d:	89 e5                	mov    %esp,%ebp
   1085f:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10862:	83 ec 0c             	sub    $0xc,%esp
   10865:	68 17 2c 01 00       	push   $0x12c17
   1086a:	e8 37 22 00 00       	call   12aa6 <log_printf>
   1086f:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10872:	83 ec 0c             	sub    $0xc,%esp
   10875:	ff 75 08             	pushl  0x8(%ebp)
   10878:	e8 11 fc ff ff       	call   1048e <show_mem_info>
   1087d:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   10880:	c7 45 f4 86 af 01 00 	movl   $0x1af86,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10887:	83 ec 0c             	sub    $0xc,%esp
   1088a:	ff 75 08             	pushl  0x8(%ebp)
   1088d:	e8 62 fc ff ff       	call   104f4 <total_mem_size>
   10892:	83 c4 10             	add    $0x10,%esp
   10895:	2d 00 00 10 00       	sub    $0x100000,%eax
   1089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   1089d:	83 ec 08             	sub    $0x8,%esp
   108a0:	68 00 10 00 00       	push   $0x1000
   108a5:	ff 75 f0             	pushl  -0x10(%ebp)
   108a8:	e8 46 fa ff ff       	call   102f3 <down2>
   108ad:	83 c4 10             	add    $0x10,%esp
   108b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108b3:	83 ec 04             	sub    $0x4,%esp
   108b6:	ff 75 f0             	pushl  -0x10(%ebp)
   108b9:	68 00 00 10 00       	push   $0x100000
   108be:	68 21 2c 01 00       	push   $0x12c21
   108c3:	e8 de 21 00 00       	call   12aa6 <log_printf>
   108c8:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108cb:	83 ec 0c             	sub    $0xc,%esp
   108ce:	68 00 10 00 00       	push   $0x1000
   108d3:	ff 75 f0             	pushl  -0x10(%ebp)
   108d6:	68 00 00 10 00       	push   $0x100000
   108db:	ff 75 f4             	pushl  -0xc(%ebp)
   108de:	68 00 50 01 00       	push   $0x15000
   108e3:	e8 80 fa ff ff       	call   10368 <addr_alloc_init>
   108e8:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   108eb:	a1 60 50 01 00       	mov    0x15060,%eax
   108f0:	c1 e8 0c             	shr    $0xc,%eax
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	50                   	push   %eax
   108f7:	e8 34 17 00 00       	call   12030 <bitmap_byte_count>
   108fc:	83 c4 10             	add    $0x10,%esp
   108ff:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10902:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10909:	76 1c                	jbe    10927 <memory_init+0xcb>
   1090b:	68 3c 2c 01 00       	push   $0x12c3c
   10910:	68 78 2c 01 00       	push   $0x12c78
   10915:	68 fa 00 00 00       	push   $0xfa
   1091a:	68 d0 2b 01 00       	push   $0x12bd0
   1091f:	e8 78 1e 00 00       	call   1279c <pannic>
   10924:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10927:	e8 db fd ff ff       	call   10707 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1092c:	b8 00 60 01 00       	mov    $0x16000,%eax
   10931:	83 ec 0c             	sub    $0xc,%esp
   10934:	50                   	push   %eax
   10935:	e8 1d fa ff ff       	call   10357 <mmu_set_page_dir>
   1093a:	83 c4 10             	add    $0x10,%esp
}
   1093d:	90                   	nop
   1093e:	c9                   	leave  
   1093f:	c3                   	ret    

00010940 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10940:	55                   	push   %ebp
   10941:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10943:	8b 45 08             	mov    0x8(%ebp),%eax
   10946:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   1094c:	8b 45 08             	mov    0x8(%ebp),%eax
   1094f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10956:	90                   	nop
   10957:	5d                   	pop    %ebp
   10958:	c3                   	ret    

00010959 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10959:	55                   	push   %ebp
   1095a:	89 e5                	mov    %esp,%ebp
    return node->next;
   1095c:	8b 45 08             	mov    0x8(%ebp),%eax
   1095f:	8b 40 04             	mov    0x4(%eax),%eax
}
   10962:	5d                   	pop    %ebp
   10963:	c3                   	ret    

00010964 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10964:	55                   	push   %ebp
   10965:	89 e5                	mov    %esp,%ebp
    return list->count;
   10967:	8b 45 08             	mov    0x8(%ebp),%eax
   1096a:	8b 40 08             	mov    0x8(%eax),%eax
}
   1096d:	5d                   	pop    %ebp
   1096e:	c3                   	ret    

0001096f <list_first>:

static inline list_node_t* list_first(list_t* list) {
   1096f:	55                   	push   %ebp
   10970:	89 e5                	mov    %esp,%ebp
    return list->first;
   10972:	8b 45 08             	mov    0x8(%ebp),%eax
   10975:	8b 00                	mov    (%eax),%eax
}
   10977:	5d                   	pop    %ebp
   10978:	c3                   	ret    

00010979 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10979:	55                   	push   %ebp
   1097a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1097c:	8b 45 08             	mov    0x8(%ebp),%eax
   1097f:	0f 22 d8             	mov    %eax,%cr3
}
   10982:	90                   	nop
   10983:	5d                   	pop    %ebp
   10984:	c3                   	ret    

00010985 <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10985:	55                   	push   %ebp
   10986:	89 e5                	mov    %esp,%ebp
   10988:	83 ec 04             	sub    $0x4,%esp
   1098b:	8b 45 08             	mov    0x8(%ebp),%eax
   1098e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10992:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10996:	0f 00 d8             	ltr    %ax
}
   10999:	90                   	nop
   1099a:	c9                   	leave  
   1099b:	c3                   	ret    

0001099c <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   1099c:	55                   	push   %ebp
   1099d:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1099f:	ff 75 08             	pushl  0x8(%ebp)
   109a2:	e8 d2 ff ff ff       	call   10979 <write_cr3>
   109a7:	83 c4 04             	add    $0x4,%esp
}
   109aa:	90                   	nop
   109ab:	c9                   	leave  
   109ac:	c3                   	ret    

000109ad <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   109ad:	55                   	push   %ebp
   109ae:	89 e5                	mov    %esp,%ebp
   109b0:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   109b3:	e8 95 07 00 00       	call   1114d <gdt_alloc_desc>
   109b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   109bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109bf:	79 1a                	jns    109db <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   109c1:	83 ec 0c             	sub    $0xc,%esp
   109c4:	68 84 2c 01 00       	push   $0x12c84
   109c9:	e8 d8 20 00 00       	call   12aa6 <log_printf>
   109ce:	83 c4 10             	add    $0x10,%esp
        return -1;
   109d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   109d6:	e9 fd 00 00 00       	jmp    10ad8 <tss_init+0x12b>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   109db:	8b 45 08             	mov    0x8(%ebp),%eax
   109de:	83 c0 48             	add    $0x48,%eax
   109e1:	68 89 00 00 00       	push   $0x89
   109e6:	6a 68                	push   $0x68
   109e8:	50                   	push   %eax
   109e9:	ff 75 f4             	pushl  -0xc(%ebp)
   109ec:	e8 ee 05 00 00       	call   10fdf <segment_desc_set>
   109f1:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   109f4:	8b 45 08             	mov    0x8(%ebp),%eax
   109f7:	83 c0 48             	add    $0x48,%eax
   109fa:	83 ec 04             	sub    $0x4,%esp
   109fd:	6a 68                	push   $0x68
   109ff:	6a 00                	push   $0x0
   10a01:	50                   	push   %eax
   10a02:	e8 30 1a 00 00       	call   12437 <kmemset>
   10a07:	83 c4 10             	add    $0x10,%esp
    task->tss.eip    = entry;
   10a0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a10:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10a13:	8b 45 08             	mov    0x8(%ebp),%eax
   10a16:	8b 55 10             	mov    0x10(%ebp),%edx
   10a19:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   10a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a22:	8b 55 10             	mov    0x10(%ebp),%edx
   10a25:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10a28:	8b 45 08             	mov    0x8(%ebp),%eax
   10a2b:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10a32:	8b 45 08             	mov    0x8(%ebp),%eax
   10a35:	8b 50 50             	mov    0x50(%eax),%edx
   10a38:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10a41:	8b 45 08             	mov    0x8(%ebp),%eax
   10a44:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10a4b:	00 00 00 
   10a4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a51:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10a57:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5a:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10a60:	8b 45 08             	mov    0x8(%ebp),%eax
   10a63:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10a69:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6c:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10a72:	8b 45 08             	mov    0x8(%ebp),%eax
   10a75:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7e:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = KERNEL_SELECTOR_CS;
   10a84:	8b 45 08             	mov    0x8(%ebp),%eax
   10a87:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10a8e:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10a91:	8b 45 08             	mov    0x8(%ebp),%eax
   10a94:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10a9b:	e8 37 fd ff ff       	call   107d7 <memory_create_uvm>
   10aa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (uvm_pgtbl == 0) {
   10aa3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10aa7:	75 15                	jne    10abe <tss_init+0x111>
        gdt_free_sel(tss_sel);
   10aa9:	83 ec 0c             	sub    $0xc,%esp
   10aac:	ff 75 f4             	pushl  -0xc(%ebp)
   10aaf:	e8 0e 07 00 00       	call   111c2 <gdt_free_sel>
   10ab4:	83 c4 10             	add    $0x10,%esp
        return -1;
   10ab7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10abc:	eb 1a                	jmp    10ad8 <tss_init+0x12b>
    }
    task->tss.cr3    = uvm_pgtbl;
   10abe:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ac4:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10ac7:	8b 45 08             	mov    0x8(%ebp),%eax
   10aca:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10acd:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10ad3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10ad8:	c9                   	leave  
   10ad9:	c3                   	ret    

00010ada <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   10ada:	55                   	push   %ebp
   10adb:	89 e5                	mov    %esp,%ebp
   10add:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10ae0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ae4:	75 19                	jne    10aff <task_init+0x25>
   10ae6:	68 96 2c 01 00       	push   $0x12c96
   10aeb:	68 08 2d 01 00       	push   $0x12d08
   10af0:	6a 31                	push   $0x31
   10af2:	68 ac 2c 01 00       	push   $0x12cac
   10af7:	e8 a0 1c 00 00       	call   1279c <pannic>
   10afc:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   10aff:	83 ec 04             	sub    $0x4,%esp
   10b02:	ff 75 14             	pushl  0x14(%ebp)
   10b05:	ff 75 10             	pushl  0x10(%ebp)
   10b08:	ff 75 08             	pushl  0x8(%ebp)
   10b0b:	e8 9d fe ff ff       	call   109ad <tss_init>
   10b10:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10b13:	8b 45 08             	mov    0x8(%ebp),%eax
   10b16:	83 c0 04             	add    $0x4,%eax
   10b19:	83 ec 04             	sub    $0x4,%esp
   10b1c:	6a 20                	push   $0x20
   10b1e:	ff 75 0c             	pushl  0xc(%ebp)
   10b21:	50                   	push   %eax
   10b22:	e8 9c 17 00 00       	call   122c3 <kstrncpy>
   10b27:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10b33:	8b 45 08             	mov    0x8(%ebp),%eax
   10b36:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b40:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10b47:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4a:	8b 50 40             	mov    0x40(%eax),%edx
   10b4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b50:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10b53:	8b 45 08             	mov    0x8(%ebp),%eax
   10b56:	83 c0 2c             	add    $0x2c,%eax
   10b59:	83 ec 0c             	sub    $0xc,%esp
   10b5c:	50                   	push   %eax
   10b5d:	e8 de fd ff ff       	call   10940 <list_node_init>
   10b62:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10b65:	8b 45 08             	mov    0x8(%ebp),%eax
   10b68:	83 c0 24             	add    $0x24,%eax
   10b6b:	83 ec 0c             	sub    $0xc,%esp
   10b6e:	50                   	push   %eax
   10b6f:	e8 cc fd ff ff       	call   10940 <list_node_init>
   10b74:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10b77:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7a:	83 c0 34             	add    $0x34,%eax
   10b7d:	83 ec 0c             	sub    $0xc,%esp
   10b80:	50                   	push   %eax
   10b81:	e8 ba fd ff ff       	call   10940 <list_node_init>
   10b86:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10b89:	e8 30 0e 00 00       	call   119be <irq_enter_protection>
   10b8e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10b91:	83 ec 0c             	sub    $0xc,%esp
   10b94:	ff 75 08             	pushl  0x8(%ebp)
   10b97:	e8 18 01 00 00       	call   10cb4 <task_set_ready>
   10b9c:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba2:	83 c0 2c             	add    $0x2c,%eax
   10ba5:	83 ec 08             	sub    $0x8,%esp
   10ba8:	50                   	push   %eax
   10ba9:	68 10 70 01 00       	push   $0x17010
   10bae:	e8 b4 1c 00 00       	call   12867 <list_insert_back>
   10bb3:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10bb6:	83 ec 0c             	sub    $0xc,%esp
   10bb9:	ff 75 f4             	pushl  -0xc(%ebp)
   10bbc:	e8 15 0e 00 00       	call   119d6 <irq_leave_protection>
   10bc1:	83 c4 10             	add    $0x10,%esp

    return 0;
   10bc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bc9:	c9                   	leave  
   10bca:	c3                   	ret    

00010bcb <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10bcb:	55                   	push   %ebp
   10bcc:	89 e5                	mov    %esp,%ebp
   10bce:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10bd1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bd4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10bda:	83 ec 0c             	sub    $0xc,%esp
   10bdd:	50                   	push   %eax
   10bde:	e8 56 05 00 00       	call   11139 <swtch_to_tss>
   10be3:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10be6:	90                   	nop
   10be7:	c9                   	leave  
   10be8:	c3                   	ret    

00010be9 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10be9:	55                   	push   %ebp
   10bea:	89 e5                	mov    %esp,%ebp
    while (1) {
   10bec:	eb fe                	jmp    10bec <idle_task_entry+0x3>

00010bee <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10bee:	55                   	push   %ebp
   10bef:	89 e5                	mov    %esp,%ebp
   10bf1:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10bf4:	83 ec 0c             	sub    $0xc,%esp
   10bf7:	68 04 70 01 00       	push   $0x17004
   10bfc:	e8 e4 1b 00 00       	call   127e5 <list_init>
   10c01:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10c04:	83 ec 0c             	sub    $0xc,%esp
   10c07:	68 10 70 01 00       	push   $0x17010
   10c0c:	e8 d4 1b 00 00       	call   127e5 <list_init>
   10c11:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10c14:	83 ec 0c             	sub    $0xc,%esp
   10c17:	68 1c 70 01 00       	push   $0x1701c
   10c1c:	e8 c4 1b 00 00       	call   127e5 <list_init>
   10c21:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10c24:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10c2b:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + IDLE_TASK_SIZE);
   10c2e:	b8 a0 71 01 00       	mov    $0x171a0,%eax
   10c33:	05 00 04 00 00       	add    $0x400,%eax
   10c38:	ba e9 0b 01 00       	mov    $0x10be9,%edx
   10c3d:	50                   	push   %eax
   10c3e:	52                   	push   %edx
   10c3f:	68 f1 2c 01 00       	push   $0x12cf1
   10c44:	68 dc 70 01 00       	push   $0x170dc
   10c49:	e8 8c fe ff ff       	call   10ada <task_init>
   10c4e:	83 c4 10             	add    $0x10,%esp
}
   10c51:	90                   	nop
   10c52:	c9                   	leave  
   10c53:	c3                   	ret    

00010c54 <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10c54:	55                   	push   %ebp
   10c55:	89 e5                	mov    %esp,%ebp
   10c57:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    uint32_t first_start = (uint32_t)first_task_entry;
   10c5a:	c7 45 f4 00 00 00 80 	movl   $0x80000000,-0xc(%ebp)

    task_init(&task_manager.first_task, "first task", (uint32_t)first_start, 0);
   10c61:	6a 00                	push   $0x0
   10c63:	ff 75 f4             	pushl  -0xc(%ebp)
   10c66:	68 fb 2c 01 00       	push   $0x12cfb
   10c6b:	68 28 70 01 00       	push   $0x17028
   10c70:	e8 65 fe ff ff       	call   10ada <task_init>
   10c75:	83 c4 10             	add    $0x10,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10c78:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10c7d:	0f b7 c0             	movzwl %ax,%eax
   10c80:	83 ec 0c             	sub    $0xc,%esp
   10c83:	50                   	push   %eax
   10c84:	e8 fc fc ff ff       	call   10985 <write_tr>
   10c89:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10c8c:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10c93:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10c96:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10c9b:	83 ec 0c             	sub    $0xc,%esp
   10c9e:	50                   	push   %eax
   10c9f:	e8 f8 fc ff ff       	call   1099c <mmu_set_page_dir>
   10ca4:	83 c4 10             	add    $0x10,%esp
}
   10ca7:	90                   	nop
   10ca8:	c9                   	leave  
   10ca9:	c3                   	ret    

00010caa <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10caa:	55                   	push   %ebp
   10cab:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10cad:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10cb2:	5d                   	pop    %ebp
   10cb3:	c3                   	ret    

00010cb4 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10cb4:	55                   	push   %ebp
   10cb5:	89 e5                	mov    %esp,%ebp
   10cb7:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10cba:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10cc1:	74 22                	je     10ce5 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	83 c0 24             	add    $0x24,%eax
   10cc9:	83 ec 08             	sub    $0x8,%esp
   10ccc:	50                   	push   %eax
   10ccd:	68 04 70 01 00       	push   $0x17004
   10cd2:	e8 90 1b 00 00       	call   12867 <list_insert_back>
   10cd7:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10cda:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10ce3:	eb 01                	jmp    10ce6 <task_set_ready+0x32>
        return;
   10ce5:	90                   	nop
}
   10ce6:	c9                   	leave  
   10ce7:	c3                   	ret    

00010ce8 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   10ce8:	55                   	push   %ebp
   10ce9:	89 e5                	mov    %esp,%ebp
   10ceb:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10cee:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10cf5:	74 19                	je     10d10 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10cf7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cfa:	83 c0 24             	add    $0x24,%eax
   10cfd:	83 ec 08             	sub    $0x8,%esp
   10d00:	50                   	push   %eax
   10d01:	68 04 70 01 00       	push   $0x17004
   10d06:	e8 38 1c 00 00       	call   12943 <list_remove>
   10d0b:	83 c4 10             	add    $0x10,%esp
   10d0e:	eb 01                	jmp    10d11 <task_set_blocked+0x29>
        return;
   10d10:	90                   	nop
}
   10d11:	c9                   	leave  
   10d12:	c3                   	ret    

00010d13 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10d13:	55                   	push   %ebp
   10d14:	89 e5                	mov    %esp,%ebp
   10d16:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   10d19:	68 04 70 01 00       	push   $0x17004
   10d1e:	e8 41 fc ff ff       	call   10964 <list_size>
   10d23:	83 c4 04             	add    $0x4,%esp
   10d26:	85 c0                	test   %eax,%eax
   10d28:	75 07                	jne    10d31 <task_next_run+0x1e>
        return &task_manager.idle_task;
   10d2a:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10d2f:	eb 23                	jmp    10d54 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   10d31:	68 04 70 01 00       	push   $0x17004
   10d36:	e8 34 fc ff ff       	call   1096f <list_first>
   10d3b:	83 c4 04             	add    $0x4,%esp
   10d3e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10d41:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10d45:	74 08                	je     10d4f <task_next_run+0x3c>
   10d47:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d4a:	83 e8 24             	sub    $0x24,%eax
   10d4d:	eb 05                	jmp    10d54 <task_next_run+0x41>
   10d4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d54:	c9                   	leave  
   10d55:	c3                   	ret    

00010d56 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   10d56:	55                   	push   %ebp
   10d57:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10d59:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10d5e:	5d                   	pop    %ebp
   10d5f:	c3                   	ret    

00010d60 <sys_sched_yield>:


int sys_sched_yield(void) {
   10d60:	55                   	push   %ebp
   10d61:	89 e5                	mov    %esp,%ebp
   10d63:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10d66:	e8 53 0c 00 00       	call   119be <irq_enter_protection>
   10d6b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   10d6e:	83 ec 0c             	sub    $0xc,%esp
   10d71:	68 04 70 01 00       	push   $0x17004
   10d76:	e8 e9 fb ff ff       	call   10964 <list_size>
   10d7b:	83 c4 10             	add    $0x10,%esp
   10d7e:	83 f8 01             	cmp    $0x1,%eax
   10d81:	7e 29                	jle    10dac <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   10d83:	e8 ce ff ff ff       	call   10d56 <task_current>
   10d88:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   10d8b:	83 ec 0c             	sub    $0xc,%esp
   10d8e:	ff 75 f0             	pushl  -0x10(%ebp)
   10d91:	e8 52 ff ff ff       	call   10ce8 <task_set_blocked>
   10d96:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10d99:	83 ec 0c             	sub    $0xc,%esp
   10d9c:	ff 75 f0             	pushl  -0x10(%ebp)
   10d9f:	e8 10 ff ff ff       	call   10cb4 <task_set_ready>
   10da4:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10da7:	e8 15 00 00 00       	call   10dc1 <task_dispatch>
    }

    irq_leave_protection(state);
   10dac:	83 ec 0c             	sub    $0xc,%esp
   10daf:	ff 75 f4             	pushl  -0xc(%ebp)
   10db2:	e8 1f 0c 00 00       	call   119d6 <irq_leave_protection>
   10db7:	83 c4 10             	add    $0x10,%esp

    return 0;
   10dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10dbf:	c9                   	leave  
   10dc0:	c3                   	ret    

00010dc1 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10dc1:	55                   	push   %ebp
   10dc2:	89 e5                	mov    %esp,%ebp
   10dc4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10dc7:	e8 f2 0b 00 00       	call   119be <irq_enter_protection>
   10dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10dcf:	e8 3f ff ff ff       	call   10d13 <task_next_run>
   10dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10dd7:	a1 00 70 01 00       	mov    0x17000,%eax
   10ddc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10ddf:	74 2a                	je     10e0b <task_dispatch+0x4a>
        task_t* from = task_current();
   10de1:	e8 70 ff ff ff       	call   10d56 <task_current>
   10de6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dec:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   10df1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10df4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10dfa:	83 ec 08             	sub    $0x8,%esp
   10dfd:	ff 75 f0             	pushl  -0x10(%ebp)
   10e00:	ff 75 ec             	pushl  -0x14(%ebp)
   10e03:	e8 c3 fd ff ff       	call   10bcb <task_switch_from_to>
   10e08:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10e0b:	83 ec 0c             	sub    $0xc,%esp
   10e0e:	ff 75 f4             	pushl  -0xc(%ebp)
   10e11:	e8 c0 0b 00 00       	call   119d6 <irq_leave_protection>
   10e16:	83 c4 10             	add    $0x10,%esp
}
   10e19:	90                   	nop
   10e1a:	c9                   	leave  
   10e1b:	c3                   	ret    

00010e1c <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10e1c:	55                   	push   %ebp
   10e1d:	89 e5                	mov    %esp,%ebp
   10e1f:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10e22:	e8 2f ff ff ff       	call   10d56 <task_current>
   10e27:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   10e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e2d:	8b 40 44             	mov    0x44(%eax),%eax
   10e30:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e36:	89 50 44             	mov    %edx,0x44(%eax)
   10e39:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e3c:	8b 40 44             	mov    0x44(%eax),%eax
   10e3f:	85 c0                	test   %eax,%eax
   10e41:	75 2d                	jne    10e70 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   10e43:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e46:	8b 50 40             	mov    0x40(%eax),%edx
   10e49:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e4c:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   10e4f:	83 ec 0c             	sub    $0xc,%esp
   10e52:	ff 75 f0             	pushl  -0x10(%ebp)
   10e55:	e8 8e fe ff ff       	call   10ce8 <task_set_blocked>
   10e5a:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10e5d:	83 ec 0c             	sub    $0xc,%esp
   10e60:	ff 75 f0             	pushl  -0x10(%ebp)
   10e63:	e8 4c fe ff ff       	call   10cb4 <task_set_ready>
   10e68:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10e6b:	e8 51 ff ff ff       	call   10dc1 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   10e70:	83 ec 0c             	sub    $0xc,%esp
   10e73:	68 1c 70 01 00       	push   $0x1701c
   10e78:	e8 f2 fa ff ff       	call   1096f <list_first>
   10e7d:	83 c4 10             	add    $0x10,%esp
   10e80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10e83:	eb 62                	jmp    10ee7 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   10e85:	83 ec 0c             	sub    $0xc,%esp
   10e88:	ff 75 f4             	pushl  -0xc(%ebp)
   10e8b:	e8 c9 fa ff ff       	call   10959 <list_node_next>
   10e90:	83 c4 10             	add    $0x10,%esp
   10e93:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   10e96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e9a:	74 08                	je     10ea4 <task_time_tick+0x88>
   10e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e9f:	83 e8 24             	sub    $0x24,%eax
   10ea2:	eb 05                	jmp    10ea9 <task_time_tick+0x8d>
   10ea4:	b8 00 00 00 00       	mov    $0x0,%eax
   10ea9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   10eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10eaf:	8b 40 3c             	mov    0x3c(%eax),%eax
   10eb2:	8d 50 ff             	lea    -0x1(%eax),%edx
   10eb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10eb8:	89 50 3c             	mov    %edx,0x3c(%eax)
   10ebb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10ebe:	8b 40 3c             	mov    0x3c(%eax),%eax
   10ec1:	85 c0                	test   %eax,%eax
   10ec3:	75 1c                	jne    10ee1 <task_time_tick+0xc5>
            task_set_wakeup(task);
   10ec5:	83 ec 0c             	sub    $0xc,%esp
   10ec8:	ff 75 e8             	pushl  -0x18(%ebp)
   10ecb:	e8 56 00 00 00       	call   10f26 <task_set_wakeup>
   10ed0:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10ed3:	83 ec 0c             	sub    $0xc,%esp
   10ed6:	ff 75 e8             	pushl  -0x18(%ebp)
   10ed9:	e8 d6 fd ff ff       	call   10cb4 <task_set_ready>
   10ede:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   10ee1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ee4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10ee7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10eeb:	75 98                	jne    10e85 <task_time_tick+0x69>
    }

    task_dispatch();
   10eed:	e8 cf fe ff ff       	call   10dc1 <task_dispatch>
}
   10ef2:	90                   	nop
   10ef3:	c9                   	leave  
   10ef4:	c3                   	ret    

00010ef5 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   10ef5:	55                   	push   %ebp
   10ef6:	89 e5                	mov    %esp,%ebp
   10ef8:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   10efb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10eff:	74 22                	je     10f23 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   10f01:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f04:	8b 45 08             	mov    0x8(%ebp),%eax
   10f07:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   10f0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0d:	83 c0 24             	add    $0x24,%eax
   10f10:	83 ec 08             	sub    $0x8,%esp
   10f13:	50                   	push   %eax
   10f14:	68 1c 70 01 00       	push   $0x1701c
   10f19:	e8 49 19 00 00       	call   12867 <list_insert_back>
   10f1e:	83 c4 10             	add    $0x10,%esp
   10f21:	eb 01                	jmp    10f24 <task_set_sleep+0x2f>
        return;
   10f23:	90                   	nop
}
   10f24:	c9                   	leave  
   10f25:	c3                   	ret    

00010f26 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   10f26:	55                   	push   %ebp
   10f27:	89 e5                	mov    %esp,%ebp
   10f29:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   10f2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2f:	83 c0 24             	add    $0x24,%eax
   10f32:	83 ec 08             	sub    $0x8,%esp
   10f35:	50                   	push   %eax
   10f36:	68 1c 70 01 00       	push   $0x1701c
   10f3b:	e8 03 1a 00 00       	call   12943 <list_remove>
   10f40:	83 c4 10             	add    $0x10,%esp
}
   10f43:	90                   	nop
   10f44:	c9                   	leave  
   10f45:	c3                   	ret    

00010f46 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   10f46:	55                   	push   %ebp
   10f47:	89 e5                	mov    %esp,%ebp
   10f49:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f4c:	e8 6d 0a 00 00       	call   119be <irq_enter_protection>
   10f51:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   10f54:	a1 00 70 01 00       	mov    0x17000,%eax
   10f59:	83 ec 0c             	sub    $0xc,%esp
   10f5c:	50                   	push   %eax
   10f5d:	e8 86 fd ff ff       	call   10ce8 <task_set_blocked>
   10f62:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   10f65:	8b 45 08             	mov    0x8(%ebp),%eax
   10f68:	83 c0 09             	add    $0x9,%eax
   10f6b:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10f70:	f7 e2                	mul    %edx
   10f72:	c1 ea 03             	shr    $0x3,%edx
   10f75:	a1 00 70 01 00       	mov    0x17000,%eax
   10f7a:	83 ec 08             	sub    $0x8,%esp
   10f7d:	52                   	push   %edx
   10f7e:	50                   	push   %eax
   10f7f:	e8 71 ff ff ff       	call   10ef5 <task_set_sleep>
   10f84:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   10f87:	e8 35 fe ff ff       	call   10dc1 <task_dispatch>

    irq_leave_protection(state);
   10f8c:	83 ec 0c             	sub    $0xc,%esp
   10f8f:	ff 75 f4             	pushl  -0xc(%ebp)
   10f92:	e8 3f 0a 00 00       	call   119d6 <irq_leave_protection>
   10f97:	83 c4 10             	add    $0x10,%esp
   10f9a:	90                   	nop
   10f9b:	c9                   	leave  
   10f9c:	c3                   	ret    

00010f9d <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10f9d:	55                   	push   %ebp
   10f9e:	89 e5                	mov    %esp,%ebp
   10fa0:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   10fa3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa6:	c1 e8 10             	shr    $0x10,%eax
   10fa9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   10fad:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   10fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fb7:	83 e8 01             	sub    $0x1,%eax
   10fba:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   10fbe:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10fc2:	90                   	nop
   10fc3:	c9                   	leave  
   10fc4:	c3                   	ret    

00010fc5 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   10fc5:	55                   	push   %ebp
   10fc6:	89 e5                	mov    %esp,%ebp
   10fc8:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   10fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fce:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10fd1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   10fd7:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10fda:	ff 28                	ljmp   *(%eax)
}
   10fdc:	90                   	nop
   10fdd:	c9                   	leave  
   10fde:	c3                   	ret    

00010fdf <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10fdf:	55                   	push   %ebp
   10fe0:	89 e5                	mov    %esp,%ebp
   10fe2:	83 ec 14             	sub    $0x14,%esp
   10fe5:	8b 45 14             	mov    0x14(%ebp),%eax
   10fe8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   10fec:	8b 45 08             	mov    0x8(%ebp),%eax
   10fef:	83 e0 f8             	and    $0xfffffff8,%eax
   10ff2:	05 a0 81 01 00       	add    $0x181a0,%eax
   10ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   10ffa:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11001:	76 0f                	jbe    11012 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   11003:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11009:	8b 45 10             	mov    0x10(%ebp),%eax
   1100c:	c1 e8 0c             	shr    $0xc,%eax
   1100f:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   11012:	8b 45 10             	mov    0x10(%ebp),%eax
   11015:	89 c2                	mov    %eax,%edx
   11017:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1101a:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   1101d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11020:	89 c2                	mov    %eax,%edx
   11022:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11025:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   11029:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102c:	c1 e8 10             	shr    $0x10,%eax
   1102f:	89 c2                	mov    %eax,%edx
   11031:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11034:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   11037:	8b 45 10             	mov    0x10(%ebp),%eax
   1103a:	c1 e8 10             	shr    $0x10,%eax
   1103d:	c1 e0 08             	shl    $0x8,%eax
   11040:	66 25 00 0f          	and    $0xf00,%ax
   11044:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11048:	89 c2                	mov    %eax,%edx
   1104a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1104d:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11051:	8b 45 0c             	mov    0xc(%ebp),%eax
   11054:	c1 e8 18             	shr    $0x18,%eax
   11057:	89 c2                	mov    %eax,%edx
   11059:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1105c:	88 50 07             	mov    %dl,0x7(%eax)
}
   1105f:	90                   	nop
   11060:	c9                   	leave  
   11061:	c3                   	ret    

00011062 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   11062:	55                   	push   %ebp
   11063:	89 e5                	mov    %esp,%ebp
   11065:	83 ec 08             	sub    $0x8,%esp
   11068:	8b 55 0c             	mov    0xc(%ebp),%edx
   1106b:	8b 45 14             	mov    0x14(%ebp),%eax
   1106e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11072:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   11076:	8b 45 10             	mov    0x10(%ebp),%eax
   11079:	89 c2                	mov    %eax,%edx
   1107b:	8b 45 08             	mov    0x8(%ebp),%eax
   1107e:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11081:	8b 45 08             	mov    0x8(%ebp),%eax
   11084:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11088:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1108c:	8b 45 08             	mov    0x8(%ebp),%eax
   1108f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11093:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   11097:	8b 45 10             	mov    0x10(%ebp),%eax
   1109a:	c1 e8 10             	shr    $0x10,%eax
   1109d:	89 c2                	mov    %eax,%edx
   1109f:	8b 45 08             	mov    0x8(%ebp),%eax
   110a2:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   110a6:	90                   	nop
   110a7:	c9                   	leave  
   110a8:	c3                   	ret    

000110a9 <init_gdt>:


void init_gdt(void) {
   110a9:	55                   	push   %ebp
   110aa:	89 e5                	mov    %esp,%ebp
   110ac:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   110af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   110b6:	eb 19                	jmp    110d1 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   110b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110bb:	c1 e0 03             	shl    $0x3,%eax
   110be:	6a 00                	push   $0x0
   110c0:	6a 00                	push   $0x0
   110c2:	6a 00                	push   $0x0
   110c4:	50                   	push   %eax
   110c5:	e8 15 ff ff ff       	call   10fdf <segment_desc_set>
   110ca:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   110cd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   110d1:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   110d8:	7e de                	jle    110b8 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   110da:	68 92 40 00 00       	push   $0x4092
   110df:	6a ff                	push   $0xffffffff
   110e1:	6a 00                	push   $0x0
   110e3:	6a 10                	push   $0x10
   110e5:	e8 f5 fe ff ff       	call   10fdf <segment_desc_set>
   110ea:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   110ed:	68 9a 40 00 00       	push   $0x409a
   110f2:	6a ff                	push   $0xffffffff
   110f4:	6a 00                	push   $0x0
   110f6:	6a 08                	push   $0x8
   110f8:	e8 e2 fe ff ff       	call   10fdf <segment_desc_set>
   110fd:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11100:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   11105:	68 00 08 00 00       	push   $0x800
   1110a:	50                   	push   %eax
   1110b:	e8 8d fe ff ff       	call   10f9d <lgdt>
   11110:	83 c4 08             	add    $0x8,%esp
}
   11113:	90                   	nop
   11114:	c9                   	leave  
   11115:	c3                   	ret    

00011116 <cpu_init>:


void cpu_init(void) {
   11116:	55                   	push   %ebp
   11117:	89 e5                	mov    %esp,%ebp
   11119:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   1111c:	83 ec 08             	sub    $0x8,%esp
   1111f:	68 12 2d 01 00       	push   $0x12d12
   11124:	68 a0 89 01 00       	push   $0x189a0
   11129:	e8 2f 0c 00 00       	call   11d5d <mutex_init>
   1112e:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11131:	e8 73 ff ff ff       	call   110a9 <init_gdt>
}
   11136:	90                   	nop
   11137:	c9                   	leave  
   11138:	c3                   	ret    

00011139 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   11139:	55                   	push   %ebp
   1113a:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   1113c:	8b 45 08             	mov    0x8(%ebp),%eax
   1113f:	6a 00                	push   $0x0
   11141:	50                   	push   %eax
   11142:	e8 7e fe ff ff       	call   10fc5 <far_jump>
   11147:	83 c4 08             	add    $0x8,%esp
}
   1114a:	90                   	nop
   1114b:	c9                   	leave  
   1114c:	c3                   	ret    

0001114d <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   1114d:	55                   	push   %ebp
   1114e:	89 e5                	mov    %esp,%ebp
   11150:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   11153:	83 ec 0c             	sub    $0xc,%esp
   11156:	68 a0 89 01 00       	push   $0x189a0
   1115b:	e8 3e 0c 00 00       	call   11d9e <mutex_acquire>
   11160:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11163:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1116a:	eb 36                	jmp    111a2 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   1116c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1116f:	c1 e0 03             	shl    $0x3,%eax
   11172:	05 a0 81 01 00       	add    $0x181a0,%eax
   11177:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   1117a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1117d:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11181:	66 85 c0             	test   %ax,%ax
   11184:	75 18                	jne    1119e <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   11186:	83 ec 0c             	sub    $0xc,%esp
   11189:	68 a0 89 01 00       	push   $0x189a0
   1118e:	e8 99 0c 00 00       	call   11e2c <mutex_release>
   11193:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   11196:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11199:	c1 e0 03             	shl    $0x3,%eax
   1119c:	eb 22                	jmp    111c0 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1119e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111a2:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   111a9:	7e c1                	jle    1116c <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   111ab:	83 ec 0c             	sub    $0xc,%esp
   111ae:	68 a0 89 01 00       	push   $0x189a0
   111b3:	e8 74 0c 00 00       	call   11e2c <mutex_release>
   111b8:	83 c4 10             	add    $0x10,%esp

    return -1;
   111bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111c0:	c9                   	leave  
   111c1:	c3                   	ret    

000111c2 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   111c2:	55                   	push   %ebp
   111c3:	89 e5                	mov    %esp,%ebp
   111c5:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   111c8:	83 ec 0c             	sub    $0xc,%esp
   111cb:	68 a0 89 01 00       	push   $0x189a0
   111d0:	e8 c9 0b 00 00       	call   11d9e <mutex_acquire>
   111d5:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   111d8:	8b 45 08             	mov    0x8(%ebp),%eax
   111db:	c1 e8 03             	shr    $0x3,%eax
   111de:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   111e5:	00 00 00 

    mutex_release(&mutex);
   111e8:	83 ec 0c             	sub    $0xc,%esp
   111eb:	68 a0 89 01 00       	push   $0x189a0
   111f0:	e8 37 0c 00 00       	call   11e2c <mutex_release>
   111f5:	83 c4 10             	add    $0x10,%esp
   111f8:	90                   	nop
   111f9:	c9                   	leave  
   111fa:	c3                   	ret    

000111fb <inb>:
static inline uint8_t inb(uint16_t port) {
   111fb:	55                   	push   %ebp
   111fc:	89 e5                	mov    %esp,%ebp
   111fe:	83 ec 14             	sub    $0x14,%esp
   11201:	8b 45 08             	mov    0x8(%ebp),%eax
   11204:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   11208:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1120c:	89 c2                	mov    %eax,%edx
   1120e:	ec                   	in     (%dx),%al
   1120f:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11212:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11216:	c9                   	leave  
   11217:	c3                   	ret    

00011218 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11218:	55                   	push   %ebp
   11219:	89 e5                	mov    %esp,%ebp
   1121b:	83 ec 08             	sub    $0x8,%esp
   1121e:	8b 55 08             	mov    0x8(%ebp),%edx
   11221:	8b 45 0c             	mov    0xc(%ebp),%eax
   11224:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11228:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1122b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1122f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11233:	ee                   	out    %al,(%dx)
}
   11234:	90                   	nop
   11235:	c9                   	leave  
   11236:	c3                   	ret    

00011237 <cli>:
static inline void cli(void) {
   11237:	55                   	push   %ebp
   11238:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   1123a:	fa                   	cli    
}
   1123b:	90                   	nop
   1123c:	5d                   	pop    %ebp
   1123d:	c3                   	ret    

0001123e <sti>:
static inline void sti(void) {
   1123e:	55                   	push   %ebp
   1123f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11241:	fb                   	sti    
}
   11242:	90                   	nop
   11243:	5d                   	pop    %ebp
   11244:	c3                   	ret    

00011245 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11245:	55                   	push   %ebp
   11246:	89 e5                	mov    %esp,%ebp
   11248:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   1124b:	8b 45 08             	mov    0x8(%ebp),%eax
   1124e:	c1 e8 10             	shr    $0x10,%eax
   11251:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   11255:	8b 45 08             	mov    0x8(%ebp),%eax
   11258:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   1125c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1125f:	83 e8 01             	sub    $0x1,%eax
   11262:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   11266:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1126a:	90                   	nop
   1126b:	c9                   	leave  
   1126c:	c3                   	ret    

0001126d <hlt>:
static inline void hlt(void) {
   1126d:	55                   	push   %ebp
   1126e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11270:	f4                   	hlt    
}
   11271:	90                   	nop
   11272:	5d                   	pop    %ebp
   11273:	c3                   	ret    

00011274 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
   11277:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1127a:	9c                   	pushf  
   1127b:	58                   	pop    %eax
   1127c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1127f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11282:	c9                   	leave  
   11283:	c3                   	ret    

00011284 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   11284:	55                   	push   %ebp
   11285:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	50                   	push   %eax
   1128b:	9d                   	popf   
}
   1128c:	90                   	nop
   1128d:	5d                   	pop    %ebp
   1128e:	c3                   	ret    

0001128f <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   1128f:	55                   	push   %ebp
   11290:	89 e5                	mov    %esp,%ebp
   11292:	57                   	push   %edi
   11293:	56                   	push   %esi
   11294:	53                   	push   %ebx
   11295:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11298:	8b 45 08             	mov    0x8(%ebp),%eax
   1129b:	8b 50 34             	mov    0x34(%eax),%edx
   1129e:	8b 45 08             	mov    0x8(%ebp),%eax
   112a1:	8b 40 30             	mov    0x30(%eax),%eax
   112a4:	83 ec 04             	sub    $0x4,%esp
   112a7:	52                   	push   %edx
   112a8:	50                   	push   %eax
   112a9:	68 1c 2d 01 00       	push   $0x12d1c
   112ae:	e8 f3 17 00 00       	call   12aa6 <log_printf>
   112b3:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
   112b6:	8b 45 08             	mov    0x8(%ebp),%eax
   112b9:	8b 38                	mov    (%eax),%edi
   112bb:	8b 45 08             	mov    0x8(%ebp),%eax
   112be:	8b 70 04             	mov    0x4(%eax),%esi
   112c1:	8b 45 08             	mov    0x8(%ebp),%eax
   112c4:	8b 58 0c             	mov    0xc(%eax),%ebx
   112c7:	8b 45 08             	mov    0x8(%ebp),%eax
   112ca:	8b 48 08             	mov    0x8(%eax),%ecx
   112cd:	8b 45 08             	mov    0x8(%ebp),%eax
   112d0:	8b 50 0c             	mov    0xc(%eax),%edx
   112d3:	8b 45 08             	mov    0x8(%ebp),%eax
   112d6:	8b 40 3c             	mov    0x3c(%eax),%eax
   112d9:	83 ec 04             	sub    $0x4,%esp
   112dc:	57                   	push   %edi
   112dd:	56                   	push   %esi
   112de:	53                   	push   %ebx
   112df:	51                   	push   %ecx
   112e0:	52                   	push   %edx
   112e1:	50                   	push   %eax
   112e2:	68 34 2d 01 00       	push   $0x12d34
   112e7:	e8 ba 17 00 00       	call   12aa6 <log_printf>
   112ec:	83 c4 20             	add    $0x20,%esp
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, frame->esp);
   112ef:	8b 45 08             	mov    0x8(%ebp),%eax
   112f2:	8b 40 1c             	mov    0x1c(%eax),%eax
   112f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   112f8:	8b 45 08             	mov    0x8(%ebp),%eax
   112fb:	8b 78 18             	mov    0x18(%eax),%edi
   112fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11301:	8b 70 14             	mov    0x14(%eax),%esi
   11304:	8b 45 08             	mov    0x8(%ebp),%eax
   11307:	8b 58 10             	mov    0x10(%eax),%ebx
   1130a:	8b 45 08             	mov    0x8(%ebp),%eax
   1130d:	8b 48 24             	mov    0x24(%eax),%ecx
   11310:	8b 45 08             	mov    0x8(%ebp),%eax
   11313:	8b 50 20             	mov    0x20(%eax),%edx
   11316:	8b 45 08             	mov    0x8(%ebp),%eax
   11319:	8b 40 2c             	mov    0x2c(%eax),%eax
   1131c:	ff 75 e4             	pushl  -0x1c(%ebp)
   1131f:	57                   	push   %edi
   11320:	56                   	push   %esi
   11321:	53                   	push   %ebx
   11322:	51                   	push   %ecx
   11323:	52                   	push   %edx
   11324:	50                   	push   %eax
   11325:	68 60 2d 01 00       	push   $0x12d60
   1132a:	e8 77 17 00 00       	call   12aa6 <log_printf>
   1132f:	83 c4 20             	add    $0x20,%esp
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   11332:	8b 45 08             	mov    0x8(%ebp),%eax
   11335:	8b 50 40             	mov    0x40(%eax),%edx
   11338:	8b 45 08             	mov    0x8(%ebp),%eax
   1133b:	8b 40 38             	mov    0x38(%eax),%eax
   1133e:	83 ec 04             	sub    $0x4,%esp
   11341:	52                   	push   %edx
   11342:	50                   	push   %eax
   11343:	68 99 2d 01 00       	push   $0x12d99
   11348:	e8 59 17 00 00       	call   12aa6 <log_printf>
   1134d:	83 c4 10             	add    $0x10,%esp
}
   11350:	90                   	nop
   11351:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11354:	5b                   	pop    %ebx
   11355:	5e                   	pop    %esi
   11356:	5f                   	pop    %edi
   11357:	5d                   	pop    %ebp
   11358:	c3                   	ret    

00011359 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   11359:	55                   	push   %ebp
   1135a:	89 e5                	mov    %esp,%ebp
   1135c:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   1135f:	83 ec 0c             	sub    $0xc,%esp
   11362:	68 b0 2d 01 00       	push   $0x12db0
   11367:	e8 3a 17 00 00       	call   12aa6 <log_printf>
   1136c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   1136f:	83 ec 08             	sub    $0x8,%esp
   11372:	ff 75 0c             	pushl  0xc(%ebp)
   11375:	68 db 2d 01 00       	push   $0x12ddb
   1137a:	e8 27 17 00 00       	call   12aa6 <log_printf>
   1137f:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   11382:	83 ec 0c             	sub    $0xc,%esp
   11385:	ff 75 08             	pushl  0x8(%ebp)
   11388:	e8 02 ff ff ff       	call   1128f <dump_core_regs>
   1138d:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11390:	e8 d8 fe ff ff       	call   1126d <hlt>
   11395:	eb f9                	jmp    11390 <do_default_handler+0x37>

00011397 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11397:	55                   	push   %ebp
   11398:	89 e5                	mov    %esp,%ebp
   1139a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   1139d:	83 ec 08             	sub    $0x8,%esp
   113a0:	68 ed 2d 01 00       	push   $0x12ded
   113a5:	ff 75 08             	pushl  0x8(%ebp)
   113a8:	e8 ac ff ff ff       	call   11359 <do_default_handler>
   113ad:	83 c4 10             	add    $0x10,%esp
}
   113b0:	90                   	nop
   113b1:	c9                   	leave  
   113b2:	c3                   	ret    

000113b3 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   113b3:	55                   	push   %ebp
   113b4:	89 e5                	mov    %esp,%ebp
   113b6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   113b9:	83 ec 08             	sub    $0x8,%esp
   113bc:	68 ff 2d 01 00       	push   $0x12dff
   113c1:	ff 75 08             	pushl  0x8(%ebp)
   113c4:	e8 90 ff ff ff       	call   11359 <do_default_handler>
   113c9:	83 c4 10             	add    $0x10,%esp
}
   113cc:	90                   	nop
   113cd:	c9                   	leave  
   113ce:	c3                   	ret    

000113cf <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   113cf:	55                   	push   %ebp
   113d0:	89 e5                	mov    %esp,%ebp
   113d2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   113d5:	83 ec 08             	sub    $0x8,%esp
   113d8:	68 19 2e 01 00       	push   $0x12e19
   113dd:	ff 75 08             	pushl  0x8(%ebp)
   113e0:	e8 74 ff ff ff       	call   11359 <do_default_handler>
   113e5:	83 c4 10             	add    $0x10,%esp
}   
   113e8:	90                   	nop
   113e9:	c9                   	leave  
   113ea:	c3                   	ret    

000113eb <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   113eb:	55                   	push   %ebp
   113ec:	89 e5                	mov    %esp,%ebp
   113ee:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   113f1:	83 ec 08             	sub    $0x8,%esp
   113f4:	68 34 2e 01 00       	push   $0x12e34
   113f9:	ff 75 08             	pushl  0x8(%ebp)
   113fc:	e8 58 ff ff ff       	call   11359 <do_default_handler>
   11401:	83 c4 10             	add    $0x10,%esp
}   
   11404:	90                   	nop
   11405:	c9                   	leave  
   11406:	c3                   	ret    

00011407 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   11407:	55                   	push   %ebp
   11408:	89 e5                	mov    %esp,%ebp
   1140a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   1140d:	83 ec 08             	sub    $0x8,%esp
   11410:	68 4d 2e 01 00       	push   $0x12e4d
   11415:	ff 75 08             	pushl  0x8(%ebp)
   11418:	e8 3c ff ff ff       	call   11359 <do_default_handler>
   1141d:	83 c4 10             	add    $0x10,%esp
}   
   11420:	90                   	nop
   11421:	c9                   	leave  
   11422:	c3                   	ret    

00011423 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
   11426:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   11429:	83 ec 08             	sub    $0x8,%esp
   1142c:	68 63 2e 01 00       	push   $0x12e63
   11431:	ff 75 08             	pushl  0x8(%ebp)
   11434:	e8 20 ff ff ff       	call   11359 <do_default_handler>
   11439:	83 c4 10             	add    $0x10,%esp
}   
   1143c:	90                   	nop
   1143d:	c9                   	leave  
   1143e:	c3                   	ret    

0001143f <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   1143f:	55                   	push   %ebp
   11440:	89 e5                	mov    %esp,%ebp
   11442:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   11445:	83 ec 08             	sub    $0x8,%esp
   11448:	68 77 2e 01 00       	push   $0x12e77
   1144d:	ff 75 08             	pushl  0x8(%ebp)
   11450:	e8 04 ff ff ff       	call   11359 <do_default_handler>
   11455:	83 c4 10             	add    $0x10,%esp
}   
   11458:	90                   	nop
   11459:	c9                   	leave  
   1145a:	c3                   	ret    

0001145b <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   1145b:	55                   	push   %ebp
   1145c:	89 e5                	mov    %esp,%ebp
   1145e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   11461:	83 ec 08             	sub    $0x8,%esp
   11464:	68 95 2e 01 00       	push   $0x12e95
   11469:	ff 75 08             	pushl  0x8(%ebp)
   1146c:	e8 e8 fe ff ff       	call   11359 <do_default_handler>
   11471:	83 c4 10             	add    $0x10,%esp
}   
   11474:	90                   	nop
   11475:	c9                   	leave  
   11476:	c3                   	ret    

00011477 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   11477:	55                   	push   %ebp
   11478:	89 e5                	mov    %esp,%ebp
   1147a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   1147d:	83 ec 08             	sub    $0x8,%esp
   11480:	68 af 2e 01 00       	push   $0x12eaf
   11485:	ff 75 08             	pushl  0x8(%ebp)
   11488:	e8 cc fe ff ff       	call   11359 <do_default_handler>
   1148d:	83 c4 10             	add    $0x10,%esp
}   
   11490:	90                   	nop
   11491:	c9                   	leave  
   11492:	c3                   	ret    

00011493 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   11493:	55                   	push   %ebp
   11494:	89 e5                	mov    %esp,%ebp
   11496:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11499:	83 ec 08             	sub    $0x8,%esp
   1149c:	68 cb 2e 01 00       	push   $0x12ecb
   114a1:	ff 75 08             	pushl  0x8(%ebp)
   114a4:	e8 b0 fe ff ff       	call   11359 <do_default_handler>
   114a9:	83 c4 10             	add    $0x10,%esp
}   
   114ac:	90                   	nop
   114ad:	c9                   	leave  
   114ae:	c3                   	ret    

000114af <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   114af:	55                   	push   %ebp
   114b0:	89 e5                	mov    %esp,%ebp
   114b2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   114b5:	83 ec 08             	sub    $0x8,%esp
   114b8:	68 e3 2e 01 00       	push   $0x12ee3
   114bd:	ff 75 08             	pushl  0x8(%ebp)
   114c0:	e8 94 fe ff ff       	call   11359 <do_default_handler>
   114c5:	83 c4 10             	add    $0x10,%esp
}   
   114c8:	90                   	nop
   114c9:	c9                   	leave  
   114ca:	c3                   	ret    

000114cb <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   114cb:	55                   	push   %ebp
   114cc:	89 e5                	mov    %esp,%ebp
   114ce:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   114d1:	83 ec 08             	sub    $0x8,%esp
   114d4:	68 fc 2e 01 00       	push   $0x12efc
   114d9:	ff 75 08             	pushl  0x8(%ebp)
   114dc:	e8 78 fe ff ff       	call   11359 <do_default_handler>
   114e1:	83 c4 10             	add    $0x10,%esp
}   
   114e4:	90                   	nop
   114e5:	c9                   	leave  
   114e6:	c3                   	ret    

000114e7 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   114e7:	55                   	push   %ebp
   114e8:	89 e5                	mov    %esp,%ebp
   114ea:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   114ed:	83 ec 08             	sub    $0x8,%esp
   114f0:	68 1c 2f 01 00       	push   $0x12f1c
   114f5:	ff 75 08             	pushl  0x8(%ebp)
   114f8:	e8 5c fe ff ff       	call   11359 <do_default_handler>
   114fd:	83 c4 10             	add    $0x10,%esp
}   
   11500:	90                   	nop
   11501:	c9                   	leave  
   11502:	c3                   	ret    

00011503 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   11503:	55                   	push   %ebp
   11504:	89 e5                	mov    %esp,%ebp
   11506:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: General protection");
   11509:	83 ec 08             	sub    $0x8,%esp
   1150c:	68 3b 2f 01 00       	push   $0x12f3b
   11511:	ff 75 08             	pushl  0x8(%ebp)
   11514:	e8 40 fe ff ff       	call   11359 <do_default_handler>
   11519:	83 c4 10             	add    $0x10,%esp
}   
   1151c:	90                   	nop
   1151d:	c9                   	leave  
   1151e:	c3                   	ret    

0001151f <do_handler_page_fault>:


// Exception: 
void do_handler_page_fault(exception_frame_t* frame) {
   1151f:	55                   	push   %ebp
   11520:	89 e5                	mov    %esp,%ebp
   11522:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Page fault");
   11525:	83 ec 08             	sub    $0x8,%esp
   11528:	68 59 2f 01 00       	push   $0x12f59
   1152d:	ff 75 08             	pushl  0x8(%ebp)
   11530:	e8 24 fe ff ff       	call   11359 <do_default_handler>
   11535:	83 c4 10             	add    $0x10,%esp
}   
   11538:	90                   	nop
   11539:	c9                   	leave  
   1153a:	c3                   	ret    

0001153b <do_handler_floating_point_error>:


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   1153b:	55                   	push   %ebp
   1153c:	89 e5                	mov    %esp,%ebp
   1153e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11541:	83 ec 08             	sub    $0x8,%esp
   11544:	68 70 2f 01 00       	push   $0x12f70
   11549:	ff 75 08             	pushl  0x8(%ebp)
   1154c:	e8 08 fe ff ff       	call   11359 <do_default_handler>
   11551:	83 c4 10             	add    $0x10,%esp
}   
   11554:	90                   	nop
   11555:	c9                   	leave  
   11556:	c3                   	ret    

00011557 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11557:	55                   	push   %ebp
   11558:	89 e5                	mov    %esp,%ebp
   1155a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   1155d:	83 ec 08             	sub    $0x8,%esp
   11560:	68 90 2f 01 00       	push   $0x12f90
   11565:	ff 75 08             	pushl  0x8(%ebp)
   11568:	e8 ec fd ff ff       	call   11359 <do_default_handler>
   1156d:	83 c4 10             	add    $0x10,%esp
}   
   11570:	90                   	nop
   11571:	c9                   	leave  
   11572:	c3                   	ret    

00011573 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11573:	55                   	push   %ebp
   11574:	89 e5                	mov    %esp,%ebp
   11576:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11579:	83 ec 08             	sub    $0x8,%esp
   1157c:	68 aa 2f 01 00       	push   $0x12faa
   11581:	ff 75 08             	pushl  0x8(%ebp)
   11584:	e8 d0 fd ff ff       	call   11359 <do_default_handler>
   11589:	83 c4 10             	add    $0x10,%esp
}   
   1158c:	90                   	nop
   1158d:	c9                   	leave  
   1158e:	c3                   	ret    

0001158f <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   1158f:	55                   	push   %ebp
   11590:	89 e5                	mov    %esp,%ebp
   11592:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11595:	83 ec 08             	sub    $0x8,%esp
   11598:	68 c4 2f 01 00       	push   $0x12fc4
   1159d:	ff 75 08             	pushl  0x8(%ebp)
   115a0:	e8 b4 fd ff ff       	call   11359 <do_default_handler>
   115a5:	83 c4 10             	add    $0x10,%esp
}
   115a8:	90                   	nop
   115a9:	c9                   	leave  
   115aa:	c3                   	ret    

000115ab <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   115ab:	55                   	push   %ebp
   115ac:	89 e5                	mov    %esp,%ebp
   115ae:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   115b1:	83 ec 08             	sub    $0x8,%esp
   115b4:	68 f0 2f 01 00       	push   $0x12ff0
   115b9:	ff 75 08             	pushl  0x8(%ebp)
   115bc:	e8 98 fd ff ff       	call   11359 <do_default_handler>
   115c1:	83 c4 10             	add    $0x10,%esp
}
   115c4:	90                   	nop
   115c5:	c9                   	leave  
   115c6:	c3                   	ret    

000115c7 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   115c7:	55                   	push   %ebp
   115c8:	89 e5                	mov    %esp,%ebp
   115ca:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   115cd:	83 ec 08             	sub    $0x8,%esp
   115d0:	68 14 30 01 00       	push   $0x13014
   115d5:	ff 75 08             	pushl  0x8(%ebp)
   115d8:	e8 7c fd ff ff       	call   11359 <do_default_handler>
   115dd:	83 c4 10             	add    $0x10,%esp
}
   115e0:	90                   	nop
   115e1:	c9                   	leave  
   115e2:	c3                   	ret    

000115e3 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   115e3:	55                   	push   %ebp
   115e4:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   115e6:	6a 11                	push   $0x11
   115e8:	6a 20                	push   $0x20
   115ea:	e8 29 fc ff ff       	call   11218 <outb>
   115ef:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   115f2:	6a 20                	push   $0x20
   115f4:	6a 21                	push   $0x21
   115f6:	e8 1d fc ff ff       	call   11218 <outb>
   115fb:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   115fe:	6a 04                	push   $0x4
   11600:	6a 21                	push   $0x21
   11602:	e8 11 fc ff ff       	call   11218 <outb>
   11607:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   1160a:	6a 01                	push   $0x1
   1160c:	6a 21                	push   $0x21
   1160e:	e8 05 fc ff ff       	call   11218 <outb>
   11613:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11616:	6a 11                	push   $0x11
   11618:	68 a0 00 00 00       	push   $0xa0
   1161d:	e8 f6 fb ff ff       	call   11218 <outb>
   11622:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11625:	6a 28                	push   $0x28
   11627:	68 a1 00 00 00       	push   $0xa1
   1162c:	e8 e7 fb ff ff       	call   11218 <outb>
   11631:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11634:	6a 02                	push   $0x2
   11636:	68 a1 00 00 00       	push   $0xa1
   1163b:	e8 d8 fb ff ff       	call   11218 <outb>
   11640:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11643:	6a 01                	push   $0x1
   11645:	68 a1 00 00 00       	push   $0xa1
   1164a:	e8 c9 fb ff ff       	call   11218 <outb>
   1164f:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11652:	68 fb 00 00 00       	push   $0xfb
   11657:	6a 21                	push   $0x21
   11659:	e8 ba fb ff ff       	call   11218 <outb>
   1165e:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11661:	68 ff 00 00 00       	push   $0xff
   11666:	68 a1 00 00 00       	push   $0xa1
   1166b:	e8 a8 fb ff ff       	call   11218 <outb>
   11670:	83 c4 08             	add    $0x8,%esp
}
   11673:	90                   	nop
   11674:	c9                   	leave  
   11675:	c3                   	ret    

00011676 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11676:	55                   	push   %ebp
   11677:	89 e5                	mov    %esp,%ebp
   11679:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   1167c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11683:	eb 25                	jmp    116aa <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11685:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   1168a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1168d:	c1 e0 03             	shl    $0x3,%eax
   11690:	05 00 8a 01 00       	add    $0x18a00,%eax
   11695:	68 00 8e 00 00       	push   $0x8e00
   1169a:	52                   	push   %edx
   1169b:	6a 08                	push   $0x8
   1169d:	50                   	push   %eax
   1169e:	e8 bf f9 ff ff       	call   11062 <gate_desc_set>
   116a3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   116a6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   116aa:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   116ae:	7e d5                	jle    11685 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   116b0:	83 ec 08             	sub    $0x8,%esp
   116b3:	68 4a 00 01 00       	push   $0x1004a
   116b8:	6a 00                	push   $0x0
   116ba:	e8 77 01 00 00       	call   11836 <irq_install>
   116bf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   116c2:	83 ec 08             	sub    $0x8,%esp
   116c5:	68 69 00 01 00       	push   $0x10069
   116ca:	6a 01                	push   $0x1
   116cc:	e8 65 01 00 00       	call   11836 <irq_install>
   116d1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   116d4:	83 ec 08             	sub    $0x8,%esp
   116d7:	68 88 00 01 00       	push   $0x10088
   116dc:	6a 02                	push   $0x2
   116de:	e8 53 01 00 00       	call   11836 <irq_install>
   116e3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   116e6:	83 ec 08             	sub    $0x8,%esp
   116e9:	68 a7 00 01 00       	push   $0x100a7
   116ee:	6a 03                	push   $0x3
   116f0:	e8 41 01 00 00       	call   11836 <irq_install>
   116f5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   116f8:	83 ec 08             	sub    $0x8,%esp
   116fb:	68 c6 00 01 00       	push   $0x100c6
   11700:	6a 04                	push   $0x4
   11702:	e8 2f 01 00 00       	call   11836 <irq_install>
   11707:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   1170a:	83 ec 08             	sub    $0x8,%esp
   1170d:	68 e5 00 01 00       	push   $0x100e5
   11712:	6a 05                	push   $0x5
   11714:	e8 1d 01 00 00       	call   11836 <irq_install>
   11719:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   1171c:	83 ec 08             	sub    $0x8,%esp
   1171f:	68 04 01 01 00       	push   $0x10104
   11724:	6a 06                	push   $0x6
   11726:	e8 0b 01 00 00       	call   11836 <irq_install>
   1172b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   1172e:	83 ec 08             	sub    $0x8,%esp
   11731:	68 23 01 01 00       	push   $0x10123
   11736:	6a 07                	push   $0x7
   11738:	e8 f9 00 00 00       	call   11836 <irq_install>
   1173d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11740:	83 ec 08             	sub    $0x8,%esp
   11743:	68 42 01 01 00       	push   $0x10142
   11748:	6a 08                	push   $0x8
   1174a:	e8 e7 00 00 00       	call   11836 <irq_install>
   1174f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11752:	83 ec 08             	sub    $0x8,%esp
   11755:	68 5f 01 01 00       	push   $0x1015f
   1175a:	6a 0a                	push   $0xa
   1175c:	e8 d5 00 00 00       	call   11836 <irq_install>
   11761:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11764:	83 ec 08             	sub    $0x8,%esp
   11767:	68 7c 01 01 00       	push   $0x1017c
   1176c:	6a 0b                	push   $0xb
   1176e:	e8 c3 00 00 00       	call   11836 <irq_install>
   11773:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11776:	83 ec 08             	sub    $0x8,%esp
   11779:	68 99 01 01 00       	push   $0x10199
   1177e:	6a 0c                	push   $0xc
   11780:	e8 b1 00 00 00       	call   11836 <irq_install>
   11785:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11788:	83 ec 08             	sub    $0x8,%esp
   1178b:	68 b8 01 01 00       	push   $0x101b8
   11790:	6a 0d                	push   $0xd
   11792:	e8 9f 00 00 00       	call   11836 <irq_install>
   11797:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   1179a:	83 ec 08             	sub    $0x8,%esp
   1179d:	68 d5 01 01 00       	push   $0x101d5
   117a2:	6a 0e                	push   $0xe
   117a4:	e8 8d 00 00 00       	call   11836 <irq_install>
   117a9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   117ac:	83 ec 08             	sub    $0x8,%esp
   117af:	68 f2 01 01 00       	push   $0x101f2
   117b4:	6a 10                	push   $0x10
   117b6:	e8 7b 00 00 00       	call   11836 <irq_install>
   117bb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   117be:	83 ec 08             	sub    $0x8,%esp
   117c1:	68 11 02 01 00       	push   $0x10211
   117c6:	6a 11                	push   $0x11
   117c8:	e8 69 00 00 00       	call   11836 <irq_install>
   117cd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   117d0:	83 ec 08             	sub    $0x8,%esp
   117d3:	68 2e 02 01 00       	push   $0x1022e
   117d8:	6a 12                	push   $0x12
   117da:	e8 57 00 00 00       	call   11836 <irq_install>
   117df:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   117e2:	83 ec 08             	sub    $0x8,%esp
   117e5:	68 4d 02 01 00       	push   $0x1024d
   117ea:	6a 13                	push   $0x13
   117ec:	e8 45 00 00 00       	call   11836 <irq_install>
   117f1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   117f4:	83 ec 08             	sub    $0x8,%esp
   117f7:	68 6c 02 01 00       	push   $0x1026c
   117fc:	6a 14                	push   $0x14
   117fe:	e8 33 00 00 00       	call   11836 <irq_install>
   11803:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11806:	83 ec 08             	sub    $0x8,%esp
   11809:	68 8b 02 01 00       	push   $0x1028b
   1180e:	6a 15                	push   $0x15
   11810:	e8 21 00 00 00       	call   11836 <irq_install>
   11815:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11818:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   1181d:	83 ec 08             	sub    $0x8,%esp
   11820:	68 00 04 00 00       	push   $0x400
   11825:	50                   	push   %eax
   11826:	e8 1a fa ff ff       	call   11245 <lidt>
   1182b:	83 c4 10             	add    $0x10,%esp

    init_pic();
   1182e:	e8 b0 fd ff ff       	call   115e3 <init_pic>
}
   11833:	90                   	nop
   11834:	c9                   	leave  
   11835:	c3                   	ret    

00011836 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11836:	55                   	push   %ebp
   11837:	89 e5                	mov    %esp,%ebp
   11839:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   1183c:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11840:	7e 07                	jle    11849 <irq_install+0x13>
        return -1;
   11842:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11847:	eb 20                	jmp    11869 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11849:	8b 45 0c             	mov    0xc(%ebp),%eax
   1184c:	8b 55 08             	mov    0x8(%ebp),%edx
   1184f:	c1 e2 03             	shl    $0x3,%edx
   11852:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11858:	68 00 8e 00 00       	push   $0x8e00
   1185d:	50                   	push   %eax
   1185e:	6a 08                	push   $0x8
   11860:	52                   	push   %edx
   11861:	e8 fc f7 ff ff       	call   11062 <gate_desc_set>
   11866:	83 c4 10             	add    $0x10,%esp
}
   11869:	c9                   	leave  
   1186a:	c3                   	ret    

0001186b <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   1186b:	55                   	push   %ebp
   1186c:	89 e5                	mov    %esp,%ebp
   1186e:	53                   	push   %ebx
   1186f:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11872:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11876:	7e 78                	jle    118f0 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11878:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   1187c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11880:	7f 32                	jg     118b4 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11882:	6a 21                	push   $0x21
   11884:	e8 72 f9 ff ff       	call   111fb <inb>
   11889:	83 c4 04             	add    $0x4,%esp
   1188c:	89 c2                	mov    %eax,%edx
   1188e:	8b 45 08             	mov    0x8(%ebp),%eax
   11891:	bb 01 00 00 00       	mov    $0x1,%ebx
   11896:	89 c1                	mov    %eax,%ecx
   11898:	d3 e3                	shl    %cl,%ebx
   1189a:	89 d8                	mov    %ebx,%eax
   1189c:	f7 d0                	not    %eax
   1189e:	21 d0                	and    %edx,%eax
   118a0:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   118a3:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   118a7:	50                   	push   %eax
   118a8:	6a 21                	push   $0x21
   118aa:	e8 69 f9 ff ff       	call   11218 <outb>
   118af:	83 c4 08             	add    $0x8,%esp
   118b2:	eb 3d                	jmp    118f1 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   118b4:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   118b8:	68 a1 00 00 00       	push   $0xa1
   118bd:	e8 39 f9 ff ff       	call   111fb <inb>
   118c2:	83 c4 04             	add    $0x4,%esp
   118c5:	89 c2                	mov    %eax,%edx
   118c7:	8b 45 08             	mov    0x8(%ebp),%eax
   118ca:	bb 01 00 00 00       	mov    $0x1,%ebx
   118cf:	89 c1                	mov    %eax,%ecx
   118d1:	d3 e3                	shl    %cl,%ebx
   118d3:	89 d8                	mov    %ebx,%eax
   118d5:	f7 d0                	not    %eax
   118d7:	21 d0                	and    %edx,%eax
   118d9:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   118dc:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   118e0:	50                   	push   %eax
   118e1:	68 a1 00 00 00       	push   $0xa1
   118e6:	e8 2d f9 ff ff       	call   11218 <outb>
   118eb:	83 c4 08             	add    $0x8,%esp
   118ee:	eb 01                	jmp    118f1 <irq_enable+0x86>
        return;
   118f0:	90                   	nop
    }
}
   118f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   118f4:	c9                   	leave  
   118f5:	c3                   	ret    

000118f6 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   118f6:	55                   	push   %ebp
   118f7:	89 e5                	mov    %esp,%ebp
   118f9:	53                   	push   %ebx
   118fa:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   118fd:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11901:	7e 74                	jle    11977 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11903:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11907:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1190b:	7f 30                	jg     1193d <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   1190d:	6a 21                	push   $0x21
   1190f:	e8 e7 f8 ff ff       	call   111fb <inb>
   11914:	83 c4 04             	add    $0x4,%esp
   11917:	89 c3                	mov    %eax,%ebx
   11919:	8b 45 08             	mov    0x8(%ebp),%eax
   1191c:	ba 01 00 00 00       	mov    $0x1,%edx
   11921:	89 c1                	mov    %eax,%ecx
   11923:	d3 e2                	shl    %cl,%edx
   11925:	89 d0                	mov    %edx,%eax
   11927:	09 d8                	or     %ebx,%eax
   11929:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   1192c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11930:	50                   	push   %eax
   11931:	6a 21                	push   $0x21
   11933:	e8 e0 f8 ff ff       	call   11218 <outb>
   11938:	83 c4 08             	add    $0x8,%esp
   1193b:	eb 3b                	jmp    11978 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   1193d:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11941:	68 a1 00 00 00       	push   $0xa1
   11946:	e8 b0 f8 ff ff       	call   111fb <inb>
   1194b:	83 c4 04             	add    $0x4,%esp
   1194e:	89 c3                	mov    %eax,%ebx
   11950:	8b 45 08             	mov    0x8(%ebp),%eax
   11953:	ba 01 00 00 00       	mov    $0x1,%edx
   11958:	89 c1                	mov    %eax,%ecx
   1195a:	d3 e2                	shl    %cl,%edx
   1195c:	89 d0                	mov    %edx,%eax
   1195e:	09 d8                	or     %ebx,%eax
   11960:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11963:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11967:	50                   	push   %eax
   11968:	68 a1 00 00 00       	push   $0xa1
   1196d:	e8 a6 f8 ff ff       	call   11218 <outb>
   11972:	83 c4 08             	add    $0x8,%esp
   11975:	eb 01                	jmp    11978 <irq_disable+0x82>
        return;
   11977:	90                   	nop
    }
}
   11978:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1197b:	c9                   	leave  
   1197c:	c3                   	ret    

0001197d <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   1197d:	55                   	push   %ebp
   1197e:	89 e5                	mov    %esp,%ebp
    cli();
   11980:	e8 b2 f8 ff ff       	call   11237 <cli>
}
   11985:	90                   	nop
   11986:	5d                   	pop    %ebp
   11987:	c3                   	ret    

00011988 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11988:	55                   	push   %ebp
   11989:	89 e5                	mov    %esp,%ebp
    sti();
   1198b:	e8 ae f8 ff ff       	call   1123e <sti>
}
   11990:	90                   	nop
   11991:	5d                   	pop    %ebp
   11992:	c3                   	ret    

00011993 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11993:	55                   	push   %ebp
   11994:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11996:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   1199a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1199e:	7e 0f                	jle    119af <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   119a0:	6a 20                	push   $0x20
   119a2:	68 a0 00 00 00       	push   $0xa0
   119a7:	e8 6c f8 ff ff       	call   11218 <outb>
   119ac:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   119af:	6a 20                	push   $0x20
   119b1:	6a 20                	push   $0x20
   119b3:	e8 60 f8 ff ff       	call   11218 <outb>
   119b8:	83 c4 08             	add    $0x8,%esp
}
   119bb:	90                   	nop
   119bc:	c9                   	leave  
   119bd:	c3                   	ret    

000119be <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   119be:	55                   	push   %ebp
   119bf:	89 e5                	mov    %esp,%ebp
   119c1:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   119c4:	e8 ab f8 ff ff       	call   11274 <read_eflags>
   119c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   119cc:	e8 ac ff ff ff       	call   1197d <irq_disable_global>
    return state;
   119d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   119d4:	c9                   	leave  
   119d5:	c3                   	ret    

000119d6 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   119d6:	55                   	push   %ebp
   119d7:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   119d9:	ff 75 08             	pushl  0x8(%ebp)
   119dc:	e8 a3 f8 ff ff       	call   11284 <write_eflags>
   119e1:	83 c4 04             	add    $0x4,%esp
   119e4:	90                   	nop
   119e5:	c9                   	leave  
   119e6:	c3                   	ret    

000119e7 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   119e7:	55                   	push   %ebp
   119e8:	89 e5                	mov    %esp,%ebp
   119ea:	83 ec 08             	sub    $0x8,%esp
   119ed:	8b 55 08             	mov    0x8(%ebp),%edx
   119f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   119f3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   119f7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   119fa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   119fe:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11a02:	ee                   	out    %al,(%dx)
}
   11a03:	90                   	nop
   11a04:	c9                   	leave  
   11a05:	c3                   	ret    

00011a06 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11a06:	55                   	push   %ebp
   11a07:	89 e5                	mov    %esp,%ebp
   11a09:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11a0c:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11a11:	83 c0 01             	add    $0x1,%eax
   11a14:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11a19:	83 ec 0c             	sub    $0xc,%esp
   11a1c:	6a 20                	push   $0x20
   11a1e:	e8 70 ff ff ff       	call   11993 <pic_send_eoi>
   11a23:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11a26:	e8 f1 f3 ff ff       	call   10e1c <task_time_tick>
}
   11a2b:	90                   	nop
   11a2c:	c9                   	leave  
   11a2d:	c3                   	ret    

00011a2e <init_pit>:


static void init_pit(void) {
   11a2e:	55                   	push   %ebp
   11a2f:	89 e5                	mov    %esp,%ebp
   11a31:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11a34:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11a3b:	6a 36                	push   $0x36
   11a3d:	6a 43                	push   $0x43
   11a3f:	e8 a3 ff ff ff       	call   119e7 <outb>
   11a44:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11a47:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a4a:	0f b6 c0             	movzbl %al,%eax
   11a4d:	50                   	push   %eax
   11a4e:	6a 40                	push   $0x40
   11a50:	e8 92 ff ff ff       	call   119e7 <outb>
   11a55:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a5b:	c1 e8 08             	shr    $0x8,%eax
   11a5e:	0f b6 c0             	movzbl %al,%eax
   11a61:	50                   	push   %eax
   11a62:	6a 40                	push   $0x40
   11a64:	e8 7e ff ff ff       	call   119e7 <outb>
   11a69:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11a6c:	83 ec 08             	sub    $0x8,%esp
   11a6f:	68 a8 02 01 00       	push   $0x102a8
   11a74:	6a 20                	push   $0x20
   11a76:	e8 bb fd ff ff       	call   11836 <irq_install>
   11a7b:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11a7e:	83 ec 0c             	sub    $0xc,%esp
   11a81:	6a 20                	push   $0x20
   11a83:	e8 e3 fd ff ff       	call   1186b <irq_enable>
   11a88:	83 c4 10             	add    $0x10,%esp
}
   11a8b:	90                   	nop
   11a8c:	c9                   	leave  
   11a8d:	c3                   	ret    

00011a8e <timer_init>:

void timer_init(void) {
   11a8e:	55                   	push   %ebp
   11a8f:	89 e5                	mov    %esp,%ebp
   11a91:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11a94:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   11a9b:	00 00 00 
    init_pit();
   11a9e:	e8 8b ff ff ff       	call   11a2e <init_pit>
   11aa3:	90                   	nop
   11aa4:	c9                   	leave  
   11aa5:	c3                   	ret    

00011aa6 <list_size>:
static inline int list_size(list_t* list) {
   11aa6:	55                   	push   %ebp
   11aa7:	89 e5                	mov    %esp,%ebp
    return list->count;
   11aa9:	8b 45 08             	mov    0x8(%ebp),%eax
   11aac:	8b 40 08             	mov    0x8(%eax),%eax
}
   11aaf:	5d                   	pop    %ebp
   11ab0:	c3                   	ret    

00011ab1 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11ab1:	55                   	push   %ebp
   11ab2:	89 e5                	mov    %esp,%ebp
    return list->first;
   11ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab7:	8b 00                	mov    (%eax),%eax
}
   11ab9:	5d                   	pop    %ebp
   11aba:	c3                   	ret    

00011abb <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11abb:	55                   	push   %ebp
   11abc:	89 e5                	mov    %esp,%ebp
    return list->last;
   11abe:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac1:	8b 40 04             	mov    0x4(%eax),%eax
}
   11ac4:	5d                   	pop    %ebp
   11ac5:	c3                   	ret    

00011ac6 <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   11ac6:	55                   	push   %ebp
   11ac7:	89 e5                	mov    %esp,%ebp
   11ac9:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11acc:	8b 45 08             	mov    0x8(%ebp),%eax
   11acf:	8b 40 50             	mov    0x50(%eax),%eax
   11ad2:	85 c0                	test   %eax,%eax
   11ad4:	75 19                	jne    11aef <kernel_init+0x29>
   11ad6:	68 3c 30 01 00       	push   $0x1303c
   11adb:	68 2c 31 01 00       	push   $0x1312c
   11ae0:	6a 1a                	push   $0x1a
   11ae2:	68 60 30 01 00       	push   $0x13060
   11ae7:	e8 b0 0c 00 00       	call   1279c <pannic>
   11aec:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11aef:	90                   	nop

    memory_init(boot_info);
   11af0:	83 ec 0c             	sub    $0xc,%esp
   11af3:	ff 75 08             	pushl  0x8(%ebp)
   11af6:	e8 61 ed ff ff       	call   1085c <memory_init>
   11afb:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11afe:	e8 13 f6 ff ff       	call   11116 <cpu_init>

    log_init();
   11b03:	e8 fc 0e 00 00       	call   12a04 <log_init>

    irq_init();
   11b08:	e8 69 fb ff ff       	call   11676 <irq_init>
    timer_init();
   11b0d:	e8 7c ff ff ff       	call   11a8e <timer_init>

    task_manager_init();
   11b12:	e8 d7 f0 ff ff       	call   10bee <task_manager_init>
}
   11b17:	90                   	nop
   11b18:	c9                   	leave  
   11b19:	c3                   	ret    

00011b1a <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   11b1a:	55                   	push   %ebp
   11b1b:	89 e5                	mov    %esp,%ebp
   11b1d:	56                   	push   %esi
   11b1e:	53                   	push   %ebx
   11b1f:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11b22:	83 ec 0c             	sub    $0xc,%esp
   11b25:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b28:	50                   	push   %eax
   11b29:	e8 b7 0c 00 00       	call   127e5 <list_init>
   11b2e:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11b31:	83 ec 0c             	sub    $0xc,%esp
   11b34:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b37:	50                   	push   %eax
   11b38:	e8 69 ff ff ff       	call   11aa6 <list_size>
   11b3d:	83 c4 10             	add    $0x10,%esp
   11b40:	89 c6                	mov    %eax,%esi
   11b42:	83 ec 0c             	sub    $0xc,%esp
   11b45:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b48:	50                   	push   %eax
   11b49:	e8 6d ff ff ff       	call   11abb <list_last>
   11b4e:	83 c4 10             	add    $0x10,%esp
   11b51:	89 c3                	mov    %eax,%ebx
   11b53:	83 ec 0c             	sub    $0xc,%esp
   11b56:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11b59:	50                   	push   %eax
   11b5a:	e8 52 ff ff ff       	call   11ab1 <list_first>
   11b5f:	83 c4 10             	add    $0x10,%esp
   11b62:	56                   	push   %esi
   11b63:	53                   	push   %ebx
   11b64:	50                   	push   %eax
   11b65:	68 a8 30 01 00       	push   $0x130a8
   11b6a:	e8 37 0f 00 00       	call   12aa6 <log_printf>
   11b6f:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11b72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b79:	eb 3b                	jmp    11bb6 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   11b7b:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11b7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b81:	c1 e2 03             	shl    $0x3,%edx
   11b84:	01 d0                	add    %edx,%eax
   11b86:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11b89:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11b8c:	83 ec 04             	sub    $0x4,%esp
   11b8f:	50                   	push   %eax
   11b90:	ff 75 f4             	pushl  -0xc(%ebp)
   11b93:	68 d1 30 01 00       	push   $0x130d1
   11b98:	e8 09 0f 00 00       	call   12aa6 <log_printf>
   11b9d:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11ba0:	83 ec 08             	sub    $0x8,%esp
   11ba3:	ff 75 dc             	pushl  -0x24(%ebp)
   11ba6:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11ba9:	50                   	push   %eax
   11baa:	e8 59 0c 00 00       	call   12808 <list_insert_front>
   11baf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11bb2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bb6:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11bba:	7e bf                	jle    11b7b <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   11bbc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11bc3:	eb 33                	jmp    11bf8 <link_test+0xde>
        list_remove_front(&list);
   11bc5:	83 ec 0c             	sub    $0xc,%esp
   11bc8:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11bcb:	50                   	push   %eax
   11bcc:	e8 f9 0c 00 00       	call   128ca <list_remove_front>
   11bd1:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   11bd4:	83 ec 0c             	sub    $0xc,%esp
   11bd7:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11bda:	50                   	push   %eax
   11bdb:	e8 c6 fe ff ff       	call   11aa6 <list_size>
   11be0:	83 c4 10             	add    $0x10,%esp
   11be3:	83 ec 08             	sub    $0x8,%esp
   11be6:	50                   	push   %eax
   11be7:	68 d9 30 01 00       	push   $0x130d9
   11bec:	e8 b5 0e 00 00       	call   12aa6 <log_printf>
   11bf1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11bf4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11bf8:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11bfc:	7e c7                	jle    11bc5 <link_test+0xab>
    }

    list_init(&list);
   11bfe:	83 ec 0c             	sub    $0xc,%esp
   11c01:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c04:	50                   	push   %eax
   11c05:	e8 db 0b 00 00       	call   127e5 <list_init>
   11c0a:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11c0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11c14:	eb 3b                	jmp    11c51 <link_test+0x137>
        list_node_t* node = &nodes[i];
   11c16:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11c19:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11c1c:	c1 e2 03             	shl    $0x3,%edx
   11c1f:	01 d0                	add    %edx,%eax
   11c21:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11c24:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11c27:	83 ec 04             	sub    $0x4,%esp
   11c2a:	50                   	push   %eax
   11c2b:	ff 75 ec             	pushl  -0x14(%ebp)
   11c2e:	68 d1 30 01 00       	push   $0x130d1
   11c33:	e8 6e 0e 00 00       	call   12aa6 <log_printf>
   11c38:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11c3b:	83 ec 08             	sub    $0x8,%esp
   11c3e:	ff 75 e0             	pushl  -0x20(%ebp)
   11c41:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c44:	50                   	push   %eax
   11c45:	e8 1d 0c 00 00       	call   12867 <list_insert_back>
   11c4a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11c4d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11c51:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11c55:	7e bf                	jle    11c16 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11c57:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11c5e:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11c65:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11c6c:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11c73:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11c76:	83 c0 04             	add    $0x4,%eax
   11c79:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11c7c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11c80:	74 08                	je     11c8a <link_test+0x170>
   11c82:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c85:	83 e8 04             	sub    $0x4,%eax
   11c88:	eb 05                	jmp    11c8f <link_test+0x175>
   11c8a:	b8 00 00 00 00       	mov    $0x0,%eax
   11c8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11c92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c95:	8b 00                	mov    (%eax),%eax
   11c97:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11c9c:	74 10                	je     11cae <link_test+0x194>
        log_printf("error!");
   11c9e:	83 ec 0c             	sub    $0xc,%esp
   11ca1:	68 de 30 01 00       	push   $0x130de
   11ca6:	e8 fb 0d 00 00       	call   12aa6 <log_printf>
   11cab:	83 c4 10             	add    $0x10,%esp
    }

}
   11cae:	90                   	nop
   11caf:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11cb2:	5b                   	pop    %ebx
   11cb3:	5e                   	pop    %esi
   11cb4:	5d                   	pop    %ebp
   11cb5:	c3                   	ret    

00011cb6 <move_to_first_task>:


void move_to_first_task(void) {
   11cb6:	55                   	push   %ebp
   11cb7:	89 e5                	mov    %esp,%ebp
   11cb9:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   11cbc:	e8 95 f0 ff ff       	call   10d56 <task_current>
   11cc1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   11cc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11cc8:	75 19                	jne    11ce3 <move_to_first_task+0x2d>
   11cca:	68 e5 30 01 00       	push   $0x130e5
   11ccf:	68 38 31 01 00       	push   $0x13138
   11cd4:	6a 6e                	push   $0x6e
   11cd6:	68 60 30 01 00       	push   $0x13060
   11cdb:	e8 bc 0a 00 00       	call   1279c <pannic>
   11ce0:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   11ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ce6:	83 c0 48             	add    $0x48,%eax
   11ce9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    __asm__ __volatile__(
        "jmp *%[ip]"::[ip]"r"(tss->eip)
   11cec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cef:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   11cf2:	ff e0                	jmp    *%eax
    );

    // far_jump((uint32_t)tss, 0);
}
   11cf4:	90                   	nop
   11cf5:	c9                   	leave  
   11cf6:	c3                   	ret    

00011cf7 <init_main>:


void init_main(void) {
   11cf7:	55                   	push   %ebp
   11cf8:	89 e5                	mov    %esp,%ebp
   11cfa:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   11cfd:	83 ec 0c             	sub    $0xc,%esp
   11d00:	68 ef 30 01 00       	push   $0x130ef
   11d05:	e8 9c 0d 00 00       	call   12aa6 <log_printf>
   11d0a:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   11d0d:	83 ec 04             	sub    $0x4,%esp
   11d10:	68 05 31 01 00       	push   $0x13105
   11d15:	68 0a 31 01 00       	push   $0x1310a
   11d1a:	68 10 31 01 00       	push   $0x13110
   11d1f:	e8 82 0d 00 00       	call   12aa6 <log_printf>
   11d24:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   11d27:	83 ec 0c             	sub    $0xc,%esp
   11d2a:	6a 61                	push   $0x61
   11d2c:	68 56 34 12 00       	push   $0x123456
   11d31:	6a 85                	push   $0xffffff85
   11d33:	68 39 30 00 00       	push   $0x3039
   11d38:	68 1f 31 01 00       	push   $0x1311f
   11d3d:	e8 64 0d 00 00       	call   12aa6 <log_printf>
   11d42:	83 c4 20             	add    $0x20,%esp

    //
    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
    //

    task_first_init();
   11d45:	e8 0a ef ff ff       	call   10c54 <task_first_init>
    move_to_first_task();
   11d4a:	e8 67 ff ff ff       	call   11cb6 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   11d4f:	90                   	nop
   11d50:	c9                   	leave  
   11d51:	c3                   	ret    

00011d52 <list_size>:
static inline int list_size(list_t* list) {
   11d52:	55                   	push   %ebp
   11d53:	89 e5                	mov    %esp,%ebp
    return list->count;
   11d55:	8b 45 08             	mov    0x8(%ebp),%eax
   11d58:	8b 40 08             	mov    0x8(%eax),%eax
}
   11d5b:	5d                   	pop    %ebp
   11d5c:	c3                   	ret    

00011d5d <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   11d5d:	55                   	push   %ebp
   11d5e:	89 e5                	mov    %esp,%ebp
   11d60:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   11d63:	8b 45 08             	mov    0x8(%ebp),%eax
   11d66:	83 ec 08             	sub    $0x8,%esp
   11d69:	ff 75 0c             	pushl  0xc(%ebp)
   11d6c:	50                   	push   %eax
   11d6d:	e8 0a 05 00 00       	call   1227c <kstrcpy>
   11d72:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   11d75:	8b 45 08             	mov    0x8(%ebp),%eax
   11d78:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   11d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11d82:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   11d89:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8c:	83 c0 48             	add    $0x48,%eax
   11d8f:	83 ec 0c             	sub    $0xc,%esp
   11d92:	50                   	push   %eax
   11d93:	e8 4d 0a 00 00       	call   127e5 <list_init>
   11d98:	83 c4 10             	add    $0x10,%esp
}
   11d9b:	90                   	nop
   11d9c:	c9                   	leave  
   11d9d:	c3                   	ret    

00011d9e <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   11d9e:	55                   	push   %ebp
   11d9f:	89 e5                	mov    %esp,%ebp
   11da1:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11da4:	e8 15 fc ff ff       	call   119be <irq_enter_protection>
   11da9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11dac:	e8 a5 ef ff ff       	call   10d56 <task_current>
   11db1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11db4:	8b 45 08             	mov    0x8(%ebp),%eax
   11db7:	8b 40 44             	mov    0x44(%eax),%eax
   11dba:	85 c0                	test   %eax,%eax
   11dbc:	75 15                	jne    11dd3 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   11dbe:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc1:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   11dc8:	8b 45 08             	mov    0x8(%ebp),%eax
   11dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11dce:	89 50 40             	mov    %edx,0x40(%eax)
   11dd1:	eb 48                	jmp    11e1b <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   11dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd6:	8b 40 40             	mov    0x40(%eax),%eax
   11dd9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11ddc:	75 11                	jne    11def <mutex_acquire+0x51>
        mutex->locked_count++;
   11dde:	8b 45 08             	mov    0x8(%ebp),%eax
   11de1:	8b 40 44             	mov    0x44(%eax),%eax
   11de4:	8d 50 01             	lea    0x1(%eax),%edx
   11de7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dea:	89 50 44             	mov    %edx,0x44(%eax)
   11ded:	eb 2c                	jmp    11e1b <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   11def:	83 ec 0c             	sub    $0xc,%esp
   11df2:	ff 75 f0             	pushl  -0x10(%ebp)
   11df5:	e8 ee ee ff ff       	call   10ce8 <task_set_blocked>
   11dfa:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   11dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e00:	8d 50 34             	lea    0x34(%eax),%edx
   11e03:	8b 45 08             	mov    0x8(%ebp),%eax
   11e06:	83 c0 48             	add    $0x48,%eax
   11e09:	83 ec 08             	sub    $0x8,%esp
   11e0c:	52                   	push   %edx
   11e0d:	50                   	push   %eax
   11e0e:	e8 54 0a 00 00       	call   12867 <list_insert_back>
   11e13:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11e16:	e8 a6 ef ff ff       	call   10dc1 <task_dispatch>
    }

    irq_leave_protection(state);
   11e1b:	83 ec 0c             	sub    $0xc,%esp
   11e1e:	ff 75 f4             	pushl  -0xc(%ebp)
   11e21:	e8 b0 fb ff ff       	call   119d6 <irq_leave_protection>
   11e26:	83 c4 10             	add    $0x10,%esp
}
   11e29:	90                   	nop
   11e2a:	c9                   	leave  
   11e2b:	c3                   	ret    

00011e2c <mutex_release>:

void mutex_release(mutex_t* mutex) {
   11e2c:	55                   	push   %ebp
   11e2d:	89 e5                	mov    %esp,%ebp
   11e2f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e32:	e8 87 fb ff ff       	call   119be <irq_enter_protection>
   11e37:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11e3a:	e8 17 ef ff ff       	call   10d56 <task_current>
   11e3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11e42:	8b 45 08             	mov    0x8(%ebp),%eax
   11e45:	8b 40 40             	mov    0x40(%eax),%eax
   11e48:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e4b:	0f 85 8a 00 00 00    	jne    11edb <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   11e51:	8b 45 08             	mov    0x8(%ebp),%eax
   11e54:	8b 40 44             	mov    0x44(%eax),%eax
   11e57:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e5a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5d:	89 50 44             	mov    %edx,0x44(%eax)
   11e60:	8b 45 08             	mov    0x8(%ebp),%eax
   11e63:	8b 40 44             	mov    0x44(%eax),%eax
   11e66:	85 c0                	test   %eax,%eax
   11e68:	75 71                	jne    11edb <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   11e6a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6d:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   11e74:	8b 45 08             	mov    0x8(%ebp),%eax
   11e77:	83 c0 48             	add    $0x48,%eax
   11e7a:	83 ec 0c             	sub    $0xc,%esp
   11e7d:	50                   	push   %eax
   11e7e:	e8 cf fe ff ff       	call   11d52 <list_size>
   11e83:	83 c4 10             	add    $0x10,%esp
   11e86:	85 c0                	test   %eax,%eax
   11e88:	74 51                	je     11edb <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   11e8a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8d:	83 c0 48             	add    $0x48,%eax
   11e90:	83 ec 0c             	sub    $0xc,%esp
   11e93:	50                   	push   %eax
   11e94:	e8 31 0a 00 00       	call   128ca <list_remove_front>
   11e99:	83 c4 10             	add    $0x10,%esp
   11e9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   11e9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ea3:	74 08                	je     11ead <mutex_release+0x81>
   11ea5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ea8:	83 e8 34             	sub    $0x34,%eax
   11eab:	eb 05                	jmp    11eb2 <mutex_release+0x86>
   11ead:	b8 00 00 00 00       	mov    $0x0,%eax
   11eb2:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11eb5:	83 ec 0c             	sub    $0xc,%esp
   11eb8:	ff 75 e8             	pushl  -0x18(%ebp)
   11ebb:	e8 f4 ed ff ff       	call   10cb4 <task_set_ready>
   11ec0:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   11ec3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec6:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11ec9:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   11ecc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ecf:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   11ed6:	e8 e6 ee ff ff       	call   10dc1 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   11edb:	83 ec 0c             	sub    $0xc,%esp
   11ede:	ff 75 f4             	pushl  -0xc(%ebp)
   11ee1:	e8 f0 fa ff ff       	call   119d6 <irq_leave_protection>
   11ee6:	83 c4 10             	add    $0x10,%esp
   11ee9:	90                   	nop
   11eea:	c9                   	leave  
   11eeb:	c3                   	ret    

00011eec <list_size>:
static inline int list_size(list_t* list) {
   11eec:	55                   	push   %ebp
   11eed:	89 e5                	mov    %esp,%ebp
    return list->count;
   11eef:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef2:	8b 40 08             	mov    0x8(%eax),%eax
}
   11ef5:	5d                   	pop    %ebp
   11ef6:	c3                   	ret    

00011ef7 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   11ef7:	55                   	push   %ebp
   11ef8:	89 e5                	mov    %esp,%ebp
   11efa:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11efd:	8b 45 08             	mov    0x8(%ebp),%eax
   11f00:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f03:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11f05:	8b 45 08             	mov    0x8(%ebp),%eax
   11f08:	83 c0 04             	add    $0x4,%eax
   11f0b:	83 ec 0c             	sub    $0xc,%esp
   11f0e:	50                   	push   %eax
   11f0f:	e8 d1 08 00 00       	call   127e5 <list_init>
   11f14:	83 c4 10             	add    $0x10,%esp
}
   11f17:	90                   	nop
   11f18:	c9                   	leave  
   11f19:	c3                   	ret    

00011f1a <sem_wait>:


void sem_wait(sem_t* sem) {
   11f1a:	55                   	push   %ebp
   11f1b:	89 e5                	mov    %esp,%ebp
   11f1d:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   11f20:	e8 99 fa ff ff       	call   119be <irq_enter_protection>
   11f25:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   11f28:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2b:	8b 00                	mov    (%eax),%eax
   11f2d:	85 c0                	test   %eax,%eax
   11f2f:	7e 0f                	jle    11f40 <sem_wait+0x26>
        sem->count--;
   11f31:	8b 45 08             	mov    0x8(%ebp),%eax
   11f34:	8b 00                	mov    (%eax),%eax
   11f36:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f39:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3c:	89 10                	mov    %edx,(%eax)
   11f3e:	eb 34                	jmp    11f74 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   11f40:	e8 11 ee ff ff       	call   10d56 <task_current>
   11f45:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   11f48:	83 ec 0c             	sub    $0xc,%esp
   11f4b:	ff 75 f0             	pushl  -0x10(%ebp)
   11f4e:	e8 95 ed ff ff       	call   10ce8 <task_set_blocked>
   11f53:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   11f56:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f59:	8d 50 34             	lea    0x34(%eax),%edx
   11f5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5f:	83 c0 04             	add    $0x4,%eax
   11f62:	83 ec 08             	sub    $0x8,%esp
   11f65:	52                   	push   %edx
   11f66:	50                   	push   %eax
   11f67:	e8 fb 08 00 00       	call   12867 <list_insert_back>
   11f6c:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11f6f:	e8 4d ee ff ff       	call   10dc1 <task_dispatch>
    }

    irq_leave_protection(state);
   11f74:	83 ec 0c             	sub    $0xc,%esp
   11f77:	ff 75 f4             	pushl  -0xc(%ebp)
   11f7a:	e8 57 fa ff ff       	call   119d6 <irq_leave_protection>
   11f7f:	83 c4 10             	add    $0x10,%esp
}
   11f82:	90                   	nop
   11f83:	c9                   	leave  
   11f84:	c3                   	ret    

00011f85 <sem_notify>:


void sem_notify(sem_t* sem) {
   11f85:	55                   	push   %ebp
   11f86:	89 e5                	mov    %esp,%ebp
   11f88:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11f8b:	e8 2e fa ff ff       	call   119be <irq_enter_protection>
   11f90:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   11f93:	8b 45 08             	mov    0x8(%ebp),%eax
   11f96:	83 c0 04             	add    $0x4,%eax
   11f99:	83 ec 0c             	sub    $0xc,%esp
   11f9c:	50                   	push   %eax
   11f9d:	e8 4a ff ff ff       	call   11eec <list_size>
   11fa2:	83 c4 10             	add    $0x10,%esp
   11fa5:	85 c0                	test   %eax,%eax
   11fa7:	74 40                	je     11fe9 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   11fa9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fac:	83 c0 04             	add    $0x4,%eax
   11faf:	83 ec 0c             	sub    $0xc,%esp
   11fb2:	50                   	push   %eax
   11fb3:	e8 12 09 00 00       	call   128ca <list_remove_front>
   11fb8:	83 c4 10             	add    $0x10,%esp
   11fbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   11fbe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11fc2:	74 08                	je     11fcc <sem_notify+0x47>
   11fc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fc7:	83 e8 34             	sub    $0x34,%eax
   11fca:	eb 05                	jmp    11fd1 <sem_notify+0x4c>
   11fcc:	b8 00 00 00 00       	mov    $0x0,%eax
   11fd1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11fd4:	83 ec 0c             	sub    $0xc,%esp
   11fd7:	ff 75 ec             	pushl  -0x14(%ebp)
   11fda:	e8 d5 ec ff ff       	call   10cb4 <task_set_ready>
   11fdf:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11fe2:	e8 da ed ff ff       	call   10dc1 <task_dispatch>
   11fe7:	eb 0d                	jmp    11ff6 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   11fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fec:	8b 00                	mov    (%eax),%eax
   11fee:	8d 50 01             	lea    0x1(%eax),%edx
   11ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff4:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   11ff6:	83 ec 0c             	sub    $0xc,%esp
   11ff9:	ff 75 f4             	pushl  -0xc(%ebp)
   11ffc:	e8 d5 f9 ff ff       	call   119d6 <irq_leave_protection>
   12001:	83 c4 10             	add    $0x10,%esp
}
   12004:	90                   	nop
   12005:	c9                   	leave  
   12006:	c3                   	ret    

00012007 <sem_count>:

int sem_count(sem_t* sem) {
   12007:	55                   	push   %ebp
   12008:	89 e5                	mov    %esp,%ebp
   1200a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1200d:	e8 ac f9 ff ff       	call   119be <irq_enter_protection>
   12012:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   12015:	8b 45 08             	mov    0x8(%ebp),%eax
   12018:	8b 00                	mov    (%eax),%eax
   1201a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   1201d:	83 ec 0c             	sub    $0xc,%esp
   12020:	ff 75 f4             	pushl  -0xc(%ebp)
   12023:	e8 ae f9 ff ff       	call   119d6 <irq_leave_protection>
   12028:	83 c4 10             	add    $0x10,%esp

    return count;
   1202b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1202e:	c9                   	leave  
   1202f:	c3                   	ret    

00012030 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   12030:	55                   	push   %ebp
   12031:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   12033:	8b 45 08             	mov    0x8(%ebp),%eax
   12036:	83 c0 07             	add    $0x7,%eax
   12039:	8d 50 07             	lea    0x7(%eax),%edx
   1203c:	85 c0                	test   %eax,%eax
   1203e:	0f 48 c2             	cmovs  %edx,%eax
   12041:	c1 f8 03             	sar    $0x3,%eax
}
   12044:	5d                   	pop    %ebp
   12045:	c3                   	ret    

00012046 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   12046:	55                   	push   %ebp
   12047:	89 e5                	mov    %esp,%ebp
   12049:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1204c:	8b 45 08             	mov    0x8(%ebp),%eax
   1204f:	8b 55 10             	mov    0x10(%ebp),%edx
   12052:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12054:	8b 45 08             	mov    0x8(%ebp),%eax
   12057:	8b 55 0c             	mov    0xc(%ebp),%edx
   1205a:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1205d:	8b 45 08             	mov    0x8(%ebp),%eax
   12060:	8b 00                	mov    (%eax),%eax
   12062:	50                   	push   %eax
   12063:	e8 c8 ff ff ff       	call   12030 <bitmap_byte_count>
   12068:	83 c4 04             	add    $0x4,%esp
   1206b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1206e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12072:	74 07                	je     1207b <bitmap_init+0x35>
   12074:	ba ff 00 00 00       	mov    $0xff,%edx
   12079:	eb 05                	jmp    12080 <bitmap_init+0x3a>
   1207b:	ba 00 00 00 00       	mov    $0x0,%edx
   12080:	8b 45 08             	mov    0x8(%ebp),%eax
   12083:	8b 40 04             	mov    0x4(%eax),%eax
   12086:	83 ec 04             	sub    $0x4,%esp
   12089:	ff 75 f4             	pushl  -0xc(%ebp)
   1208c:	52                   	push   %edx
   1208d:	50                   	push   %eax
   1208e:	e8 a4 03 00 00       	call   12437 <kmemset>
   12093:	83 c4 10             	add    $0x10,%esp
}
   12096:	90                   	nop
   12097:	c9                   	leave  
   12098:	c3                   	ret    

00012099 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   12099:	55                   	push   %ebp
   1209a:	89 e5                	mov    %esp,%ebp
   1209c:	56                   	push   %esi
   1209d:	53                   	push   %ebx
   1209e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   120a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   120a8:	e9 a2 00 00 00       	jmp    1214f <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   120ad:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   120b1:	74 4a                	je     120fd <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   120b3:	8b 45 08             	mov    0x8(%ebp),%eax
   120b6:	8b 50 04             	mov    0x4(%eax),%edx
   120b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   120bc:	8d 48 07             	lea    0x7(%eax),%ecx
   120bf:	85 c0                	test   %eax,%eax
   120c1:	0f 48 c1             	cmovs  %ecx,%eax
   120c4:	c1 f8 03             	sar    $0x3,%eax
   120c7:	89 c3                	mov    %eax,%ebx
   120c9:	89 d8                	mov    %ebx,%eax
   120cb:	01 d0                	add    %edx,%eax
   120cd:	0f b6 00             	movzbl (%eax),%eax
   120d0:	89 c6                	mov    %eax,%esi
   120d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   120d5:	99                   	cltd   
   120d6:	c1 ea 1d             	shr    $0x1d,%edx
   120d9:	01 d0                	add    %edx,%eax
   120db:	83 e0 07             	and    $0x7,%eax
   120de:	29 d0                	sub    %edx,%eax
   120e0:	ba 01 00 00 00       	mov    $0x1,%edx
   120e5:	89 c1                	mov    %eax,%ecx
   120e7:	d3 e2                	shl    %cl,%edx
   120e9:	89 d0                	mov    %edx,%eax
   120eb:	89 f2                	mov    %esi,%edx
   120ed:	09 c2                	or     %eax,%edx
   120ef:	8b 45 08             	mov    0x8(%ebp),%eax
   120f2:	8b 40 04             	mov    0x4(%eax),%eax
   120f5:	89 d9                	mov    %ebx,%ecx
   120f7:	01 c8                	add    %ecx,%eax
   120f9:	88 10                	mov    %dl,(%eax)
   120fb:	eb 4a                	jmp    12147 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   120fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12100:	8b 50 04             	mov    0x4(%eax),%edx
   12103:	8b 45 0c             	mov    0xc(%ebp),%eax
   12106:	8d 48 07             	lea    0x7(%eax),%ecx
   12109:	85 c0                	test   %eax,%eax
   1210b:	0f 48 c1             	cmovs  %ecx,%eax
   1210e:	c1 f8 03             	sar    $0x3,%eax
   12111:	89 c3                	mov    %eax,%ebx
   12113:	89 d8                	mov    %ebx,%eax
   12115:	01 d0                	add    %edx,%eax
   12117:	0f b6 00             	movzbl (%eax),%eax
   1211a:	89 c6                	mov    %eax,%esi
   1211c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1211f:	99                   	cltd   
   12120:	c1 ea 1d             	shr    $0x1d,%edx
   12123:	01 d0                	add    %edx,%eax
   12125:	83 e0 07             	and    $0x7,%eax
   12128:	29 d0                	sub    %edx,%eax
   1212a:	ba 01 00 00 00       	mov    $0x1,%edx
   1212f:	89 c1                	mov    %eax,%ecx
   12131:	d3 e2                	shl    %cl,%edx
   12133:	89 d0                	mov    %edx,%eax
   12135:	f7 d0                	not    %eax
   12137:	89 f2                	mov    %esi,%edx
   12139:	21 c2                	and    %eax,%edx
   1213b:	8b 45 08             	mov    0x8(%ebp),%eax
   1213e:	8b 40 04             	mov    0x4(%eax),%eax
   12141:	89 d9                	mov    %ebx,%ecx
   12143:	01 c8                	add    %ecx,%eax
   12145:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12147:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1214b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1214f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12152:	3b 45 10             	cmp    0x10(%ebp),%eax
   12155:	7d 0e                	jge    12165 <bitmap_set_bit+0xcc>
   12157:	8b 45 08             	mov    0x8(%ebp),%eax
   1215a:	8b 00                	mov    (%eax),%eax
   1215c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1215f:	0f 8c 48 ff ff ff    	jl     120ad <bitmap_set_bit+0x14>
        }
    }
}
   12165:	90                   	nop
   12166:	83 c4 10             	add    $0x10,%esp
   12169:	5b                   	pop    %ebx
   1216a:	5e                   	pop    %esi
   1216b:	5d                   	pop    %ebp
   1216c:	c3                   	ret    

0001216d <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   1216d:	55                   	push   %ebp
   1216e:	89 e5                	mov    %esp,%ebp
   12170:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   12171:	8b 45 08             	mov    0x8(%ebp),%eax
   12174:	8b 50 04             	mov    0x4(%eax),%edx
   12177:	8b 45 0c             	mov    0xc(%ebp),%eax
   1217a:	8d 48 07             	lea    0x7(%eax),%ecx
   1217d:	85 c0                	test   %eax,%eax
   1217f:	0f 48 c1             	cmovs  %ecx,%eax
   12182:	c1 f8 03             	sar    $0x3,%eax
   12185:	01 d0                	add    %edx,%eax
   12187:	0f b6 00             	movzbl (%eax),%eax
   1218a:	0f b6 d8             	movzbl %al,%ebx
   1218d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12190:	99                   	cltd   
   12191:	c1 ea 1d             	shr    $0x1d,%edx
   12194:	01 d0                	add    %edx,%eax
   12196:	83 e0 07             	and    $0x7,%eax
   12199:	29 d0                	sub    %edx,%eax
   1219b:	89 c1                	mov    %eax,%ecx
   1219d:	d3 fb                	sar    %cl,%ebx
   1219f:	89 d8                	mov    %ebx,%eax
   121a1:	83 e0 01             	and    $0x1,%eax
}
   121a4:	5b                   	pop    %ebx
   121a5:	5d                   	pop    %ebp
   121a6:	c3                   	ret    

000121a7 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   121a7:	55                   	push   %ebp
   121a8:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   121aa:	ff 75 0c             	pushl  0xc(%ebp)
   121ad:	ff 75 08             	pushl  0x8(%ebp)
   121b0:	e8 b8 ff ff ff       	call   1216d <bitmap_get_bit>
   121b5:	83 c4 08             	add    $0x8,%esp
   121b8:	85 c0                	test   %eax,%eax
   121ba:	0f 95 c0             	setne  %al
   121bd:	0f b6 c0             	movzbl %al,%eax
}
   121c0:	c9                   	leave  
   121c1:	c3                   	ret    

000121c2 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   121c2:	55                   	push   %ebp
   121c3:	89 e5                	mov    %esp,%ebp
   121c5:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   121c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   121cf:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   121d6:	e9 85 00 00 00       	jmp    12260 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   121db:	ff 75 fc             	pushl  -0x4(%ebp)
   121de:	ff 75 08             	pushl  0x8(%ebp)
   121e1:	e8 87 ff ff ff       	call   1216d <bitmap_get_bit>
   121e6:	83 c4 08             	add    $0x8,%esp
   121e9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   121ec:	74 06                	je     121f4 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   121ee:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   121f2:	eb 6c                	jmp    12260 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   121f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121f7:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   121fa:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12201:	eb 27                	jmp    1222a <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12203:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12206:	8d 50 01             	lea    0x1(%eax),%edx
   12209:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1220c:	50                   	push   %eax
   1220d:	ff 75 08             	pushl  0x8(%ebp)
   12210:	e8 58 ff ff ff       	call   1216d <bitmap_get_bit>
   12215:	83 c4 08             	add    $0x8,%esp
   12218:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1221b:	74 09                	je     12226 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   1221d:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12224:	eb 16                	jmp    1223c <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12226:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1222a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1222d:	3b 45 10             	cmp    0x10(%ebp),%eax
   12230:	7d 0a                	jge    1223c <bitmap_alloc_nbits+0x7a>
   12232:	8b 45 08             	mov    0x8(%ebp),%eax
   12235:	8b 00                	mov    (%eax),%eax
   12237:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1223a:	7c c7                	jl     12203 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   1223c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1223f:	3b 45 10             	cmp    0x10(%ebp),%eax
   12242:	7c 1c                	jl     12260 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   12244:	8b 45 0c             	mov    0xc(%ebp),%eax
   12247:	f7 d0                	not    %eax
   12249:	50                   	push   %eax
   1224a:	ff 75 10             	pushl  0x10(%ebp)
   1224d:	ff 75 f8             	pushl  -0x8(%ebp)
   12250:	ff 75 08             	pushl  0x8(%ebp)
   12253:	e8 41 fe ff ff       	call   12099 <bitmap_set_bit>
   12258:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1225b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1225e:	eb 13                	jmp    12273 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   12260:	8b 45 08             	mov    0x8(%ebp),%eax
   12263:	8b 00                	mov    (%eax),%eax
   12265:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12268:	0f 8c 6d ff ff ff    	jl     121db <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1226e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12273:	c9                   	leave  
   12274:	c3                   	ret    

00012275 <hlt>:
static inline void hlt(void) {
   12275:	55                   	push   %ebp
   12276:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12278:	f4                   	hlt    
}
   12279:	90                   	nop
   1227a:	5d                   	pop    %ebp
   1227b:	c3                   	ret    

0001227c <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   1227c:	55                   	push   %ebp
   1227d:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1227f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12283:	74 3b                	je     122c0 <kstrcpy+0x44>
   12285:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12289:	74 35                	je     122c0 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   1228b:	eb 17                	jmp    122a4 <kstrcpy+0x28>
        *dest++ = *src++;
   1228d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12290:	8d 42 01             	lea    0x1(%edx),%eax
   12293:	89 45 0c             	mov    %eax,0xc(%ebp)
   12296:	8b 45 08             	mov    0x8(%ebp),%eax
   12299:	8d 48 01             	lea    0x1(%eax),%ecx
   1229c:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1229f:	0f b6 12             	movzbl (%edx),%edx
   122a2:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   122a4:	8b 45 08             	mov    0x8(%ebp),%eax
   122a7:	0f b6 00             	movzbl (%eax),%eax
   122aa:	84 c0                	test   %al,%al
   122ac:	74 0a                	je     122b8 <kstrcpy+0x3c>
   122ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   122b1:	0f b6 00             	movzbl (%eax),%eax
   122b4:	84 c0                	test   %al,%al
   122b6:	75 d5                	jne    1228d <kstrcpy+0x11>
    }
    *dest = '\0';
   122b8:	8b 45 08             	mov    0x8(%ebp),%eax
   122bb:	c6 00 00             	movb   $0x0,(%eax)
   122be:	eb 01                	jmp    122c1 <kstrcpy+0x45>
        return;
   122c0:	90                   	nop
}
   122c1:	5d                   	pop    %ebp
   122c2:	c3                   	ret    

000122c3 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   122c3:	55                   	push   %ebp
   122c4:	89 e5                	mov    %esp,%ebp
   122c6:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   122c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   122cd:	74 61                	je     12330 <kstrncpy+0x6d>
   122cf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122d3:	74 5b                	je     12330 <kstrncpy+0x6d>
   122d5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   122d9:	74 55                	je     12330 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   122db:	8b 45 08             	mov    0x8(%ebp),%eax
   122de:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   122e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   122e4:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   122e7:	eb 17                	jmp    12300 <kstrncpy+0x3d>
        *d++ = *s++;
   122e9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   122ec:	8d 42 01             	lea    0x1(%edx),%eax
   122ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
   122f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122f5:	8d 48 01             	lea    0x1(%eax),%ecx
   122f8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   122fb:	0f b6 12             	movzbl (%edx),%edx
   122fe:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   12300:	8b 45 10             	mov    0x10(%ebp),%eax
   12303:	8d 50 ff             	lea    -0x1(%eax),%edx
   12306:	89 55 10             	mov    %edx,0x10(%ebp)
   12309:	85 c0                	test   %eax,%eax
   1230b:	7e 0a                	jle    12317 <kstrncpy+0x54>
   1230d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12310:	0f b6 00             	movzbl (%eax),%eax
   12313:	84 c0                	test   %al,%al
   12315:	75 d2                	jne    122e9 <kstrncpy+0x26>
    }
    if (size == 0) {
   12317:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1231b:	75 0b                	jne    12328 <kstrncpy+0x65>
        *(d - 1) = '\0';
   1231d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12320:	83 e8 01             	sub    $0x1,%eax
   12323:	c6 00 00             	movb   $0x0,(%eax)
   12326:	eb 09                	jmp    12331 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   12328:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1232b:	c6 00 00             	movb   $0x0,(%eax)
   1232e:	eb 01                	jmp    12331 <kstrncpy+0x6e>
        return;
   12330:	90                   	nop
    }
}
   12331:	c9                   	leave  
   12332:	c3                   	ret    

00012333 <kstrlen>:


int kstrlen(const char *str) {
   12333:	55                   	push   %ebp
   12334:	89 e5                	mov    %esp,%ebp
   12336:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12339:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1233d:	75 07                	jne    12346 <kstrlen+0x13>
        return 0;
   1233f:	b8 00 00 00 00       	mov    $0x0,%eax
   12344:	eb 26                	jmp    1236c <kstrlen+0x39>
    }

    const char *c = str;
   12346:	8b 45 08             	mov    0x8(%ebp),%eax
   12349:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   1234c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   12353:	eb 04                	jmp    12359 <kstrlen+0x26>
        len++;
   12355:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   12359:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1235c:	8d 50 01             	lea    0x1(%eax),%edx
   1235f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12362:	0f b6 00             	movzbl (%eax),%eax
   12365:	84 c0                	test   %al,%al
   12367:	75 ec                	jne    12355 <kstrlen+0x22>
    }

    return len;
   12369:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1236c:	c9                   	leave  
   1236d:	c3                   	ret    

0001236e <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   1236e:	55                   	push   %ebp
   1236f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   12371:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12375:	74 06                	je     1237d <kstrncmp+0xf>
   12377:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1237b:	75 0f                	jne    1238c <kstrncmp+0x1e>
        return -1;
   1237d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12382:	eb 62                	jmp    123e6 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12384:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12388:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   1238c:	8b 45 08             	mov    0x8(%ebp),%eax
   1238f:	0f b6 00             	movzbl (%eax),%eax
   12392:	84 c0                	test   %al,%al
   12394:	74 20                	je     123b6 <kstrncmp+0x48>
   12396:	8b 45 0c             	mov    0xc(%ebp),%eax
   12399:	0f b6 00             	movzbl (%eax),%eax
   1239c:	84 c0                	test   %al,%al
   1239e:	74 16                	je     123b6 <kstrncmp+0x48>
   123a0:	8b 45 08             	mov    0x8(%ebp),%eax
   123a3:	0f b6 10             	movzbl (%eax),%edx
   123a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   123a9:	0f b6 00             	movzbl (%eax),%eax
   123ac:	38 c2                	cmp    %al,%dl
   123ae:	75 06                	jne    123b6 <kstrncmp+0x48>
   123b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123b4:	75 ce                	jne    12384 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   123b6:	8b 45 08             	mov    0x8(%ebp),%eax
   123b9:	0f b6 00             	movzbl (%eax),%eax
   123bc:	84 c0                	test   %al,%al
   123be:	74 21                	je     123e1 <kstrncmp+0x73>
   123c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   123c3:	0f b6 00             	movzbl (%eax),%eax
   123c6:	84 c0                	test   %al,%al
   123c8:	74 17                	je     123e1 <kstrncmp+0x73>
   123ca:	8b 45 08             	mov    0x8(%ebp),%eax
   123cd:	0f b6 10             	movzbl (%eax),%edx
   123d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   123d3:	0f b6 00             	movzbl (%eax),%eax
   123d6:	38 c2                	cmp    %al,%dl
   123d8:	74 07                	je     123e1 <kstrncmp+0x73>
   123da:	b8 01 00 00 00       	mov    $0x1,%eax
   123df:	eb 05                	jmp    123e6 <kstrncmp+0x78>
   123e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   123e6:	5d                   	pop    %ebp
   123e7:	c3                   	ret    

000123e8 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   123e8:	55                   	push   %ebp
   123e9:	89 e5                	mov    %esp,%ebp
   123eb:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   123ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123f2:	74 40                	je     12434 <kmemcpy+0x4c>
   123f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123f8:	74 3a                	je     12434 <kmemcpy+0x4c>
   123fa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123fe:	74 34                	je     12434 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12400:	8b 45 0c             	mov    0xc(%ebp),%eax
   12403:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12406:	8b 45 08             	mov    0x8(%ebp),%eax
   12409:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1240c:	eb 17                	jmp    12425 <kmemcpy+0x3d>
        *d++ = *s++;
   1240e:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12411:	8d 42 01             	lea    0x1(%edx),%eax
   12414:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12417:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1241a:	8d 48 01             	lea    0x1(%eax),%ecx
   1241d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12420:	0f b6 12             	movzbl (%edx),%edx
   12423:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12425:	8b 45 10             	mov    0x10(%ebp),%eax
   12428:	8d 50 ff             	lea    -0x1(%eax),%edx
   1242b:	89 55 10             	mov    %edx,0x10(%ebp)
   1242e:	85 c0                	test   %eax,%eax
   12430:	75 dc                	jne    1240e <kmemcpy+0x26>
   12432:	eb 01                	jmp    12435 <kmemcpy+0x4d>
        return;
   12434:	90                   	nop
    }
}
   12435:	c9                   	leave  
   12436:	c3                   	ret    

00012437 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12437:	55                   	push   %ebp
   12438:	89 e5                	mov    %esp,%ebp
   1243a:	83 ec 14             	sub    $0x14,%esp
   1243d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12440:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12443:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12447:	74 2c                	je     12475 <kmemset+0x3e>
   12449:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1244d:	74 26                	je     12475 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   1244f:	8b 45 08             	mov    0x8(%ebp),%eax
   12452:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12455:	eb 0f                	jmp    12466 <kmemset+0x2f>
        *d++ = v;
   12457:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1245a:	8d 50 01             	lea    0x1(%eax),%edx
   1245d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12460:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12464:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12466:	8b 45 10             	mov    0x10(%ebp),%eax
   12469:	8d 50 ff             	lea    -0x1(%eax),%edx
   1246c:	89 55 10             	mov    %edx,0x10(%ebp)
   1246f:	85 c0                	test   %eax,%eax
   12471:	75 e4                	jne    12457 <kmemset+0x20>
   12473:	eb 01                	jmp    12476 <kmemset+0x3f>
        return;
   12475:	90                   	nop
    }
}
   12476:	c9                   	leave  
   12477:	c3                   	ret    

00012478 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12478:	55                   	push   %ebp
   12479:	89 e5                	mov    %esp,%ebp
   1247b:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   1247e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12482:	74 06                	je     1248a <kmemcmp+0x12>
   12484:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12488:	75 07                	jne    12491 <kmemcmp+0x19>
        return 1;
   1248a:	b8 01 00 00 00       	mov    $0x1,%eax
   1248f:	eb 43                	jmp    124d4 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   12491:	8b 45 08             	mov    0x8(%ebp),%eax
   12494:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12497:	8b 45 0c             	mov    0xc(%ebp),%eax
   1249a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1249d:	eb 23                	jmp    124c2 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   1249f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124a2:	8d 50 01             	lea    0x1(%eax),%edx
   124a5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   124a8:	0f b6 08             	movzbl (%eax),%ecx
   124ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124ae:	8d 50 01             	lea    0x1(%eax),%edx
   124b1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   124b4:	0f b6 00             	movzbl (%eax),%eax
   124b7:	38 c1                	cmp    %al,%cl
   124b9:	74 07                	je     124c2 <kmemcmp+0x4a>
            return 1;
   124bb:	b8 01 00 00 00       	mov    $0x1,%eax
   124c0:	eb 12                	jmp    124d4 <kmemcmp+0x5c>
    while (size--) {
   124c2:	8b 45 10             	mov    0x10(%ebp),%eax
   124c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   124c8:	89 55 10             	mov    %edx,0x10(%ebp)
   124cb:	85 c0                	test   %eax,%eax
   124cd:	75 d0                	jne    1249f <kmemcmp+0x27>
        }
    }

    return 0;
   124cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   124d4:	c9                   	leave  
   124d5:	c3                   	ret    

000124d6 <kitoa>:


void kitoa(char *buf, int num, int base) {
   124d6:	55                   	push   %ebp
   124d7:	89 e5                	mov    %esp,%ebp
   124d9:	53                   	push   %ebx
   124da:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   124dd:	8b 45 08             	mov    0x8(%ebp),%eax
   124e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   124e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e6:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   124e9:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   124ed:	74 1d                	je     1250c <kitoa+0x36>
   124ef:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   124f3:	74 17                	je     1250c <kitoa+0x36>
   124f5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   124f9:	74 11                	je     1250c <kitoa+0x36>
   124fb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   124ff:	74 0b                	je     1250c <kitoa+0x36>
        *p = '\0';
   12501:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12504:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12507:	e9 03 01 00 00       	jmp    1260f <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1250c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12513:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12517:	79 19                	jns    12532 <kitoa+0x5c>
   12519:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1251d:	75 13                	jne    12532 <kitoa+0x5c>
        *p++ = '-';
   1251f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12522:	8d 50 01             	lea    0x1(%eax),%edx
   12525:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12528:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1252b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12532:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12536:	74 3b                	je     12573 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12538:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1253e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12541:	99                   	cltd   
   12542:	f7 7d 10             	idivl  0x10(%ebp)
   12545:	89 d0                	mov    %edx,%eax
   12547:	83 c0 0f             	add    $0xf,%eax
   1254a:	01 c8                	add    %ecx,%eax
   1254c:	0f b6 00             	movzbl (%eax),%eax
   1254f:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12552:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12555:	8d 50 01             	lea    0x1(%eax),%edx
   12558:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1255b:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1255f:	88 10                	mov    %dl,(%eax)
            num /= base;
   12561:	8b 45 0c             	mov    0xc(%ebp),%eax
   12564:	99                   	cltd   
   12565:	f7 7d 10             	idivl  0x10(%ebp)
   12568:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   1256b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1256f:	75 c7                	jne    12538 <kitoa+0x62>
   12571:	eb 4b                	jmp    125be <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12573:	8b 45 0c             	mov    0xc(%ebp),%eax
   12576:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12579:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1257f:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12582:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12585:	ba 00 00 00 00       	mov    $0x0,%edx
   1258a:	f7 f3                	div    %ebx
   1258c:	89 d0                	mov    %edx,%eax
   1258e:	83 c0 0f             	add    $0xf,%eax
   12591:	01 c8                	add    %ecx,%eax
   12593:	0f b6 00             	movzbl (%eax),%eax
   12596:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12599:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1259c:	8d 50 01             	lea    0x1(%eax),%edx
   1259f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125a2:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   125a6:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   125a8:	8b 5d 10             	mov    0x10(%ebp),%ebx
   125ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125ae:	ba 00 00 00 00       	mov    $0x0,%edx
   125b3:	f7 f3                	div    %ebx
   125b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   125b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   125bc:	75 bb                	jne    12579 <kitoa+0xa3>
    }
    *p-- = '\0';
   125be:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125c1:	8d 50 ff             	lea    -0x1(%eax),%edx
   125c4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125c7:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   125ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   125ce:	74 08                	je     125d8 <kitoa+0x102>
   125d0:	8b 45 08             	mov    0x8(%ebp),%eax
   125d3:	83 c0 01             	add    $0x1,%eax
   125d6:	eb 03                	jmp    125db <kitoa+0x105>
   125d8:	8b 45 08             	mov    0x8(%ebp),%eax
   125db:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   125de:	eb 27                	jmp    12607 <kitoa+0x131>
        char ch = *start;
   125e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   125e3:	0f b6 00             	movzbl (%eax),%eax
   125e6:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   125e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125ec:	0f b6 10             	movzbl (%eax),%edx
   125ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   125f2:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   125f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125f7:	8d 50 ff             	lea    -0x1(%eax),%edx
   125fa:	89 55 f8             	mov    %edx,-0x8(%ebp)
   125fd:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12601:	88 10                	mov    %dl,(%eax)
        start++;
   12603:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12607:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1260a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1260d:	72 d1                	jb     125e0 <kitoa+0x10a>
    }
}
   1260f:	83 c4 20             	add    $0x20,%esp
   12612:	5b                   	pop    %ebx
   12613:	5d                   	pop    %ebp
   12614:	c3                   	ret    

00012615 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12615:	55                   	push   %ebp
   12616:	89 e5                	mov    %esp,%ebp
   12618:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   1261b:	8d 45 10             	lea    0x10(%ebp),%eax
   1261e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12621:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12624:	83 ec 04             	sub    $0x4,%esp
   12627:	50                   	push   %eax
   12628:	ff 75 0c             	pushl  0xc(%ebp)
   1262b:	ff 75 08             	pushl  0x8(%ebp)
   1262e:	e8 06 00 00 00       	call   12639 <kvsprintf>
   12633:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12636:	90                   	nop
   12637:	c9                   	leave  
   12638:	c3                   	ret    

00012639 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12639:	55                   	push   %ebp
   1263a:	89 e5                	mov    %esp,%ebp
   1263c:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   1263f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12646:	8b 45 08             	mov    0x8(%ebp),%eax
   12649:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   1264c:	e9 2f 01 00 00       	jmp    12780 <kvsprintf+0x147>
        switch (state) {
   12651:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12654:	85 c0                	test   %eax,%eax
   12656:	74 0a                	je     12662 <kvsprintf+0x29>
   12658:	83 f8 01             	cmp    $0x1,%eax
   1265b:	74 2b                	je     12688 <kvsprintf+0x4f>
   1265d:	e9 1e 01 00 00       	jmp    12780 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12662:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12666:	75 0c                	jne    12674 <kvsprintf+0x3b>
                state = READ_FMT;
   12668:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1266f:	e9 0c 01 00 00       	jmp    12780 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12674:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12677:	8d 50 01             	lea    0x1(%eax),%edx
   1267a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1267d:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12681:	88 10                	mov    %dl,(%eax)
            }
            break;
   12683:	e9 f8 00 00 00       	jmp    12780 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12688:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1268c:	75 31                	jne    126bf <kvsprintf+0x86>
                int num = va_arg(args, int);
   1268e:	8b 45 10             	mov    0x10(%ebp),%eax
   12691:	8d 50 04             	lea    0x4(%eax),%edx
   12694:	89 55 10             	mov    %edx,0x10(%ebp)
   12697:	8b 00                	mov    (%eax),%eax
   12699:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   1269c:	6a 0a                	push   $0xa
   1269e:	ff 75 e4             	pushl  -0x1c(%ebp)
   126a1:	ff 75 f8             	pushl  -0x8(%ebp)
   126a4:	e8 2d fe ff ff       	call   124d6 <kitoa>
   126a9:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   126ac:	ff 75 f8             	pushl  -0x8(%ebp)
   126af:	e8 7f fc ff ff       	call   12333 <kstrlen>
   126b4:	83 c4 04             	add    $0x4,%esp
   126b7:	01 45 f8             	add    %eax,-0x8(%ebp)
   126ba:	e9 b9 00 00 00       	jmp    12778 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   126bf:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   126c3:	75 46                	jne    1270b <kvsprintf+0xd2>
                *curr++ = '0';
   126c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126c8:	8d 50 01             	lea    0x1(%eax),%edx
   126cb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126ce:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   126d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126d4:	8d 50 01             	lea    0x1(%eax),%edx
   126d7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126da:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   126dd:	8b 45 10             	mov    0x10(%ebp),%eax
   126e0:	8d 50 04             	lea    0x4(%eax),%edx
   126e3:	89 55 10             	mov    %edx,0x10(%ebp)
   126e6:	8b 00                	mov    (%eax),%eax
   126e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   126eb:	6a 10                	push   $0x10
   126ed:	ff 75 e8             	pushl  -0x18(%ebp)
   126f0:	ff 75 f8             	pushl  -0x8(%ebp)
   126f3:	e8 de fd ff ff       	call   124d6 <kitoa>
   126f8:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   126fb:	ff 75 f8             	pushl  -0x8(%ebp)
   126fe:	e8 30 fc ff ff       	call   12333 <kstrlen>
   12703:	83 c4 04             	add    $0x4,%esp
   12706:	01 45 f8             	add    %eax,-0x8(%ebp)
   12709:	eb 6d                	jmp    12778 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   1270b:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1270f:	75 1f                	jne    12730 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12711:	8b 45 10             	mov    0x10(%ebp),%eax
   12714:	8d 50 04             	lea    0x4(%eax),%edx
   12717:	89 55 10             	mov    %edx,0x10(%ebp)
   1271a:	8b 00                	mov    (%eax),%eax
   1271c:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   1271f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12722:	8d 50 01             	lea    0x1(%eax),%edx
   12725:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12728:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1272c:	88 10                	mov    %dl,(%eax)
   1272e:	eb 48                	jmp    12778 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12730:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12734:	75 42                	jne    12778 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12736:	8b 45 10             	mov    0x10(%ebp),%eax
   12739:	8d 50 04             	lea    0x4(%eax),%edx
   1273c:	89 55 10             	mov    %edx,0x10(%ebp)
   1273f:	8b 00                	mov    (%eax),%eax
   12741:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12744:	ff 75 f4             	pushl  -0xc(%ebp)
   12747:	e8 e7 fb ff ff       	call   12333 <kstrlen>
   1274c:	83 c4 04             	add    $0x4,%esp
   1274f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12752:	eb 17                	jmp    1276b <kvsprintf+0x132>
                    *curr++ = *str++;
   12754:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12757:	8d 42 01             	lea    0x1(%edx),%eax
   1275a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1275d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12760:	8d 48 01             	lea    0x1(%eax),%ecx
   12763:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12766:	0f b6 12             	movzbl (%edx),%edx
   12769:	88 10                	mov    %dl,(%eax)
                while (len--) {
   1276b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1276e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12771:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12774:	85 c0                	test   %eax,%eax
   12776:	75 dc                	jne    12754 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12778:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1277f:	90                   	nop
    while ((ch = *fmt++)) {
   12780:	8b 45 0c             	mov    0xc(%ebp),%eax
   12783:	8d 50 01             	lea    0x1(%eax),%edx
   12786:	89 55 0c             	mov    %edx,0xc(%ebp)
   12789:	0f b6 00             	movzbl (%eax),%eax
   1278c:	88 45 ef             	mov    %al,-0x11(%ebp)
   1278f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12793:	0f 85 b8 fe ff ff    	jne    12651 <kvsprintf+0x18>
        }
    }
}
   12799:	90                   	nop
   1279a:	c9                   	leave  
   1279b:	c3                   	ret    

0001279c <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   1279c:	55                   	push   %ebp
   1279d:	89 e5                	mov    %esp,%ebp
   1279f:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   127a2:	83 ec 08             	sub    $0x8,%esp
   127a5:	ff 75 14             	pushl  0x14(%ebp)
   127a8:	68 4c 31 01 00       	push   $0x1314c
   127ad:	e8 f4 02 00 00       	call   12aa6 <log_printf>
   127b2:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   127b5:	ff 75 10             	pushl  0x10(%ebp)
   127b8:	ff 75 0c             	pushl  0xc(%ebp)
   127bb:	ff 75 08             	pushl  0x8(%ebp)
   127be:	68 5e 31 01 00       	push   $0x1315e
   127c3:	e8 de 02 00 00       	call   12aa6 <log_printf>
   127c8:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   127cb:	e8 a5 fa ff ff       	call   12275 <hlt>
   127d0:	eb f9                	jmp    127cb <pannic+0x2f>

000127d2 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   127d2:	55                   	push   %ebp
   127d3:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   127d5:	8b 45 08             	mov    0x8(%ebp),%eax
   127d8:	8b 40 08             	mov    0x8(%eax),%eax
   127db:	85 c0                	test   %eax,%eax
   127dd:	0f 94 c0             	sete   %al
   127e0:	0f b6 c0             	movzbl %al,%eax
}
   127e3:	5d                   	pop    %ebp
   127e4:	c3                   	ret    

000127e5 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   127e5:	55                   	push   %ebp
   127e6:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   127e8:	8b 45 08             	mov    0x8(%ebp),%eax
   127eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   127f1:	8b 45 08             	mov    0x8(%ebp),%eax
   127f4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   127fb:	8b 45 08             	mov    0x8(%ebp),%eax
   127fe:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12805:	90                   	nop
   12806:	5d                   	pop    %ebp
   12807:	c3                   	ret    

00012808 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12808:	55                   	push   %ebp
   12809:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   1280b:	8b 45 08             	mov    0x8(%ebp),%eax
   1280e:	8b 10                	mov    (%eax),%edx
   12810:	8b 45 0c             	mov    0xc(%ebp),%eax
   12813:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12816:	8b 45 0c             	mov    0xc(%ebp),%eax
   12819:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   1281f:	ff 75 08             	pushl  0x8(%ebp)
   12822:	e8 ab ff ff ff       	call   127d2 <list_is_empty>
   12827:	83 c4 04             	add    $0x4,%esp
   1282a:	85 c0                	test   %eax,%eax
   1282c:	74 15                	je     12843 <list_insert_front+0x3b>
        list->last = list->first = node;
   1282e:	8b 45 08             	mov    0x8(%ebp),%eax
   12831:	8b 55 0c             	mov    0xc(%ebp),%edx
   12834:	89 10                	mov    %edx,(%eax)
   12836:	8b 45 08             	mov    0x8(%ebp),%eax
   12839:	8b 10                	mov    (%eax),%edx
   1283b:	8b 45 08             	mov    0x8(%ebp),%eax
   1283e:	89 50 04             	mov    %edx,0x4(%eax)
   12841:	eb 12                	jmp    12855 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12843:	8b 45 08             	mov    0x8(%ebp),%eax
   12846:	8b 00                	mov    (%eax),%eax
   12848:	8b 55 0c             	mov    0xc(%ebp),%edx
   1284b:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1284d:	8b 45 08             	mov    0x8(%ebp),%eax
   12850:	8b 55 0c             	mov    0xc(%ebp),%edx
   12853:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12855:	8b 45 08             	mov    0x8(%ebp),%eax
   12858:	8b 40 08             	mov    0x8(%eax),%eax
   1285b:	8d 50 01             	lea    0x1(%eax),%edx
   1285e:	8b 45 08             	mov    0x8(%ebp),%eax
   12861:	89 50 08             	mov    %edx,0x8(%eax)
}
   12864:	90                   	nop
   12865:	c9                   	leave  
   12866:	c3                   	ret    

00012867 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12867:	55                   	push   %ebp
   12868:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1286a:	8b 45 08             	mov    0x8(%ebp),%eax
   1286d:	8b 50 04             	mov    0x4(%eax),%edx
   12870:	8b 45 0c             	mov    0xc(%ebp),%eax
   12873:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12875:	8b 45 0c             	mov    0xc(%ebp),%eax
   12878:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   1287f:	ff 75 08             	pushl  0x8(%ebp)
   12882:	e8 4b ff ff ff       	call   127d2 <list_is_empty>
   12887:	83 c4 04             	add    $0x4,%esp
   1288a:	85 c0                	test   %eax,%eax
   1288c:	74 15                	je     128a3 <list_insert_back+0x3c>
        list->last = list->first = node;
   1288e:	8b 45 08             	mov    0x8(%ebp),%eax
   12891:	8b 55 0c             	mov    0xc(%ebp),%edx
   12894:	89 10                	mov    %edx,(%eax)
   12896:	8b 45 08             	mov    0x8(%ebp),%eax
   12899:	8b 10                	mov    (%eax),%edx
   1289b:	8b 45 08             	mov    0x8(%ebp),%eax
   1289e:	89 50 04             	mov    %edx,0x4(%eax)
   128a1:	eb 15                	jmp    128b8 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   128a3:	8b 45 08             	mov    0x8(%ebp),%eax
   128a6:	8b 40 04             	mov    0x4(%eax),%eax
   128a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   128ac:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   128af:	8b 45 08             	mov    0x8(%ebp),%eax
   128b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   128b5:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   128b8:	8b 45 08             	mov    0x8(%ebp),%eax
   128bb:	8b 40 08             	mov    0x8(%eax),%eax
   128be:	8d 50 01             	lea    0x1(%eax),%edx
   128c1:	8b 45 08             	mov    0x8(%ebp),%eax
   128c4:	89 50 08             	mov    %edx,0x8(%eax)
}
   128c7:	90                   	nop
   128c8:	c9                   	leave  
   128c9:	c3                   	ret    

000128ca <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   128ca:	55                   	push   %ebp
   128cb:	89 e5                	mov    %esp,%ebp
   128cd:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   128d0:	ff 75 08             	pushl  0x8(%ebp)
   128d3:	e8 fa fe ff ff       	call   127d2 <list_is_empty>
   128d8:	83 c4 04             	add    $0x4,%esp
   128db:	85 c0                	test   %eax,%eax
   128dd:	74 07                	je     128e6 <list_remove_front+0x1c>
        return (list_node_t*)0;
   128df:	b8 00 00 00 00       	mov    $0x0,%eax
   128e4:	eb 5b                	jmp    12941 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   128e6:	8b 45 08             	mov    0x8(%ebp),%eax
   128e9:	8b 00                	mov    (%eax),%eax
   128eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   128ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128f1:	8b 50 04             	mov    0x4(%eax),%edx
   128f4:	8b 45 08             	mov    0x8(%ebp),%eax
   128f7:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   128f9:	8b 45 08             	mov    0x8(%ebp),%eax
   128fc:	8b 00                	mov    (%eax),%eax
   128fe:	85 c0                	test   %eax,%eax
   12900:	75 0c                	jne    1290e <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12902:	8b 45 08             	mov    0x8(%ebp),%eax
   12905:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1290c:	eb 0c                	jmp    1291a <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   1290e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12911:	8b 40 04             	mov    0x4(%eax),%eax
   12914:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   1291a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1291d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12924:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12927:	8b 50 04             	mov    0x4(%eax),%edx
   1292a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1292d:	89 10                	mov    %edx,(%eax)
    list->count--;
   1292f:	8b 45 08             	mov    0x8(%ebp),%eax
   12932:	8b 40 08             	mov    0x8(%eax),%eax
   12935:	8d 50 ff             	lea    -0x1(%eax),%edx
   12938:	8b 45 08             	mov    0x8(%ebp),%eax
   1293b:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   1293e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12941:	c9                   	leave  
   12942:	c3                   	ret    

00012943 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12943:	55                   	push   %ebp
   12944:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12946:	8b 45 08             	mov    0x8(%ebp),%eax
   12949:	8b 00                	mov    (%eax),%eax
   1294b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1294e:	75 0b                	jne    1295b <list_remove+0x18>
        list->first = node->next;
   12950:	8b 45 0c             	mov    0xc(%ebp),%eax
   12953:	8b 50 04             	mov    0x4(%eax),%edx
   12956:	8b 45 08             	mov    0x8(%ebp),%eax
   12959:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   1295b:	8b 45 08             	mov    0x8(%ebp),%eax
   1295e:	8b 40 04             	mov    0x4(%eax),%eax
   12961:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12964:	75 0b                	jne    12971 <list_remove+0x2e>
        list->last = node->pre;
   12966:	8b 45 0c             	mov    0xc(%ebp),%eax
   12969:	8b 10                	mov    (%eax),%edx
   1296b:	8b 45 08             	mov    0x8(%ebp),%eax
   1296e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12971:	8b 45 0c             	mov    0xc(%ebp),%eax
   12974:	8b 00                	mov    (%eax),%eax
   12976:	85 c0                	test   %eax,%eax
   12978:	74 0e                	je     12988 <list_remove+0x45>
        node->pre->next = node->next;
   1297a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1297d:	8b 00                	mov    (%eax),%eax
   1297f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12982:	8b 52 04             	mov    0x4(%edx),%edx
   12985:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12988:	8b 45 0c             	mov    0xc(%ebp),%eax
   1298b:	8b 40 04             	mov    0x4(%eax),%eax
   1298e:	85 c0                	test   %eax,%eax
   12990:	74 0d                	je     1299f <list_remove+0x5c>
        node->next->pre = node->pre;
   12992:	8b 45 0c             	mov    0xc(%ebp),%eax
   12995:	8b 40 04             	mov    0x4(%eax),%eax
   12998:	8b 55 0c             	mov    0xc(%ebp),%edx
   1299b:	8b 12                	mov    (%edx),%edx
   1299d:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   1299f:	8b 45 0c             	mov    0xc(%ebp),%eax
   129a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   129a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   129ac:	8b 50 04             	mov    0x4(%eax),%edx
   129af:	8b 45 0c             	mov    0xc(%ebp),%eax
   129b2:	89 10                	mov    %edx,(%eax)
    --list->count;
   129b4:	8b 45 08             	mov    0x8(%ebp),%eax
   129b7:	8b 40 08             	mov    0x8(%eax),%eax
   129ba:	8d 50 ff             	lea    -0x1(%eax),%edx
   129bd:	8b 45 08             	mov    0x8(%ebp),%eax
   129c0:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   129c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   129c6:	5d                   	pop    %ebp
   129c7:	c3                   	ret    

000129c8 <inb>:
static inline uint8_t inb(uint16_t port) {
   129c8:	55                   	push   %ebp
   129c9:	89 e5                	mov    %esp,%ebp
   129cb:	83 ec 14             	sub    $0x14,%esp
   129ce:	8b 45 08             	mov    0x8(%ebp),%eax
   129d1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   129d5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   129d9:	89 c2                	mov    %eax,%edx
   129db:	ec                   	in     (%dx),%al
   129dc:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   129df:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   129e3:	c9                   	leave  
   129e4:	c3                   	ret    

000129e5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   129e5:	55                   	push   %ebp
   129e6:	89 e5                	mov    %esp,%ebp
   129e8:	83 ec 08             	sub    $0x8,%esp
   129eb:	8b 55 08             	mov    0x8(%ebp),%edx
   129ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   129f5:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   129f8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   129fc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12a00:	ee                   	out    %al,(%dx)
}
   12a01:	90                   	nop
   12a02:	c9                   	leave  
   12a03:	c3                   	ret    

00012a04 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12a04:	55                   	push   %ebp
   12a05:	89 e5                	mov    %esp,%ebp
   12a07:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   12a0a:	83 ec 08             	sub    $0x8,%esp
   12a0d:	68 9c 31 01 00       	push   $0x1319c
   12a12:	68 e0 8e 01 00       	push   $0x18ee0
   12a17:	e8 41 f3 ff ff       	call   11d5d <mutex_init>
   12a1c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12a1f:	83 ec 08             	sub    $0x8,%esp
   12a22:	6a 00                	push   $0x0
   12a24:	68 f9 03 00 00       	push   $0x3f9
   12a29:	e8 b7 ff ff ff       	call   129e5 <outb>
   12a2e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12a31:	83 ec 08             	sub    $0x8,%esp
   12a34:	68 80 00 00 00       	push   $0x80
   12a39:	68 fb 03 00 00       	push   $0x3fb
   12a3e:	e8 a2 ff ff ff       	call   129e5 <outb>
   12a43:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12a46:	83 ec 08             	sub    $0x8,%esp
   12a49:	6a 03                	push   $0x3
   12a4b:	68 f8 03 00 00       	push   $0x3f8
   12a50:	e8 90 ff ff ff       	call   129e5 <outb>
   12a55:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12a58:	83 ec 08             	sub    $0x8,%esp
   12a5b:	6a 00                	push   $0x0
   12a5d:	68 f9 03 00 00       	push   $0x3f9
   12a62:	e8 7e ff ff ff       	call   129e5 <outb>
   12a67:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12a6a:	83 ec 08             	sub    $0x8,%esp
   12a6d:	6a 03                	push   $0x3
   12a6f:	68 fb 03 00 00       	push   $0x3fb
   12a74:	e8 6c ff ff ff       	call   129e5 <outb>
   12a79:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12a7c:	83 ec 08             	sub    $0x8,%esp
   12a7f:	68 c7 00 00 00       	push   $0xc7
   12a84:	68 fa 03 00 00       	push   $0x3fa
   12a89:	e8 57 ff ff ff       	call   129e5 <outb>
   12a8e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12a91:	83 ec 08             	sub    $0x8,%esp
   12a94:	6a 0f                	push   $0xf
   12a96:	68 fc 03 00 00       	push   $0x3fc
   12a9b:	e8 45 ff ff ff       	call   129e5 <outb>
   12aa0:	83 c4 10             	add    $0x10,%esp
}
   12aa3:	90                   	nop
   12aa4:	c9                   	leave  
   12aa5:	c3                   	ret    

00012aa6 <log_printf>:


void log_printf(const char* fmt, ...) {
   12aa6:	55                   	push   %ebp
   12aa7:	89 e5                	mov    %esp,%ebp
   12aa9:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12aaf:	83 ec 04             	sub    $0x4,%esp
   12ab2:	68 80 00 00 00       	push   $0x80
   12ab7:	6a 00                	push   $0x0
   12ab9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12abf:	50                   	push   %eax
   12ac0:	e8 72 f9 ff ff       	call   12437 <kmemset>
   12ac5:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12ac8:	8d 45 0c             	lea    0xc(%ebp),%eax
   12acb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12ad1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12ad7:	83 ec 04             	sub    $0x4,%esp
   12ada:	50                   	push   %eax
   12adb:	ff 75 08             	pushl  0x8(%ebp)
   12ade:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12ae4:	50                   	push   %eax
   12ae5:	e8 4f fb ff ff       	call   12639 <kvsprintf>
   12aea:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   12aed:	83 ec 0c             	sub    $0xc,%esp
   12af0:	68 e0 8e 01 00       	push   $0x18ee0
   12af5:	e8 a4 f2 ff ff       	call   11d9e <mutex_acquire>
   12afa:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   12afd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12b03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12b06:	eb 3b                	jmp    12b43 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12b08:	90                   	nop
   12b09:	83 ec 0c             	sub    $0xc,%esp
   12b0c:	68 fd 03 00 00       	push   $0x3fd
   12b11:	e8 b2 fe ff ff       	call   129c8 <inb>
   12b16:	83 c4 10             	add    $0x10,%esp
   12b19:	0f b6 c0             	movzbl %al,%eax
   12b1c:	83 e0 40             	and    $0x40,%eax
   12b1f:	85 c0                	test   %eax,%eax
   12b21:	74 e6                	je     12b09 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b26:	8d 50 01             	lea    0x1(%eax),%edx
   12b29:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12b2c:	0f b6 00             	movzbl (%eax),%eax
   12b2f:	0f b6 c0             	movzbl %al,%eax
   12b32:	83 ec 08             	sub    $0x8,%esp
   12b35:	50                   	push   %eax
   12b36:	68 f8 03 00 00       	push   $0x3f8
   12b3b:	e8 a5 fe ff ff       	call   129e5 <outb>
   12b40:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b46:	0f b6 00             	movzbl (%eax),%eax
   12b49:	84 c0                	test   %al,%al
   12b4b:	75 bb                	jne    12b08 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   12b4d:	83 ec 08             	sub    $0x8,%esp
   12b50:	6a 0d                	push   $0xd
   12b52:	68 f8 03 00 00       	push   $0x3f8
   12b57:	e8 89 fe ff ff       	call   129e5 <outb>
   12b5c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12b5f:	83 ec 08             	sub    $0x8,%esp
   12b62:	6a 0a                	push   $0xa
   12b64:	68 f8 03 00 00       	push   $0x3f8
   12b69:	e8 77 fe ff ff       	call   129e5 <outb>
   12b6e:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   12b71:	83 ec 0c             	sub    $0xc,%esp
   12b74:	68 e0 8e 01 00       	push   $0x18ee0
   12b79:	e8 ae f2 ff ff       	call   11e2c <mutex_release>
   12b7e:	83 c4 10             	add    $0x10,%esp
   12b81:	90                   	nop
   12b82:	c9                   	leave  
   12b83:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 00 00 00 00       	jmp    80000012 <first_task_main>

80000012 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"

int first_task_main(void) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        log_printf("first task.");
80000018:	83 ec 0c             	sub    $0xc,%esp
8000001b:	68 3a 00 00 80       	push   $0x8000003a
80000020:	e8 81 2a 01 80       	call   12aa6 <log_printf>
80000025:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000028:	83 ec 0c             	sub    $0xc,%esp
8000002b:	68 e8 03 00 00       	push   $0x3e8
80000030:	e8 11 0f 01 80       	call   10f46 <sys_sleep>
80000035:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000038:	eb de                	jmp    80000018 <first_task_main+0x6>
8000003a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000040:	74 61                	je     800000a3 <first_task_main+0x91>
80000042:	73 6b                	jae    800000af <first_task_main+0x9d>
80000044:	2e                   	cs
	...
