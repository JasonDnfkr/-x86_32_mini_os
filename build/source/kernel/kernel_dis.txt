
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003b8c memsz 0x00003b8c flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x0000f0c0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x000230c0 align 2**12
         filesz 0x000000c0 memsz 0x000000c0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031d3  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000009b8  000131d4  000131d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000e0c0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   000000c0  80000000  000230c0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001fa1  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d9b  00000000  00000000  00008061  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c4  00000000  00000000  0000cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001359  00000000  00000000  0000e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000f819  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000014e0  00000000  00000000  0000f82c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000131d4 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102f5 l     F .text	00000017 up2
0001030c l     F .text	0000000d down2
00010319 l     F .text	0000000c write_cr3
00010325 l     F .text	00000014 pde_index
00010339 l     F .text	00000027 pde_paddr
00010360 l     F .text	00000010 pte_index
00010370 l     F .text	00000027 pte_paddr
00010397 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
000103a8 l     F .text	0000005d addr_alloc_init
00010405 l     F .text	00000067 addr_alloc_page
0001046c l     F .text	00000062 addr_free_page
000104ce l     F .text	00000066 show_mem_info
00010534 l     F .text	0000003c total_mem_size
00010570 l     F .text	000000a0 test_alloc
0001332c l     O .rodata	00000012 __func__.2216
00014000 l     O .data	00000040 kernel_map.2228
00013340 l     O .rodata	0000000c __func__.2258
00010a70 l     F .text	00000010 curr_page_dir
0001334c l     O .rodata	00000011 __func__.2290
00010b39 l     F .text	0000001a kalloc
00010b53 l     F .text	0000001e kfree
00000000 l    df *ABS*	00000000 syscall.c
00013360 l     O .rodata	00000008 sys_table
00000000 l    df *ABS*	00000000 task.c
00010c06 l     F .text	00000019 list_node_init
00010c1f l     F .text	0000000b list_node_next
00010c2a l     F .text	0000000b list_size
00010c35 l     F .text	0000000a list_first
00010c3f l     F .text	0000000c write_cr3
00010c4b l     F .text	00000007 hlt
00010c52 l     F .text	00000017 write_tr
00010c69 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	000001a0 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010c7a l     F .text	00000188 tss_init
00013424 l     O .rodata	0000000a __func__.2254
00010f1a l     F .text	0000000a idle_task_entry
00013430 l     O .rodata	00000010 __func__.2280
00000000 l    df *ABS*	00000000 cpu.c
000113b5 l     F .text	00000028 lgdt
000113dd l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
0001162e l     F .text	0000001d inb
0001164b l     F .text	0000001f outb
0001166a l     F .text	00000007 cli
00011671 l     F .text	00000007 sti
00011678 l     F .text	00000028 lidt
000116a0 l     F .text	00000011 read_cr2
000116b1 l     F .text	00000007 hlt
000116b8 l     F .text	00000010 read_eflags
000116c8 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
000116d3 l     F .text	000000f0 dump_core_regs
000117c3 l     F .text	0000003e do_default_handler
00011b9e l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011fa2 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011fe9 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012061 l     F .text	0000000b list_size
0001206c l     F .text	0000000a list_first
00012076 l     F .text	0000000b list_last
00013b18 l     O .rodata	0000000c __func__.2204
00018e20 l     O .bss	000000b8 first_task
00013b24 l     O .rodata	00000013 __func__.2237
000122d5 l     F .text	00000036 test_task1
0001230b l     F .text	00000036 test_task2
00018ee0 l     O .bss	000000b8 task1
00018fa0 l     O .bss	000000b8 task2
00019060 l     O .bss	00004000 stack1
0001d060 l     O .bss	00004000 stack2
00000000 l    df *ABS*	00000000 mutex.c
000123a1 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
0001253b l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000128c4 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012e21 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00013017 l     F .text	0000001d inb
00013034 l     F .text	0000001f outb
00021060 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000012 l     F .first_task	0000004c syscall
8000005e l     F .first_task	0000002a msleep
80000088 l     F .first_task	0000001b getpid
00011b82 g     F .text	0000001c do_handler_control_protection_exception
000127bc g     F .text	0000003a bitmap_get_bit
00011158 g     F .text	0000000a task_current
00011839 g     F .text	0000001c do_handler_debug_exception
00011b66 g     F .text	0000001c do_handler_virtualization_exception
00011f43 g     F .text	0000000b irq_enable_global
00011935 g     F .text	0000001c do_handler_segment_not_present
000110b6 g     F .text	00000034 task_set_ready
00012912 g     F .text	00000070 kstrncpy
000127f6 g     F .text	0000001b bitmap_is_set
000120d5 g     F .text	0000019c link_test
00011855 g     F .text	0000001c do_handler_nmi_interrupt
00010b71 g     F .text	00000095 do_handler_syscall
00011549 g     F .text	00000023 cpu_init
00013053 g     F .text	000000a2 log_init
00012341 g     F .text	00000060 init_main
00012a86 g     F .text	00000041 kmemset
000115f5 g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
00011e26 g     F .text	0000008b irq_enable
00010026 g       .text	00000000 exception_handler_unknown
000100a2 g       .text	00000000 exception_handler_breakpoint
00012982 g     F .text	0000003b kstrlen
0001188d g     F .text	0000001c do_handler_overflow
000106c0 g     F .text	00000087 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
0001196d g     F .text	000000b5 do_handler_general_protection
00012656 g     F .text	00000029 sem_count
800000a3 g     F .first_task	0000001d first_task_main
000118a9 g     F .text	0000001c do_handler_bound_range_exceed
000126e8 g     F .text	000000d4 bitmap_set_bit
000118fd g     F .text	0000001c do_handler_double_fault
00011a22 g     F .text	000000d4 do_handler_page_fault
00010267 g       .text	00000000 exception_handler_virtualization_exception
0001013d g       .text	00000000 exception_handler_double_fault
00011f4e g     F .text	0000002b pic_send_eoi
000110ac g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00010817 g     F .text	00000085 memory_create_uvm
00012569 g     F .text	0000006b sem_wait
00010a4e g     F .text	00000022 memory_alloc_page_for
00011fc1 g     F .text	00000028 do_handler_timer
00010194 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c1 g       .text	00000000 exception_handler_overflow
000102c2 g       .text	00000000 simple_switch
00012e57 g     F .text	0000005f list_insert_front
000210c0 g     O .bss	00002000 stack
00011348 g     F .text	00000057 sys_sleep
00012c88 g     F .text	00000163 kvsprintf
00010aa0 g     F .text	00000099 memory_free_page
000230c0 g       *ABS*	00000000 s_first_task
00010980 g     F .text	000000ce memory_alloc_for_page_dir
000125d4 g     F .text	00000082 sem_notify
000118c5 g     F .text	0000001c do_handler_invalid_opcode
0001015a g       .text	00000000 exception_handler_invalid_tss
00012049 g     F .text	00000018 timer_init
00010fe1 g     F .text	000000cb task_first_init
00011b2e g     F .text	0000001c do_handler_machine_check
000118e1 g     F .text	0000001c do_handler_device_not_found
00011328 g     F .text	00000020 task_set_wakeup
00012eb6 g     F .text	00000063 list_insert_back
00011f38 g     F .text	0000000b irq_disable_global
00011162 g     F .text	00000061 sys_sched_yield
00023180 g       *ABS*	00000000 mem_free_start
00012081 g     F .text	00000054 kernel_init
00012546 g     F .text	00000023 sem_init
00012c64 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
000110ea g     F .text	0000002b task_set_blocked
000100ff g       .text	00000000 exception_handler_invalid_opcode
000230c0 g       .bss	00000000 e_data
00012b25 g     F .text	0000013f kitoa
000128cb g     F .text	00000047 kstrcpy
000129bd g     F .text	0000007a kstrncmp
00011b12 g     F .text	0000001c do_handler_aligment_check
00012ac7 g     F .text	0000005e kmemcmp
000101ed g       .text	00000000 exception_handler_floating_point_error
00010229 g       .text	00000000 exception_handler_machine_check
00011919 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00023180 g       *ABS*	00000000 e_first_task
000112f7 g     F .text	00000031 task_set_sleep
000102a3 g       .text	00000000 exception_handler_timer
00011df1 g     F .text	00000035 irq_install
000114c1 g     F .text	00000088 init_gdt
00011f79 g     F .text	00000018 irq_enter_protection
000123ac g     F .text	00000041 mutex_init
00011eb1 g     F .text	00000087 irq_disable
00010045 g       .text	00000000 exception_handler_divide_error
0001181d g     F .text	0000001c do_handler_divide_error
0001267f g     F .text	00000016 bitmap_byte_count
000111c3 g     F .text	0000005b task_dispatch
00012271 g     F .text	00000064 move_to_first_task
00011115 g     F .text	00000043 task_next_run
00010747 g     F .text	000000d0 create_kernel_table
00012e34 g     F .text	00000023 list_init
000101d0 g       .text	00000000 exception_handler_page_fault
00011801 g     F .text	0000001c do_handler_unknown
00010a80 g     F .text	00000020 memory_alloc_page
00010efc g     F .text	0000001e task_switch_from_to
00011c31 g     F .text	000001c0 irq_init
00011f91 g     F .text	00000011 irq_leave_protection
00010083 g       .text	00000000 exception_handler_nmi_interrupt
000113f7 g     F .text	00000083 segment_desc_set
000102d7 g       .text	00000000 exception_handler_syscall
00013b8c g       .rodata	00000000 e_text
0001020c g       .text	00000000 exception_handler_aligment_check
00010286 g       .text	00000000 exception_handler_control_protection_exception
00012695 g     F .text	00000053 bitmap_init
00011b4a g     F .text	0000001c do_handler_simd_floating_point_exception
00012a37 g     F .text	0000004f kmemcpy
00010177 g       .text	00000000 exception_handler_segment_not_present
00012811 g     F .text	000000b3 bitmap_alloc_nbits
00010f24 g     F .text	000000bd task_manager_init
000100e0 g       .text	00000000 exception_handler_bound_range_exceed
0001121e g     F .text	000000d9 task_time_tick
0001089c g     F .text	000000e4 memory_init
0001011e g       .text	00000000 exception_handler_device_not_found
00012deb g     F .text	00000036 pannic
00011951 g     F .text	0000001c do_handler_stack_segment_fault
00011871 g     F .text	0000001c do_handler_breakpoint
00010064 g       .text	00000000 exception_handler_debug_exception
00011af6 g     F .text	0000001c do_handler_floating_point_error
000130f5 g     F .text	000000de log_printf
00010e02 g     F .text	000000fa task_init
00012f19 g     F .text	00000079 list_remove_front
0001139f g     F .text	00000016 sys_getpid
00011580 g     F .text	00000075 gdt_alloc_desc
0001247b g     F .text	000000c0 mutex_release
00012f92 g     F .text	00000085 list_remove
0001156c g     F .text	00000014 swtch_to_tss
0001147a g     F .text	00000047 gate_desc_set
000123ed g     F .text	0000008e mutex_acquire
00010248 g       .text	00000000 exception_handler_simd_floating_point_exception
00010610 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 75 20 00 00       	call   12081 <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    # 这里改了栈指针的位置，不再是7c00了
    # mov $(stack + KERNEL_STACK_SIZE), %esp
    jmp init_main
   10021:	e9 1b 23 00 00       	jmp    12341 <init_main>

00010026 <exception_handler_unknown>:
    add $(2 * 4), %esp # 跳过压入的异常号和错误码

    iret
.endm

exception_handler unknown,                      -1, 0
   10026:	6a 00                	push   $0x0
   10028:	6a ff                	push   $0xffffffff
   1002a:	60                   	pusha  
   1002b:	1e                   	push   %ds
   1002c:	06                   	push   %es
   1002d:	0f a0                	push   %fs
   1002f:	0f a8                	push   %gs
   10031:	54                   	push   %esp
   10032:	e8 ca 17 00 00       	call   11801 <do_handler_unknown>
   10037:	83 c4 04             	add    $0x4,%esp
   1003a:	0f a9                	pop    %gs
   1003c:	0f a1                	pop    %fs
   1003e:	07                   	pop    %es
   1003f:	1f                   	pop    %ds
   10040:	61                   	popa   
   10041:	83 c4 08             	add    $0x8,%esp
   10044:	cf                   	iret   

00010045 <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   10045:	6a 00                	push   $0x0
   10047:	6a 00                	push   $0x0
   10049:	60                   	pusha  
   1004a:	1e                   	push   %ds
   1004b:	06                   	push   %es
   1004c:	0f a0                	push   %fs
   1004e:	0f a8                	push   %gs
   10050:	54                   	push   %esp
   10051:	e8 c7 17 00 00       	call   1181d <do_handler_divide_error>
   10056:	83 c4 04             	add    $0x4,%esp
   10059:	0f a9                	pop    %gs
   1005b:	0f a1                	pop    %fs
   1005d:	07                   	pop    %es
   1005e:	1f                   	pop    %ds
   1005f:	61                   	popa   
   10060:	83 c4 08             	add    $0x8,%esp
   10063:	cf                   	iret   

00010064 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10064:	6a 00                	push   $0x0
   10066:	6a 01                	push   $0x1
   10068:	60                   	pusha  
   10069:	1e                   	push   %ds
   1006a:	06                   	push   %es
   1006b:	0f a0                	push   %fs
   1006d:	0f a8                	push   %gs
   1006f:	54                   	push   %esp
   10070:	e8 c4 17 00 00       	call   11839 <do_handler_debug_exception>
   10075:	83 c4 04             	add    $0x4,%esp
   10078:	0f a9                	pop    %gs
   1007a:	0f a1                	pop    %fs
   1007c:	07                   	pop    %es
   1007d:	1f                   	pop    %ds
   1007e:	61                   	popa   
   1007f:	83 c4 08             	add    $0x8,%esp
   10082:	cf                   	iret   

00010083 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10083:	6a 00                	push   $0x0
   10085:	6a 02                	push   $0x2
   10087:	60                   	pusha  
   10088:	1e                   	push   %ds
   10089:	06                   	push   %es
   1008a:	0f a0                	push   %fs
   1008c:	0f a8                	push   %gs
   1008e:	54                   	push   %esp
   1008f:	e8 c1 17 00 00       	call   11855 <do_handler_nmi_interrupt>
   10094:	83 c4 04             	add    $0x4,%esp
   10097:	0f a9                	pop    %gs
   10099:	0f a1                	pop    %fs
   1009b:	07                   	pop    %es
   1009c:	1f                   	pop    %ds
   1009d:	61                   	popa   
   1009e:	83 c4 08             	add    $0x8,%esp
   100a1:	cf                   	iret   

000100a2 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a2:	6a 00                	push   $0x0
   100a4:	6a 03                	push   $0x3
   100a6:	60                   	pusha  
   100a7:	1e                   	push   %ds
   100a8:	06                   	push   %es
   100a9:	0f a0                	push   %fs
   100ab:	0f a8                	push   %gs
   100ad:	54                   	push   %esp
   100ae:	e8 be 17 00 00       	call   11871 <do_handler_breakpoint>
   100b3:	83 c4 04             	add    $0x4,%esp
   100b6:	0f a9                	pop    %gs
   100b8:	0f a1                	pop    %fs
   100ba:	07                   	pop    %es
   100bb:	1f                   	pop    %ds
   100bc:	61                   	popa   
   100bd:	83 c4 08             	add    $0x8,%esp
   100c0:	cf                   	iret   

000100c1 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c1:	6a 00                	push   $0x0
   100c3:	6a 04                	push   $0x4
   100c5:	60                   	pusha  
   100c6:	1e                   	push   %ds
   100c7:	06                   	push   %es
   100c8:	0f a0                	push   %fs
   100ca:	0f a8                	push   %gs
   100cc:	54                   	push   %esp
   100cd:	e8 bb 17 00 00       	call   1188d <do_handler_overflow>
   100d2:	83 c4 04             	add    $0x4,%esp
   100d5:	0f a9                	pop    %gs
   100d7:	0f a1                	pop    %fs
   100d9:	07                   	pop    %es
   100da:	1f                   	pop    %ds
   100db:	61                   	popa   
   100dc:	83 c4 08             	add    $0x8,%esp
   100df:	cf                   	iret   

000100e0 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e0:	6a 00                	push   $0x0
   100e2:	6a 05                	push   $0x5
   100e4:	60                   	pusha  
   100e5:	1e                   	push   %ds
   100e6:	06                   	push   %es
   100e7:	0f a0                	push   %fs
   100e9:	0f a8                	push   %gs
   100eb:	54                   	push   %esp
   100ec:	e8 b8 17 00 00       	call   118a9 <do_handler_bound_range_exceed>
   100f1:	83 c4 04             	add    $0x4,%esp
   100f4:	0f a9                	pop    %gs
   100f6:	0f a1                	pop    %fs
   100f8:	07                   	pop    %es
   100f9:	1f                   	pop    %ds
   100fa:	61                   	popa   
   100fb:	83 c4 08             	add    $0x8,%esp
   100fe:	cf                   	iret   

000100ff <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   100ff:	6a 00                	push   $0x0
   10101:	6a 06                	push   $0x6
   10103:	60                   	pusha  
   10104:	1e                   	push   %ds
   10105:	06                   	push   %es
   10106:	0f a0                	push   %fs
   10108:	0f a8                	push   %gs
   1010a:	54                   	push   %esp
   1010b:	e8 b5 17 00 00       	call   118c5 <do_handler_invalid_opcode>
   10110:	83 c4 04             	add    $0x4,%esp
   10113:	0f a9                	pop    %gs
   10115:	0f a1                	pop    %fs
   10117:	07                   	pop    %es
   10118:	1f                   	pop    %ds
   10119:	61                   	popa   
   1011a:	83 c4 08             	add    $0x8,%esp
   1011d:	cf                   	iret   

0001011e <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   1011e:	6a 00                	push   $0x0
   10120:	6a 07                	push   $0x7
   10122:	60                   	pusha  
   10123:	1e                   	push   %ds
   10124:	06                   	push   %es
   10125:	0f a0                	push   %fs
   10127:	0f a8                	push   %gs
   10129:	54                   	push   %esp
   1012a:	e8 b2 17 00 00       	call   118e1 <do_handler_device_not_found>
   1012f:	83 c4 04             	add    $0x4,%esp
   10132:	0f a9                	pop    %gs
   10134:	0f a1                	pop    %fs
   10136:	07                   	pop    %es
   10137:	1f                   	pop    %ds
   10138:	61                   	popa   
   10139:	83 c4 08             	add    $0x8,%esp
   1013c:	cf                   	iret   

0001013d <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   1013d:	6a 08                	push   $0x8
   1013f:	60                   	pusha  
   10140:	1e                   	push   %ds
   10141:	06                   	push   %es
   10142:	0f a0                	push   %fs
   10144:	0f a8                	push   %gs
   10146:	54                   	push   %esp
   10147:	e8 b1 17 00 00       	call   118fd <do_handler_double_fault>
   1014c:	83 c4 04             	add    $0x4,%esp
   1014f:	0f a9                	pop    %gs
   10151:	0f a1                	pop    %fs
   10153:	07                   	pop    %es
   10154:	1f                   	pop    %ds
   10155:	61                   	popa   
   10156:	83 c4 08             	add    $0x8,%esp
   10159:	cf                   	iret   

0001015a <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015a:	6a 0a                	push   $0xa
   1015c:	60                   	pusha  
   1015d:	1e                   	push   %ds
   1015e:	06                   	push   %es
   1015f:	0f a0                	push   %fs
   10161:	0f a8                	push   %gs
   10163:	54                   	push   %esp
   10164:	e8 b0 17 00 00       	call   11919 <do_handler_invalid_tss>
   10169:	83 c4 04             	add    $0x4,%esp
   1016c:	0f a9                	pop    %gs
   1016e:	0f a1                	pop    %fs
   10170:	07                   	pop    %es
   10171:	1f                   	pop    %ds
   10172:	61                   	popa   
   10173:	83 c4 08             	add    $0x8,%esp
   10176:	cf                   	iret   

00010177 <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   10177:	6a 0b                	push   $0xb
   10179:	60                   	pusha  
   1017a:	1e                   	push   %ds
   1017b:	06                   	push   %es
   1017c:	0f a0                	push   %fs
   1017e:	0f a8                	push   %gs
   10180:	54                   	push   %esp
   10181:	e8 af 17 00 00       	call   11935 <do_handler_segment_not_present>
   10186:	83 c4 04             	add    $0x4,%esp
   10189:	0f a9                	pop    %gs
   1018b:	0f a1                	pop    %fs
   1018d:	07                   	pop    %es
   1018e:	1f                   	pop    %ds
   1018f:	61                   	popa   
   10190:	83 c4 08             	add    $0x8,%esp
   10193:	cf                   	iret   

00010194 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10194:	6a 00                	push   $0x0
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 ac 17 00 00       	call   11951 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 ab 17 00 00       	call   1196d <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 43 18 00 00       	call   11a22 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 f8 18 00 00       	call   11af6 <do_handler_floating_point_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 f7 18 00 00       	call   11b12 <do_handler_aligment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 f4 18 00 00       	call   11b2e <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 f1 18 00 00       	call   11b4a <do_handler_simd_floating_point_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 ee 18 00 00       	call   11b66 <do_handler_virtualization_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   10286:	6a 15                	push   $0x15
   10288:	60                   	pusha  
   10289:	1e                   	push   %ds
   1028a:	06                   	push   %es
   1028b:	0f a0                	push   %fs
   1028d:	0f a8                	push   %gs
   1028f:	54                   	push   %esp
   10290:	e8 ed 18 00 00       	call   11b82 <do_handler_control_protection_exception>
   10295:	83 c4 04             	add    $0x4,%esp
   10298:	0f a9                	pop    %gs
   1029a:	0f a1                	pop    %fs
   1029c:	07                   	pop    %es
   1029d:	1f                   	pop    %ds
   1029e:	61                   	popa   
   1029f:	83 c4 08             	add    $0x8,%esp
   102a2:	cf                   	iret   

000102a3 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a3:	6a 00                	push   $0x0
   102a5:	6a 20                	push   $0x20
   102a7:	60                   	pusha  
   102a8:	1e                   	push   %ds
   102a9:	06                   	push   %es
   102aa:	0f a0                	push   %fs
   102ac:	0f a8                	push   %gs
   102ae:	54                   	push   %esp
   102af:	e8 0d 1d 00 00       	call   11fc1 <do_handler_timer>
   102b4:	83 c4 04             	add    $0x4,%esp
   102b7:	0f a9                	pop    %gs
   102b9:	0f a1                	pop    %fs
   102bb:	07                   	pop    %es
   102bc:	1f                   	pop    %ds
   102bd:	61                   	popa   
   102be:	83 c4 08             	add    $0x8,%esp
   102c1:	cf                   	iret   

000102c2 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c2:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102c6:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ca:	55                   	push   %ebp
    push %ebx
   102cb:	53                   	push   %ebx
    push %esi
   102cc:	56                   	push   %esi
    push %edi
   102cd:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102ce:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d0:	89 d4                	mov    %edx,%esp

    pop %edi
   102d2:	5f                   	pop    %edi
    pop %esi
   102d3:	5e                   	pop    %esi
    pop %ebx
   102d4:	5b                   	pop    %ebx
    pop %ebp
   102d5:	5d                   	pop    %ebp

    ret
   102d6:	c3                   	ret    

000102d7 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    pusha # 该指令会保存一系列指定的寄存器
   102d7:	60                   	pusha  

    push %ds
   102d8:	1e                   	push   %ds
    push %es
   102d9:	06                   	push   %es
    push %fs
   102da:	0f a0                	push   %fs
    push %gs
   102dc:	0f a8                	push   %gs

    pushf # push %eflags
   102de:	9c                   	pushf  

    mov %esp, %eax  # 将这里作为结构体入口地址参数
   102df:	89 e0                	mov    %esp,%eax
    push %eax
   102e1:	50                   	push   %eax

    call do_handler_syscall
   102e2:	e8 8a 08 00 00       	call   10b71 <do_handler_syscall>

    add $4, %esp    # esp 向上调整，跳过结构体地址参数
   102e7:	83 c4 04             	add    $0x4,%esp

    popf  # pop %eflags
   102ea:	9d                   	popf   
    pop %gs
   102eb:	0f a9                	pop    %gs
    pop %fs
   102ed:	0f a1                	pop    %fs
    pop %es
   102ef:	07                   	pop    %es
    pop %ds
   102f0:	1f                   	pop    %ds
    popa
   102f1:	61                   	popa   

    retf $(5 * 4)
   102f2:	ca 14 00             	lret   $0x14

000102f5 <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102f5:	55                   	push   %ebp
   102f6:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f8:	8b 55 08             	mov    0x8(%ebp),%edx
   102fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fe:	01 d0                	add    %edx,%eax
   10300:	8d 50 ff             	lea    -0x1(%eax),%edx
   10303:	8b 45 0c             	mov    0xc(%ebp),%eax
   10306:	f7 d8                	neg    %eax
   10308:	21 d0                	and    %edx,%eax
}
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1030f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10312:	f7 d8                	neg    %eax
   10314:	23 45 08             	and    0x8(%ebp),%eax
}
   10317:	5d                   	pop    %ebp
   10318:	c3                   	ret    

00010319 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10319:	55                   	push   %ebp
   1031a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1031c:	8b 45 08             	mov    0x8(%ebp),%eax
   1031f:	0f 22 d8             	mov    %eax,%cr3
}
   10322:	90                   	nop
   10323:	5d                   	pop    %ebp
   10324:	c3                   	ret    

00010325 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10325:	55                   	push   %ebp
   10326:	89 e5                	mov    %esp,%ebp
   10328:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   1032b:	8b 45 08             	mov    0x8(%ebp),%eax
   1032e:	c1 e8 16             	shr    $0x16,%eax
   10331:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10334:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10337:	c9                   	leave  
   10338:	c3                   	ret    

00010339 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10343:	c0 ea 04             	shr    $0x4,%dl
   10346:	0f b6 d2             	movzbl %dl,%edx
   10349:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1034d:	c1 e1 04             	shl    $0x4,%ecx
   10350:	09 ca                	or     %ecx,%edx
   10352:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10356:	c1 e0 0c             	shl    $0xc,%eax
   10359:	09 d0                	or     %edx,%eax
   1035b:	c1 e0 0c             	shl    $0xc,%eax
}
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10363:	8b 45 08             	mov    0x8(%ebp),%eax
   10366:	c1 e8 0c             	shr    $0xc,%eax
   10369:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1036e:	5d                   	pop    %ebp
   1036f:	c3                   	ret    

00010370 <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   10370:	55                   	push   %ebp
   10371:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10373:	8b 45 08             	mov    0x8(%ebp),%eax
   10376:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1037a:	c0 ea 04             	shr    $0x4,%dl
   1037d:	0f b6 d2             	movzbl %dl,%edx
   10380:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10384:	c1 e1 04             	shl    $0x4,%ecx
   10387:	09 ca                	or     %ecx,%edx
   10389:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1038d:	c1 e0 0c             	shl    $0xc,%eax
   10390:	09 d0                	or     %edx,%eax
   10392:	c1 e0 0c             	shl    $0xc,%eax
}
   10395:	5d                   	pop    %ebp
   10396:	c3                   	ret    

00010397 <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   10397:	55                   	push   %ebp
   10398:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1039a:	ff 75 08             	pushl  0x8(%ebp)
   1039d:	e8 77 ff ff ff       	call   10319 <write_cr3>
   103a2:	83 c4 04             	add    $0x4,%esp
}
   103a5:	90                   	nop
   103a6:	c9                   	leave  
   103a7:	c3                   	ret    

000103a8 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   103a8:	55                   	push   %ebp
   103a9:	89 e5                	mov    %esp,%ebp
   103ab:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	83 ec 08             	sub    $0x8,%esp
   103b4:	68 d4 31 01 00       	push   $0x131d4
   103b9:	50                   	push   %eax
   103ba:	e8 ed 1f 00 00       	call   123ac <mutex_init>
   103bf:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103c2:	8b 45 08             	mov    0x8(%ebp),%eax
   103c5:	8b 55 10             	mov    0x10(%ebp),%edx
   103c8:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	8b 55 14             	mov    0x14(%ebp),%edx
   103d1:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103d4:	8b 45 08             	mov    0x8(%ebp),%eax
   103d7:	8b 55 18             	mov    0x18(%ebp),%edx
   103da:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103dd:	8b 45 08             	mov    0x8(%ebp),%eax
   103e0:	8b 40 60             	mov    0x60(%eax),%eax
   103e3:	ba 00 00 00 00       	mov    $0x0,%edx
   103e8:	f7 75 18             	divl   0x18(%ebp)
   103eb:	89 c2                	mov    %eax,%edx
   103ed:	8b 45 08             	mov    0x8(%ebp),%eax
   103f0:	83 c0 54             	add    $0x54,%eax
   103f3:	6a 00                	push   $0x0
   103f5:	52                   	push   %edx
   103f6:	ff 75 0c             	pushl  0xc(%ebp)
   103f9:	50                   	push   %eax
   103fa:	e8 96 22 00 00       	call   12695 <bitmap_init>
   103ff:	83 c4 10             	add    $0x10,%esp
}
   10402:	90                   	nop
   10403:	c9                   	leave  
   10404:	c3                   	ret    

00010405 <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   10405:	55                   	push   %ebp
   10406:	89 e5                	mov    %esp,%ebp
   10408:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   1040b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	83 ec 0c             	sub    $0xc,%esp
   10418:	50                   	push   %eax
   10419:	e8 cf 1f 00 00       	call   123ed <mutex_acquire>
   1041e:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10421:	8b 45 08             	mov    0x8(%ebp),%eax
   10424:	83 c0 54             	add    $0x54,%eax
   10427:	83 ec 04             	sub    $0x4,%esp
   1042a:	ff 75 0c             	pushl  0xc(%ebp)
   1042d:	6a 00                	push   $0x0
   1042f:	50                   	push   %eax
   10430:	e8 dc 23 00 00       	call   12811 <bitmap_alloc_nbits>
   10435:	83 c4 10             	add    $0x10,%esp
   10438:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   1043b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1043f:	78 17                	js     10458 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10441:	8b 45 08             	mov    0x8(%ebp),%eax
   10444:	8b 50 5c             	mov    0x5c(%eax),%edx
   10447:	8b 45 08             	mov    0x8(%ebp),%eax
   1044a:	8b 48 64             	mov    0x64(%eax),%ecx
   1044d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10450:	0f af c1             	imul   %ecx,%eax
   10453:	01 d0                	add    %edx,%eax
   10455:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10458:	8b 45 08             	mov    0x8(%ebp),%eax
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	50                   	push   %eax
   1045f:	e8 17 20 00 00       	call   1247b <mutex_release>
   10464:	83 c4 10             	add    $0x10,%esp

    return addr;
   10467:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1046a:	c9                   	leave  
   1046b:	c3                   	ret    

0001046c <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   1046c:	55                   	push   %ebp
   1046d:	89 e5                	mov    %esp,%ebp
   1046f:	53                   	push   %ebx
   10470:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10473:	8b 45 08             	mov    0x8(%ebp),%eax
   10476:	83 ec 0c             	sub    $0xc,%esp
   10479:	50                   	push   %eax
   1047a:	e8 6e 1f 00 00       	call   123ed <mutex_acquire>
   1047f:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10482:	8b 45 08             	mov    0x8(%ebp),%eax
   10485:	8b 40 5c             	mov    0x5c(%eax),%eax
   10488:	8b 55 0c             	mov    0xc(%ebp),%edx
   1048b:	89 d1                	mov    %edx,%ecx
   1048d:	29 c1                	sub    %eax,%ecx
   1048f:	8b 45 08             	mov    0x8(%ebp),%eax
   10492:	8b 58 64             	mov    0x64(%eax),%ebx
   10495:	89 c8                	mov    %ecx,%eax
   10497:	ba 00 00 00 00       	mov    $0x0,%edx
   1049c:	f7 f3                	div    %ebx
   1049e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   104a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104a4:	8b 55 08             	mov    0x8(%ebp),%edx
   104a7:	83 c2 54             	add    $0x54,%edx
   104aa:	6a 00                	push   $0x0
   104ac:	ff 75 10             	pushl  0x10(%ebp)
   104af:	50                   	push   %eax
   104b0:	52                   	push   %edx
   104b1:	e8 32 22 00 00       	call   126e8 <bitmap_set_bit>
   104b6:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104b9:	8b 45 08             	mov    0x8(%ebp),%eax
   104bc:	83 ec 0c             	sub    $0xc,%esp
   104bf:	50                   	push   %eax
   104c0:	e8 b6 1f 00 00       	call   1247b <mutex_release>
   104c5:	83 c4 10             	add    $0x10,%esp
}
   104c8:	90                   	nop
   104c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104cc:	c9                   	leave  
   104cd:	c3                   	ret    

000104ce <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
   104d1:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104d4:	83 ec 0c             	sub    $0xc,%esp
   104d7:	68 e1 31 01 00       	push   $0x131e1
   104dc:	e8 14 2c 00 00       	call   130f5 <log_printf>
   104e1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104eb:	eb 29                	jmp    10516 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104ed:	8b 45 08             	mov    0x8(%ebp),%eax
   104f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104f3:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104f7:	8b 45 08             	mov    0x8(%ebp),%eax
   104fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104fd:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10500:	52                   	push   %edx
   10501:	50                   	push   %eax
   10502:	ff 75 f4             	pushl  -0xc(%ebp)
   10505:	68 ed 31 01 00       	push   $0x131ed
   1050a:	e8 e6 2b 00 00       	call   130f5 <log_printf>
   1050f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10512:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10516:	8b 45 08             	mov    0x8(%ebp),%eax
   10519:	8b 40 50             	mov    0x50(%eax),%eax
   1051c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1051f:	7c cc                	jl     104ed <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10521:	83 ec 0c             	sub    $0xc,%esp
   10524:	68 fb 31 01 00       	push   $0x131fb
   10529:	e8 c7 2b 00 00       	call   130f5 <log_printf>
   1052e:	83 c4 10             	add    $0x10,%esp
}
   10531:	90                   	nop
   10532:	c9                   	leave  
   10533:	c3                   	ret    

00010534 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   10534:	55                   	push   %ebp
   10535:	89 e5                	mov    %esp,%ebp
   10537:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   1053a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10541:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10548:	eb 16                	jmp    10560 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   1054a:	8b 45 08             	mov    0x8(%ebp),%eax
   1054d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10550:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10554:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10557:	01 d0                	add    %edx,%eax
   10559:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10560:	8b 45 08             	mov    0x8(%ebp),%eax
   10563:	8b 40 50             	mov    0x50(%eax),%eax
   10566:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10569:	7c df                	jl     1054a <total_mem_size+0x16>
    }
    return mem_size;
   1056b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1056e:	c9                   	leave  
   1056f:	c3                   	ret    

00010570 <test_alloc>:


static void test_alloc(void) {
   10570:	55                   	push   %ebp
   10571:	89 e5                	mov    %esp,%ebp
   10573:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10579:	83 ec 0c             	sub    $0xc,%esp
   1057c:	68 00 10 00 00       	push   $0x1000
   10581:	68 00 00 04 00       	push   $0x40000
   10586:	68 00 10 00 00       	push   $0x1000
   1058b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10591:	50                   	push   %eax
   10592:	8d 45 80             	lea    -0x80(%ebp),%eax
   10595:	50                   	push   %eax
   10596:	e8 0d fe ff ff       	call   103a8 <addr_alloc_init>
   1059b:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   1059e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105a5:	eb 2b                	jmp    105d2 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   105a7:	83 ec 08             	sub    $0x8,%esp
   105aa:	6a 02                	push   $0x2
   105ac:	8d 45 80             	lea    -0x80(%ebp),%eax
   105af:	50                   	push   %eax
   105b0:	e8 50 fe ff ff       	call   10405 <addr_alloc_page>
   105b5:	83 c4 10             	add    $0x10,%esp
   105b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105bb:	83 ec 08             	sub    $0x8,%esp
   105be:	ff 75 e8             	pushl  -0x18(%ebp)
   105c1:	68 fd 31 01 00       	push   $0x131fd
   105c6:	e8 2a 2b 00 00       	call   130f5 <log_printf>
   105cb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105d2:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105d6:	7e cf                	jle    105a7 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105d8:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105e6:	eb 1f                	jmp    10607 <test_alloc+0x97>
        addr += 4096 * 2;
   105e8:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105ef:	83 ec 04             	sub    $0x4,%esp
   105f2:	6a 02                	push   $0x2
   105f4:	ff 75 f0             	pushl  -0x10(%ebp)
   105f7:	8d 45 80             	lea    -0x80(%ebp),%eax
   105fa:	50                   	push   %eax
   105fb:	e8 6c fe ff ff       	call   1046c <addr_free_page>
   10600:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   10603:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10607:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   1060b:	7e db                	jle    105e8 <test_alloc+0x78>
    }
}
   1060d:	90                   	nop
   1060e:	c9                   	leave  
   1060f:	c3                   	ret    

00010610 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   10610:	55                   	push   %ebp
   10611:	89 e5                	mov    %esp,%ebp
   10613:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   10616:	ff 75 0c             	pushl  0xc(%ebp)
   10619:	e8 07 fd ff ff       	call   10325 <pde_index>
   1061e:	83 c4 04             	add    $0x4,%esp
   10621:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10628:	8b 45 08             	mov    0x8(%ebp),%eax
   1062b:	01 d0                	add    %edx,%eax
   1062d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   10630:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10633:	0f b6 00             	movzbl (%eax),%eax
   10636:	83 e0 01             	and    $0x1,%eax
   10639:	84 c0                	test   %al,%al
   1063b:	74 10                	je     1064d <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   1063d:	ff 75 f0             	pushl  -0x10(%ebp)
   10640:	e8 f4 fc ff ff       	call   10339 <pde_paddr>
   10645:	83 c4 04             	add    $0x4,%esp
   10648:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1064b:	eb 57                	jmp    106a4 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1064d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10651:	75 07                	jne    1065a <find_pte+0x4a>
            return (pte_t*)0;
   10653:	b8 00 00 00 00       	mov    $0x0,%eax
   10658:	eb 64                	jmp    106be <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1065a:	83 ec 08             	sub    $0x8,%esp
   1065d:	6a 01                	push   $0x1
   1065f:	68 00 50 01 00       	push   $0x15000
   10664:	e8 9c fd ff ff       	call   10405 <addr_alloc_page>
   10669:	83 c4 10             	add    $0x10,%esp
   1066c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1066f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10673:	75 07                	jne    1067c <find_pte+0x6c>
            return (pte_t*)0;
   10675:	b8 00 00 00 00       	mov    $0x0,%eax
   1067a:	eb 42                	jmp    106be <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   1067c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1067f:	83 c8 07             	or     $0x7,%eax
   10682:	89 c2                	mov    %eax,%edx
   10684:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10687:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10689:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1068c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1068f:	83 ec 04             	sub    $0x4,%esp
   10692:	68 00 10 00 00       	push   $0x1000
   10697:	6a 00                	push   $0x0
   10699:	ff 75 f4             	pushl  -0xc(%ebp)
   1069c:	e8 e5 23 00 00       	call   12a86 <kmemset>
   106a1:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   106a4:	83 ec 0c             	sub    $0xc,%esp
   106a7:	ff 75 0c             	pushl  0xc(%ebp)
   106aa:	e8 b1 fc ff ff       	call   10360 <pte_index>
   106af:	83 c4 10             	add    $0x10,%esp
   106b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106bc:	01 d0                	add    %edx,%eax
}
   106be:	c9                   	leave  
   106bf:	c3                   	ret    

000106c0 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106c0:	55                   	push   %ebp
   106c1:	89 e5                	mov    %esp,%ebp
   106c3:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106cd:	eb 6e                	jmp    1073d <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106cf:	83 ec 04             	sub    $0x4,%esp
   106d2:	6a 01                	push   $0x1
   106d4:	ff 75 0c             	pushl  0xc(%ebp)
   106d7:	ff 75 08             	pushl  0x8(%ebp)
   106da:	e8 31 ff ff ff       	call   10610 <find_pte>
   106df:	83 c4 10             	add    $0x10,%esp
   106e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106e9:	75 07                	jne    106f2 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106f0:	eb 53                	jmp    10745 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106f5:	0f b6 00             	movzbl (%eax),%eax
   106f8:	83 e0 01             	and    $0x1,%eax
   106fb:	84 c0                	test   %al,%al
   106fd:	74 1c                	je     1071b <memory_create_map+0x5b>
   106ff:	68 0d 32 01 00       	push   $0x1320d
   10704:	68 2c 33 01 00       	push   $0x1332c
   10709:	68 a3 00 00 00       	push   $0xa3
   1070e:	68 20 32 01 00       	push   $0x13220
   10713:	e8 d3 26 00 00       	call   12deb <pannic>
   10718:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   1071b:	8b 45 10             	mov    0x10(%ebp),%eax
   1071e:	0b 45 18             	or     0x18(%ebp),%eax
   10721:	83 c8 01             	or     $0x1,%eax
   10724:	89 c2                	mov    %eax,%edx
   10726:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10729:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   1072b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10732:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10739:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1073d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10740:	3b 45 14             	cmp    0x14(%ebp),%eax
   10743:	7c 8a                	jl     106cf <memory_create_map+0xf>
    }
}
   10745:	c9                   	leave  
   10746:	c3                   	ret    

00010747 <create_kernel_table>:


void create_kernel_table(void) {
   10747:	55                   	push   %ebp
   10748:	89 e5                	mov    %esp,%ebp
   1074a:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1074d:	83 ec 04             	sub    $0x4,%esp
   10750:	68 00 10 00 00       	push   $0x1000
   10755:	6a 00                	push   $0x0
   10757:	68 00 60 01 00       	push   $0x16000
   1075c:	e8 25 23 00 00       	call   12a86 <kmemset>
   10761:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10764:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1076b:	e9 98 00 00 00       	jmp    10808 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10770:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10773:	c1 e0 04             	shl    $0x4,%eax
   10776:	05 00 40 01 00       	add    $0x14000,%eax
   1077b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 00                	mov    (%eax),%eax
   10783:	83 ec 08             	sub    $0x8,%esp
   10786:	68 00 10 00 00       	push   $0x1000
   1078b:	50                   	push   %eax
   1078c:	e8 7b fb ff ff       	call   1030c <down2>
   10791:	83 c4 10             	add    $0x10,%esp
   10794:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10797:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079a:	8b 40 04             	mov    0x4(%eax),%eax
   1079d:	83 ec 08             	sub    $0x8,%esp
   107a0:	68 00 10 00 00       	push   $0x1000
   107a5:	50                   	push   %eax
   107a6:	e8 4a fb ff ff       	call   102f5 <up2>
   107ab:	83 c4 10             	add    $0x10,%esp
   107ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   107b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107b4:	8b 40 08             	mov    0x8(%eax),%eax
   107b7:	83 ec 08             	sub    $0x8,%esp
   107ba:	68 00 10 00 00       	push   $0x1000
   107bf:	50                   	push   %eax
   107c0:	e8 47 fb ff ff       	call   1030c <down2>
   107c5:	83 c4 10             	add    $0x10,%esp
   107c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107ce:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107d1:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107d7:	85 c0                	test   %eax,%eax
   107d9:	0f 48 c2             	cmovs  %edx,%eax
   107dc:	c1 f8 0c             	sar    $0xc,%eax
   107df:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107e5:	8b 48 0c             	mov    0xc(%eax),%ecx
   107e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ee:	83 ec 0c             	sub    $0xc,%esp
   107f1:	51                   	push   %ecx
   107f2:	ff 75 e0             	pushl  -0x20(%ebp)
   107f5:	52                   	push   %edx
   107f6:	50                   	push   %eax
   107f7:	68 00 60 01 00       	push   $0x16000
   107fc:	e8 bf fe ff ff       	call   106c0 <memory_create_map>
   10801:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10804:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10808:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080b:	83 f8 03             	cmp    $0x3,%eax
   1080e:	0f 86 5c ff ff ff    	jbe    10770 <create_kernel_table+0x29>
    }
}
   10814:	90                   	nop
   10815:	c9                   	leave  
   10816:	c3                   	ret    

00010817 <memory_create_uvm>:

// 创建进程的初始页表
// 主要的工作创建页目录表，然后从内核页表中复制一部分
uint32_t memory_create_uvm(void) {
   10817:	55                   	push   %ebp
   10818:	89 e5                	mov    %esp,%ebp
   1081a:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   1081d:	83 ec 08             	sub    $0x8,%esp
   10820:	6a 01                	push   $0x1
   10822:	68 00 50 01 00       	push   $0x15000
   10827:	e8 d9 fb ff ff       	call   10405 <addr_alloc_page>
   1082c:	83 c4 10             	add    $0x10,%esp
   1082f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   10832:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10836:	75 07                	jne    1083f <memory_create_uvm+0x28>
        return 0;
   10838:	b8 00 00 00 00       	mov    $0x0,%eax
   1083d:	eb 5b                	jmp    1089a <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   1083f:	83 ec 04             	sub    $0x4,%esp
   10842:	68 00 10 00 00       	push   $0x1000
   10847:	6a 00                	push   $0x0
   10849:	ff 75 f0             	pushl  -0x10(%ebp)
   1084c:	e8 35 22 00 00       	call   12a86 <kmemset>
   10851:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10854:	83 ec 0c             	sub    $0xc,%esp
   10857:	68 00 00 00 80       	push   $0x80000000
   1085c:	e8 c4 fa ff ff       	call   10325 <pde_index>
   10861:	83 c4 10             	add    $0x10,%esp
   10864:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10867:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1086e:	eb 1f                	jmp    1088f <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10870:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10873:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1087d:	01 c2                	add    %eax,%edx
   1087f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10882:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10889:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   1088b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1088f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10892:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10895:	77 d9                	ja     10870 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10897:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1089a:	c9                   	leave  
   1089b:	c3                   	ret    

0001089c <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   1089c:	55                   	push   %ebp
   1089d:	89 e5                	mov    %esp,%ebp
   1089f:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   108a2:	83 ec 0c             	sub    $0xc,%esp
   108a5:	68 67 32 01 00       	push   $0x13267
   108aa:	e8 46 28 00 00       	call   130f5 <log_printf>
   108af:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   108b2:	83 ec 0c             	sub    $0xc,%esp
   108b5:	ff 75 08             	pushl  0x8(%ebp)
   108b8:	e8 11 fc ff ff       	call   104ce <show_mem_info>
   108bd:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108c0:	c7 45 f4 80 31 02 00 	movl   $0x23180,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108c7:	83 ec 0c             	sub    $0xc,%esp
   108ca:	ff 75 08             	pushl  0x8(%ebp)
   108cd:	e8 62 fc ff ff       	call   10534 <total_mem_size>
   108d2:	83 c4 10             	add    $0x10,%esp
   108d5:	2d 00 00 10 00       	sub    $0x100000,%eax
   108da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108dd:	83 ec 08             	sub    $0x8,%esp
   108e0:	68 00 10 00 00       	push   $0x1000
   108e5:	ff 75 f0             	pushl  -0x10(%ebp)
   108e8:	e8 1f fa ff ff       	call   1030c <down2>
   108ed:	83 c4 10             	add    $0x10,%esp
   108f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108f3:	83 ec 04             	sub    $0x4,%esp
   108f6:	ff 75 f0             	pushl  -0x10(%ebp)
   108f9:	68 00 00 10 00       	push   $0x100000
   108fe:	68 71 32 01 00       	push   $0x13271
   10903:	e8 ed 27 00 00       	call   130f5 <log_printf>
   10908:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   1090b:	83 ec 0c             	sub    $0xc,%esp
   1090e:	68 00 10 00 00       	push   $0x1000
   10913:	ff 75 f0             	pushl  -0x10(%ebp)
   10916:	68 00 00 10 00       	push   $0x100000
   1091b:	ff 75 f4             	pushl  -0xc(%ebp)
   1091e:	68 00 50 01 00       	push   $0x15000
   10923:	e8 80 fa ff ff       	call   103a8 <addr_alloc_init>
   10928:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   1092b:	a1 60 50 01 00       	mov    0x15060,%eax
   10930:	c1 e8 0c             	shr    $0xc,%eax
   10933:	83 ec 0c             	sub    $0xc,%esp
   10936:	50                   	push   %eax
   10937:	e8 43 1d 00 00       	call   1267f <bitmap_byte_count>
   1093c:	83 c4 10             	add    $0x10,%esp
   1093f:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10942:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10949:	76 1c                	jbe    10967 <memory_init+0xcb>
   1094b:	68 8c 32 01 00       	push   $0x1328c
   10950:	68 40 33 01 00       	push   $0x13340
   10955:	68 fe 00 00 00       	push   $0xfe
   1095a:	68 20 32 01 00       	push   $0x13220
   1095f:	e8 87 24 00 00       	call   12deb <pannic>
   10964:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10967:	e8 db fd ff ff       	call   10747 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1096c:	b8 00 60 01 00       	mov    $0x16000,%eax
   10971:	83 ec 0c             	sub    $0xc,%esp
   10974:	50                   	push   %eax
   10975:	e8 1d fa ff ff       	call   10397 <mmu_set_page_dir>
   1097a:	83 c4 10             	add    $0x10,%esp
}
   1097d:	90                   	nop
   1097e:	c9                   	leave  
   1097f:	c3                   	ret    

00010980 <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10980:	55                   	push   %ebp
   10981:	89 e5                	mov    %esp,%ebp
   10983:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10986:	8b 45 0c             	mov    0xc(%ebp),%eax
   10989:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   1098c:	68 00 10 00 00       	push   $0x1000
   10991:	ff 75 10             	pushl  0x10(%ebp)
   10994:	e8 5c f9 ff ff       	call   102f5 <up2>
   10999:	83 c4 08             	add    $0x8,%esp
   1099c:	c1 e8 0c             	shr    $0xc,%eax
   1099f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   109a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109a9:	e9 8d 00 00 00       	jmp    10a3b <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   109ae:	83 ec 08             	sub    $0x8,%esp
   109b1:	6a 01                	push   $0x1
   109b3:	68 00 50 01 00       	push   $0x15000
   109b8:	e8 48 fa ff ff       	call   10405 <addr_alloc_page>
   109bd:	83 c4 10             	add    $0x10,%esp
   109c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   109c3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109c7:	75 17                	jne    109e0 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   109c9:	83 ec 0c             	sub    $0xc,%esp
   109cc:	68 b4 32 01 00       	push   $0x132b4
   109d1:	e8 1f 27 00 00       	call   130f5 <log_printf>
   109d6:	83 c4 10             	add    $0x10,%esp
            return 0;
   109d9:	b8 00 00 00 00       	mov    $0x0,%eax
   109de:	eb 6c                	jmp    10a4c <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109e0:	8b 45 08             	mov    0x8(%ebp),%eax
   109e3:	83 ec 0c             	sub    $0xc,%esp
   109e6:	ff 75 14             	pushl  0x14(%ebp)
   109e9:	6a 01                	push   $0x1
   109eb:	ff 75 e8             	pushl  -0x18(%ebp)
   109ee:	ff 75 f4             	pushl  -0xc(%ebp)
   109f1:	50                   	push   %eax
   109f2:	e8 c9 fc ff ff       	call   106c0 <memory_create_map>
   109f7:	83 c4 20             	add    $0x20,%esp
   109fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   109fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a01:	79 2d                	jns    10a30 <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   10a03:	83 ec 0c             	sub    $0xc,%esp
   10a06:	68 d4 32 01 00       	push   $0x132d4
   10a0b:	e8 e5 26 00 00       	call   130f5 <log_printf>
   10a10:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   10a13:	83 ec 04             	sub    $0x4,%esp
   10a16:	ff 75 f0             	pushl  -0x10(%ebp)
   10a19:	ff 75 0c             	pushl  0xc(%ebp)
   10a1c:	68 00 50 01 00       	push   $0x15000
   10a21:	e8 46 fa ff ff       	call   1046c <addr_free_page>
   10a26:	83 c4 10             	add    $0x10,%esp

            return 0;
   10a29:	b8 00 00 00 00       	mov    $0x0,%eax
   10a2e:	eb 1c                	jmp    10a4c <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a30:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10a37:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a3e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a41:	0f 8c 67 ff ff ff    	jl     109ae <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a47:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a4c:	c9                   	leave  
   10a4d:	c3                   	ret    

00010a4e <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常是0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a4e:	55                   	push   %ebp
   10a4f:	89 e5                	mov    %esp,%ebp
   10a51:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10a54:	e8 ff 06 00 00       	call   11158 <task_current>
   10a59:	8b 40 68             	mov    0x68(%eax),%eax
   10a5c:	ff 75 10             	pushl  0x10(%ebp)
   10a5f:	ff 75 0c             	pushl  0xc(%ebp)
   10a62:	ff 75 08             	pushl  0x8(%ebp)
   10a65:	50                   	push   %eax
   10a66:	e8 15 ff ff ff       	call   10980 <memory_alloc_for_page_dir>
   10a6b:	83 c4 10             	add    $0x10,%esp
}
   10a6e:	c9                   	leave  
   10a6f:	c3                   	ret    

00010a70 <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10a70:	55                   	push   %ebp
   10a71:	89 e5                	mov    %esp,%ebp
   10a73:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10a76:	e8 dd 06 00 00       	call   11158 <task_current>
   10a7b:	8b 40 68             	mov    0x68(%eax),%eax
}
   10a7e:	c9                   	leave  
   10a7f:	c3                   	ret    

00010a80 <memory_alloc_page>:


// 以页为单位，分配物理内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
   10a83:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10a86:	83 ec 08             	sub    $0x8,%esp
   10a89:	6a 01                	push   $0x1
   10a8b:	68 00 50 01 00       	push   $0x15000
   10a90:	e8 70 f9 ff ff       	call   10405 <addr_alloc_page>
   10a95:	83 c4 10             	add    $0x10,%esp
   10a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10a9e:	c9                   	leave  
   10a9f:	c3                   	ret    

00010aa0 <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的物理内存
void memory_free_page(uint32_t vaddr) {
   10aa0:	55                   	push   %ebp
   10aa1:	89 e5                	mov    %esp,%ebp
   10aa3:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa9:	85 c0                	test   %eax,%eax
   10aab:	78 17                	js     10ac4 <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10aad:	83 ec 04             	sub    $0x4,%esp
   10ab0:	6a 01                	push   $0x1
   10ab2:	ff 75 08             	pushl  0x8(%ebp)
   10ab5:	68 00 50 01 00       	push   $0x15000
   10aba:	e8 ad f9 ff ff       	call   1046c <addr_free_page>
   10abf:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10ac2:	eb 72                	jmp    10b36 <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10ac4:	e8 a7 ff ff ff       	call   10a70 <curr_page_dir>
   10ac9:	83 ec 04             	sub    $0x4,%esp
   10acc:	6a 00                	push   $0x0
   10ace:	ff 75 08             	pushl  0x8(%ebp)
   10ad1:	50                   	push   %eax
   10ad2:	e8 39 fb ff ff       	call   10610 <find_pte>
   10ad7:	83 c4 10             	add    $0x10,%esp
   10ada:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10add:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ae1:	75 0d                	jne    10af0 <memory_free_page+0x50>
   10ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ae6:	0f b6 00             	movzbl (%eax),%eax
   10ae9:	83 e0 01             	and    $0x1,%eax
   10aec:	84 c0                	test   %al,%al
   10aee:	75 1c                	jne    10b0c <memory_free_page+0x6c>
   10af0:	68 08 33 01 00       	push   $0x13308
   10af5:	68 4c 33 01 00       	push   $0x1334c
   10afa:	68 46 01 00 00       	push   $0x146
   10aff:	68 20 32 01 00       	push   $0x13220
   10b04:	e8 e2 22 00 00       	call   12deb <pannic>
   10b09:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10b0c:	83 ec 0c             	sub    $0xc,%esp
   10b0f:	ff 75 f4             	pushl  -0xc(%ebp)
   10b12:	e8 59 f8 ff ff       	call   10370 <pte_paddr>
   10b17:	83 c4 10             	add    $0x10,%esp
   10b1a:	83 ec 04             	sub    $0x4,%esp
   10b1d:	6a 01                	push   $0x1
   10b1f:	50                   	push   %eax
   10b20:	68 00 50 01 00       	push   $0x15000
   10b25:	e8 42 f9 ff ff       	call   1046c <addr_free_page>
   10b2a:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10b36:	90                   	nop
   10b37:	c9                   	leave  
   10b38:	c3                   	ret    

00010b39 <kalloc>:

/*-- ------------------------------ --*/
// 申请一页物理内存。
static uint32_t kalloc() {
   10b39:	55                   	push   %ebp
   10b3a:	89 e5                	mov    %esp,%ebp
   10b3c:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10b3f:	83 ec 08             	sub    $0x8,%esp
   10b42:	6a 01                	push   $0x1
   10b44:	68 00 50 01 00       	push   $0x15000
   10b49:	e8 b7 f8 ff ff       	call   10405 <addr_alloc_page>
   10b4e:	83 c4 10             	add    $0x10,%esp
}
   10b51:	c9                   	leave  
   10b52:	c3                   	ret    

00010b53 <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr) {
   10b53:	55                   	push   %ebp
   10b54:	89 e5                	mov    %esp,%ebp
   10b56:	83 ec 08             	sub    $0x8,%esp
    addr_free_page(&paddr_alloc, addr, 1);
   10b59:	83 ec 04             	sub    $0x4,%esp
   10b5c:	6a 01                	push   $0x1
   10b5e:	ff 75 08             	pushl  0x8(%ebp)
   10b61:	68 00 50 01 00       	push   $0x15000
   10b66:	e8 01 f9 ff ff       	call   1046c <addr_free_page>
   10b6b:	83 c4 10             	add    $0x10,%esp
}
   10b6e:	90                   	nop
   10b6f:	c9                   	leave  
   10b70:	c3                   	ret    

00010b71 <do_handler_syscall>:
    [SYS_sleep]      = (syscall_handler_t)sys_sleep,
    [SYS_getpid]     = (syscall_handler_t)sys_getpid,

};

void do_handler_syscall(syscall_frame_t* frame) {
   10b71:	55                   	push   %ebp
   10b72:	89 e5                	mov    %esp,%ebp
   10b74:	53                   	push   %ebx
   10b75:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10b78:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7b:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b7e:	83 f8 01             	cmp    $0x1,%eax
   10b81:	77 4e                	ja     10bd1 <do_handler_syscall+0x60>
        syscall_handler_t handler = sys_table[frame->func_id];
   10b83:	8b 45 08             	mov    0x8(%ebp),%eax
   10b86:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b89:	8b 04 85 60 33 01 00 	mov    0x13360(,%eax,4),%eax
   10b90:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (handler) {
   10b93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b97:	74 38                	je     10bd1 <do_handler_syscall+0x60>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10b99:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9c:	8b 40 4c             	mov    0x4c(%eax),%eax
   10b9f:	89 c3                	mov    %eax,%ebx
   10ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba4:	8b 40 48             	mov    0x48(%eax),%eax
   10ba7:	89 c1                	mov    %eax,%ecx
   10ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bac:	8b 40 44             	mov    0x44(%eax),%eax
   10baf:	89 c2                	mov    %eax,%edx
   10bb1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb4:	8b 40 40             	mov    0x40(%eax),%eax
   10bb7:	53                   	push   %ebx
   10bb8:	51                   	push   %ecx
   10bb9:	52                   	push   %edx
   10bba:	50                   	push   %eax
   10bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bbe:	ff d0                	call   *%eax
   10bc0:	83 c4 10             	add    $0x10,%esp
   10bc3:	89 45 f0             	mov    %eax,-0x10(%ebp)

            frame->eax = ret; // Integral and pointer return values appear in %eax.
   10bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10bcc:	89 50 30             	mov    %edx,0x30(%eax)

            return;
   10bcf:	eb 30                	jmp    10c01 <do_handler_syscall+0x90>
        }
    }

    task_t* task = task_current();
   10bd1:	e8 82 05 00 00       	call   11158 <task_current>
   10bd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdc:	8b 40 3c             	mov    0x3c(%eax),%eax
   10bdf:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10be2:	83 c2 04             	add    $0x4,%edx
   10be5:	83 ec 04             	sub    $0x4,%esp
   10be8:	50                   	push   %eax
   10be9:	52                   	push   %edx
   10bea:	68 68 33 01 00       	push   $0x13368
   10bef:	e8 01 25 00 00       	call   130f5 <log_printf>
   10bf4:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   10bf7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfa:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
   10c01:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c04:	c9                   	leave  
   10c05:	c3                   	ret    

00010c06 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10c06:	55                   	push   %ebp
   10c07:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10c09:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10c12:	8b 45 08             	mov    0x8(%ebp),%eax
   10c15:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10c1c:	90                   	nop
   10c1d:	5d                   	pop    %ebp
   10c1e:	c3                   	ret    

00010c1f <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10c1f:	55                   	push   %ebp
   10c20:	89 e5                	mov    %esp,%ebp
    return node->next;
   10c22:	8b 45 08             	mov    0x8(%ebp),%eax
   10c25:	8b 40 04             	mov    0x4(%eax),%eax
}
   10c28:	5d                   	pop    %ebp
   10c29:	c3                   	ret    

00010c2a <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10c2a:	55                   	push   %ebp
   10c2b:	89 e5                	mov    %esp,%ebp
    return list->count;
   10c2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c30:	8b 40 08             	mov    0x8(%eax),%eax
}
   10c33:	5d                   	pop    %ebp
   10c34:	c3                   	ret    

00010c35 <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10c35:	55                   	push   %ebp
   10c36:	89 e5                	mov    %esp,%ebp
    return list->first;
   10c38:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3b:	8b 00                	mov    (%eax),%eax
}
   10c3d:	5d                   	pop    %ebp
   10c3e:	c3                   	ret    

00010c3f <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10c3f:	55                   	push   %ebp
   10c40:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10c42:	8b 45 08             	mov    0x8(%ebp),%eax
   10c45:	0f 22 d8             	mov    %eax,%cr3
}
   10c48:	90                   	nop
   10c49:	5d                   	pop    %ebp
   10c4a:	c3                   	ret    

00010c4b <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   10c4b:	55                   	push   %ebp
   10c4c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10c4e:	f4                   	hlt    
}
   10c4f:	90                   	nop
   10c50:	5d                   	pop    %ebp
   10c51:	c3                   	ret    

00010c52 <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10c52:	55                   	push   %ebp
   10c53:	89 e5                	mov    %esp,%ebp
   10c55:	83 ec 04             	sub    $0x4,%esp
   10c58:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10c5f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10c63:	0f 00 d8             	ltr    %ax
}
   10c66:	90                   	nop
   10c67:	c9                   	leave  
   10c68:	c3                   	ret    

00010c69 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10c69:	55                   	push   %ebp
   10c6a:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10c6c:	ff 75 08             	pushl  0x8(%ebp)
   10c6f:	e8 cb ff ff ff       	call   10c3f <write_cr3>
   10c74:	83 c4 04             	add    $0x4,%esp
}
   10c77:	90                   	nop
   10c78:	c9                   	leave  
   10c79:	c3                   	ret    

00010c7a <tss_init>:

// 空闲进程的栈, 不是广义上的内核栈
static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   10c7a:	55                   	push   %ebp
   10c7b:	89 e5                	mov    %esp,%ebp
   10c7d:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10c80:	e8 fb 08 00 00       	call   11580 <gdt_alloc_desc>
   10c85:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10c88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10c8c:	79 1a                	jns    10ca8 <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10c8e:	83 ec 0c             	sub    $0xc,%esp
   10c91:	68 88 33 01 00       	push   $0x13388
   10c96:	e8 5a 24 00 00       	call   130f5 <log_printf>
   10c9b:	83 c4 10             	add    $0x10,%esp
        return -1;
   10c9e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ca3:	e9 58 01 00 00       	jmp    10e00 <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10ca8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cab:	83 c0 4c             	add    $0x4c,%eax
   10cae:	68 89 00 00 00       	push   $0x89
   10cb3:	6a 68                	push   $0x68
   10cb5:	50                   	push   %eax
   10cb6:	ff 75 ec             	pushl  -0x14(%ebp)
   10cb9:	e8 39 07 00 00       	call   113f7 <segment_desc_set>
   10cbe:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc4:	83 c0 4c             	add    $0x4c,%eax
   10cc7:	83 ec 04             	sub    $0x4,%esp
   10cca:	6a 68                	push   $0x68
   10ccc:	6a 00                	push   $0x0
   10cce:	50                   	push   %eax
   10ccf:	e8 b2 1d 00 00       	call   12a86 <kmemset>
   10cd4:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间，大小为PGSIZE
    uint32_t kernel_stack = memory_alloc_page();
   10cd7:	e8 a4 fd ff ff       	call   10a80 <memory_alloc_page>
   10cdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   10cdf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10ce3:	0f 84 ec 00 00 00    	je     10dd5 <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cec:	83 e0 01             	and    $0x1,%eax
   10cef:	85 c0                	test   %eax,%eax
   10cf1:	74 10                	je     10d03 <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   10cf3:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10cfa:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10d01:	eb 16                	jmp    10d19 <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10d03:	a1 98 71 01 00       	mov    0x17198,%eax
   10d08:	83 c8 03             	or     $0x3,%eax
   10d0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10d0e:	a1 9c 71 01 00       	mov    0x1719c,%eax
   10d13:	83 c8 03             	or     $0x3,%eax
   10d16:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   10d19:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1c:	8b 55 10             	mov    0x10(%ebp),%edx
   10d1f:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp    = esp;
   10d22:	8b 45 08             	mov    0x8(%ebp),%eax
   10d25:	8b 55 14             	mov    0x14(%ebp),%edx
   10d28:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   10d2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10d31:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10d37:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3a:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss     = data_sel;
   10d3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d40:	8b 45 08             	mov    0x8(%ebp),%eax
   10d43:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   10d49:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4c:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10d53:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d56:	8b 45 08             	mov    0x8(%ebp),%eax
   10d59:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d62:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d68:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6b:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10d71:	8b 45 08             	mov    0x8(%ebp),%eax
   10d74:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7d:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10d83:	8b 45 08             	mov    0x8(%ebp),%eax
   10d86:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs     = code_sel;
   10d95:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d98:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10da1:	8b 45 08             	mov    0x8(%ebp),%eax
   10da4:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10dab:	e8 67 fa ff ff       	call   10817 <memory_create_uvm>
   10db0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   10db3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10db7:	74 1f                	je     10dd8 <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   10db9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10dbf:	89 50 68             	mov    %edx,0x68(%eax)

    task->tss_sel    = tss_sel;
   10dc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc5:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10dc8:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    return 0;
   10dce:	b8 00 00 00 00       	mov    $0x0,%eax
   10dd3:	eb 2b                	jmp    10e00 <tss_init+0x186>
        goto tss_init_failed;
   10dd5:	90                   	nop
   10dd6:	eb 01                	jmp    10dd9 <tss_init+0x15f>
        goto tss_init_failed;
   10dd8:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   10dd9:	83 ec 0c             	sub    $0xc,%esp
   10ddc:	ff 75 ec             	pushl  -0x14(%ebp)
   10ddf:	e8 11 08 00 00       	call   115f5 <gdt_free_sel>
   10de4:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   10de7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10deb:	74 0e                	je     10dfb <tss_init+0x181>
        memory_free_page(kernel_stack);
   10ded:	83 ec 0c             	sub    $0xc,%esp
   10df0:	ff 75 e8             	pushl  -0x18(%ebp)
   10df3:	e8 a8 fc ff ff       	call   10aa0 <memory_free_page>
   10df8:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   10dfb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e00:	c9                   	leave  
   10e01:	c3                   	ret    

00010e02 <task_init>:
// task_t* task:     已申请内存的进程结构体
// const char* name: 进程名
// int flag:         TASK_FLAG_USER 为用户进程，TASK_FLAG_SYSTEM 为内核进程
// uint32_t entry:   进程入口地址
// uint32_t esp:     进程栈底指针
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   10e02:	55                   	push   %ebp
   10e03:	89 e5                	mov    %esp,%ebp
   10e05:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10e08:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e0c:	75 19                	jne    10e27 <task_init+0x25>
   10e0e:	68 9a 33 01 00       	push   $0x1339a
   10e13:	68 24 34 01 00       	push   $0x13424
   10e18:	6a 51                	push   $0x51
   10e1a:	68 b0 33 01 00       	push   $0x133b0
   10e1f:	e8 c7 1f 00 00       	call   12deb <pannic>
   10e24:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   10e27:	ff 75 18             	pushl  0x18(%ebp)
   10e2a:	ff 75 14             	pushl  0x14(%ebp)
   10e2d:	ff 75 10             	pushl  0x10(%ebp)
   10e30:	ff 75 08             	pushl  0x8(%ebp)
   10e33:	e8 42 fe ff ff       	call   10c7a <tss_init>
   10e38:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10e3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3e:	83 c0 04             	add    $0x4,%eax
   10e41:	83 ec 04             	sub    $0x4,%esp
   10e44:	6a 20                	push   $0x20
   10e46:	ff 75 0c             	pushl  0xc(%ebp)
   10e49:	50                   	push   %eax
   10e4a:	e8 c3 1a 00 00       	call   12912 <kstrncpy>
   10e4f:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10e52:	8b 45 08             	mov    0x8(%ebp),%eax
   10e55:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10e5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10e65:	8b 45 08             	mov    0x8(%ebp),%eax
   10e68:	c7 40 44 0a 00 00 00 	movl   $0xa,0x44(%eax)
    task->slice_ticks = task->time_ticks;
   10e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e72:	8b 50 44             	mov    0x44(%eax),%edx
   10e75:	8b 45 08             	mov    0x8(%ebp),%eax
   10e78:	89 50 48             	mov    %edx,0x48(%eax)

    list_node_init(&task->all_node);
   10e7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7e:	83 c0 30             	add    $0x30,%eax
   10e81:	83 ec 0c             	sub    $0xc,%esp
   10e84:	50                   	push   %eax
   10e85:	e8 7c fd ff ff       	call   10c06 <list_node_init>
   10e8a:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e90:	83 c0 28             	add    $0x28,%eax
   10e93:	83 ec 0c             	sub    $0xc,%esp
   10e96:	50                   	push   %eax
   10e97:	e8 6a fd ff ff       	call   10c06 <list_node_init>
   10e9c:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10e9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea2:	83 c0 38             	add    $0x38,%eax
   10ea5:	83 ec 0c             	sub    $0xc,%esp
   10ea8:	50                   	push   %eax
   10ea9:	e8 58 fd ff ff       	call   10c06 <list_node_init>
   10eae:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10eb1:	e8 c3 10 00 00       	call   11f79 <irq_enter_protection>
   10eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)


    task->pid = (uint32_t)task;
   10eb9:	8b 55 08             	mov    0x8(%ebp),%edx
   10ebc:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebf:	89 50 24             	mov    %edx,0x24(%eax)

    task_set_ready(task);
   10ec2:	83 ec 0c             	sub    $0xc,%esp
   10ec5:	ff 75 08             	pushl  0x8(%ebp)
   10ec8:	e8 e9 01 00 00       	call   110b6 <task_set_ready>
   10ecd:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10ed0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ed3:	83 c0 30             	add    $0x30,%eax
   10ed6:	83 ec 08             	sub    $0x8,%esp
   10ed9:	50                   	push   %eax
   10eda:	68 10 70 01 00       	push   $0x17010
   10edf:	e8 d2 1f 00 00       	call   12eb6 <list_insert_back>
   10ee4:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10ee7:	83 ec 0c             	sub    $0xc,%esp
   10eea:	ff 75 f4             	pushl  -0xc(%ebp)
   10eed:	e8 9f 10 00 00       	call   11f91 <irq_leave_protection>
   10ef2:	83 c4 10             	add    $0x10,%esp

    return 0;
   10ef5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10efa:	c9                   	leave  
   10efb:	c3                   	ret    

00010efc <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10efc:	55                   	push   %ebp
   10efd:	89 e5                	mov    %esp,%ebp
   10eff:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10f02:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f05:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   10f0b:	83 ec 0c             	sub    $0xc,%esp
   10f0e:	50                   	push   %eax
   10f0f:	e8 58 06 00 00       	call   1156c <swtch_to_tss>
   10f14:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10f17:	90                   	nop
   10f18:	c9                   	leave  
   10f19:	c3                   	ret    

00010f1a <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10f1a:	55                   	push   %ebp
   10f1b:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   10f1d:	e8 29 fd ff ff       	call   10c4b <hlt>
   10f22:	eb f9                	jmp    10f1d <idle_task_entry+0x3>

00010f24 <task_manager_init>:
    }
}


void task_manager_init(void) {
   10f24:	55                   	push   %ebp
   10f25:	89 e5                	mov    %esp,%ebp
   10f27:	83 ec 18             	sub    $0x18,%esp
    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   10f2a:	e8 51 06 00 00       	call   11580 <gdt_alloc_desc>
   10f2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f32:	68 f2 40 00 00       	push   $0x40f2
   10f37:	6a ff                	push   $0xffffffff
   10f39:	6a 00                	push   $0x0
   10f3b:	ff 75 f4             	pushl  -0xc(%ebp)
   10f3e:	e8 b4 04 00 00       	call   113f7 <segment_desc_set>
   10f43:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f49:	a3 9c 71 01 00       	mov    %eax,0x1719c

    sel = gdt_alloc_desc();
   10f4e:	e8 2d 06 00 00       	call   11580 <gdt_alloc_desc>
   10f53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f56:	68 fa 40 00 00       	push   $0x40fa
   10f5b:	6a ff                	push   $0xffffffff
   10f5d:	6a 00                	push   $0x0
   10f5f:	ff 75 f4             	pushl  -0xc(%ebp)
   10f62:	e8 90 04 00 00       	call   113f7 <segment_desc_set>
   10f67:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f6d:	a3 98 71 01 00       	mov    %eax,0x17198

    list_init(&task_manager.ready_list);
   10f72:	83 ec 0c             	sub    $0xc,%esp
   10f75:	68 04 70 01 00       	push   $0x17004
   10f7a:	e8 b5 1e 00 00       	call   12e34 <list_init>
   10f7f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10f82:	83 ec 0c             	sub    $0xc,%esp
   10f85:	68 10 70 01 00       	push   $0x17010
   10f8a:	e8 a5 1e 00 00       	call   12e34 <list_init>
   10f8f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10f92:	83 ec 0c             	sub    $0xc,%esp
   10f95:	68 1c 70 01 00       	push   $0x1701c
   10f9a:	e8 95 1e 00 00       	call   12e34 <list_init>
   10f9f:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10fa2:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10fa9:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   10fac:	b8 a0 71 01 00       	mov    $0x171a0,%eax
    task_init(&task_manager.idle_task, 
   10fb1:	05 00 04 00 00       	add    $0x400,%eax
   10fb6:	ba 1a 0f 01 00       	mov    $0x10f1a,%edx
   10fbb:	83 ec 0c             	sub    $0xc,%esp
   10fbe:	50                   	push   %eax
   10fbf:	52                   	push   %edx
   10fc0:	6a 01                	push   $0x1
   10fc2:	68 f5 33 01 00       	push   $0x133f5
   10fc7:	68 e0 70 01 00       	push   $0x170e0
   10fcc:	e8 31 fe ff ff       	call   10e02 <task_init>
   10fd1:	83 c4 20             	add    $0x20,%esp
    );

    task_manager.curr_task = &task_manager.idle_task;
   10fd4:	c7 05 00 70 01 00 e0 	movl   $0x170e0,0x17000
   10fdb:	70 01 00 
}
   10fde:	90                   	nop
   10fdf:	c9                   	leave  
   10fe0:	c3                   	ret    

00010fe1 <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10fe1:	55                   	push   %ebp
   10fe2:	89 e5                	mov    %esp,%ebp
   10fe4:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10fe7:	ba 80 31 02 00       	mov    $0x23180,%edx
   10fec:	b8 c0 30 02 00       	mov    $0x230c0,%eax
   10ff1:	29 c2                	sub    %eax,%edx
   10ff3:	89 d0                	mov    %edx,%eax
   10ff5:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10ff8:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10fff:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   11003:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11006:	77 1c                	ja     11024 <task_first_init+0x43>
   11008:	68 ff 33 01 00       	push   $0x133ff
   1100d:	68 30 34 01 00       	push   $0x13430
   11012:	68 a7 00 00 00       	push   $0xa7
   11017:	68 b0 33 01 00       	push   $0x133b0
   1101c:	e8 ca 1d 00 00       	call   12deb <pannic>
   11021:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   11024:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", TASK_FLAGS_USER, (uint32_t)first_start, first_start + alloc_size);
   1102b:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1102e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11031:	01 d0                	add    %edx,%eax
   11033:	83 ec 0c             	sub    $0xc,%esp
   11036:	50                   	push   %eax
   11037:	ff 75 ec             	pushl  -0x14(%ebp)
   1103a:	6a 00                	push   $0x0
   1103c:	68 16 34 01 00       	push   $0x13416
   11041:	68 28 70 01 00       	push   $0x17028
   11046:	e8 b7 fd ff ff       	call   10e02 <task_init>
   1104b:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   1104e:	a1 dc 70 01 00       	mov    0x170dc,%eax
   11053:	0f b7 c0             	movzwl %ax,%eax
   11056:	83 ec 0c             	sub    $0xc,%esp
   11059:	50                   	push   %eax
   1105a:	e8 f3 fb ff ff       	call   10c52 <write_tr>
   1105f:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   11062:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   11069:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   1106c:	a1 90 70 01 00       	mov    0x17090,%eax
   11071:	83 ec 0c             	sub    $0xc,%esp
   11074:	50                   	push   %eax
   11075:	e8 ef fb ff ff       	call   10c69 <mmu_set_page_dir>
   1107a:	83 c4 10             	add    $0x10,%esp

    // 给该进程新开个一级页表，也就是类似于用户页表的东西
    // 并在这个一级页表里申请 alloc_size 大小的内存
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   1107d:	83 ec 04             	sub    $0x4,%esp
   11080:	6a 07                	push   $0x7
   11082:	ff 75 f0             	pushl  -0x10(%ebp)
   11085:	ff 75 ec             	pushl  -0x14(%ebp)
   11088:	e8 c1 f9 ff ff       	call   10a4e <memory_alloc_page_for>
   1108d:	83 c4 10             	add    $0x10,%esp

    // 把这段代码拷贝到上面生成的页表里
    // 相当于就是把内存搬运到 virtual 0x80000000+ 了
    kmemcpy((void*)first_start, s_first_task, copy_size);
   11090:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   11094:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11097:	83 ec 04             	sub    $0x4,%esp
   1109a:	52                   	push   %edx
   1109b:	68 c0 30 02 00       	push   $0x230c0
   110a0:	50                   	push   %eax
   110a1:	e8 91 19 00 00       	call   12a37 <kmemcpy>
   110a6:	83 c4 10             	add    $0x10,%esp
}
   110a9:	90                   	nop
   110aa:	c9                   	leave  
   110ab:	c3                   	ret    

000110ac <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   110ac:	55                   	push   %ebp
   110ad:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   110af:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   110b4:	5d                   	pop    %ebp
   110b5:	c3                   	ret    

000110b6 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   110b6:	55                   	push   %ebp
   110b7:	89 e5                	mov    %esp,%ebp
   110b9:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   110bc:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   110c3:	74 22                	je     110e7 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   110c5:	8b 45 08             	mov    0x8(%ebp),%eax
   110c8:	83 c0 28             	add    $0x28,%eax
   110cb:	83 ec 08             	sub    $0x8,%esp
   110ce:	50                   	push   %eax
   110cf:	68 04 70 01 00       	push   $0x17004
   110d4:	e8 dd 1d 00 00       	call   12eb6 <list_insert_back>
   110d9:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   110dc:	8b 45 08             	mov    0x8(%ebp),%eax
   110df:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   110e5:	eb 01                	jmp    110e8 <task_set_ready+0x32>
        return;
   110e7:	90                   	nop
}
   110e8:	c9                   	leave  
   110e9:	c3                   	ret    

000110ea <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   110ea:	55                   	push   %ebp
   110eb:	89 e5                	mov    %esp,%ebp
   110ed:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   110f0:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   110f7:	74 19                	je     11112 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   110f9:	8b 45 08             	mov    0x8(%ebp),%eax
   110fc:	83 c0 28             	add    $0x28,%eax
   110ff:	83 ec 08             	sub    $0x8,%esp
   11102:	50                   	push   %eax
   11103:	68 04 70 01 00       	push   $0x17004
   11108:	e8 85 1e 00 00       	call   12f92 <list_remove>
   1110d:	83 c4 10             	add    $0x10,%esp
   11110:	eb 01                	jmp    11113 <task_set_blocked+0x29>
        return;
   11112:	90                   	nop
}
   11113:	c9                   	leave  
   11114:	c3                   	ret    

00011115 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   11115:	55                   	push   %ebp
   11116:	89 e5                	mov    %esp,%ebp
   11118:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   1111b:	68 04 70 01 00       	push   $0x17004
   11120:	e8 05 fb ff ff       	call   10c2a <list_size>
   11125:	83 c4 04             	add    $0x4,%esp
   11128:	85 c0                	test   %eax,%eax
   1112a:	75 07                	jne    11133 <task_next_run+0x1e>
        return &task_manager.idle_task;
   1112c:	b8 e0 70 01 00       	mov    $0x170e0,%eax
   11131:	eb 23                	jmp    11156 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   11133:	68 04 70 01 00       	push   $0x17004
   11138:	e8 f8 fa ff ff       	call   10c35 <list_first>
   1113d:	83 c4 04             	add    $0x4,%esp
   11140:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11143:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11147:	74 08                	je     11151 <task_next_run+0x3c>
   11149:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1114c:	83 e8 28             	sub    $0x28,%eax
   1114f:	eb 05                	jmp    11156 <task_next_run+0x41>
   11151:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11156:	c9                   	leave  
   11157:	c3                   	ret    

00011158 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   11158:	55                   	push   %ebp
   11159:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1115b:	a1 00 70 01 00       	mov    0x17000,%eax
}
   11160:	5d                   	pop    %ebp
   11161:	c3                   	ret    

00011162 <sys_sched_yield>:

// 当前进程主动放弃CPU
int sys_sched_yield(void) {
   11162:	55                   	push   %ebp
   11163:	89 e5                	mov    %esp,%ebp
   11165:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11168:	e8 0c 0e 00 00       	call   11f79 <irq_enter_protection>
   1116d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   11170:	83 ec 0c             	sub    $0xc,%esp
   11173:	68 04 70 01 00       	push   $0x17004
   11178:	e8 ad fa ff ff       	call   10c2a <list_size>
   1117d:	83 c4 10             	add    $0x10,%esp
   11180:	83 f8 01             	cmp    $0x1,%eax
   11183:	7e 29                	jle    111ae <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   11185:	e8 ce ff ff ff       	call   11158 <task_current>
   1118a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   1118d:	83 ec 0c             	sub    $0xc,%esp
   11190:	ff 75 f0             	pushl  -0x10(%ebp)
   11193:	e8 52 ff ff ff       	call   110ea <task_set_blocked>
   11198:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1119b:	83 ec 0c             	sub    $0xc,%esp
   1119e:	ff 75 f0             	pushl  -0x10(%ebp)
   111a1:	e8 10 ff ff ff       	call   110b6 <task_set_ready>
   111a6:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   111a9:	e8 15 00 00 00       	call   111c3 <task_dispatch>
    }

    irq_leave_protection(state);
   111ae:	83 ec 0c             	sub    $0xc,%esp
   111b1:	ff 75 f4             	pushl  -0xc(%ebp)
   111b4:	e8 d8 0d 00 00       	call   11f91 <irq_leave_protection>
   111b9:	83 c4 10             	add    $0x10,%esp

    return 0;
   111bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111c1:	c9                   	leave  
   111c2:	c3                   	ret    

000111c3 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   111c3:	55                   	push   %ebp
   111c4:	89 e5                	mov    %esp,%ebp
   111c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   111c9:	e8 ab 0d 00 00       	call   11f79 <irq_enter_protection>
   111ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   111d1:	e8 3f ff ff ff       	call   11115 <task_next_run>
   111d6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   111d9:	a1 00 70 01 00       	mov    0x17000,%eax
   111de:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   111e1:	74 2a                	je     1120d <task_dispatch+0x4a>
        task_t* from = task_current();
   111e3:	e8 70 ff ff ff       	call   11158 <task_current>
   111e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   111eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111ee:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   111f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111f6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   111fc:	83 ec 08             	sub    $0x8,%esp
   111ff:	ff 75 f0             	pushl  -0x10(%ebp)
   11202:	ff 75 ec             	pushl  -0x14(%ebp)
   11205:	e8 f2 fc ff ff       	call   10efc <task_switch_from_to>
   1120a:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   1120d:	83 ec 0c             	sub    $0xc,%esp
   11210:	ff 75 f4             	pushl  -0xc(%ebp)
   11213:	e8 79 0d 00 00       	call   11f91 <irq_leave_protection>
   11218:	83 c4 10             	add    $0x10,%esp
}
   1121b:	90                   	nop
   1121c:	c9                   	leave  
   1121d:	c3                   	ret    

0001121e <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   1121e:	55                   	push   %ebp
   1121f:	89 e5                	mov    %esp,%ebp
   11221:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   11224:	e8 2f ff ff ff       	call   11158 <task_current>
   11229:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   1122c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1122f:	8b 40 48             	mov    0x48(%eax),%eax
   11232:	8d 50 ff             	lea    -0x1(%eax),%edx
   11235:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11238:	89 50 48             	mov    %edx,0x48(%eax)
   1123b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1123e:	8b 40 48             	mov    0x48(%eax),%eax
   11241:	85 c0                	test   %eax,%eax
   11243:	75 2d                	jne    11272 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   11245:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11248:	8b 50 44             	mov    0x44(%eax),%edx
   1124b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1124e:	89 50 48             	mov    %edx,0x48(%eax)

        task_set_blocked(curr_task);
   11251:	83 ec 0c             	sub    $0xc,%esp
   11254:	ff 75 f0             	pushl  -0x10(%ebp)
   11257:	e8 8e fe ff ff       	call   110ea <task_set_blocked>
   1125c:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1125f:	83 ec 0c             	sub    $0xc,%esp
   11262:	ff 75 f0             	pushl  -0x10(%ebp)
   11265:	e8 4c fe ff ff       	call   110b6 <task_set_ready>
   1126a:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1126d:	e8 51 ff ff ff       	call   111c3 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   11272:	83 ec 0c             	sub    $0xc,%esp
   11275:	68 1c 70 01 00       	push   $0x1701c
   1127a:	e8 b6 f9 ff ff       	call   10c35 <list_first>
   1127f:	83 c4 10             	add    $0x10,%esp
   11282:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11285:	eb 62                	jmp    112e9 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   11287:	83 ec 0c             	sub    $0xc,%esp
   1128a:	ff 75 f4             	pushl  -0xc(%ebp)
   1128d:	e8 8d f9 ff ff       	call   10c1f <list_node_next>
   11292:	83 c4 10             	add    $0x10,%esp
   11295:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   11298:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1129c:	74 08                	je     112a6 <task_time_tick+0x88>
   1129e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112a1:	83 e8 28             	sub    $0x28,%eax
   112a4:	eb 05                	jmp    112ab <task_time_tick+0x8d>
   112a6:	b8 00 00 00 00       	mov    $0x0,%eax
   112ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   112ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112b1:	8b 40 40             	mov    0x40(%eax),%eax
   112b4:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112ba:	89 50 40             	mov    %edx,0x40(%eax)
   112bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   112c0:	8b 40 40             	mov    0x40(%eax),%eax
   112c3:	85 c0                	test   %eax,%eax
   112c5:	75 1c                	jne    112e3 <task_time_tick+0xc5>
            task_set_wakeup(task);
   112c7:	83 ec 0c             	sub    $0xc,%esp
   112ca:	ff 75 e8             	pushl  -0x18(%ebp)
   112cd:	e8 56 00 00 00       	call   11328 <task_set_wakeup>
   112d2:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   112d5:	83 ec 0c             	sub    $0xc,%esp
   112d8:	ff 75 e8             	pushl  -0x18(%ebp)
   112db:	e8 d6 fd ff ff       	call   110b6 <task_set_ready>
   112e0:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   112e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   112e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112ed:	75 98                	jne    11287 <task_time_tick+0x69>
    }

    task_dispatch();
   112ef:	e8 cf fe ff ff       	call   111c3 <task_dispatch>
}
   112f4:	90                   	nop
   112f5:	c9                   	leave  
   112f6:	c3                   	ret    

000112f7 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   112f7:	55                   	push   %ebp
   112f8:	89 e5                	mov    %esp,%ebp
   112fa:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   112fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11301:	74 22                	je     11325 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   11303:	8b 55 0c             	mov    0xc(%ebp),%edx
   11306:	8b 45 08             	mov    0x8(%ebp),%eax
   11309:	89 50 40             	mov    %edx,0x40(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   1130c:	8b 45 08             	mov    0x8(%ebp),%eax
   1130f:	83 c0 28             	add    $0x28,%eax
   11312:	83 ec 08             	sub    $0x8,%esp
   11315:	50                   	push   %eax
   11316:	68 1c 70 01 00       	push   $0x1701c
   1131b:	e8 96 1b 00 00       	call   12eb6 <list_insert_back>
   11320:	83 c4 10             	add    $0x10,%esp
   11323:	eb 01                	jmp    11326 <task_set_sleep+0x2f>
        return;
   11325:	90                   	nop
}
   11326:	c9                   	leave  
   11327:	c3                   	ret    

00011328 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   11328:	55                   	push   %ebp
   11329:	89 e5                	mov    %esp,%ebp
   1132b:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	83 c0 28             	add    $0x28,%eax
   11334:	83 ec 08             	sub    $0x8,%esp
   11337:	50                   	push   %eax
   11338:	68 1c 70 01 00       	push   $0x1701c
   1133d:	e8 50 1c 00 00       	call   12f92 <list_remove>
   11342:	83 c4 10             	add    $0x10,%esp
}
   11345:	90                   	nop
   11346:	c9                   	leave  
   11347:	c3                   	ret    

00011348 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   11348:	55                   	push   %ebp
   11349:	89 e5                	mov    %esp,%ebp
   1134b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1134e:	e8 26 0c 00 00       	call   11f79 <irq_enter_protection>
   11353:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   11356:	a1 00 70 01 00       	mov    0x17000,%eax
   1135b:	83 ec 0c             	sub    $0xc,%esp
   1135e:	50                   	push   %eax
   1135f:	e8 86 fd ff ff       	call   110ea <task_set_blocked>
   11364:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   11367:	8b 45 08             	mov    0x8(%ebp),%eax
   1136a:	83 c0 09             	add    $0x9,%eax
   1136d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11372:	f7 e2                	mul    %edx
   11374:	c1 ea 03             	shr    $0x3,%edx
   11377:	a1 00 70 01 00       	mov    0x17000,%eax
   1137c:	83 ec 08             	sub    $0x8,%esp
   1137f:	52                   	push   %edx
   11380:	50                   	push   %eax
   11381:	e8 71 ff ff ff       	call   112f7 <task_set_sleep>
   11386:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   11389:	e8 35 fe ff ff       	call   111c3 <task_dispatch>

    irq_leave_protection(state);
   1138e:	83 ec 0c             	sub    $0xc,%esp
   11391:	ff 75 f4             	pushl  -0xc(%ebp)
   11394:	e8 f8 0b 00 00       	call   11f91 <irq_leave_protection>
   11399:	83 c4 10             	add    $0x10,%esp
}
   1139c:	90                   	nop
   1139d:	c9                   	leave  
   1139e:	c3                   	ret    

0001139f <sys_getpid>:


int sys_getpid(void) {
   1139f:	55                   	push   %ebp
   113a0:	89 e5                	mov    %esp,%ebp
   113a2:	83 ec 10             	sub    $0x10,%esp
    task_t* task = task_current();
   113a5:	e8 ae fd ff ff       	call   11158 <task_current>
   113aa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   113ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113b0:	8b 40 24             	mov    0x24(%eax),%eax
   113b3:	c9                   	leave  
   113b4:	c3                   	ret    

000113b5 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   113b5:	55                   	push   %ebp
   113b6:	89 e5                	mov    %esp,%ebp
   113b8:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   113bb:	8b 45 08             	mov    0x8(%ebp),%eax
   113be:	c1 e8 10             	shr    $0x10,%eax
   113c1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   113c5:	8b 45 08             	mov    0x8(%ebp),%eax
   113c8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   113cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   113cf:	83 e8 01             	sub    $0x1,%eax
   113d2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   113d6:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   113da:	90                   	nop
   113db:	c9                   	leave  
   113dc:	c3                   	ret    

000113dd <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   113dd:	55                   	push   %ebp
   113de:	89 e5                	mov    %esp,%ebp
   113e0:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   113e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
   113e9:	8b 45 08             	mov    0x8(%ebp),%eax
   113ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   113ef:	8d 45 f8             	lea    -0x8(%ebp),%eax
   113f2:	ff 28                	ljmp   *(%eax)
}
   113f4:	90                   	nop
   113f5:	c9                   	leave  
   113f6:	c3                   	ret    

000113f7 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   113f7:	55                   	push   %ebp
   113f8:	89 e5                	mov    %esp,%ebp
   113fa:	83 ec 14             	sub    $0x14,%esp
   113fd:	8b 45 14             	mov    0x14(%ebp),%eax
   11400:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   11404:	8b 45 08             	mov    0x8(%ebp),%eax
   11407:	83 e0 f8             	and    $0xfffffff8,%eax
   1140a:	05 a0 81 01 00       	add    $0x181a0,%eax
   1140f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   11412:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11419:	76 0f                	jbe    1142a <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   1141b:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11421:	8b 45 10             	mov    0x10(%ebp),%eax
   11424:	c1 e8 0c             	shr    $0xc,%eax
   11427:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   1142a:	8b 45 10             	mov    0x10(%ebp),%eax
   1142d:	89 c2                	mov    %eax,%edx
   1142f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11432:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   11435:	8b 45 0c             	mov    0xc(%ebp),%eax
   11438:	89 c2                	mov    %eax,%edx
   1143a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1143d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   11441:	8b 45 0c             	mov    0xc(%ebp),%eax
   11444:	c1 e8 10             	shr    $0x10,%eax
   11447:	89 c2                	mov    %eax,%edx
   11449:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1144c:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   1144f:	8b 45 10             	mov    0x10(%ebp),%eax
   11452:	c1 e8 10             	shr    $0x10,%eax
   11455:	c1 e0 08             	shl    $0x8,%eax
   11458:	66 25 00 0f          	and    $0xf00,%ax
   1145c:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11460:	89 c2                	mov    %eax,%edx
   11462:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11465:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11469:	8b 45 0c             	mov    0xc(%ebp),%eax
   1146c:	c1 e8 18             	shr    $0x18,%eax
   1146f:	89 c2                	mov    %eax,%edx
   11471:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11474:	88 50 07             	mov    %dl,0x7(%eax)
}
   11477:	90                   	nop
   11478:	c9                   	leave  
   11479:	c3                   	ret    

0001147a <gate_desc_set>:


// 设置 Interrupt /Call Gate 表项
void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   1147a:	55                   	push   %ebp
   1147b:	89 e5                	mov    %esp,%ebp
   1147d:	83 ec 08             	sub    $0x8,%esp
   11480:	8b 55 0c             	mov    0xc(%ebp),%edx
   11483:	8b 45 14             	mov    0x14(%ebp),%eax
   11486:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1148a:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   1148e:	8b 45 10             	mov    0x10(%ebp),%eax
   11491:	89 c2                	mov    %eax,%edx
   11493:	8b 45 08             	mov    0x8(%ebp),%eax
   11496:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11499:	8b 45 08             	mov    0x8(%ebp),%eax
   1149c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114a0:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   114a4:	8b 45 08             	mov    0x8(%ebp),%eax
   114a7:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   114ab:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   114af:	8b 45 10             	mov    0x10(%ebp),%eax
   114b2:	c1 e8 10             	shr    $0x10,%eax
   114b5:	89 c2                	mov    %eax,%edx
   114b7:	8b 45 08             	mov    0x8(%ebp),%eax
   114ba:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   114be:	90                   	nop
   114bf:	c9                   	leave  
   114c0:	c3                   	ret    

000114c1 <init_gdt>:


void init_gdt(void) {
   114c1:	55                   	push   %ebp
   114c2:	89 e5                	mov    %esp,%ebp
   114c4:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   114c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   114ce:	eb 19                	jmp    114e9 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   114d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d3:	c1 e0 03             	shl    $0x3,%eax
   114d6:	6a 00                	push   $0x0
   114d8:	6a 00                	push   $0x0
   114da:	6a 00                	push   $0x0
   114dc:	50                   	push   %eax
   114dd:	e8 15 ff ff ff       	call   113f7 <segment_desc_set>
   114e2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   114e5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   114e9:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   114f0:	7e de                	jle    114d0 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   114f2:	68 92 40 00 00       	push   $0x4092
   114f7:	6a ff                	push   $0xffffffff
   114f9:	6a 00                	push   $0x0
   114fb:	6a 10                	push   $0x10
   114fd:	e8 f5 fe ff ff       	call   113f7 <segment_desc_set>
   11502:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11505:	68 9a 40 00 00       	push   $0x409a
   1150a:	6a ff                	push   $0xffffffff
   1150c:	6a 00                	push   $0x0
   1150e:	6a 08                	push   $0x8
   11510:	e8 e2 fe ff ff       	call   113f7 <segment_desc_set>
   11515:	83 c4 10             	add    $0x10,%esp

    // syscall 初始化。syscall gate DPL 要为3，这个描述符应该能被用户代码访问
    gate_desc_set((gate_desc_t*)(gdt_table + (SELECTOR_SYSCALL >> 3)), 
   11518:	ba d7 02 01 00       	mov    $0x102d7,%edx
   1151d:	b8 b8 81 01 00       	mov    $0x181b8,%eax
   11522:	68 05 ec 00 00       	push   $0xec05
   11527:	52                   	push   %edx
   11528:	6a 08                	push   $0x8
   1152a:	50                   	push   %eax
   1152b:	e8 4a ff ff ff       	call   1147a <gate_desc_set>
   11530:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS, (uint32_t)exception_handler_syscall, GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11533:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   11538:	68 00 08 00 00       	push   $0x800
   1153d:	50                   	push   %eax
   1153e:	e8 72 fe ff ff       	call   113b5 <lgdt>
   11543:	83 c4 08             	add    $0x8,%esp
}
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <cpu_init>:


void cpu_init(void) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   1154f:	83 ec 08             	sub    $0x8,%esp
   11552:	68 40 34 01 00       	push   $0x13440
   11557:	68 a0 89 01 00       	push   $0x189a0
   1155c:	e8 4b 0e 00 00       	call   123ac <mutex_init>
   11561:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11564:	e8 58 ff ff ff       	call   114c1 <init_gdt>
}
   11569:	90                   	nop
   1156a:	c9                   	leave  
   1156b:	c3                   	ret    

0001156c <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   1156c:	55                   	push   %ebp
   1156d:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   1156f:	8b 45 08             	mov    0x8(%ebp),%eax
   11572:	6a 00                	push   $0x0
   11574:	50                   	push   %eax
   11575:	e8 63 fe ff ff       	call   113dd <far_jump>
   1157a:	83 c4 08             	add    $0x8,%esp
}
   1157d:	90                   	nop
   1157e:	c9                   	leave  
   1157f:	c3                   	ret    

00011580 <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   11580:	55                   	push   %ebp
   11581:	89 e5                	mov    %esp,%ebp
   11583:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   11586:	83 ec 0c             	sub    $0xc,%esp
   11589:	68 a0 89 01 00       	push   $0x189a0
   1158e:	e8 5a 0e 00 00       	call   123ed <mutex_acquire>
   11593:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   11596:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1159d:	eb 36                	jmp    115d5 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   1159f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115a2:	c1 e0 03             	shl    $0x3,%eax
   115a5:	05 a0 81 01 00       	add    $0x181a0,%eax
   115aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   115ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115b0:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   115b4:	66 85 c0             	test   %ax,%ax
   115b7:	75 18                	jne    115d1 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   115b9:	83 ec 0c             	sub    $0xc,%esp
   115bc:	68 a0 89 01 00       	push   $0x189a0
   115c1:	e8 b5 0e 00 00       	call   1247b <mutex_release>
   115c6:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   115c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115cc:	c1 e0 03             	shl    $0x3,%eax
   115cf:	eb 22                	jmp    115f3 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   115d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   115d5:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   115dc:	7e c1                	jle    1159f <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   115de:	83 ec 0c             	sub    $0xc,%esp
   115e1:	68 a0 89 01 00       	push   $0x189a0
   115e6:	e8 90 0e 00 00       	call   1247b <mutex_release>
   115eb:	83 c4 10             	add    $0x10,%esp

    return -1;
   115ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   115f3:	c9                   	leave  
   115f4:	c3                   	ret    

000115f5 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   115f5:	55                   	push   %ebp
   115f6:	89 e5                	mov    %esp,%ebp
   115f8:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   115fb:	83 ec 0c             	sub    $0xc,%esp
   115fe:	68 a0 89 01 00       	push   $0x189a0
   11603:	e8 e5 0d 00 00       	call   123ed <mutex_acquire>
   11608:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   1160b:	8b 45 08             	mov    0x8(%ebp),%eax
   1160e:	c1 e8 03             	shr    $0x3,%eax
   11611:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   11618:	00 00 00 

    mutex_release(&mutex);
   1161b:	83 ec 0c             	sub    $0xc,%esp
   1161e:	68 a0 89 01 00       	push   $0x189a0
   11623:	e8 53 0e 00 00       	call   1247b <mutex_release>
   11628:	83 c4 10             	add    $0x10,%esp
   1162b:	90                   	nop
   1162c:	c9                   	leave  
   1162d:	c3                   	ret    

0001162e <inb>:
static inline uint8_t inb(uint16_t port) {
   1162e:	55                   	push   %ebp
   1162f:	89 e5                	mov    %esp,%ebp
   11631:	83 ec 14             	sub    $0x14,%esp
   11634:	8b 45 08             	mov    0x8(%ebp),%eax
   11637:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1163b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1163f:	89 c2                	mov    %eax,%edx
   11641:	ec                   	in     (%dx),%al
   11642:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11645:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11649:	c9                   	leave  
   1164a:	c3                   	ret    

0001164b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1164b:	55                   	push   %ebp
   1164c:	89 e5                	mov    %esp,%ebp
   1164e:	83 ec 08             	sub    $0x8,%esp
   11651:	8b 55 08             	mov    0x8(%ebp),%edx
   11654:	8b 45 0c             	mov    0xc(%ebp),%eax
   11657:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1165b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1165e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11662:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11666:	ee                   	out    %al,(%dx)
}
   11667:	90                   	nop
   11668:	c9                   	leave  
   11669:	c3                   	ret    

0001166a <cli>:
static inline void cli(void) {
   1166a:	55                   	push   %ebp
   1166b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   1166d:	fa                   	cli    
}
   1166e:	90                   	nop
   1166f:	5d                   	pop    %ebp
   11670:	c3                   	ret    

00011671 <sti>:
static inline void sti(void) {
   11671:	55                   	push   %ebp
   11672:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11674:	fb                   	sti    
}
   11675:	90                   	nop
   11676:	5d                   	pop    %ebp
   11677:	c3                   	ret    

00011678 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11678:	55                   	push   %ebp
   11679:	89 e5                	mov    %esp,%ebp
   1167b:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   1167e:	8b 45 08             	mov    0x8(%ebp),%eax
   11681:	c1 e8 10             	shr    $0x10,%eax
   11684:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   11688:	8b 45 08             	mov    0x8(%ebp),%eax
   1168b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   1168f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11692:	83 e8 01             	sub    $0x1,%eax
   11695:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   11699:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1169d:	90                   	nop
   1169e:	c9                   	leave  
   1169f:	c3                   	ret    

000116a0 <read_cr2>:
static inline uint32_t read_cr2() {
   116a0:	55                   	push   %ebp
   116a1:	89 e5                	mov    %esp,%ebp
   116a3:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   116a6:	0f 20 d0             	mov    %cr2,%eax
   116a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   116ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116af:	c9                   	leave  
   116b0:	c3                   	ret    

000116b1 <hlt>:
static inline void hlt(void) {
   116b1:	55                   	push   %ebp
   116b2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   116b4:	f4                   	hlt    
}
   116b5:	90                   	nop
   116b6:	5d                   	pop    %ebp
   116b7:	c3                   	ret    

000116b8 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   116b8:	55                   	push   %ebp
   116b9:	89 e5                	mov    %esp,%ebp
   116bb:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   116be:	9c                   	pushf  
   116bf:	58                   	pop    %eax
   116c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   116c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116c6:	c9                   	leave  
   116c7:	c3                   	ret    

000116c8 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   116c8:	55                   	push   %ebp
   116c9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   116cb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ce:	50                   	push   %eax
   116cf:	9d                   	popf   
}
   116d0:	90                   	nop
   116d1:	5d                   	pop    %ebp
   116d2:	c3                   	ret    

000116d3 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   116d3:	55                   	push   %ebp
   116d4:	89 e5                	mov    %esp,%ebp
   116d6:	57                   	push   %edi
   116d7:	56                   	push   %esi
   116d8:	53                   	push   %ebx
   116d9:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   116dc:	8b 45 08             	mov    0x8(%ebp),%eax
   116df:	8b 40 3c             	mov    0x3c(%eax),%eax
   116e2:	83 e0 07             	and    $0x7,%eax
   116e5:	85 c0                	test   %eax,%eax
   116e7:	74 14                	je     116fd <dump_core_regs+0x2a>
        ss = frame->ds;
   116e9:	8b 45 08             	mov    0x8(%ebp),%eax
   116ec:	8b 40 0c             	mov    0xc(%eax),%eax
   116ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   116f2:	8b 45 08             	mov    0x8(%ebp),%eax
   116f5:	8b 40 1c             	mov    0x1c(%eax),%eax
   116f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   116fb:	eb 12                	jmp    1170f <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   116fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11700:	8b 40 48             	mov    0x48(%eax),%eax
   11703:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   11706:	8b 45 08             	mov    0x8(%ebp),%eax
   11709:	8b 40 44             	mov    0x44(%eax),%eax
   1170c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   1170f:	8b 45 08             	mov    0x8(%ebp),%eax
   11712:	8b 50 34             	mov    0x34(%eax),%edx
   11715:	8b 45 08             	mov    0x8(%ebp),%eax
   11718:	8b 40 30             	mov    0x30(%eax),%eax
   1171b:	83 ec 04             	sub    $0x4,%esp
   1171e:	52                   	push   %edx
   1171f:	50                   	push   %eax
   11720:	68 4c 34 01 00       	push   $0x1344c
   11725:	e8 cb 19 00 00       	call   130f5 <log_printf>
   1172a:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   1172d:	8b 45 08             	mov    0x8(%ebp),%eax
   11730:	8b 30                	mov    (%eax),%esi
   11732:	8b 45 08             	mov    0x8(%ebp),%eax
   11735:	8b 58 04             	mov    0x4(%eax),%ebx
   11738:	8b 45 08             	mov    0x8(%ebp),%eax
   1173b:	8b 48 08             	mov    0x8(%eax),%ecx
   1173e:	8b 45 08             	mov    0x8(%ebp),%eax
   11741:	8b 50 0c             	mov    0xc(%eax),%edx
   11744:	8b 45 08             	mov    0x8(%ebp),%eax
   11747:	8b 40 3c             	mov    0x3c(%eax),%eax
   1174a:	83 ec 04             	sub    $0x4,%esp
   1174d:	56                   	push   %esi
   1174e:	53                   	push   %ebx
   1174f:	ff 75 e0             	pushl  -0x20(%ebp)
   11752:	51                   	push   %ecx
   11753:	52                   	push   %edx
   11754:	50                   	push   %eax
   11755:	68 64 34 01 00       	push   $0x13464
   1175a:	e8 96 19 00 00       	call   130f5 <log_printf>
   1175f:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   11762:	8b 45 08             	mov    0x8(%ebp),%eax
   11765:	8b 78 18             	mov    0x18(%eax),%edi
   11768:	8b 45 08             	mov    0x8(%ebp),%eax
   1176b:	8b 70 14             	mov    0x14(%eax),%esi
   1176e:	8b 45 08             	mov    0x8(%ebp),%eax
   11771:	8b 58 10             	mov    0x10(%eax),%ebx
   11774:	8b 45 08             	mov    0x8(%ebp),%eax
   11777:	8b 48 24             	mov    0x24(%eax),%ecx
   1177a:	8b 45 08             	mov    0x8(%ebp),%eax
   1177d:	8b 50 20             	mov    0x20(%eax),%edx
   11780:	8b 45 08             	mov    0x8(%ebp),%eax
   11783:	8b 40 2c             	mov    0x2c(%eax),%eax
   11786:	ff 75 e4             	pushl  -0x1c(%ebp)
   11789:	57                   	push   %edi
   1178a:	56                   	push   %esi
   1178b:	53                   	push   %ebx
   1178c:	51                   	push   %ecx
   1178d:	52                   	push   %edx
   1178e:	50                   	push   %eax
   1178f:	68 90 34 01 00       	push   $0x13490
   11794:	e8 5c 19 00 00       	call   130f5 <log_printf>
   11799:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   1179c:	8b 45 08             	mov    0x8(%ebp),%eax
   1179f:	8b 50 40             	mov    0x40(%eax),%edx
   117a2:	8b 45 08             	mov    0x8(%ebp),%eax
   117a5:	8b 40 38             	mov    0x38(%eax),%eax
   117a8:	83 ec 04             	sub    $0x4,%esp
   117ab:	52                   	push   %edx
   117ac:	50                   	push   %eax
   117ad:	68 c9 34 01 00       	push   $0x134c9
   117b2:	e8 3e 19 00 00       	call   130f5 <log_printf>
   117b7:	83 c4 10             	add    $0x10,%esp
}
   117ba:	90                   	nop
   117bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
   117be:	5b                   	pop    %ebx
   117bf:	5e                   	pop    %esi
   117c0:	5f                   	pop    %edi
   117c1:	5d                   	pop    %ebp
   117c2:	c3                   	ret    

000117c3 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   117c3:	55                   	push   %ebp
   117c4:	89 e5                	mov    %esp,%ebp
   117c6:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   117c9:	83 ec 0c             	sub    $0xc,%esp
   117cc:	68 e0 34 01 00       	push   $0x134e0
   117d1:	e8 1f 19 00 00       	call   130f5 <log_printf>
   117d6:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   117d9:	83 ec 08             	sub    $0x8,%esp
   117dc:	ff 75 0c             	pushl  0xc(%ebp)
   117df:	68 0b 35 01 00       	push   $0x1350b
   117e4:	e8 0c 19 00 00       	call   130f5 <log_printf>
   117e9:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   117ec:	83 ec 0c             	sub    $0xc,%esp
   117ef:	ff 75 08             	pushl  0x8(%ebp)
   117f2:	e8 dc fe ff ff       	call   116d3 <dump_core_regs>
   117f7:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   117fa:	e8 b2 fe ff ff       	call   116b1 <hlt>
   117ff:	eb f9                	jmp    117fa <do_default_handler+0x37>

00011801 <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   11801:	55                   	push   %ebp
   11802:	89 e5                	mov    %esp,%ebp
   11804:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   11807:	83 ec 08             	sub    $0x8,%esp
   1180a:	68 1d 35 01 00       	push   $0x1351d
   1180f:	ff 75 08             	pushl  0x8(%ebp)
   11812:	e8 ac ff ff ff       	call   117c3 <do_default_handler>
   11817:	83 c4 10             	add    $0x10,%esp
}
   1181a:	90                   	nop
   1181b:	c9                   	leave  
   1181c:	c3                   	ret    

0001181d <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   1181d:	55                   	push   %ebp
   1181e:	89 e5                	mov    %esp,%ebp
   11820:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   11823:	83 ec 08             	sub    $0x8,%esp
   11826:	68 2f 35 01 00       	push   $0x1352f
   1182b:	ff 75 08             	pushl  0x8(%ebp)
   1182e:	e8 90 ff ff ff       	call   117c3 <do_default_handler>
   11833:	83 c4 10             	add    $0x10,%esp
}
   11836:	90                   	nop
   11837:	c9                   	leave  
   11838:	c3                   	ret    

00011839 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11839:	55                   	push   %ebp
   1183a:	89 e5                	mov    %esp,%ebp
   1183c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   1183f:	83 ec 08             	sub    $0x8,%esp
   11842:	68 49 35 01 00       	push   $0x13549
   11847:	ff 75 08             	pushl  0x8(%ebp)
   1184a:	e8 74 ff ff ff       	call   117c3 <do_default_handler>
   1184f:	83 c4 10             	add    $0x10,%esp
}   
   11852:	90                   	nop
   11853:	c9                   	leave  
   11854:	c3                   	ret    

00011855 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   11855:	55                   	push   %ebp
   11856:	89 e5                	mov    %esp,%ebp
   11858:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   1185b:	83 ec 08             	sub    $0x8,%esp
   1185e:	68 64 35 01 00       	push   $0x13564
   11863:	ff 75 08             	pushl  0x8(%ebp)
   11866:	e8 58 ff ff ff       	call   117c3 <do_default_handler>
   1186b:	83 c4 10             	add    $0x10,%esp
}   
   1186e:	90                   	nop
   1186f:	c9                   	leave  
   11870:	c3                   	ret    

00011871 <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   11871:	55                   	push   %ebp
   11872:	89 e5                	mov    %esp,%ebp
   11874:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   11877:	83 ec 08             	sub    $0x8,%esp
   1187a:	68 7d 35 01 00       	push   $0x1357d
   1187f:	ff 75 08             	pushl  0x8(%ebp)
   11882:	e8 3c ff ff ff       	call   117c3 <do_default_handler>
   11887:	83 c4 10             	add    $0x10,%esp
}   
   1188a:	90                   	nop
   1188b:	c9                   	leave  
   1188c:	c3                   	ret    

0001188d <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   1188d:	55                   	push   %ebp
   1188e:	89 e5                	mov    %esp,%ebp
   11890:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   11893:	83 ec 08             	sub    $0x8,%esp
   11896:	68 93 35 01 00       	push   $0x13593
   1189b:	ff 75 08             	pushl  0x8(%ebp)
   1189e:	e8 20 ff ff ff       	call   117c3 <do_default_handler>
   118a3:	83 c4 10             	add    $0x10,%esp
}   
   118a6:	90                   	nop
   118a7:	c9                   	leave  
   118a8:	c3                   	ret    

000118a9 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   118a9:	55                   	push   %ebp
   118aa:	89 e5                	mov    %esp,%ebp
   118ac:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   118af:	83 ec 08             	sub    $0x8,%esp
   118b2:	68 a7 35 01 00       	push   $0x135a7
   118b7:	ff 75 08             	pushl  0x8(%ebp)
   118ba:	e8 04 ff ff ff       	call   117c3 <do_default_handler>
   118bf:	83 c4 10             	add    $0x10,%esp
}   
   118c2:	90                   	nop
   118c3:	c9                   	leave  
   118c4:	c3                   	ret    

000118c5 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   118c5:	55                   	push   %ebp
   118c6:	89 e5                	mov    %esp,%ebp
   118c8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   118cb:	83 ec 08             	sub    $0x8,%esp
   118ce:	68 c5 35 01 00       	push   $0x135c5
   118d3:	ff 75 08             	pushl  0x8(%ebp)
   118d6:	e8 e8 fe ff ff       	call   117c3 <do_default_handler>
   118db:	83 c4 10             	add    $0x10,%esp
}   
   118de:	90                   	nop
   118df:	c9                   	leave  
   118e0:	c3                   	ret    

000118e1 <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   118e1:	55                   	push   %ebp
   118e2:	89 e5                	mov    %esp,%ebp
   118e4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   118e7:	83 ec 08             	sub    $0x8,%esp
   118ea:	68 df 35 01 00       	push   $0x135df
   118ef:	ff 75 08             	pushl  0x8(%ebp)
   118f2:	e8 cc fe ff ff       	call   117c3 <do_default_handler>
   118f7:	83 c4 10             	add    $0x10,%esp
}   
   118fa:	90                   	nop
   118fb:	c9                   	leave  
   118fc:	c3                   	ret    

000118fd <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   118fd:	55                   	push   %ebp
   118fe:	89 e5                	mov    %esp,%ebp
   11900:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11903:	83 ec 08             	sub    $0x8,%esp
   11906:	68 fb 35 01 00       	push   $0x135fb
   1190b:	ff 75 08             	pushl  0x8(%ebp)
   1190e:	e8 b0 fe ff ff       	call   117c3 <do_default_handler>
   11913:	83 c4 10             	add    $0x10,%esp
}   
   11916:	90                   	nop
   11917:	c9                   	leave  
   11918:	c3                   	ret    

00011919 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11919:	55                   	push   %ebp
   1191a:	89 e5                	mov    %esp,%ebp
   1191c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   1191f:	83 ec 08             	sub    $0x8,%esp
   11922:	68 13 36 01 00       	push   $0x13613
   11927:	ff 75 08             	pushl  0x8(%ebp)
   1192a:	e8 94 fe ff ff       	call   117c3 <do_default_handler>
   1192f:	83 c4 10             	add    $0x10,%esp
}   
   11932:	90                   	nop
   11933:	c9                   	leave  
   11934:	c3                   	ret    

00011935 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   11935:	55                   	push   %ebp
   11936:	89 e5                	mov    %esp,%ebp
   11938:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   1193b:	83 ec 08             	sub    $0x8,%esp
   1193e:	68 2c 36 01 00       	push   $0x1362c
   11943:	ff 75 08             	pushl  0x8(%ebp)
   11946:	e8 78 fe ff ff       	call   117c3 <do_default_handler>
   1194b:	83 c4 10             	add    $0x10,%esp
}   
   1194e:	90                   	nop
   1194f:	c9                   	leave  
   11950:	c3                   	ret    

00011951 <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   11951:	55                   	push   %ebp
   11952:	89 e5                	mov    %esp,%ebp
   11954:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   11957:	83 ec 08             	sub    $0x8,%esp
   1195a:	68 4c 36 01 00       	push   $0x1364c
   1195f:	ff 75 08             	pushl  0x8(%ebp)
   11962:	e8 5c fe ff ff       	call   117c3 <do_default_handler>
   11967:	83 c4 10             	add    $0x10,%esp
}   
   1196a:	90                   	nop
   1196b:	c9                   	leave  
   1196c:	c3                   	ret    

0001196d <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   1196d:	55                   	push   %ebp
   1196e:	89 e5                	mov    %esp,%ebp
   11970:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11973:	83 ec 0c             	sub    $0xc,%esp
   11976:	68 6c 36 01 00       	push   $0x1366c
   1197b:	e8 75 17 00 00       	call   130f5 <log_printf>
   11980:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11983:	83 ec 0c             	sub    $0xc,%esp
   11986:	68 90 36 01 00       	push   $0x13690
   1198b:	e8 65 17 00 00       	call   130f5 <log_printf>
   11990:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   11993:	8b 45 08             	mov    0x8(%ebp),%eax
   11996:	8b 40 34             	mov    0x34(%eax),%eax
   11999:	83 e0 01             	and    $0x1,%eax
   1199c:	85 c0                	test   %eax,%eax
   1199e:	74 12                	je     119b2 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   119a0:	83 ec 0c             	sub    $0xc,%esp
   119a3:	68 bc 36 01 00       	push   $0x136bc
   119a8:	e8 48 17 00 00       	call   130f5 <log_printf>
   119ad:	83 c4 10             	add    $0x10,%esp
   119b0:	eb 10                	jmp    119c2 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   119b2:	83 ec 0c             	sub    $0xc,%esp
   119b5:	68 38 37 01 00       	push   $0x13738
   119ba:	e8 36 17 00 00       	call   130f5 <log_printf>
   119bf:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   119c2:	8b 45 08             	mov    0x8(%ebp),%eax
   119c5:	8b 40 34             	mov    0x34(%eax),%eax
   119c8:	83 e0 02             	and    $0x2,%eax
   119cb:	85 c0                	test   %eax,%eax
   119cd:	74 12                	je     119e1 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   119cf:	83 ec 0c             	sub    $0xc,%esp
   119d2:	68 90 37 01 00       	push   $0x13790
   119d7:	e8 19 17 00 00       	call   130f5 <log_printf>
   119dc:	83 c4 10             	add    $0x10,%esp
   119df:	eb 10                	jmp    119f1 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   119e1:	83 ec 0c             	sub    $0xc,%esp
   119e4:	68 dc 37 01 00       	push   $0x137dc
   119e9:	e8 07 17 00 00       	call   130f5 <log_printf>
   119ee:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   119f1:	8b 45 08             	mov    0x8(%ebp),%eax
   119f4:	8b 40 34             	mov    0x34(%eax),%eax
   119f7:	25 f8 ff 00 00       	and    $0xfff8,%eax
   119fc:	83 ec 08             	sub    $0x8,%esp
   119ff:	50                   	push   %eax
   11a00:	68 08 38 01 00       	push   $0x13808
   11a05:	e8 eb 16 00 00       	call   130f5 <log_printf>
   11a0a:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11a0d:	83 ec 0c             	sub    $0xc,%esp
   11a10:	ff 75 08             	pushl  0x8(%ebp)
   11a13:	e8 bb fc ff ff       	call   116d3 <dump_core_regs>
   11a18:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11a1b:	e8 91 fc ff ff       	call   116b1 <hlt>
   11a20:	eb f9                	jmp    11a1b <do_handler_general_protection+0xae>

00011a22 <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   11a22:	55                   	push   %ebp
   11a23:	89 e5                	mov    %esp,%ebp
   11a25:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11a28:	83 ec 0c             	sub    $0xc,%esp
   11a2b:	68 6c 36 01 00       	push   $0x1366c
   11a30:	e8 c0 16 00 00       	call   130f5 <log_printf>
   11a35:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   11a38:	83 ec 0c             	sub    $0xc,%esp
   11a3b:	68 1a 38 01 00       	push   $0x1381a
   11a40:	e8 b0 16 00 00       	call   130f5 <log_printf>
   11a45:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   11a48:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4b:	8b 40 34             	mov    0x34(%eax),%eax
   11a4e:	83 e0 01             	and    $0x1,%eax
   11a51:	85 c0                	test   %eax,%eax
   11a53:	74 18                	je     11a6d <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   11a55:	e8 46 fc ff ff       	call   116a0 <read_cr2>
   11a5a:	83 ec 08             	sub    $0x8,%esp
   11a5d:	50                   	push   %eax
   11a5e:	68 38 38 01 00       	push   $0x13838
   11a63:	e8 8d 16 00 00       	call   130f5 <log_printf>
   11a68:	83 c4 10             	add    $0x10,%esp
   11a6b:	eb 16                	jmp    11a83 <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   11a6d:	e8 2e fc ff ff       	call   116a0 <read_cr2>
   11a72:	83 ec 08             	sub    $0x8,%esp
   11a75:	50                   	push   %eax
   11a76:	68 60 38 01 00       	push   $0x13860
   11a7b:	e8 75 16 00 00       	call   130f5 <log_printf>
   11a80:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11a83:	8b 45 08             	mov    0x8(%ebp),%eax
   11a86:	8b 40 34             	mov    0x34(%eax),%eax
   11a89:	83 e0 02             	and    $0x2,%eax
   11a8c:	85 c0                	test   %eax,%eax
   11a8e:	74 12                	je     11aa2 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   11a90:	83 ec 0c             	sub    $0xc,%esp
   11a93:	68 90 38 01 00       	push   $0x13890
   11a98:	e8 58 16 00 00       	call   130f5 <log_printf>
   11a9d:	83 c4 10             	add    $0x10,%esp
   11aa0:	eb 10                	jmp    11ab2 <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   11aa2:	83 ec 0c             	sub    $0xc,%esp
   11aa5:	68 bc 38 01 00       	push   $0x138bc
   11aaa:	e8 46 16 00 00       	call   130f5 <log_printf>
   11aaf:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   11ab2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab5:	8b 40 34             	mov    0x34(%eax),%eax
   11ab8:	83 e0 02             	and    $0x2,%eax
   11abb:	85 c0                	test   %eax,%eax
   11abd:	74 12                	je     11ad1 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   11abf:	83 ec 0c             	sub    $0xc,%esp
   11ac2:	68 e8 38 01 00       	push   $0x138e8
   11ac7:	e8 29 16 00 00       	call   130f5 <log_printf>
   11acc:	83 c4 10             	add    $0x10,%esp
   11acf:	eb 10                	jmp    11ae1 <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   11ad1:	83 ec 0c             	sub    $0xc,%esp
   11ad4:	68 14 39 01 00       	push   $0x13914
   11ad9:	e8 17 16 00 00       	call   130f5 <log_printf>
   11ade:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11ae1:	83 ec 0c             	sub    $0xc,%esp
   11ae4:	ff 75 08             	pushl  0x8(%ebp)
   11ae7:	e8 e7 fb ff ff       	call   116d3 <dump_core_regs>
   11aec:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11aef:	e8 bd fb ff ff       	call   116b1 <hlt>
   11af4:	eb f9                	jmp    11aef <do_handler_page_fault+0xcd>

00011af6 <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11af6:	55                   	push   %ebp
   11af7:	89 e5                	mov    %esp,%ebp
   11af9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11afc:	83 ec 08             	sub    $0x8,%esp
   11aff:	68 3c 39 01 00       	push   $0x1393c
   11b04:	ff 75 08             	pushl  0x8(%ebp)
   11b07:	e8 b7 fc ff ff       	call   117c3 <do_default_handler>
   11b0c:	83 c4 10             	add    $0x10,%esp
}   
   11b0f:	90                   	nop
   11b10:	c9                   	leave  
   11b11:	c3                   	ret    

00011b12 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11b12:	55                   	push   %ebp
   11b13:	89 e5                	mov    %esp,%ebp
   11b15:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11b18:	83 ec 08             	sub    $0x8,%esp
   11b1b:	68 5c 39 01 00       	push   $0x1395c
   11b20:	ff 75 08             	pushl  0x8(%ebp)
   11b23:	e8 9b fc ff ff       	call   117c3 <do_default_handler>
   11b28:	83 c4 10             	add    $0x10,%esp
}   
   11b2b:	90                   	nop
   11b2c:	c9                   	leave  
   11b2d:	c3                   	ret    

00011b2e <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11b2e:	55                   	push   %ebp
   11b2f:	89 e5                	mov    %esp,%ebp
   11b31:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11b34:	83 ec 08             	sub    $0x8,%esp
   11b37:	68 76 39 01 00       	push   $0x13976
   11b3c:	ff 75 08             	pushl  0x8(%ebp)
   11b3f:	e8 7f fc ff ff       	call   117c3 <do_default_handler>
   11b44:	83 c4 10             	add    $0x10,%esp
}   
   11b47:	90                   	nop
   11b48:	c9                   	leave  
   11b49:	c3                   	ret    

00011b4a <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11b4a:	55                   	push   %ebp
   11b4b:	89 e5                	mov    %esp,%ebp
   11b4d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11b50:	83 ec 08             	sub    $0x8,%esp
   11b53:	68 90 39 01 00       	push   $0x13990
   11b58:	ff 75 08             	pushl  0x8(%ebp)
   11b5b:	e8 63 fc ff ff       	call   117c3 <do_default_handler>
   11b60:	83 c4 10             	add    $0x10,%esp
}
   11b63:	90                   	nop
   11b64:	c9                   	leave  
   11b65:	c3                   	ret    

00011b66 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11b66:	55                   	push   %ebp
   11b67:	89 e5                	mov    %esp,%ebp
   11b69:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11b6c:	83 ec 08             	sub    $0x8,%esp
   11b6f:	68 bc 39 01 00       	push   $0x139bc
   11b74:	ff 75 08             	pushl  0x8(%ebp)
   11b77:	e8 47 fc ff ff       	call   117c3 <do_default_handler>
   11b7c:	83 c4 10             	add    $0x10,%esp
}
   11b7f:	90                   	nop
   11b80:	c9                   	leave  
   11b81:	c3                   	ret    

00011b82 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11b82:	55                   	push   %ebp
   11b83:	89 e5                	mov    %esp,%ebp
   11b85:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11b88:	83 ec 08             	sub    $0x8,%esp
   11b8b:	68 e0 39 01 00       	push   $0x139e0
   11b90:	ff 75 08             	pushl  0x8(%ebp)
   11b93:	e8 2b fc ff ff       	call   117c3 <do_default_handler>
   11b98:	83 c4 10             	add    $0x10,%esp
}
   11b9b:	90                   	nop
   11b9c:	c9                   	leave  
   11b9d:	c3                   	ret    

00011b9e <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11b9e:	55                   	push   %ebp
   11b9f:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11ba1:	6a 11                	push   $0x11
   11ba3:	6a 20                	push   $0x20
   11ba5:	e8 a1 fa ff ff       	call   1164b <outb>
   11baa:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11bad:	6a 20                	push   $0x20
   11baf:	6a 21                	push   $0x21
   11bb1:	e8 95 fa ff ff       	call   1164b <outb>
   11bb6:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11bb9:	6a 04                	push   $0x4
   11bbb:	6a 21                	push   $0x21
   11bbd:	e8 89 fa ff ff       	call   1164b <outb>
   11bc2:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11bc5:	6a 01                	push   $0x1
   11bc7:	6a 21                	push   $0x21
   11bc9:	e8 7d fa ff ff       	call   1164b <outb>
   11bce:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11bd1:	6a 11                	push   $0x11
   11bd3:	68 a0 00 00 00       	push   $0xa0
   11bd8:	e8 6e fa ff ff       	call   1164b <outb>
   11bdd:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11be0:	6a 28                	push   $0x28
   11be2:	68 a1 00 00 00       	push   $0xa1
   11be7:	e8 5f fa ff ff       	call   1164b <outb>
   11bec:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11bef:	6a 02                	push   $0x2
   11bf1:	68 a1 00 00 00       	push   $0xa1
   11bf6:	e8 50 fa ff ff       	call   1164b <outb>
   11bfb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11bfe:	6a 01                	push   $0x1
   11c00:	68 a1 00 00 00       	push   $0xa1
   11c05:	e8 41 fa ff ff       	call   1164b <outb>
   11c0a:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11c0d:	68 fb 00 00 00       	push   $0xfb
   11c12:	6a 21                	push   $0x21
   11c14:	e8 32 fa ff ff       	call   1164b <outb>
   11c19:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11c1c:	68 ff 00 00 00       	push   $0xff
   11c21:	68 a1 00 00 00       	push   $0xa1
   11c26:	e8 20 fa ff ff       	call   1164b <outb>
   11c2b:	83 c4 08             	add    $0x8,%esp
}
   11c2e:	90                   	nop
   11c2f:	c9                   	leave  
   11c30:	c3                   	ret    

00011c31 <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11c31:	55                   	push   %ebp
   11c32:	89 e5                	mov    %esp,%ebp
   11c34:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11c37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c3e:	eb 25                	jmp    11c65 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11c40:	ba 26 00 01 00       	mov    $0x10026,%edx
   11c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c48:	c1 e0 03             	shl    $0x3,%eax
   11c4b:	05 00 8a 01 00       	add    $0x18a00,%eax
   11c50:	68 00 8e 00 00       	push   $0x8e00
   11c55:	52                   	push   %edx
   11c56:	6a 08                	push   $0x8
   11c58:	50                   	push   %eax
   11c59:	e8 1c f8 ff ff       	call   1147a <gate_desc_set>
   11c5e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11c61:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c65:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11c69:	7e d5                	jle    11c40 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11c6b:	83 ec 08             	sub    $0x8,%esp
   11c6e:	68 45 00 01 00       	push   $0x10045
   11c73:	6a 00                	push   $0x0
   11c75:	e8 77 01 00 00       	call   11df1 <irq_install>
   11c7a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11c7d:	83 ec 08             	sub    $0x8,%esp
   11c80:	68 64 00 01 00       	push   $0x10064
   11c85:	6a 01                	push   $0x1
   11c87:	e8 65 01 00 00       	call   11df1 <irq_install>
   11c8c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11c8f:	83 ec 08             	sub    $0x8,%esp
   11c92:	68 83 00 01 00       	push   $0x10083
   11c97:	6a 02                	push   $0x2
   11c99:	e8 53 01 00 00       	call   11df1 <irq_install>
   11c9e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11ca1:	83 ec 08             	sub    $0x8,%esp
   11ca4:	68 a2 00 01 00       	push   $0x100a2
   11ca9:	6a 03                	push   $0x3
   11cab:	e8 41 01 00 00       	call   11df1 <irq_install>
   11cb0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   11cb3:	83 ec 08             	sub    $0x8,%esp
   11cb6:	68 c1 00 01 00       	push   $0x100c1
   11cbb:	6a 04                	push   $0x4
   11cbd:	e8 2f 01 00 00       	call   11df1 <irq_install>
   11cc2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11cc5:	83 ec 08             	sub    $0x8,%esp
   11cc8:	68 e0 00 01 00       	push   $0x100e0
   11ccd:	6a 05                	push   $0x5
   11ccf:	e8 1d 01 00 00       	call   11df1 <irq_install>
   11cd4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11cd7:	83 ec 08             	sub    $0x8,%esp
   11cda:	68 ff 00 01 00       	push   $0x100ff
   11cdf:	6a 06                	push   $0x6
   11ce1:	e8 0b 01 00 00       	call   11df1 <irq_install>
   11ce6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11ce9:	83 ec 08             	sub    $0x8,%esp
   11cec:	68 1e 01 01 00       	push   $0x1011e
   11cf1:	6a 07                	push   $0x7
   11cf3:	e8 f9 00 00 00       	call   11df1 <irq_install>
   11cf8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11cfb:	83 ec 08             	sub    $0x8,%esp
   11cfe:	68 3d 01 01 00       	push   $0x1013d
   11d03:	6a 08                	push   $0x8
   11d05:	e8 e7 00 00 00       	call   11df1 <irq_install>
   11d0a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11d0d:	83 ec 08             	sub    $0x8,%esp
   11d10:	68 5a 01 01 00       	push   $0x1015a
   11d15:	6a 0a                	push   $0xa
   11d17:	e8 d5 00 00 00       	call   11df1 <irq_install>
   11d1c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11d1f:	83 ec 08             	sub    $0x8,%esp
   11d22:	68 77 01 01 00       	push   $0x10177
   11d27:	6a 0b                	push   $0xb
   11d29:	e8 c3 00 00 00       	call   11df1 <irq_install>
   11d2e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11d31:	83 ec 08             	sub    $0x8,%esp
   11d34:	68 94 01 01 00       	push   $0x10194
   11d39:	6a 0c                	push   $0xc
   11d3b:	e8 b1 00 00 00       	call   11df1 <irq_install>
   11d40:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11d43:	83 ec 08             	sub    $0x8,%esp
   11d46:	68 b3 01 01 00       	push   $0x101b3
   11d4b:	6a 0d                	push   $0xd
   11d4d:	e8 9f 00 00 00       	call   11df1 <irq_install>
   11d52:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11d55:	83 ec 08             	sub    $0x8,%esp
   11d58:	68 d0 01 01 00       	push   $0x101d0
   11d5d:	6a 0e                	push   $0xe
   11d5f:	e8 8d 00 00 00       	call   11df1 <irq_install>
   11d64:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11d67:	83 ec 08             	sub    $0x8,%esp
   11d6a:	68 ed 01 01 00       	push   $0x101ed
   11d6f:	6a 10                	push   $0x10
   11d71:	e8 7b 00 00 00       	call   11df1 <irq_install>
   11d76:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11d79:	83 ec 08             	sub    $0x8,%esp
   11d7c:	68 0c 02 01 00       	push   $0x1020c
   11d81:	6a 11                	push   $0x11
   11d83:	e8 69 00 00 00       	call   11df1 <irq_install>
   11d88:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11d8b:	83 ec 08             	sub    $0x8,%esp
   11d8e:	68 29 02 01 00       	push   $0x10229
   11d93:	6a 12                	push   $0x12
   11d95:	e8 57 00 00 00       	call   11df1 <irq_install>
   11d9a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11d9d:	83 ec 08             	sub    $0x8,%esp
   11da0:	68 48 02 01 00       	push   $0x10248
   11da5:	6a 13                	push   $0x13
   11da7:	e8 45 00 00 00       	call   11df1 <irq_install>
   11dac:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11daf:	83 ec 08             	sub    $0x8,%esp
   11db2:	68 67 02 01 00       	push   $0x10267
   11db7:	6a 14                	push   $0x14
   11db9:	e8 33 00 00 00       	call   11df1 <irq_install>
   11dbe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11dc1:	83 ec 08             	sub    $0x8,%esp
   11dc4:	68 86 02 01 00       	push   $0x10286
   11dc9:	6a 15                	push   $0x15
   11dcb:	e8 21 00 00 00       	call   11df1 <irq_install>
   11dd0:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11dd3:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11dd8:	83 ec 08             	sub    $0x8,%esp
   11ddb:	68 00 04 00 00       	push   $0x400
   11de0:	50                   	push   %eax
   11de1:	e8 92 f8 ff ff       	call   11678 <lidt>
   11de6:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11de9:	e8 b0 fd ff ff       	call   11b9e <init_pic>
}
   11dee:	90                   	nop
   11def:	c9                   	leave  
   11df0:	c3                   	ret    

00011df1 <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11df1:	55                   	push   %ebp
   11df2:	89 e5                	mov    %esp,%ebp
   11df4:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11df7:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11dfb:	7e 07                	jle    11e04 <irq_install+0x13>
        return -1;
   11dfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e02:	eb 20                	jmp    11e24 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11e04:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e07:	8b 55 08             	mov    0x8(%ebp),%edx
   11e0a:	c1 e2 03             	shl    $0x3,%edx
   11e0d:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11e13:	68 00 8e 00 00       	push   $0x8e00
   11e18:	50                   	push   %eax
   11e19:	6a 08                	push   $0x8
   11e1b:	52                   	push   %edx
   11e1c:	e8 59 f6 ff ff       	call   1147a <gate_desc_set>
   11e21:	83 c4 10             	add    $0x10,%esp
}
   11e24:	c9                   	leave  
   11e25:	c3                   	ret    

00011e26 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11e26:	55                   	push   %ebp
   11e27:	89 e5                	mov    %esp,%ebp
   11e29:	53                   	push   %ebx
   11e2a:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11e2d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e31:	7e 78                	jle    11eab <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11e33:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11e37:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e3b:	7f 32                	jg     11e6f <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11e3d:	6a 21                	push   $0x21
   11e3f:	e8 ea f7 ff ff       	call   1162e <inb>
   11e44:	83 c4 04             	add    $0x4,%esp
   11e47:	89 c2                	mov    %eax,%edx
   11e49:	8b 45 08             	mov    0x8(%ebp),%eax
   11e4c:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e51:	89 c1                	mov    %eax,%ecx
   11e53:	d3 e3                	shl    %cl,%ebx
   11e55:	89 d8                	mov    %ebx,%eax
   11e57:	f7 d0                	not    %eax
   11e59:	21 d0                	and    %edx,%eax
   11e5b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11e5e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e62:	50                   	push   %eax
   11e63:	6a 21                	push   $0x21
   11e65:	e8 e1 f7 ff ff       	call   1164b <outb>
   11e6a:	83 c4 08             	add    $0x8,%esp
   11e6d:	eb 3d                	jmp    11eac <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11e6f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11e73:	68 a1 00 00 00       	push   $0xa1
   11e78:	e8 b1 f7 ff ff       	call   1162e <inb>
   11e7d:	83 c4 04             	add    $0x4,%esp
   11e80:	89 c2                	mov    %eax,%edx
   11e82:	8b 45 08             	mov    0x8(%ebp),%eax
   11e85:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e8a:	89 c1                	mov    %eax,%ecx
   11e8c:	d3 e3                	shl    %cl,%ebx
   11e8e:	89 d8                	mov    %ebx,%eax
   11e90:	f7 d0                	not    %eax
   11e92:	21 d0                	and    %edx,%eax
   11e94:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11e97:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11e9b:	50                   	push   %eax
   11e9c:	68 a1 00 00 00       	push   $0xa1
   11ea1:	e8 a5 f7 ff ff       	call   1164b <outb>
   11ea6:	83 c4 08             	add    $0x8,%esp
   11ea9:	eb 01                	jmp    11eac <irq_enable+0x86>
        return;
   11eab:	90                   	nop
    }
}
   11eac:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11eaf:	c9                   	leave  
   11eb0:	c3                   	ret    

00011eb1 <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11eb1:	55                   	push   %ebp
   11eb2:	89 e5                	mov    %esp,%ebp
   11eb4:	53                   	push   %ebx
   11eb5:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11eb8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11ebc:	7e 74                	jle    11f32 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11ebe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11ec2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ec6:	7f 30                	jg     11ef8 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11ec8:	6a 21                	push   $0x21
   11eca:	e8 5f f7 ff ff       	call   1162e <inb>
   11ecf:	83 c4 04             	add    $0x4,%esp
   11ed2:	89 c3                	mov    %eax,%ebx
   11ed4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed7:	ba 01 00 00 00       	mov    $0x1,%edx
   11edc:	89 c1                	mov    %eax,%ecx
   11ede:	d3 e2                	shl    %cl,%edx
   11ee0:	89 d0                	mov    %edx,%eax
   11ee2:	09 d8                	or     %ebx,%eax
   11ee4:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11ee7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11eeb:	50                   	push   %eax
   11eec:	6a 21                	push   $0x21
   11eee:	e8 58 f7 ff ff       	call   1164b <outb>
   11ef3:	83 c4 08             	add    $0x8,%esp
   11ef6:	eb 3b                	jmp    11f33 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11ef8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11efc:	68 a1 00 00 00       	push   $0xa1
   11f01:	e8 28 f7 ff ff       	call   1162e <inb>
   11f06:	83 c4 04             	add    $0x4,%esp
   11f09:	89 c3                	mov    %eax,%ebx
   11f0b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0e:	ba 01 00 00 00       	mov    $0x1,%edx
   11f13:	89 c1                	mov    %eax,%ecx
   11f15:	d3 e2                	shl    %cl,%edx
   11f17:	89 d0                	mov    %edx,%eax
   11f19:	09 d8                	or     %ebx,%eax
   11f1b:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11f1e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11f22:	50                   	push   %eax
   11f23:	68 a1 00 00 00       	push   $0xa1
   11f28:	e8 1e f7 ff ff       	call   1164b <outb>
   11f2d:	83 c4 08             	add    $0x8,%esp
   11f30:	eb 01                	jmp    11f33 <irq_disable+0x82>
        return;
   11f32:	90                   	nop
    }
}
   11f33:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11f36:	c9                   	leave  
   11f37:	c3                   	ret    

00011f38 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11f38:	55                   	push   %ebp
   11f39:	89 e5                	mov    %esp,%ebp
    cli();
   11f3b:	e8 2a f7 ff ff       	call   1166a <cli>
}
   11f40:	90                   	nop
   11f41:	5d                   	pop    %ebp
   11f42:	c3                   	ret    

00011f43 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11f43:	55                   	push   %ebp
   11f44:	89 e5                	mov    %esp,%ebp
    sti();
   11f46:	e8 26 f7 ff ff       	call   11671 <sti>
}
   11f4b:	90                   	nop
   11f4c:	5d                   	pop    %ebp
   11f4d:	c3                   	ret    

00011f4e <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11f4e:	55                   	push   %ebp
   11f4f:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11f51:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11f55:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11f59:	7e 0f                	jle    11f6a <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11f5b:	6a 20                	push   $0x20
   11f5d:	68 a0 00 00 00       	push   $0xa0
   11f62:	e8 e4 f6 ff ff       	call   1164b <outb>
   11f67:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11f6a:	6a 20                	push   $0x20
   11f6c:	6a 20                	push   $0x20
   11f6e:	e8 d8 f6 ff ff       	call   1164b <outb>
   11f73:	83 c4 08             	add    $0x8,%esp
}
   11f76:	90                   	nop
   11f77:	c9                   	leave  
   11f78:	c3                   	ret    

00011f79 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11f79:	55                   	push   %ebp
   11f7a:	89 e5                	mov    %esp,%ebp
   11f7c:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11f7f:	e8 34 f7 ff ff       	call   116b8 <read_eflags>
   11f84:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11f87:	e8 ac ff ff ff       	call   11f38 <irq_disable_global>
    return state;
   11f8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11f8f:	c9                   	leave  
   11f90:	c3                   	ret    

00011f91 <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11f91:	55                   	push   %ebp
   11f92:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11f94:	ff 75 08             	pushl  0x8(%ebp)
   11f97:	e8 2c f7 ff ff       	call   116c8 <write_eflags>
   11f9c:	83 c4 04             	add    $0x4,%esp
   11f9f:	90                   	nop
   11fa0:	c9                   	leave  
   11fa1:	c3                   	ret    

00011fa2 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11fa2:	55                   	push   %ebp
   11fa3:	89 e5                	mov    %esp,%ebp
   11fa5:	83 ec 08             	sub    $0x8,%esp
   11fa8:	8b 55 08             	mov    0x8(%ebp),%edx
   11fab:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fae:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11fb2:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11fb5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11fb9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11fbd:	ee                   	out    %al,(%dx)
}
   11fbe:	90                   	nop
   11fbf:	c9                   	leave  
   11fc0:	c3                   	ret    

00011fc1 <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11fc1:	55                   	push   %ebp
   11fc2:	89 e5                	mov    %esp,%ebp
   11fc4:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11fc7:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11fcc:	83 c0 01             	add    $0x1,%eax
   11fcf:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11fd4:	83 ec 0c             	sub    $0xc,%esp
   11fd7:	6a 20                	push   $0x20
   11fd9:	e8 70 ff ff ff       	call   11f4e <pic_send_eoi>
   11fde:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11fe1:	e8 38 f2 ff ff       	call   1121e <task_time_tick>
}
   11fe6:	90                   	nop
   11fe7:	c9                   	leave  
   11fe8:	c3                   	ret    

00011fe9 <init_pit>:


static void init_pit(void) {
   11fe9:	55                   	push   %ebp
   11fea:	89 e5                	mov    %esp,%ebp
   11fec:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11fef:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11ff6:	6a 36                	push   $0x36
   11ff8:	6a 43                	push   $0x43
   11ffa:	e8 a3 ff ff ff       	call   11fa2 <outb>
   11fff:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   12002:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12005:	0f b6 c0             	movzbl %al,%eax
   12008:	50                   	push   %eax
   12009:	6a 40                	push   $0x40
   1200b:	e8 92 ff ff ff       	call   11fa2 <outb>
   12010:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   12013:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12016:	c1 e8 08             	shr    $0x8,%eax
   12019:	0f b6 c0             	movzbl %al,%eax
   1201c:	50                   	push   %eax
   1201d:	6a 40                	push   $0x40
   1201f:	e8 7e ff ff ff       	call   11fa2 <outb>
   12024:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   12027:	83 ec 08             	sub    $0x8,%esp
   1202a:	68 a3 02 01 00       	push   $0x102a3
   1202f:	6a 20                	push   $0x20
   12031:	e8 bb fd ff ff       	call   11df1 <irq_install>
   12036:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   12039:	83 ec 0c             	sub    $0xc,%esp
   1203c:	6a 20                	push   $0x20
   1203e:	e8 e3 fd ff ff       	call   11e26 <irq_enable>
   12043:	83 c4 10             	add    $0x10,%esp
}
   12046:	90                   	nop
   12047:	c9                   	leave  
   12048:	c3                   	ret    

00012049 <timer_init>:

void timer_init(void) {
   12049:	55                   	push   %ebp
   1204a:	89 e5                	mov    %esp,%ebp
   1204c:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1204f:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   12056:	00 00 00 
    init_pit();
   12059:	e8 8b ff ff ff       	call   11fe9 <init_pit>
   1205e:	90                   	nop
   1205f:	c9                   	leave  
   12060:	c3                   	ret    

00012061 <list_size>:
static inline int list_size(list_t* list) {
   12061:	55                   	push   %ebp
   12062:	89 e5                	mov    %esp,%ebp
    return list->count;
   12064:	8b 45 08             	mov    0x8(%ebp),%eax
   12067:	8b 40 08             	mov    0x8(%eax),%eax
}
   1206a:	5d                   	pop    %ebp
   1206b:	c3                   	ret    

0001206c <list_first>:
static inline list_node_t* list_first(list_t* list) {
   1206c:	55                   	push   %ebp
   1206d:	89 e5                	mov    %esp,%ebp
    return list->first;
   1206f:	8b 45 08             	mov    0x8(%ebp),%eax
   12072:	8b 00                	mov    (%eax),%eax
}
   12074:	5d                   	pop    %ebp
   12075:	c3                   	ret    

00012076 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   12076:	55                   	push   %ebp
   12077:	89 e5                	mov    %esp,%ebp
    return list->last;
   12079:	8b 45 08             	mov    0x8(%ebp),%eax
   1207c:	8b 40 04             	mov    0x4(%eax),%eax
}
   1207f:	5d                   	pop    %ebp
   12080:	c3                   	ret    

00012081 <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   12081:	55                   	push   %ebp
   12082:	89 e5                	mov    %esp,%ebp
   12084:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   12087:	8b 45 08             	mov    0x8(%ebp),%eax
   1208a:	8b 40 50             	mov    0x50(%eax),%eax
   1208d:	85 c0                	test   %eax,%eax
   1208f:	75 19                	jne    120aa <kernel_init+0x29>
   12091:	68 08 3a 01 00       	push   $0x13a08
   12096:	68 18 3b 01 00       	push   $0x13b18
   1209b:	6a 12                	push   $0x12
   1209d:	68 2c 3a 01 00       	push   $0x13a2c
   120a2:	e8 44 0d 00 00       	call   12deb <pannic>
   120a7:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   120aa:	90                   	nop


    log_init();
   120ab:	e8 a3 0f 00 00       	call   13053 <log_init>

    memory_init(boot_info);
   120b0:	83 ec 0c             	sub    $0xc,%esp
   120b3:	ff 75 08             	pushl  0x8(%ebp)
   120b6:	e8 e1 e7 ff ff       	call   1089c <memory_init>
   120bb:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   120be:	e8 86 f4 ff ff       	call   11549 <cpu_init>


    irq_init();
   120c3:	e8 69 fb ff ff       	call   11c31 <irq_init>
    timer_init();
   120c8:	e8 7c ff ff ff       	call   12049 <timer_init>

    task_manager_init();
   120cd:	e8 52 ee ff ff       	call   10f24 <task_manager_init>
}
   120d2:	90                   	nop
   120d3:	c9                   	leave  
   120d4:	c3                   	ret    

000120d5 <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   120d5:	55                   	push   %ebp
   120d6:	89 e5                	mov    %esp,%ebp
   120d8:	56                   	push   %esi
   120d9:	53                   	push   %ebx
   120da:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   120dd:	83 ec 0c             	sub    $0xc,%esp
   120e0:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120e3:	50                   	push   %eax
   120e4:	e8 4b 0d 00 00       	call   12e34 <list_init>
   120e9:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   120ec:	83 ec 0c             	sub    $0xc,%esp
   120ef:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120f2:	50                   	push   %eax
   120f3:	e8 69 ff ff ff       	call   12061 <list_size>
   120f8:	83 c4 10             	add    $0x10,%esp
   120fb:	89 c6                	mov    %eax,%esi
   120fd:	83 ec 0c             	sub    $0xc,%esp
   12100:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12103:	50                   	push   %eax
   12104:	e8 6d ff ff ff       	call   12076 <list_last>
   12109:	83 c4 10             	add    $0x10,%esp
   1210c:	89 c3                	mov    %eax,%ebx
   1210e:	83 ec 0c             	sub    $0xc,%esp
   12111:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12114:	50                   	push   %eax
   12115:	e8 52 ff ff ff       	call   1206c <list_first>
   1211a:	83 c4 10             	add    $0x10,%esp
   1211d:	56                   	push   %esi
   1211e:	53                   	push   %ebx
   1211f:	50                   	push   %eax
   12120:	68 74 3a 01 00       	push   $0x13a74
   12125:	e8 cb 0f 00 00       	call   130f5 <log_printf>
   1212a:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   1212d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12134:	eb 3b                	jmp    12171 <link_test+0x9c>
        list_node_t* node = &nodes[i];
   12136:	8d 45 a8             	lea    -0x58(%ebp),%eax
   12139:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1213c:	c1 e2 03             	shl    $0x3,%edx
   1213f:	01 d0                	add    %edx,%eax
   12141:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   12144:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12147:	83 ec 04             	sub    $0x4,%esp
   1214a:	50                   	push   %eax
   1214b:	ff 75 f4             	pushl  -0xc(%ebp)
   1214e:	68 9d 3a 01 00       	push   $0x13a9d
   12153:	e8 9d 0f 00 00       	call   130f5 <log_printf>
   12158:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   1215b:	83 ec 08             	sub    $0x8,%esp
   1215e:	ff 75 dc             	pushl  -0x24(%ebp)
   12161:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12164:	50                   	push   %eax
   12165:	e8 ed 0c 00 00       	call   12e57 <list_insert_front>
   1216a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   1216d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12171:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   12175:	7e bf                	jle    12136 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   12177:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1217e:	eb 33                	jmp    121b3 <link_test+0xde>
        list_remove_front(&list);
   12180:	83 ec 0c             	sub    $0xc,%esp
   12183:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12186:	50                   	push   %eax
   12187:	e8 8d 0d 00 00       	call   12f19 <list_remove_front>
   1218c:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   1218f:	83 ec 0c             	sub    $0xc,%esp
   12192:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12195:	50                   	push   %eax
   12196:	e8 c6 fe ff ff       	call   12061 <list_size>
   1219b:	83 c4 10             	add    $0x10,%esp
   1219e:	83 ec 08             	sub    $0x8,%esp
   121a1:	50                   	push   %eax
   121a2:	68 a5 3a 01 00       	push   $0x13aa5
   121a7:	e8 49 0f 00 00       	call   130f5 <log_printf>
   121ac:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   121af:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121b3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   121b7:	7e c7                	jle    12180 <link_test+0xab>
    }

    list_init(&list);
   121b9:	83 ec 0c             	sub    $0xc,%esp
   121bc:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121bf:	50                   	push   %eax
   121c0:	e8 6f 0c 00 00       	call   12e34 <list_init>
   121c5:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   121c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   121cf:	eb 3b                	jmp    1220c <link_test+0x137>
        list_node_t* node = &nodes[i];
   121d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
   121d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
   121d7:	c1 e2 03             	shl    $0x3,%edx
   121da:	01 d0                	add    %edx,%eax
   121dc:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   121df:	8b 45 e0             	mov    -0x20(%ebp),%eax
   121e2:	83 ec 04             	sub    $0x4,%esp
   121e5:	50                   	push   %eax
   121e6:	ff 75 ec             	pushl  -0x14(%ebp)
   121e9:	68 9d 3a 01 00       	push   $0x13a9d
   121ee:	e8 02 0f 00 00       	call   130f5 <log_printf>
   121f3:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   121f6:	83 ec 08             	sub    $0x8,%esp
   121f9:	ff 75 e0             	pushl  -0x20(%ebp)
   121fc:	8d 45 d0             	lea    -0x30(%ebp),%eax
   121ff:	50                   	push   %eax
   12200:	e8 b1 0c 00 00       	call   12eb6 <list_insert_back>
   12205:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12208:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1220c:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12210:	7e bf                	jle    121d1 <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   12212:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   12219:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   12220:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   12227:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   1222e:	8d 45 9c             	lea    -0x64(%ebp),%eax
   12231:	83 c0 04             	add    $0x4,%eax
   12234:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   12237:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1223b:	74 08                	je     12245 <link_test+0x170>
   1223d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12240:	83 e8 04             	sub    $0x4,%eax
   12243:	eb 05                	jmp    1224a <link_test+0x175>
   12245:	b8 00 00 00 00       	mov    $0x0,%eax
   1224a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   1224d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12250:	8b 00                	mov    (%eax),%eax
   12252:	3d 56 34 12 00       	cmp    $0x123456,%eax
   12257:	74 10                	je     12269 <link_test+0x194>
        log_printf("error!");
   12259:	83 ec 0c             	sub    $0xc,%esp
   1225c:	68 aa 3a 01 00       	push   $0x13aaa
   12261:	e8 8f 0e 00 00       	call   130f5 <log_printf>
   12266:	83 c4 10             	add    $0x10,%esp
    }

}
   12269:	90                   	nop
   1226a:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1226d:	5b                   	pop    %ebx
   1226e:	5e                   	pop    %esi
   1226f:	5d                   	pop    %ebp
   12270:	c3                   	ret    

00012271 <move_to_first_task>:


void move_to_first_task(void) {
   12271:	55                   	push   %ebp
   12272:	89 e5                	mov    %esp,%ebp
   12274:	56                   	push   %esi
   12275:	53                   	push   %ebx
   12276:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   12279:	e8 da ee ff ff       	call   11158 <task_current>
   1227e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   12281:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12285:	75 19                	jne    122a0 <move_to_first_task+0x2f>
   12287:	68 b1 3a 01 00       	push   $0x13ab1
   1228c:	68 24 3b 01 00       	push   $0x13b24
   12291:	6a 68                	push   $0x68
   12293:	68 2c 3a 01 00       	push   $0x13a2c
   12298:	e8 4e 0b 00 00       	call   12deb <pannic>
   1229d:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   122a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122a3:	83 c0 4c             	add    $0x4c,%eax
   122a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"        // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   122a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122ac:	8b 40 50             	mov    0x50(%eax),%eax
   122af:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122b2:	8b 52 38             	mov    0x38(%edx),%edx
   122b5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   122b8:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   122bb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   122be:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   122c1:	8b 75 f0             	mov    -0x10(%ebp),%esi
   122c4:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   122c7:	50                   	push   %eax
   122c8:	52                   	push   %edx
   122c9:	51                   	push   %ecx
   122ca:	53                   	push   %ebx
   122cb:	56                   	push   %esi
   122cc:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   122cd:	90                   	nop
   122ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
   122d1:	5b                   	pop    %ebx
   122d2:	5e                   	pop    %esi
   122d3:	5d                   	pop    %ebp
   122d4:	c3                   	ret    

000122d5 <test_task1>:



static void test_task1(void) {
   122d5:	55                   	push   %ebp
   122d6:	89 e5                	mov    %esp,%ebp
   122d8:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   122db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task1: %d", count);
   122e2:	83 ec 08             	sub    $0x8,%esp
   122e5:	ff 75 f4             	pushl  -0xc(%ebp)
   122e8:	68 bb 3a 01 00       	push   $0x13abb
   122ed:	e8 03 0e 00 00       	call   130f5 <log_printf>
   122f2:	83 c4 10             	add    $0x10,%esp
        count++;
   122f5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   122f9:	83 ec 0c             	sub    $0xc,%esp
   122fc:	68 e8 03 00 00       	push   $0x3e8
   12301:	e8 42 f0 ff ff       	call   11348 <sys_sleep>
   12306:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task1: %d", count);
   12309:	eb d7                	jmp    122e2 <test_task1+0xd>

0001230b <test_task2>:
    }
}


static void test_task2(void) {
   1230b:	55                   	push   %ebp
   1230c:	89 e5                	mov    %esp,%ebp
   1230e:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12311:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        log_printf("test_task2: %d", count);
   12318:	83 ec 08             	sub    $0x8,%esp
   1231b:	ff 75 f4             	pushl  -0xc(%ebp)
   1231e:	68 ca 3a 01 00       	push   $0x13aca
   12323:	e8 cd 0d 00 00       	call   130f5 <log_printf>
   12328:	83 c4 10             	add    $0x10,%esp
        count++;
   1232b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        sys_sleep(1000);
   1232f:	83 ec 0c             	sub    $0xc,%esp
   12332:	68 e8 03 00 00       	push   $0x3e8
   12337:	e8 0c f0 ff ff       	call   11348 <sys_sleep>
   1233c:	83 c4 10             	add    $0x10,%esp
        log_printf("test_task2: %d", count);
   1233f:	eb d7                	jmp    12318 <test_task2+0xd>

00012341 <init_main>:
static task_t task1;
static task_t task2;
static uint32_t stack1[MEM_PAGE_SIZE];
static uint32_t stack2[MEM_PAGE_SIZE];

void init_main(void) {
   12341:	55                   	push   %ebp
   12342:	89 e5                	mov    %esp,%ebp
   12344:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();    
    log_printf("Kernel is running ...");
   12347:	83 ec 0c             	sub    $0xc,%esp
   1234a:	68 d9 3a 01 00       	push   $0x13ad9
   1234f:	e8 a1 0d 00 00       	call   130f5 <log_printf>
   12354:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   12357:	83 ec 04             	sub    $0x4,%esp
   1235a:	68 ef 3a 01 00       	push   $0x13aef
   1235f:	68 f4 3a 01 00       	push   $0x13af4
   12364:	68 fa 3a 01 00       	push   $0x13afa
   12369:	e8 87 0d 00 00       	call   130f5 <log_printf>
   1236e:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   12371:	83 ec 0c             	sub    $0xc,%esp
   12374:	6a 61                	push   $0x61
   12376:	68 56 34 12 00       	push   $0x123456
   1237b:	6a 85                	push   $0xffffff85
   1237d:	68 39 30 00 00       	push   $0x3039
   12382:	68 09 3b 01 00       	push   $0x13b09
   12387:	e8 69 0d 00 00       	call   130f5 <log_printf>
   1238c:	83 c4 20             	add    $0x20,%esp
    
    // task_init(&task1, "test_task1", TASK_FLAGS_SYSTEM, (uint32_t)test_task1, (uint32_t)&stack1[MEM_PAGE_SIZE]);
    // task_init(&task2, "test_task2", TASK_FLAGS_SYSTEM, (uint32_t)test_task2, (uint32_t)&stack2[MEM_PAGE_SIZE]);


    sys_sched_yield();
   1238f:	e8 ce ed ff ff       	call   11162 <sys_sched_yield>

    // while (1);

    task_first_init();
   12394:	e8 48 ec ff ff       	call   10fe1 <task_first_init>
    move_to_first_task();
   12399:	e8 d3 fe ff ff       	call   12271 <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   1239e:	90                   	nop
   1239f:	c9                   	leave  
   123a0:	c3                   	ret    

000123a1 <list_size>:
static inline int list_size(list_t* list) {
   123a1:	55                   	push   %ebp
   123a2:	89 e5                	mov    %esp,%ebp
    return list->count;
   123a4:	8b 45 08             	mov    0x8(%ebp),%eax
   123a7:	8b 40 08             	mov    0x8(%eax),%eax
}
   123aa:	5d                   	pop    %ebp
   123ab:	c3                   	ret    

000123ac <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   123ac:	55                   	push   %ebp
   123ad:	89 e5                	mov    %esp,%ebp
   123af:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   123b2:	8b 45 08             	mov    0x8(%ebp),%eax
   123b5:	83 ec 08             	sub    $0x8,%esp
   123b8:	ff 75 0c             	pushl  0xc(%ebp)
   123bb:	50                   	push   %eax
   123bc:	e8 0a 05 00 00       	call   128cb <kstrcpy>
   123c1:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   123c4:	8b 45 08             	mov    0x8(%ebp),%eax
   123c7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   123ce:	8b 45 08             	mov    0x8(%ebp),%eax
   123d1:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   123d8:	8b 45 08             	mov    0x8(%ebp),%eax
   123db:	83 c0 48             	add    $0x48,%eax
   123de:	83 ec 0c             	sub    $0xc,%esp
   123e1:	50                   	push   %eax
   123e2:	e8 4d 0a 00 00       	call   12e34 <list_init>
   123e7:	83 c4 10             	add    $0x10,%esp
}
   123ea:	90                   	nop
   123eb:	c9                   	leave  
   123ec:	c3                   	ret    

000123ed <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   123ed:	55                   	push   %ebp
   123ee:	89 e5                	mov    %esp,%ebp
   123f0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   123f3:	e8 81 fb ff ff       	call   11f79 <irq_enter_protection>
   123f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   123fb:	e8 58 ed ff ff       	call   11158 <task_current>
   12400:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   12403:	8b 45 08             	mov    0x8(%ebp),%eax
   12406:	8b 40 44             	mov    0x44(%eax),%eax
   12409:	85 c0                	test   %eax,%eax
   1240b:	75 15                	jne    12422 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   1240d:	8b 45 08             	mov    0x8(%ebp),%eax
   12410:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   12417:	8b 45 08             	mov    0x8(%ebp),%eax
   1241a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1241d:	89 50 40             	mov    %edx,0x40(%eax)
   12420:	eb 48                	jmp    1246a <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   12422:	8b 45 08             	mov    0x8(%ebp),%eax
   12425:	8b 40 40             	mov    0x40(%eax),%eax
   12428:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1242b:	75 11                	jne    1243e <mutex_acquire+0x51>
        mutex->locked_count++;
   1242d:	8b 45 08             	mov    0x8(%ebp),%eax
   12430:	8b 40 44             	mov    0x44(%eax),%eax
   12433:	8d 50 01             	lea    0x1(%eax),%edx
   12436:	8b 45 08             	mov    0x8(%ebp),%eax
   12439:	89 50 44             	mov    %edx,0x44(%eax)
   1243c:	eb 2c                	jmp    1246a <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   1243e:	83 ec 0c             	sub    $0xc,%esp
   12441:	ff 75 f0             	pushl  -0x10(%ebp)
   12444:	e8 a1 ec ff ff       	call   110ea <task_set_blocked>
   12449:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   1244c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1244f:	8d 50 38             	lea    0x38(%eax),%edx
   12452:	8b 45 08             	mov    0x8(%ebp),%eax
   12455:	83 c0 48             	add    $0x48,%eax
   12458:	83 ec 08             	sub    $0x8,%esp
   1245b:	52                   	push   %edx
   1245c:	50                   	push   %eax
   1245d:	e8 54 0a 00 00       	call   12eb6 <list_insert_back>
   12462:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12465:	e8 59 ed ff ff       	call   111c3 <task_dispatch>
    }

    irq_leave_protection(state);
   1246a:	83 ec 0c             	sub    $0xc,%esp
   1246d:	ff 75 f4             	pushl  -0xc(%ebp)
   12470:	e8 1c fb ff ff       	call   11f91 <irq_leave_protection>
   12475:	83 c4 10             	add    $0x10,%esp
}
   12478:	90                   	nop
   12479:	c9                   	leave  
   1247a:	c3                   	ret    

0001247b <mutex_release>:

void mutex_release(mutex_t* mutex) {
   1247b:	55                   	push   %ebp
   1247c:	89 e5                	mov    %esp,%ebp
   1247e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12481:	e8 f3 fa ff ff       	call   11f79 <irq_enter_protection>
   12486:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12489:	e8 ca ec ff ff       	call   11158 <task_current>
   1248e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   12491:	8b 45 08             	mov    0x8(%ebp),%eax
   12494:	8b 40 40             	mov    0x40(%eax),%eax
   12497:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1249a:	0f 85 8a 00 00 00    	jne    1252a <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   124a0:	8b 45 08             	mov    0x8(%ebp),%eax
   124a3:	8b 40 44             	mov    0x44(%eax),%eax
   124a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   124a9:	8b 45 08             	mov    0x8(%ebp),%eax
   124ac:	89 50 44             	mov    %edx,0x44(%eax)
   124af:	8b 45 08             	mov    0x8(%ebp),%eax
   124b2:	8b 40 44             	mov    0x44(%eax),%eax
   124b5:	85 c0                	test   %eax,%eax
   124b7:	75 71                	jne    1252a <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   124b9:	8b 45 08             	mov    0x8(%ebp),%eax
   124bc:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   124c3:	8b 45 08             	mov    0x8(%ebp),%eax
   124c6:	83 c0 48             	add    $0x48,%eax
   124c9:	83 ec 0c             	sub    $0xc,%esp
   124cc:	50                   	push   %eax
   124cd:	e8 cf fe ff ff       	call   123a1 <list_size>
   124d2:	83 c4 10             	add    $0x10,%esp
   124d5:	85 c0                	test   %eax,%eax
   124d7:	74 51                	je     1252a <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   124d9:	8b 45 08             	mov    0x8(%ebp),%eax
   124dc:	83 c0 48             	add    $0x48,%eax
   124df:	83 ec 0c             	sub    $0xc,%esp
   124e2:	50                   	push   %eax
   124e3:	e8 31 0a 00 00       	call   12f19 <list_remove_front>
   124e8:	83 c4 10             	add    $0x10,%esp
   124eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   124ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   124f2:	74 08                	je     124fc <mutex_release+0x81>
   124f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   124f7:	83 e8 38             	sub    $0x38,%eax
   124fa:	eb 05                	jmp    12501 <mutex_release+0x86>
   124fc:	b8 00 00 00 00       	mov    $0x0,%eax
   12501:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12504:	83 ec 0c             	sub    $0xc,%esp
   12507:	ff 75 e8             	pushl  -0x18(%ebp)
   1250a:	e8 a7 eb ff ff       	call   110b6 <task_set_ready>
   1250f:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12512:	8b 45 08             	mov    0x8(%ebp),%eax
   12515:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12518:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   1251b:	8b 45 08             	mov    0x8(%ebp),%eax
   1251e:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   12525:	e8 99 ec ff ff       	call   111c3 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   1252a:	83 ec 0c             	sub    $0xc,%esp
   1252d:	ff 75 f4             	pushl  -0xc(%ebp)
   12530:	e8 5c fa ff ff       	call   11f91 <irq_leave_protection>
   12535:	83 c4 10             	add    $0x10,%esp
   12538:	90                   	nop
   12539:	c9                   	leave  
   1253a:	c3                   	ret    

0001253b <list_size>:
static inline int list_size(list_t* list) {
   1253b:	55                   	push   %ebp
   1253c:	89 e5                	mov    %esp,%ebp
    return list->count;
   1253e:	8b 45 08             	mov    0x8(%ebp),%eax
   12541:	8b 40 08             	mov    0x8(%eax),%eax
}
   12544:	5d                   	pop    %ebp
   12545:	c3                   	ret    

00012546 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   12546:	55                   	push   %ebp
   12547:	89 e5                	mov    %esp,%ebp
   12549:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1254c:	8b 45 08             	mov    0x8(%ebp),%eax
   1254f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12552:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   12554:	8b 45 08             	mov    0x8(%ebp),%eax
   12557:	83 c0 04             	add    $0x4,%eax
   1255a:	83 ec 0c             	sub    $0xc,%esp
   1255d:	50                   	push   %eax
   1255e:	e8 d1 08 00 00       	call   12e34 <list_init>
   12563:	83 c4 10             	add    $0x10,%esp
}
   12566:	90                   	nop
   12567:	c9                   	leave  
   12568:	c3                   	ret    

00012569 <sem_wait>:


void sem_wait(sem_t* sem) {
   12569:	55                   	push   %ebp
   1256a:	89 e5                	mov    %esp,%ebp
   1256c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1256f:	e8 05 fa ff ff       	call   11f79 <irq_enter_protection>
   12574:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 进程获得了一个信号，且不为0
    if (sem->count > 0) {
   12577:	8b 45 08             	mov    0x8(%ebp),%eax
   1257a:	8b 00                	mov    (%eax),%eax
   1257c:	85 c0                	test   %eax,%eax
   1257e:	7e 0f                	jle    1258f <sem_wait+0x26>
        sem->count--;
   12580:	8b 45 08             	mov    0x8(%ebp),%eax
   12583:	8b 00                	mov    (%eax),%eax
   12585:	8d 50 ff             	lea    -0x1(%eax),%edx
   12588:	8b 45 08             	mov    0x8(%ebp),%eax
   1258b:	89 10                	mov    %edx,(%eax)
   1258d:	eb 34                	jmp    125c3 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   1258f:	e8 c4 eb ff ff       	call   11158 <task_current>
   12594:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   12597:	83 ec 0c             	sub    $0xc,%esp
   1259a:	ff 75 f0             	pushl  -0x10(%ebp)
   1259d:	e8 48 eb ff ff       	call   110ea <task_set_blocked>
   125a2:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   125a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   125a8:	8d 50 38             	lea    0x38(%eax),%edx
   125ab:	8b 45 08             	mov    0x8(%ebp),%eax
   125ae:	83 c0 04             	add    $0x4,%eax
   125b1:	83 ec 08             	sub    $0x8,%esp
   125b4:	52                   	push   %edx
   125b5:	50                   	push   %eax
   125b6:	e8 fb 08 00 00       	call   12eb6 <list_insert_back>
   125bb:	83 c4 10             	add    $0x10,%esp
        
        task_dispatch();
   125be:	e8 00 ec ff ff       	call   111c3 <task_dispatch>
    }

    irq_leave_protection(state);
   125c3:	83 ec 0c             	sub    $0xc,%esp
   125c6:	ff 75 f4             	pushl  -0xc(%ebp)
   125c9:	e8 c3 f9 ff ff       	call   11f91 <irq_leave_protection>
   125ce:	83 c4 10             	add    $0x10,%esp
}
   125d1:	90                   	nop
   125d2:	c9                   	leave  
   125d3:	c3                   	ret    

000125d4 <sem_notify>:


void sem_notify(sem_t* sem) {
   125d4:	55                   	push   %ebp
   125d5:	89 e5                	mov    %esp,%ebp
   125d7:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   125da:	e8 9a f9 ff ff       	call   11f79 <irq_enter_protection>
   125df:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   125e2:	8b 45 08             	mov    0x8(%ebp),%eax
   125e5:	83 c0 04             	add    $0x4,%eax
   125e8:	83 ec 0c             	sub    $0xc,%esp
   125eb:	50                   	push   %eax
   125ec:	e8 4a ff ff ff       	call   1253b <list_size>
   125f1:	83 c4 10             	add    $0x10,%esp
   125f4:	85 c0                	test   %eax,%eax
   125f6:	74 40                	je     12638 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   125f8:	8b 45 08             	mov    0x8(%ebp),%eax
   125fb:	83 c0 04             	add    $0x4,%eax
   125fe:	83 ec 0c             	sub    $0xc,%esp
   12601:	50                   	push   %eax
   12602:	e8 12 09 00 00       	call   12f19 <list_remove_front>
   12607:	83 c4 10             	add    $0x10,%esp
   1260a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   1260d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12611:	74 08                	je     1261b <sem_notify+0x47>
   12613:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12616:	83 e8 38             	sub    $0x38,%eax
   12619:	eb 05                	jmp    12620 <sem_notify+0x4c>
   1261b:	b8 00 00 00 00       	mov    $0x0,%eax
   12620:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12623:	83 ec 0c             	sub    $0xc,%esp
   12626:	ff 75 ec             	pushl  -0x14(%ebp)
   12629:	e8 88 ea ff ff       	call   110b6 <task_set_ready>
   1262e:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12631:	e8 8d eb ff ff       	call   111c3 <task_dispatch>
   12636:	eb 0d                	jmp    12645 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   12638:	8b 45 08             	mov    0x8(%ebp),%eax
   1263b:	8b 00                	mov    (%eax),%eax
   1263d:	8d 50 01             	lea    0x1(%eax),%edx
   12640:	8b 45 08             	mov    0x8(%ebp),%eax
   12643:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   12645:	83 ec 0c             	sub    $0xc,%esp
   12648:	ff 75 f4             	pushl  -0xc(%ebp)
   1264b:	e8 41 f9 ff ff       	call   11f91 <irq_leave_protection>
   12650:	83 c4 10             	add    $0x10,%esp
}
   12653:	90                   	nop
   12654:	c9                   	leave  
   12655:	c3                   	ret    

00012656 <sem_count>:

int sem_count(sem_t* sem) {
   12656:	55                   	push   %ebp
   12657:	89 e5                	mov    %esp,%ebp
   12659:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1265c:	e8 18 f9 ff ff       	call   11f79 <irq_enter_protection>
   12661:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   12664:	8b 45 08             	mov    0x8(%ebp),%eax
   12667:	8b 00                	mov    (%eax),%eax
   12669:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   1266c:	83 ec 0c             	sub    $0xc,%esp
   1266f:	ff 75 f4             	pushl  -0xc(%ebp)
   12672:	e8 1a f9 ff ff       	call   11f91 <irq_leave_protection>
   12677:	83 c4 10             	add    $0x10,%esp

    return count;
   1267a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1267d:	c9                   	leave  
   1267e:	c3                   	ret    

0001267f <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   1267f:	55                   	push   %ebp
   12680:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   12682:	8b 45 08             	mov    0x8(%ebp),%eax
   12685:	83 c0 07             	add    $0x7,%eax
   12688:	8d 50 07             	lea    0x7(%eax),%edx
   1268b:	85 c0                	test   %eax,%eax
   1268d:	0f 48 c2             	cmovs  %edx,%eax
   12690:	c1 f8 03             	sar    $0x3,%eax
}
   12693:	5d                   	pop    %ebp
   12694:	c3                   	ret    

00012695 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   12695:	55                   	push   %ebp
   12696:	89 e5                	mov    %esp,%ebp
   12698:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1269b:	8b 45 08             	mov    0x8(%ebp),%eax
   1269e:	8b 55 10             	mov    0x10(%ebp),%edx
   126a1:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   126a3:	8b 45 08             	mov    0x8(%ebp),%eax
   126a6:	8b 55 0c             	mov    0xc(%ebp),%edx
   126a9:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   126ac:	8b 45 08             	mov    0x8(%ebp),%eax
   126af:	8b 00                	mov    (%eax),%eax
   126b1:	50                   	push   %eax
   126b2:	e8 c8 ff ff ff       	call   1267f <bitmap_byte_count>
   126b7:	83 c4 04             	add    $0x4,%esp
   126ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   126bd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   126c1:	74 07                	je     126ca <bitmap_init+0x35>
   126c3:	ba ff 00 00 00       	mov    $0xff,%edx
   126c8:	eb 05                	jmp    126cf <bitmap_init+0x3a>
   126ca:	ba 00 00 00 00       	mov    $0x0,%edx
   126cf:	8b 45 08             	mov    0x8(%ebp),%eax
   126d2:	8b 40 04             	mov    0x4(%eax),%eax
   126d5:	83 ec 04             	sub    $0x4,%esp
   126d8:	ff 75 f4             	pushl  -0xc(%ebp)
   126db:	52                   	push   %edx
   126dc:	50                   	push   %eax
   126dd:	e8 a4 03 00 00       	call   12a86 <kmemset>
   126e2:	83 c4 10             	add    $0x10,%esp
}
   126e5:	90                   	nop
   126e6:	c9                   	leave  
   126e7:	c3                   	ret    

000126e8 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   126e8:	55                   	push   %ebp
   126e9:	89 e5                	mov    %esp,%ebp
   126eb:	56                   	push   %esi
   126ec:	53                   	push   %ebx
   126ed:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   126f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   126f7:	e9 a2 00 00 00       	jmp    1279e <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   126fc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12700:	74 4a                	je     1274c <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12702:	8b 45 08             	mov    0x8(%ebp),%eax
   12705:	8b 50 04             	mov    0x4(%eax),%edx
   12708:	8b 45 0c             	mov    0xc(%ebp),%eax
   1270b:	8d 48 07             	lea    0x7(%eax),%ecx
   1270e:	85 c0                	test   %eax,%eax
   12710:	0f 48 c1             	cmovs  %ecx,%eax
   12713:	c1 f8 03             	sar    $0x3,%eax
   12716:	89 c3                	mov    %eax,%ebx
   12718:	89 d8                	mov    %ebx,%eax
   1271a:	01 d0                	add    %edx,%eax
   1271c:	0f b6 00             	movzbl (%eax),%eax
   1271f:	89 c6                	mov    %eax,%esi
   12721:	8b 45 0c             	mov    0xc(%ebp),%eax
   12724:	99                   	cltd   
   12725:	c1 ea 1d             	shr    $0x1d,%edx
   12728:	01 d0                	add    %edx,%eax
   1272a:	83 e0 07             	and    $0x7,%eax
   1272d:	29 d0                	sub    %edx,%eax
   1272f:	ba 01 00 00 00       	mov    $0x1,%edx
   12734:	89 c1                	mov    %eax,%ecx
   12736:	d3 e2                	shl    %cl,%edx
   12738:	89 d0                	mov    %edx,%eax
   1273a:	89 f2                	mov    %esi,%edx
   1273c:	09 c2                	or     %eax,%edx
   1273e:	8b 45 08             	mov    0x8(%ebp),%eax
   12741:	8b 40 04             	mov    0x4(%eax),%eax
   12744:	89 d9                	mov    %ebx,%ecx
   12746:	01 c8                	add    %ecx,%eax
   12748:	88 10                	mov    %dl,(%eax)
   1274a:	eb 4a                	jmp    12796 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1274c:	8b 45 08             	mov    0x8(%ebp),%eax
   1274f:	8b 50 04             	mov    0x4(%eax),%edx
   12752:	8b 45 0c             	mov    0xc(%ebp),%eax
   12755:	8d 48 07             	lea    0x7(%eax),%ecx
   12758:	85 c0                	test   %eax,%eax
   1275a:	0f 48 c1             	cmovs  %ecx,%eax
   1275d:	c1 f8 03             	sar    $0x3,%eax
   12760:	89 c3                	mov    %eax,%ebx
   12762:	89 d8                	mov    %ebx,%eax
   12764:	01 d0                	add    %edx,%eax
   12766:	0f b6 00             	movzbl (%eax),%eax
   12769:	89 c6                	mov    %eax,%esi
   1276b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1276e:	99                   	cltd   
   1276f:	c1 ea 1d             	shr    $0x1d,%edx
   12772:	01 d0                	add    %edx,%eax
   12774:	83 e0 07             	and    $0x7,%eax
   12777:	29 d0                	sub    %edx,%eax
   12779:	ba 01 00 00 00       	mov    $0x1,%edx
   1277e:	89 c1                	mov    %eax,%ecx
   12780:	d3 e2                	shl    %cl,%edx
   12782:	89 d0                	mov    %edx,%eax
   12784:	f7 d0                	not    %eax
   12786:	89 f2                	mov    %esi,%edx
   12788:	21 c2                	and    %eax,%edx
   1278a:	8b 45 08             	mov    0x8(%ebp),%eax
   1278d:	8b 40 04             	mov    0x4(%eax),%eax
   12790:	89 d9                	mov    %ebx,%ecx
   12792:	01 c8                	add    %ecx,%eax
   12794:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12796:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1279a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1279e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   127a1:	3b 45 10             	cmp    0x10(%ebp),%eax
   127a4:	7d 0e                	jge    127b4 <bitmap_set_bit+0xcc>
   127a6:	8b 45 08             	mov    0x8(%ebp),%eax
   127a9:	8b 00                	mov    (%eax),%eax
   127ab:	39 45 0c             	cmp    %eax,0xc(%ebp)
   127ae:	0f 8c 48 ff ff ff    	jl     126fc <bitmap_set_bit+0x14>
        }
    }
}
   127b4:	90                   	nop
   127b5:	83 c4 10             	add    $0x10,%esp
   127b8:	5b                   	pop    %ebx
   127b9:	5e                   	pop    %esi
   127ba:	5d                   	pop    %ebp
   127bb:	c3                   	ret    

000127bc <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   127bc:	55                   	push   %ebp
   127bd:	89 e5                	mov    %esp,%ebp
   127bf:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   127c0:	8b 45 08             	mov    0x8(%ebp),%eax
   127c3:	8b 50 04             	mov    0x4(%eax),%edx
   127c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   127c9:	8d 48 07             	lea    0x7(%eax),%ecx
   127cc:	85 c0                	test   %eax,%eax
   127ce:	0f 48 c1             	cmovs  %ecx,%eax
   127d1:	c1 f8 03             	sar    $0x3,%eax
   127d4:	01 d0                	add    %edx,%eax
   127d6:	0f b6 00             	movzbl (%eax),%eax
   127d9:	0f b6 d8             	movzbl %al,%ebx
   127dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   127df:	99                   	cltd   
   127e0:	c1 ea 1d             	shr    $0x1d,%edx
   127e3:	01 d0                	add    %edx,%eax
   127e5:	83 e0 07             	and    $0x7,%eax
   127e8:	29 d0                	sub    %edx,%eax
   127ea:	89 c1                	mov    %eax,%ecx
   127ec:	d3 fb                	sar    %cl,%ebx
   127ee:	89 d8                	mov    %ebx,%eax
   127f0:	83 e0 01             	and    $0x1,%eax
}
   127f3:	5b                   	pop    %ebx
   127f4:	5d                   	pop    %ebp
   127f5:	c3                   	ret    

000127f6 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   127f6:	55                   	push   %ebp
   127f7:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   127f9:	ff 75 0c             	pushl  0xc(%ebp)
   127fc:	ff 75 08             	pushl  0x8(%ebp)
   127ff:	e8 b8 ff ff ff       	call   127bc <bitmap_get_bit>
   12804:	83 c4 08             	add    $0x8,%esp
   12807:	85 c0                	test   %eax,%eax
   12809:	0f 95 c0             	setne  %al
   1280c:	0f b6 c0             	movzbl %al,%eax
}
   1280f:	c9                   	leave  
   12810:	c3                   	ret    

00012811 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12811:	55                   	push   %ebp
   12812:	89 e5                	mov    %esp,%ebp
   12814:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12817:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1281e:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   12825:	e9 85 00 00 00       	jmp    128af <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   1282a:	ff 75 fc             	pushl  -0x4(%ebp)
   1282d:	ff 75 08             	pushl  0x8(%ebp)
   12830:	e8 87 ff ff ff       	call   127bc <bitmap_get_bit>
   12835:	83 c4 08             	add    $0x8,%esp
   12838:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1283b:	74 06                	je     12843 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   1283d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12841:	eb 6c                	jmp    128af <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   12843:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12846:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12849:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12850:	eb 27                	jmp    12879 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12852:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12855:	8d 50 01             	lea    0x1(%eax),%edx
   12858:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1285b:	50                   	push   %eax
   1285c:	ff 75 08             	pushl  0x8(%ebp)
   1285f:	e8 58 ff ff ff       	call   127bc <bitmap_get_bit>
   12864:	83 c4 08             	add    $0x8,%esp
   12867:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1286a:	74 09                	je     12875 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   1286c:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12873:	eb 16                	jmp    1288b <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12875:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12879:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1287c:	3b 45 10             	cmp    0x10(%ebp),%eax
   1287f:	7d 0a                	jge    1288b <bitmap_alloc_nbits+0x7a>
   12881:	8b 45 08             	mov    0x8(%ebp),%eax
   12884:	8b 00                	mov    (%eax),%eax
   12886:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12889:	7c c7                	jl     12852 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   1288b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1288e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12891:	7c 1c                	jl     128af <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   12893:	8b 45 0c             	mov    0xc(%ebp),%eax
   12896:	f7 d0                	not    %eax
   12898:	50                   	push   %eax
   12899:	ff 75 10             	pushl  0x10(%ebp)
   1289c:	ff 75 f8             	pushl  -0x8(%ebp)
   1289f:	ff 75 08             	pushl  0x8(%ebp)
   128a2:	e8 41 fe ff ff       	call   126e8 <bitmap_set_bit>
   128a7:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   128aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128ad:	eb 13                	jmp    128c2 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   128af:	8b 45 08             	mov    0x8(%ebp),%eax
   128b2:	8b 00                	mov    (%eax),%eax
   128b4:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   128b7:	0f 8c 6d ff ff ff    	jl     1282a <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   128bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   128c2:	c9                   	leave  
   128c3:	c3                   	ret    

000128c4 <hlt>:
static inline void hlt(void) {
   128c4:	55                   	push   %ebp
   128c5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   128c7:	f4                   	hlt    
}
   128c8:	90                   	nop
   128c9:	5d                   	pop    %ebp
   128ca:	c3                   	ret    

000128cb <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   128cb:	55                   	push   %ebp
   128cc:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   128ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128d2:	74 3b                	je     1290f <kstrcpy+0x44>
   128d4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128d8:	74 35                	je     1290f <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   128da:	eb 17                	jmp    128f3 <kstrcpy+0x28>
        *dest++ = *src++;
   128dc:	8b 55 0c             	mov    0xc(%ebp),%edx
   128df:	8d 42 01             	lea    0x1(%edx),%eax
   128e2:	89 45 0c             	mov    %eax,0xc(%ebp)
   128e5:	8b 45 08             	mov    0x8(%ebp),%eax
   128e8:	8d 48 01             	lea    0x1(%eax),%ecx
   128eb:	89 4d 08             	mov    %ecx,0x8(%ebp)
   128ee:	0f b6 12             	movzbl (%edx),%edx
   128f1:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   128f3:	8b 45 08             	mov    0x8(%ebp),%eax
   128f6:	0f b6 00             	movzbl (%eax),%eax
   128f9:	84 c0                	test   %al,%al
   128fb:	74 0a                	je     12907 <kstrcpy+0x3c>
   128fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12900:	0f b6 00             	movzbl (%eax),%eax
   12903:	84 c0                	test   %al,%al
   12905:	75 d5                	jne    128dc <kstrcpy+0x11>
    }
    *dest = '\0';
   12907:	8b 45 08             	mov    0x8(%ebp),%eax
   1290a:	c6 00 00             	movb   $0x0,(%eax)
   1290d:	eb 01                	jmp    12910 <kstrcpy+0x45>
        return;
   1290f:	90                   	nop
}
   12910:	5d                   	pop    %ebp
   12911:	c3                   	ret    

00012912 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12912:	55                   	push   %ebp
   12913:	89 e5                	mov    %esp,%ebp
   12915:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12918:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1291c:	74 61                	je     1297f <kstrncpy+0x6d>
   1291e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12922:	74 5b                	je     1297f <kstrncpy+0x6d>
   12924:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12928:	74 55                	je     1297f <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   1292a:	8b 45 08             	mov    0x8(%ebp),%eax
   1292d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12930:	8b 45 0c             	mov    0xc(%ebp),%eax
   12933:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   12936:	eb 17                	jmp    1294f <kstrncpy+0x3d>
        *d++ = *s++;
   12938:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1293b:	8d 42 01             	lea    0x1(%edx),%eax
   1293e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12941:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12944:	8d 48 01             	lea    0x1(%eax),%ecx
   12947:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1294a:	0f b6 12             	movzbl (%edx),%edx
   1294d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1294f:	8b 45 10             	mov    0x10(%ebp),%eax
   12952:	8d 50 ff             	lea    -0x1(%eax),%edx
   12955:	89 55 10             	mov    %edx,0x10(%ebp)
   12958:	85 c0                	test   %eax,%eax
   1295a:	7e 0a                	jle    12966 <kstrncpy+0x54>
   1295c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1295f:	0f b6 00             	movzbl (%eax),%eax
   12962:	84 c0                	test   %al,%al
   12964:	75 d2                	jne    12938 <kstrncpy+0x26>
    }
    if (size == 0) {
   12966:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1296a:	75 0b                	jne    12977 <kstrncpy+0x65>
        *(d - 1) = '\0';
   1296c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1296f:	83 e8 01             	sub    $0x1,%eax
   12972:	c6 00 00             	movb   $0x0,(%eax)
   12975:	eb 09                	jmp    12980 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   12977:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1297a:	c6 00 00             	movb   $0x0,(%eax)
   1297d:	eb 01                	jmp    12980 <kstrncpy+0x6e>
        return;
   1297f:	90                   	nop
    }
}
   12980:	c9                   	leave  
   12981:	c3                   	ret    

00012982 <kstrlen>:


int kstrlen(const char *str) {
   12982:	55                   	push   %ebp
   12983:	89 e5                	mov    %esp,%ebp
   12985:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12988:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1298c:	75 07                	jne    12995 <kstrlen+0x13>
        return 0;
   1298e:	b8 00 00 00 00       	mov    $0x0,%eax
   12993:	eb 26                	jmp    129bb <kstrlen+0x39>
    }

    const char *c = str;
   12995:	8b 45 08             	mov    0x8(%ebp),%eax
   12998:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   1299b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   129a2:	eb 04                	jmp    129a8 <kstrlen+0x26>
        len++;
   129a4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   129a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129ab:	8d 50 01             	lea    0x1(%eax),%edx
   129ae:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129b1:	0f b6 00             	movzbl (%eax),%eax
   129b4:	84 c0                	test   %al,%al
   129b6:	75 ec                	jne    129a4 <kstrlen+0x22>
    }

    return len;
   129b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   129bb:	c9                   	leave  
   129bc:	c3                   	ret    

000129bd <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   129bd:	55                   	push   %ebp
   129be:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   129c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129c4:	74 06                	je     129cc <kstrncmp+0xf>
   129c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129ca:	75 0f                	jne    129db <kstrncmp+0x1e>
        return -1;
   129cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   129d1:	eb 62                	jmp    12a35 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   129d3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   129d7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   129db:	8b 45 08             	mov    0x8(%ebp),%eax
   129de:	0f b6 00             	movzbl (%eax),%eax
   129e1:	84 c0                	test   %al,%al
   129e3:	74 20                	je     12a05 <kstrncmp+0x48>
   129e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   129e8:	0f b6 00             	movzbl (%eax),%eax
   129eb:	84 c0                	test   %al,%al
   129ed:	74 16                	je     12a05 <kstrncmp+0x48>
   129ef:	8b 45 08             	mov    0x8(%ebp),%eax
   129f2:	0f b6 10             	movzbl (%eax),%edx
   129f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f8:	0f b6 00             	movzbl (%eax),%eax
   129fb:	38 c2                	cmp    %al,%dl
   129fd:	75 06                	jne    12a05 <kstrncmp+0x48>
   129ff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a03:	75 ce                	jne    129d3 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12a05:	8b 45 08             	mov    0x8(%ebp),%eax
   12a08:	0f b6 00             	movzbl (%eax),%eax
   12a0b:	84 c0                	test   %al,%al
   12a0d:	74 21                	je     12a30 <kstrncmp+0x73>
   12a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a12:	0f b6 00             	movzbl (%eax),%eax
   12a15:	84 c0                	test   %al,%al
   12a17:	74 17                	je     12a30 <kstrncmp+0x73>
   12a19:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1c:	0f b6 10             	movzbl (%eax),%edx
   12a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a22:	0f b6 00             	movzbl (%eax),%eax
   12a25:	38 c2                	cmp    %al,%dl
   12a27:	74 07                	je     12a30 <kstrncmp+0x73>
   12a29:	b8 01 00 00 00       	mov    $0x1,%eax
   12a2e:	eb 05                	jmp    12a35 <kstrncmp+0x78>
   12a30:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a35:	5d                   	pop    %ebp
   12a36:	c3                   	ret    

00012a37 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   12a37:	55                   	push   %ebp
   12a38:	89 e5                	mov    %esp,%ebp
   12a3a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12a3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a41:	74 40                	je     12a83 <kmemcpy+0x4c>
   12a43:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a47:	74 3a                	je     12a83 <kmemcpy+0x4c>
   12a49:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a4d:	74 34                	je     12a83 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12a4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a52:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12a55:	8b 45 08             	mov    0x8(%ebp),%eax
   12a58:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12a5b:	eb 17                	jmp    12a74 <kmemcpy+0x3d>
        *d++ = *s++;
   12a5d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12a60:	8d 42 01             	lea    0x1(%edx),%eax
   12a63:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12a66:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a69:	8d 48 01             	lea    0x1(%eax),%ecx
   12a6c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12a6f:	0f b6 12             	movzbl (%edx),%edx
   12a72:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12a74:	8b 45 10             	mov    0x10(%ebp),%eax
   12a77:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a7a:	89 55 10             	mov    %edx,0x10(%ebp)
   12a7d:	85 c0                	test   %eax,%eax
   12a7f:	75 dc                	jne    12a5d <kmemcpy+0x26>
   12a81:	eb 01                	jmp    12a84 <kmemcpy+0x4d>
        return;
   12a83:	90                   	nop
    }
}
   12a84:	c9                   	leave  
   12a85:	c3                   	ret    

00012a86 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12a86:	55                   	push   %ebp
   12a87:	89 e5                	mov    %esp,%ebp
   12a89:	83 ec 14             	sub    $0x14,%esp
   12a8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a8f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12a92:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12a96:	74 2c                	je     12ac4 <kmemset+0x3e>
   12a98:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12a9c:	74 26                	je     12ac4 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   12a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12aa4:	eb 0f                	jmp    12ab5 <kmemset+0x2f>
        *d++ = v;
   12aa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12aa9:	8d 50 01             	lea    0x1(%eax),%edx
   12aac:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12aaf:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12ab3:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12ab5:	8b 45 10             	mov    0x10(%ebp),%eax
   12ab8:	8d 50 ff             	lea    -0x1(%eax),%edx
   12abb:	89 55 10             	mov    %edx,0x10(%ebp)
   12abe:	85 c0                	test   %eax,%eax
   12ac0:	75 e4                	jne    12aa6 <kmemset+0x20>
   12ac2:	eb 01                	jmp    12ac5 <kmemset+0x3f>
        return;
   12ac4:	90                   	nop
    }
}
   12ac5:	c9                   	leave  
   12ac6:	c3                   	ret    

00012ac7 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12ac7:	55                   	push   %ebp
   12ac8:	89 e5                	mov    %esp,%ebp
   12aca:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   12acd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12ad1:	74 06                	je     12ad9 <kmemcmp+0x12>
   12ad3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12ad7:	75 07                	jne    12ae0 <kmemcmp+0x19>
        return 1;
   12ad9:	b8 01 00 00 00       	mov    $0x1,%eax
   12ade:	eb 43                	jmp    12b23 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   12ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ae9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12aec:	eb 23                	jmp    12b11 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   12aee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12af1:	8d 50 01             	lea    0x1(%eax),%edx
   12af4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12af7:	0f b6 08             	movzbl (%eax),%ecx
   12afa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12afd:	8d 50 01             	lea    0x1(%eax),%edx
   12b00:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b03:	0f b6 00             	movzbl (%eax),%eax
   12b06:	38 c1                	cmp    %al,%cl
   12b08:	74 07                	je     12b11 <kmemcmp+0x4a>
            return 1;
   12b0a:	b8 01 00 00 00       	mov    $0x1,%eax
   12b0f:	eb 12                	jmp    12b23 <kmemcmp+0x5c>
    while (size--) {
   12b11:	8b 45 10             	mov    0x10(%ebp),%eax
   12b14:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b17:	89 55 10             	mov    %edx,0x10(%ebp)
   12b1a:	85 c0                	test   %eax,%eax
   12b1c:	75 d0                	jne    12aee <kmemcmp+0x27>
        }
    }

    return 0;
   12b1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12b23:	c9                   	leave  
   12b24:	c3                   	ret    

00012b25 <kitoa>:


void kitoa(char *buf, int num, int base) {
   12b25:	55                   	push   %ebp
   12b26:	89 e5                	mov    %esp,%ebp
   12b28:	53                   	push   %ebx
   12b29:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   12b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12b32:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b35:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   12b38:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12b3c:	74 1d                	je     12b5b <kitoa+0x36>
   12b3e:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12b42:	74 17                	je     12b5b <kitoa+0x36>
   12b44:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b48:	74 11                	je     12b5b <kitoa+0x36>
   12b4a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12b4e:	74 0b                	je     12b5b <kitoa+0x36>
        *p = '\0';
   12b50:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b53:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12b56:	e9 03 01 00 00       	jmp    12c5e <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12b5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12b62:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12b66:	79 19                	jns    12b81 <kitoa+0x5c>
   12b68:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12b6c:	75 13                	jne    12b81 <kitoa+0x5c>
        *p++ = '-';
   12b6e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b71:	8d 50 01             	lea    0x1(%eax),%edx
   12b74:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b77:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12b7a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12b81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12b85:	74 3b                	je     12bc2 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12b87:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b90:	99                   	cltd   
   12b91:	f7 7d 10             	idivl  0x10(%ebp)
   12b94:	89 d0                	mov    %edx,%eax
   12b96:	83 c0 0f             	add    $0xf,%eax
   12b99:	01 c8                	add    %ecx,%eax
   12b9b:	0f b6 00             	movzbl (%eax),%eax
   12b9e:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12ba1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ba4:	8d 50 01             	lea    0x1(%eax),%edx
   12ba7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12baa:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12bae:	88 10                	mov    %dl,(%eax)
            num /= base;
   12bb0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bb3:	99                   	cltd   
   12bb4:	f7 7d 10             	idivl  0x10(%ebp)
   12bb7:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12bba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12bbe:	75 c7                	jne    12b87 <kitoa+0x62>
   12bc0:	eb 4b                	jmp    12c0d <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12bc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12bc8:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12bce:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12bd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bd4:	ba 00 00 00 00       	mov    $0x0,%edx
   12bd9:	f7 f3                	div    %ebx
   12bdb:	89 d0                	mov    %edx,%eax
   12bdd:	83 c0 0f             	add    $0xf,%eax
   12be0:	01 c8                	add    %ecx,%eax
   12be2:	0f b6 00             	movzbl (%eax),%eax
   12be5:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12be8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12beb:	8d 50 01             	lea    0x1(%eax),%edx
   12bee:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12bf1:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12bf5:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12bf7:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bfd:	ba 00 00 00 00       	mov    $0x0,%edx
   12c02:	f7 f3                	div    %ebx
   12c04:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12c07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12c0b:	75 bb                	jne    12bc8 <kitoa+0xa3>
    }
    *p-- = '\0';
   12c0d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c10:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c13:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c16:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12c19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12c1d:	74 08                	je     12c27 <kitoa+0x102>
   12c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c22:	83 c0 01             	add    $0x1,%eax
   12c25:	eb 03                	jmp    12c2a <kitoa+0x105>
   12c27:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12c2d:	eb 27                	jmp    12c56 <kitoa+0x131>
        char ch = *start;
   12c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c32:	0f b6 00             	movzbl (%eax),%eax
   12c35:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12c38:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c3b:	0f b6 10             	movzbl (%eax),%edx
   12c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c41:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12c43:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c46:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c49:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c4c:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12c50:	88 10                	mov    %dl,(%eax)
        start++;
   12c52:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12c56:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12c59:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12c5c:	72 d1                	jb     12c2f <kitoa+0x10a>
    }
}
   12c5e:	83 c4 20             	add    $0x20,%esp
   12c61:	5b                   	pop    %ebx
   12c62:	5d                   	pop    %ebp
   12c63:	c3                   	ret    

00012c64 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12c64:	55                   	push   %ebp
   12c65:	89 e5                	mov    %esp,%ebp
   12c67:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12c6a:	8d 45 10             	lea    0x10(%ebp),%eax
   12c6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c73:	83 ec 04             	sub    $0x4,%esp
   12c76:	50                   	push   %eax
   12c77:	ff 75 0c             	pushl  0xc(%ebp)
   12c7a:	ff 75 08             	pushl  0x8(%ebp)
   12c7d:	e8 06 00 00 00       	call   12c88 <kvsprintf>
   12c82:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12c85:	90                   	nop
   12c86:	c9                   	leave  
   12c87:	c3                   	ret    

00012c88 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12c88:	55                   	push   %ebp
   12c89:	89 e5                	mov    %esp,%ebp
   12c8b:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12c8e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12c95:	8b 45 08             	mov    0x8(%ebp),%eax
   12c98:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12c9b:	e9 2f 01 00 00       	jmp    12dcf <kvsprintf+0x147>
        switch (state) {
   12ca0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ca3:	85 c0                	test   %eax,%eax
   12ca5:	74 0a                	je     12cb1 <kvsprintf+0x29>
   12ca7:	83 f8 01             	cmp    $0x1,%eax
   12caa:	74 2b                	je     12cd7 <kvsprintf+0x4f>
   12cac:	e9 1e 01 00 00       	jmp    12dcf <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12cb1:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12cb5:	75 0c                	jne    12cc3 <kvsprintf+0x3b>
                state = READ_FMT;
   12cb7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12cbe:	e9 0c 01 00 00       	jmp    12dcf <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12cc3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12cc6:	8d 50 01             	lea    0x1(%eax),%edx
   12cc9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ccc:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12cd0:	88 10                	mov    %dl,(%eax)
            }
            break;
   12cd2:	e9 f8 00 00 00       	jmp    12dcf <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12cd7:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12cdb:	75 31                	jne    12d0e <kvsprintf+0x86>
                int num = va_arg(args, int);
   12cdd:	8b 45 10             	mov    0x10(%ebp),%eax
   12ce0:	8d 50 04             	lea    0x4(%eax),%edx
   12ce3:	89 55 10             	mov    %edx,0x10(%ebp)
   12ce6:	8b 00                	mov    (%eax),%eax
   12ce8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   12ceb:	6a 0a                	push   $0xa
   12ced:	ff 75 e4             	pushl  -0x1c(%ebp)
   12cf0:	ff 75 f8             	pushl  -0x8(%ebp)
   12cf3:	e8 2d fe ff ff       	call   12b25 <kitoa>
   12cf8:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12cfb:	ff 75 f8             	pushl  -0x8(%ebp)
   12cfe:	e8 7f fc ff ff       	call   12982 <kstrlen>
   12d03:	83 c4 04             	add    $0x4,%esp
   12d06:	01 45 f8             	add    %eax,-0x8(%ebp)
   12d09:	e9 b9 00 00 00       	jmp    12dc7 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12d0e:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12d12:	75 46                	jne    12d5a <kvsprintf+0xd2>
                *curr++ = '0';
   12d14:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d17:	8d 50 01             	lea    0x1(%eax),%edx
   12d1a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d1d:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12d20:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d23:	8d 50 01             	lea    0x1(%eax),%edx
   12d26:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d29:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12d2c:	8b 45 10             	mov    0x10(%ebp),%eax
   12d2f:	8d 50 04             	lea    0x4(%eax),%edx
   12d32:	89 55 10             	mov    %edx,0x10(%ebp)
   12d35:	8b 00                	mov    (%eax),%eax
   12d37:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12d3a:	6a 10                	push   $0x10
   12d3c:	ff 75 e8             	pushl  -0x18(%ebp)
   12d3f:	ff 75 f8             	pushl  -0x8(%ebp)
   12d42:	e8 de fd ff ff       	call   12b25 <kitoa>
   12d47:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12d4a:	ff 75 f8             	pushl  -0x8(%ebp)
   12d4d:	e8 30 fc ff ff       	call   12982 <kstrlen>
   12d52:	83 c4 04             	add    $0x4,%esp
   12d55:	01 45 f8             	add    %eax,-0x8(%ebp)
   12d58:	eb 6d                	jmp    12dc7 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12d5a:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12d5e:	75 1f                	jne    12d7f <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12d60:	8b 45 10             	mov    0x10(%ebp),%eax
   12d63:	8d 50 04             	lea    0x4(%eax),%edx
   12d66:	89 55 10             	mov    %edx,0x10(%ebp)
   12d69:	8b 00                	mov    (%eax),%eax
   12d6b:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12d6e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12d71:	8d 50 01             	lea    0x1(%eax),%edx
   12d74:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12d77:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12d7b:	88 10                	mov    %dl,(%eax)
   12d7d:	eb 48                	jmp    12dc7 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12d7f:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12d83:	75 42                	jne    12dc7 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12d85:	8b 45 10             	mov    0x10(%ebp),%eax
   12d88:	8d 50 04             	lea    0x4(%eax),%edx
   12d8b:	89 55 10             	mov    %edx,0x10(%ebp)
   12d8e:	8b 00                	mov    (%eax),%eax
   12d90:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12d93:	ff 75 f4             	pushl  -0xc(%ebp)
   12d96:	e8 e7 fb ff ff       	call   12982 <kstrlen>
   12d9b:	83 c4 04             	add    $0x4,%esp
   12d9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12da1:	eb 17                	jmp    12dba <kvsprintf+0x132>
                    *curr++ = *str++;
   12da3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12da6:	8d 42 01             	lea    0x1(%edx),%eax
   12da9:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12dac:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12daf:	8d 48 01             	lea    0x1(%eax),%ecx
   12db2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12db5:	0f b6 12             	movzbl (%edx),%edx
   12db8:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12dba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12dbd:	8d 50 ff             	lea    -0x1(%eax),%edx
   12dc0:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12dc3:	85 c0                	test   %eax,%eax
   12dc5:	75 dc                	jne    12da3 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12dc7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12dce:	90                   	nop
    while ((ch = *fmt++)) {
   12dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12dd2:	8d 50 01             	lea    0x1(%eax),%edx
   12dd5:	89 55 0c             	mov    %edx,0xc(%ebp)
   12dd8:	0f b6 00             	movzbl (%eax),%eax
   12ddb:	88 45 ef             	mov    %al,-0x11(%ebp)
   12dde:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12de2:	0f 85 b8 fe ff ff    	jne    12ca0 <kvsprintf+0x18>
        }
    }
}
   12de8:	90                   	nop
   12de9:	c9                   	leave  
   12dea:	c3                   	ret    

00012deb <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   12deb:	55                   	push   %ebp
   12dec:	89 e5                	mov    %esp,%ebp
   12dee:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12df1:	83 ec 08             	sub    $0x8,%esp
   12df4:	ff 75 14             	pushl  0x14(%ebp)
   12df7:	68 38 3b 01 00       	push   $0x13b38
   12dfc:	e8 f4 02 00 00       	call   130f5 <log_printf>
   12e01:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12e04:	ff 75 10             	pushl  0x10(%ebp)
   12e07:	ff 75 0c             	pushl  0xc(%ebp)
   12e0a:	ff 75 08             	pushl  0x8(%ebp)
   12e0d:	68 4a 3b 01 00       	push   $0x13b4a
   12e12:	e8 de 02 00 00       	call   130f5 <log_printf>
   12e17:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12e1a:	e8 a5 fa ff ff       	call   128c4 <hlt>
   12e1f:	eb f9                	jmp    12e1a <pannic+0x2f>

00012e21 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12e21:	55                   	push   %ebp
   12e22:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12e24:	8b 45 08             	mov    0x8(%ebp),%eax
   12e27:	8b 40 08             	mov    0x8(%eax),%eax
   12e2a:	85 c0                	test   %eax,%eax
   12e2c:	0f 94 c0             	sete   %al
   12e2f:	0f b6 c0             	movzbl %al,%eax
}
   12e32:	5d                   	pop    %ebp
   12e33:	c3                   	ret    

00012e34 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12e34:	55                   	push   %ebp
   12e35:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12e37:	8b 45 08             	mov    0x8(%ebp),%eax
   12e3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12e40:	8b 45 08             	mov    0x8(%ebp),%eax
   12e43:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12e4a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e4d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12e54:	90                   	nop
   12e55:	5d                   	pop    %ebp
   12e56:	c3                   	ret    

00012e57 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12e57:	55                   	push   %ebp
   12e58:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12e5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e5d:	8b 10                	mov    (%eax),%edx
   12e5f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e62:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12e65:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12e6e:	ff 75 08             	pushl  0x8(%ebp)
   12e71:	e8 ab ff ff ff       	call   12e21 <list_is_empty>
   12e76:	83 c4 04             	add    $0x4,%esp
   12e79:	85 c0                	test   %eax,%eax
   12e7b:	74 15                	je     12e92 <list_insert_front+0x3b>
        list->last = list->first = node;
   12e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e80:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e83:	89 10                	mov    %edx,(%eax)
   12e85:	8b 45 08             	mov    0x8(%ebp),%eax
   12e88:	8b 10                	mov    (%eax),%edx
   12e8a:	8b 45 08             	mov    0x8(%ebp),%eax
   12e8d:	89 50 04             	mov    %edx,0x4(%eax)
   12e90:	eb 12                	jmp    12ea4 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12e92:	8b 45 08             	mov    0x8(%ebp),%eax
   12e95:	8b 00                	mov    (%eax),%eax
   12e97:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e9a:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12e9f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ea2:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12ea4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea7:	8b 40 08             	mov    0x8(%eax),%eax
   12eaa:	8d 50 01             	lea    0x1(%eax),%edx
   12ead:	8b 45 08             	mov    0x8(%ebp),%eax
   12eb0:	89 50 08             	mov    %edx,0x8(%eax)
}
   12eb3:	90                   	nop
   12eb4:	c9                   	leave  
   12eb5:	c3                   	ret    

00012eb6 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12eb6:	55                   	push   %ebp
   12eb7:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   12ebc:	8b 50 04             	mov    0x4(%eax),%edx
   12ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ec2:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ec7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12ece:	ff 75 08             	pushl  0x8(%ebp)
   12ed1:	e8 4b ff ff ff       	call   12e21 <list_is_empty>
   12ed6:	83 c4 04             	add    $0x4,%esp
   12ed9:	85 c0                	test   %eax,%eax
   12edb:	74 15                	je     12ef2 <list_insert_back+0x3c>
        list->last = list->first = node;
   12edd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee0:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ee3:	89 10                	mov    %edx,(%eax)
   12ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee8:	8b 10                	mov    (%eax),%edx
   12eea:	8b 45 08             	mov    0x8(%ebp),%eax
   12eed:	89 50 04             	mov    %edx,0x4(%eax)
   12ef0:	eb 15                	jmp    12f07 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12ef2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef5:	8b 40 04             	mov    0x4(%eax),%eax
   12ef8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12efb:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12efe:	8b 45 08             	mov    0x8(%ebp),%eax
   12f01:	8b 55 0c             	mov    0xc(%ebp),%edx
   12f04:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12f07:	8b 45 08             	mov    0x8(%ebp),%eax
   12f0a:	8b 40 08             	mov    0x8(%eax),%eax
   12f0d:	8d 50 01             	lea    0x1(%eax),%edx
   12f10:	8b 45 08             	mov    0x8(%ebp),%eax
   12f13:	89 50 08             	mov    %edx,0x8(%eax)
}
   12f16:	90                   	nop
   12f17:	c9                   	leave  
   12f18:	c3                   	ret    

00012f19 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12f19:	55                   	push   %ebp
   12f1a:	89 e5                	mov    %esp,%ebp
   12f1c:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12f1f:	ff 75 08             	pushl  0x8(%ebp)
   12f22:	e8 fa fe ff ff       	call   12e21 <list_is_empty>
   12f27:	83 c4 04             	add    $0x4,%esp
   12f2a:	85 c0                	test   %eax,%eax
   12f2c:	74 07                	je     12f35 <list_remove_front+0x1c>
        return (list_node_t*)0;
   12f2e:	b8 00 00 00 00       	mov    $0x0,%eax
   12f33:	eb 5b                	jmp    12f90 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12f35:	8b 45 08             	mov    0x8(%ebp),%eax
   12f38:	8b 00                	mov    (%eax),%eax
   12f3a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12f3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f40:	8b 50 04             	mov    0x4(%eax),%edx
   12f43:	8b 45 08             	mov    0x8(%ebp),%eax
   12f46:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12f48:	8b 45 08             	mov    0x8(%ebp),%eax
   12f4b:	8b 00                	mov    (%eax),%eax
   12f4d:	85 c0                	test   %eax,%eax
   12f4f:	75 0c                	jne    12f5d <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12f51:	8b 45 08             	mov    0x8(%ebp),%eax
   12f54:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f5b:	eb 0c                	jmp    12f69 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12f5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f60:	8b 40 04             	mov    0x4(%eax),%eax
   12f63:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12f69:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f6c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12f73:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f76:	8b 50 04             	mov    0x4(%eax),%edx
   12f79:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f7c:	89 10                	mov    %edx,(%eax)
    list->count--;
   12f7e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f81:	8b 40 08             	mov    0x8(%eax),%eax
   12f84:	8d 50 ff             	lea    -0x1(%eax),%edx
   12f87:	8b 45 08             	mov    0x8(%ebp),%eax
   12f8a:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12f8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12f90:	c9                   	leave  
   12f91:	c3                   	ret    

00012f92 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12f92:	55                   	push   %ebp
   12f93:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12f95:	8b 45 08             	mov    0x8(%ebp),%eax
   12f98:	8b 00                	mov    (%eax),%eax
   12f9a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12f9d:	75 0b                	jne    12faa <list_remove+0x18>
        list->first = node->next;
   12f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fa2:	8b 50 04             	mov    0x4(%eax),%edx
   12fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa8:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12faa:	8b 45 08             	mov    0x8(%ebp),%eax
   12fad:	8b 40 04             	mov    0x4(%eax),%eax
   12fb0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12fb3:	75 0b                	jne    12fc0 <list_remove+0x2e>
        list->last = node->pre;
   12fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fb8:	8b 10                	mov    (%eax),%edx
   12fba:	8b 45 08             	mov    0x8(%ebp),%eax
   12fbd:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12fc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc3:	8b 00                	mov    (%eax),%eax
   12fc5:	85 c0                	test   %eax,%eax
   12fc7:	74 0e                	je     12fd7 <list_remove+0x45>
        node->pre->next = node->next;
   12fc9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fcc:	8b 00                	mov    (%eax),%eax
   12fce:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fd1:	8b 52 04             	mov    0x4(%edx),%edx
   12fd4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12fd7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fda:	8b 40 04             	mov    0x4(%eax),%eax
   12fdd:	85 c0                	test   %eax,%eax
   12fdf:	74 0d                	je     12fee <list_remove+0x5c>
        node->next->pre = node->pre;
   12fe1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fe4:	8b 40 04             	mov    0x4(%eax),%eax
   12fe7:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fea:	8b 12                	mov    (%edx),%edx
   12fec:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12fee:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ff1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ffb:	8b 50 04             	mov    0x4(%eax),%edx
   12ffe:	8b 45 0c             	mov    0xc(%ebp),%eax
   13001:	89 10                	mov    %edx,(%eax)
    --list->count;
   13003:	8b 45 08             	mov    0x8(%ebp),%eax
   13006:	8b 40 08             	mov    0x8(%eax),%eax
   13009:	8d 50 ff             	lea    -0x1(%eax),%edx
   1300c:	8b 45 08             	mov    0x8(%ebp),%eax
   1300f:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   13012:	8b 45 0c             	mov    0xc(%ebp),%eax
   13015:	5d                   	pop    %ebp
   13016:	c3                   	ret    

00013017 <inb>:
static inline uint8_t inb(uint16_t port) {
   13017:	55                   	push   %ebp
   13018:	89 e5                	mov    %esp,%ebp
   1301a:	83 ec 14             	sub    $0x14,%esp
   1301d:	8b 45 08             	mov    0x8(%ebp),%eax
   13020:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   13024:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13028:	89 c2                	mov    %eax,%edx
   1302a:	ec                   	in     (%dx),%al
   1302b:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1302e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13032:	c9                   	leave  
   13033:	c3                   	ret    

00013034 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13034:	55                   	push   %ebp
   13035:	89 e5                	mov    %esp,%ebp
   13037:	83 ec 08             	sub    $0x8,%esp
   1303a:	8b 55 08             	mov    0x8(%ebp),%edx
   1303d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13040:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13044:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   13047:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1304b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1304f:	ee                   	out    %al,(%dx)
}
   13050:	90                   	nop
   13051:	c9                   	leave  
   13052:	c3                   	ret    

00013053 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   13053:	55                   	push   %ebp
   13054:	89 e5                	mov    %esp,%ebp
   13056:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   13059:	83 ec 08             	sub    $0x8,%esp
   1305c:	68 88 3b 01 00       	push   $0x13b88
   13061:	68 60 10 02 00       	push   $0x21060
   13066:	e8 41 f3 ff ff       	call   123ac <mutex_init>
   1306b:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   1306e:	83 ec 08             	sub    $0x8,%esp
   13071:	6a 00                	push   $0x0
   13073:	68 f9 03 00 00       	push   $0x3f9
   13078:	e8 b7 ff ff ff       	call   13034 <outb>
   1307d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   13080:	83 ec 08             	sub    $0x8,%esp
   13083:	68 80 00 00 00       	push   $0x80
   13088:	68 fb 03 00 00       	push   $0x3fb
   1308d:	e8 a2 ff ff ff       	call   13034 <outb>
   13092:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   13095:	83 ec 08             	sub    $0x8,%esp
   13098:	6a 03                	push   $0x3
   1309a:	68 f8 03 00 00       	push   $0x3f8
   1309f:	e8 90 ff ff ff       	call   13034 <outb>
   130a4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   130a7:	83 ec 08             	sub    $0x8,%esp
   130aa:	6a 00                	push   $0x0
   130ac:	68 f9 03 00 00       	push   $0x3f9
   130b1:	e8 7e ff ff ff       	call   13034 <outb>
   130b6:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   130b9:	83 ec 08             	sub    $0x8,%esp
   130bc:	6a 03                	push   $0x3
   130be:	68 fb 03 00 00       	push   $0x3fb
   130c3:	e8 6c ff ff ff       	call   13034 <outb>
   130c8:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   130cb:	83 ec 08             	sub    $0x8,%esp
   130ce:	68 c7 00 00 00       	push   $0xc7
   130d3:	68 fa 03 00 00       	push   $0x3fa
   130d8:	e8 57 ff ff ff       	call   13034 <outb>
   130dd:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   130e0:	83 ec 08             	sub    $0x8,%esp
   130e3:	6a 0f                	push   $0xf
   130e5:	68 fc 03 00 00       	push   $0x3fc
   130ea:	e8 45 ff ff ff       	call   13034 <outb>
   130ef:	83 c4 10             	add    $0x10,%esp
}
   130f2:	90                   	nop
   130f3:	c9                   	leave  
   130f4:	c3                   	ret    

000130f5 <log_printf>:


void log_printf(const char* fmt, ...) {
   130f5:	55                   	push   %ebp
   130f6:	89 e5                	mov    %esp,%ebp
   130f8:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   130fe:	83 ec 04             	sub    $0x4,%esp
   13101:	68 80 00 00 00       	push   $0x80
   13106:	6a 00                	push   $0x0
   13108:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1310e:	50                   	push   %eax
   1310f:	e8 72 f9 ff ff       	call   12a86 <kmemset>
   13114:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   13117:	8d 45 0c             	lea    0xc(%ebp),%eax
   1311a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   13120:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   13126:	83 ec 04             	sub    $0x4,%esp
   13129:	50                   	push   %eax
   1312a:	ff 75 08             	pushl  0x8(%ebp)
   1312d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13133:	50                   	push   %eax
   13134:	e8 4f fb ff ff       	call   12c88 <kvsprintf>
   13139:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   1313c:	83 ec 0c             	sub    $0xc,%esp
   1313f:	68 60 10 02 00       	push   $0x21060
   13144:	e8 a4 f2 ff ff       	call   123ed <mutex_acquire>
   13149:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   1314c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   13152:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   13155:	eb 3b                	jmp    13192 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   13157:	90                   	nop
   13158:	83 ec 0c             	sub    $0xc,%esp
   1315b:	68 fd 03 00 00       	push   $0x3fd
   13160:	e8 b2 fe ff ff       	call   13017 <inb>
   13165:	83 c4 10             	add    $0x10,%esp
   13168:	0f b6 c0             	movzbl %al,%eax
   1316b:	83 e0 40             	and    $0x40,%eax
   1316e:	85 c0                	test   %eax,%eax
   13170:	74 e6                	je     13158 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   13172:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13175:	8d 50 01             	lea    0x1(%eax),%edx
   13178:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1317b:	0f b6 00             	movzbl (%eax),%eax
   1317e:	0f b6 c0             	movzbl %al,%eax
   13181:	83 ec 08             	sub    $0x8,%esp
   13184:	50                   	push   %eax
   13185:	68 f8 03 00 00       	push   $0x3f8
   1318a:	e8 a5 fe ff ff       	call   13034 <outb>
   1318f:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   13192:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13195:	0f b6 00             	movzbl (%eax),%eax
   13198:	84 c0                	test   %al,%al
   1319a:	75 bb                	jne    13157 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   1319c:	83 ec 08             	sub    $0x8,%esp
   1319f:	6a 0d                	push   $0xd
   131a1:	68 f8 03 00 00       	push   $0x3f8
   131a6:	e8 89 fe ff ff       	call   13034 <outb>
   131ab:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   131ae:	83 ec 08             	sub    $0x8,%esp
   131b1:	6a 0a                	push   $0xa
   131b3:	68 f8 03 00 00       	push   $0x3f8
   131b8:	e8 77 fe ff ff       	call   13034 <outb>
   131bd:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   131c0:	83 ec 0c             	sub    $0xc,%esp
   131c3:	68 60 10 02 00       	push   $0x21060
   131c8:	e8 ae f2 ff ff       	call   1247b <mutex_release>
   131cd:	83 c4 10             	add    $0x10,%esp
   131d0:	90                   	nop
   131d1:	c9                   	leave  
   131d2:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 91 00 00 00       	jmp    800000a3 <first_task_main>

80000012 <syscall>:
    int arg1;
    int arg2;
    int arg3;
} syscall_args_t;

static inline int syscall(syscall_args_t* args) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	57                   	push   %edi
80000016:	56                   	push   %esi
80000017:	53                   	push   %ebx
80000018:	83 ec 10             	sub    $0x10,%esp
    // 使用特权级0,其实比3高即可，偏移量不需要，填0即可。类似于far_jump函数的实现
	const unsigned long sys_gate_addr[] = { 0, SELECTOR_SYSCALL | 0 };
8000001b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000022:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
    		:"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
80000029:	8b 45 08             	mov    0x8(%ebp),%eax
8000002c:	8b 40 10             	mov    0x10(%eax),%eax
8000002f:	8b 55 08             	mov    0x8(%ebp),%edx
80000032:	8b 52 0c             	mov    0xc(%edx),%edx
80000035:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000038:	8b 49 08             	mov    0x8(%ecx),%ecx
            [arg0]"r"(args->arg0), [id]"r"(args->id),
8000003b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003e:	8b 5b 04             	mov    0x4(%ebx),%ebx
80000041:	8b 75 08             	mov    0x8(%ebp),%esi
80000044:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000046:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000049:	50                   	push   %eax
8000004a:	52                   	push   %edx
8000004b:	51                   	push   %ecx
8000004c:	53                   	push   %ebx
8000004d:	56                   	push   %esi
8000004e:	ff 1f                	lcall  *(%edi)
80000050:	89 45 f0             	mov    %eax,-0x10(%ebp)
            [gate]"r"(sys_gate_addr));
    return ret;
80000053:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000056:	83 c4 10             	add    $0x10,%esp
80000059:	5b                   	pop    %ebx
8000005a:	5e                   	pop    %esi
8000005b:	5f                   	pop    %edi
8000005c:	5d                   	pop    %ebp
8000005d:	c3                   	ret    

8000005e <msleep>:
 
static inline void msleep(int ms) {
8000005e:	55                   	push   %ebp
8000005f:	89 e5                	mov    %esp,%ebp
80000061:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
80000064:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000068:	7e 1b                	jle    80000085 <msleep+0x27>
        return;
    }

    syscall_args_t args;
    args.id = SYS_sleep;
8000006a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000071:	8b 45 08             	mov    0x8(%ebp),%eax
80000074:	89 45 f0             	mov    %eax,-0x10(%ebp)

    syscall(&args);
80000077:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000007a:	50                   	push   %eax
8000007b:	e8 92 ff ff ff       	call   80000012 <syscall>
80000080:	83 c4 04             	add    $0x4,%esp
80000083:	eb 01                	jmp    80000086 <msleep+0x28>
        return;
80000085:	90                   	nop
}
80000086:	c9                   	leave  
80000087:	c3                   	ret    

80000088 <getpid>:


static inline int getpid(void) {
80000088:	55                   	push   %ebp
80000089:	89 e5                	mov    %esp,%ebp
8000008b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

    return syscall(&args);
80000095:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000098:	50                   	push   %eax
80000099:	e8 74 ff ff ff       	call   80000012 <syscall>
8000009e:	83 c4 04             	add    $0x4,%esp
}
800000a1:	c9                   	leave  
800000a2:	c3                   	ret    

800000a3 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void) {
800000a3:	55                   	push   %ebp
800000a4:	89 e5                	mov    %esp,%ebp
800000a6:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000a9:	e8 da ff ff ff       	call   80000088 <getpid>
800000ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (1) {
        // log_printf("first task.");
        msleep(1000);
800000b1:	68 e8 03 00 00       	push   $0x3e8
800000b6:	e8 a3 ff ff ff       	call   8000005e <msleep>
800000bb:	83 c4 04             	add    $0x4,%esp
800000be:	eb f1                	jmp    800000b1 <first_task_main+0xe>
