
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000000c7 memsz 0x000008e0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c7  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000800  000100e0  000100e0  000010c7  2**5
                  ALLOC
  2 .debug_line   00000267  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000030f  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ac  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000017f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    0000025c  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY
  8 .debug_frame  000000a8  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000100e0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cpu.c
000100e0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 init.c
000100ad g     F .text	0000000b cpu_init
000100b8 g     F .text	0000000f kernel_init
00010000 g       .text	00000000 _start
00010079 g     F .text	00000034 init_gdt
0001000e g     F .text	0000006b segment_desc_set



Disassembly of section .text:

00010000 <_start>:

    .text
    .extern kernel_init
    .global _start
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 ac 00 00 00       	call   100b8 <kernel_init>
   1000c:	eb fe                	jmp    1000c <_start+0xc>

0001000e <segment_desc_set>:
#include "cpu/cpu.h"
#include "cpu/os_cfg.h"

static segment_desc_t gdt_table[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1000e:	55                   	push   %ebp
   1000f:	89 e5                	mov    %esp,%ebp
   10011:	83 ec 14             	sub    $0x14,%esp
   10014:	8b 45 14             	mov    0x14(%ebp),%eax
   10017:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   1001b:	8b 45 08             	mov    0x8(%ebp),%eax
   1001e:	83 e0 f8             	and    $0xfffffff8,%eax
   10021:	05 e0 00 01 00       	add    $0x100e0,%eax
   10026:	89 45 fc             	mov    %eax,-0x4(%ebp)
    
    desc->limit15_0 = limit & 0xffff;
   10029:	8b 45 10             	mov    0x10(%ebp),%eax
   1002c:	89 c2                	mov    %eax,%edx
   1002e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10031:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   10034:	8b 45 0c             	mov    0xc(%ebp),%eax
   10037:	89 c2                	mov    %eax,%edx
   10039:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1003c:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   10040:	8b 45 0c             	mov    0xc(%ebp),%eax
   10043:	c1 e8 10             	shr    $0x10,%eax
   10046:	89 c2                	mov    %eax,%edx
   10048:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1004b:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   1004e:	8b 45 10             	mov    0x10(%ebp),%eax
   10051:	c1 e8 10             	shr    $0x10,%eax
   10054:	c1 e0 08             	shl    $0x8,%eax
   10057:	66 25 00 0f          	and    $0xf00,%ax
   1005b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1005f:	89 c2                	mov    %eax,%edx
   10061:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10064:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   10068:	8b 45 0c             	mov    0xc(%ebp),%eax
   1006b:	c1 e8 18             	shr    $0x18,%eax
   1006e:	89 c2                	mov    %eax,%edx
   10070:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10073:	88 50 07             	mov    %dl,0x7(%eax)
}
   10076:	90                   	nop
   10077:	c9                   	leave  
   10078:	c3                   	ret    

00010079 <init_gdt>:


void init_gdt(void) {
   10079:	55                   	push   %ebp
   1007a:	89 e5                	mov    %esp,%ebp
   1007c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1007f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10086:	eb 19                	jmp    100a1 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   10088:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1008b:	c1 e0 03             	shl    $0x3,%eax
   1008e:	6a 00                	push   $0x0
   10090:	6a 00                	push   $0x0
   10092:	6a 00                	push   $0x0
   10094:	50                   	push   %eax
   10095:	e8 74 ff ff ff       	call   1000e <segment_desc_set>
   1009a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1009d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   100a1:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   100a8:	7e de                	jle    10088 <init_gdt+0xf>
    }
}
   100aa:	90                   	nop
   100ab:	c9                   	leave  
   100ac:	c3                   	ret    

000100ad <cpu_init>:


void cpu_init(void) {
   100ad:	55                   	push   %ebp
   100ae:	89 e5                	mov    %esp,%ebp
    init_gdt();
   100b0:	e8 c4 ff ff ff       	call   10079 <init_gdt>
   100b5:	90                   	nop
   100b6:	5d                   	pop    %ebp
   100b7:	c3                   	ret    

000100b8 <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   100b8:	55                   	push   %ebp
   100b9:	89 e5                	mov    %esp,%ebp
   100bb:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    __asm__ __volatile__("nop");
   100be:	90                   	nop

    cpu_init();
   100bf:	e8 e9 ff ff ff       	call   100ad <cpu_init>
    
   100c4:	90                   	nop
   100c5:	c9                   	leave  
   100c6:	c3                   	ret    
