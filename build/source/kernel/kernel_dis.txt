
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000039e0 memsz 0x000039e0 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006f40 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001af40 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003070  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000970  00013070  00013070  00004070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005f40  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000046  80000000  0001af40  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001d32  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046c7  00000000  00000000  00007d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129f  00000000  00000000  0000c43f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000125b  00000000  00000000  0000d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000eb1b  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000013ec  00000000  00000000  0000eb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00013070 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000027 pte_paddr
0001037e l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
0001038f l     F .text	0000005d addr_alloc_init
000103ec l     F .text	00000067 addr_alloc_page
00010453 l     F .text	00000062 addr_free_page
000104b5 l     F .text	00000066 show_mem_info
0001051b l     F .text	0000003c total_mem_size
00010557 l     F .text	000000a0 test_alloc
000131c8 l     O .rodata	00000012 __func__.2213
00014000 l     O .data	00000040 kernel_map.2225
000131dc l     O .rodata	0000000c __func__.2255
00010a57 l     F .text	00000010 curr_page_dir
000131e8 l     O .rodata	00000011 __func__.2287
00010b20 l     F .text	0000001a kalloc
00010b3a l     F .text	0000001e kfree
00000000 l    df *ABS*	00000000 task.c
00010b58 l     F .text	00000019 list_node_init
00010b71 l     F .text	0000000b list_node_next
00010b7c l     F .text	0000000b list_size
00010b87 l     F .text	0000000a list_first
00010b91 l     F .text	0000000c write_cr3
00010b9d l     F .text	00000007 hlt
00010ba4 l     F .text	00000017 write_tr
00010bbb l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000198 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010bcc l     F .text	00000188 tss_init
00013298 l     O .rodata	0000000a __func__.2251
00010e63 l     F .text	0000000a idle_task_entry
000132a4 l     O .rodata	00000010 __func__.2277
00000000 l    df *ABS*	00000000 cpu.c
000112de l     F .text	00000028 lgdt
00011306 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
0001153c l     F .text	0000001d inb
00011559 l     F .text	0000001f outb
00011578 l     F .text	00000007 cli
0001157f l     F .text	00000007 sti
00011586 l     F .text	00000028 lidt
000115ae l     F .text	00000011 read_cr2
000115bf l     F .text	00000007 hlt
000115c6 l     F .text	00000010 read_eflags
000115d6 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
000115e1 l     F .text	000000f0 dump_core_regs
000116d1 l     F .text	0000003e do_default_handler
00011aac l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011eb0 l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011ef7 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011f6f l     F .text	0000000b list_size
00011f7a l     F .text	0000000a list_first
00011f84 l     F .text	0000000b list_last
0001396c l     O .rodata	0000000c __func__.2201
00018e20 l     O .bss	000000b4 first_task
00013978 l     O .rodata	00000013 __func__.2234
00000000 l    df *ABS*	00000000 mutex.c
0001223e l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
000123d8 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012761 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012cbe l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012eb4 l     F .text	0000001d inb
00012ed1 l     F .text	0000001f outb
00018ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
00011a90 g     F .text	0000001c do_handler_control_protection_exception
00012659 g     F .text	0000003a bitmap_get_bit
00011097 g     F .text	0000000a task_current
00011747 g     F .text	0000001c do_handler_debug_exception
00011a74 g     F .text	0000001c do_handler_virtualization_exception
00011e51 g     F .text	0000000b irq_enable_global
00011843 g     F .text	0000001c do_handler_segment_not_present
00010ff5 g     F .text	00000034 task_set_ready
000127af g     F .text	00000070 kstrncpy
00012693 g     F .text	0000001b bitmap_is_set
00011fe3 g     F .text	0000019c link_test
00011763 g     F .text	0000001c do_handler_nmi_interrupt
00011457 g     F .text	00000023 cpu_init
00012ef0 g     F .text	000000a2 log_init
000121e3 g     F .text	0000005b init_main
00012923 g     F .text	00000041 kmemset
00011503 g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
00011d34 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
0001281f g     F .text	0000003b kstrlen
0001179b g     F .text	0000001c do_handler_overflow
000106a7 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
0001187b g     F .text	000000b5 do_handler_general_protection
000124f3 g     F .text	00000029 sem_count
80000012 g     F .first_task	00000028 first_task_main
000117b7 g     F .text	0000001c do_handler_bound_range_exceed
00012585 g     F .text	000000d4 bitmap_set_bit
0001180b g     F .text	0000001c do_handler_double_fault
00011930 g     F .text	000000d4 do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011e5c g     F .text	0000002b pic_send_eoi
00010feb g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107fe g     F .text	00000085 memory_create_uvm
00012406 g     F .text	0000006b sem_wait
00010a35 g     F .text	00000022 memory_alloc_page_for
00011ecf g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
00012cf4 g     F .text	0000005f list_insert_front
00018f40 g     O .bss	00002000 stack
00011287 g     F .text	00000057 sys_sleep
00012b25 g     F .text	00000163 kvsprintf
00010a87 g     F .text	00000099 memory_free_page
0001af40 g       *ABS*	00000000 s_first_task
00010967 g     F .text	000000ce memory_alloc_for_page_dir
00012471 g     F .text	00000082 sem_notify
000117d3 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011f57 g     F .text	00000018 timer_init
00010f20 g     F .text	000000cb task_first_init
00011a3c g     F .text	0000001c do_handler_machine_check
000117ef g     F .text	0000001c do_handler_device_not_found
00011267 g     F .text	00000020 task_set_wakeup
00012d53 g     F .text	00000063 list_insert_back
00011e46 g     F .text	0000000b irq_disable_global
000110a1 g     F .text	00000061 sys_sched_yield
0001af86 g       *ABS*	00000000 mem_free_start
00011f8f g     F .text	00000054 kernel_init
000123e3 g     F .text	00000023 sem_init
00012b01 g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00011029 g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001af40 g       .bss	00000000 e_data
000129c2 g     F .text	0000013f kitoa
00012768 g     F .text	00000047 kstrcpy
0001285a g     F .text	0000007a kstrncmp
00011a20 g     F .text	0000001c do_handler_aligment_check
00012964 g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
00011827 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001af86 g       *ABS*	00000000 e_first_task
00011236 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
00011cff g     F .text	00000035 irq_install
000113ea g     F .text	0000006d init_gdt
00011e87 g     F .text	00000018 irq_enter_protection
00012249 g     F .text	00000041 mutex_init
00011dbf g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
0001172b g     F .text	0000001c do_handler_divide_error
0001251c g     F .text	00000016 bitmap_byte_count
00011102 g     F .text	0000005b task_dispatch
0001217f g     F .text	00000064 move_to_first_task
00011054 g     F .text	00000043 task_next_run
0001072e g     F .text	000000d0 create_kernel_table
00012cd1 g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
0001170f g     F .text	0000001c do_handler_unknown
00010a67 g     F .text	00000020 memory_alloc_page
00010e45 g     F .text	0000001e task_switch_from_to
00011b3f g     F .text	000001c0 irq_init
00011e9f g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00011320 g     F .text	00000083 segment_desc_set
000139e0 g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
00012532 g     F .text	00000053 bitmap_init
00011a58 g     F .text	0000001c do_handler_simd_floating_point_exception
000128d4 g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
000126ae g     F .text	000000b3 bitmap_alloc_nbits
00010e6d g     F .text	000000b3 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
0001115d g     F .text	000000d9 task_time_tick
00010883 g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
00012c88 g     F .text	00000036 pannic
0001185f g     F .text	0000001c do_handler_stack_segment_fault
0001177f g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
00011a04 g     F .text	0000001c do_handler_floating_point_error
00012f92 g     F .text	000000de log_printf
00010d54 g     F .text	000000f1 task_init
00012db6 g     F .text	00000079 list_remove_front
0001148e g     F .text	00000075 gdt_alloc_desc
00012318 g     F .text	000000c0 mutex_release
00012e2f g     F .text	00000085 list_remove
0001147a g     F .text	00000014 swtch_to_tss
000113a3 g     F .text	00000047 gate_desc_set
0001228a g     F .text	0000008e mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105f7 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 83 1f 00 00       	call   11f8f <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 af 01 00       	mov    $0x1af40,%esp
    jmp init_main
   10026:	e9 b8 21 00 00       	jmp    121e3 <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 d3 16 00 00       	call   1170f <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 d0 16 00 00       	call   1172b <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 cd 16 00 00       	call   11747 <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 ca 16 00 00       	call   11763 <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 c7 16 00 00       	call   1177f <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 c4 16 00 00       	call   1179b <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 c1 16 00 00       	call   117b7 <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 be 16 00 00       	call   117d3 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 bb 16 00 00       	call   117ef <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 ba 16 00 00       	call   1180b <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 b9 16 00 00       	call   11827 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 b8 16 00 00       	call   11843 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 b5 16 00 00       	call   1185f <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 b4 16 00 00       	call   1187b <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 4c 17 00 00       	call   11930 <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 01 18 00 00       	call   11a04 <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 00 18 00 00       	call   11a20 <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 fd 17 00 00       	call   11a3c <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 fa 17 00 00       	call   11a58 <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 f7 17 00 00       	call   11a74 <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 f6 17 00 00       	call   11a90 <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 16 1c 00 00       	call   11ecf <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   1035a:	8b 45 08             	mov    0x8(%ebp),%eax
   1035d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10361:	c0 ea 04             	shr    $0x4,%dl
   10364:	0f b6 d2             	movzbl %dl,%edx
   10367:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1036b:	c1 e1 04             	shl    $0x4,%ecx
   1036e:	09 ca                	or     %ecx,%edx
   10370:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10374:	c1 e0 0c             	shl    $0xc,%eax
   10377:	09 d0                	or     %edx,%eax
   10379:	c1 e0 0c             	shl    $0xc,%eax
}
   1037c:	5d                   	pop    %ebp
   1037d:	c3                   	ret    

0001037e <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   1037e:	55                   	push   %ebp
   1037f:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10381:	ff 75 08             	pushl  0x8(%ebp)
   10384:	e8 77 ff ff ff       	call   10300 <write_cr3>
   10389:	83 c4 04             	add    $0x4,%esp
}
   1038c:	90                   	nop
   1038d:	c9                   	leave  
   1038e:	c3                   	ret    

0001038f <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   1038f:	55                   	push   %ebp
   10390:	89 e5                	mov    %esp,%ebp
   10392:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   10395:	8b 45 08             	mov    0x8(%ebp),%eax
   10398:	83 ec 08             	sub    $0x8,%esp
   1039b:	68 70 30 01 00       	push   $0x13070
   103a0:	50                   	push   %eax
   103a1:	e8 a3 1e 00 00       	call   12249 <mutex_init>
   103a6:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	8b 55 10             	mov    0x10(%ebp),%edx
   103af:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103b2:	8b 45 08             	mov    0x8(%ebp),%eax
   103b5:	8b 55 14             	mov    0x14(%ebp),%edx
   103b8:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	8b 55 18             	mov    0x18(%ebp),%edx
   103c1:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103c4:	8b 45 08             	mov    0x8(%ebp),%eax
   103c7:	8b 40 60             	mov    0x60(%eax),%eax
   103ca:	ba 00 00 00 00       	mov    $0x0,%edx
   103cf:	f7 75 18             	divl   0x18(%ebp)
   103d2:	89 c2                	mov    %eax,%edx
   103d4:	8b 45 08             	mov    0x8(%ebp),%eax
   103d7:	83 c0 54             	add    $0x54,%eax
   103da:	6a 00                	push   $0x0
   103dc:	52                   	push   %edx
   103dd:	ff 75 0c             	pushl  0xc(%ebp)
   103e0:	50                   	push   %eax
   103e1:	e8 4c 21 00 00       	call   12532 <bitmap_init>
   103e6:	83 c4 10             	add    $0x10,%esp
}
   103e9:	90                   	nop
   103ea:	c9                   	leave  
   103eb:	c3                   	ret    

000103ec <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103ec:	55                   	push   %ebp
   103ed:	89 e5                	mov    %esp,%ebp
   103ef:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103f9:	8b 45 08             	mov    0x8(%ebp),%eax
   103fc:	83 ec 0c             	sub    $0xc,%esp
   103ff:	50                   	push   %eax
   10400:	e8 85 1e 00 00       	call   1228a <mutex_acquire>
   10405:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	83 c0 54             	add    $0x54,%eax
   1040e:	83 ec 04             	sub    $0x4,%esp
   10411:	ff 75 0c             	pushl  0xc(%ebp)
   10414:	6a 00                	push   $0x0
   10416:	50                   	push   %eax
   10417:	e8 92 22 00 00       	call   126ae <bitmap_alloc_nbits>
   1041c:	83 c4 10             	add    $0x10,%esp
   1041f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10422:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10426:	78 17                	js     1043f <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 50 5c             	mov    0x5c(%eax),%edx
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	8b 48 64             	mov    0x64(%eax),%ecx
   10434:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10437:	0f af c1             	imul   %ecx,%eax
   1043a:	01 d0                	add    %edx,%eax
   1043c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	83 ec 0c             	sub    $0xc,%esp
   10445:	50                   	push   %eax
   10446:	e8 cd 1e 00 00       	call   12318 <mutex_release>
   1044b:	83 c4 10             	add    $0x10,%esp

    return addr;
   1044e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10451:	c9                   	leave  
   10452:	c3                   	ret    

00010453 <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10453:	55                   	push   %ebp
   10454:	89 e5                	mov    %esp,%ebp
   10456:	53                   	push   %ebx
   10457:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	83 ec 0c             	sub    $0xc,%esp
   10460:	50                   	push   %eax
   10461:	e8 24 1e 00 00       	call   1228a <mutex_acquire>
   10466:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10469:	8b 45 08             	mov    0x8(%ebp),%eax
   1046c:	8b 40 5c             	mov    0x5c(%eax),%eax
   1046f:	8b 55 0c             	mov    0xc(%ebp),%edx
   10472:	89 d1                	mov    %edx,%ecx
   10474:	29 c1                	sub    %eax,%ecx
   10476:	8b 45 08             	mov    0x8(%ebp),%eax
   10479:	8b 58 64             	mov    0x64(%eax),%ebx
   1047c:	89 c8                	mov    %ecx,%eax
   1047e:	ba 00 00 00 00       	mov    $0x0,%edx
   10483:	f7 f3                	div    %ebx
   10485:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10488:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048b:	8b 55 08             	mov    0x8(%ebp),%edx
   1048e:	83 c2 54             	add    $0x54,%edx
   10491:	6a 00                	push   $0x0
   10493:	ff 75 10             	pushl  0x10(%ebp)
   10496:	50                   	push   %eax
   10497:	52                   	push   %edx
   10498:	e8 e8 20 00 00       	call   12585 <bitmap_set_bit>
   1049d:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104a0:	8b 45 08             	mov    0x8(%ebp),%eax
   104a3:	83 ec 0c             	sub    $0xc,%esp
   104a6:	50                   	push   %eax
   104a7:	e8 6c 1e 00 00       	call   12318 <mutex_release>
   104ac:	83 c4 10             	add    $0x10,%esp
}
   104af:	90                   	nop
   104b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104b3:	c9                   	leave  
   104b4:	c3                   	ret    

000104b5 <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104b5:	55                   	push   %ebp
   104b6:	89 e5                	mov    %esp,%ebp
   104b8:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104bb:	83 ec 0c             	sub    $0xc,%esp
   104be:	68 7d 30 01 00       	push   $0x1307d
   104c3:	e8 ca 2a 00 00       	call   12f92 <log_printf>
   104c8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104d2:	eb 29                	jmp    104fd <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104da:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104e4:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104e7:	52                   	push   %edx
   104e8:	50                   	push   %eax
   104e9:	ff 75 f4             	pushl  -0xc(%ebp)
   104ec:	68 89 30 01 00       	push   $0x13089
   104f1:	e8 9c 2a 00 00       	call   12f92 <log_printf>
   104f6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10500:	8b 40 50             	mov    0x50(%eax),%eax
   10503:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10506:	7c cc                	jl     104d4 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10508:	83 ec 0c             	sub    $0xc,%esp
   1050b:	68 97 30 01 00       	push   $0x13097
   10510:	e8 7d 2a 00 00       	call   12f92 <log_printf>
   10515:	83 c4 10             	add    $0x10,%esp
}
   10518:	90                   	nop
   10519:	c9                   	leave  
   1051a:	c3                   	ret    

0001051b <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   1051b:	55                   	push   %ebp
   1051c:	89 e5                	mov    %esp,%ebp
   1051e:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10521:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10528:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1052f:	eb 16                	jmp    10547 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10537:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1053b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1053e:	01 d0                	add    %edx,%eax
   10540:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10543:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	8b 40 50             	mov    0x50(%eax),%eax
   1054d:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10550:	7c df                	jl     10531 <total_mem_size+0x16>
    }
    return mem_size;
   10552:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10555:	c9                   	leave  
   10556:	c3                   	ret    

00010557 <test_alloc>:


static void test_alloc(void) {
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
   1055a:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10560:	83 ec 0c             	sub    $0xc,%esp
   10563:	68 00 10 00 00       	push   $0x1000
   10568:	68 00 00 04 00       	push   $0x40000
   1056d:	68 00 10 00 00       	push   $0x1000
   10572:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10578:	50                   	push   %eax
   10579:	8d 45 80             	lea    -0x80(%ebp),%eax
   1057c:	50                   	push   %eax
   1057d:	e8 0d fe ff ff       	call   1038f <addr_alloc_init>
   10582:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   10585:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1058c:	eb 2b                	jmp    105b9 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   1058e:	83 ec 08             	sub    $0x8,%esp
   10591:	6a 02                	push   $0x2
   10593:	8d 45 80             	lea    -0x80(%ebp),%eax
   10596:	50                   	push   %eax
   10597:	e8 50 fe ff ff       	call   103ec <addr_alloc_page>
   1059c:	83 c4 10             	add    $0x10,%esp
   1059f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105a2:	83 ec 08             	sub    $0x8,%esp
   105a5:	ff 75 e8             	pushl  -0x18(%ebp)
   105a8:	68 99 30 01 00       	push   $0x13099
   105ad:	e8 e0 29 00 00       	call   12f92 <log_printf>
   105b2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105b5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105b9:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105bd:	7e cf                	jle    1058e <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105bf:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105cd:	eb 1f                	jmp    105ee <test_alloc+0x97>
        addr += 4096 * 2;
   105cf:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105d6:	83 ec 04             	sub    $0x4,%esp
   105d9:	6a 02                	push   $0x2
   105db:	ff 75 f0             	pushl  -0x10(%ebp)
   105de:	8d 45 80             	lea    -0x80(%ebp),%eax
   105e1:	50                   	push   %eax
   105e2:	e8 6c fe ff ff       	call   10453 <addr_free_page>
   105e7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105ea:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105ee:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105f2:	7e db                	jle    105cf <test_alloc+0x78>
    }
}
   105f4:	90                   	nop
   105f5:	c9                   	leave  
   105f6:	c3                   	ret    

000105f7 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105f7:	55                   	push   %ebp
   105f8:	89 e5                	mov    %esp,%ebp
   105fa:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105fd:	ff 75 0c             	pushl  0xc(%ebp)
   10600:	e8 07 fd ff ff       	call   1030c <pde_index>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1060f:	8b 45 08             	mov    0x8(%ebp),%eax
   10612:	01 d0                	add    %edx,%eax
   10614:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   10617:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061a:	0f b6 00             	movzbl (%eax),%eax
   1061d:	83 e0 01             	and    $0x1,%eax
   10620:	84 c0                	test   %al,%al
   10622:	74 10                	je     10634 <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   10624:	ff 75 f0             	pushl  -0x10(%ebp)
   10627:	e8 f4 fc ff ff       	call   10320 <pde_paddr>
   1062c:	83 c4 04             	add    $0x4,%esp
   1062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10632:	eb 57                	jmp    1068b <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   10634:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10638:	75 07                	jne    10641 <find_pte+0x4a>
            return (pte_t*)0;
   1063a:	b8 00 00 00 00       	mov    $0x0,%eax
   1063f:	eb 64                	jmp    106a5 <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10641:	83 ec 08             	sub    $0x8,%esp
   10644:	6a 01                	push   $0x1
   10646:	68 00 50 01 00       	push   $0x15000
   1064b:	e8 9c fd ff ff       	call   103ec <addr_alloc_page>
   10650:	83 c4 10             	add    $0x10,%esp
   10653:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   10656:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1065a:	75 07                	jne    10663 <find_pte+0x6c>
            return (pte_t*)0;
   1065c:	b8 00 00 00 00       	mov    $0x0,%eax
   10661:	eb 42                	jmp    106a5 <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10663:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10666:	83 c8 07             	or     $0x7,%eax
   10669:	89 c2                	mov    %eax,%edx
   1066b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1066e:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10670:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10673:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   10676:	83 ec 04             	sub    $0x4,%esp
   10679:	68 00 10 00 00       	push   $0x1000
   1067e:	6a 00                	push   $0x0
   10680:	ff 75 f4             	pushl  -0xc(%ebp)
   10683:	e8 9b 22 00 00       	call   12923 <kmemset>
   10688:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   1068b:	83 ec 0c             	sub    $0xc,%esp
   1068e:	ff 75 0c             	pushl  0xc(%ebp)
   10691:	e8 b1 fc ff ff       	call   10347 <pte_index>
   10696:	83 c4 10             	add    $0x10,%esp
   10699:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a3:	01 d0                	add    %edx,%eax
}
   106a5:	c9                   	leave  
   106a6:	c3                   	ret    

000106a7 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106a7:	55                   	push   %ebp
   106a8:	89 e5                	mov    %esp,%ebp
   106aa:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106b4:	eb 6e                	jmp    10724 <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106b6:	83 ec 04             	sub    $0x4,%esp
   106b9:	6a 01                	push   $0x1
   106bb:	ff 75 0c             	pushl  0xc(%ebp)
   106be:	ff 75 08             	pushl  0x8(%ebp)
   106c1:	e8 31 ff ff ff       	call   105f7 <find_pte>
   106c6:	83 c4 10             	add    $0x10,%esp
   106c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106d0:	75 07                	jne    106d9 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106d7:	eb 53                	jmp    1072c <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106dc:	0f b6 00             	movzbl (%eax),%eax
   106df:	83 e0 01             	and    $0x1,%eax
   106e2:	84 c0                	test   %al,%al
   106e4:	74 1c                	je     10702 <memory_create_map+0x5b>
   106e6:	68 a9 30 01 00       	push   $0x130a9
   106eb:	68 c8 31 01 00       	push   $0x131c8
   106f0:	68 a3 00 00 00       	push   $0xa3
   106f5:	68 bc 30 01 00       	push   $0x130bc
   106fa:	e8 89 25 00 00       	call   12c88 <pannic>
   106ff:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   10702:	8b 45 10             	mov    0x10(%ebp),%eax
   10705:	0b 45 18             	or     0x18(%ebp),%eax
   10708:	83 c8 01             	or     $0x1,%eax
   1070b:	89 c2                	mov    %eax,%edx
   1070d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10710:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   10712:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10719:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10720:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10724:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10727:	3b 45 14             	cmp    0x14(%ebp),%eax
   1072a:	7c 8a                	jl     106b6 <memory_create_map+0xf>
    }
}
   1072c:	c9                   	leave  
   1072d:	c3                   	ret    

0001072e <create_kernel_table>:


void create_kernel_table(void) {
   1072e:	55                   	push   %ebp
   1072f:	89 e5                	mov    %esp,%ebp
   10731:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   10734:	83 ec 04             	sub    $0x4,%esp
   10737:	68 00 10 00 00       	push   $0x1000
   1073c:	6a 00                	push   $0x0
   1073e:	68 00 60 01 00       	push   $0x16000
   10743:	e8 db 21 00 00       	call   12923 <kmemset>
   10748:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1074b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10752:	e9 98 00 00 00       	jmp    107ef <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10757:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1075a:	c1 e0 04             	shl    $0x4,%eax
   1075d:	05 00 40 01 00       	add    $0x14000,%eax
   10762:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10765:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10768:	8b 00                	mov    (%eax),%eax
   1076a:	83 ec 08             	sub    $0x8,%esp
   1076d:	68 00 10 00 00       	push   $0x1000
   10772:	50                   	push   %eax
   10773:	e8 7b fb ff ff       	call   102f3 <down2>
   10778:	83 c4 10             	add    $0x10,%esp
   1077b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 40 04             	mov    0x4(%eax),%eax
   10784:	83 ec 08             	sub    $0x8,%esp
   10787:	68 00 10 00 00       	push   $0x1000
   1078c:	50                   	push   %eax
   1078d:	e8 4a fb ff ff       	call   102dc <up2>
   10792:	83 c4 10             	add    $0x10,%esp
   10795:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10798:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079b:	8b 40 08             	mov    0x8(%eax),%eax
   1079e:	83 ec 08             	sub    $0x8,%esp
   107a1:	68 00 10 00 00       	push   $0x1000
   107a6:	50                   	push   %eax
   107a7:	e8 47 fb ff ff       	call   102f3 <down2>
   107ac:	83 c4 10             	add    $0x10,%esp
   107af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107b5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107b8:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107be:	85 c0                	test   %eax,%eax
   107c0:	0f 48 c2             	cmovs  %edx,%eax
   107c3:	c1 f8 0c             	sar    $0xc,%eax
   107c6:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107cc:	8b 48 0c             	mov    0xc(%eax),%ecx
   107cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d5:	83 ec 0c             	sub    $0xc,%esp
   107d8:	51                   	push   %ecx
   107d9:	ff 75 e0             	pushl  -0x20(%ebp)
   107dc:	52                   	push   %edx
   107dd:	50                   	push   %eax
   107de:	68 00 60 01 00       	push   $0x16000
   107e3:	e8 bf fe ff ff       	call   106a7 <memory_create_map>
   107e8:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	83 f8 03             	cmp    $0x3,%eax
   107f5:	0f 86 5c ff ff ff    	jbe    10757 <create_kernel_table+0x29>
    }
}
   107fb:	90                   	nop
   107fc:	c9                   	leave  
   107fd:	c3                   	ret    

000107fe <memory_create_uvm>:

// 创建进程的初始页表
// 主要的工作创建页目录表，然后从内核页表中复制一部分
uint32_t memory_create_uvm(void) {
   107fe:	55                   	push   %ebp
   107ff:	89 e5                	mov    %esp,%ebp
   10801:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   10804:	83 ec 08             	sub    $0x8,%esp
   10807:	6a 01                	push   $0x1
   10809:	68 00 50 01 00       	push   $0x15000
   1080e:	e8 d9 fb ff ff       	call   103ec <addr_alloc_page>
   10813:	83 c4 10             	add    $0x10,%esp
   10816:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   10819:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1081d:	75 07                	jne    10826 <memory_create_uvm+0x28>
        return 0;
   1081f:	b8 00 00 00 00       	mov    $0x0,%eax
   10824:	eb 5b                	jmp    10881 <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   10826:	83 ec 04             	sub    $0x4,%esp
   10829:	68 00 10 00 00       	push   $0x1000
   1082e:	6a 00                	push   $0x0
   10830:	ff 75 f0             	pushl  -0x10(%ebp)
   10833:	e8 eb 20 00 00       	call   12923 <kmemset>
   10838:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083b:	83 ec 0c             	sub    $0xc,%esp
   1083e:	68 00 00 00 80       	push   $0x80000000
   10843:	e8 c4 fa ff ff       	call   1030c <pde_index>
   10848:	83 c4 10             	add    $0x10,%esp
   1084b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   1084e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10855:	eb 1f                	jmp    10876 <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10857:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1085a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10861:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10864:	01 c2                	add    %eax,%edx
   10866:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10869:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10870:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10872:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10876:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10879:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1087c:	77 d9                	ja     10857 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   1087e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10881:	c9                   	leave  
   10882:	c3                   	ret    

00010883 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   10883:	55                   	push   %ebp
   10884:	89 e5                	mov    %esp,%ebp
   10886:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10889:	83 ec 0c             	sub    $0xc,%esp
   1088c:	68 03 31 01 00       	push   $0x13103
   10891:	e8 fc 26 00 00       	call   12f92 <log_printf>
   10896:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10899:	83 ec 0c             	sub    $0xc,%esp
   1089c:	ff 75 08             	pushl  0x8(%ebp)
   1089f:	e8 11 fc ff ff       	call   104b5 <show_mem_info>
   108a4:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108a7:	c7 45 f4 86 af 01 00 	movl   $0x1af86,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108ae:	83 ec 0c             	sub    $0xc,%esp
   108b1:	ff 75 08             	pushl  0x8(%ebp)
   108b4:	e8 62 fc ff ff       	call   1051b <total_mem_size>
   108b9:	83 c4 10             	add    $0x10,%esp
   108bc:	2d 00 00 10 00       	sub    $0x100000,%eax
   108c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108c4:	83 ec 08             	sub    $0x8,%esp
   108c7:	68 00 10 00 00       	push   $0x1000
   108cc:	ff 75 f0             	pushl  -0x10(%ebp)
   108cf:	e8 1f fa ff ff       	call   102f3 <down2>
   108d4:	83 c4 10             	add    $0x10,%esp
   108d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108da:	83 ec 04             	sub    $0x4,%esp
   108dd:	ff 75 f0             	pushl  -0x10(%ebp)
   108e0:	68 00 00 10 00       	push   $0x100000
   108e5:	68 0d 31 01 00       	push   $0x1310d
   108ea:	e8 a3 26 00 00       	call   12f92 <log_printf>
   108ef:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108f2:	83 ec 0c             	sub    $0xc,%esp
   108f5:	68 00 10 00 00       	push   $0x1000
   108fa:	ff 75 f0             	pushl  -0x10(%ebp)
   108fd:	68 00 00 10 00       	push   $0x100000
   10902:	ff 75 f4             	pushl  -0xc(%ebp)
   10905:	68 00 50 01 00       	push   $0x15000
   1090a:	e8 80 fa ff ff       	call   1038f <addr_alloc_init>
   1090f:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10912:	a1 60 50 01 00       	mov    0x15060,%eax
   10917:	c1 e8 0c             	shr    $0xc,%eax
   1091a:	83 ec 0c             	sub    $0xc,%esp
   1091d:	50                   	push   %eax
   1091e:	e8 f9 1b 00 00       	call   1251c <bitmap_byte_count>
   10923:	83 c4 10             	add    $0x10,%esp
   10926:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10929:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10930:	76 1c                	jbe    1094e <memory_init+0xcb>
   10932:	68 28 31 01 00       	push   $0x13128
   10937:	68 dc 31 01 00       	push   $0x131dc
   1093c:	68 fe 00 00 00       	push   $0xfe
   10941:	68 bc 30 01 00       	push   $0x130bc
   10946:	e8 3d 23 00 00       	call   12c88 <pannic>
   1094b:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   1094e:	e8 db fd ff ff       	call   1072e <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10953:	b8 00 60 01 00       	mov    $0x16000,%eax
   10958:	83 ec 0c             	sub    $0xc,%esp
   1095b:	50                   	push   %eax
   1095c:	e8 1d fa ff ff       	call   1037e <mmu_set_page_dir>
   10961:	83 c4 10             	add    $0x10,%esp
}
   10964:	90                   	nop
   10965:	c9                   	leave  
   10966:	c3                   	ret    

00010967 <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10967:	55                   	push   %ebp
   10968:	89 e5                	mov    %esp,%ebp
   1096a:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   1096d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10970:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10973:	68 00 10 00 00       	push   $0x1000
   10978:	ff 75 10             	pushl  0x10(%ebp)
   1097b:	e8 5c f9 ff ff       	call   102dc <up2>
   10980:	83 c4 08             	add    $0x8,%esp
   10983:	c1 e8 0c             	shr    $0xc,%eax
   10986:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   10989:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10990:	e9 8d 00 00 00       	jmp    10a22 <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10995:	83 ec 08             	sub    $0x8,%esp
   10998:	6a 01                	push   $0x1
   1099a:	68 00 50 01 00       	push   $0x15000
   1099f:	e8 48 fa ff ff       	call   103ec <addr_alloc_page>
   109a4:	83 c4 10             	add    $0x10,%esp
   109a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   109aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109ae:	75 17                	jne    109c7 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   109b0:	83 ec 0c             	sub    $0xc,%esp
   109b3:	68 50 31 01 00       	push   $0x13150
   109b8:	e8 d5 25 00 00       	call   12f92 <log_printf>
   109bd:	83 c4 10             	add    $0x10,%esp
            return 0;
   109c0:	b8 00 00 00 00       	mov    $0x0,%eax
   109c5:	eb 6c                	jmp    10a33 <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109c7:	8b 45 08             	mov    0x8(%ebp),%eax
   109ca:	83 ec 0c             	sub    $0xc,%esp
   109cd:	ff 75 14             	pushl  0x14(%ebp)
   109d0:	6a 01                	push   $0x1
   109d2:	ff 75 e8             	pushl  -0x18(%ebp)
   109d5:	ff 75 f4             	pushl  -0xc(%ebp)
   109d8:	50                   	push   %eax
   109d9:	e8 c9 fc ff ff       	call   106a7 <memory_create_map>
   109de:	83 c4 20             	add    $0x20,%esp
   109e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   109e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   109e8:	79 2d                	jns    10a17 <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   109ea:	83 ec 0c             	sub    $0xc,%esp
   109ed:	68 70 31 01 00       	push   $0x13170
   109f2:	e8 9b 25 00 00       	call   12f92 <log_printf>
   109f7:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   109fa:	83 ec 04             	sub    $0x4,%esp
   109fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10a00:	ff 75 0c             	pushl  0xc(%ebp)
   10a03:	68 00 50 01 00       	push   $0x15000
   10a08:	e8 46 fa ff ff       	call   10453 <addr_free_page>
   10a0d:	83 c4 10             	add    $0x10,%esp

            return 0;
   10a10:	b8 00 00 00 00       	mov    $0x0,%eax
   10a15:	eb 1c                	jmp    10a33 <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a17:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10a1e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a28:	0f 8c 67 ff ff ff    	jl     10995 <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a33:	c9                   	leave  
   10a34:	c3                   	ret    

00010a35 <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常返回0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a35:	55                   	push   %ebp
   10a36:	89 e5                	mov    %esp,%ebp
   10a38:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10a3b:	e8 57 06 00 00       	call   11097 <task_current>
   10a40:	8b 40 64             	mov    0x64(%eax),%eax
   10a43:	ff 75 10             	pushl  0x10(%ebp)
   10a46:	ff 75 0c             	pushl  0xc(%ebp)
   10a49:	ff 75 08             	pushl  0x8(%ebp)
   10a4c:	50                   	push   %eax
   10a4d:	e8 15 ff ff ff       	call   10967 <memory_alloc_for_page_dir>
   10a52:	83 c4 10             	add    $0x10,%esp
}
   10a55:	c9                   	leave  
   10a56:	c3                   	ret    

00010a57 <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10a57:	55                   	push   %ebp
   10a58:	89 e5                	mov    %esp,%ebp
   10a5a:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10a5d:	e8 35 06 00 00       	call   11097 <task_current>
   10a62:	8b 40 64             	mov    0x64(%eax),%eax
}
   10a65:	c9                   	leave  
   10a66:	c3                   	ret    

00010a67 <memory_alloc_page>:


// 以页为单位，分配物理内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10a67:	55                   	push   %ebp
   10a68:	89 e5                	mov    %esp,%ebp
   10a6a:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10a6d:	83 ec 08             	sub    $0x8,%esp
   10a70:	6a 01                	push   $0x1
   10a72:	68 00 50 01 00       	push   $0x15000
   10a77:	e8 70 f9 ff ff       	call   103ec <addr_alloc_page>
   10a7c:	83 c4 10             	add    $0x10,%esp
   10a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10a85:	c9                   	leave  
   10a86:	c3                   	ret    

00010a87 <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的物理内存
void memory_free_page(uint32_t vaddr) {
   10a87:	55                   	push   %ebp
   10a88:	89 e5                	mov    %esp,%ebp
   10a8a:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10a8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a90:	85 c0                	test   %eax,%eax
   10a92:	78 17                	js     10aab <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10a94:	83 ec 04             	sub    $0x4,%esp
   10a97:	6a 01                	push   $0x1
   10a99:	ff 75 08             	pushl  0x8(%ebp)
   10a9c:	68 00 50 01 00       	push   $0x15000
   10aa1:	e8 ad f9 ff ff       	call   10453 <addr_free_page>
   10aa6:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10aa9:	eb 72                	jmp    10b1d <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10aab:	e8 a7 ff ff ff       	call   10a57 <curr_page_dir>
   10ab0:	83 ec 04             	sub    $0x4,%esp
   10ab3:	6a 00                	push   $0x0
   10ab5:	ff 75 08             	pushl  0x8(%ebp)
   10ab8:	50                   	push   %eax
   10ab9:	e8 39 fb ff ff       	call   105f7 <find_pte>
   10abe:	83 c4 10             	add    $0x10,%esp
   10ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10ac4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ac8:	75 0d                	jne    10ad7 <memory_free_page+0x50>
   10aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10acd:	0f b6 00             	movzbl (%eax),%eax
   10ad0:	83 e0 01             	and    $0x1,%eax
   10ad3:	84 c0                	test   %al,%al
   10ad5:	75 1c                	jne    10af3 <memory_free_page+0x6c>
   10ad7:	68 a4 31 01 00       	push   $0x131a4
   10adc:	68 e8 31 01 00       	push   $0x131e8
   10ae1:	68 46 01 00 00       	push   $0x146
   10ae6:	68 bc 30 01 00       	push   $0x130bc
   10aeb:	e8 98 21 00 00       	call   12c88 <pannic>
   10af0:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10af3:	83 ec 0c             	sub    $0xc,%esp
   10af6:	ff 75 f4             	pushl  -0xc(%ebp)
   10af9:	e8 59 f8 ff ff       	call   10357 <pte_paddr>
   10afe:	83 c4 10             	add    $0x10,%esp
   10b01:	83 ec 04             	sub    $0x4,%esp
   10b04:	6a 01                	push   $0x1
   10b06:	50                   	push   %eax
   10b07:	68 00 50 01 00       	push   $0x15000
   10b0c:	e8 42 f9 ff ff       	call   10453 <addr_free_page>
   10b11:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10b1d:	90                   	nop
   10b1e:	c9                   	leave  
   10b1f:	c3                   	ret    

00010b20 <kalloc>:

/*-- ------------------------------ --*/
// 申请一页物理内存。
static uint32_t kalloc() {
   10b20:	55                   	push   %ebp
   10b21:	89 e5                	mov    %esp,%ebp
   10b23:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10b26:	83 ec 08             	sub    $0x8,%esp
   10b29:	6a 01                	push   $0x1
   10b2b:	68 00 50 01 00       	push   $0x15000
   10b30:	e8 b7 f8 ff ff       	call   103ec <addr_alloc_page>
   10b35:	83 c4 10             	add    $0x10,%esp
}
   10b38:	c9                   	leave  
   10b39:	c3                   	ret    

00010b3a <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr) {
   10b3a:	55                   	push   %ebp
   10b3b:	89 e5                	mov    %esp,%ebp
   10b3d:	83 ec 08             	sub    $0x8,%esp
    addr_free_page(&paddr_alloc, addr, 1);
   10b40:	83 ec 04             	sub    $0x4,%esp
   10b43:	6a 01                	push   $0x1
   10b45:	ff 75 08             	pushl  0x8(%ebp)
   10b48:	68 00 50 01 00       	push   $0x15000
   10b4d:	e8 01 f9 ff ff       	call   10453 <addr_free_page>
   10b52:	83 c4 10             	add    $0x10,%esp
}
   10b55:	90                   	nop
   10b56:	c9                   	leave  
   10b57:	c3                   	ret    

00010b58 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10b58:	55                   	push   %ebp
   10b59:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10b5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10b64:	8b 45 08             	mov    0x8(%ebp),%eax
   10b67:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10b6e:	90                   	nop
   10b6f:	5d                   	pop    %ebp
   10b70:	c3                   	ret    

00010b71 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10b71:	55                   	push   %ebp
   10b72:	89 e5                	mov    %esp,%ebp
    return node->next;
   10b74:	8b 45 08             	mov    0x8(%ebp),%eax
   10b77:	8b 40 04             	mov    0x4(%eax),%eax
}
   10b7a:	5d                   	pop    %ebp
   10b7b:	c3                   	ret    

00010b7c <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10b7c:	55                   	push   %ebp
   10b7d:	89 e5                	mov    %esp,%ebp
    return list->count;
   10b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b82:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b85:	5d                   	pop    %ebp
   10b86:	c3                   	ret    

00010b87 <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10b87:	55                   	push   %ebp
   10b88:	89 e5                	mov    %esp,%ebp
    return list->first;
   10b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8d:	8b 00                	mov    (%eax),%eax
}
   10b8f:	5d                   	pop    %ebp
   10b90:	c3                   	ret    

00010b91 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10b91:	55                   	push   %ebp
   10b92:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10b94:	8b 45 08             	mov    0x8(%ebp),%eax
   10b97:	0f 22 d8             	mov    %eax,%cr3
}
   10b9a:	90                   	nop
   10b9b:	5d                   	pop    %ebp
   10b9c:	c3                   	ret    

00010b9d <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   10b9d:	55                   	push   %ebp
   10b9e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10ba0:	f4                   	hlt    
}
   10ba1:	90                   	nop
   10ba2:	5d                   	pop    %ebp
   10ba3:	c3                   	ret    

00010ba4 <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10ba4:	55                   	push   %ebp
   10ba5:	89 e5                	mov    %esp,%ebp
   10ba7:	83 ec 04             	sub    $0x4,%esp
   10baa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10bb1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bb5:	0f 00 d8             	ltr    %ax
}
   10bb8:	90                   	nop
   10bb9:	c9                   	leave  
   10bba:	c3                   	ret    

00010bbb <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10bbb:	55                   	push   %ebp
   10bbc:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10bbe:	ff 75 08             	pushl  0x8(%ebp)
   10bc1:	e8 cb ff ff ff       	call   10b91 <write_cr3>
   10bc6:	83 c4 04             	add    $0x4,%esp
}
   10bc9:	90                   	nop
   10bca:	c9                   	leave  
   10bcb:	c3                   	ret    

00010bcc <tss_init>:

// 空闲进程的栈, 不是广义上的内核栈
static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   10bcc:	55                   	push   %ebp
   10bcd:	89 e5                	mov    %esp,%ebp
   10bcf:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10bd2:	e8 b7 08 00 00       	call   1148e <gdt_alloc_desc>
   10bd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10bda:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10bde:	79 1a                	jns    10bfa <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10be0:	83 ec 0c             	sub    $0xc,%esp
   10be3:	68 fc 31 01 00       	push   $0x131fc
   10be8:	e8 a5 23 00 00       	call   12f92 <log_printf>
   10bed:	83 c4 10             	add    $0x10,%esp
        return -1;
   10bf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bf5:	e9 58 01 00 00       	jmp    10d52 <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfd:	83 c0 48             	add    $0x48,%eax
   10c00:	68 89 00 00 00       	push   $0x89
   10c05:	6a 68                	push   $0x68
   10c07:	50                   	push   %eax
   10c08:	ff 75 ec             	pushl  -0x14(%ebp)
   10c0b:	e8 10 07 00 00       	call   11320 <segment_desc_set>
   10c10:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10c13:	8b 45 08             	mov    0x8(%ebp),%eax
   10c16:	83 c0 48             	add    $0x48,%eax
   10c19:	83 ec 04             	sub    $0x4,%esp
   10c1c:	6a 68                	push   $0x68
   10c1e:	6a 00                	push   $0x0
   10c20:	50                   	push   %eax
   10c21:	e8 fd 1c 00 00       	call   12923 <kmemset>
   10c26:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间
    uint32_t kernel_stack = memory_alloc_page();
   10c29:	e8 39 fe ff ff       	call   10a67 <memory_alloc_page>
   10c2e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   10c31:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10c35:	0f 84 ec 00 00 00    	je     10d27 <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10c3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c3e:	83 e0 01             	and    $0x1,%eax
   10c41:	85 c0                	test   %eax,%eax
   10c43:	74 10                	je     10c55 <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   10c45:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10c4c:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c53:	eb 16                	jmp    10c6b <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10c55:	a1 90 71 01 00       	mov    0x17190,%eax
   10c5a:	83 c8 03             	or     $0x3,%eax
   10c5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10c60:	a1 94 71 01 00       	mov    0x17194,%eax
   10c65:	83 c8 03             	or     $0x3,%eax
   10c68:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   10c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6e:	8b 55 10             	mov    0x10(%ebp),%edx
   10c71:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10c74:	8b 45 08             	mov    0x8(%ebp),%eax
   10c77:	8b 55 14             	mov    0x14(%ebp),%edx
   10c7a:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   10c80:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c83:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10c89:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8c:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = data_sel;
   10c8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10c92:	8b 45 08             	mov    0x8(%ebp),%eax
   10c95:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   10c9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9e:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10ca5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ca8:	8b 45 08             	mov    0x8(%ebp),%eax
   10cab:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10cb1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10cba:	8b 45 08             	mov    0x8(%ebp),%eax
   10cbd:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10ccc:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccf:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10cd5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd8:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10cde:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce1:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = code_sel;
   10ce7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10cea:	8b 45 08             	mov    0x8(%ebp),%eax
   10ced:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10cf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf6:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10cfd:	e8 fc fa ff ff       	call   107fe <memory_create_uvm>
   10d02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   10d05:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d09:	74 1f                	je     10d2a <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   10d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d11:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10d14:	8b 45 08             	mov    0x8(%ebp),%eax
   10d17:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10d1a:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10d20:	b8 00 00 00 00       	mov    $0x0,%eax
   10d25:	eb 2b                	jmp    10d52 <tss_init+0x186>
        goto tss_init_failed;
   10d27:	90                   	nop
   10d28:	eb 01                	jmp    10d2b <tss_init+0x15f>
        goto tss_init_failed;
   10d2a:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   10d2b:	83 ec 0c             	sub    $0xc,%esp
   10d2e:	ff 75 ec             	pushl  -0x14(%ebp)
   10d31:	e8 cd 07 00 00       	call   11503 <gdt_free_sel>
   10d36:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   10d39:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d3d:	74 0e                	je     10d4d <tss_init+0x181>
        memory_free_page(kernel_stack);
   10d3f:	83 ec 0c             	sub    $0xc,%esp
   10d42:	ff 75 e8             	pushl  -0x18(%ebp)
   10d45:	e8 3d fd ff ff       	call   10a87 <memory_free_page>
   10d4a:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   10d4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d52:	c9                   	leave  
   10d53:	c3                   	ret    

00010d54 <task_init>:
// task_t* task:     已申请内存的进程结构体
// const char* name: 进程名
// int flag:         TASK_FLAG_USER 为用户进程，TASK_FLAG_SYSTEM 为内核进程
// uint32_t entry:   进程入口地址
// uint32_t esp:     进程栈底指针
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   10d54:	55                   	push   %ebp
   10d55:	89 e5                	mov    %esp,%ebp
   10d57:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10d5a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d5e:	75 19                	jne    10d79 <task_init+0x25>
   10d60:	68 0e 32 01 00       	push   $0x1320e
   10d65:	68 98 32 01 00       	push   $0x13298
   10d6a:	6a 51                	push   $0x51
   10d6c:	68 24 32 01 00       	push   $0x13224
   10d71:	e8 12 1f 00 00       	call   12c88 <pannic>
   10d76:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   10d79:	ff 75 18             	pushl  0x18(%ebp)
   10d7c:	ff 75 14             	pushl  0x14(%ebp)
   10d7f:	ff 75 10             	pushl  0x10(%ebp)
   10d82:	ff 75 08             	pushl  0x8(%ebp)
   10d85:	e8 42 fe ff ff       	call   10bcc <tss_init>
   10d8a:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10d8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d90:	83 c0 04             	add    $0x4,%eax
   10d93:	83 ec 04             	sub    $0x4,%esp
   10d96:	6a 20                	push   $0x20
   10d98:	ff 75 0c             	pushl  0xc(%ebp)
   10d9b:	50                   	push   %eax
   10d9c:	e8 0e 1a 00 00       	call   127af <kstrncpy>
   10da1:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10da4:	8b 45 08             	mov    0x8(%ebp),%eax
   10da7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10dad:	8b 45 08             	mov    0x8(%ebp),%eax
   10db0:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10db7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dba:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10dc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc4:	8b 50 40             	mov    0x40(%eax),%edx
   10dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dca:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10dcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd0:	83 c0 2c             	add    $0x2c,%eax
   10dd3:	83 ec 0c             	sub    $0xc,%esp
   10dd6:	50                   	push   %eax
   10dd7:	e8 7c fd ff ff       	call   10b58 <list_node_init>
   10ddc:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   10de2:	83 c0 24             	add    $0x24,%eax
   10de5:	83 ec 0c             	sub    $0xc,%esp
   10de8:	50                   	push   %eax
   10de9:	e8 6a fd ff ff       	call   10b58 <list_node_init>
   10dee:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10df1:	8b 45 08             	mov    0x8(%ebp),%eax
   10df4:	83 c0 34             	add    $0x34,%eax
   10df7:	83 ec 0c             	sub    $0xc,%esp
   10dfa:	50                   	push   %eax
   10dfb:	e8 58 fd ff ff       	call   10b58 <list_node_init>
   10e00:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10e03:	e8 7f 10 00 00       	call   11e87 <irq_enter_protection>
   10e08:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10e0b:	83 ec 0c             	sub    $0xc,%esp
   10e0e:	ff 75 08             	pushl  0x8(%ebp)
   10e11:	e8 df 01 00 00       	call   10ff5 <task_set_ready>
   10e16:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10e19:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1c:	83 c0 2c             	add    $0x2c,%eax
   10e1f:	83 ec 08             	sub    $0x8,%esp
   10e22:	50                   	push   %eax
   10e23:	68 10 70 01 00       	push   $0x17010
   10e28:	e8 26 1f 00 00       	call   12d53 <list_insert_back>
   10e2d:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10e30:	83 ec 0c             	sub    $0xc,%esp
   10e33:	ff 75 f4             	pushl  -0xc(%ebp)
   10e36:	e8 64 10 00 00       	call   11e9f <irq_leave_protection>
   10e3b:	83 c4 10             	add    $0x10,%esp

    return 0;
   10e3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e43:	c9                   	leave  
   10e44:	c3                   	ret    

00010e45 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10e45:	55                   	push   %ebp
   10e46:	89 e5                	mov    %esp,%ebp
   10e48:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e4e:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10e54:	83 ec 0c             	sub    $0xc,%esp
   10e57:	50                   	push   %eax
   10e58:	e8 1d 06 00 00       	call   1147a <swtch_to_tss>
   10e5d:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10e60:	90                   	nop
   10e61:	c9                   	leave  
   10e62:	c3                   	ret    

00010e63 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10e63:	55                   	push   %ebp
   10e64:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   10e66:	e8 32 fd ff ff       	call   10b9d <hlt>
   10e6b:	eb f9                	jmp    10e66 <idle_task_entry+0x3>

00010e6d <task_manager_init>:
    }
}


void task_manager_init(void) {
   10e6d:	55                   	push   %ebp
   10e6e:	89 e5                	mov    %esp,%ebp
   10e70:	83 ec 18             	sub    $0x18,%esp
    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   10e73:	e8 16 06 00 00       	call   1148e <gdt_alloc_desc>
   10e78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10e7b:	68 f2 40 00 00       	push   $0x40f2
   10e80:	6a ff                	push   $0xffffffff
   10e82:	6a 00                	push   $0x0
   10e84:	ff 75 f4             	pushl  -0xc(%ebp)
   10e87:	e8 94 04 00 00       	call   11320 <segment_desc_set>
   10e8c:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e92:	a3 94 71 01 00       	mov    %eax,0x17194

    sel = gdt_alloc_desc();
   10e97:	e8 f2 05 00 00       	call   1148e <gdt_alloc_desc>
   10e9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10e9f:	68 fa 40 00 00       	push   $0x40fa
   10ea4:	6a ff                	push   $0xffffffff
   10ea6:	6a 00                	push   $0x0
   10ea8:	ff 75 f4             	pushl  -0xc(%ebp)
   10eab:	e8 70 04 00 00       	call   11320 <segment_desc_set>
   10eb0:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eb6:	a3 90 71 01 00       	mov    %eax,0x17190

    list_init(&task_manager.ready_list);
   10ebb:	83 ec 0c             	sub    $0xc,%esp
   10ebe:	68 04 70 01 00       	push   $0x17004
   10ec3:	e8 09 1e 00 00       	call   12cd1 <list_init>
   10ec8:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10ecb:	83 ec 0c             	sub    $0xc,%esp
   10ece:	68 10 70 01 00       	push   $0x17010
   10ed3:	e8 f9 1d 00 00       	call   12cd1 <list_init>
   10ed8:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10edb:	83 ec 0c             	sub    $0xc,%esp
   10ede:	68 1c 70 01 00       	push   $0x1701c
   10ee3:	e8 e9 1d 00 00       	call   12cd1 <list_init>
   10ee8:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10eeb:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10ef2:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   10ef5:	b8 a0 71 01 00       	mov    $0x171a0,%eax
    task_init(&task_manager.idle_task, 
   10efa:	05 00 04 00 00       	add    $0x400,%eax
   10eff:	ba 63 0e 01 00       	mov    $0x10e63,%edx
   10f04:	83 ec 0c             	sub    $0xc,%esp
   10f07:	50                   	push   %eax
   10f08:	52                   	push   %edx
   10f09:	6a 01                	push   $0x1
   10f0b:	68 69 32 01 00       	push   $0x13269
   10f10:	68 dc 70 01 00       	push   $0x170dc
   10f15:	e8 3a fe ff ff       	call   10d54 <task_init>
   10f1a:	83 c4 20             	add    $0x20,%esp
    );
}
   10f1d:	90                   	nop
   10f1e:	c9                   	leave  
   10f1f:	c3                   	ret    

00010f20 <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10f20:	55                   	push   %ebp
   10f21:	89 e5                	mov    %esp,%ebp
   10f23:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10f26:	ba 86 af 01 00       	mov    $0x1af86,%edx
   10f2b:	b8 40 af 01 00       	mov    $0x1af40,%eax
   10f30:	29 c2                	sub    %eax,%edx
   10f32:	89 d0                	mov    %edx,%eax
   10f34:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10f37:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10f3e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   10f42:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10f45:	77 1c                	ja     10f63 <task_first_init+0x43>
   10f47:	68 73 32 01 00       	push   $0x13273
   10f4c:	68 a4 32 01 00       	push   $0x132a4
   10f51:	68 a2 00 00 00       	push   $0xa2
   10f56:	68 24 32 01 00       	push   $0x13224
   10f5b:	e8 28 1d 00 00       	call   12c88 <pannic>
   10f60:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10f63:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", 0, (uint32_t)first_start, first_start + alloc_size);
   10f6a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f70:	01 d0                	add    %edx,%eax
   10f72:	83 ec 0c             	sub    $0xc,%esp
   10f75:	50                   	push   %eax
   10f76:	ff 75 ec             	pushl  -0x14(%ebp)
   10f79:	6a 00                	push   $0x0
   10f7b:	68 8a 32 01 00       	push   $0x1328a
   10f80:	68 28 70 01 00       	push   $0x17028
   10f85:	e8 ca fd ff ff       	call   10d54 <task_init>
   10f8a:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10f8d:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10f92:	0f b7 c0             	movzwl %ax,%eax
   10f95:	83 ec 0c             	sub    $0xc,%esp
   10f98:	50                   	push   %eax
   10f99:	e8 06 fc ff ff       	call   10ba4 <write_tr>
   10f9e:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10fa1:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10fa8:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10fab:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10fb0:	83 ec 0c             	sub    $0xc,%esp
   10fb3:	50                   	push   %eax
   10fb4:	e8 02 fc ff ff       	call   10bbb <mmu_set_page_dir>
   10fb9:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10fbc:	83 ec 04             	sub    $0x4,%esp
   10fbf:	6a 07                	push   $0x7
   10fc1:	ff 75 f0             	pushl  -0x10(%ebp)
   10fc4:	ff 75 ec             	pushl  -0x14(%ebp)
   10fc7:	e8 69 fa ff ff       	call   10a35 <memory_alloc_page_for>
   10fcc:	83 c4 10             	add    $0x10,%esp

    kmemcpy((void*)first_start, s_first_task, copy_size);
   10fcf:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   10fd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10fd6:	83 ec 04             	sub    $0x4,%esp
   10fd9:	52                   	push   %edx
   10fda:	68 40 af 01 00       	push   $0x1af40
   10fdf:	50                   	push   %eax
   10fe0:	e8 ef 18 00 00       	call   128d4 <kmemcpy>
   10fe5:	83 c4 10             	add    $0x10,%esp
}
   10fe8:	90                   	nop
   10fe9:	c9                   	leave  
   10fea:	c3                   	ret    

00010feb <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10feb:	55                   	push   %ebp
   10fec:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10fee:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10ff3:	5d                   	pop    %ebp
   10ff4:	c3                   	ret    

00010ff5 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10ff5:	55                   	push   %ebp
   10ff6:	89 e5                	mov    %esp,%ebp
   10ff8:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10ffb:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   11002:	74 22                	je     11026 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	83 c0 24             	add    $0x24,%eax
   1100a:	83 ec 08             	sub    $0x8,%esp
   1100d:	50                   	push   %eax
   1100e:	68 04 70 01 00       	push   $0x17004
   11013:	e8 3b 1d 00 00       	call   12d53 <list_insert_back>
   11018:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1101b:	8b 45 08             	mov    0x8(%ebp),%eax
   1101e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11024:	eb 01                	jmp    11027 <task_set_ready+0x32>
        return;
   11026:	90                   	nop
}
   11027:	c9                   	leave  
   11028:	c3                   	ret    

00011029 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   11029:	55                   	push   %ebp
   1102a:	89 e5                	mov    %esp,%ebp
   1102c:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1102f:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   11036:	74 19                	je     11051 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   11038:	8b 45 08             	mov    0x8(%ebp),%eax
   1103b:	83 c0 24             	add    $0x24,%eax
   1103e:	83 ec 08             	sub    $0x8,%esp
   11041:	50                   	push   %eax
   11042:	68 04 70 01 00       	push   $0x17004
   11047:	e8 e3 1d 00 00       	call   12e2f <list_remove>
   1104c:	83 c4 10             	add    $0x10,%esp
   1104f:	eb 01                	jmp    11052 <task_set_blocked+0x29>
        return;
   11051:	90                   	nop
}
   11052:	c9                   	leave  
   11053:	c3                   	ret    

00011054 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   11054:	55                   	push   %ebp
   11055:	89 e5                	mov    %esp,%ebp
   11057:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   1105a:	68 04 70 01 00       	push   $0x17004
   1105f:	e8 18 fb ff ff       	call   10b7c <list_size>
   11064:	83 c4 04             	add    $0x4,%esp
   11067:	85 c0                	test   %eax,%eax
   11069:	75 07                	jne    11072 <task_next_run+0x1e>
        return &task_manager.idle_task;
   1106b:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   11070:	eb 23                	jmp    11095 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   11072:	68 04 70 01 00       	push   $0x17004
   11077:	e8 0b fb ff ff       	call   10b87 <list_first>
   1107c:	83 c4 04             	add    $0x4,%esp
   1107f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11082:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11086:	74 08                	je     11090 <task_next_run+0x3c>
   11088:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1108b:	83 e8 24             	sub    $0x24,%eax
   1108e:	eb 05                	jmp    11095 <task_next_run+0x41>
   11090:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11095:	c9                   	leave  
   11096:	c3                   	ret    

00011097 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   11097:	55                   	push   %ebp
   11098:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1109a:	a1 00 70 01 00       	mov    0x17000,%eax
}
   1109f:	5d                   	pop    %ebp
   110a0:	c3                   	ret    

000110a1 <sys_sched_yield>:


int sys_sched_yield(void) {
   110a1:	55                   	push   %ebp
   110a2:	89 e5                	mov    %esp,%ebp
   110a4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   110a7:	e8 db 0d 00 00       	call   11e87 <irq_enter_protection>
   110ac:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   110af:	83 ec 0c             	sub    $0xc,%esp
   110b2:	68 04 70 01 00       	push   $0x17004
   110b7:	e8 c0 fa ff ff       	call   10b7c <list_size>
   110bc:	83 c4 10             	add    $0x10,%esp
   110bf:	83 f8 01             	cmp    $0x1,%eax
   110c2:	7e 29                	jle    110ed <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   110c4:	e8 ce ff ff ff       	call   11097 <task_current>
   110c9:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   110cc:	83 ec 0c             	sub    $0xc,%esp
   110cf:	ff 75 f0             	pushl  -0x10(%ebp)
   110d2:	e8 52 ff ff ff       	call   11029 <task_set_blocked>
   110d7:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   110da:	83 ec 0c             	sub    $0xc,%esp
   110dd:	ff 75 f0             	pushl  -0x10(%ebp)
   110e0:	e8 10 ff ff ff       	call   10ff5 <task_set_ready>
   110e5:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   110e8:	e8 15 00 00 00       	call   11102 <task_dispatch>
    }

    irq_leave_protection(state);
   110ed:	83 ec 0c             	sub    $0xc,%esp
   110f0:	ff 75 f4             	pushl  -0xc(%ebp)
   110f3:	e8 a7 0d 00 00       	call   11e9f <irq_leave_protection>
   110f8:	83 c4 10             	add    $0x10,%esp

    return 0;
   110fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11100:	c9                   	leave  
   11101:	c3                   	ret    

00011102 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   11102:	55                   	push   %ebp
   11103:	89 e5                	mov    %esp,%ebp
   11105:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11108:	e8 7a 0d 00 00       	call   11e87 <irq_enter_protection>
   1110d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   11110:	e8 3f ff ff ff       	call   11054 <task_next_run>
   11115:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   11118:	a1 00 70 01 00       	mov    0x17000,%eax
   1111d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11120:	74 2a                	je     1114c <task_dispatch+0x4a>
        task_t* from = task_current();
   11122:	e8 70 ff ff ff       	call   11097 <task_current>
   11127:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   1112a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1112d:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   11132:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11135:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   1113b:	83 ec 08             	sub    $0x8,%esp
   1113e:	ff 75 f0             	pushl  -0x10(%ebp)
   11141:	ff 75 ec             	pushl  -0x14(%ebp)
   11144:	e8 fc fc ff ff       	call   10e45 <task_switch_from_to>
   11149:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   1114c:	83 ec 0c             	sub    $0xc,%esp
   1114f:	ff 75 f4             	pushl  -0xc(%ebp)
   11152:	e8 48 0d 00 00       	call   11e9f <irq_leave_protection>
   11157:	83 c4 10             	add    $0x10,%esp
}
   1115a:	90                   	nop
   1115b:	c9                   	leave  
   1115c:	c3                   	ret    

0001115d <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   1115d:	55                   	push   %ebp
   1115e:	89 e5                	mov    %esp,%ebp
   11160:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   11163:	e8 2f ff ff ff       	call   11097 <task_current>
   11168:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   1116b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1116e:	8b 40 44             	mov    0x44(%eax),%eax
   11171:	8d 50 ff             	lea    -0x1(%eax),%edx
   11174:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11177:	89 50 44             	mov    %edx,0x44(%eax)
   1117a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1117d:	8b 40 44             	mov    0x44(%eax),%eax
   11180:	85 c0                	test   %eax,%eax
   11182:	75 2d                	jne    111b1 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   11184:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11187:	8b 50 40             	mov    0x40(%eax),%edx
   1118a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1118d:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   11190:	83 ec 0c             	sub    $0xc,%esp
   11193:	ff 75 f0             	pushl  -0x10(%ebp)
   11196:	e8 8e fe ff ff       	call   11029 <task_set_blocked>
   1119b:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1119e:	83 ec 0c             	sub    $0xc,%esp
   111a1:	ff 75 f0             	pushl  -0x10(%ebp)
   111a4:	e8 4c fe ff ff       	call   10ff5 <task_set_ready>
   111a9:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   111ac:	e8 51 ff ff ff       	call   11102 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   111b1:	83 ec 0c             	sub    $0xc,%esp
   111b4:	68 1c 70 01 00       	push   $0x1701c
   111b9:	e8 c9 f9 ff ff       	call   10b87 <list_first>
   111be:	83 c4 10             	add    $0x10,%esp
   111c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   111c4:	eb 62                	jmp    11228 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   111c6:	83 ec 0c             	sub    $0xc,%esp
   111c9:	ff 75 f4             	pushl  -0xc(%ebp)
   111cc:	e8 a0 f9 ff ff       	call   10b71 <list_node_next>
   111d1:	83 c4 10             	add    $0x10,%esp
   111d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   111d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111db:	74 08                	je     111e5 <task_time_tick+0x88>
   111dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111e0:	83 e8 24             	sub    $0x24,%eax
   111e3:	eb 05                	jmp    111ea <task_time_tick+0x8d>
   111e5:	b8 00 00 00 00       	mov    $0x0,%eax
   111ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   111ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   111f0:	8b 40 3c             	mov    0x3c(%eax),%eax
   111f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   111f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   111f9:	89 50 3c             	mov    %edx,0x3c(%eax)
   111fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   111ff:	8b 40 3c             	mov    0x3c(%eax),%eax
   11202:	85 c0                	test   %eax,%eax
   11204:	75 1c                	jne    11222 <task_time_tick+0xc5>
            task_set_wakeup(task);
   11206:	83 ec 0c             	sub    $0xc,%esp
   11209:	ff 75 e8             	pushl  -0x18(%ebp)
   1120c:	e8 56 00 00 00       	call   11267 <task_set_wakeup>
   11211:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11214:	83 ec 0c             	sub    $0xc,%esp
   11217:	ff 75 e8             	pushl  -0x18(%ebp)
   1121a:	e8 d6 fd ff ff       	call   10ff5 <task_set_ready>
   1121f:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   11222:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11225:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11228:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1122c:	75 98                	jne    111c6 <task_time_tick+0x69>
    }

    task_dispatch();
   1122e:	e8 cf fe ff ff       	call   11102 <task_dispatch>
}
   11233:	90                   	nop
   11234:	c9                   	leave  
   11235:	c3                   	ret    

00011236 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   11236:	55                   	push   %ebp
   11237:	89 e5                	mov    %esp,%ebp
   11239:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   1123c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11240:	74 22                	je     11264 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   11242:	8b 55 0c             	mov    0xc(%ebp),%edx
   11245:	8b 45 08             	mov    0x8(%ebp),%eax
   11248:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   1124b:	8b 45 08             	mov    0x8(%ebp),%eax
   1124e:	83 c0 24             	add    $0x24,%eax
   11251:	83 ec 08             	sub    $0x8,%esp
   11254:	50                   	push   %eax
   11255:	68 1c 70 01 00       	push   $0x1701c
   1125a:	e8 f4 1a 00 00       	call   12d53 <list_insert_back>
   1125f:	83 c4 10             	add    $0x10,%esp
   11262:	eb 01                	jmp    11265 <task_set_sleep+0x2f>
        return;
   11264:	90                   	nop
}
   11265:	c9                   	leave  
   11266:	c3                   	ret    

00011267 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   11267:	55                   	push   %ebp
   11268:	89 e5                	mov    %esp,%ebp
   1126a:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   1126d:	8b 45 08             	mov    0x8(%ebp),%eax
   11270:	83 c0 24             	add    $0x24,%eax
   11273:	83 ec 08             	sub    $0x8,%esp
   11276:	50                   	push   %eax
   11277:	68 1c 70 01 00       	push   $0x1701c
   1127c:	e8 ae 1b 00 00       	call   12e2f <list_remove>
   11281:	83 c4 10             	add    $0x10,%esp
}
   11284:	90                   	nop
   11285:	c9                   	leave  
   11286:	c3                   	ret    

00011287 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   11287:	55                   	push   %ebp
   11288:	89 e5                	mov    %esp,%ebp
   1128a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1128d:	e8 f5 0b 00 00       	call   11e87 <irq_enter_protection>
   11292:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   11295:	a1 00 70 01 00       	mov    0x17000,%eax
   1129a:	83 ec 0c             	sub    $0xc,%esp
   1129d:	50                   	push   %eax
   1129e:	e8 86 fd ff ff       	call   11029 <task_set_blocked>
   112a3:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   112a6:	8b 45 08             	mov    0x8(%ebp),%eax
   112a9:	83 c0 09             	add    $0x9,%eax
   112ac:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   112b1:	f7 e2                	mul    %edx
   112b3:	c1 ea 03             	shr    $0x3,%edx
   112b6:	a1 00 70 01 00       	mov    0x17000,%eax
   112bb:	83 ec 08             	sub    $0x8,%esp
   112be:	52                   	push   %edx
   112bf:	50                   	push   %eax
   112c0:	e8 71 ff ff ff       	call   11236 <task_set_sleep>
   112c5:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   112c8:	e8 35 fe ff ff       	call   11102 <task_dispatch>

    irq_leave_protection(state);
   112cd:	83 ec 0c             	sub    $0xc,%esp
   112d0:	ff 75 f4             	pushl  -0xc(%ebp)
   112d3:	e8 c7 0b 00 00       	call   11e9f <irq_leave_protection>
   112d8:	83 c4 10             	add    $0x10,%esp
   112db:	90                   	nop
   112dc:	c9                   	leave  
   112dd:	c3                   	ret    

000112de <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   112de:	55                   	push   %ebp
   112df:	89 e5                	mov    %esp,%ebp
   112e1:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   112e4:	8b 45 08             	mov    0x8(%ebp),%eax
   112e7:	c1 e8 10             	shr    $0x10,%eax
   112ea:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   112ee:	8b 45 08             	mov    0x8(%ebp),%eax
   112f1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   112f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112f8:	83 e8 01             	sub    $0x1,%eax
   112fb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   112ff:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11303:	90                   	nop
   11304:	c9                   	leave  
   11305:	c3                   	ret    

00011306 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11306:	55                   	push   %ebp
   11307:	89 e5                	mov    %esp,%ebp
   11309:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   1130c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1130f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11312:	8b 45 08             	mov    0x8(%ebp),%eax
   11315:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11318:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1131b:	ff 28                	ljmp   *(%eax)
}
   1131d:	90                   	nop
   1131e:	c9                   	leave  
   1131f:	c3                   	ret    

00011320 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   11320:	55                   	push   %ebp
   11321:	89 e5                	mov    %esp,%ebp
   11323:	83 ec 14             	sub    $0x14,%esp
   11326:	8b 45 14             	mov    0x14(%ebp),%eax
   11329:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   1132d:	8b 45 08             	mov    0x8(%ebp),%eax
   11330:	83 e0 f8             	and    $0xfffffff8,%eax
   11333:	05 a0 81 01 00       	add    $0x181a0,%eax
   11338:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   1133b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11342:	76 0f                	jbe    11353 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   11344:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1134a:	8b 45 10             	mov    0x10(%ebp),%eax
   1134d:	c1 e8 0c             	shr    $0xc,%eax
   11350:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   11353:	8b 45 10             	mov    0x10(%ebp),%eax
   11356:	89 c2                	mov    %eax,%edx
   11358:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1135b:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   1135e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11361:	89 c2                	mov    %eax,%edx
   11363:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11366:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1136a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1136d:	c1 e8 10             	shr    $0x10,%eax
   11370:	89 c2                	mov    %eax,%edx
   11372:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11375:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   11378:	8b 45 10             	mov    0x10(%ebp),%eax
   1137b:	c1 e8 10             	shr    $0x10,%eax
   1137e:	c1 e0 08             	shl    $0x8,%eax
   11381:	66 25 00 0f          	and    $0xf00,%ax
   11385:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11389:	89 c2                	mov    %eax,%edx
   1138b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138e:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11392:	8b 45 0c             	mov    0xc(%ebp),%eax
   11395:	c1 e8 18             	shr    $0x18,%eax
   11398:	89 c2                	mov    %eax,%edx
   1139a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1139d:	88 50 07             	mov    %dl,0x7(%eax)
}
   113a0:	90                   	nop
   113a1:	c9                   	leave  
   113a2:	c3                   	ret    

000113a3 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   113a3:	55                   	push   %ebp
   113a4:	89 e5                	mov    %esp,%ebp
   113a6:	83 ec 08             	sub    $0x8,%esp
   113a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   113ac:	8b 45 14             	mov    0x14(%ebp),%eax
   113af:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113b3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   113b7:	8b 45 10             	mov    0x10(%ebp),%eax
   113ba:	89 c2                	mov    %eax,%edx
   113bc:	8b 45 08             	mov    0x8(%ebp),%eax
   113bf:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   113c2:	8b 45 08             	mov    0x8(%ebp),%eax
   113c5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113c9:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   113cd:	8b 45 08             	mov    0x8(%ebp),%eax
   113d0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   113d4:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   113d8:	8b 45 10             	mov    0x10(%ebp),%eax
   113db:	c1 e8 10             	shr    $0x10,%eax
   113de:	89 c2                	mov    %eax,%edx
   113e0:	8b 45 08             	mov    0x8(%ebp),%eax
   113e3:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   113e7:	90                   	nop
   113e8:	c9                   	leave  
   113e9:	c3                   	ret    

000113ea <init_gdt>:


void init_gdt(void) {
   113ea:	55                   	push   %ebp
   113eb:	89 e5                	mov    %esp,%ebp
   113ed:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   113f0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   113f7:	eb 19                	jmp    11412 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   113f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113fc:	c1 e0 03             	shl    $0x3,%eax
   113ff:	6a 00                	push   $0x0
   11401:	6a 00                	push   $0x0
   11403:	6a 00                	push   $0x0
   11405:	50                   	push   %eax
   11406:	e8 15 ff ff ff       	call   11320 <segment_desc_set>
   1140b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1140e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11412:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11419:	7e de                	jle    113f9 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1141b:	68 92 40 00 00       	push   $0x4092
   11420:	6a ff                	push   $0xffffffff
   11422:	6a 00                	push   $0x0
   11424:	6a 10                	push   $0x10
   11426:	e8 f5 fe ff ff       	call   11320 <segment_desc_set>
   1142b:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   1142e:	68 9a 40 00 00       	push   $0x409a
   11433:	6a ff                	push   $0xffffffff
   11435:	6a 00                	push   $0x0
   11437:	6a 08                	push   $0x8
   11439:	e8 e2 fe ff ff       	call   11320 <segment_desc_set>
   1143e:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11441:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   11446:	68 00 08 00 00       	push   $0x800
   1144b:	50                   	push   %eax
   1144c:	e8 8d fe ff ff       	call   112de <lgdt>
   11451:	83 c4 08             	add    $0x8,%esp
}
   11454:	90                   	nop
   11455:	c9                   	leave  
   11456:	c3                   	ret    

00011457 <cpu_init>:


void cpu_init(void) {
   11457:	55                   	push   %ebp
   11458:	89 e5                	mov    %esp,%ebp
   1145a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   1145d:	83 ec 08             	sub    $0x8,%esp
   11460:	68 b4 32 01 00       	push   $0x132b4
   11465:	68 a0 89 01 00       	push   $0x189a0
   1146a:	e8 da 0d 00 00       	call   12249 <mutex_init>
   1146f:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11472:	e8 73 ff ff ff       	call   113ea <init_gdt>
}
   11477:	90                   	nop
   11478:	c9                   	leave  
   11479:	c3                   	ret    

0001147a <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   1147a:	55                   	push   %ebp
   1147b:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   1147d:	8b 45 08             	mov    0x8(%ebp),%eax
   11480:	6a 00                	push   $0x0
   11482:	50                   	push   %eax
   11483:	e8 7e fe ff ff       	call   11306 <far_jump>
   11488:	83 c4 08             	add    $0x8,%esp
}
   1148b:	90                   	nop
   1148c:	c9                   	leave  
   1148d:	c3                   	ret    

0001148e <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   1148e:	55                   	push   %ebp
   1148f:	89 e5                	mov    %esp,%ebp
   11491:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   11494:	83 ec 0c             	sub    $0xc,%esp
   11497:	68 a0 89 01 00       	push   $0x189a0
   1149c:	e8 e9 0d 00 00       	call   1228a <mutex_acquire>
   114a1:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   114a4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   114ab:	eb 36                	jmp    114e3 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   114ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114b0:	c1 e0 03             	shl    $0x3,%eax
   114b3:	05 a0 81 01 00       	add    $0x181a0,%eax
   114b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   114bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114be:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114c2:	66 85 c0             	test   %ax,%ax
   114c5:	75 18                	jne    114df <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   114c7:	83 ec 0c             	sub    $0xc,%esp
   114ca:	68 a0 89 01 00       	push   $0x189a0
   114cf:	e8 44 0e 00 00       	call   12318 <mutex_release>
   114d4:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   114d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114da:	c1 e0 03             	shl    $0x3,%eax
   114dd:	eb 22                	jmp    11501 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   114df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   114e3:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   114ea:	7e c1                	jle    114ad <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	68 a0 89 01 00       	push   $0x189a0
   114f4:	e8 1f 0e 00 00       	call   12318 <mutex_release>
   114f9:	83 c4 10             	add    $0x10,%esp

    return -1;
   114fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11501:	c9                   	leave  
   11502:	c3                   	ret    

00011503 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   11503:	55                   	push   %ebp
   11504:	89 e5                	mov    %esp,%ebp
   11506:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   11509:	83 ec 0c             	sub    $0xc,%esp
   1150c:	68 a0 89 01 00       	push   $0x189a0
   11511:	e8 74 0d 00 00       	call   1228a <mutex_acquire>
   11516:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   11519:	8b 45 08             	mov    0x8(%ebp),%eax
   1151c:	c1 e8 03             	shr    $0x3,%eax
   1151f:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   11526:	00 00 00 

    mutex_release(&mutex);
   11529:	83 ec 0c             	sub    $0xc,%esp
   1152c:	68 a0 89 01 00       	push   $0x189a0
   11531:	e8 e2 0d 00 00       	call   12318 <mutex_release>
   11536:	83 c4 10             	add    $0x10,%esp
   11539:	90                   	nop
   1153a:	c9                   	leave  
   1153b:	c3                   	ret    

0001153c <inb>:
static inline uint8_t inb(uint16_t port) {
   1153c:	55                   	push   %ebp
   1153d:	89 e5                	mov    %esp,%ebp
   1153f:	83 ec 14             	sub    $0x14,%esp
   11542:	8b 45 08             	mov    0x8(%ebp),%eax
   11545:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   11549:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1154d:	89 c2                	mov    %eax,%edx
   1154f:	ec                   	in     (%dx),%al
   11550:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11553:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11557:	c9                   	leave  
   11558:	c3                   	ret    

00011559 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11559:	55                   	push   %ebp
   1155a:	89 e5                	mov    %esp,%ebp
   1155c:	83 ec 08             	sub    $0x8,%esp
   1155f:	8b 55 08             	mov    0x8(%ebp),%edx
   11562:	8b 45 0c             	mov    0xc(%ebp),%eax
   11565:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11569:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   1156c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11570:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11574:	ee                   	out    %al,(%dx)
}
   11575:	90                   	nop
   11576:	c9                   	leave  
   11577:	c3                   	ret    

00011578 <cli>:
static inline void cli(void) {
   11578:	55                   	push   %ebp
   11579:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   1157b:	fa                   	cli    
}
   1157c:	90                   	nop
   1157d:	5d                   	pop    %ebp
   1157e:	c3                   	ret    

0001157f <sti>:
static inline void sti(void) {
   1157f:	55                   	push   %ebp
   11580:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11582:	fb                   	sti    
}
   11583:	90                   	nop
   11584:	5d                   	pop    %ebp
   11585:	c3                   	ret    

00011586 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   11586:	55                   	push   %ebp
   11587:	89 e5                	mov    %esp,%ebp
   11589:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   1158c:	8b 45 08             	mov    0x8(%ebp),%eax
   1158f:	c1 e8 10             	shr    $0x10,%eax
   11592:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   11596:	8b 45 08             	mov    0x8(%ebp),%eax
   11599:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   1159d:	8b 45 0c             	mov    0xc(%ebp),%eax
   115a0:	83 e8 01             	sub    $0x1,%eax
   115a3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   115a7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   115ab:	90                   	nop
   115ac:	c9                   	leave  
   115ad:	c3                   	ret    

000115ae <read_cr2>:
static inline uint32_t read_cr2() {
   115ae:	55                   	push   %ebp
   115af:	89 e5                	mov    %esp,%ebp
   115b1:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   115b4:	0f 20 d0             	mov    %cr2,%eax
   115b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   115ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   115bd:	c9                   	leave  
   115be:	c3                   	ret    

000115bf <hlt>:
static inline void hlt(void) {
   115bf:	55                   	push   %ebp
   115c0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   115c2:	f4                   	hlt    
}
   115c3:	90                   	nop
   115c4:	5d                   	pop    %ebp
   115c5:	c3                   	ret    

000115c6 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   115c6:	55                   	push   %ebp
   115c7:	89 e5                	mov    %esp,%ebp
   115c9:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   115cc:	9c                   	pushf  
   115cd:	58                   	pop    %eax
   115ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   115d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   115d4:	c9                   	leave  
   115d5:	c3                   	ret    

000115d6 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   115d6:	55                   	push   %ebp
   115d7:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   115d9:	8b 45 08             	mov    0x8(%ebp),%eax
   115dc:	50                   	push   %eax
   115dd:	9d                   	popf   
}
   115de:	90                   	nop
   115df:	5d                   	pop    %ebp
   115e0:	c3                   	ret    

000115e1 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   115e1:	55                   	push   %ebp
   115e2:	89 e5                	mov    %esp,%ebp
   115e4:	57                   	push   %edi
   115e5:	56                   	push   %esi
   115e6:	53                   	push   %ebx
   115e7:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   115ea:	8b 45 08             	mov    0x8(%ebp),%eax
   115ed:	8b 40 3c             	mov    0x3c(%eax),%eax
   115f0:	83 e0 07             	and    $0x7,%eax
   115f3:	85 c0                	test   %eax,%eax
   115f5:	74 14                	je     1160b <dump_core_regs+0x2a>
        ss = frame->ds;
   115f7:	8b 45 08             	mov    0x8(%ebp),%eax
   115fa:	8b 40 0c             	mov    0xc(%eax),%eax
   115fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   11600:	8b 45 08             	mov    0x8(%ebp),%eax
   11603:	8b 40 1c             	mov    0x1c(%eax),%eax
   11606:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11609:	eb 12                	jmp    1161d <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   1160b:	8b 45 08             	mov    0x8(%ebp),%eax
   1160e:	8b 40 48             	mov    0x48(%eax),%eax
   11611:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   11614:	8b 45 08             	mov    0x8(%ebp),%eax
   11617:	8b 40 44             	mov    0x44(%eax),%eax
   1161a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   1161d:	8b 45 08             	mov    0x8(%ebp),%eax
   11620:	8b 50 34             	mov    0x34(%eax),%edx
   11623:	8b 45 08             	mov    0x8(%ebp),%eax
   11626:	8b 40 30             	mov    0x30(%eax),%eax
   11629:	83 ec 04             	sub    $0x4,%esp
   1162c:	52                   	push   %edx
   1162d:	50                   	push   %eax
   1162e:	68 c0 32 01 00       	push   $0x132c0
   11633:	e8 5a 19 00 00       	call   12f92 <log_printf>
   11638:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   1163b:	8b 45 08             	mov    0x8(%ebp),%eax
   1163e:	8b 30                	mov    (%eax),%esi
   11640:	8b 45 08             	mov    0x8(%ebp),%eax
   11643:	8b 58 04             	mov    0x4(%eax),%ebx
   11646:	8b 45 08             	mov    0x8(%ebp),%eax
   11649:	8b 48 08             	mov    0x8(%eax),%ecx
   1164c:	8b 45 08             	mov    0x8(%ebp),%eax
   1164f:	8b 50 0c             	mov    0xc(%eax),%edx
   11652:	8b 45 08             	mov    0x8(%ebp),%eax
   11655:	8b 40 3c             	mov    0x3c(%eax),%eax
   11658:	83 ec 04             	sub    $0x4,%esp
   1165b:	56                   	push   %esi
   1165c:	53                   	push   %ebx
   1165d:	ff 75 e0             	pushl  -0x20(%ebp)
   11660:	51                   	push   %ecx
   11661:	52                   	push   %edx
   11662:	50                   	push   %eax
   11663:	68 d8 32 01 00       	push   $0x132d8
   11668:	e8 25 19 00 00       	call   12f92 <log_printf>
   1166d:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   11670:	8b 45 08             	mov    0x8(%ebp),%eax
   11673:	8b 78 18             	mov    0x18(%eax),%edi
   11676:	8b 45 08             	mov    0x8(%ebp),%eax
   11679:	8b 70 14             	mov    0x14(%eax),%esi
   1167c:	8b 45 08             	mov    0x8(%ebp),%eax
   1167f:	8b 58 10             	mov    0x10(%eax),%ebx
   11682:	8b 45 08             	mov    0x8(%ebp),%eax
   11685:	8b 48 24             	mov    0x24(%eax),%ecx
   11688:	8b 45 08             	mov    0x8(%ebp),%eax
   1168b:	8b 50 20             	mov    0x20(%eax),%edx
   1168e:	8b 45 08             	mov    0x8(%ebp),%eax
   11691:	8b 40 2c             	mov    0x2c(%eax),%eax
   11694:	ff 75 e4             	pushl  -0x1c(%ebp)
   11697:	57                   	push   %edi
   11698:	56                   	push   %esi
   11699:	53                   	push   %ebx
   1169a:	51                   	push   %ecx
   1169b:	52                   	push   %edx
   1169c:	50                   	push   %eax
   1169d:	68 04 33 01 00       	push   $0x13304
   116a2:	e8 eb 18 00 00       	call   12f92 <log_printf>
   116a7:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   116aa:	8b 45 08             	mov    0x8(%ebp),%eax
   116ad:	8b 50 40             	mov    0x40(%eax),%edx
   116b0:	8b 45 08             	mov    0x8(%ebp),%eax
   116b3:	8b 40 38             	mov    0x38(%eax),%eax
   116b6:	83 ec 04             	sub    $0x4,%esp
   116b9:	52                   	push   %edx
   116ba:	50                   	push   %eax
   116bb:	68 3d 33 01 00       	push   $0x1333d
   116c0:	e8 cd 18 00 00       	call   12f92 <log_printf>
   116c5:	83 c4 10             	add    $0x10,%esp
}
   116c8:	90                   	nop
   116c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
   116cc:	5b                   	pop    %ebx
   116cd:	5e                   	pop    %esi
   116ce:	5f                   	pop    %edi
   116cf:	5d                   	pop    %ebp
   116d0:	c3                   	ret    

000116d1 <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   116d1:	55                   	push   %ebp
   116d2:	89 e5                	mov    %esp,%ebp
   116d4:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   116d7:	83 ec 0c             	sub    $0xc,%esp
   116da:	68 54 33 01 00       	push   $0x13354
   116df:	e8 ae 18 00 00       	call   12f92 <log_printf>
   116e4:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   116e7:	83 ec 08             	sub    $0x8,%esp
   116ea:	ff 75 0c             	pushl  0xc(%ebp)
   116ed:	68 7f 33 01 00       	push   $0x1337f
   116f2:	e8 9b 18 00 00       	call   12f92 <log_printf>
   116f7:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   116fa:	83 ec 0c             	sub    $0xc,%esp
   116fd:	ff 75 08             	pushl  0x8(%ebp)
   11700:	e8 dc fe ff ff       	call   115e1 <dump_core_regs>
   11705:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11708:	e8 b2 fe ff ff       	call   115bf <hlt>
   1170d:	eb f9                	jmp    11708 <do_default_handler+0x37>

0001170f <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   1170f:	55                   	push   %ebp
   11710:	89 e5                	mov    %esp,%ebp
   11712:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   11715:	83 ec 08             	sub    $0x8,%esp
   11718:	68 91 33 01 00       	push   $0x13391
   1171d:	ff 75 08             	pushl  0x8(%ebp)
   11720:	e8 ac ff ff ff       	call   116d1 <do_default_handler>
   11725:	83 c4 10             	add    $0x10,%esp
}
   11728:	90                   	nop
   11729:	c9                   	leave  
   1172a:	c3                   	ret    

0001172b <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   1172b:	55                   	push   %ebp
   1172c:	89 e5                	mov    %esp,%ebp
   1172e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   11731:	83 ec 08             	sub    $0x8,%esp
   11734:	68 a3 33 01 00       	push   $0x133a3
   11739:	ff 75 08             	pushl  0x8(%ebp)
   1173c:	e8 90 ff ff ff       	call   116d1 <do_default_handler>
   11741:	83 c4 10             	add    $0x10,%esp
}
   11744:	90                   	nop
   11745:	c9                   	leave  
   11746:	c3                   	ret    

00011747 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11747:	55                   	push   %ebp
   11748:	89 e5                	mov    %esp,%ebp
   1174a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   1174d:	83 ec 08             	sub    $0x8,%esp
   11750:	68 bd 33 01 00       	push   $0x133bd
   11755:	ff 75 08             	pushl  0x8(%ebp)
   11758:	e8 74 ff ff ff       	call   116d1 <do_default_handler>
   1175d:	83 c4 10             	add    $0x10,%esp
}   
   11760:	90                   	nop
   11761:	c9                   	leave  
   11762:	c3                   	ret    

00011763 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   11763:	55                   	push   %ebp
   11764:	89 e5                	mov    %esp,%ebp
   11766:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   11769:	83 ec 08             	sub    $0x8,%esp
   1176c:	68 d8 33 01 00       	push   $0x133d8
   11771:	ff 75 08             	pushl  0x8(%ebp)
   11774:	e8 58 ff ff ff       	call   116d1 <do_default_handler>
   11779:	83 c4 10             	add    $0x10,%esp
}   
   1177c:	90                   	nop
   1177d:	c9                   	leave  
   1177e:	c3                   	ret    

0001177f <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   1177f:	55                   	push   %ebp
   11780:	89 e5                	mov    %esp,%ebp
   11782:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   11785:	83 ec 08             	sub    $0x8,%esp
   11788:	68 f1 33 01 00       	push   $0x133f1
   1178d:	ff 75 08             	pushl  0x8(%ebp)
   11790:	e8 3c ff ff ff       	call   116d1 <do_default_handler>
   11795:	83 c4 10             	add    $0x10,%esp
}   
   11798:	90                   	nop
   11799:	c9                   	leave  
   1179a:	c3                   	ret    

0001179b <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   1179b:	55                   	push   %ebp
   1179c:	89 e5                	mov    %esp,%ebp
   1179e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   117a1:	83 ec 08             	sub    $0x8,%esp
   117a4:	68 07 34 01 00       	push   $0x13407
   117a9:	ff 75 08             	pushl  0x8(%ebp)
   117ac:	e8 20 ff ff ff       	call   116d1 <do_default_handler>
   117b1:	83 c4 10             	add    $0x10,%esp
}   
   117b4:	90                   	nop
   117b5:	c9                   	leave  
   117b6:	c3                   	ret    

000117b7 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   117b7:	55                   	push   %ebp
   117b8:	89 e5                	mov    %esp,%ebp
   117ba:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   117bd:	83 ec 08             	sub    $0x8,%esp
   117c0:	68 1b 34 01 00       	push   $0x1341b
   117c5:	ff 75 08             	pushl  0x8(%ebp)
   117c8:	e8 04 ff ff ff       	call   116d1 <do_default_handler>
   117cd:	83 c4 10             	add    $0x10,%esp
}   
   117d0:	90                   	nop
   117d1:	c9                   	leave  
   117d2:	c3                   	ret    

000117d3 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   117d3:	55                   	push   %ebp
   117d4:	89 e5                	mov    %esp,%ebp
   117d6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   117d9:	83 ec 08             	sub    $0x8,%esp
   117dc:	68 39 34 01 00       	push   $0x13439
   117e1:	ff 75 08             	pushl  0x8(%ebp)
   117e4:	e8 e8 fe ff ff       	call   116d1 <do_default_handler>
   117e9:	83 c4 10             	add    $0x10,%esp
}   
   117ec:	90                   	nop
   117ed:	c9                   	leave  
   117ee:	c3                   	ret    

000117ef <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   117ef:	55                   	push   %ebp
   117f0:	89 e5                	mov    %esp,%ebp
   117f2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   117f5:	83 ec 08             	sub    $0x8,%esp
   117f8:	68 53 34 01 00       	push   $0x13453
   117fd:	ff 75 08             	pushl  0x8(%ebp)
   11800:	e8 cc fe ff ff       	call   116d1 <do_default_handler>
   11805:	83 c4 10             	add    $0x10,%esp
}   
   11808:	90                   	nop
   11809:	c9                   	leave  
   1180a:	c3                   	ret    

0001180b <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   1180b:	55                   	push   %ebp
   1180c:	89 e5                	mov    %esp,%ebp
   1180e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   11811:	83 ec 08             	sub    $0x8,%esp
   11814:	68 6f 34 01 00       	push   $0x1346f
   11819:	ff 75 08             	pushl  0x8(%ebp)
   1181c:	e8 b0 fe ff ff       	call   116d1 <do_default_handler>
   11821:	83 c4 10             	add    $0x10,%esp
}   
   11824:	90                   	nop
   11825:	c9                   	leave  
   11826:	c3                   	ret    

00011827 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11827:	55                   	push   %ebp
   11828:	89 e5                	mov    %esp,%ebp
   1182a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   1182d:	83 ec 08             	sub    $0x8,%esp
   11830:	68 87 34 01 00       	push   $0x13487
   11835:	ff 75 08             	pushl  0x8(%ebp)
   11838:	e8 94 fe ff ff       	call   116d1 <do_default_handler>
   1183d:	83 c4 10             	add    $0x10,%esp
}   
   11840:	90                   	nop
   11841:	c9                   	leave  
   11842:	c3                   	ret    

00011843 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   11843:	55                   	push   %ebp
   11844:	89 e5                	mov    %esp,%ebp
   11846:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11849:	83 ec 08             	sub    $0x8,%esp
   1184c:	68 a0 34 01 00       	push   $0x134a0
   11851:	ff 75 08             	pushl  0x8(%ebp)
   11854:	e8 78 fe ff ff       	call   116d1 <do_default_handler>
   11859:	83 c4 10             	add    $0x10,%esp
}   
   1185c:	90                   	nop
   1185d:	c9                   	leave  
   1185e:	c3                   	ret    

0001185f <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   1185f:	55                   	push   %ebp
   11860:	89 e5                	mov    %esp,%ebp
   11862:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   11865:	83 ec 08             	sub    $0x8,%esp
   11868:	68 c0 34 01 00       	push   $0x134c0
   1186d:	ff 75 08             	pushl  0x8(%ebp)
   11870:	e8 5c fe ff ff       	call   116d1 <do_default_handler>
   11875:	83 c4 10             	add    $0x10,%esp
}   
   11878:	90                   	nop
   11879:	c9                   	leave  
   1187a:	c3                   	ret    

0001187b <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   1187b:	55                   	push   %ebp
   1187c:	89 e5                	mov    %esp,%ebp
   1187e:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11881:	83 ec 0c             	sub    $0xc,%esp
   11884:	68 e0 34 01 00       	push   $0x134e0
   11889:	e8 04 17 00 00       	call   12f92 <log_printf>
   1188e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   11891:	83 ec 0c             	sub    $0xc,%esp
   11894:	68 04 35 01 00       	push   $0x13504
   11899:	e8 f4 16 00 00       	call   12f92 <log_printf>
   1189e:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   118a1:	8b 45 08             	mov    0x8(%ebp),%eax
   118a4:	8b 40 34             	mov    0x34(%eax),%eax
   118a7:	83 e0 01             	and    $0x1,%eax
   118aa:	85 c0                	test   %eax,%eax
   118ac:	74 12                	je     118c0 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   118ae:	83 ec 0c             	sub    $0xc,%esp
   118b1:	68 30 35 01 00       	push   $0x13530
   118b6:	e8 d7 16 00 00       	call   12f92 <log_printf>
   118bb:	83 c4 10             	add    $0x10,%esp
   118be:	eb 10                	jmp    118d0 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   118c0:	83 ec 0c             	sub    $0xc,%esp
   118c3:	68 ac 35 01 00       	push   $0x135ac
   118c8:	e8 c5 16 00 00       	call   12f92 <log_printf>
   118cd:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   118d0:	8b 45 08             	mov    0x8(%ebp),%eax
   118d3:	8b 40 34             	mov    0x34(%eax),%eax
   118d6:	83 e0 02             	and    $0x2,%eax
   118d9:	85 c0                	test   %eax,%eax
   118db:	74 12                	je     118ef <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   118dd:	83 ec 0c             	sub    $0xc,%esp
   118e0:	68 04 36 01 00       	push   $0x13604
   118e5:	e8 a8 16 00 00       	call   12f92 <log_printf>
   118ea:	83 c4 10             	add    $0x10,%esp
   118ed:	eb 10                	jmp    118ff <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   118ef:	83 ec 0c             	sub    $0xc,%esp
   118f2:	68 50 36 01 00       	push   $0x13650
   118f7:	e8 96 16 00 00       	call   12f92 <log_printf>
   118fc:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   118ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11902:	8b 40 34             	mov    0x34(%eax),%eax
   11905:	25 f8 ff 00 00       	and    $0xfff8,%eax
   1190a:	83 ec 08             	sub    $0x8,%esp
   1190d:	50                   	push   %eax
   1190e:	68 7c 36 01 00       	push   $0x1367c
   11913:	e8 7a 16 00 00       	call   12f92 <log_printf>
   11918:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   1191b:	83 ec 0c             	sub    $0xc,%esp
   1191e:	ff 75 08             	pushl  0x8(%ebp)
   11921:	e8 bb fc ff ff       	call   115e1 <dump_core_regs>
   11926:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11929:	e8 91 fc ff ff       	call   115bf <hlt>
   1192e:	eb f9                	jmp    11929 <do_handler_general_protection+0xae>

00011930 <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   11930:	55                   	push   %ebp
   11931:	89 e5                	mov    %esp,%ebp
   11933:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11936:	83 ec 0c             	sub    $0xc,%esp
   11939:	68 e0 34 01 00       	push   $0x134e0
   1193e:	e8 4f 16 00 00       	call   12f92 <log_printf>
   11943:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   11946:	83 ec 0c             	sub    $0xc,%esp
   11949:	68 8e 36 01 00       	push   $0x1368e
   1194e:	e8 3f 16 00 00       	call   12f92 <log_printf>
   11953:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   11956:	8b 45 08             	mov    0x8(%ebp),%eax
   11959:	8b 40 34             	mov    0x34(%eax),%eax
   1195c:	83 e0 01             	and    $0x1,%eax
   1195f:	85 c0                	test   %eax,%eax
   11961:	74 18                	je     1197b <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   11963:	e8 46 fc ff ff       	call   115ae <read_cr2>
   11968:	83 ec 08             	sub    $0x8,%esp
   1196b:	50                   	push   %eax
   1196c:	68 ac 36 01 00       	push   $0x136ac
   11971:	e8 1c 16 00 00       	call   12f92 <log_printf>
   11976:	83 c4 10             	add    $0x10,%esp
   11979:	eb 16                	jmp    11991 <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   1197b:	e8 2e fc ff ff       	call   115ae <read_cr2>
   11980:	83 ec 08             	sub    $0x8,%esp
   11983:	50                   	push   %eax
   11984:	68 d4 36 01 00       	push   $0x136d4
   11989:	e8 04 16 00 00       	call   12f92 <log_printf>
   1198e:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11991:	8b 45 08             	mov    0x8(%ebp),%eax
   11994:	8b 40 34             	mov    0x34(%eax),%eax
   11997:	83 e0 02             	and    $0x2,%eax
   1199a:	85 c0                	test   %eax,%eax
   1199c:	74 12                	je     119b0 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   1199e:	83 ec 0c             	sub    $0xc,%esp
   119a1:	68 04 37 01 00       	push   $0x13704
   119a6:	e8 e7 15 00 00       	call   12f92 <log_printf>
   119ab:	83 c4 10             	add    $0x10,%esp
   119ae:	eb 10                	jmp    119c0 <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   119b0:	83 ec 0c             	sub    $0xc,%esp
   119b3:	68 30 37 01 00       	push   $0x13730
   119b8:	e8 d5 15 00 00       	call   12f92 <log_printf>
   119bd:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   119c0:	8b 45 08             	mov    0x8(%ebp),%eax
   119c3:	8b 40 34             	mov    0x34(%eax),%eax
   119c6:	83 e0 02             	and    $0x2,%eax
   119c9:	85 c0                	test   %eax,%eax
   119cb:	74 12                	je     119df <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   119cd:	83 ec 0c             	sub    $0xc,%esp
   119d0:	68 5c 37 01 00       	push   $0x1375c
   119d5:	e8 b8 15 00 00       	call   12f92 <log_printf>
   119da:	83 c4 10             	add    $0x10,%esp
   119dd:	eb 10                	jmp    119ef <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   119df:	83 ec 0c             	sub    $0xc,%esp
   119e2:	68 88 37 01 00       	push   $0x13788
   119e7:	e8 a6 15 00 00       	call   12f92 <log_printf>
   119ec:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   119ef:	83 ec 0c             	sub    $0xc,%esp
   119f2:	ff 75 08             	pushl  0x8(%ebp)
   119f5:	e8 e7 fb ff ff       	call   115e1 <dump_core_regs>
   119fa:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   119fd:	e8 bd fb ff ff       	call   115bf <hlt>
   11a02:	eb f9                	jmp    119fd <do_handler_page_fault+0xcd>

00011a04 <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11a04:	55                   	push   %ebp
   11a05:	89 e5                	mov    %esp,%ebp
   11a07:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11a0a:	83 ec 08             	sub    $0x8,%esp
   11a0d:	68 b0 37 01 00       	push   $0x137b0
   11a12:	ff 75 08             	pushl  0x8(%ebp)
   11a15:	e8 b7 fc ff ff       	call   116d1 <do_default_handler>
   11a1a:	83 c4 10             	add    $0x10,%esp
}   
   11a1d:	90                   	nop
   11a1e:	c9                   	leave  
   11a1f:	c3                   	ret    

00011a20 <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11a20:	55                   	push   %ebp
   11a21:	89 e5                	mov    %esp,%ebp
   11a23:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11a26:	83 ec 08             	sub    $0x8,%esp
   11a29:	68 d0 37 01 00       	push   $0x137d0
   11a2e:	ff 75 08             	pushl  0x8(%ebp)
   11a31:	e8 9b fc ff ff       	call   116d1 <do_default_handler>
   11a36:	83 c4 10             	add    $0x10,%esp
}   
   11a39:	90                   	nop
   11a3a:	c9                   	leave  
   11a3b:	c3                   	ret    

00011a3c <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11a3c:	55                   	push   %ebp
   11a3d:	89 e5                	mov    %esp,%ebp
   11a3f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11a42:	83 ec 08             	sub    $0x8,%esp
   11a45:	68 ea 37 01 00       	push   $0x137ea
   11a4a:	ff 75 08             	pushl  0x8(%ebp)
   11a4d:	e8 7f fc ff ff       	call   116d1 <do_default_handler>
   11a52:	83 c4 10             	add    $0x10,%esp
}   
   11a55:	90                   	nop
   11a56:	c9                   	leave  
   11a57:	c3                   	ret    

00011a58 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11a58:	55                   	push   %ebp
   11a59:	89 e5                	mov    %esp,%ebp
   11a5b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11a5e:	83 ec 08             	sub    $0x8,%esp
   11a61:	68 04 38 01 00       	push   $0x13804
   11a66:	ff 75 08             	pushl  0x8(%ebp)
   11a69:	e8 63 fc ff ff       	call   116d1 <do_default_handler>
   11a6e:	83 c4 10             	add    $0x10,%esp
}
   11a71:	90                   	nop
   11a72:	c9                   	leave  
   11a73:	c3                   	ret    

00011a74 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11a74:	55                   	push   %ebp
   11a75:	89 e5                	mov    %esp,%ebp
   11a77:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11a7a:	83 ec 08             	sub    $0x8,%esp
   11a7d:	68 30 38 01 00       	push   $0x13830
   11a82:	ff 75 08             	pushl  0x8(%ebp)
   11a85:	e8 47 fc ff ff       	call   116d1 <do_default_handler>
   11a8a:	83 c4 10             	add    $0x10,%esp
}
   11a8d:	90                   	nop
   11a8e:	c9                   	leave  
   11a8f:	c3                   	ret    

00011a90 <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11a90:	55                   	push   %ebp
   11a91:	89 e5                	mov    %esp,%ebp
   11a93:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11a96:	83 ec 08             	sub    $0x8,%esp
   11a99:	68 54 38 01 00       	push   $0x13854
   11a9e:	ff 75 08             	pushl  0x8(%ebp)
   11aa1:	e8 2b fc ff ff       	call   116d1 <do_default_handler>
   11aa6:	83 c4 10             	add    $0x10,%esp
}
   11aa9:	90                   	nop
   11aaa:	c9                   	leave  
   11aab:	c3                   	ret    

00011aac <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11aac:	55                   	push   %ebp
   11aad:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11aaf:	6a 11                	push   $0x11
   11ab1:	6a 20                	push   $0x20
   11ab3:	e8 a1 fa ff ff       	call   11559 <outb>
   11ab8:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11abb:	6a 20                	push   $0x20
   11abd:	6a 21                	push   $0x21
   11abf:	e8 95 fa ff ff       	call   11559 <outb>
   11ac4:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11ac7:	6a 04                	push   $0x4
   11ac9:	6a 21                	push   $0x21
   11acb:	e8 89 fa ff ff       	call   11559 <outb>
   11ad0:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11ad3:	6a 01                	push   $0x1
   11ad5:	6a 21                	push   $0x21
   11ad7:	e8 7d fa ff ff       	call   11559 <outb>
   11adc:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11adf:	6a 11                	push   $0x11
   11ae1:	68 a0 00 00 00       	push   $0xa0
   11ae6:	e8 6e fa ff ff       	call   11559 <outb>
   11aeb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11aee:	6a 28                	push   $0x28
   11af0:	68 a1 00 00 00       	push   $0xa1
   11af5:	e8 5f fa ff ff       	call   11559 <outb>
   11afa:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11afd:	6a 02                	push   $0x2
   11aff:	68 a1 00 00 00       	push   $0xa1
   11b04:	e8 50 fa ff ff       	call   11559 <outb>
   11b09:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11b0c:	6a 01                	push   $0x1
   11b0e:	68 a1 00 00 00       	push   $0xa1
   11b13:	e8 41 fa ff ff       	call   11559 <outb>
   11b18:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11b1b:	68 fb 00 00 00       	push   $0xfb
   11b20:	6a 21                	push   $0x21
   11b22:	e8 32 fa ff ff       	call   11559 <outb>
   11b27:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11b2a:	68 ff 00 00 00       	push   $0xff
   11b2f:	68 a1 00 00 00       	push   $0xa1
   11b34:	e8 20 fa ff ff       	call   11559 <outb>
   11b39:	83 c4 08             	add    $0x8,%esp
}
   11b3c:	90                   	nop
   11b3d:	c9                   	leave  
   11b3e:	c3                   	ret    

00011b3f <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11b3f:	55                   	push   %ebp
   11b40:	89 e5                	mov    %esp,%ebp
   11b42:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11b45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b4c:	eb 25                	jmp    11b73 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11b4e:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b56:	c1 e0 03             	shl    $0x3,%eax
   11b59:	05 00 8a 01 00       	add    $0x18a00,%eax
   11b5e:	68 00 8e 00 00       	push   $0x8e00
   11b63:	52                   	push   %edx
   11b64:	6a 08                	push   $0x8
   11b66:	50                   	push   %eax
   11b67:	e8 37 f8 ff ff       	call   113a3 <gate_desc_set>
   11b6c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11b6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b73:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11b77:	7e d5                	jle    11b4e <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11b79:	83 ec 08             	sub    $0x8,%esp
   11b7c:	68 4a 00 01 00       	push   $0x1004a
   11b81:	6a 00                	push   $0x0
   11b83:	e8 77 01 00 00       	call   11cff <irq_install>
   11b88:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11b8b:	83 ec 08             	sub    $0x8,%esp
   11b8e:	68 69 00 01 00       	push   $0x10069
   11b93:	6a 01                	push   $0x1
   11b95:	e8 65 01 00 00       	call   11cff <irq_install>
   11b9a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11b9d:	83 ec 08             	sub    $0x8,%esp
   11ba0:	68 88 00 01 00       	push   $0x10088
   11ba5:	6a 02                	push   $0x2
   11ba7:	e8 53 01 00 00       	call   11cff <irq_install>
   11bac:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11baf:	83 ec 08             	sub    $0x8,%esp
   11bb2:	68 a7 00 01 00       	push   $0x100a7
   11bb7:	6a 03                	push   $0x3
   11bb9:	e8 41 01 00 00       	call   11cff <irq_install>
   11bbe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   11bc1:	83 ec 08             	sub    $0x8,%esp
   11bc4:	68 c6 00 01 00       	push   $0x100c6
   11bc9:	6a 04                	push   $0x4
   11bcb:	e8 2f 01 00 00       	call   11cff <irq_install>
   11bd0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11bd3:	83 ec 08             	sub    $0x8,%esp
   11bd6:	68 e5 00 01 00       	push   $0x100e5
   11bdb:	6a 05                	push   $0x5
   11bdd:	e8 1d 01 00 00       	call   11cff <irq_install>
   11be2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11be5:	83 ec 08             	sub    $0x8,%esp
   11be8:	68 04 01 01 00       	push   $0x10104
   11bed:	6a 06                	push   $0x6
   11bef:	e8 0b 01 00 00       	call   11cff <irq_install>
   11bf4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11bf7:	83 ec 08             	sub    $0x8,%esp
   11bfa:	68 23 01 01 00       	push   $0x10123
   11bff:	6a 07                	push   $0x7
   11c01:	e8 f9 00 00 00       	call   11cff <irq_install>
   11c06:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11c09:	83 ec 08             	sub    $0x8,%esp
   11c0c:	68 42 01 01 00       	push   $0x10142
   11c11:	6a 08                	push   $0x8
   11c13:	e8 e7 00 00 00       	call   11cff <irq_install>
   11c18:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11c1b:	83 ec 08             	sub    $0x8,%esp
   11c1e:	68 5f 01 01 00       	push   $0x1015f
   11c23:	6a 0a                	push   $0xa
   11c25:	e8 d5 00 00 00       	call   11cff <irq_install>
   11c2a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11c2d:	83 ec 08             	sub    $0x8,%esp
   11c30:	68 7c 01 01 00       	push   $0x1017c
   11c35:	6a 0b                	push   $0xb
   11c37:	e8 c3 00 00 00       	call   11cff <irq_install>
   11c3c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11c3f:	83 ec 08             	sub    $0x8,%esp
   11c42:	68 99 01 01 00       	push   $0x10199
   11c47:	6a 0c                	push   $0xc
   11c49:	e8 b1 00 00 00       	call   11cff <irq_install>
   11c4e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11c51:	83 ec 08             	sub    $0x8,%esp
   11c54:	68 b8 01 01 00       	push   $0x101b8
   11c59:	6a 0d                	push   $0xd
   11c5b:	e8 9f 00 00 00       	call   11cff <irq_install>
   11c60:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11c63:	83 ec 08             	sub    $0x8,%esp
   11c66:	68 d5 01 01 00       	push   $0x101d5
   11c6b:	6a 0e                	push   $0xe
   11c6d:	e8 8d 00 00 00       	call   11cff <irq_install>
   11c72:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11c75:	83 ec 08             	sub    $0x8,%esp
   11c78:	68 f2 01 01 00       	push   $0x101f2
   11c7d:	6a 10                	push   $0x10
   11c7f:	e8 7b 00 00 00       	call   11cff <irq_install>
   11c84:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11c87:	83 ec 08             	sub    $0x8,%esp
   11c8a:	68 11 02 01 00       	push   $0x10211
   11c8f:	6a 11                	push   $0x11
   11c91:	e8 69 00 00 00       	call   11cff <irq_install>
   11c96:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11c99:	83 ec 08             	sub    $0x8,%esp
   11c9c:	68 2e 02 01 00       	push   $0x1022e
   11ca1:	6a 12                	push   $0x12
   11ca3:	e8 57 00 00 00       	call   11cff <irq_install>
   11ca8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11cab:	83 ec 08             	sub    $0x8,%esp
   11cae:	68 4d 02 01 00       	push   $0x1024d
   11cb3:	6a 13                	push   $0x13
   11cb5:	e8 45 00 00 00       	call   11cff <irq_install>
   11cba:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11cbd:	83 ec 08             	sub    $0x8,%esp
   11cc0:	68 6c 02 01 00       	push   $0x1026c
   11cc5:	6a 14                	push   $0x14
   11cc7:	e8 33 00 00 00       	call   11cff <irq_install>
   11ccc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11ccf:	83 ec 08             	sub    $0x8,%esp
   11cd2:	68 8b 02 01 00       	push   $0x1028b
   11cd7:	6a 15                	push   $0x15
   11cd9:	e8 21 00 00 00       	call   11cff <irq_install>
   11cde:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11ce1:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11ce6:	83 ec 08             	sub    $0x8,%esp
   11ce9:	68 00 04 00 00       	push   $0x400
   11cee:	50                   	push   %eax
   11cef:	e8 92 f8 ff ff       	call   11586 <lidt>
   11cf4:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11cf7:	e8 b0 fd ff ff       	call   11aac <init_pic>
}
   11cfc:	90                   	nop
   11cfd:	c9                   	leave  
   11cfe:	c3                   	ret    

00011cff <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11cff:	55                   	push   %ebp
   11d00:	89 e5                	mov    %esp,%ebp
   11d02:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11d05:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11d09:	7e 07                	jle    11d12 <irq_install+0x13>
        return -1;
   11d0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d10:	eb 20                	jmp    11d32 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11d12:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d15:	8b 55 08             	mov    0x8(%ebp),%edx
   11d18:	c1 e2 03             	shl    $0x3,%edx
   11d1b:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11d21:	68 00 8e 00 00       	push   $0x8e00
   11d26:	50                   	push   %eax
   11d27:	6a 08                	push   $0x8
   11d29:	52                   	push   %edx
   11d2a:	e8 74 f6 ff ff       	call   113a3 <gate_desc_set>
   11d2f:	83 c4 10             	add    $0x10,%esp
}
   11d32:	c9                   	leave  
   11d33:	c3                   	ret    

00011d34 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11d34:	55                   	push   %ebp
   11d35:	89 e5                	mov    %esp,%ebp
   11d37:	53                   	push   %ebx
   11d38:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11d3b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11d3f:	7e 78                	jle    11db9 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11d41:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11d45:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11d49:	7f 32                	jg     11d7d <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11d4b:	6a 21                	push   $0x21
   11d4d:	e8 ea f7 ff ff       	call   1153c <inb>
   11d52:	83 c4 04             	add    $0x4,%esp
   11d55:	89 c2                	mov    %eax,%edx
   11d57:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5a:	bb 01 00 00 00       	mov    $0x1,%ebx
   11d5f:	89 c1                	mov    %eax,%ecx
   11d61:	d3 e3                	shl    %cl,%ebx
   11d63:	89 d8                	mov    %ebx,%eax
   11d65:	f7 d0                	not    %eax
   11d67:	21 d0                	and    %edx,%eax
   11d69:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11d6c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11d70:	50                   	push   %eax
   11d71:	6a 21                	push   $0x21
   11d73:	e8 e1 f7 ff ff       	call   11559 <outb>
   11d78:	83 c4 08             	add    $0x8,%esp
   11d7b:	eb 3d                	jmp    11dba <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11d7d:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11d81:	68 a1 00 00 00       	push   $0xa1
   11d86:	e8 b1 f7 ff ff       	call   1153c <inb>
   11d8b:	83 c4 04             	add    $0x4,%esp
   11d8e:	89 c2                	mov    %eax,%edx
   11d90:	8b 45 08             	mov    0x8(%ebp),%eax
   11d93:	bb 01 00 00 00       	mov    $0x1,%ebx
   11d98:	89 c1                	mov    %eax,%ecx
   11d9a:	d3 e3                	shl    %cl,%ebx
   11d9c:	89 d8                	mov    %ebx,%eax
   11d9e:	f7 d0                	not    %eax
   11da0:	21 d0                	and    %edx,%eax
   11da2:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11da5:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11da9:	50                   	push   %eax
   11daa:	68 a1 00 00 00       	push   $0xa1
   11daf:	e8 a5 f7 ff ff       	call   11559 <outb>
   11db4:	83 c4 08             	add    $0x8,%esp
   11db7:	eb 01                	jmp    11dba <irq_enable+0x86>
        return;
   11db9:	90                   	nop
    }
}
   11dba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11dbd:	c9                   	leave  
   11dbe:	c3                   	ret    

00011dbf <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11dbf:	55                   	push   %ebp
   11dc0:	89 e5                	mov    %esp,%ebp
   11dc2:	53                   	push   %ebx
   11dc3:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11dc6:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11dca:	7e 74                	jle    11e40 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11dcc:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11dd0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11dd4:	7f 30                	jg     11e06 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11dd6:	6a 21                	push   $0x21
   11dd8:	e8 5f f7 ff ff       	call   1153c <inb>
   11ddd:	83 c4 04             	add    $0x4,%esp
   11de0:	89 c3                	mov    %eax,%ebx
   11de2:	8b 45 08             	mov    0x8(%ebp),%eax
   11de5:	ba 01 00 00 00       	mov    $0x1,%edx
   11dea:	89 c1                	mov    %eax,%ecx
   11dec:	d3 e2                	shl    %cl,%edx
   11dee:	89 d0                	mov    %edx,%eax
   11df0:	09 d8                	or     %ebx,%eax
   11df2:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11df5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11df9:	50                   	push   %eax
   11dfa:	6a 21                	push   $0x21
   11dfc:	e8 58 f7 ff ff       	call   11559 <outb>
   11e01:	83 c4 08             	add    $0x8,%esp
   11e04:	eb 3b                	jmp    11e41 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11e06:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11e0a:	68 a1 00 00 00       	push   $0xa1
   11e0f:	e8 28 f7 ff ff       	call   1153c <inb>
   11e14:	83 c4 04             	add    $0x4,%esp
   11e17:	89 c3                	mov    %eax,%ebx
   11e19:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1c:	ba 01 00 00 00       	mov    $0x1,%edx
   11e21:	89 c1                	mov    %eax,%ecx
   11e23:	d3 e2                	shl    %cl,%edx
   11e25:	89 d0                	mov    %edx,%eax
   11e27:	09 d8                	or     %ebx,%eax
   11e29:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11e2c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11e30:	50                   	push   %eax
   11e31:	68 a1 00 00 00       	push   $0xa1
   11e36:	e8 1e f7 ff ff       	call   11559 <outb>
   11e3b:	83 c4 08             	add    $0x8,%esp
   11e3e:	eb 01                	jmp    11e41 <irq_disable+0x82>
        return;
   11e40:	90                   	nop
    }
}
   11e41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e44:	c9                   	leave  
   11e45:	c3                   	ret    

00011e46 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11e46:	55                   	push   %ebp
   11e47:	89 e5                	mov    %esp,%ebp
    cli();
   11e49:	e8 2a f7 ff ff       	call   11578 <cli>
}
   11e4e:	90                   	nop
   11e4f:	5d                   	pop    %ebp
   11e50:	c3                   	ret    

00011e51 <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11e51:	55                   	push   %ebp
   11e52:	89 e5                	mov    %esp,%ebp
    sti();
   11e54:	e8 26 f7 ff ff       	call   1157f <sti>
}
   11e59:	90                   	nop
   11e5a:	5d                   	pop    %ebp
   11e5b:	c3                   	ret    

00011e5c <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11e5c:	55                   	push   %ebp
   11e5d:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11e5f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11e63:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e67:	7e 0f                	jle    11e78 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11e69:	6a 20                	push   $0x20
   11e6b:	68 a0 00 00 00       	push   $0xa0
   11e70:	e8 e4 f6 ff ff       	call   11559 <outb>
   11e75:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11e78:	6a 20                	push   $0x20
   11e7a:	6a 20                	push   $0x20
   11e7c:	e8 d8 f6 ff ff       	call   11559 <outb>
   11e81:	83 c4 08             	add    $0x8,%esp
}
   11e84:	90                   	nop
   11e85:	c9                   	leave  
   11e86:	c3                   	ret    

00011e87 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11e87:	55                   	push   %ebp
   11e88:	89 e5                	mov    %esp,%ebp
   11e8a:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11e8d:	e8 34 f7 ff ff       	call   115c6 <read_eflags>
   11e92:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11e95:	e8 ac ff ff ff       	call   11e46 <irq_disable_global>
    return state;
   11e9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11e9d:	c9                   	leave  
   11e9e:	c3                   	ret    

00011e9f <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11e9f:	55                   	push   %ebp
   11ea0:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11ea2:	ff 75 08             	pushl  0x8(%ebp)
   11ea5:	e8 2c f7 ff ff       	call   115d6 <write_eflags>
   11eaa:	83 c4 04             	add    $0x4,%esp
   11ead:	90                   	nop
   11eae:	c9                   	leave  
   11eaf:	c3                   	ret    

00011eb0 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11eb0:	55                   	push   %ebp
   11eb1:	89 e5                	mov    %esp,%ebp
   11eb3:	83 ec 08             	sub    $0x8,%esp
   11eb6:	8b 55 08             	mov    0x8(%ebp),%edx
   11eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ebc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11ec0:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11ec3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11ec7:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11ecb:	ee                   	out    %al,(%dx)
}
   11ecc:	90                   	nop
   11ecd:	c9                   	leave  
   11ece:	c3                   	ret    

00011ecf <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11ecf:	55                   	push   %ebp
   11ed0:	89 e5                	mov    %esp,%ebp
   11ed2:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11ed5:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11eda:	83 c0 01             	add    $0x1,%eax
   11edd:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11ee2:	83 ec 0c             	sub    $0xc,%esp
   11ee5:	6a 20                	push   $0x20
   11ee7:	e8 70 ff ff ff       	call   11e5c <pic_send_eoi>
   11eec:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11eef:	e8 69 f2 ff ff       	call   1115d <task_time_tick>
}
   11ef4:	90                   	nop
   11ef5:	c9                   	leave  
   11ef6:	c3                   	ret    

00011ef7 <init_pit>:


static void init_pit(void) {
   11ef7:	55                   	push   %ebp
   11ef8:	89 e5                	mov    %esp,%ebp
   11efa:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11efd:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11f04:	6a 36                	push   $0x36
   11f06:	6a 43                	push   $0x43
   11f08:	e8 a3 ff ff ff       	call   11eb0 <outb>
   11f0d:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f13:	0f b6 c0             	movzbl %al,%eax
   11f16:	50                   	push   %eax
   11f17:	6a 40                	push   $0x40
   11f19:	e8 92 ff ff ff       	call   11eb0 <outb>
   11f1e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11f21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f24:	c1 e8 08             	shr    $0x8,%eax
   11f27:	0f b6 c0             	movzbl %al,%eax
   11f2a:	50                   	push   %eax
   11f2b:	6a 40                	push   $0x40
   11f2d:	e8 7e ff ff ff       	call   11eb0 <outb>
   11f32:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11f35:	83 ec 08             	sub    $0x8,%esp
   11f38:	68 a8 02 01 00       	push   $0x102a8
   11f3d:	6a 20                	push   $0x20
   11f3f:	e8 bb fd ff ff       	call   11cff <irq_install>
   11f44:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11f47:	83 ec 0c             	sub    $0xc,%esp
   11f4a:	6a 20                	push   $0x20
   11f4c:	e8 e3 fd ff ff       	call   11d34 <irq_enable>
   11f51:	83 c4 10             	add    $0x10,%esp
}
   11f54:	90                   	nop
   11f55:	c9                   	leave  
   11f56:	c3                   	ret    

00011f57 <timer_init>:

void timer_init(void) {
   11f57:	55                   	push   %ebp
   11f58:	89 e5                	mov    %esp,%ebp
   11f5a:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11f5d:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   11f64:	00 00 00 
    init_pit();
   11f67:	e8 8b ff ff ff       	call   11ef7 <init_pit>
   11f6c:	90                   	nop
   11f6d:	c9                   	leave  
   11f6e:	c3                   	ret    

00011f6f <list_size>:
static inline int list_size(list_t* list) {
   11f6f:	55                   	push   %ebp
   11f70:	89 e5                	mov    %esp,%ebp
    return list->count;
   11f72:	8b 45 08             	mov    0x8(%ebp),%eax
   11f75:	8b 40 08             	mov    0x8(%eax),%eax
}
   11f78:	5d                   	pop    %ebp
   11f79:	c3                   	ret    

00011f7a <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11f7a:	55                   	push   %ebp
   11f7b:	89 e5                	mov    %esp,%ebp
    return list->first;
   11f7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f80:	8b 00                	mov    (%eax),%eax
}
   11f82:	5d                   	pop    %ebp
   11f83:	c3                   	ret    

00011f84 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11f84:	55                   	push   %ebp
   11f85:	89 e5                	mov    %esp,%ebp
    return list->last;
   11f87:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8a:	8b 40 04             	mov    0x4(%eax),%eax
}
   11f8d:	5d                   	pop    %ebp
   11f8e:	c3                   	ret    

00011f8f <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   11f8f:	55                   	push   %ebp
   11f90:	89 e5                	mov    %esp,%ebp
   11f92:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11f95:	8b 45 08             	mov    0x8(%ebp),%eax
   11f98:	8b 40 50             	mov    0x50(%eax),%eax
   11f9b:	85 c0                	test   %eax,%eax
   11f9d:	75 19                	jne    11fb8 <kernel_init+0x29>
   11f9f:	68 7c 38 01 00       	push   $0x1387c
   11fa4:	68 6c 39 01 00       	push   $0x1396c
   11fa9:	6a 12                	push   $0x12
   11fab:	68 a0 38 01 00       	push   $0x138a0
   11fb0:	e8 d3 0c 00 00       	call   12c88 <pannic>
   11fb5:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11fb8:	90                   	nop


    log_init();
   11fb9:	e8 32 0f 00 00       	call   12ef0 <log_init>

    memory_init(boot_info);
   11fbe:	83 ec 0c             	sub    $0xc,%esp
   11fc1:	ff 75 08             	pushl  0x8(%ebp)
   11fc4:	e8 ba e8 ff ff       	call   10883 <memory_init>
   11fc9:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11fcc:	e8 86 f4 ff ff       	call   11457 <cpu_init>


    irq_init();
   11fd1:	e8 69 fb ff ff       	call   11b3f <irq_init>
    timer_init();
   11fd6:	e8 7c ff ff ff       	call   11f57 <timer_init>

    task_manager_init();
   11fdb:	e8 8d ee ff ff       	call   10e6d <task_manager_init>
}
   11fe0:	90                   	nop
   11fe1:	c9                   	leave  
   11fe2:	c3                   	ret    

00011fe3 <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   11fe3:	55                   	push   %ebp
   11fe4:	89 e5                	mov    %esp,%ebp
   11fe6:	56                   	push   %esi
   11fe7:	53                   	push   %ebx
   11fe8:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11feb:	83 ec 0c             	sub    $0xc,%esp
   11fee:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11ff1:	50                   	push   %eax
   11ff2:	e8 da 0c 00 00       	call   12cd1 <list_init>
   11ff7:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11ffa:	83 ec 0c             	sub    $0xc,%esp
   11ffd:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12000:	50                   	push   %eax
   12001:	e8 69 ff ff ff       	call   11f6f <list_size>
   12006:	83 c4 10             	add    $0x10,%esp
   12009:	89 c6                	mov    %eax,%esi
   1200b:	83 ec 0c             	sub    $0xc,%esp
   1200e:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12011:	50                   	push   %eax
   12012:	e8 6d ff ff ff       	call   11f84 <list_last>
   12017:	83 c4 10             	add    $0x10,%esp
   1201a:	89 c3                	mov    %eax,%ebx
   1201c:	83 ec 0c             	sub    $0xc,%esp
   1201f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12022:	50                   	push   %eax
   12023:	e8 52 ff ff ff       	call   11f7a <list_first>
   12028:	83 c4 10             	add    $0x10,%esp
   1202b:	56                   	push   %esi
   1202c:	53                   	push   %ebx
   1202d:	50                   	push   %eax
   1202e:	68 e8 38 01 00       	push   $0x138e8
   12033:	e8 5a 0f 00 00       	call   12f92 <log_printf>
   12038:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   1203b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12042:	eb 3b                	jmp    1207f <link_test+0x9c>
        list_node_t* node = &nodes[i];
   12044:	8d 45 a8             	lea    -0x58(%ebp),%eax
   12047:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1204a:	c1 e2 03             	shl    $0x3,%edx
   1204d:	01 d0                	add    %edx,%eax
   1204f:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   12052:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12055:	83 ec 04             	sub    $0x4,%esp
   12058:	50                   	push   %eax
   12059:	ff 75 f4             	pushl  -0xc(%ebp)
   1205c:	68 11 39 01 00       	push   $0x13911
   12061:	e8 2c 0f 00 00       	call   12f92 <log_printf>
   12066:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   12069:	83 ec 08             	sub    $0x8,%esp
   1206c:	ff 75 dc             	pushl  -0x24(%ebp)
   1206f:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12072:	50                   	push   %eax
   12073:	e8 7c 0c 00 00       	call   12cf4 <list_insert_front>
   12078:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   1207b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1207f:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   12083:	7e bf                	jle    12044 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   12085:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1208c:	eb 33                	jmp    120c1 <link_test+0xde>
        list_remove_front(&list);
   1208e:	83 ec 0c             	sub    $0xc,%esp
   12091:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12094:	50                   	push   %eax
   12095:	e8 1c 0d 00 00       	call   12db6 <list_remove_front>
   1209a:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   1209d:	83 ec 0c             	sub    $0xc,%esp
   120a0:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120a3:	50                   	push   %eax
   120a4:	e8 c6 fe ff ff       	call   11f6f <list_size>
   120a9:	83 c4 10             	add    $0x10,%esp
   120ac:	83 ec 08             	sub    $0x8,%esp
   120af:	50                   	push   %eax
   120b0:	68 19 39 01 00       	push   $0x13919
   120b5:	e8 d8 0e 00 00       	call   12f92 <log_printf>
   120ba:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   120bd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   120c1:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   120c5:	7e c7                	jle    1208e <link_test+0xab>
    }

    list_init(&list);
   120c7:	83 ec 0c             	sub    $0xc,%esp
   120ca:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120cd:	50                   	push   %eax
   120ce:	e8 fe 0b 00 00       	call   12cd1 <list_init>
   120d3:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   120d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   120dd:	eb 3b                	jmp    1211a <link_test+0x137>
        list_node_t* node = &nodes[i];
   120df:	8d 45 a8             	lea    -0x58(%ebp),%eax
   120e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   120e5:	c1 e2 03             	shl    $0x3,%edx
   120e8:	01 d0                	add    %edx,%eax
   120ea:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   120ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
   120f0:	83 ec 04             	sub    $0x4,%esp
   120f3:	50                   	push   %eax
   120f4:	ff 75 ec             	pushl  -0x14(%ebp)
   120f7:	68 11 39 01 00       	push   $0x13911
   120fc:	e8 91 0e 00 00       	call   12f92 <log_printf>
   12101:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   12104:	83 ec 08             	sub    $0x8,%esp
   12107:	ff 75 e0             	pushl  -0x20(%ebp)
   1210a:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1210d:	50                   	push   %eax
   1210e:	e8 40 0c 00 00       	call   12d53 <list_insert_back>
   12113:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12116:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1211a:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1211e:	7e bf                	jle    120df <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   12120:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   12127:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   1212e:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   12135:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   1213c:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1213f:	83 c0 04             	add    $0x4,%eax
   12142:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   12145:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12149:	74 08                	je     12153 <link_test+0x170>
   1214b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1214e:	83 e8 04             	sub    $0x4,%eax
   12151:	eb 05                	jmp    12158 <link_test+0x175>
   12153:	b8 00 00 00 00       	mov    $0x0,%eax
   12158:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   1215b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1215e:	8b 00                	mov    (%eax),%eax
   12160:	3d 56 34 12 00       	cmp    $0x123456,%eax
   12165:	74 10                	je     12177 <link_test+0x194>
        log_printf("error!");
   12167:	83 ec 0c             	sub    $0xc,%esp
   1216a:	68 1e 39 01 00       	push   $0x1391e
   1216f:	e8 1e 0e 00 00       	call   12f92 <log_printf>
   12174:	83 c4 10             	add    $0x10,%esp
    }

}
   12177:	90                   	nop
   12178:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1217b:	5b                   	pop    %ebx
   1217c:	5e                   	pop    %esi
   1217d:	5d                   	pop    %ebp
   1217e:	c3                   	ret    

0001217f <move_to_first_task>:


void move_to_first_task(void) {
   1217f:	55                   	push   %ebp
   12180:	89 e5                	mov    %esp,%ebp
   12182:	56                   	push   %esi
   12183:	53                   	push   %ebx
   12184:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   12187:	e8 0b ef ff ff       	call   11097 <task_current>
   1218c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   1218f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12193:	75 19                	jne    121ae <move_to_first_task+0x2f>
   12195:	68 25 39 01 00       	push   $0x13925
   1219a:	68 78 39 01 00       	push   $0x13978
   1219f:	6a 68                	push   $0x68
   121a1:	68 a0 38 01 00       	push   $0x138a0
   121a6:	e8 dd 0a 00 00       	call   12c88 <pannic>
   121ab:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   121ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121b1:	83 c0 48             	add    $0x48,%eax
   121b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   121b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121ba:	8b 40 50             	mov    0x50(%eax),%eax
   121bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   121c0:	8b 52 38             	mov    0x38(%edx),%edx
   121c3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   121c6:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   121c9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   121cc:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   121cf:	8b 75 f0             	mov    -0x10(%ebp),%esi
   121d2:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   121d5:	50                   	push   %eax
   121d6:	52                   	push   %edx
   121d7:	51                   	push   %ecx
   121d8:	53                   	push   %ebx
   121d9:	56                   	push   %esi
   121da:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   121db:	90                   	nop
   121dc:	8d 65 f8             	lea    -0x8(%ebp),%esp
   121df:	5b                   	pop    %ebx
   121e0:	5e                   	pop    %esi
   121e1:	5d                   	pop    %ebp
   121e2:	c3                   	ret    

000121e3 <init_main>:


void init_main(void) {
   121e3:	55                   	push   %ebp
   121e4:	89 e5                	mov    %esp,%ebp
   121e6:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   121e9:	83 ec 0c             	sub    $0xc,%esp
   121ec:	68 2f 39 01 00       	push   $0x1392f
   121f1:	e8 9c 0d 00 00       	call   12f92 <log_printf>
   121f6:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   121f9:	83 ec 04             	sub    $0x4,%esp
   121fc:	68 45 39 01 00       	push   $0x13945
   12201:	68 4a 39 01 00       	push   $0x1394a
   12206:	68 50 39 01 00       	push   $0x13950
   1220b:	e8 82 0d 00 00       	call   12f92 <log_printf>
   12210:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   12213:	83 ec 0c             	sub    $0xc,%esp
   12216:	6a 61                	push   $0x61
   12218:	68 56 34 12 00       	push   $0x123456
   1221d:	6a 85                	push   $0xffffff85
   1221f:	68 39 30 00 00       	push   $0x3039
   12224:	68 5f 39 01 00       	push   $0x1395f
   12229:	e8 64 0d 00 00       	call   12f92 <log_printf>
   1222e:	83 c4 20             	add    $0x20,%esp

    //
    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
    //

    task_first_init();
   12231:	e8 ea ec ff ff       	call   10f20 <task_first_init>
    move_to_first_task();
   12236:	e8 44 ff ff ff       	call   1217f <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   1223b:	90                   	nop
   1223c:	c9                   	leave  
   1223d:	c3                   	ret    

0001223e <list_size>:
static inline int list_size(list_t* list) {
   1223e:	55                   	push   %ebp
   1223f:	89 e5                	mov    %esp,%ebp
    return list->count;
   12241:	8b 45 08             	mov    0x8(%ebp),%eax
   12244:	8b 40 08             	mov    0x8(%eax),%eax
}
   12247:	5d                   	pop    %ebp
   12248:	c3                   	ret    

00012249 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   12249:	55                   	push   %ebp
   1224a:	89 e5                	mov    %esp,%ebp
   1224c:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   1224f:	8b 45 08             	mov    0x8(%ebp),%eax
   12252:	83 ec 08             	sub    $0x8,%esp
   12255:	ff 75 0c             	pushl  0xc(%ebp)
   12258:	50                   	push   %eax
   12259:	e8 0a 05 00 00       	call   12768 <kstrcpy>
   1225e:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   12261:	8b 45 08             	mov    0x8(%ebp),%eax
   12264:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   1226b:	8b 45 08             	mov    0x8(%ebp),%eax
   1226e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   12275:	8b 45 08             	mov    0x8(%ebp),%eax
   12278:	83 c0 48             	add    $0x48,%eax
   1227b:	83 ec 0c             	sub    $0xc,%esp
   1227e:	50                   	push   %eax
   1227f:	e8 4d 0a 00 00       	call   12cd1 <list_init>
   12284:	83 c4 10             	add    $0x10,%esp
}
   12287:	90                   	nop
   12288:	c9                   	leave  
   12289:	c3                   	ret    

0001228a <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   1228a:	55                   	push   %ebp
   1228b:	89 e5                	mov    %esp,%ebp
   1228d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12290:	e8 f2 fb ff ff       	call   11e87 <irq_enter_protection>
   12295:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12298:	e8 fa ed ff ff       	call   11097 <task_current>
   1229d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   122a0:	8b 45 08             	mov    0x8(%ebp),%eax
   122a3:	8b 40 44             	mov    0x44(%eax),%eax
   122a6:	85 c0                	test   %eax,%eax
   122a8:	75 15                	jne    122bf <mutex_acquire+0x35>
        mutex->locked_count = 1;
   122aa:	8b 45 08             	mov    0x8(%ebp),%eax
   122ad:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   122b4:	8b 45 08             	mov    0x8(%ebp),%eax
   122b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122ba:	89 50 40             	mov    %edx,0x40(%eax)
   122bd:	eb 48                	jmp    12307 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   122bf:	8b 45 08             	mov    0x8(%ebp),%eax
   122c2:	8b 40 40             	mov    0x40(%eax),%eax
   122c5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122c8:	75 11                	jne    122db <mutex_acquire+0x51>
        mutex->locked_count++;
   122ca:	8b 45 08             	mov    0x8(%ebp),%eax
   122cd:	8b 40 44             	mov    0x44(%eax),%eax
   122d0:	8d 50 01             	lea    0x1(%eax),%edx
   122d3:	8b 45 08             	mov    0x8(%ebp),%eax
   122d6:	89 50 44             	mov    %edx,0x44(%eax)
   122d9:	eb 2c                	jmp    12307 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   122db:	83 ec 0c             	sub    $0xc,%esp
   122de:	ff 75 f0             	pushl  -0x10(%ebp)
   122e1:	e8 43 ed ff ff       	call   11029 <task_set_blocked>
   122e6:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   122e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122ec:	8d 50 34             	lea    0x34(%eax),%edx
   122ef:	8b 45 08             	mov    0x8(%ebp),%eax
   122f2:	83 c0 48             	add    $0x48,%eax
   122f5:	83 ec 08             	sub    $0x8,%esp
   122f8:	52                   	push   %edx
   122f9:	50                   	push   %eax
   122fa:	e8 54 0a 00 00       	call   12d53 <list_insert_back>
   122ff:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12302:	e8 fb ed ff ff       	call   11102 <task_dispatch>
    }

    irq_leave_protection(state);
   12307:	83 ec 0c             	sub    $0xc,%esp
   1230a:	ff 75 f4             	pushl  -0xc(%ebp)
   1230d:	e8 8d fb ff ff       	call   11e9f <irq_leave_protection>
   12312:	83 c4 10             	add    $0x10,%esp
}
   12315:	90                   	nop
   12316:	c9                   	leave  
   12317:	c3                   	ret    

00012318 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   12318:	55                   	push   %ebp
   12319:	89 e5                	mov    %esp,%ebp
   1231b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1231e:	e8 64 fb ff ff       	call   11e87 <irq_enter_protection>
   12323:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12326:	e8 6c ed ff ff       	call   11097 <task_current>
   1232b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   1232e:	8b 45 08             	mov    0x8(%ebp),%eax
   12331:	8b 40 40             	mov    0x40(%eax),%eax
   12334:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12337:	0f 85 8a 00 00 00    	jne    123c7 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   1233d:	8b 45 08             	mov    0x8(%ebp),%eax
   12340:	8b 40 44             	mov    0x44(%eax),%eax
   12343:	8d 50 ff             	lea    -0x1(%eax),%edx
   12346:	8b 45 08             	mov    0x8(%ebp),%eax
   12349:	89 50 44             	mov    %edx,0x44(%eax)
   1234c:	8b 45 08             	mov    0x8(%ebp),%eax
   1234f:	8b 40 44             	mov    0x44(%eax),%eax
   12352:	85 c0                	test   %eax,%eax
   12354:	75 71                	jne    123c7 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   12356:	8b 45 08             	mov    0x8(%ebp),%eax
   12359:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   12360:	8b 45 08             	mov    0x8(%ebp),%eax
   12363:	83 c0 48             	add    $0x48,%eax
   12366:	83 ec 0c             	sub    $0xc,%esp
   12369:	50                   	push   %eax
   1236a:	e8 cf fe ff ff       	call   1223e <list_size>
   1236f:	83 c4 10             	add    $0x10,%esp
   12372:	85 c0                	test   %eax,%eax
   12374:	74 51                	je     123c7 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   12376:	8b 45 08             	mov    0x8(%ebp),%eax
   12379:	83 c0 48             	add    $0x48,%eax
   1237c:	83 ec 0c             	sub    $0xc,%esp
   1237f:	50                   	push   %eax
   12380:	e8 31 0a 00 00       	call   12db6 <list_remove_front>
   12385:	83 c4 10             	add    $0x10,%esp
   12388:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   1238b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1238f:	74 08                	je     12399 <mutex_release+0x81>
   12391:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12394:	83 e8 34             	sub    $0x34,%eax
   12397:	eb 05                	jmp    1239e <mutex_release+0x86>
   12399:	b8 00 00 00 00       	mov    $0x0,%eax
   1239e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   123a1:	83 ec 0c             	sub    $0xc,%esp
   123a4:	ff 75 e8             	pushl  -0x18(%ebp)
   123a7:	e8 49 ec ff ff       	call   10ff5 <task_set_ready>
   123ac:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   123af:	8b 45 08             	mov    0x8(%ebp),%eax
   123b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
   123b5:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   123b8:	8b 45 08             	mov    0x8(%ebp),%eax
   123bb:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   123c2:	e8 3b ed ff ff       	call   11102 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   123c7:	83 ec 0c             	sub    $0xc,%esp
   123ca:	ff 75 f4             	pushl  -0xc(%ebp)
   123cd:	e8 cd fa ff ff       	call   11e9f <irq_leave_protection>
   123d2:	83 c4 10             	add    $0x10,%esp
   123d5:	90                   	nop
   123d6:	c9                   	leave  
   123d7:	c3                   	ret    

000123d8 <list_size>:
static inline int list_size(list_t* list) {
   123d8:	55                   	push   %ebp
   123d9:	89 e5                	mov    %esp,%ebp
    return list->count;
   123db:	8b 45 08             	mov    0x8(%ebp),%eax
   123de:	8b 40 08             	mov    0x8(%eax),%eax
}
   123e1:	5d                   	pop    %ebp
   123e2:	c3                   	ret    

000123e3 <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   123e3:	55                   	push   %ebp
   123e4:	89 e5                	mov    %esp,%ebp
   123e6:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   123e9:	8b 45 08             	mov    0x8(%ebp),%eax
   123ec:	8b 55 0c             	mov    0xc(%ebp),%edx
   123ef:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   123f1:	8b 45 08             	mov    0x8(%ebp),%eax
   123f4:	83 c0 04             	add    $0x4,%eax
   123f7:	83 ec 0c             	sub    $0xc,%esp
   123fa:	50                   	push   %eax
   123fb:	e8 d1 08 00 00       	call   12cd1 <list_init>
   12400:	83 c4 10             	add    $0x10,%esp
}
   12403:	90                   	nop
   12404:	c9                   	leave  
   12405:	c3                   	ret    

00012406 <sem_wait>:


void sem_wait(sem_t* sem) {
   12406:	55                   	push   %ebp
   12407:	89 e5                	mov    %esp,%ebp
   12409:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   1240c:	e8 76 fa ff ff       	call   11e87 <irq_enter_protection>
   12411:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   12414:	8b 45 08             	mov    0x8(%ebp),%eax
   12417:	8b 00                	mov    (%eax),%eax
   12419:	85 c0                	test   %eax,%eax
   1241b:	7e 0f                	jle    1242c <sem_wait+0x26>
        sem->count--;
   1241d:	8b 45 08             	mov    0x8(%ebp),%eax
   12420:	8b 00                	mov    (%eax),%eax
   12422:	8d 50 ff             	lea    -0x1(%eax),%edx
   12425:	8b 45 08             	mov    0x8(%ebp),%eax
   12428:	89 10                	mov    %edx,(%eax)
   1242a:	eb 34                	jmp    12460 <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   1242c:	e8 66 ec ff ff       	call   11097 <task_current>
   12431:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   12434:	83 ec 0c             	sub    $0xc,%esp
   12437:	ff 75 f0             	pushl  -0x10(%ebp)
   1243a:	e8 ea eb ff ff       	call   11029 <task_set_blocked>
   1243f:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   12442:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12445:	8d 50 34             	lea    0x34(%eax),%edx
   12448:	8b 45 08             	mov    0x8(%ebp),%eax
   1244b:	83 c0 04             	add    $0x4,%eax
   1244e:	83 ec 08             	sub    $0x8,%esp
   12451:	52                   	push   %edx
   12452:	50                   	push   %eax
   12453:	e8 fb 08 00 00       	call   12d53 <list_insert_back>
   12458:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1245b:	e8 a2 ec ff ff       	call   11102 <task_dispatch>
    }

    irq_leave_protection(state);
   12460:	83 ec 0c             	sub    $0xc,%esp
   12463:	ff 75 f4             	pushl  -0xc(%ebp)
   12466:	e8 34 fa ff ff       	call   11e9f <irq_leave_protection>
   1246b:	83 c4 10             	add    $0x10,%esp
}
   1246e:	90                   	nop
   1246f:	c9                   	leave  
   12470:	c3                   	ret    

00012471 <sem_notify>:


void sem_notify(sem_t* sem) {
   12471:	55                   	push   %ebp
   12472:	89 e5                	mov    %esp,%ebp
   12474:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12477:	e8 0b fa ff ff       	call   11e87 <irq_enter_protection>
   1247c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   1247f:	8b 45 08             	mov    0x8(%ebp),%eax
   12482:	83 c0 04             	add    $0x4,%eax
   12485:	83 ec 0c             	sub    $0xc,%esp
   12488:	50                   	push   %eax
   12489:	e8 4a ff ff ff       	call   123d8 <list_size>
   1248e:	83 c4 10             	add    $0x10,%esp
   12491:	85 c0                	test   %eax,%eax
   12493:	74 40                	je     124d5 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   12495:	8b 45 08             	mov    0x8(%ebp),%eax
   12498:	83 c0 04             	add    $0x4,%eax
   1249b:	83 ec 0c             	sub    $0xc,%esp
   1249e:	50                   	push   %eax
   1249f:	e8 12 09 00 00       	call   12db6 <list_remove_front>
   124a4:	83 c4 10             	add    $0x10,%esp
   124a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   124aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124ae:	74 08                	je     124b8 <sem_notify+0x47>
   124b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124b3:	83 e8 34             	sub    $0x34,%eax
   124b6:	eb 05                	jmp    124bd <sem_notify+0x4c>
   124b8:	b8 00 00 00 00       	mov    $0x0,%eax
   124bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   124c0:	83 ec 0c             	sub    $0xc,%esp
   124c3:	ff 75 ec             	pushl  -0x14(%ebp)
   124c6:	e8 2a eb ff ff       	call   10ff5 <task_set_ready>
   124cb:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   124ce:	e8 2f ec ff ff       	call   11102 <task_dispatch>
   124d3:	eb 0d                	jmp    124e2 <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   124d5:	8b 45 08             	mov    0x8(%ebp),%eax
   124d8:	8b 00                	mov    (%eax),%eax
   124da:	8d 50 01             	lea    0x1(%eax),%edx
   124dd:	8b 45 08             	mov    0x8(%ebp),%eax
   124e0:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   124e2:	83 ec 0c             	sub    $0xc,%esp
   124e5:	ff 75 f4             	pushl  -0xc(%ebp)
   124e8:	e8 b2 f9 ff ff       	call   11e9f <irq_leave_protection>
   124ed:	83 c4 10             	add    $0x10,%esp
}
   124f0:	90                   	nop
   124f1:	c9                   	leave  
   124f2:	c3                   	ret    

000124f3 <sem_count>:

int sem_count(sem_t* sem) {
   124f3:	55                   	push   %ebp
   124f4:	89 e5                	mov    %esp,%ebp
   124f6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   124f9:	e8 89 f9 ff ff       	call   11e87 <irq_enter_protection>
   124fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   12501:	8b 45 08             	mov    0x8(%ebp),%eax
   12504:	8b 00                	mov    (%eax),%eax
   12506:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   12509:	83 ec 0c             	sub    $0xc,%esp
   1250c:	ff 75 f4             	pushl  -0xc(%ebp)
   1250f:	e8 8b f9 ff ff       	call   11e9f <irq_leave_protection>
   12514:	83 c4 10             	add    $0x10,%esp

    return count;
   12517:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1251a:	c9                   	leave  
   1251b:	c3                   	ret    

0001251c <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   1251c:	55                   	push   %ebp
   1251d:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   1251f:	8b 45 08             	mov    0x8(%ebp),%eax
   12522:	83 c0 07             	add    $0x7,%eax
   12525:	8d 50 07             	lea    0x7(%eax),%edx
   12528:	85 c0                	test   %eax,%eax
   1252a:	0f 48 c2             	cmovs  %edx,%eax
   1252d:	c1 f8 03             	sar    $0x3,%eax
}
   12530:	5d                   	pop    %ebp
   12531:	c3                   	ret    

00012532 <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   12532:	55                   	push   %ebp
   12533:	89 e5                	mov    %esp,%ebp
   12535:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   12538:	8b 45 08             	mov    0x8(%ebp),%eax
   1253b:	8b 55 10             	mov    0x10(%ebp),%edx
   1253e:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   12540:	8b 45 08             	mov    0x8(%ebp),%eax
   12543:	8b 55 0c             	mov    0xc(%ebp),%edx
   12546:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   12549:	8b 45 08             	mov    0x8(%ebp),%eax
   1254c:	8b 00                	mov    (%eax),%eax
   1254e:	50                   	push   %eax
   1254f:	e8 c8 ff ff ff       	call   1251c <bitmap_byte_count>
   12554:	83 c4 04             	add    $0x4,%esp
   12557:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   1255a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1255e:	74 07                	je     12567 <bitmap_init+0x35>
   12560:	ba ff 00 00 00       	mov    $0xff,%edx
   12565:	eb 05                	jmp    1256c <bitmap_init+0x3a>
   12567:	ba 00 00 00 00       	mov    $0x0,%edx
   1256c:	8b 45 08             	mov    0x8(%ebp),%eax
   1256f:	8b 40 04             	mov    0x4(%eax),%eax
   12572:	83 ec 04             	sub    $0x4,%esp
   12575:	ff 75 f4             	pushl  -0xc(%ebp)
   12578:	52                   	push   %edx
   12579:	50                   	push   %eax
   1257a:	e8 a4 03 00 00       	call   12923 <kmemset>
   1257f:	83 c4 10             	add    $0x10,%esp
}
   12582:	90                   	nop
   12583:	c9                   	leave  
   12584:	c3                   	ret    

00012585 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   12585:	55                   	push   %ebp
   12586:	89 e5                	mov    %esp,%ebp
   12588:	56                   	push   %esi
   12589:	53                   	push   %ebx
   1258a:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1258d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12594:	e9 a2 00 00 00       	jmp    1263b <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   12599:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1259d:	74 4a                	je     125e9 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   1259f:	8b 45 08             	mov    0x8(%ebp),%eax
   125a2:	8b 50 04             	mov    0x4(%eax),%edx
   125a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a8:	8d 48 07             	lea    0x7(%eax),%ecx
   125ab:	85 c0                	test   %eax,%eax
   125ad:	0f 48 c1             	cmovs  %ecx,%eax
   125b0:	c1 f8 03             	sar    $0x3,%eax
   125b3:	89 c3                	mov    %eax,%ebx
   125b5:	89 d8                	mov    %ebx,%eax
   125b7:	01 d0                	add    %edx,%eax
   125b9:	0f b6 00             	movzbl (%eax),%eax
   125bc:	89 c6                	mov    %eax,%esi
   125be:	8b 45 0c             	mov    0xc(%ebp),%eax
   125c1:	99                   	cltd   
   125c2:	c1 ea 1d             	shr    $0x1d,%edx
   125c5:	01 d0                	add    %edx,%eax
   125c7:	83 e0 07             	and    $0x7,%eax
   125ca:	29 d0                	sub    %edx,%eax
   125cc:	ba 01 00 00 00       	mov    $0x1,%edx
   125d1:	89 c1                	mov    %eax,%ecx
   125d3:	d3 e2                	shl    %cl,%edx
   125d5:	89 d0                	mov    %edx,%eax
   125d7:	89 f2                	mov    %esi,%edx
   125d9:	09 c2                	or     %eax,%edx
   125db:	8b 45 08             	mov    0x8(%ebp),%eax
   125de:	8b 40 04             	mov    0x4(%eax),%eax
   125e1:	89 d9                	mov    %ebx,%ecx
   125e3:	01 c8                	add    %ecx,%eax
   125e5:	88 10                	mov    %dl,(%eax)
   125e7:	eb 4a                	jmp    12633 <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   125e9:	8b 45 08             	mov    0x8(%ebp),%eax
   125ec:	8b 50 04             	mov    0x4(%eax),%edx
   125ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f2:	8d 48 07             	lea    0x7(%eax),%ecx
   125f5:	85 c0                	test   %eax,%eax
   125f7:	0f 48 c1             	cmovs  %ecx,%eax
   125fa:	c1 f8 03             	sar    $0x3,%eax
   125fd:	89 c3                	mov    %eax,%ebx
   125ff:	89 d8                	mov    %ebx,%eax
   12601:	01 d0                	add    %edx,%eax
   12603:	0f b6 00             	movzbl (%eax),%eax
   12606:	89 c6                	mov    %eax,%esi
   12608:	8b 45 0c             	mov    0xc(%ebp),%eax
   1260b:	99                   	cltd   
   1260c:	c1 ea 1d             	shr    $0x1d,%edx
   1260f:	01 d0                	add    %edx,%eax
   12611:	83 e0 07             	and    $0x7,%eax
   12614:	29 d0                	sub    %edx,%eax
   12616:	ba 01 00 00 00       	mov    $0x1,%edx
   1261b:	89 c1                	mov    %eax,%ecx
   1261d:	d3 e2                	shl    %cl,%edx
   1261f:	89 d0                	mov    %edx,%eax
   12621:	f7 d0                	not    %eax
   12623:	89 f2                	mov    %esi,%edx
   12625:	21 c2                	and    %eax,%edx
   12627:	8b 45 08             	mov    0x8(%ebp),%eax
   1262a:	8b 40 04             	mov    0x4(%eax),%eax
   1262d:	89 d9                	mov    %ebx,%ecx
   1262f:	01 c8                	add    %ecx,%eax
   12631:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12633:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12637:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1263b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1263e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12641:	7d 0e                	jge    12651 <bitmap_set_bit+0xcc>
   12643:	8b 45 08             	mov    0x8(%ebp),%eax
   12646:	8b 00                	mov    (%eax),%eax
   12648:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1264b:	0f 8c 48 ff ff ff    	jl     12599 <bitmap_set_bit+0x14>
        }
    }
}
   12651:	90                   	nop
   12652:	83 c4 10             	add    $0x10,%esp
   12655:	5b                   	pop    %ebx
   12656:	5e                   	pop    %esi
   12657:	5d                   	pop    %ebp
   12658:	c3                   	ret    

00012659 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   12659:	55                   	push   %ebp
   1265a:	89 e5                	mov    %esp,%ebp
   1265c:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   1265d:	8b 45 08             	mov    0x8(%ebp),%eax
   12660:	8b 50 04             	mov    0x4(%eax),%edx
   12663:	8b 45 0c             	mov    0xc(%ebp),%eax
   12666:	8d 48 07             	lea    0x7(%eax),%ecx
   12669:	85 c0                	test   %eax,%eax
   1266b:	0f 48 c1             	cmovs  %ecx,%eax
   1266e:	c1 f8 03             	sar    $0x3,%eax
   12671:	01 d0                	add    %edx,%eax
   12673:	0f b6 00             	movzbl (%eax),%eax
   12676:	0f b6 d8             	movzbl %al,%ebx
   12679:	8b 45 0c             	mov    0xc(%ebp),%eax
   1267c:	99                   	cltd   
   1267d:	c1 ea 1d             	shr    $0x1d,%edx
   12680:	01 d0                	add    %edx,%eax
   12682:	83 e0 07             	and    $0x7,%eax
   12685:	29 d0                	sub    %edx,%eax
   12687:	89 c1                	mov    %eax,%ecx
   12689:	d3 fb                	sar    %cl,%ebx
   1268b:	89 d8                	mov    %ebx,%eax
   1268d:	83 e0 01             	and    $0x1,%eax
}
   12690:	5b                   	pop    %ebx
   12691:	5d                   	pop    %ebp
   12692:	c3                   	ret    

00012693 <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   12693:	55                   	push   %ebp
   12694:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12696:	ff 75 0c             	pushl  0xc(%ebp)
   12699:	ff 75 08             	pushl  0x8(%ebp)
   1269c:	e8 b8 ff ff ff       	call   12659 <bitmap_get_bit>
   126a1:	83 c4 08             	add    $0x8,%esp
   126a4:	85 c0                	test   %eax,%eax
   126a6:	0f 95 c0             	setne  %al
   126a9:	0f b6 c0             	movzbl %al,%eax
}
   126ac:	c9                   	leave  
   126ad:	c3                   	ret    

000126ae <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   126ae:	55                   	push   %ebp
   126af:	89 e5                	mov    %esp,%ebp
   126b1:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   126b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   126bb:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   126c2:	e9 85 00 00 00       	jmp    1274c <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   126c7:	ff 75 fc             	pushl  -0x4(%ebp)
   126ca:	ff 75 08             	pushl  0x8(%ebp)
   126cd:	e8 87 ff ff ff       	call   12659 <bitmap_get_bit>
   126d2:	83 c4 08             	add    $0x8,%esp
   126d5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   126d8:	74 06                	je     126e0 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   126da:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   126de:	eb 6c                	jmp    1274c <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   126e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126e3:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   126e6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   126ed:	eb 27                	jmp    12716 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   126ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126f2:	8d 50 01             	lea    0x1(%eax),%edx
   126f5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   126f8:	50                   	push   %eax
   126f9:	ff 75 08             	pushl  0x8(%ebp)
   126fc:	e8 58 ff ff ff       	call   12659 <bitmap_get_bit>
   12701:	83 c4 08             	add    $0x8,%esp
   12704:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12707:	74 09                	je     12712 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12709:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12710:	eb 16                	jmp    12728 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12712:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12716:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12719:	3b 45 10             	cmp    0x10(%ebp),%eax
   1271c:	7d 0a                	jge    12728 <bitmap_alloc_nbits+0x7a>
   1271e:	8b 45 08             	mov    0x8(%ebp),%eax
   12721:	8b 00                	mov    (%eax),%eax
   12723:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12726:	7c c7                	jl     126ef <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   12728:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1272b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1272e:	7c 1c                	jl     1274c <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   12730:	8b 45 0c             	mov    0xc(%ebp),%eax
   12733:	f7 d0                	not    %eax
   12735:	50                   	push   %eax
   12736:	ff 75 10             	pushl  0x10(%ebp)
   12739:	ff 75 f8             	pushl  -0x8(%ebp)
   1273c:	ff 75 08             	pushl  0x8(%ebp)
   1273f:	e8 41 fe ff ff       	call   12585 <bitmap_set_bit>
   12744:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   12747:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1274a:	eb 13                	jmp    1275f <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1274c:	8b 45 08             	mov    0x8(%ebp),%eax
   1274f:	8b 00                	mov    (%eax),%eax
   12751:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12754:	0f 8c 6d ff ff ff    	jl     126c7 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1275a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1275f:	c9                   	leave  
   12760:	c3                   	ret    

00012761 <hlt>:
static inline void hlt(void) {
   12761:	55                   	push   %ebp
   12762:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12764:	f4                   	hlt    
}
   12765:	90                   	nop
   12766:	5d                   	pop    %ebp
   12767:	c3                   	ret    

00012768 <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   12768:	55                   	push   %ebp
   12769:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1276b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1276f:	74 3b                	je     127ac <kstrcpy+0x44>
   12771:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12775:	74 35                	je     127ac <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   12777:	eb 17                	jmp    12790 <kstrcpy+0x28>
        *dest++ = *src++;
   12779:	8b 55 0c             	mov    0xc(%ebp),%edx
   1277c:	8d 42 01             	lea    0x1(%edx),%eax
   1277f:	89 45 0c             	mov    %eax,0xc(%ebp)
   12782:	8b 45 08             	mov    0x8(%ebp),%eax
   12785:	8d 48 01             	lea    0x1(%eax),%ecx
   12788:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1278b:	0f b6 12             	movzbl (%edx),%edx
   1278e:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   12790:	8b 45 08             	mov    0x8(%ebp),%eax
   12793:	0f b6 00             	movzbl (%eax),%eax
   12796:	84 c0                	test   %al,%al
   12798:	74 0a                	je     127a4 <kstrcpy+0x3c>
   1279a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1279d:	0f b6 00             	movzbl (%eax),%eax
   127a0:	84 c0                	test   %al,%al
   127a2:	75 d5                	jne    12779 <kstrcpy+0x11>
    }
    *dest = '\0';
   127a4:	8b 45 08             	mov    0x8(%ebp),%eax
   127a7:	c6 00 00             	movb   $0x0,(%eax)
   127aa:	eb 01                	jmp    127ad <kstrcpy+0x45>
        return;
   127ac:	90                   	nop
}
   127ad:	5d                   	pop    %ebp
   127ae:	c3                   	ret    

000127af <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   127af:	55                   	push   %ebp
   127b0:	89 e5                	mov    %esp,%ebp
   127b2:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   127b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127b9:	74 61                	je     1281c <kstrncpy+0x6d>
   127bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127bf:	74 5b                	je     1281c <kstrncpy+0x6d>
   127c1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127c5:	74 55                	je     1281c <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   127c7:	8b 45 08             	mov    0x8(%ebp),%eax
   127ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   127cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   127d0:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   127d3:	eb 17                	jmp    127ec <kstrncpy+0x3d>
        *d++ = *s++;
   127d5:	8b 55 f8             	mov    -0x8(%ebp),%edx
   127d8:	8d 42 01             	lea    0x1(%edx),%eax
   127db:	89 45 f8             	mov    %eax,-0x8(%ebp)
   127de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127e1:	8d 48 01             	lea    0x1(%eax),%ecx
   127e4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   127e7:	0f b6 12             	movzbl (%edx),%edx
   127ea:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   127ec:	8b 45 10             	mov    0x10(%ebp),%eax
   127ef:	8d 50 ff             	lea    -0x1(%eax),%edx
   127f2:	89 55 10             	mov    %edx,0x10(%ebp)
   127f5:	85 c0                	test   %eax,%eax
   127f7:	7e 0a                	jle    12803 <kstrncpy+0x54>
   127f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127fc:	0f b6 00             	movzbl (%eax),%eax
   127ff:	84 c0                	test   %al,%al
   12801:	75 d2                	jne    127d5 <kstrncpy+0x26>
    }
    if (size == 0) {
   12803:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12807:	75 0b                	jne    12814 <kstrncpy+0x65>
        *(d - 1) = '\0';
   12809:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280c:	83 e8 01             	sub    $0x1,%eax
   1280f:	c6 00 00             	movb   $0x0,(%eax)
   12812:	eb 09                	jmp    1281d <kstrncpy+0x6e>
    } else {
        *d = '\0';
   12814:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12817:	c6 00 00             	movb   $0x0,(%eax)
   1281a:	eb 01                	jmp    1281d <kstrncpy+0x6e>
        return;
   1281c:	90                   	nop
    }
}
   1281d:	c9                   	leave  
   1281e:	c3                   	ret    

0001281f <kstrlen>:


int kstrlen(const char *str) {
   1281f:	55                   	push   %ebp
   12820:	89 e5                	mov    %esp,%ebp
   12822:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12825:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12829:	75 07                	jne    12832 <kstrlen+0x13>
        return 0;
   1282b:	b8 00 00 00 00       	mov    $0x0,%eax
   12830:	eb 26                	jmp    12858 <kstrlen+0x39>
    }

    const char *c = str;
   12832:	8b 45 08             	mov    0x8(%ebp),%eax
   12835:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   12838:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   1283f:	eb 04                	jmp    12845 <kstrlen+0x26>
        len++;
   12841:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   12845:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12848:	8d 50 01             	lea    0x1(%eax),%edx
   1284b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1284e:	0f b6 00             	movzbl (%eax),%eax
   12851:	84 c0                	test   %al,%al
   12853:	75 ec                	jne    12841 <kstrlen+0x22>
    }

    return len;
   12855:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12858:	c9                   	leave  
   12859:	c3                   	ret    

0001285a <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   1285a:	55                   	push   %ebp
   1285b:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   1285d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12861:	74 06                	je     12869 <kstrncmp+0xf>
   12863:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12867:	75 0f                	jne    12878 <kstrncmp+0x1e>
        return -1;
   12869:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1286e:	eb 62                	jmp    128d2 <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   12870:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   12874:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   12878:	8b 45 08             	mov    0x8(%ebp),%eax
   1287b:	0f b6 00             	movzbl (%eax),%eax
   1287e:	84 c0                	test   %al,%al
   12880:	74 20                	je     128a2 <kstrncmp+0x48>
   12882:	8b 45 0c             	mov    0xc(%ebp),%eax
   12885:	0f b6 00             	movzbl (%eax),%eax
   12888:	84 c0                	test   %al,%al
   1288a:	74 16                	je     128a2 <kstrncmp+0x48>
   1288c:	8b 45 08             	mov    0x8(%ebp),%eax
   1288f:	0f b6 10             	movzbl (%eax),%edx
   12892:	8b 45 0c             	mov    0xc(%ebp),%eax
   12895:	0f b6 00             	movzbl (%eax),%eax
   12898:	38 c2                	cmp    %al,%dl
   1289a:	75 06                	jne    128a2 <kstrncmp+0x48>
   1289c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128a0:	75 ce                	jne    12870 <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   128a2:	8b 45 08             	mov    0x8(%ebp),%eax
   128a5:	0f b6 00             	movzbl (%eax),%eax
   128a8:	84 c0                	test   %al,%al
   128aa:	74 21                	je     128cd <kstrncmp+0x73>
   128ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   128af:	0f b6 00             	movzbl (%eax),%eax
   128b2:	84 c0                	test   %al,%al
   128b4:	74 17                	je     128cd <kstrncmp+0x73>
   128b6:	8b 45 08             	mov    0x8(%ebp),%eax
   128b9:	0f b6 10             	movzbl (%eax),%edx
   128bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   128bf:	0f b6 00             	movzbl (%eax),%eax
   128c2:	38 c2                	cmp    %al,%dl
   128c4:	74 07                	je     128cd <kstrncmp+0x73>
   128c6:	b8 01 00 00 00       	mov    $0x1,%eax
   128cb:	eb 05                	jmp    128d2 <kstrncmp+0x78>
   128cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   128d2:	5d                   	pop    %ebp
   128d3:	c3                   	ret    

000128d4 <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   128d4:	55                   	push   %ebp
   128d5:	89 e5                	mov    %esp,%ebp
   128d7:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   128da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   128de:	74 40                	je     12920 <kmemcpy+0x4c>
   128e0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128e4:	74 3a                	je     12920 <kmemcpy+0x4c>
   128e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128ea:	74 34                	je     12920 <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   128ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   128f2:	8b 45 08             	mov    0x8(%ebp),%eax
   128f5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   128f8:	eb 17                	jmp    12911 <kmemcpy+0x3d>
        *d++ = *s++;
   128fa:	8b 55 fc             	mov    -0x4(%ebp),%edx
   128fd:	8d 42 01             	lea    0x1(%edx),%eax
   12900:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12903:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12906:	8d 48 01             	lea    0x1(%eax),%ecx
   12909:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1290c:	0f b6 12             	movzbl (%edx),%edx
   1290f:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12911:	8b 45 10             	mov    0x10(%ebp),%eax
   12914:	8d 50 ff             	lea    -0x1(%eax),%edx
   12917:	89 55 10             	mov    %edx,0x10(%ebp)
   1291a:	85 c0                	test   %eax,%eax
   1291c:	75 dc                	jne    128fa <kmemcpy+0x26>
   1291e:	eb 01                	jmp    12921 <kmemcpy+0x4d>
        return;
   12920:	90                   	nop
    }
}
   12921:	c9                   	leave  
   12922:	c3                   	ret    

00012923 <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   12923:	55                   	push   %ebp
   12924:	89 e5                	mov    %esp,%ebp
   12926:	83 ec 14             	sub    $0x14,%esp
   12929:	8b 45 0c             	mov    0xc(%ebp),%eax
   1292c:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1292f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12933:	74 2c                	je     12961 <kmemset+0x3e>
   12935:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12939:	74 26                	je     12961 <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   1293b:	8b 45 08             	mov    0x8(%ebp),%eax
   1293e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   12941:	eb 0f                	jmp    12952 <kmemset+0x2f>
        *d++ = v;
   12943:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12946:	8d 50 01             	lea    0x1(%eax),%edx
   12949:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1294c:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12950:	88 10                	mov    %dl,(%eax)
    while (size--) {
   12952:	8b 45 10             	mov    0x10(%ebp),%eax
   12955:	8d 50 ff             	lea    -0x1(%eax),%edx
   12958:	89 55 10             	mov    %edx,0x10(%ebp)
   1295b:	85 c0                	test   %eax,%eax
   1295d:	75 e4                	jne    12943 <kmemset+0x20>
   1295f:	eb 01                	jmp    12962 <kmemset+0x3f>
        return;
   12961:	90                   	nop
    }
}
   12962:	c9                   	leave  
   12963:	c3                   	ret    

00012964 <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   12964:	55                   	push   %ebp
   12965:	89 e5                	mov    %esp,%ebp
   12967:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   1296a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1296e:	74 06                	je     12976 <kmemcmp+0x12>
   12970:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12974:	75 07                	jne    1297d <kmemcmp+0x19>
        return 1;
   12976:	b8 01 00 00 00       	mov    $0x1,%eax
   1297b:	eb 43                	jmp    129c0 <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   1297d:	8b 45 08             	mov    0x8(%ebp),%eax
   12980:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12983:	8b 45 0c             	mov    0xc(%ebp),%eax
   12986:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12989:	eb 23                	jmp    129ae <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   1298b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1298e:	8d 50 01             	lea    0x1(%eax),%edx
   12991:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12994:	0f b6 08             	movzbl (%eax),%ecx
   12997:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1299a:	8d 50 01             	lea    0x1(%eax),%edx
   1299d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129a0:	0f b6 00             	movzbl (%eax),%eax
   129a3:	38 c1                	cmp    %al,%cl
   129a5:	74 07                	je     129ae <kmemcmp+0x4a>
            return 1;
   129a7:	b8 01 00 00 00       	mov    $0x1,%eax
   129ac:	eb 12                	jmp    129c0 <kmemcmp+0x5c>
    while (size--) {
   129ae:	8b 45 10             	mov    0x10(%ebp),%eax
   129b1:	8d 50 ff             	lea    -0x1(%eax),%edx
   129b4:	89 55 10             	mov    %edx,0x10(%ebp)
   129b7:	85 c0                	test   %eax,%eax
   129b9:	75 d0                	jne    1298b <kmemcmp+0x27>
        }
    }

    return 0;
   129bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   129c0:	c9                   	leave  
   129c1:	c3                   	ret    

000129c2 <kitoa>:


void kitoa(char *buf, int num, int base) {
   129c2:	55                   	push   %ebp
   129c3:	89 e5                	mov    %esp,%ebp
   129c5:	53                   	push   %ebx
   129c6:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   129c9:	8b 45 08             	mov    0x8(%ebp),%eax
   129cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   129cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   129d2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   129d5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   129d9:	74 1d                	je     129f8 <kitoa+0x36>
   129db:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   129df:	74 17                	je     129f8 <kitoa+0x36>
   129e1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   129e5:	74 11                	je     129f8 <kitoa+0x36>
   129e7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   129eb:	74 0b                	je     129f8 <kitoa+0x36>
        *p = '\0';
   129ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129f0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   129f3:	e9 03 01 00 00       	jmp    12afb <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   129f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   129ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a03:	79 19                	jns    12a1e <kitoa+0x5c>
   12a05:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12a09:	75 13                	jne    12a1e <kitoa+0x5c>
        *p++ = '-';
   12a0b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a0e:	8d 50 01             	lea    0x1(%eax),%edx
   12a11:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a14:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12a17:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12a1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12a22:	74 3b                	je     12a5f <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12a24:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a2d:	99                   	cltd   
   12a2e:	f7 7d 10             	idivl  0x10(%ebp)
   12a31:	89 d0                	mov    %edx,%eax
   12a33:	83 c0 0f             	add    $0xf,%eax
   12a36:	01 c8                	add    %ecx,%eax
   12a38:	0f b6 00             	movzbl (%eax),%eax
   12a3b:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12a3e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a41:	8d 50 01             	lea    0x1(%eax),%edx
   12a44:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a47:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12a4b:	88 10                	mov    %dl,(%eax)
            num /= base;
   12a4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a50:	99                   	cltd   
   12a51:	f7 7d 10             	idivl  0x10(%ebp)
   12a54:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12a57:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a5b:	75 c7                	jne    12a24 <kitoa+0x62>
   12a5d:	eb 4b                	jmp    12aaa <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12a5f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a62:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12a65:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12a6b:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12a6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a71:	ba 00 00 00 00       	mov    $0x0,%edx
   12a76:	f7 f3                	div    %ebx
   12a78:	89 d0                	mov    %edx,%eax
   12a7a:	83 c0 0f             	add    $0xf,%eax
   12a7d:	01 c8                	add    %ecx,%eax
   12a7f:	0f b6 00             	movzbl (%eax),%eax
   12a82:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12a85:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a88:	8d 50 01             	lea    0x1(%eax),%edx
   12a8b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a8e:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12a92:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12a94:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12a97:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a9a:	ba 00 00 00 00       	mov    $0x0,%edx
   12a9f:	f7 f3                	div    %ebx
   12aa1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12aa4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12aa8:	75 bb                	jne    12a65 <kitoa+0xa3>
    }
    *p-- = '\0';
   12aaa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12aad:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ab0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ab3:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12ab6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12aba:	74 08                	je     12ac4 <kitoa+0x102>
   12abc:	8b 45 08             	mov    0x8(%ebp),%eax
   12abf:	83 c0 01             	add    $0x1,%eax
   12ac2:	eb 03                	jmp    12ac7 <kitoa+0x105>
   12ac4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12aca:	eb 27                	jmp    12af3 <kitoa+0x131>
        char ch = *start;
   12acc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12acf:	0f b6 00             	movzbl (%eax),%eax
   12ad2:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12ad5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ad8:	0f b6 10             	movzbl (%eax),%edx
   12adb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12ade:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12ae0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ae3:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ae6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ae9:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12aed:	88 10                	mov    %dl,(%eax)
        start++;
   12aef:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12af3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12af6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12af9:	72 d1                	jb     12acc <kitoa+0x10a>
    }
}
   12afb:	83 c4 20             	add    $0x20,%esp
   12afe:	5b                   	pop    %ebx
   12aff:	5d                   	pop    %ebp
   12b00:	c3                   	ret    

00012b01 <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12b01:	55                   	push   %ebp
   12b02:	89 e5                	mov    %esp,%ebp
   12b04:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12b07:	8d 45 10             	lea    0x10(%ebp),%eax
   12b0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b10:	83 ec 04             	sub    $0x4,%esp
   12b13:	50                   	push   %eax
   12b14:	ff 75 0c             	pushl  0xc(%ebp)
   12b17:	ff 75 08             	pushl  0x8(%ebp)
   12b1a:	e8 06 00 00 00       	call   12b25 <kvsprintf>
   12b1f:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12b22:	90                   	nop
   12b23:	c9                   	leave  
   12b24:	c3                   	ret    

00012b25 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12b25:	55                   	push   %ebp
   12b26:	89 e5                	mov    %esp,%ebp
   12b28:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12b2b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12b32:	8b 45 08             	mov    0x8(%ebp),%eax
   12b35:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12b38:	e9 2f 01 00 00       	jmp    12c6c <kvsprintf+0x147>
        switch (state) {
   12b3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b40:	85 c0                	test   %eax,%eax
   12b42:	74 0a                	je     12b4e <kvsprintf+0x29>
   12b44:	83 f8 01             	cmp    $0x1,%eax
   12b47:	74 2b                	je     12b74 <kvsprintf+0x4f>
   12b49:	e9 1e 01 00 00       	jmp    12c6c <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12b4e:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12b52:	75 0c                	jne    12b60 <kvsprintf+0x3b>
                state = READ_FMT;
   12b54:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12b5b:	e9 0c 01 00 00       	jmp    12c6c <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12b60:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b63:	8d 50 01             	lea    0x1(%eax),%edx
   12b66:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b69:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12b6d:	88 10                	mov    %dl,(%eax)
            }
            break;
   12b6f:	e9 f8 00 00 00       	jmp    12c6c <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12b74:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12b78:	75 31                	jne    12bab <kvsprintf+0x86>
                int num = va_arg(args, int);
   12b7a:	8b 45 10             	mov    0x10(%ebp),%eax
   12b7d:	8d 50 04             	lea    0x4(%eax),%edx
   12b80:	89 55 10             	mov    %edx,0x10(%ebp)
   12b83:	8b 00                	mov    (%eax),%eax
   12b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   12b88:	6a 0a                	push   $0xa
   12b8a:	ff 75 e4             	pushl  -0x1c(%ebp)
   12b8d:	ff 75 f8             	pushl  -0x8(%ebp)
   12b90:	e8 2d fe ff ff       	call   129c2 <kitoa>
   12b95:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12b98:	ff 75 f8             	pushl  -0x8(%ebp)
   12b9b:	e8 7f fc ff ff       	call   1281f <kstrlen>
   12ba0:	83 c4 04             	add    $0x4,%esp
   12ba3:	01 45 f8             	add    %eax,-0x8(%ebp)
   12ba6:	e9 b9 00 00 00       	jmp    12c64 <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12bab:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12baf:	75 46                	jne    12bf7 <kvsprintf+0xd2>
                *curr++ = '0';
   12bb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bb4:	8d 50 01             	lea    0x1(%eax),%edx
   12bb7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12bba:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12bbd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bc0:	8d 50 01             	lea    0x1(%eax),%edx
   12bc3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12bc6:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12bc9:	8b 45 10             	mov    0x10(%ebp),%eax
   12bcc:	8d 50 04             	lea    0x4(%eax),%edx
   12bcf:	89 55 10             	mov    %edx,0x10(%ebp)
   12bd2:	8b 00                	mov    (%eax),%eax
   12bd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12bd7:	6a 10                	push   $0x10
   12bd9:	ff 75 e8             	pushl  -0x18(%ebp)
   12bdc:	ff 75 f8             	pushl  -0x8(%ebp)
   12bdf:	e8 de fd ff ff       	call   129c2 <kitoa>
   12be4:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12be7:	ff 75 f8             	pushl  -0x8(%ebp)
   12bea:	e8 30 fc ff ff       	call   1281f <kstrlen>
   12bef:	83 c4 04             	add    $0x4,%esp
   12bf2:	01 45 f8             	add    %eax,-0x8(%ebp)
   12bf5:	eb 6d                	jmp    12c64 <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12bf7:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12bfb:	75 1f                	jne    12c1c <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12bfd:	8b 45 10             	mov    0x10(%ebp),%eax
   12c00:	8d 50 04             	lea    0x4(%eax),%edx
   12c03:	89 55 10             	mov    %edx,0x10(%ebp)
   12c06:	8b 00                	mov    (%eax),%eax
   12c08:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12c0b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c0e:	8d 50 01             	lea    0x1(%eax),%edx
   12c11:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c14:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12c18:	88 10                	mov    %dl,(%eax)
   12c1a:	eb 48                	jmp    12c64 <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12c1c:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12c20:	75 42                	jne    12c64 <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12c22:	8b 45 10             	mov    0x10(%ebp),%eax
   12c25:	8d 50 04             	lea    0x4(%eax),%edx
   12c28:	89 55 10             	mov    %edx,0x10(%ebp)
   12c2b:	8b 00                	mov    (%eax),%eax
   12c2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12c30:	ff 75 f4             	pushl  -0xc(%ebp)
   12c33:	e8 e7 fb ff ff       	call   1281f <kstrlen>
   12c38:	83 c4 04             	add    $0x4,%esp
   12c3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12c3e:	eb 17                	jmp    12c57 <kvsprintf+0x132>
                    *curr++ = *str++;
   12c40:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12c43:	8d 42 01             	lea    0x1(%edx),%eax
   12c46:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12c49:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c4c:	8d 48 01             	lea    0x1(%eax),%ecx
   12c4f:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12c52:	0f b6 12             	movzbl (%edx),%edx
   12c55:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c5a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c5d:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12c60:	85 c0                	test   %eax,%eax
   12c62:	75 dc                	jne    12c40 <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12c64:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12c6b:	90                   	nop
    while ((ch = *fmt++)) {
   12c6c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c6f:	8d 50 01             	lea    0x1(%eax),%edx
   12c72:	89 55 0c             	mov    %edx,0xc(%ebp)
   12c75:	0f b6 00             	movzbl (%eax),%eax
   12c78:	88 45 ef             	mov    %al,-0x11(%ebp)
   12c7b:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12c7f:	0f 85 b8 fe ff ff    	jne    12b3d <kvsprintf+0x18>
        }
    }
}
   12c85:	90                   	nop
   12c86:	c9                   	leave  
   12c87:	c3                   	ret    

00012c88 <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   12c88:	55                   	push   %ebp
   12c89:	89 e5                	mov    %esp,%ebp
   12c8b:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12c8e:	83 ec 08             	sub    $0x8,%esp
   12c91:	ff 75 14             	pushl  0x14(%ebp)
   12c94:	68 8c 39 01 00       	push   $0x1398c
   12c99:	e8 f4 02 00 00       	call   12f92 <log_printf>
   12c9e:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12ca1:	ff 75 10             	pushl  0x10(%ebp)
   12ca4:	ff 75 0c             	pushl  0xc(%ebp)
   12ca7:	ff 75 08             	pushl  0x8(%ebp)
   12caa:	68 9e 39 01 00       	push   $0x1399e
   12caf:	e8 de 02 00 00       	call   12f92 <log_printf>
   12cb4:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12cb7:	e8 a5 fa ff ff       	call   12761 <hlt>
   12cbc:	eb f9                	jmp    12cb7 <pannic+0x2f>

00012cbe <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12cbe:	55                   	push   %ebp
   12cbf:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc4:	8b 40 08             	mov    0x8(%eax),%eax
   12cc7:	85 c0                	test   %eax,%eax
   12cc9:	0f 94 c0             	sete   %al
   12ccc:	0f b6 c0             	movzbl %al,%eax
}
   12ccf:	5d                   	pop    %ebp
   12cd0:	c3                   	ret    

00012cd1 <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12cd1:	55                   	push   %ebp
   12cd2:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12cd4:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ce0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12ce7:	8b 45 08             	mov    0x8(%ebp),%eax
   12cea:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12cf1:	90                   	nop
   12cf2:	5d                   	pop    %ebp
   12cf3:	c3                   	ret    

00012cf4 <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12cf4:	55                   	push   %ebp
   12cf5:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12cf7:	8b 45 08             	mov    0x8(%ebp),%eax
   12cfa:	8b 10                	mov    (%eax),%edx
   12cfc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cff:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12d02:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12d0b:	ff 75 08             	pushl  0x8(%ebp)
   12d0e:	e8 ab ff ff ff       	call   12cbe <list_is_empty>
   12d13:	83 c4 04             	add    $0x4,%esp
   12d16:	85 c0                	test   %eax,%eax
   12d18:	74 15                	je     12d2f <list_insert_front+0x3b>
        list->last = list->first = node;
   12d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d20:	89 10                	mov    %edx,(%eax)
   12d22:	8b 45 08             	mov    0x8(%ebp),%eax
   12d25:	8b 10                	mov    (%eax),%edx
   12d27:	8b 45 08             	mov    0x8(%ebp),%eax
   12d2a:	89 50 04             	mov    %edx,0x4(%eax)
   12d2d:	eb 12                	jmp    12d41 <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12d2f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d32:	8b 00                	mov    (%eax),%eax
   12d34:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d37:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12d39:	8b 45 08             	mov    0x8(%ebp),%eax
   12d3c:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d3f:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12d41:	8b 45 08             	mov    0x8(%ebp),%eax
   12d44:	8b 40 08             	mov    0x8(%eax),%eax
   12d47:	8d 50 01             	lea    0x1(%eax),%edx
   12d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4d:	89 50 08             	mov    %edx,0x8(%eax)
}
   12d50:	90                   	nop
   12d51:	c9                   	leave  
   12d52:	c3                   	ret    

00012d53 <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12d53:	55                   	push   %ebp
   12d54:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12d56:	8b 45 08             	mov    0x8(%ebp),%eax
   12d59:	8b 50 04             	mov    0x4(%eax),%edx
   12d5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d5f:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12d61:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d64:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12d6b:	ff 75 08             	pushl  0x8(%ebp)
   12d6e:	e8 4b ff ff ff       	call   12cbe <list_is_empty>
   12d73:	83 c4 04             	add    $0x4,%esp
   12d76:	85 c0                	test   %eax,%eax
   12d78:	74 15                	je     12d8f <list_insert_back+0x3c>
        list->last = list->first = node;
   12d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d7d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d80:	89 10                	mov    %edx,(%eax)
   12d82:	8b 45 08             	mov    0x8(%ebp),%eax
   12d85:	8b 10                	mov    (%eax),%edx
   12d87:	8b 45 08             	mov    0x8(%ebp),%eax
   12d8a:	89 50 04             	mov    %edx,0x4(%eax)
   12d8d:	eb 15                	jmp    12da4 <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d92:	8b 40 04             	mov    0x4(%eax),%eax
   12d95:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d98:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12d9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12da1:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12da4:	8b 45 08             	mov    0x8(%ebp),%eax
   12da7:	8b 40 08             	mov    0x8(%eax),%eax
   12daa:	8d 50 01             	lea    0x1(%eax),%edx
   12dad:	8b 45 08             	mov    0x8(%ebp),%eax
   12db0:	89 50 08             	mov    %edx,0x8(%eax)
}
   12db3:	90                   	nop
   12db4:	c9                   	leave  
   12db5:	c3                   	ret    

00012db6 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12db6:	55                   	push   %ebp
   12db7:	89 e5                	mov    %esp,%ebp
   12db9:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12dbc:	ff 75 08             	pushl  0x8(%ebp)
   12dbf:	e8 fa fe ff ff       	call   12cbe <list_is_empty>
   12dc4:	83 c4 04             	add    $0x4,%esp
   12dc7:	85 c0                	test   %eax,%eax
   12dc9:	74 07                	je     12dd2 <list_remove_front+0x1c>
        return (list_node_t*)0;
   12dcb:	b8 00 00 00 00       	mov    $0x0,%eax
   12dd0:	eb 5b                	jmp    12e2d <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12dd2:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd5:	8b 00                	mov    (%eax),%eax
   12dd7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12dda:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ddd:	8b 50 04             	mov    0x4(%eax),%edx
   12de0:	8b 45 08             	mov    0x8(%ebp),%eax
   12de3:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12de5:	8b 45 08             	mov    0x8(%ebp),%eax
   12de8:	8b 00                	mov    (%eax),%eax
   12dea:	85 c0                	test   %eax,%eax
   12dec:	75 0c                	jne    12dfa <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12dee:	8b 45 08             	mov    0x8(%ebp),%eax
   12df1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12df8:	eb 0c                	jmp    12e06 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12dfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12dfd:	8b 40 04             	mov    0x4(%eax),%eax
   12e00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12e06:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e09:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e10:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e13:	8b 50 04             	mov    0x4(%eax),%edx
   12e16:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e19:	89 10                	mov    %edx,(%eax)
    list->count--;
   12e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1e:	8b 40 08             	mov    0x8(%eax),%eax
   12e21:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e24:	8b 45 08             	mov    0x8(%ebp),%eax
   12e27:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12e2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12e2d:	c9                   	leave  
   12e2e:	c3                   	ret    

00012e2f <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12e2f:	55                   	push   %ebp
   12e30:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12e32:	8b 45 08             	mov    0x8(%ebp),%eax
   12e35:	8b 00                	mov    (%eax),%eax
   12e37:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12e3a:	75 0b                	jne    12e47 <list_remove+0x18>
        list->first = node->next;
   12e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e3f:	8b 50 04             	mov    0x4(%eax),%edx
   12e42:	8b 45 08             	mov    0x8(%ebp),%eax
   12e45:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12e47:	8b 45 08             	mov    0x8(%ebp),%eax
   12e4a:	8b 40 04             	mov    0x4(%eax),%eax
   12e4d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12e50:	75 0b                	jne    12e5d <list_remove+0x2e>
        list->last = node->pre;
   12e52:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e55:	8b 10                	mov    (%eax),%edx
   12e57:	8b 45 08             	mov    0x8(%ebp),%eax
   12e5a:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12e5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e60:	8b 00                	mov    (%eax),%eax
   12e62:	85 c0                	test   %eax,%eax
   12e64:	74 0e                	je     12e74 <list_remove+0x45>
        node->pre->next = node->next;
   12e66:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e69:	8b 00                	mov    (%eax),%eax
   12e6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e6e:	8b 52 04             	mov    0x4(%edx),%edx
   12e71:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12e74:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e77:	8b 40 04             	mov    0x4(%eax),%eax
   12e7a:	85 c0                	test   %eax,%eax
   12e7c:	74 0d                	je     12e8b <list_remove+0x5c>
        node->next->pre = node->pre;
   12e7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e81:	8b 40 04             	mov    0x4(%eax),%eax
   12e84:	8b 55 0c             	mov    0xc(%ebp),%edx
   12e87:	8b 12                	mov    (%edx),%edx
   12e89:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12e8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e8e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e95:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e98:	8b 50 04             	mov    0x4(%eax),%edx
   12e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e9e:	89 10                	mov    %edx,(%eax)
    --list->count;
   12ea0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ea3:	8b 40 08             	mov    0x8(%eax),%eax
   12ea6:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ea9:	8b 45 08             	mov    0x8(%ebp),%eax
   12eac:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12eaf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12eb2:	5d                   	pop    %ebp
   12eb3:	c3                   	ret    

00012eb4 <inb>:
static inline uint8_t inb(uint16_t port) {
   12eb4:	55                   	push   %ebp
   12eb5:	89 e5                	mov    %esp,%ebp
   12eb7:	83 ec 14             	sub    $0x14,%esp
   12eba:	8b 45 08             	mov    0x8(%ebp),%eax
   12ebd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12ec1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12ec5:	89 c2                	mov    %eax,%edx
   12ec7:	ec                   	in     (%dx),%al
   12ec8:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12ecb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12ecf:	c9                   	leave  
   12ed0:	c3                   	ret    

00012ed1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12ed1:	55                   	push   %ebp
   12ed2:	89 e5                	mov    %esp,%ebp
   12ed4:	83 ec 08             	sub    $0x8,%esp
   12ed7:	8b 55 08             	mov    0x8(%ebp),%edx
   12eda:	8b 45 0c             	mov    0xc(%ebp),%eax
   12edd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12ee1:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12ee4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12ee8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12eec:	ee                   	out    %al,(%dx)
}
   12eed:	90                   	nop
   12eee:	c9                   	leave  
   12eef:	c3                   	ret    

00012ef0 <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12ef0:	55                   	push   %ebp
   12ef1:	89 e5                	mov    %esp,%ebp
   12ef3:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   12ef6:	83 ec 08             	sub    $0x8,%esp
   12ef9:	68 dc 39 01 00       	push   $0x139dc
   12efe:	68 e0 8e 01 00       	push   $0x18ee0
   12f03:	e8 41 f3 ff ff       	call   12249 <mutex_init>
   12f08:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12f0b:	83 ec 08             	sub    $0x8,%esp
   12f0e:	6a 00                	push   $0x0
   12f10:	68 f9 03 00 00       	push   $0x3f9
   12f15:	e8 b7 ff ff ff       	call   12ed1 <outb>
   12f1a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12f1d:	83 ec 08             	sub    $0x8,%esp
   12f20:	68 80 00 00 00       	push   $0x80
   12f25:	68 fb 03 00 00       	push   $0x3fb
   12f2a:	e8 a2 ff ff ff       	call   12ed1 <outb>
   12f2f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12f32:	83 ec 08             	sub    $0x8,%esp
   12f35:	6a 03                	push   $0x3
   12f37:	68 f8 03 00 00       	push   $0x3f8
   12f3c:	e8 90 ff ff ff       	call   12ed1 <outb>
   12f41:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12f44:	83 ec 08             	sub    $0x8,%esp
   12f47:	6a 00                	push   $0x0
   12f49:	68 f9 03 00 00       	push   $0x3f9
   12f4e:	e8 7e ff ff ff       	call   12ed1 <outb>
   12f53:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12f56:	83 ec 08             	sub    $0x8,%esp
   12f59:	6a 03                	push   $0x3
   12f5b:	68 fb 03 00 00       	push   $0x3fb
   12f60:	e8 6c ff ff ff       	call   12ed1 <outb>
   12f65:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12f68:	83 ec 08             	sub    $0x8,%esp
   12f6b:	68 c7 00 00 00       	push   $0xc7
   12f70:	68 fa 03 00 00       	push   $0x3fa
   12f75:	e8 57 ff ff ff       	call   12ed1 <outb>
   12f7a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12f7d:	83 ec 08             	sub    $0x8,%esp
   12f80:	6a 0f                	push   $0xf
   12f82:	68 fc 03 00 00       	push   $0x3fc
   12f87:	e8 45 ff ff ff       	call   12ed1 <outb>
   12f8c:	83 c4 10             	add    $0x10,%esp
}
   12f8f:	90                   	nop
   12f90:	c9                   	leave  
   12f91:	c3                   	ret    

00012f92 <log_printf>:


void log_printf(const char* fmt, ...) {
   12f92:	55                   	push   %ebp
   12f93:	89 e5                	mov    %esp,%ebp
   12f95:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12f9b:	83 ec 04             	sub    $0x4,%esp
   12f9e:	68 80 00 00 00       	push   $0x80
   12fa3:	6a 00                	push   $0x0
   12fa5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12fab:	50                   	push   %eax
   12fac:	e8 72 f9 ff ff       	call   12923 <kmemset>
   12fb1:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12fb4:	8d 45 0c             	lea    0xc(%ebp),%eax
   12fb7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12fbd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12fc3:	83 ec 04             	sub    $0x4,%esp
   12fc6:	50                   	push   %eax
   12fc7:	ff 75 08             	pushl  0x8(%ebp)
   12fca:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12fd0:	50                   	push   %eax
   12fd1:	e8 4f fb ff ff       	call   12b25 <kvsprintf>
   12fd6:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   12fd9:	83 ec 0c             	sub    $0xc,%esp
   12fdc:	68 e0 8e 01 00       	push   $0x18ee0
   12fe1:	e8 a4 f2 ff ff       	call   1228a <mutex_acquire>
   12fe6:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   12fe9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12fef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12ff2:	eb 3b                	jmp    1302f <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12ff4:	90                   	nop
   12ff5:	83 ec 0c             	sub    $0xc,%esp
   12ff8:	68 fd 03 00 00       	push   $0x3fd
   12ffd:	e8 b2 fe ff ff       	call   12eb4 <inb>
   13002:	83 c4 10             	add    $0x10,%esp
   13005:	0f b6 c0             	movzbl %al,%eax
   13008:	83 e0 40             	and    $0x40,%eax
   1300b:	85 c0                	test   %eax,%eax
   1300d:	74 e6                	je     12ff5 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   1300f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13012:	8d 50 01             	lea    0x1(%eax),%edx
   13015:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13018:	0f b6 00             	movzbl (%eax),%eax
   1301b:	0f b6 c0             	movzbl %al,%eax
   1301e:	83 ec 08             	sub    $0x8,%esp
   13021:	50                   	push   %eax
   13022:	68 f8 03 00 00       	push   $0x3f8
   13027:	e8 a5 fe ff ff       	call   12ed1 <outb>
   1302c:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1302f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13032:	0f b6 00             	movzbl (%eax),%eax
   13035:	84 c0                	test   %al,%al
   13037:	75 bb                	jne    12ff4 <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   13039:	83 ec 08             	sub    $0x8,%esp
   1303c:	6a 0d                	push   $0xd
   1303e:	68 f8 03 00 00       	push   $0x3f8
   13043:	e8 89 fe ff ff       	call   12ed1 <outb>
   13048:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1304b:	83 ec 08             	sub    $0x8,%esp
   1304e:	6a 0a                	push   $0xa
   13050:	68 f8 03 00 00       	push   $0x3f8
   13055:	e8 77 fe ff ff       	call   12ed1 <outb>
   1305a:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   1305d:	83 ec 0c             	sub    $0xc,%esp
   13060:	68 e0 8e 01 00       	push   $0x18ee0
   13065:	e8 ae f2 ff ff       	call   12318 <mutex_release>
   1306a:	83 c4 10             	add    $0x10,%esp
   1306d:	90                   	nop
   1306e:	c9                   	leave  
   1306f:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 00 00 00 00       	jmp    80000012 <first_task_main>

80000012 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"

int first_task_main(void) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        log_printf("first task.");
80000018:	83 ec 0c             	sub    $0xc,%esp
8000001b:	68 3a 00 00 80       	push   $0x8000003a
80000020:	e8 6d 2f 01 80       	call   12f92 <log_printf>
80000025:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000028:	83 ec 0c             	sub    $0xc,%esp
8000002b:	68 e8 03 00 00       	push   $0x3e8
80000030:	e8 52 12 01 80       	call   11287 <sys_sleep>
80000035:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000038:	eb de                	jmp    80000018 <first_task_main+0x6>
8000003a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000040:	74 61                	je     800000a3 <first_task_main+0x91>
80000042:	73 6b                	jae    800000af <first_task_main+0x9d>
80000044:	2e                   	cs
	...
