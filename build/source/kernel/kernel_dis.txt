
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003a1c memsz 0x00003a1c flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006f40 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001af40 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030ab  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000970  000130ac  000130ac  000040ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005f40  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000046  80000000  0001af40  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001d38  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046ea  00000000  00000000  00007d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a3  00000000  00000000  0000c468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d710  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000125b  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000eb4b  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000013ec  00000000  00000000  0000eb5c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000130ac l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000027 pte_paddr
0001037e l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
0001038f l     F .text	0000005d addr_alloc_init
000103ec l     F .text	00000067 addr_alloc_page
00010453 l     F .text	00000062 addr_free_page
000104b5 l     F .text	00000066 show_mem_info
0001051b l     F .text	0000003c total_mem_size
00010557 l     F .text	000000a0 test_alloc
00013204 l     O .rodata	00000012 __func__.2213
00014000 l     O .data	00000040 kernel_map.2225
00013218 l     O .rodata	0000000c __func__.2255
00010a57 l     F .text	00000010 curr_page_dir
00013224 l     O .rodata	00000011 __func__.2287
00010b20 l     F .text	0000003a kalloc
00010b5a l     F .text	00000039 kfree
00000000 l    df *ABS*	00000000 task.c
00010b93 l     F .text	00000019 list_node_init
00010bac l     F .text	0000000b list_node_next
00010bb7 l     F .text	0000000b list_size
00010bc2 l     F .text	0000000a list_first
00010bcc l     F .text	0000000c write_cr3
00010bd8 l     F .text	00000007 hlt
00010bdf l     F .text	00000017 write_tr
00010bf6 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000198 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010c07 l     F .text	00000188 tss_init
000132d4 l     O .rodata	0000000a __func__.2251
00010e9e l     F .text	0000000a idle_task_entry
000132e0 l     O .rodata	00000010 __func__.2277
00000000 l    df *ABS*	00000000 cpu.c
00011319 l     F .text	00000028 lgdt
00011341 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
00011577 l     F .text	0000001d inb
00011594 l     F .text	0000001f outb
000115b3 l     F .text	00000007 cli
000115ba l     F .text	00000007 sti
000115c1 l     F .text	00000028 lidt
000115e9 l     F .text	00000011 read_cr2
000115fa l     F .text	00000007 hlt
00011601 l     F .text	00000010 read_eflags
00011611 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
0001161c l     F .text	000000f0 dump_core_regs
0001170c l     F .text	0000003e do_default_handler
00011ae7 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011eeb l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011f32 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011faa l     F .text	0000000b list_size
00011fb5 l     F .text	0000000a list_first
00011fbf l     F .text	0000000b list_last
000139a8 l     O .rodata	0000000c __func__.2201
00018e20 l     O .bss	000000b4 first_task
000139b4 l     O .rodata	00000013 __func__.2234
00000000 l    df *ABS*	00000000 mutex.c
00012279 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00012413 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
0001279c l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012cf9 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012eef l     F .text	0000001d inb
00012f0c l     F .text	0000001f outb
00018ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
00011acb g     F .text	0000001c do_handler_control_protection_exception
00012694 g     F .text	0000003a bitmap_get_bit
000110d2 g     F .text	0000000a task_current
00011782 g     F .text	0000001c do_handler_debug_exception
00011aaf g     F .text	0000001c do_handler_virtualization_exception
00011e8c g     F .text	0000000b irq_enable_global
0001187e g     F .text	0000001c do_handler_segment_not_present
00011030 g     F .text	00000034 task_set_ready
000127ea g     F .text	00000070 kstrncpy
000126ce g     F .text	0000001b bitmap_is_set
0001201e g     F .text	0000019c link_test
0001179e g     F .text	0000001c do_handler_nmi_interrupt
00011492 g     F .text	00000023 cpu_init
00012f2b g     F .text	000000a2 log_init
0001221e g     F .text	0000005b init_main
0001295e g     F .text	00000041 kmemset
0001153e g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
00011d6f g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
0001285a g     F .text	0000003b kstrlen
000117d6 g     F .text	0000001c do_handler_overflow
000106a7 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
000118b6 g     F .text	000000b5 do_handler_general_protection
0001252e g     F .text	00000029 sem_count
80000012 g     F .first_task	00000028 first_task_main
000117f2 g     F .text	0000001c do_handler_bound_range_exceed
000125c0 g     F .text	000000d4 bitmap_set_bit
00011846 g     F .text	0000001c do_handler_double_fault
0001196b g     F .text	000000d4 do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011e97 g     F .text	0000002b pic_send_eoi
00011026 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107fe g     F .text	00000085 memory_create_uvm
00012441 g     F .text	0000006b sem_wait
00010a35 g     F .text	00000022 memory_alloc_page_for
00011f0a g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
00012d2f g     F .text	0000005f list_insert_front
00018f40 g     O .bss	00002000 stack
000112c2 g     F .text	00000057 sys_sleep
00012b60 g     F .text	00000163 kvsprintf
00010a87 g     F .text	00000099 memory_free_page
0001af40 g       *ABS*	00000000 s_first_task
00010967 g     F .text	000000ce memory_alloc_for_page_dir
000124ac g     F .text	00000082 sem_notify
0001180e g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011f92 g     F .text	00000018 timer_init
00010f5b g     F .text	000000cb task_first_init
00011a77 g     F .text	0000001c do_handler_machine_check
0001182a g     F .text	0000001c do_handler_device_not_found
000112a2 g     F .text	00000020 task_set_wakeup
00012d8e g     F .text	00000063 list_insert_back
00011e81 g     F .text	0000000b irq_disable_global
000110dc g     F .text	00000061 sys_sched_yield
0001af86 g       *ABS*	00000000 mem_free_start
00011fca g     F .text	00000054 kernel_init
0001241e g     F .text	00000023 sem_init
00012b3c g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00011064 g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001af40 g       .bss	00000000 e_data
000129fd g     F .text	0000013f kitoa
000127a3 g     F .text	00000047 kstrcpy
00012895 g     F .text	0000007a kstrncmp
00011a5b g     F .text	0000001c do_handler_aligment_check
0001299f g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
00011862 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001af86 g       *ABS*	00000000 e_first_task
00011271 g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
00011d3a g     F .text	00000035 irq_install
00011425 g     F .text	0000006d init_gdt
00011ec2 g     F .text	00000018 irq_enter_protection
00012284 g     F .text	00000041 mutex_init
00011dfa g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
00011766 g     F .text	0000001c do_handler_divide_error
00012557 g     F .text	00000016 bitmap_byte_count
0001113d g     F .text	0000005b task_dispatch
000121ba g     F .text	00000064 move_to_first_task
0001108f g     F .text	00000043 task_next_run
0001072e g     F .text	000000d0 create_kernel_table
00012d0c g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
0001174a g     F .text	0000001c do_handler_unknown
00010a67 g     F .text	00000020 memory_alloc_page
00010e80 g     F .text	0000001e task_switch_from_to
00011b7a g     F .text	000001c0 irq_init
00011eda g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
0001135b g     F .text	00000083 segment_desc_set
00013a1c g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
0001256d g     F .text	00000053 bitmap_init
00011a93 g     F .text	0000001c do_handler_simd_floating_point_exception
0001290f g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
000126e9 g     F .text	000000b3 bitmap_alloc_nbits
00010ea8 g     F .text	000000b3 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00011198 g     F .text	000000d9 task_time_tick
00010883 g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
00012cc3 g     F .text	00000036 pannic
0001189a g     F .text	0000001c do_handler_stack_segment_fault
000117ba g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
00011a3f g     F .text	0000001c do_handler_floating_point_error
00012fcd g     F .text	000000de log_printf
00010d8f g     F .text	000000f1 task_init
00012df1 g     F .text	00000079 list_remove_front
000114c9 g     F .text	00000075 gdt_alloc_desc
00012353 g     F .text	000000c0 mutex_release
00012e6a g     F .text	00000085 list_remove
000114b5 g     F .text	00000014 swtch_to_tss
000113de g     F .text	00000047 gate_desc_set
000122c5 g     F .text	0000008e mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105f7 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 be 1f 00 00       	call   11fca <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 af 01 00       	mov    $0x1af40,%esp
    jmp init_main
   10026:	e9 f3 21 00 00       	jmp    1221e <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 0e 17 00 00       	call   1174a <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 0b 17 00 00       	call   11766 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 08 17 00 00       	call   11782 <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 05 17 00 00       	call   1179e <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 02 17 00 00       	call   117ba <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 ff 16 00 00       	call   117d6 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 fc 16 00 00       	call   117f2 <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 f9 16 00 00       	call   1180e <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 f6 16 00 00       	call   1182a <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 f5 16 00 00       	call   11846 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 f4 16 00 00       	call   11862 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 f3 16 00 00       	call   1187e <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 f0 16 00 00       	call   1189a <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 ef 16 00 00       	call   118b6 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 87 17 00 00       	call   1196b <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 3c 18 00 00       	call   11a3f <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 3b 18 00 00       	call   11a5b <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 38 18 00 00       	call   11a77 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 35 18 00 00       	call   11a93 <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 32 18 00 00       	call   11aaf <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 31 18 00 00       	call   11acb <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 51 1c 00 00       	call   11f0a <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   1035a:	8b 45 08             	mov    0x8(%ebp),%eax
   1035d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10361:	c0 ea 04             	shr    $0x4,%dl
   10364:	0f b6 d2             	movzbl %dl,%edx
   10367:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1036b:	c1 e1 04             	shl    $0x4,%ecx
   1036e:	09 ca                	or     %ecx,%edx
   10370:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10374:	c1 e0 0c             	shl    $0xc,%eax
   10377:	09 d0                	or     %edx,%eax
   10379:	c1 e0 0c             	shl    $0xc,%eax
}
   1037c:	5d                   	pop    %ebp
   1037d:	c3                   	ret    

0001037e <mmu_set_page_dir>:

static inline void mmu_set_page_dir(uint32_t paddr) {
   1037e:	55                   	push   %ebp
   1037f:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10381:	ff 75 08             	pushl  0x8(%ebp)
   10384:	e8 77 ff ff ff       	call   10300 <write_cr3>
   10389:	83 c4 04             	add    $0x4,%esp
}
   1038c:	90                   	nop
   1038d:	c9                   	leave  
   1038e:	c3                   	ret    

0001038f <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   1038f:	55                   	push   %ebp
   10390:	89 e5                	mov    %esp,%ebp
   10392:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   10395:	8b 45 08             	mov    0x8(%ebp),%eax
   10398:	83 ec 08             	sub    $0x8,%esp
   1039b:	68 ac 30 01 00       	push   $0x130ac
   103a0:	50                   	push   %eax
   103a1:	e8 de 1e 00 00       	call   12284 <mutex_init>
   103a6:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	8b 55 10             	mov    0x10(%ebp),%edx
   103af:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   103b2:	8b 45 08             	mov    0x8(%ebp),%eax
   103b5:	8b 55 14             	mov    0x14(%ebp),%edx
   103b8:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	8b 55 18             	mov    0x18(%ebp),%edx
   103c1:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103c4:	8b 45 08             	mov    0x8(%ebp),%eax
   103c7:	8b 40 60             	mov    0x60(%eax),%eax
   103ca:	ba 00 00 00 00       	mov    $0x0,%edx
   103cf:	f7 75 18             	divl   0x18(%ebp)
   103d2:	89 c2                	mov    %eax,%edx
   103d4:	8b 45 08             	mov    0x8(%ebp),%eax
   103d7:	83 c0 54             	add    $0x54,%eax
   103da:	6a 00                	push   $0x0
   103dc:	52                   	push   %edx
   103dd:	ff 75 0c             	pushl  0xc(%ebp)
   103e0:	50                   	push   %eax
   103e1:	e8 87 21 00 00       	call   1256d <bitmap_init>
   103e6:	83 c4 10             	add    $0x10,%esp
}
   103e9:	90                   	nop
   103ea:	c9                   	leave  
   103eb:	c3                   	ret    

000103ec <addr_alloc_page>:
// 内存分配器：以页为单位，申请物理内存。
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
// 返回值：物理内存地址
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103ec:	55                   	push   %ebp
   103ed:	89 e5                	mov    %esp,%ebp
   103ef:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103f9:	8b 45 08             	mov    0x8(%ebp),%eax
   103fc:	83 ec 0c             	sub    $0xc,%esp
   103ff:	50                   	push   %eax
   10400:	e8 c0 1e 00 00       	call   122c5 <mutex_acquire>
   10405:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10408:	8b 45 08             	mov    0x8(%ebp),%eax
   1040b:	83 c0 54             	add    $0x54,%eax
   1040e:	83 ec 04             	sub    $0x4,%esp
   10411:	ff 75 0c             	pushl  0xc(%ebp)
   10414:	6a 00                	push   $0x0
   10416:	50                   	push   %eax
   10417:	e8 cd 22 00 00       	call   126e9 <bitmap_alloc_nbits>
   1041c:	83 c4 10             	add    $0x10,%esp
   1041f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10422:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10426:	78 17                	js     1043f <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 50 5c             	mov    0x5c(%eax),%edx
   1042e:	8b 45 08             	mov    0x8(%ebp),%eax
   10431:	8b 48 64             	mov    0x64(%eax),%ecx
   10434:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10437:	0f af c1             	imul   %ecx,%eax
   1043a:	01 d0                	add    %edx,%eax
   1043c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   1043f:	8b 45 08             	mov    0x8(%ebp),%eax
   10442:	83 ec 0c             	sub    $0xc,%esp
   10445:	50                   	push   %eax
   10446:	e8 08 1f 00 00       	call   12353 <mutex_release>
   1044b:	83 c4 10             	add    $0x10,%esp

    return addr;
   1044e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10451:	c9                   	leave  
   10452:	c3                   	ret    

00010453 <addr_free_page>:

// 内存分配器：以页为单位，释放物理内存。
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
// 显然，这里面会操控bitmap，撤销内存标记
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   10453:	55                   	push   %ebp
   10454:	89 e5                	mov    %esp,%ebp
   10456:	53                   	push   %ebx
   10457:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	83 ec 0c             	sub    $0xc,%esp
   10460:	50                   	push   %eax
   10461:	e8 5f 1e 00 00       	call   122c5 <mutex_acquire>
   10466:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10469:	8b 45 08             	mov    0x8(%ebp),%eax
   1046c:	8b 40 5c             	mov    0x5c(%eax),%eax
   1046f:	8b 55 0c             	mov    0xc(%ebp),%edx
   10472:	89 d1                	mov    %edx,%ecx
   10474:	29 c1                	sub    %eax,%ecx
   10476:	8b 45 08             	mov    0x8(%ebp),%eax
   10479:	8b 58 64             	mov    0x64(%eax),%ebx
   1047c:	89 c8                	mov    %ecx,%eax
   1047e:	ba 00 00 00 00       	mov    $0x0,%edx
   10483:	f7 f3                	div    %ebx
   10485:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10488:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048b:	8b 55 08             	mov    0x8(%ebp),%edx
   1048e:	83 c2 54             	add    $0x54,%edx
   10491:	6a 00                	push   $0x0
   10493:	ff 75 10             	pushl  0x10(%ebp)
   10496:	50                   	push   %eax
   10497:	52                   	push   %edx
   10498:	e8 23 21 00 00       	call   125c0 <bitmap_set_bit>
   1049d:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   104a0:	8b 45 08             	mov    0x8(%ebp),%eax
   104a3:	83 ec 0c             	sub    $0xc,%esp
   104a6:	50                   	push   %eax
   104a7:	e8 a7 1e 00 00       	call   12353 <mutex_release>
   104ac:	83 c4 10             	add    $0x10,%esp
}
   104af:	90                   	nop
   104b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104b3:	c9                   	leave  
   104b4:	c3                   	ret    

000104b5 <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   104b5:	55                   	push   %ebp
   104b6:	89 e5                	mov    %esp,%ebp
   104b8:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104bb:	83 ec 0c             	sub    $0xc,%esp
   104be:	68 b9 30 01 00       	push   $0x130b9
   104c3:	e8 05 2b 00 00       	call   12fcd <log_printf>
   104c8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104d2:	eb 29                	jmp    104fd <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104d4:	8b 45 08             	mov    0x8(%ebp),%eax
   104d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104da:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104e4:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104e7:	52                   	push   %edx
   104e8:	50                   	push   %eax
   104e9:	ff 75 f4             	pushl  -0xc(%ebp)
   104ec:	68 c5 30 01 00       	push   $0x130c5
   104f1:	e8 d7 2a 00 00       	call   12fcd <log_printf>
   104f6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10500:	8b 40 50             	mov    0x50(%eax),%eax
   10503:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10506:	7c cc                	jl     104d4 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10508:	83 ec 0c             	sub    $0xc,%esp
   1050b:	68 d3 30 01 00       	push   $0x130d3
   10510:	e8 b8 2a 00 00       	call   12fcd <log_printf>
   10515:	83 c4 10             	add    $0x10,%esp
}
   10518:	90                   	nop
   10519:	c9                   	leave  
   1051a:	c3                   	ret    

0001051b <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   1051b:	55                   	push   %ebp
   1051c:	89 e5                	mov    %esp,%ebp
   1051e:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10521:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10528:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1052f:	eb 16                	jmp    10547 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10537:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1053b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1053e:	01 d0                	add    %edx,%eax
   10540:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10543:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10547:	8b 45 08             	mov    0x8(%ebp),%eax
   1054a:	8b 40 50             	mov    0x50(%eax),%eax
   1054d:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10550:	7c df                	jl     10531 <total_mem_size+0x16>
    }
    return mem_size;
   10552:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10555:	c9                   	leave  
   10556:	c3                   	ret    

00010557 <test_alloc>:


static void test_alloc(void) {
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
   1055a:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10560:	83 ec 0c             	sub    $0xc,%esp
   10563:	68 00 10 00 00       	push   $0x1000
   10568:	68 00 00 04 00       	push   $0x40000
   1056d:	68 00 10 00 00       	push   $0x1000
   10572:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10578:	50                   	push   %eax
   10579:	8d 45 80             	lea    -0x80(%ebp),%eax
   1057c:	50                   	push   %eax
   1057d:	e8 0d fe ff ff       	call   1038f <addr_alloc_init>
   10582:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   10585:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1058c:	eb 2b                	jmp    105b9 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   1058e:	83 ec 08             	sub    $0x8,%esp
   10591:	6a 02                	push   $0x2
   10593:	8d 45 80             	lea    -0x80(%ebp),%eax
   10596:	50                   	push   %eax
   10597:	e8 50 fe ff ff       	call   103ec <addr_alloc_page>
   1059c:	83 c4 10             	add    $0x10,%esp
   1059f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   105a2:	83 ec 08             	sub    $0x8,%esp
   105a5:	ff 75 e8             	pushl  -0x18(%ebp)
   105a8:	68 d5 30 01 00       	push   $0x130d5
   105ad:	e8 1b 2a 00 00       	call   12fcd <log_printf>
   105b2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105b5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105b9:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   105bd:	7e cf                	jle    1058e <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   105bf:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   105c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105cd:	eb 1f                	jmp    105ee <test_alloc+0x97>
        addr += 4096 * 2;
   105cf:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105d6:	83 ec 04             	sub    $0x4,%esp
   105d9:	6a 02                	push   $0x2
   105db:	ff 75 f0             	pushl  -0x10(%ebp)
   105de:	8d 45 80             	lea    -0x80(%ebp),%eax
   105e1:	50                   	push   %eax
   105e2:	e8 6c fe ff ff       	call   10453 <addr_free_page>
   105e7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105ea:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105ee:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105f2:	7e db                	jle    105cf <test_alloc+0x78>
    }
}
   105f4:	90                   	nop
   105f5:	c9                   	leave  
   105f6:	c3                   	ret    

000105f7 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105f7:	55                   	push   %ebp
   105f8:	89 e5                	mov    %esp,%ebp
   105fa:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105fd:	ff 75 0c             	pushl  0xc(%ebp)
   10600:	e8 07 fd ff ff       	call   1030c <pde_index>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1060f:	8b 45 08             	mov    0x8(%ebp),%eax
   10612:	01 d0                	add    %edx,%eax
   10614:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   10617:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061a:	0f b6 00             	movzbl (%eax),%eax
   1061d:	83 e0 01             	and    $0x1,%eax
   10620:	84 c0                	test   %al,%al
   10622:	74 10                	je     10634 <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   10624:	ff 75 f0             	pushl  -0x10(%ebp)
   10627:	e8 f4 fc ff ff       	call   10320 <pde_paddr>
   1062c:	83 c4 04             	add    $0x4,%esp
   1062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10632:	eb 57                	jmp    1068b <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   10634:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10638:	75 07                	jne    10641 <find_pte+0x4a>
            return (pte_t*)0;
   1063a:	b8 00 00 00 00       	mov    $0x0,%eax
   1063f:	eb 64                	jmp    106a5 <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10641:	83 ec 08             	sub    $0x8,%esp
   10644:	6a 01                	push   $0x1
   10646:	68 00 50 01 00       	push   $0x15000
   1064b:	e8 9c fd ff ff       	call   103ec <addr_alloc_page>
   10650:	83 c4 10             	add    $0x10,%esp
   10653:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   10656:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1065a:	75 07                	jne    10663 <find_pte+0x6c>
            return (pte_t*)0;
   1065c:	b8 00 00 00 00       	mov    $0x0,%eax
   10661:	eb 42                	jmp    106a5 <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   10663:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10666:	83 c8 07             	or     $0x7,%eax
   10669:	89 c2                	mov    %eax,%edx
   1066b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1066e:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10670:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10673:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   10676:	83 ec 04             	sub    $0x4,%esp
   10679:	68 00 10 00 00       	push   $0x1000
   1067e:	6a 00                	push   $0x0
   10680:	ff 75 f4             	pushl  -0xc(%ebp)
   10683:	e8 d6 22 00 00       	call   1295e <kmemset>
   10688:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   1068b:	83 ec 0c             	sub    $0xc,%esp
   1068e:	ff 75 0c             	pushl  0xc(%ebp)
   10691:	e8 b1 fc ff ff       	call   10347 <pte_index>
   10696:	83 c4 10             	add    $0x10,%esp
   10699:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   106a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a3:	01 d0                	add    %edx,%eax
}
   106a5:	c9                   	leave  
   106a6:	c3                   	ret    

000106a7 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   106a7:	55                   	push   %ebp
   106a8:	89 e5                	mov    %esp,%ebp
   106aa:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   106ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106b4:	eb 6e                	jmp    10724 <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   106b6:	83 ec 04             	sub    $0x4,%esp
   106b9:	6a 01                	push   $0x1
   106bb:	ff 75 0c             	pushl  0xc(%ebp)
   106be:	ff 75 08             	pushl  0x8(%ebp)
   106c1:	e8 31 ff ff ff       	call   105f7 <find_pte>
   106c6:	83 c4 10             	add    $0x10,%esp
   106c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106d0:	75 07                	jne    106d9 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106d7:	eb 53                	jmp    1072c <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106dc:	0f b6 00             	movzbl (%eax),%eax
   106df:	83 e0 01             	and    $0x1,%eax
   106e2:	84 c0                	test   %al,%al
   106e4:	74 1c                	je     10702 <memory_create_map+0x5b>
   106e6:	68 e5 30 01 00       	push   $0x130e5
   106eb:	68 04 32 01 00       	push   $0x13204
   106f0:	68 a3 00 00 00       	push   $0xa3
   106f5:	68 f8 30 01 00       	push   $0x130f8
   106fa:	e8 c4 25 00 00       	call   12cc3 <pannic>
   106ff:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   10702:	8b 45 10             	mov    0x10(%ebp),%eax
   10705:	0b 45 18             	or     0x18(%ebp),%eax
   10708:	83 c8 01             	or     $0x1,%eax
   1070b:	89 c2                	mov    %eax,%edx
   1070d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10710:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   10712:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10719:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   10720:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10724:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10727:	3b 45 14             	cmp    0x14(%ebp),%eax
   1072a:	7c 8a                	jl     106b6 <memory_create_map+0xf>
    }
}
   1072c:	c9                   	leave  
   1072d:	c3                   	ret    

0001072e <create_kernel_table>:


void create_kernel_table(void) {
   1072e:	55                   	push   %ebp
   1072f:	89 e5                	mov    %esp,%ebp
   10731:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   10734:	83 ec 04             	sub    $0x4,%esp
   10737:	68 00 10 00 00       	push   $0x1000
   1073c:	6a 00                	push   $0x0
   1073e:	68 00 60 01 00       	push   $0x16000
   10743:	e8 16 22 00 00       	call   1295e <kmemset>
   10748:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1074b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10752:	e9 98 00 00 00       	jmp    107ef <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10757:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1075a:	c1 e0 04             	shl    $0x4,%eax
   1075d:	05 00 40 01 00       	add    $0x14000,%eax
   10762:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10765:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10768:	8b 00                	mov    (%eax),%eax
   1076a:	83 ec 08             	sub    $0x8,%esp
   1076d:	68 00 10 00 00       	push   $0x1000
   10772:	50                   	push   %eax
   10773:	e8 7b fb ff ff       	call   102f3 <down2>
   10778:	83 c4 10             	add    $0x10,%esp
   1077b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 40 04             	mov    0x4(%eax),%eax
   10784:	83 ec 08             	sub    $0x8,%esp
   10787:	68 00 10 00 00       	push   $0x1000
   1078c:	50                   	push   %eax
   1078d:	e8 4a fb ff ff       	call   102dc <up2>
   10792:	83 c4 10             	add    $0x10,%esp
   10795:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10798:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079b:	8b 40 08             	mov    0x8(%eax),%eax
   1079e:	83 ec 08             	sub    $0x8,%esp
   107a1:	68 00 10 00 00       	push   $0x1000
   107a6:	50                   	push   %eax
   107a7:	e8 47 fb ff ff       	call   102f3 <down2>
   107ac:	83 c4 10             	add    $0x10,%esp
   107af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   107b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107b5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   107b8:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   107be:	85 c0                	test   %eax,%eax
   107c0:	0f 48 c2             	cmovs  %edx,%eax
   107c3:	c1 f8 0c             	sar    $0xc,%eax
   107c6:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107cc:	8b 48 0c             	mov    0xc(%eax),%ecx
   107cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107d5:	83 ec 0c             	sub    $0xc,%esp
   107d8:	51                   	push   %ecx
   107d9:	ff 75 e0             	pushl  -0x20(%ebp)
   107dc:	52                   	push   %edx
   107dd:	50                   	push   %eax
   107de:	68 00 60 01 00       	push   $0x16000
   107e3:	e8 bf fe ff ff       	call   106a7 <memory_create_map>
   107e8:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f2:	83 f8 03             	cmp    $0x3,%eax
   107f5:	0f 86 5c ff ff ff    	jbe    10757 <create_kernel_table+0x29>
    }
}
   107fb:	90                   	nop
   107fc:	c9                   	leave  
   107fd:	c3                   	ret    

000107fe <memory_create_uvm>:

// 创建用户页表
uint32_t memory_create_uvm(void) {
   107fe:	55                   	push   %ebp
   107ff:	89 e5                	mov    %esp,%ebp
   10801:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   10804:	83 ec 08             	sub    $0x8,%esp
   10807:	6a 01                	push   $0x1
   10809:	68 00 50 01 00       	push   $0x15000
   1080e:	e8 d9 fb ff ff       	call   103ec <addr_alloc_page>
   10813:	83 c4 10             	add    $0x10,%esp
   10816:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   10819:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1081d:	75 07                	jne    10826 <memory_create_uvm+0x28>
        return 0;
   1081f:	b8 00 00 00 00       	mov    $0x0,%eax
   10824:	eb 5b                	jmp    10881 <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   10826:	83 ec 04             	sub    $0x4,%esp
   10829:	68 00 10 00 00       	push   $0x1000
   1082e:	6a 00                	push   $0x0
   10830:	ff 75 f0             	pushl  -0x10(%ebp)
   10833:	e8 26 21 00 00       	call   1295e <kmemset>
   10838:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083b:	83 ec 0c             	sub    $0xc,%esp
   1083e:	68 00 00 00 80       	push   $0x80000000
   10843:	e8 c4 fa ff ff       	call   1030c <pde_index>
   10848:	83 c4 10             	add    $0x10,%esp
   1084b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   1084e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10855:	eb 1f                	jmp    10876 <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10857:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1085a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10861:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10864:	01 c2                	add    %eax,%edx
   10866:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10869:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10870:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10872:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10876:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10879:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1087c:	77 d9                	ja     10857 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   1087e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10881:	c9                   	leave  
   10882:	c3                   	ret    

00010883 <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   10883:	55                   	push   %ebp
   10884:	89 e5                	mov    %esp,%ebp
   10886:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10889:	83 ec 0c             	sub    $0xc,%esp
   1088c:	68 3f 31 01 00       	push   $0x1313f
   10891:	e8 37 27 00 00       	call   12fcd <log_printf>
   10896:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10899:	83 ec 0c             	sub    $0xc,%esp
   1089c:	ff 75 08             	pushl  0x8(%ebp)
   1089f:	e8 11 fc ff ff       	call   104b5 <show_mem_info>
   108a4:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   108a7:	c7 45 f4 86 af 01 00 	movl   $0x1af86,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108ae:	83 ec 0c             	sub    $0xc,%esp
   108b1:	ff 75 08             	pushl  0x8(%ebp)
   108b4:	e8 62 fc ff ff       	call   1051b <total_mem_size>
   108b9:	83 c4 10             	add    $0x10,%esp
   108bc:	2d 00 00 10 00       	sub    $0x100000,%eax
   108c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   108c4:	83 ec 08             	sub    $0x8,%esp
   108c7:	68 00 10 00 00       	push   $0x1000
   108cc:	ff 75 f0             	pushl  -0x10(%ebp)
   108cf:	e8 1f fa ff ff       	call   102f3 <down2>
   108d4:	83 c4 10             	add    $0x10,%esp
   108d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108da:	83 ec 04             	sub    $0x4,%esp
   108dd:	ff 75 f0             	pushl  -0x10(%ebp)
   108e0:	68 00 00 10 00       	push   $0x100000
   108e5:	68 49 31 01 00       	push   $0x13149
   108ea:	e8 de 26 00 00       	call   12fcd <log_printf>
   108ef:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108f2:	83 ec 0c             	sub    $0xc,%esp
   108f5:	68 00 10 00 00       	push   $0x1000
   108fa:	ff 75 f0             	pushl  -0x10(%ebp)
   108fd:	68 00 00 10 00       	push   $0x100000
   10902:	ff 75 f4             	pushl  -0xc(%ebp)
   10905:	68 00 50 01 00       	push   $0x15000
   1090a:	e8 80 fa ff ff       	call   1038f <addr_alloc_init>
   1090f:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10912:	a1 60 50 01 00       	mov    0x15060,%eax
   10917:	c1 e8 0c             	shr    $0xc,%eax
   1091a:	83 ec 0c             	sub    $0xc,%esp
   1091d:	50                   	push   %eax
   1091e:	e8 34 1c 00 00       	call   12557 <bitmap_byte_count>
   10923:	83 c4 10             	add    $0x10,%esp
   10926:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10929:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10930:	76 1c                	jbe    1094e <memory_init+0xcb>
   10932:	68 64 31 01 00       	push   $0x13164
   10937:	68 18 32 01 00       	push   $0x13218
   1093c:	68 fb 00 00 00       	push   $0xfb
   10941:	68 f8 30 01 00       	push   $0x130f8
   10946:	e8 78 23 00 00       	call   12cc3 <pannic>
   1094b:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   1094e:	e8 db fd ff ff       	call   1072e <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10953:	b8 00 60 01 00       	mov    $0x16000,%eax
   10958:	83 ec 0c             	sub    $0xc,%esp
   1095b:	50                   	push   %eax
   1095c:	e8 1d fa ff ff       	call   1037e <mmu_set_page_dir>
   10961:	83 c4 10             	add    $0x10,%esp
}
   10964:	90                   	nop
   10965:	c9                   	leave  
   10966:	c3                   	ret    

00010967 <memory_alloc_for_page_dir>:
// 给指定的页表，建立内存映射
// uin32_t page_dir: 页表
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10967:	55                   	push   %ebp
   10968:	89 e5                	mov    %esp,%ebp
   1096a:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   1096d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10970:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10973:	68 00 10 00 00       	push   $0x1000
   10978:	ff 75 10             	pushl  0x10(%ebp)
   1097b:	e8 5c f9 ff ff       	call   102dc <up2>
   10980:	83 c4 08             	add    $0x8,%esp
   10983:	c1 e8 0c             	shr    $0xc,%eax
   10986:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   10989:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10990:	e9 8d 00 00 00       	jmp    10a22 <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10995:	83 ec 08             	sub    $0x8,%esp
   10998:	6a 01                	push   $0x1
   1099a:	68 00 50 01 00       	push   $0x15000
   1099f:	e8 48 fa ff ff       	call   103ec <addr_alloc_page>
   109a4:	83 c4 10             	add    $0x10,%esp
   109a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   109aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109ae:	75 17                	jne    109c7 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   109b0:	83 ec 0c             	sub    $0xc,%esp
   109b3:	68 8c 31 01 00       	push   $0x1318c
   109b8:	e8 10 26 00 00       	call   12fcd <log_printf>
   109bd:	83 c4 10             	add    $0x10,%esp
            return 0;
   109c0:	b8 00 00 00 00       	mov    $0x0,%eax
   109c5:	eb 6c                	jmp    10a33 <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109c7:	8b 45 08             	mov    0x8(%ebp),%eax
   109ca:	83 ec 0c             	sub    $0xc,%esp
   109cd:	ff 75 14             	pushl  0x14(%ebp)
   109d0:	6a 01                	push   $0x1
   109d2:	ff 75 e8             	pushl  -0x18(%ebp)
   109d5:	ff 75 f4             	pushl  -0xc(%ebp)
   109d8:	50                   	push   %eax
   109d9:	e8 c9 fc ff ff       	call   106a7 <memory_create_map>
   109de:	83 c4 20             	add    $0x20,%esp
   109e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   109e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   109e8:	79 2d                	jns    10a17 <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   109ea:	83 ec 0c             	sub    $0xc,%esp
   109ed:	68 ac 31 01 00       	push   $0x131ac
   109f2:	e8 d6 25 00 00       	call   12fcd <log_printf>
   109f7:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   109fa:	83 ec 04             	sub    $0x4,%esp
   109fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10a00:	ff 75 0c             	pushl  0xc(%ebp)
   10a03:	68 00 50 01 00       	push   $0x15000
   10a08:	e8 46 fa ff ff       	call   10453 <addr_free_page>
   10a0d:	83 c4 10             	add    $0x10,%esp

            return 0;
   10a10:	b8 00 00 00 00       	mov    $0x0,%eax
   10a15:	eb 1c                	jmp    10a33 <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a17:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10a1e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a25:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a28:	0f 8c 67 ff ff ff    	jl     10995 <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a33:	c9                   	leave  
   10a34:	c3                   	ret    

00010a35 <memory_alloc_page_for>:

// 给当前进程的页表，建立映射. 通常返回0x80000000以上的地址
// uin32_t vaddr:    虚拟内存
// uin32_t size:     内存大小数值，不是页数
// uin32_t perm:     权限
int memory_alloc_page_for(uint32_t vaddr, uint32_t size, uint32_t perm) {
   10a35:	55                   	push   %ebp
   10a36:	89 e5                	mov    %esp,%ebp
   10a38:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, vaddr, size, perm);
   10a3b:	e8 92 06 00 00       	call   110d2 <task_current>
   10a40:	8b 40 64             	mov    0x64(%eax),%eax
   10a43:	ff 75 10             	pushl  0x10(%ebp)
   10a46:	ff 75 0c             	pushl  0xc(%ebp)
   10a49:	ff 75 08             	pushl  0x8(%ebp)
   10a4c:	50                   	push   %eax
   10a4d:	e8 15 ff ff ff       	call   10967 <memory_alloc_for_page_dir>
   10a52:	83 c4 10             	add    $0x10,%esp
}
   10a55:	c9                   	leave  
   10a56:	c3                   	ret    

00010a57 <curr_page_dir>:


static pde_t* curr_page_dir(void) {
   10a57:	55                   	push   %ebp
   10a58:	89 e5                	mov    %esp,%ebp
   10a5a:	83 ec 08             	sub    $0x8,%esp
    return (pde_t*)(task_current()->tss.cr3);
   10a5d:	e8 70 06 00 00       	call   110d2 <task_current>
   10a62:	8b 40 64             	mov    0x64(%eax),%eax
}
   10a65:	c9                   	leave  
   10a66:	c3                   	ret    

00010a67 <memory_alloc_page>:


// 以页为单位，分配物理内存（也就是说分配一页大小为PGSIZE的物理内存）. 
// 通常返回0x80000000以下的内核内存
uint32_t memory_alloc_page(void) {
   10a67:	55                   	push   %ebp
   10a68:	89 e5                	mov    %esp,%ebp
   10a6a:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&paddr_alloc, 1);
   10a6d:	83 ec 08             	sub    $0x8,%esp
   10a70:	6a 01                	push   $0x1
   10a72:	68 00 50 01 00       	push   $0x15000
   10a77:	e8 70 f9 ff ff       	call   103ec <addr_alloc_page>
   10a7c:	83 c4 10             	add    $0x10,%esp
   10a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10a85:	c9                   	leave  
   10a86:	c3                   	ret    

00010a87 <memory_free_page>:


// 以页为单位，销毁大小为PGSIZE的物理内存
void memory_free_page(uint32_t vaddr) {
   10a87:	55                   	push   %ebp
   10a88:	89 e5                	mov    %esp,%ebp
   10a8a:	83 ec 18             	sub    $0x18,%esp
    if (vaddr < MEMORY_TASK_BASE) {  // 这是内核内存，在0x80000000以下。
   10a8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a90:	85 c0                	test   %eax,%eax
   10a92:	78 17                	js     10aab <memory_free_page+0x24>
        // 已经在内核页表建立好了映射，只需让系统知道这块内存
        // 将会变为可用 即可。即，把bitmap设置为0
        addr_free_page(&paddr_alloc, vaddr, 1);
   10a94:	83 ec 04             	sub    $0x4,%esp
   10a97:	6a 01                	push   $0x1
   10a99:	ff 75 08             	pushl  0x8(%ebp)
   10a9c:	68 00 50 01 00       	push   $0x15000
   10aa1:	e8 ad f9 ff ff       	call   10453 <addr_free_page>
   10aa6:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
    
}
   10aa9:	eb 72                	jmp    10b1d <memory_free_page+0x96>
        pte_t* pte = find_pte(curr_page_dir(), vaddr, 0);
   10aab:	e8 a7 ff ff ff       	call   10a57 <curr_page_dir>
   10ab0:	83 ec 04             	sub    $0x4,%esp
   10ab3:	6a 00                	push   $0x0
   10ab5:	ff 75 08             	pushl  0x8(%ebp)
   10ab8:	50                   	push   %eax
   10ab9:	e8 39 fb ff ff       	call   105f7 <find_pte>
   10abe:	83 c4 10             	add    $0x10,%esp
   10ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT(pte == (pte_t*)0 && pte->present);
   10ac4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ac8:	75 0d                	jne    10ad7 <memory_free_page+0x50>
   10aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10acd:	0f b6 00             	movzbl (%eax),%eax
   10ad0:	83 e0 01             	and    $0x1,%eax
   10ad3:	84 c0                	test   %al,%al
   10ad5:	75 1c                	jne    10af3 <memory_free_page+0x6c>
   10ad7:	68 e0 31 01 00       	push   $0x131e0
   10adc:	68 24 32 01 00       	push   $0x13224
   10ae1:	68 43 01 00 00       	push   $0x143
   10ae6:	68 f8 30 01 00       	push   $0x130f8
   10aeb:	e8 d3 21 00 00       	call   12cc3 <pannic>
   10af0:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10af3:	83 ec 0c             	sub    $0xc,%esp
   10af6:	ff 75 f4             	pushl  -0xc(%ebp)
   10af9:	e8 59 f8 ff ff       	call   10357 <pte_paddr>
   10afe:	83 c4 10             	add    $0x10,%esp
   10b01:	83 ec 04             	sub    $0x4,%esp
   10b04:	6a 01                	push   $0x1
   10b06:	50                   	push   %eax
   10b07:	68 00 50 01 00       	push   $0x15000
   10b0c:	e8 42 f9 ff ff       	call   10453 <addr_free_page>
   10b11:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10b1d:	90                   	nop
   10b1e:	c9                   	leave  
   10b1f:	c3                   	ret    

00010b20 <kalloc>:

/*-- ------------------------------ --*/
// 申请物理内存。单位：字节
static uint32_t kalloc(int size) {
   10b20:	55                   	push   %ebp
   10b21:	89 e5                	mov    %esp,%ebp
   10b23:	83 ec 08             	sub    $0x8,%esp
    if (size <= 0) {
   10b26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b2a:	7f 07                	jg     10b33 <kalloc+0x13>
        return -1;
   10b2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b31:	eb 25                	jmp    10b58 <kalloc+0x38>
    }

    return addr_alloc_page(&paddr_alloc, up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE);
   10b33:	8b 45 08             	mov    0x8(%ebp),%eax
   10b36:	68 00 10 00 00       	push   $0x1000
   10b3b:	50                   	push   %eax
   10b3c:	e8 9b f7 ff ff       	call   102dc <up2>
   10b41:	83 c4 08             	add    $0x8,%esp
   10b44:	c1 e8 0c             	shr    $0xc,%eax
   10b47:	83 ec 08             	sub    $0x8,%esp
   10b4a:	50                   	push   %eax
   10b4b:	68 00 50 01 00       	push   $0x15000
   10b50:	e8 97 f8 ff ff       	call   103ec <addr_alloc_page>
   10b55:	83 c4 10             	add    $0x10,%esp
}
   10b58:	c9                   	leave  
   10b59:	c3                   	ret    

00010b5a <kfree>:


// 释放物理内存。单位：字节
static void kfree(uint32_t addr, int size) {
   10b5a:	55                   	push   %ebp
   10b5b:	89 e5                	mov    %esp,%ebp
   10b5d:	83 ec 08             	sub    $0x8,%esp
    if (size <= 0) {
   10b60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10b64:	7e 2a                	jle    10b90 <kfree+0x36>
        return;
    }

    addr_free_page(&paddr_alloc, addr, up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE);
   10b66:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b69:	68 00 10 00 00       	push   $0x1000
   10b6e:	50                   	push   %eax
   10b6f:	e8 68 f7 ff ff       	call   102dc <up2>
   10b74:	83 c4 08             	add    $0x8,%esp
   10b77:	c1 e8 0c             	shr    $0xc,%eax
   10b7a:	83 ec 04             	sub    $0x4,%esp
   10b7d:	50                   	push   %eax
   10b7e:	ff 75 08             	pushl  0x8(%ebp)
   10b81:	68 00 50 01 00       	push   $0x15000
   10b86:	e8 c8 f8 ff ff       	call   10453 <addr_free_page>
   10b8b:	83 c4 10             	add    $0x10,%esp
   10b8e:	eb 01                	jmp    10b91 <kfree+0x37>
        return;
   10b90:	90                   	nop
}
   10b91:	c9                   	leave  
   10b92:	c3                   	ret    

00010b93 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10b93:	55                   	push   %ebp
   10b94:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10b96:	8b 45 08             	mov    0x8(%ebp),%eax
   10b99:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10ba9:	90                   	nop
   10baa:	5d                   	pop    %ebp
   10bab:	c3                   	ret    

00010bac <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10bac:	55                   	push   %ebp
   10bad:	89 e5                	mov    %esp,%ebp
    return node->next;
   10baf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb2:	8b 40 04             	mov    0x4(%eax),%eax
}
   10bb5:	5d                   	pop    %ebp
   10bb6:	c3                   	ret    

00010bb7 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10bb7:	55                   	push   %ebp
   10bb8:	89 e5                	mov    %esp,%ebp
    return list->count;
   10bba:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbd:	8b 40 08             	mov    0x8(%eax),%eax
}
   10bc0:	5d                   	pop    %ebp
   10bc1:	c3                   	ret    

00010bc2 <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10bc2:	55                   	push   %ebp
   10bc3:	89 e5                	mov    %esp,%ebp
    return list->first;
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	8b 00                	mov    (%eax),%eax
}
   10bca:	5d                   	pop    %ebp
   10bcb:	c3                   	ret    

00010bcc <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10bcc:	55                   	push   %ebp
   10bcd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd2:	0f 22 d8             	mov    %eax,%cr3
}
   10bd5:	90                   	nop
   10bd6:	5d                   	pop    %ebp
   10bd7:	c3                   	ret    

00010bd8 <hlt>:
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
}


// hlt halt
static inline void hlt(void) {
   10bd8:	55                   	push   %ebp
   10bd9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10bdb:	f4                   	hlt    
}
   10bdc:	90                   	nop
   10bdd:	5d                   	pop    %ebp
   10bde:	c3                   	ret    

00010bdf <write_tr>:


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10bdf:	55                   	push   %ebp
   10be0:	89 e5                	mov    %esp,%ebp
   10be2:	83 ec 04             	sub    $0x4,%esp
   10be5:	8b 45 08             	mov    0x8(%ebp),%eax
   10be8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10bec:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10bf0:	0f 00 d8             	ltr    %ax
}
   10bf3:	90                   	nop
   10bf4:	c9                   	leave  
   10bf5:	c3                   	ret    

00010bf6 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10bf6:	55                   	push   %ebp
   10bf7:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10bf9:	ff 75 08             	pushl  0x8(%ebp)
   10bfc:	e8 cb ff ff ff       	call   10bcc <write_cr3>
   10c01:	83 c4 04             	add    $0x4,%esp
}
   10c04:	90                   	nop
   10c05:	c9                   	leave  
   10c06:	c3                   	ret    

00010c07 <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   10c07:	55                   	push   %ebp
   10c08:	89 e5                	mov    %esp,%ebp
   10c0a:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10c0d:	e8 b7 08 00 00       	call   114c9 <gdt_alloc_desc>
   10c12:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   10c15:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10c19:	79 1a                	jns    10c35 <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10c1b:	83 ec 0c             	sub    $0xc,%esp
   10c1e:	68 38 32 01 00       	push   $0x13238
   10c23:	e8 a5 23 00 00       	call   12fcd <log_printf>
   10c28:	83 c4 10             	add    $0x10,%esp
        return -1;
   10c2b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c30:	e9 58 01 00 00       	jmp    10d8d <tss_init+0x186>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10c35:	8b 45 08             	mov    0x8(%ebp),%eax
   10c38:	83 c0 48             	add    $0x48,%eax
   10c3b:	68 89 00 00 00       	push   $0x89
   10c40:	6a 68                	push   $0x68
   10c42:	50                   	push   %eax
   10c43:	ff 75 ec             	pushl  -0x14(%ebp)
   10c46:	e8 10 07 00 00       	call   1135b <segment_desc_set>
   10c4b:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10c4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c51:	83 c0 48             	add    $0x48,%eax
   10c54:	83 ec 04             	sub    $0x4,%esp
   10c57:	6a 68                	push   $0x68
   10c59:	6a 00                	push   $0x0
   10c5b:	50                   	push   %eax
   10c5c:	e8 fd 1c 00 00       	call   1295e <kmemset>
   10c61:	83 c4 10             	add    $0x10,%esp

    // 分配一个内核栈空间
    uint32_t kernel_stack = memory_alloc_page();
   10c64:	e8 fe fd ff ff       	call   10a67 <memory_alloc_page>
   10c69:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   10c6c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10c70:	0f 84 ec 00 00 00    	je     10d62 <tss_init+0x15b>
        goto tss_init_failed;
    }

    int code_sel;
    int data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   10c76:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c79:	83 e0 01             	and    $0x1,%eax
   10c7c:	85 c0                	test   %eax,%eax
   10c7e:	74 10                	je     10c90 <tss_init+0x89>
        code_sel = KERNEL_SELECTOR_CS;
   10c80:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10c87:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c8e:	eb 16                	jmp    10ca6 <tss_init+0x9f>
    }
    else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10c90:	a1 90 71 01 00       	mov    0x17190,%eax
   10c95:	83 c8 03             	or     $0x3,%eax
   10c98:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10c9b:	a1 94 71 01 00       	mov    0x17194,%eax
   10ca0:	83 c8 03             	or     $0x3,%eax
   10ca3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip    = entry;
   10ca6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca9:	8b 55 10             	mov    0x10(%ebp),%edx
   10cac:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10caf:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb2:	8b 55 14             	mov    0x14(%ebp),%edx
   10cb5:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = kernel_stack + MEM_PAGE_SIZE;
   10cbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cbe:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc7:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = data_sel;
   10cca:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ccd:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd0:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0    = KERNEL_SELECTOR_DS; 
   10cd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd9:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = data_sel;
   10ce0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ce3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce6:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10cec:	8b 45 08             	mov    0x8(%ebp),%eax
   10cef:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10cf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf8:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   10d01:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d07:	8b 45 08             	mov    0x8(%ebp),%eax
   10d0a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10d10:	8b 45 08             	mov    0x8(%ebp),%eax
   10d13:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10d19:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1c:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = code_sel;
   10d22:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d25:	8b 45 08             	mov    0x8(%ebp),%eax
   10d28:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10d2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d31:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10d38:	e8 c1 fa ff ff       	call   107fe <memory_create_uvm>
   10d3d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (uvm_pgtbl == 0) {
   10d40:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d44:	74 1f                	je     10d65 <tss_init+0x15e>
        goto tss_init_failed;
    }
    task->tss.cr3    = uvm_pgtbl;
   10d46:	8b 45 08             	mov    0x8(%ebp),%eax
   10d49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d4c:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10d4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d52:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10d55:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10d5b:	b8 00 00 00 00       	mov    $0x0,%eax
   10d60:	eb 2b                	jmp    10d8d <tss_init+0x186>
        goto tss_init_failed;
   10d62:	90                   	nop
   10d63:	eb 01                	jmp    10d66 <tss_init+0x15f>
        goto tss_init_failed;
   10d65:	90                   	nop

// 资源回收
tss_init_failed:
    gdt_free_sel(tss_sel);
   10d66:	83 ec 0c             	sub    $0xc,%esp
   10d69:	ff 75 ec             	pushl  -0x14(%ebp)
   10d6c:	e8 cd 07 00 00       	call   1153e <gdt_free_sel>
   10d71:	83 c4 10             	add    $0x10,%esp
    if (kernel_stack != 0) {
   10d74:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d78:	74 0e                	je     10d88 <tss_init+0x181>
        memory_free_page(kernel_stack);
   10d7a:	83 ec 0c             	sub    $0xc,%esp
   10d7d:	ff 75 e8             	pushl  -0x18(%ebp)
   10d80:	e8 02 fd ff ff       	call   10a87 <memory_free_page>
   10d85:	83 c4 10             	add    $0x10,%esp
    }
    return -1;    
   10d88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d8d:	c9                   	leave  
   10d8e:	c3                   	ret    

00010d8f <task_init>:


int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   10d8f:	55                   	push   %ebp
   10d90:	89 e5                	mov    %esp,%ebp
   10d92:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10d95:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d99:	75 19                	jne    10db4 <task_init+0x25>
   10d9b:	68 4a 32 01 00       	push   $0x1324a
   10da0:	68 d4 32 01 00       	push   $0x132d4
   10da5:	6a 4b                	push   $0x4b
   10da7:	68 60 32 01 00       	push   $0x13260
   10dac:	e8 12 1f 00 00       	call   12cc3 <pannic>
   10db1:	83 c4 10             	add    $0x10,%esp

    tss_init(task, flag, entry, esp);
   10db4:	ff 75 18             	pushl  0x18(%ebp)
   10db7:	ff 75 14             	pushl  0x14(%ebp)
   10dba:	ff 75 10             	pushl  0x10(%ebp)
   10dbd:	ff 75 08             	pushl  0x8(%ebp)
   10dc0:	e8 42 fe ff ff       	call   10c07 <tss_init>
   10dc5:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10dc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcb:	83 c0 04             	add    $0x4,%eax
   10dce:	83 ec 04             	sub    $0x4,%esp
   10dd1:	6a 20                	push   $0x20
   10dd3:	ff 75 0c             	pushl  0xc(%ebp)
   10dd6:	50                   	push   %eax
   10dd7:	e8 0e 1a 00 00       	call   127ea <kstrncpy>
   10ddc:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   10de2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10de8:	8b 45 08             	mov    0x8(%ebp),%eax
   10deb:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10df2:	8b 45 08             	mov    0x8(%ebp),%eax
   10df5:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10dfc:	8b 45 08             	mov    0x8(%ebp),%eax
   10dff:	8b 50 40             	mov    0x40(%eax),%edx
   10e02:	8b 45 08             	mov    0x8(%ebp),%eax
   10e05:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10e08:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0b:	83 c0 2c             	add    $0x2c,%eax
   10e0e:	83 ec 0c             	sub    $0xc,%esp
   10e11:	50                   	push   %eax
   10e12:	e8 7c fd ff ff       	call   10b93 <list_node_init>
   10e17:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1d:	83 c0 24             	add    $0x24,%eax
   10e20:	83 ec 0c             	sub    $0xc,%esp
   10e23:	50                   	push   %eax
   10e24:	e8 6a fd ff ff       	call   10b93 <list_node_init>
   10e29:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2f:	83 c0 34             	add    $0x34,%eax
   10e32:	83 ec 0c             	sub    $0xc,%esp
   10e35:	50                   	push   %eax
   10e36:	e8 58 fd ff ff       	call   10b93 <list_node_init>
   10e3b:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10e3e:	e8 7f 10 00 00       	call   11ec2 <irq_enter_protection>
   10e43:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10e46:	83 ec 0c             	sub    $0xc,%esp
   10e49:	ff 75 08             	pushl  0x8(%ebp)
   10e4c:	e8 df 01 00 00       	call   11030 <task_set_ready>
   10e51:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10e54:	8b 45 08             	mov    0x8(%ebp),%eax
   10e57:	83 c0 2c             	add    $0x2c,%eax
   10e5a:	83 ec 08             	sub    $0x8,%esp
   10e5d:	50                   	push   %eax
   10e5e:	68 10 70 01 00       	push   $0x17010
   10e63:	e8 26 1f 00 00       	call   12d8e <list_insert_back>
   10e68:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10e6b:	83 ec 0c             	sub    $0xc,%esp
   10e6e:	ff 75 f4             	pushl  -0xc(%ebp)
   10e71:	e8 64 10 00 00       	call   11eda <irq_leave_protection>
   10e76:	83 c4 10             	add    $0x10,%esp

    return 0;
   10e79:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e7e:	c9                   	leave  
   10e7f:	c3                   	ret    

00010e80 <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10e80:	55                   	push   %ebp
   10e81:	89 e5                	mov    %esp,%ebp
   10e83:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10e86:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e89:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10e8f:	83 ec 0c             	sub    $0xc,%esp
   10e92:	50                   	push   %eax
   10e93:	e8 1d 06 00 00       	call   114b5 <swtch_to_tss>
   10e98:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10e9b:	90                   	nop
   10e9c:	c9                   	leave  
   10e9d:	c3                   	ret    

00010e9e <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10e9e:	55                   	push   %ebp
   10e9f:	89 e5                	mov    %esp,%ebp
    while (1) {
        hlt();
   10ea1:	e8 32 fd ff ff       	call   10bd8 <hlt>
   10ea6:	eb f9                	jmp    10ea1 <idle_task_entry+0x3>

00010ea8 <task_manager_init>:
    }
}


void task_manager_init(void) {
   10ea8:	55                   	push   %ebp
   10ea9:	89 e5                	mov    %esp,%ebp
   10eab:	83 ec 18             	sub    $0x18,%esp
    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   10eae:	e8 16 06 00 00       	call   114c9 <gdt_alloc_desc>
   10eb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10eb6:	68 f2 40 00 00       	push   $0x40f2
   10ebb:	6a ff                	push   $0xffffffff
   10ebd:	6a 00                	push   $0x0
   10ebf:	ff 75 f4             	pushl  -0xc(%ebp)
   10ec2:	e8 94 04 00 00       	call   1135b <segment_desc_set>
   10ec7:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ecd:	a3 94 71 01 00       	mov    %eax,0x17194

    sel = gdt_alloc_desc();
   10ed2:	e8 f2 05 00 00       	call   114c9 <gdt_alloc_desc>
   10ed7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10eda:	68 fa 40 00 00       	push   $0x40fa
   10edf:	6a ff                	push   $0xffffffff
   10ee1:	6a 00                	push   $0x0
   10ee3:	ff 75 f4             	pushl  -0xc(%ebp)
   10ee6:	e8 70 04 00 00       	call   1135b <segment_desc_set>
   10eeb:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ef1:	a3 90 71 01 00       	mov    %eax,0x17190

    list_init(&task_manager.ready_list);
   10ef6:	83 ec 0c             	sub    $0xc,%esp
   10ef9:	68 04 70 01 00       	push   $0x17004
   10efe:	e8 09 1e 00 00       	call   12d0c <list_init>
   10f03:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10f06:	83 ec 0c             	sub    $0xc,%esp
   10f09:	68 10 70 01 00       	push   $0x17010
   10f0e:	e8 f9 1d 00 00       	call   12d0c <list_init>
   10f13:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10f16:	83 ec 0c             	sub    $0xc,%esp
   10f19:	68 1c 70 01 00       	push   $0x1701c
   10f1e:	e8 e9 1d 00 00       	call   12d0c <list_init>
   10f23:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10f26:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10f2d:	00 00 00 
    // 创建一个 idle 进程，当所有进程都在sleep时，调用它
    task_init(&task_manager.idle_task, 
              "idle_task", 
              TASK_FLAGS_SYSTEM,
              (uint32_t)idle_task_entry, 
              (uint32_t)idle_task_stack + IDLE_TASK_SIZE
   10f30:	b8 a0 71 01 00       	mov    $0x171a0,%eax
    task_init(&task_manager.idle_task, 
   10f35:	05 00 04 00 00       	add    $0x400,%eax
   10f3a:	ba 9e 0e 01 00       	mov    $0x10e9e,%edx
   10f3f:	83 ec 0c             	sub    $0xc,%esp
   10f42:	50                   	push   %eax
   10f43:	52                   	push   %edx
   10f44:	6a 01                	push   $0x1
   10f46:	68 a5 32 01 00       	push   $0x132a5
   10f4b:	68 dc 70 01 00       	push   $0x170dc
   10f50:	e8 3a fe ff ff       	call   10d8f <task_init>
   10f55:	83 c4 20             	add    $0x20,%esp
    );
}
   10f58:	90                   	nop
   10f59:	c9                   	leave  
   10f5a:	c3                   	ret    

00010f5b <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10f5b:	55                   	push   %ebp
   10f5c:	89 e5                	mov    %esp,%ebp
   10f5e:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10f61:	ba 86 af 01 00       	mov    $0x1af86,%edx
   10f66:	b8 40 af 01 00       	mov    $0x1af40,%eax
   10f6b:	29 c2                	sub    %eax,%edx
   10f6d:	89 d0                	mov    %edx,%eax
   10f6f:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10f72:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10f79:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   10f7d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10f80:	77 1c                	ja     10f9e <task_first_init+0x43>
   10f82:	68 af 32 01 00       	push   $0x132af
   10f87:	68 e0 32 01 00       	push   $0x132e0
   10f8c:	68 9c 00 00 00       	push   $0x9c
   10f91:	68 60 32 01 00       	push   $0x13260
   10f96:	e8 28 1d 00 00       	call   12cc3 <pannic>
   10f9b:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10f9e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    /* first_task + alloc_size 是分配的地址的末尾，作为栈底*/
    task_init(&task_manager.first_task, "first task", 0, (uint32_t)first_start, first_start + alloc_size);
   10fa5:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10fa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fab:	01 d0                	add    %edx,%eax
   10fad:	83 ec 0c             	sub    $0xc,%esp
   10fb0:	50                   	push   %eax
   10fb1:	ff 75 ec             	pushl  -0x14(%ebp)
   10fb4:	6a 00                	push   $0x0
   10fb6:	68 c6 32 01 00       	push   $0x132c6
   10fbb:	68 28 70 01 00       	push   $0x17028
   10fc0:	e8 ca fd ff ff       	call   10d8f <task_init>
   10fc5:	83 c4 20             	add    $0x20,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10fc8:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10fcd:	0f b7 c0             	movzwl %ax,%eax
   10fd0:	83 ec 0c             	sub    $0xc,%esp
   10fd3:	50                   	push   %eax
   10fd4:	e8 06 fc ff ff       	call   10bdf <write_tr>
   10fd9:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10fdc:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10fe3:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10fe6:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10feb:	83 ec 0c             	sub    $0xc,%esp
   10fee:	50                   	push   %eax
   10fef:	e8 02 fc ff ff       	call   10bf6 <mmu_set_page_dir>
   10ff4:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10ff7:	83 ec 04             	sub    $0x4,%esp
   10ffa:	6a 07                	push   $0x7
   10ffc:	ff 75 f0             	pushl  -0x10(%ebp)
   10fff:	ff 75 ec             	pushl  -0x14(%ebp)
   11002:	e8 2e fa ff ff       	call   10a35 <memory_alloc_page_for>
   11007:	83 c4 10             	add    $0x10,%esp

    kmemcpy((void*)first_start, s_first_task, copy_size);
   1100a:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   1100e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11011:	83 ec 04             	sub    $0x4,%esp
   11014:	52                   	push   %edx
   11015:	68 40 af 01 00       	push   $0x1af40
   1101a:	50                   	push   %eax
   1101b:	e8 ef 18 00 00       	call   1290f <kmemcpy>
   11020:	83 c4 10             	add    $0x10,%esp
}
   11023:	90                   	nop
   11024:	c9                   	leave  
   11025:	c3                   	ret    

00011026 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   11026:	55                   	push   %ebp
   11027:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11029:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   1102e:	5d                   	pop    %ebp
   1102f:	c3                   	ret    

00011030 <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   11030:	55                   	push   %ebp
   11031:	89 e5                	mov    %esp,%ebp
   11033:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   11036:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   1103d:	74 22                	je     11061 <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   1103f:	8b 45 08             	mov    0x8(%ebp),%eax
   11042:	83 c0 24             	add    $0x24,%eax
   11045:	83 ec 08             	sub    $0x8,%esp
   11048:	50                   	push   %eax
   11049:	68 04 70 01 00       	push   $0x17004
   1104e:	e8 3b 1d 00 00       	call   12d8e <list_insert_back>
   11053:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11056:	8b 45 08             	mov    0x8(%ebp),%eax
   11059:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1105f:	eb 01                	jmp    11062 <task_set_ready+0x32>
        return;
   11061:	90                   	nop
}
   11062:	c9                   	leave  
   11063:	c3                   	ret    

00011064 <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   11064:	55                   	push   %ebp
   11065:	89 e5                	mov    %esp,%ebp
   11067:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   1106a:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   11071:	74 19                	je     1108c <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   11073:	8b 45 08             	mov    0x8(%ebp),%eax
   11076:	83 c0 24             	add    $0x24,%eax
   11079:	83 ec 08             	sub    $0x8,%esp
   1107c:	50                   	push   %eax
   1107d:	68 04 70 01 00       	push   $0x17004
   11082:	e8 e3 1d 00 00       	call   12e6a <list_remove>
   11087:	83 c4 10             	add    $0x10,%esp
   1108a:	eb 01                	jmp    1108d <task_set_blocked+0x29>
        return;
   1108c:	90                   	nop
}
   1108d:	c9                   	leave  
   1108e:	c3                   	ret    

0001108f <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   1108f:	55                   	push   %ebp
   11090:	89 e5                	mov    %esp,%ebp
   11092:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   11095:	68 04 70 01 00       	push   $0x17004
   1109a:	e8 18 fb ff ff       	call   10bb7 <list_size>
   1109f:	83 c4 04             	add    $0x4,%esp
   110a2:	85 c0                	test   %eax,%eax
   110a4:	75 07                	jne    110ad <task_next_run+0x1e>
        return &task_manager.idle_task;
   110a6:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   110ab:	eb 23                	jmp    110d0 <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   110ad:	68 04 70 01 00       	push   $0x17004
   110b2:	e8 0b fb ff ff       	call   10bc2 <list_first>
   110b7:	83 c4 04             	add    $0x4,%esp
   110ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   110bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   110c1:	74 08                	je     110cb <task_next_run+0x3c>
   110c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110c6:	83 e8 24             	sub    $0x24,%eax
   110c9:	eb 05                	jmp    110d0 <task_next_run+0x41>
   110cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110d0:	c9                   	leave  
   110d1:	c3                   	ret    

000110d2 <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   110d2:	55                   	push   %ebp
   110d3:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   110d5:	a1 00 70 01 00       	mov    0x17000,%eax
}
   110da:	5d                   	pop    %ebp
   110db:	c3                   	ret    

000110dc <sys_sched_yield>:


int sys_sched_yield(void) {
   110dc:	55                   	push   %ebp
   110dd:	89 e5                	mov    %esp,%ebp
   110df:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   110e2:	e8 db 0d 00 00       	call   11ec2 <irq_enter_protection>
   110e7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   110ea:	83 ec 0c             	sub    $0xc,%esp
   110ed:	68 04 70 01 00       	push   $0x17004
   110f2:	e8 c0 fa ff ff       	call   10bb7 <list_size>
   110f7:	83 c4 10             	add    $0x10,%esp
   110fa:	83 f8 01             	cmp    $0x1,%eax
   110fd:	7e 29                	jle    11128 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   110ff:	e8 ce ff ff ff       	call   110d2 <task_current>
   11104:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   11107:	83 ec 0c             	sub    $0xc,%esp
   1110a:	ff 75 f0             	pushl  -0x10(%ebp)
   1110d:	e8 52 ff ff ff       	call   11064 <task_set_blocked>
   11112:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11115:	83 ec 0c             	sub    $0xc,%esp
   11118:	ff 75 f0             	pushl  -0x10(%ebp)
   1111b:	e8 10 ff ff ff       	call   11030 <task_set_ready>
   11120:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11123:	e8 15 00 00 00       	call   1113d <task_dispatch>
    }

    irq_leave_protection(state);
   11128:	83 ec 0c             	sub    $0xc,%esp
   1112b:	ff 75 f4             	pushl  -0xc(%ebp)
   1112e:	e8 a7 0d 00 00       	call   11eda <irq_leave_protection>
   11133:	83 c4 10             	add    $0x10,%esp

    return 0;
   11136:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1113b:	c9                   	leave  
   1113c:	c3                   	ret    

0001113d <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   1113d:	55                   	push   %ebp
   1113e:	89 e5                	mov    %esp,%ebp
   11140:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11143:	e8 7a 0d 00 00       	call   11ec2 <irq_enter_protection>
   11148:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   1114b:	e8 3f ff ff ff       	call   1108f <task_next_run>
   11150:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   11153:	a1 00 70 01 00       	mov    0x17000,%eax
   11158:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1115b:	74 2a                	je     11187 <task_dispatch+0x4a>
        task_t* from = task_current();
   1115d:	e8 70 ff ff ff       	call   110d2 <task_current>
   11162:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11165:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11168:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   1116d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11170:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   11176:	83 ec 08             	sub    $0x8,%esp
   11179:	ff 75 f0             	pushl  -0x10(%ebp)
   1117c:	ff 75 ec             	pushl  -0x14(%ebp)
   1117f:	e8 fc fc ff ff       	call   10e80 <task_switch_from_to>
   11184:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   11187:	83 ec 0c             	sub    $0xc,%esp
   1118a:	ff 75 f4             	pushl  -0xc(%ebp)
   1118d:	e8 48 0d 00 00       	call   11eda <irq_leave_protection>
   11192:	83 c4 10             	add    $0x10,%esp
}
   11195:	90                   	nop
   11196:	c9                   	leave  
   11197:	c3                   	ret    

00011198 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   11198:	55                   	push   %ebp
   11199:	89 e5                	mov    %esp,%ebp
   1119b:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   1119e:	e8 2f ff ff ff       	call   110d2 <task_current>
   111a3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   111a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111a9:	8b 40 44             	mov    0x44(%eax),%eax
   111ac:	8d 50 ff             	lea    -0x1(%eax),%edx
   111af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111b2:	89 50 44             	mov    %edx,0x44(%eax)
   111b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111b8:	8b 40 44             	mov    0x44(%eax),%eax
   111bb:	85 c0                	test   %eax,%eax
   111bd:	75 2d                	jne    111ec <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   111bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111c2:	8b 50 40             	mov    0x40(%eax),%edx
   111c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111c8:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   111cb:	83 ec 0c             	sub    $0xc,%esp
   111ce:	ff 75 f0             	pushl  -0x10(%ebp)
   111d1:	e8 8e fe ff ff       	call   11064 <task_set_blocked>
   111d6:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   111d9:	83 ec 0c             	sub    $0xc,%esp
   111dc:	ff 75 f0             	pushl  -0x10(%ebp)
   111df:	e8 4c fe ff ff       	call   11030 <task_set_ready>
   111e4:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   111e7:	e8 51 ff ff ff       	call   1113d <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   111ec:	83 ec 0c             	sub    $0xc,%esp
   111ef:	68 1c 70 01 00       	push   $0x1701c
   111f4:	e8 c9 f9 ff ff       	call   10bc2 <list_first>
   111f9:	83 c4 10             	add    $0x10,%esp
   111fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   111ff:	eb 62                	jmp    11263 <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   11201:	83 ec 0c             	sub    $0xc,%esp
   11204:	ff 75 f4             	pushl  -0xc(%ebp)
   11207:	e8 a0 f9 ff ff       	call   10bac <list_node_next>
   1120c:	83 c4 10             	add    $0x10,%esp
   1120f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   11212:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11216:	74 08                	je     11220 <task_time_tick+0x88>
   11218:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1121b:	83 e8 24             	sub    $0x24,%eax
   1121e:	eb 05                	jmp    11225 <task_time_tick+0x8d>
   11220:	b8 00 00 00 00       	mov    $0x0,%eax
   11225:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   11228:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1122b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1122e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11231:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11234:	89 50 3c             	mov    %edx,0x3c(%eax)
   11237:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1123a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1123d:	85 c0                	test   %eax,%eax
   1123f:	75 1c                	jne    1125d <task_time_tick+0xc5>
            task_set_wakeup(task);
   11241:	83 ec 0c             	sub    $0xc,%esp
   11244:	ff 75 e8             	pushl  -0x18(%ebp)
   11247:	e8 56 00 00 00       	call   112a2 <task_set_wakeup>
   1124c:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1124f:	83 ec 0c             	sub    $0xc,%esp
   11252:	ff 75 e8             	pushl  -0x18(%ebp)
   11255:	e8 d6 fd ff ff       	call   11030 <task_set_ready>
   1125a:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   1125d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11260:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11263:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11267:	75 98                	jne    11201 <task_time_tick+0x69>
    }

    task_dispatch();
   11269:	e8 cf fe ff ff       	call   1113d <task_dispatch>
}
   1126e:	90                   	nop
   1126f:	c9                   	leave  
   11270:	c3                   	ret    

00011271 <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   11271:	55                   	push   %ebp
   11272:	89 e5                	mov    %esp,%ebp
   11274:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11277:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1127b:	74 22                	je     1129f <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   1127d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11280:	8b 45 08             	mov    0x8(%ebp),%eax
   11283:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   11286:	8b 45 08             	mov    0x8(%ebp),%eax
   11289:	83 c0 24             	add    $0x24,%eax
   1128c:	83 ec 08             	sub    $0x8,%esp
   1128f:	50                   	push   %eax
   11290:	68 1c 70 01 00       	push   $0x1701c
   11295:	e8 f4 1a 00 00       	call   12d8e <list_insert_back>
   1129a:	83 c4 10             	add    $0x10,%esp
   1129d:	eb 01                	jmp    112a0 <task_set_sleep+0x2f>
        return;
   1129f:	90                   	nop
}
   112a0:	c9                   	leave  
   112a1:	c3                   	ret    

000112a2 <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   112a2:	55                   	push   %ebp
   112a3:	89 e5                	mov    %esp,%ebp
   112a5:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   112a8:	8b 45 08             	mov    0x8(%ebp),%eax
   112ab:	83 c0 24             	add    $0x24,%eax
   112ae:	83 ec 08             	sub    $0x8,%esp
   112b1:	50                   	push   %eax
   112b2:	68 1c 70 01 00       	push   $0x1701c
   112b7:	e8 ae 1b 00 00       	call   12e6a <list_remove>
   112bc:	83 c4 10             	add    $0x10,%esp
}
   112bf:	90                   	nop
   112c0:	c9                   	leave  
   112c1:	c3                   	ret    

000112c2 <sys_sleep>:


void sys_sleep(uint32_t ms) {
   112c2:	55                   	push   %ebp
   112c3:	89 e5                	mov    %esp,%ebp
   112c5:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   112c8:	e8 f5 0b 00 00       	call   11ec2 <irq_enter_protection>
   112cd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   112d0:	a1 00 70 01 00       	mov    0x17000,%eax
   112d5:	83 ec 0c             	sub    $0xc,%esp
   112d8:	50                   	push   %eax
   112d9:	e8 86 fd ff ff       	call   11064 <task_set_blocked>
   112de:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   112e1:	8b 45 08             	mov    0x8(%ebp),%eax
   112e4:	83 c0 09             	add    $0x9,%eax
   112e7:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   112ec:	f7 e2                	mul    %edx
   112ee:	c1 ea 03             	shr    $0x3,%edx
   112f1:	a1 00 70 01 00       	mov    0x17000,%eax
   112f6:	83 ec 08             	sub    $0x8,%esp
   112f9:	52                   	push   %edx
   112fa:	50                   	push   %eax
   112fb:	e8 71 ff ff ff       	call   11271 <task_set_sleep>
   11300:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   11303:	e8 35 fe ff ff       	call   1113d <task_dispatch>

    irq_leave_protection(state);
   11308:	83 ec 0c             	sub    $0xc,%esp
   1130b:	ff 75 f4             	pushl  -0xc(%ebp)
   1130e:	e8 c7 0b 00 00       	call   11eda <irq_leave_protection>
   11313:	83 c4 10             	add    $0x10,%esp
   11316:	90                   	nop
   11317:	c9                   	leave  
   11318:	c3                   	ret    

00011319 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   11319:	55                   	push   %ebp
   1131a:	89 e5                	mov    %esp,%ebp
   1131c:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   1131f:	8b 45 08             	mov    0x8(%ebp),%eax
   11322:	c1 e8 10             	shr    $0x10,%eax
   11325:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   11329:	8b 45 08             	mov    0x8(%ebp),%eax
   1132c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   11330:	8b 45 0c             	mov    0xc(%ebp),%eax
   11333:	83 e8 01             	sub    $0x1,%eax
   11336:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1133a:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1133e:	90                   	nop
   1133f:	c9                   	leave  
   11340:	c3                   	ret    

00011341 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   11341:	55                   	push   %ebp
   11342:	89 e5                	mov    %esp,%ebp
   11344:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   11347:	8b 45 0c             	mov    0xc(%ebp),%eax
   1134a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1134d:	8b 45 08             	mov    0x8(%ebp),%eax
   11350:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11353:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11356:	ff 28                	ljmp   *(%eax)
}
   11358:	90                   	nop
   11359:	c9                   	leave  
   1135a:	c3                   	ret    

0001135b <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1135b:	55                   	push   %ebp
   1135c:	89 e5                	mov    %esp,%ebp
   1135e:	83 ec 14             	sub    $0x14,%esp
   11361:	8b 45 14             	mov    0x14(%ebp),%eax
   11364:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   11368:	8b 45 08             	mov    0x8(%ebp),%eax
   1136b:	83 e0 f8             	and    $0xfffffff8,%eax
   1136e:	05 a0 81 01 00       	add    $0x181a0,%eax
   11373:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   11376:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1137d:	76 0f                	jbe    1138e <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   1137f:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11385:	8b 45 10             	mov    0x10(%ebp),%eax
   11388:	c1 e8 0c             	shr    $0xc,%eax
   1138b:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   1138e:	8b 45 10             	mov    0x10(%ebp),%eax
   11391:	89 c2                	mov    %eax,%edx
   11393:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11396:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   11399:	8b 45 0c             	mov    0xc(%ebp),%eax
   1139c:	89 c2                	mov    %eax,%edx
   1139e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113a1:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   113a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a8:	c1 e8 10             	shr    $0x10,%eax
   113ab:	89 c2                	mov    %eax,%edx
   113ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113b0:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   113b3:	8b 45 10             	mov    0x10(%ebp),%eax
   113b6:	c1 e8 10             	shr    $0x10,%eax
   113b9:	c1 e0 08             	shl    $0x8,%eax
   113bc:	66 25 00 0f          	and    $0xf00,%ax
   113c0:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   113c4:	89 c2                	mov    %eax,%edx
   113c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c9:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   113cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d0:	c1 e8 18             	shr    $0x18,%eax
   113d3:	89 c2                	mov    %eax,%edx
   113d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d8:	88 50 07             	mov    %dl,0x7(%eax)
}
   113db:	90                   	nop
   113dc:	c9                   	leave  
   113dd:	c3                   	ret    

000113de <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   113de:	55                   	push   %ebp
   113df:	89 e5                	mov    %esp,%ebp
   113e1:	83 ec 08             	sub    $0x8,%esp
   113e4:	8b 55 0c             	mov    0xc(%ebp),%edx
   113e7:	8b 45 14             	mov    0x14(%ebp),%eax
   113ea:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   113ee:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   113f2:	8b 45 10             	mov    0x10(%ebp),%eax
   113f5:	89 c2                	mov    %eax,%edx
   113f7:	8b 45 08             	mov    0x8(%ebp),%eax
   113fa:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   113fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11400:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11404:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11408:	8b 45 08             	mov    0x8(%ebp),%eax
   1140b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1140f:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   11413:	8b 45 10             	mov    0x10(%ebp),%eax
   11416:	c1 e8 10             	shr    $0x10,%eax
   11419:	89 c2                	mov    %eax,%edx
   1141b:	8b 45 08             	mov    0x8(%ebp),%eax
   1141e:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   11422:	90                   	nop
   11423:	c9                   	leave  
   11424:	c3                   	ret    

00011425 <init_gdt>:


void init_gdt(void) {
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
   11428:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1142b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11432:	eb 19                	jmp    1144d <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   11434:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11437:	c1 e0 03             	shl    $0x3,%eax
   1143a:	6a 00                	push   $0x0
   1143c:	6a 00                	push   $0x0
   1143e:	6a 00                	push   $0x0
   11440:	50                   	push   %eax
   11441:	e8 15 ff ff ff       	call   1135b <segment_desc_set>
   11446:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11449:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1144d:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   11454:	7e de                	jle    11434 <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11456:	68 92 40 00 00       	push   $0x4092
   1145b:	6a ff                	push   $0xffffffff
   1145d:	6a 00                	push   $0x0
   1145f:	6a 10                	push   $0x10
   11461:	e8 f5 fe ff ff       	call   1135b <segment_desc_set>
   11466:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11469:	68 9a 40 00 00       	push   $0x409a
   1146e:	6a ff                	push   $0xffffffff
   11470:	6a 00                	push   $0x0
   11472:	6a 08                	push   $0x8
   11474:	e8 e2 fe ff ff       	call   1135b <segment_desc_set>
   11479:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1147c:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   11481:	68 00 08 00 00       	push   $0x800
   11486:	50                   	push   %eax
   11487:	e8 8d fe ff ff       	call   11319 <lgdt>
   1148c:	83 c4 08             	add    $0x8,%esp
}
   1148f:	90                   	nop
   11490:	c9                   	leave  
   11491:	c3                   	ret    

00011492 <cpu_init>:


void cpu_init(void) {
   11492:	55                   	push   %ebp
   11493:	89 e5                	mov    %esp,%ebp
   11495:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   11498:	83 ec 08             	sub    $0x8,%esp
   1149b:	68 f0 32 01 00       	push   $0x132f0
   114a0:	68 a0 89 01 00       	push   $0x189a0
   114a5:	e8 da 0d 00 00       	call   12284 <mutex_init>
   114aa:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   114ad:	e8 73 ff ff ff       	call   11425 <init_gdt>
}
   114b2:	90                   	nop
   114b3:	c9                   	leave  
   114b4:	c3                   	ret    

000114b5 <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   114b5:	55                   	push   %ebp
   114b6:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   114b8:	8b 45 08             	mov    0x8(%ebp),%eax
   114bb:	6a 00                	push   $0x0
   114bd:	50                   	push   %eax
   114be:	e8 7e fe ff ff       	call   11341 <far_jump>
   114c3:	83 c4 08             	add    $0x8,%esp
}
   114c6:	90                   	nop
   114c7:	c9                   	leave  
   114c8:	c3                   	ret    

000114c9 <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   114c9:	55                   	push   %ebp
   114ca:	89 e5                	mov    %esp,%ebp
   114cc:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   114cf:	83 ec 0c             	sub    $0xc,%esp
   114d2:	68 a0 89 01 00       	push   $0x189a0
   114d7:	e8 e9 0d 00 00       	call   122c5 <mutex_acquire>
   114dc:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   114df:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   114e6:	eb 36                	jmp    1151e <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   114e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114eb:	c1 e0 03             	shl    $0x3,%eax
   114ee:	05 a0 81 01 00       	add    $0x181a0,%eax
   114f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   114f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114f9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114fd:	66 85 c0             	test   %ax,%ax
   11500:	75 18                	jne    1151a <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   11502:	83 ec 0c             	sub    $0xc,%esp
   11505:	68 a0 89 01 00       	push   $0x189a0
   1150a:	e8 44 0e 00 00       	call   12353 <mutex_release>
   1150f:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   11512:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11515:	c1 e0 03             	shl    $0x3,%eax
   11518:	eb 22                	jmp    1153c <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1151a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1151e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11525:	7e c1                	jle    114e8 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11527:	83 ec 0c             	sub    $0xc,%esp
   1152a:	68 a0 89 01 00       	push   $0x189a0
   1152f:	e8 1f 0e 00 00       	call   12353 <mutex_release>
   11534:	83 c4 10             	add    $0x10,%esp

    return -1;
   11537:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1153c:	c9                   	leave  
   1153d:	c3                   	ret    

0001153e <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1153e:	55                   	push   %ebp
   1153f:	89 e5                	mov    %esp,%ebp
   11541:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   11544:	83 ec 0c             	sub    $0xc,%esp
   11547:	68 a0 89 01 00       	push   $0x189a0
   1154c:	e8 74 0d 00 00       	call   122c5 <mutex_acquire>
   11551:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   11554:	8b 45 08             	mov    0x8(%ebp),%eax
   11557:	c1 e8 03             	shr    $0x3,%eax
   1155a:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   11561:	00 00 00 

    mutex_release(&mutex);
   11564:	83 ec 0c             	sub    $0xc,%esp
   11567:	68 a0 89 01 00       	push   $0x189a0
   1156c:	e8 e2 0d 00 00       	call   12353 <mutex_release>
   11571:	83 c4 10             	add    $0x10,%esp
   11574:	90                   	nop
   11575:	c9                   	leave  
   11576:	c3                   	ret    

00011577 <inb>:
static inline uint8_t inb(uint16_t port) {
   11577:	55                   	push   %ebp
   11578:	89 e5                	mov    %esp,%ebp
   1157a:	83 ec 14             	sub    $0x14,%esp
   1157d:	8b 45 08             	mov    0x8(%ebp),%eax
   11580:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   11584:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11588:	89 c2                	mov    %eax,%edx
   1158a:	ec                   	in     (%dx),%al
   1158b:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1158e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11592:	c9                   	leave  
   11593:	c3                   	ret    

00011594 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11594:	55                   	push   %ebp
   11595:	89 e5                	mov    %esp,%ebp
   11597:	83 ec 08             	sub    $0x8,%esp
   1159a:	8b 55 08             	mov    0x8(%ebp),%edx
   1159d:	8b 45 0c             	mov    0xc(%ebp),%eax
   115a0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   115a4:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   115a7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   115ab:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   115af:	ee                   	out    %al,(%dx)
}
   115b0:	90                   	nop
   115b1:	c9                   	leave  
   115b2:	c3                   	ret    

000115b3 <cli>:
static inline void cli(void) {
   115b3:	55                   	push   %ebp
   115b4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   115b6:	fa                   	cli    
}
   115b7:	90                   	nop
   115b8:	5d                   	pop    %ebp
   115b9:	c3                   	ret    

000115ba <sti>:
static inline void sti(void) {
   115ba:	55                   	push   %ebp
   115bb:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   115bd:	fb                   	sti    
}
   115be:	90                   	nop
   115bf:	5d                   	pop    %ebp
   115c0:	c3                   	ret    

000115c1 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   115c1:	55                   	push   %ebp
   115c2:	89 e5                	mov    %esp,%ebp
   115c4:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   115c7:	8b 45 08             	mov    0x8(%ebp),%eax
   115ca:	c1 e8 10             	shr    $0x10,%eax
   115cd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   115d1:	8b 45 08             	mov    0x8(%ebp),%eax
   115d4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   115d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   115db:	83 e8 01             	sub    $0x1,%eax
   115de:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   115e2:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   115e6:	90                   	nop
   115e7:	c9                   	leave  
   115e8:	c3                   	ret    

000115e9 <read_cr2>:
static inline uint32_t read_cr2() {
   115e9:	55                   	push   %ebp
   115ea:	89 e5                	mov    %esp,%ebp
   115ec:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   115ef:	0f 20 d0             	mov    %cr2,%eax
   115f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   115f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   115f8:	c9                   	leave  
   115f9:	c3                   	ret    

000115fa <hlt>:
static inline void hlt(void) {
   115fa:	55                   	push   %ebp
   115fb:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   115fd:	f4                   	hlt    
}
   115fe:	90                   	nop
   115ff:	5d                   	pop    %ebp
   11600:	c3                   	ret    

00011601 <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   11601:	55                   	push   %ebp
   11602:	89 e5                	mov    %esp,%ebp
   11604:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   11607:	9c                   	pushf  
   11608:	58                   	pop    %eax
   11609:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1160c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1160f:	c9                   	leave  
   11610:	c3                   	ret    

00011611 <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   11611:	55                   	push   %ebp
   11612:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   11614:	8b 45 08             	mov    0x8(%ebp),%eax
   11617:	50                   	push   %eax
   11618:	9d                   	popf   
}
   11619:	90                   	nop
   1161a:	5d                   	pop    %ebp
   1161b:	c3                   	ret    

0001161c <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   1161c:	55                   	push   %ebp
   1161d:	89 e5                	mov    %esp,%ebp
   1161f:	57                   	push   %edi
   11620:	56                   	push   %esi
   11621:	53                   	push   %ebx
   11622:	83 ec 1c             	sub    $0x1c,%esp
    // 判断发生异常时的特权级，取CS寄存器的标志位可得
    uint32_t esp;
    uint32_t ss;
    if (frame->cs & 0x7) {
   11625:	8b 45 08             	mov    0x8(%ebp),%eax
   11628:	8b 40 3c             	mov    0x3c(%eax),%eax
   1162b:	83 e0 07             	and    $0x7,%eax
   1162e:	85 c0                	test   %eax,%eax
   11630:	74 14                	je     11646 <dump_core_regs+0x2a>
        ss = frame->ds;
   11632:	8b 45 08             	mov    0x8(%ebp),%eax
   11635:	8b 40 0c             	mov    0xc(%eax),%eax
   11638:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1163b:	8b 45 08             	mov    0x8(%ebp),%eax
   1163e:	8b 40 1c             	mov    0x1c(%eax),%eax
   11641:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11644:	eb 12                	jmp    11658 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   11646:	8b 45 08             	mov    0x8(%ebp),%eax
   11649:	8b 40 48             	mov    0x48(%eax),%eax
   1164c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1164f:	8b 45 08             	mov    0x8(%ebp),%eax
   11652:	8b 40 44             	mov    0x44(%eax),%eax
   11655:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   11658:	8b 45 08             	mov    0x8(%ebp),%eax
   1165b:	8b 50 34             	mov    0x34(%eax),%edx
   1165e:	8b 45 08             	mov    0x8(%ebp),%eax
   11661:	8b 40 30             	mov    0x30(%eax),%eax
   11664:	83 ec 04             	sub    $0x4,%esp
   11667:	52                   	push   %edx
   11668:	50                   	push   %eax
   11669:	68 fc 32 01 00       	push   $0x132fc
   1166e:	e8 5a 19 00 00       	call   12fcd <log_printf>
   11673:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", 
   11676:	8b 45 08             	mov    0x8(%ebp),%eax
   11679:	8b 30                	mov    (%eax),%esi
   1167b:	8b 45 08             	mov    0x8(%ebp),%eax
   1167e:	8b 58 04             	mov    0x4(%eax),%ebx
   11681:	8b 45 08             	mov    0x8(%ebp),%eax
   11684:	8b 48 08             	mov    0x8(%eax),%ecx
   11687:	8b 45 08             	mov    0x8(%ebp),%eax
   1168a:	8b 50 0c             	mov    0xc(%eax),%edx
   1168d:	8b 45 08             	mov    0x8(%ebp),%eax
   11690:	8b 40 3c             	mov    0x3c(%eax),%eax
   11693:	83 ec 04             	sub    $0x4,%esp
   11696:	56                   	push   %esi
   11697:	53                   	push   %ebx
   11698:	ff 75 e0             	pushl  -0x20(%ebp)
   1169b:	51                   	push   %ecx
   1169c:	52                   	push   %edx
   1169d:	50                   	push   %eax
   1169e:	68 14 33 01 00       	push   $0x13314
   116a3:	e8 25 19 00 00       	call   12fcd <log_printf>
   116a8:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", 
   116ab:	8b 45 08             	mov    0x8(%ebp),%eax
   116ae:	8b 78 18             	mov    0x18(%eax),%edi
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	8b 70 14             	mov    0x14(%eax),%esi
   116b7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ba:	8b 58 10             	mov    0x10(%eax),%ebx
   116bd:	8b 45 08             	mov    0x8(%ebp),%eax
   116c0:	8b 48 24             	mov    0x24(%eax),%ecx
   116c3:	8b 45 08             	mov    0x8(%ebp),%eax
   116c6:	8b 50 20             	mov    0x20(%eax),%edx
   116c9:	8b 45 08             	mov    0x8(%ebp),%eax
   116cc:	8b 40 2c             	mov    0x2c(%eax),%eax
   116cf:	ff 75 e4             	pushl  -0x1c(%ebp)
   116d2:	57                   	push   %edi
   116d3:	56                   	push   %esi
   116d4:	53                   	push   %ebx
   116d5:	51                   	push   %ecx
   116d6:	52                   	push   %edx
   116d7:	50                   	push   %eax
   116d8:	68 40 33 01 00       	push   $0x13340
   116dd:	e8 eb 18 00 00       	call   12fcd <log_printf>
   116e2:	83 c4 20             	add    $0x20,%esp
               frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, esp);
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   116e5:	8b 45 08             	mov    0x8(%ebp),%eax
   116e8:	8b 50 40             	mov    0x40(%eax),%edx
   116eb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ee:	8b 40 38             	mov    0x38(%eax),%eax
   116f1:	83 ec 04             	sub    $0x4,%esp
   116f4:	52                   	push   %edx
   116f5:	50                   	push   %eax
   116f6:	68 79 33 01 00       	push   $0x13379
   116fb:	e8 cd 18 00 00       	call   12fcd <log_printf>
   11700:	83 c4 10             	add    $0x10,%esp
}
   11703:	90                   	nop
   11704:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11707:	5b                   	pop    %ebx
   11708:	5e                   	pop    %esi
   11709:	5f                   	pop    %edi
   1170a:	5d                   	pop    %ebp
   1170b:	c3                   	ret    

0001170c <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   1170c:	55                   	push   %ebp
   1170d:	89 e5                	mov    %esp,%ebp
   1170f:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   11712:	83 ec 0c             	sub    $0xc,%esp
   11715:	68 90 33 01 00       	push   $0x13390
   1171a:	e8 ae 18 00 00       	call   12fcd <log_printf>
   1171f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   11722:	83 ec 08             	sub    $0x8,%esp
   11725:	ff 75 0c             	pushl  0xc(%ebp)
   11728:	68 bb 33 01 00       	push   $0x133bb
   1172d:	e8 9b 18 00 00       	call   12fcd <log_printf>
   11732:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   11735:	83 ec 0c             	sub    $0xc,%esp
   11738:	ff 75 08             	pushl  0x8(%ebp)
   1173b:	e8 dc fe ff ff       	call   1161c <dump_core_regs>
   11740:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   11743:	e8 b2 fe ff ff       	call   115fa <hlt>
   11748:	eb f9                	jmp    11743 <do_default_handler+0x37>

0001174a <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   1174a:	55                   	push   %ebp
   1174b:	89 e5                	mov    %esp,%ebp
   1174d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   11750:	83 ec 08             	sub    $0x8,%esp
   11753:	68 cd 33 01 00       	push   $0x133cd
   11758:	ff 75 08             	pushl  0x8(%ebp)
   1175b:	e8 ac ff ff ff       	call   1170c <do_default_handler>
   11760:	83 c4 10             	add    $0x10,%esp
}
   11763:	90                   	nop
   11764:	c9                   	leave  
   11765:	c3                   	ret    

00011766 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   11766:	55                   	push   %ebp
   11767:	89 e5                	mov    %esp,%ebp
   11769:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   1176c:	83 ec 08             	sub    $0x8,%esp
   1176f:	68 df 33 01 00       	push   $0x133df
   11774:	ff 75 08             	pushl  0x8(%ebp)
   11777:	e8 90 ff ff ff       	call   1170c <do_default_handler>
   1177c:	83 c4 10             	add    $0x10,%esp
}
   1177f:	90                   	nop
   11780:	c9                   	leave  
   11781:	c3                   	ret    

00011782 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11782:	55                   	push   %ebp
   11783:	89 e5                	mov    %esp,%ebp
   11785:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   11788:	83 ec 08             	sub    $0x8,%esp
   1178b:	68 f9 33 01 00       	push   $0x133f9
   11790:	ff 75 08             	pushl  0x8(%ebp)
   11793:	e8 74 ff ff ff       	call   1170c <do_default_handler>
   11798:	83 c4 10             	add    $0x10,%esp
}   
   1179b:	90                   	nop
   1179c:	c9                   	leave  
   1179d:	c3                   	ret    

0001179e <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   1179e:	55                   	push   %ebp
   1179f:	89 e5                	mov    %esp,%ebp
   117a1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   117a4:	83 ec 08             	sub    $0x8,%esp
   117a7:	68 14 34 01 00       	push   $0x13414
   117ac:	ff 75 08             	pushl  0x8(%ebp)
   117af:	e8 58 ff ff ff       	call   1170c <do_default_handler>
   117b4:	83 c4 10             	add    $0x10,%esp
}   
   117b7:	90                   	nop
   117b8:	c9                   	leave  
   117b9:	c3                   	ret    

000117ba <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   117ba:	55                   	push   %ebp
   117bb:	89 e5                	mov    %esp,%ebp
   117bd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   117c0:	83 ec 08             	sub    $0x8,%esp
   117c3:	68 2d 34 01 00       	push   $0x1342d
   117c8:	ff 75 08             	pushl  0x8(%ebp)
   117cb:	e8 3c ff ff ff       	call   1170c <do_default_handler>
   117d0:	83 c4 10             	add    $0x10,%esp
}   
   117d3:	90                   	nop
   117d4:	c9                   	leave  
   117d5:	c3                   	ret    

000117d6 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   117d6:	55                   	push   %ebp
   117d7:	89 e5                	mov    %esp,%ebp
   117d9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   117dc:	83 ec 08             	sub    $0x8,%esp
   117df:	68 43 34 01 00       	push   $0x13443
   117e4:	ff 75 08             	pushl  0x8(%ebp)
   117e7:	e8 20 ff ff ff       	call   1170c <do_default_handler>
   117ec:	83 c4 10             	add    $0x10,%esp
}   
   117ef:	90                   	nop
   117f0:	c9                   	leave  
   117f1:	c3                   	ret    

000117f2 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   117f2:	55                   	push   %ebp
   117f3:	89 e5                	mov    %esp,%ebp
   117f5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   117f8:	83 ec 08             	sub    $0x8,%esp
   117fb:	68 57 34 01 00       	push   $0x13457
   11800:	ff 75 08             	pushl  0x8(%ebp)
   11803:	e8 04 ff ff ff       	call   1170c <do_default_handler>
   11808:	83 c4 10             	add    $0x10,%esp
}   
   1180b:	90                   	nop
   1180c:	c9                   	leave  
   1180d:	c3                   	ret    

0001180e <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   1180e:	55                   	push   %ebp
   1180f:	89 e5                	mov    %esp,%ebp
   11811:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   11814:	83 ec 08             	sub    $0x8,%esp
   11817:	68 75 34 01 00       	push   $0x13475
   1181c:	ff 75 08             	pushl  0x8(%ebp)
   1181f:	e8 e8 fe ff ff       	call   1170c <do_default_handler>
   11824:	83 c4 10             	add    $0x10,%esp
}   
   11827:	90                   	nop
   11828:	c9                   	leave  
   11829:	c3                   	ret    

0001182a <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   1182a:	55                   	push   %ebp
   1182b:	89 e5                	mov    %esp,%ebp
   1182d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   11830:	83 ec 08             	sub    $0x8,%esp
   11833:	68 8f 34 01 00       	push   $0x1348f
   11838:	ff 75 08             	pushl  0x8(%ebp)
   1183b:	e8 cc fe ff ff       	call   1170c <do_default_handler>
   11840:	83 c4 10             	add    $0x10,%esp
}   
   11843:	90                   	nop
   11844:	c9                   	leave  
   11845:	c3                   	ret    

00011846 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   11846:	55                   	push   %ebp
   11847:	89 e5                	mov    %esp,%ebp
   11849:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   1184c:	83 ec 08             	sub    $0x8,%esp
   1184f:	68 ab 34 01 00       	push   $0x134ab
   11854:	ff 75 08             	pushl  0x8(%ebp)
   11857:	e8 b0 fe ff ff       	call   1170c <do_default_handler>
   1185c:	83 c4 10             	add    $0x10,%esp
}   
   1185f:	90                   	nop
   11860:	c9                   	leave  
   11861:	c3                   	ret    

00011862 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11862:	55                   	push   %ebp
   11863:	89 e5                	mov    %esp,%ebp
   11865:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   11868:	83 ec 08             	sub    $0x8,%esp
   1186b:	68 c3 34 01 00       	push   $0x134c3
   11870:	ff 75 08             	pushl  0x8(%ebp)
   11873:	e8 94 fe ff ff       	call   1170c <do_default_handler>
   11878:	83 c4 10             	add    $0x10,%esp
}   
   1187b:	90                   	nop
   1187c:	c9                   	leave  
   1187d:	c3                   	ret    

0001187e <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   1187e:	55                   	push   %ebp
   1187f:	89 e5                	mov    %esp,%ebp
   11881:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11884:	83 ec 08             	sub    $0x8,%esp
   11887:	68 dc 34 01 00       	push   $0x134dc
   1188c:	ff 75 08             	pushl  0x8(%ebp)
   1188f:	e8 78 fe ff ff       	call   1170c <do_default_handler>
   11894:	83 c4 10             	add    $0x10,%esp
}   
   11897:	90                   	nop
   11898:	c9                   	leave  
   11899:	c3                   	ret    

0001189a <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   1189a:	55                   	push   %ebp
   1189b:	89 e5                	mov    %esp,%ebp
   1189d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   118a0:	83 ec 08             	sub    $0x8,%esp
   118a3:	68 fc 34 01 00       	push   $0x134fc
   118a8:	ff 75 08             	pushl  0x8(%ebp)
   118ab:	e8 5c fe ff ff       	call   1170c <do_default_handler>
   118b0:	83 c4 10             	add    $0x10,%esp
}   
   118b3:	90                   	nop
   118b4:	c9                   	leave  
   118b5:	c3                   	ret    

000118b6 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   118b6:	55                   	push   %ebp
   118b7:	89 e5                	mov    %esp,%ebp
   118b9:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   118bc:	83 ec 0c             	sub    $0xc,%esp
   118bf:	68 1c 35 01 00       	push   $0x1351c
   118c4:	e8 04 17 00 00       	call   12fcd <log_printf>
   118c9:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   118cc:	83 ec 0c             	sub    $0xc,%esp
   118cf:	68 40 35 01 00       	push   $0x13540
   118d4:	e8 f4 16 00 00       	call   12fcd <log_printf>
   118d9:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   118dc:	8b 45 08             	mov    0x8(%ebp),%eax
   118df:	8b 40 34             	mov    0x34(%eax),%eax
   118e2:	83 e0 01             	and    $0x1,%eax
   118e5:	85 c0                	test   %eax,%eax
   118e7:	74 12                	je     118fb <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   118e9:	83 ec 0c             	sub    $0xc,%esp
   118ec:	68 6c 35 01 00       	push   $0x1356c
   118f1:	e8 d7 16 00 00       	call   12fcd <log_printf>
   118f6:	83 c4 10             	add    $0x10,%esp
   118f9:	eb 10                	jmp    1190b <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } 
    else {
        log_printf("the exception occurred during delivery of a"
   118fb:	83 ec 0c             	sub    $0xc,%esp
   118fe:	68 e8 35 01 00       	push   $0x135e8
   11903:	e8 c5 16 00 00       	call   12fcd <log_printf>
   11908:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   1190b:	8b 45 08             	mov    0x8(%ebp),%eax
   1190e:	8b 40 34             	mov    0x34(%eax),%eax
   11911:	83 e0 02             	and    $0x2,%eax
   11914:	85 c0                	test   %eax,%eax
   11916:	74 12                	je     1192a <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   11918:	83 ec 0c             	sub    $0xc,%esp
   1191b:	68 40 36 01 00       	push   $0x13640
   11920:	e8 a8 16 00 00       	call   12fcd <log_printf>
   11925:	83 c4 10             	add    $0x10,%esp
   11928:	eb 10                	jmp    1193a <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } 
    else {
        log_printf("the index refers to a descriptor in the GDT");
   1192a:	83 ec 0c             	sub    $0xc,%esp
   1192d:	68 8c 36 01 00       	push   $0x1368c
   11932:	e8 96 16 00 00       	call   12fcd <log_printf>
   11937:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   1193a:	8b 45 08             	mov    0x8(%ebp),%eax
   1193d:	8b 40 34             	mov    0x34(%eax),%eax
   11940:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11945:	83 ec 08             	sub    $0x8,%esp
   11948:	50                   	push   %eax
   11949:	68 b8 36 01 00       	push   $0x136b8
   1194e:	e8 7a 16 00 00       	call   12fcd <log_printf>
   11953:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11956:	83 ec 0c             	sub    $0xc,%esp
   11959:	ff 75 08             	pushl  0x8(%ebp)
   1195c:	e8 bb fc ff ff       	call   1161c <dump_core_regs>
   11961:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11964:	e8 91 fc ff ff       	call   115fa <hlt>
   11969:	eb f9                	jmp    11964 <do_handler_general_protection+0xae>

0001196b <do_handler_page_fault>:
    }	
}   


// Exception: Page Fault
void do_handler_page_fault(exception_frame_t* frame) {
   1196b:	55                   	push   %ebp
   1196c:	89 e5                	mov    %esp,%ebp
   1196e:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11971:	83 ec 0c             	sub    $0xc,%esp
   11974:	68 1c 35 01 00       	push   $0x1351c
   11979:	e8 4f 16 00 00       	call   12fcd <log_printf>
   1197e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: Page fault.");
   11981:	83 ec 0c             	sub    $0xc,%esp
   11984:	68 ca 36 01 00       	push   $0x136ca
   11989:	e8 3f 16 00 00       	call   12fcd <log_printf>
   1198e:	83 c4 10             	add    $0x10,%esp
    // 是否页不存在
    // The fault was caused by a non-present page.
    if (frame->error_code & ERR_PAGE_P) {
   11991:	8b 45 08             	mov    0x8(%ebp),%eax
   11994:	8b 40 34             	mov    0x34(%eax),%eax
   11997:	83 e0 01             	and    $0x1,%eax
   1199a:	85 c0                	test   %eax,%eax
   1199c:	74 18                	je     119b6 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: %x.", read_cr2());
   1199e:	e8 46 fc ff ff       	call   115e9 <read_cr2>
   119a3:	83 ec 08             	sub    $0x8,%esp
   119a6:	50                   	push   %eax
   119a7:	68 e8 36 01 00       	push   $0x136e8
   119ac:	e8 1c 16 00 00       	call   12fcd <log_printf>
   119b1:	83 c4 10             	add    $0x10,%esp
   119b4:	eb 16                	jmp    119cc <do_handler_page_fault+0x61>
    } 
    else {
        log_printf("\tThe fault was caused by a non-present page. %x", read_cr2());
   119b6:	e8 2e fc ff ff       	call   115e9 <read_cr2>
   119bb:	83 ec 08             	sub    $0x8,%esp
   119be:	50                   	push   %eax
   119bf:	68 10 37 01 00       	push   $0x13710
   119c4:	e8 04 16 00 00       	call   12fcd <log_printf>
   119c9:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_WR) {
   119cc:	8b 45 08             	mov    0x8(%ebp),%eax
   119cf:	8b 40 34             	mov    0x34(%eax),%eax
   119d2:	83 e0 02             	and    $0x2,%eax
   119d5:	85 c0                	test   %eax,%eax
   119d7:	74 12                	je     119eb <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   119d9:	83 ec 0c             	sub    $0xc,%esp
   119dc:	68 40 37 01 00       	push   $0x13740
   119e1:	e8 e7 15 00 00       	call   12fcd <log_printf>
   119e6:	83 c4 10             	add    $0x10,%esp
   119e9:	eb 10                	jmp    119fb <do_handler_page_fault+0x90>
    } 
    else {
        log_printf("\tThe access causing the fault was a write.");
   119eb:	83 ec 0c             	sub    $0xc,%esp
   119ee:	68 6c 37 01 00       	push   $0x1376c
   119f3:	e8 d5 15 00 00       	call   12fcd <log_printf>
   119f8:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   119fb:	8b 45 08             	mov    0x8(%ebp),%eax
   119fe:	8b 40 34             	mov    0x34(%eax),%eax
   11a01:	83 e0 02             	and    $0x2,%eax
   11a04:	85 c0                	test   %eax,%eax
   11a06:	74 12                	je     11a1a <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   11a08:	83 ec 0c             	sub    $0xc,%esp
   11a0b:	68 98 37 01 00       	push   $0x13798
   11a10:	e8 b8 15 00 00       	call   12fcd <log_printf>
   11a15:	83 c4 10             	add    $0x10,%esp
   11a18:	eb 10                	jmp    11a2a <do_handler_page_fault+0xbf>
    } 
    else {
        log_printf("\tA user-mode access caused the fault.");
   11a1a:	83 ec 0c             	sub    $0xc,%esp
   11a1d:	68 c4 37 01 00       	push   $0x137c4
   11a22:	e8 a6 15 00 00       	call   12fcd <log_printf>
   11a27:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11a2a:	83 ec 0c             	sub    $0xc,%esp
   11a2d:	ff 75 08             	pushl  0x8(%ebp)
   11a30:	e8 e7 fb ff ff       	call   1161c <dump_core_regs>
   11a35:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11a38:	e8 bd fb ff ff       	call   115fa <hlt>
   11a3d:	eb f9                	jmp    11a38 <do_handler_page_fault+0xcd>

00011a3f <do_handler_floating_point_error>:
    }
}   


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11a3f:	55                   	push   %ebp
   11a40:	89 e5                	mov    %esp,%ebp
   11a42:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11a45:	83 ec 08             	sub    $0x8,%esp
   11a48:	68 ec 37 01 00       	push   $0x137ec
   11a4d:	ff 75 08             	pushl  0x8(%ebp)
   11a50:	e8 b7 fc ff ff       	call   1170c <do_default_handler>
   11a55:	83 c4 10             	add    $0x10,%esp
}   
   11a58:	90                   	nop
   11a59:	c9                   	leave  
   11a5a:	c3                   	ret    

00011a5b <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   11a5b:	55                   	push   %ebp
   11a5c:	89 e5                	mov    %esp,%ebp
   11a5e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   11a61:	83 ec 08             	sub    $0x8,%esp
   11a64:	68 0c 38 01 00       	push   $0x1380c
   11a69:	ff 75 08             	pushl  0x8(%ebp)
   11a6c:	e8 9b fc ff ff       	call   1170c <do_default_handler>
   11a71:	83 c4 10             	add    $0x10,%esp
}   
   11a74:	90                   	nop
   11a75:	c9                   	leave  
   11a76:	c3                   	ret    

00011a77 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   11a77:	55                   	push   %ebp
   11a78:	89 e5                	mov    %esp,%ebp
   11a7a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   11a7d:	83 ec 08             	sub    $0x8,%esp
   11a80:	68 26 38 01 00       	push   $0x13826
   11a85:	ff 75 08             	pushl  0x8(%ebp)
   11a88:	e8 7f fc ff ff       	call   1170c <do_default_handler>
   11a8d:	83 c4 10             	add    $0x10,%esp
}   
   11a90:	90                   	nop
   11a91:	c9                   	leave  
   11a92:	c3                   	ret    

00011a93 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   11a93:	55                   	push   %ebp
   11a94:	89 e5                	mov    %esp,%ebp
   11a96:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   11a99:	83 ec 08             	sub    $0x8,%esp
   11a9c:	68 40 38 01 00       	push   $0x13840
   11aa1:	ff 75 08             	pushl  0x8(%ebp)
   11aa4:	e8 63 fc ff ff       	call   1170c <do_default_handler>
   11aa9:	83 c4 10             	add    $0x10,%esp
}
   11aac:	90                   	nop
   11aad:	c9                   	leave  
   11aae:	c3                   	ret    

00011aaf <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11aaf:	55                   	push   %ebp
   11ab0:	89 e5                	mov    %esp,%ebp
   11ab2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11ab5:	83 ec 08             	sub    $0x8,%esp
   11ab8:	68 6c 38 01 00       	push   $0x1386c
   11abd:	ff 75 08             	pushl  0x8(%ebp)
   11ac0:	e8 47 fc ff ff       	call   1170c <do_default_handler>
   11ac5:	83 c4 10             	add    $0x10,%esp
}
   11ac8:	90                   	nop
   11ac9:	c9                   	leave  
   11aca:	c3                   	ret    

00011acb <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   11acb:	55                   	push   %ebp
   11acc:	89 e5                	mov    %esp,%ebp
   11ace:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11ad1:	83 ec 08             	sub    $0x8,%esp
   11ad4:	68 90 38 01 00       	push   $0x13890
   11ad9:	ff 75 08             	pushl  0x8(%ebp)
   11adc:	e8 2b fc ff ff       	call   1170c <do_default_handler>
   11ae1:	83 c4 10             	add    $0x10,%esp
}
   11ae4:	90                   	nop
   11ae5:	c9                   	leave  
   11ae6:	c3                   	ret    

00011ae7 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11ae7:	55                   	push   %ebp
   11ae8:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11aea:	6a 11                	push   $0x11
   11aec:	6a 20                	push   $0x20
   11aee:	e8 a1 fa ff ff       	call   11594 <outb>
   11af3:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11af6:	6a 20                	push   $0x20
   11af8:	6a 21                	push   $0x21
   11afa:	e8 95 fa ff ff       	call   11594 <outb>
   11aff:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11b02:	6a 04                	push   $0x4
   11b04:	6a 21                	push   $0x21
   11b06:	e8 89 fa ff ff       	call   11594 <outb>
   11b0b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11b0e:	6a 01                	push   $0x1
   11b10:	6a 21                	push   $0x21
   11b12:	e8 7d fa ff ff       	call   11594 <outb>
   11b17:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11b1a:	6a 11                	push   $0x11
   11b1c:	68 a0 00 00 00       	push   $0xa0
   11b21:	e8 6e fa ff ff       	call   11594 <outb>
   11b26:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11b29:	6a 28                	push   $0x28
   11b2b:	68 a1 00 00 00       	push   $0xa1
   11b30:	e8 5f fa ff ff       	call   11594 <outb>
   11b35:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   11b38:	6a 02                	push   $0x2
   11b3a:	68 a1 00 00 00       	push   $0xa1
   11b3f:	e8 50 fa ff ff       	call   11594 <outb>
   11b44:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11b47:	6a 01                	push   $0x1
   11b49:	68 a1 00 00 00       	push   $0xa1
   11b4e:	e8 41 fa ff ff       	call   11594 <outb>
   11b53:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   11b56:	68 fb 00 00 00       	push   $0xfb
   11b5b:	6a 21                	push   $0x21
   11b5d:	e8 32 fa ff ff       	call   11594 <outb>
   11b62:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   11b65:	68 ff 00 00 00       	push   $0xff
   11b6a:	68 a1 00 00 00       	push   $0xa1
   11b6f:	e8 20 fa ff ff       	call   11594 <outb>
   11b74:	83 c4 08             	add    $0x8,%esp
}
   11b77:	90                   	nop
   11b78:	c9                   	leave  
   11b79:	c3                   	ret    

00011b7a <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   11b7a:	55                   	push   %ebp
   11b7b:	89 e5                	mov    %esp,%ebp
   11b7d:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11b80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b87:	eb 25                	jmp    11bae <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11b89:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b91:	c1 e0 03             	shl    $0x3,%eax
   11b94:	05 00 8a 01 00       	add    $0x18a00,%eax
   11b99:	68 00 8e 00 00       	push   $0x8e00
   11b9e:	52                   	push   %edx
   11b9f:	6a 08                	push   $0x8
   11ba1:	50                   	push   %eax
   11ba2:	e8 37 f8 ff ff       	call   113de <gate_desc_set>
   11ba7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   11baa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bae:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11bb2:	7e d5                	jle    11b89 <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11bb4:	83 ec 08             	sub    $0x8,%esp
   11bb7:	68 4a 00 01 00       	push   $0x1004a
   11bbc:	6a 00                	push   $0x0
   11bbe:	e8 77 01 00 00       	call   11d3a <irq_install>
   11bc3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11bc6:	83 ec 08             	sub    $0x8,%esp
   11bc9:	68 69 00 01 00       	push   $0x10069
   11bce:	6a 01                	push   $0x1
   11bd0:	e8 65 01 00 00       	call   11d3a <irq_install>
   11bd5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   11bd8:	83 ec 08             	sub    $0x8,%esp
   11bdb:	68 88 00 01 00       	push   $0x10088
   11be0:	6a 02                	push   $0x2
   11be2:	e8 53 01 00 00       	call   11d3a <irq_install>
   11be7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   11bea:	83 ec 08             	sub    $0x8,%esp
   11bed:	68 a7 00 01 00       	push   $0x100a7
   11bf2:	6a 03                	push   $0x3
   11bf4:	e8 41 01 00 00       	call   11d3a <irq_install>
   11bf9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   11bfc:	83 ec 08             	sub    $0x8,%esp
   11bff:	68 c6 00 01 00       	push   $0x100c6
   11c04:	6a 04                	push   $0x4
   11c06:	e8 2f 01 00 00       	call   11d3a <irq_install>
   11c0b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11c0e:	83 ec 08             	sub    $0x8,%esp
   11c11:	68 e5 00 01 00       	push   $0x100e5
   11c16:	6a 05                	push   $0x5
   11c18:	e8 1d 01 00 00       	call   11d3a <irq_install>
   11c1d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11c20:	83 ec 08             	sub    $0x8,%esp
   11c23:	68 04 01 01 00       	push   $0x10104
   11c28:	6a 06                	push   $0x6
   11c2a:	e8 0b 01 00 00       	call   11d3a <irq_install>
   11c2f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11c32:	83 ec 08             	sub    $0x8,%esp
   11c35:	68 23 01 01 00       	push   $0x10123
   11c3a:	6a 07                	push   $0x7
   11c3c:	e8 f9 00 00 00       	call   11d3a <irq_install>
   11c41:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11c44:	83 ec 08             	sub    $0x8,%esp
   11c47:	68 42 01 01 00       	push   $0x10142
   11c4c:	6a 08                	push   $0x8
   11c4e:	e8 e7 00 00 00       	call   11d3a <irq_install>
   11c53:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   11c56:	83 ec 08             	sub    $0x8,%esp
   11c59:	68 5f 01 01 00       	push   $0x1015f
   11c5e:	6a 0a                	push   $0xa
   11c60:	e8 d5 00 00 00       	call   11d3a <irq_install>
   11c65:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   11c68:	83 ec 08             	sub    $0x8,%esp
   11c6b:	68 7c 01 01 00       	push   $0x1017c
   11c70:	6a 0b                	push   $0xb
   11c72:	e8 c3 00 00 00       	call   11d3a <irq_install>
   11c77:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   11c7a:	83 ec 08             	sub    $0x8,%esp
   11c7d:	68 99 01 01 00       	push   $0x10199
   11c82:	6a 0c                	push   $0xc
   11c84:	e8 b1 00 00 00       	call   11d3a <irq_install>
   11c89:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   11c8c:	83 ec 08             	sub    $0x8,%esp
   11c8f:	68 b8 01 01 00       	push   $0x101b8
   11c94:	6a 0d                	push   $0xd
   11c96:	e8 9f 00 00 00       	call   11d3a <irq_install>
   11c9b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   11c9e:	83 ec 08             	sub    $0x8,%esp
   11ca1:	68 d5 01 01 00       	push   $0x101d5
   11ca6:	6a 0e                	push   $0xe
   11ca8:	e8 8d 00 00 00       	call   11d3a <irq_install>
   11cad:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11cb0:	83 ec 08             	sub    $0x8,%esp
   11cb3:	68 f2 01 01 00       	push   $0x101f2
   11cb8:	6a 10                	push   $0x10
   11cba:	e8 7b 00 00 00       	call   11d3a <irq_install>
   11cbf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11cc2:	83 ec 08             	sub    $0x8,%esp
   11cc5:	68 11 02 01 00       	push   $0x10211
   11cca:	6a 11                	push   $0x11
   11ccc:	e8 69 00 00 00       	call   11d3a <irq_install>
   11cd1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11cd4:	83 ec 08             	sub    $0x8,%esp
   11cd7:	68 2e 02 01 00       	push   $0x1022e
   11cdc:	6a 12                	push   $0x12
   11cde:	e8 57 00 00 00       	call   11d3a <irq_install>
   11ce3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11ce6:	83 ec 08             	sub    $0x8,%esp
   11ce9:	68 4d 02 01 00       	push   $0x1024d
   11cee:	6a 13                	push   $0x13
   11cf0:	e8 45 00 00 00       	call   11d3a <irq_install>
   11cf5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   11cf8:	83 ec 08             	sub    $0x8,%esp
   11cfb:	68 6c 02 01 00       	push   $0x1026c
   11d00:	6a 14                	push   $0x14
   11d02:	e8 33 00 00 00       	call   11d3a <irq_install>
   11d07:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   11d0a:	83 ec 08             	sub    $0x8,%esp
   11d0d:	68 8b 02 01 00       	push   $0x1028b
   11d12:	6a 15                	push   $0x15
   11d14:	e8 21 00 00 00       	call   11d3a <irq_install>
   11d19:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11d1c:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11d21:	83 ec 08             	sub    $0x8,%esp
   11d24:	68 00 04 00 00       	push   $0x400
   11d29:	50                   	push   %eax
   11d2a:	e8 92 f8 ff ff       	call   115c1 <lidt>
   11d2f:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11d32:	e8 b0 fd ff ff       	call   11ae7 <init_pic>
}
   11d37:	90                   	nop
   11d38:	c9                   	leave  
   11d39:	c3                   	ret    

00011d3a <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   11d3a:	55                   	push   %ebp
   11d3b:	89 e5                	mov    %esp,%ebp
   11d3d:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11d40:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11d44:	7e 07                	jle    11d4d <irq_install+0x13>
        return -1;
   11d46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d4b:	eb 20                	jmp    11d6d <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d50:	8b 55 08             	mov    0x8(%ebp),%edx
   11d53:	c1 e2 03             	shl    $0x3,%edx
   11d56:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   11d5c:	68 00 8e 00 00       	push   $0x8e00
   11d61:	50                   	push   %eax
   11d62:	6a 08                	push   $0x8
   11d64:	52                   	push   %edx
   11d65:	e8 74 f6 ff ff       	call   113de <gate_desc_set>
   11d6a:	83 c4 10             	add    $0x10,%esp
}
   11d6d:	c9                   	leave  
   11d6e:	c3                   	ret    

00011d6f <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   11d6f:	55                   	push   %ebp
   11d70:	89 e5                	mov    %esp,%ebp
   11d72:	53                   	push   %ebx
   11d73:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11d76:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11d7a:	7e 78                	jle    11df4 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11d7c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11d80:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11d84:	7f 32                	jg     11db8 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   11d86:	6a 21                	push   $0x21
   11d88:	e8 ea f7 ff ff       	call   11577 <inb>
   11d8d:	83 c4 04             	add    $0x4,%esp
   11d90:	89 c2                	mov    %eax,%edx
   11d92:	8b 45 08             	mov    0x8(%ebp),%eax
   11d95:	bb 01 00 00 00       	mov    $0x1,%ebx
   11d9a:	89 c1                	mov    %eax,%ecx
   11d9c:	d3 e3                	shl    %cl,%ebx
   11d9e:	89 d8                	mov    %ebx,%eax
   11da0:	f7 d0                	not    %eax
   11da2:	21 d0                	and    %edx,%eax
   11da4:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11da7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11dab:	50                   	push   %eax
   11dac:	6a 21                	push   $0x21
   11dae:	e8 e1 f7 ff ff       	call   11594 <outb>
   11db3:	83 c4 08             	add    $0x8,%esp
   11db6:	eb 3d                	jmp    11df5 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11db8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11dbc:	68 a1 00 00 00       	push   $0xa1
   11dc1:	e8 b1 f7 ff ff       	call   11577 <inb>
   11dc6:	83 c4 04             	add    $0x4,%esp
   11dc9:	89 c2                	mov    %eax,%edx
   11dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   11dce:	bb 01 00 00 00       	mov    $0x1,%ebx
   11dd3:	89 c1                	mov    %eax,%ecx
   11dd5:	d3 e3                	shl    %cl,%ebx
   11dd7:	89 d8                	mov    %ebx,%eax
   11dd9:	f7 d0                	not    %eax
   11ddb:	21 d0                	and    %edx,%eax
   11ddd:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11de0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11de4:	50                   	push   %eax
   11de5:	68 a1 00 00 00       	push   $0xa1
   11dea:	e8 a5 f7 ff ff       	call   11594 <outb>
   11def:	83 c4 08             	add    $0x8,%esp
   11df2:	eb 01                	jmp    11df5 <irq_enable+0x86>
        return;
   11df4:	90                   	nop
    }
}
   11df5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11df8:	c9                   	leave  
   11df9:	c3                   	ret    

00011dfa <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11dfa:	55                   	push   %ebp
   11dfb:	89 e5                	mov    %esp,%ebp
   11dfd:	53                   	push   %ebx
   11dfe:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11e01:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e05:	7e 74                	jle    11e7b <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11e07:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11e0b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e0f:	7f 30                	jg     11e41 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11e11:	6a 21                	push   $0x21
   11e13:	e8 5f f7 ff ff       	call   11577 <inb>
   11e18:	83 c4 04             	add    $0x4,%esp
   11e1b:	89 c3                	mov    %eax,%ebx
   11e1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e20:	ba 01 00 00 00       	mov    $0x1,%edx
   11e25:	89 c1                	mov    %eax,%ecx
   11e27:	d3 e2                	shl    %cl,%edx
   11e29:	89 d0                	mov    %edx,%eax
   11e2b:	09 d8                	or     %ebx,%eax
   11e2d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11e30:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e34:	50                   	push   %eax
   11e35:	6a 21                	push   $0x21
   11e37:	e8 58 f7 ff ff       	call   11594 <outb>
   11e3c:	83 c4 08             	add    $0x8,%esp
   11e3f:	eb 3b                	jmp    11e7c <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11e41:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11e45:	68 a1 00 00 00       	push   $0xa1
   11e4a:	e8 28 f7 ff ff       	call   11577 <inb>
   11e4f:	83 c4 04             	add    $0x4,%esp
   11e52:	89 c3                	mov    %eax,%ebx
   11e54:	8b 45 08             	mov    0x8(%ebp),%eax
   11e57:	ba 01 00 00 00       	mov    $0x1,%edx
   11e5c:	89 c1                	mov    %eax,%ecx
   11e5e:	d3 e2                	shl    %cl,%edx
   11e60:	89 d0                	mov    %edx,%eax
   11e62:	09 d8                	or     %ebx,%eax
   11e64:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11e67:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11e6b:	50                   	push   %eax
   11e6c:	68 a1 00 00 00       	push   $0xa1
   11e71:	e8 1e f7 ff ff       	call   11594 <outb>
   11e76:	83 c4 08             	add    $0x8,%esp
   11e79:	eb 01                	jmp    11e7c <irq_disable+0x82>
        return;
   11e7b:	90                   	nop
    }
}
   11e7c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e7f:	c9                   	leave  
   11e80:	c3                   	ret    

00011e81 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11e81:	55                   	push   %ebp
   11e82:	89 e5                	mov    %esp,%ebp
    cli();
   11e84:	e8 2a f7 ff ff       	call   115b3 <cli>
}
   11e89:	90                   	nop
   11e8a:	5d                   	pop    %ebp
   11e8b:	c3                   	ret    

00011e8c <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11e8c:	55                   	push   %ebp
   11e8d:	89 e5                	mov    %esp,%ebp
    sti();
   11e8f:	e8 26 f7 ff ff       	call   115ba <sti>
}
   11e94:	90                   	nop
   11e95:	5d                   	pop    %ebp
   11e96:	c3                   	ret    

00011e97 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11e97:	55                   	push   %ebp
   11e98:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11e9a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11e9e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ea2:	7e 0f                	jle    11eb3 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11ea4:	6a 20                	push   $0x20
   11ea6:	68 a0 00 00 00       	push   $0xa0
   11eab:	e8 e4 f6 ff ff       	call   11594 <outb>
   11eb0:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11eb3:	6a 20                	push   $0x20
   11eb5:	6a 20                	push   $0x20
   11eb7:	e8 d8 f6 ff ff       	call   11594 <outb>
   11ebc:	83 c4 08             	add    $0x8,%esp
}
   11ebf:	90                   	nop
   11ec0:	c9                   	leave  
   11ec1:	c3                   	ret    

00011ec2 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11ec2:	55                   	push   %ebp
   11ec3:	89 e5                	mov    %esp,%ebp
   11ec5:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11ec8:	e8 34 f7 ff ff       	call   11601 <read_eflags>
   11ecd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11ed0:	e8 ac ff ff ff       	call   11e81 <irq_disable_global>
    return state;
   11ed5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ed8:	c9                   	leave  
   11ed9:	c3                   	ret    

00011eda <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11eda:	55                   	push   %ebp
   11edb:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11edd:	ff 75 08             	pushl  0x8(%ebp)
   11ee0:	e8 2c f7 ff ff       	call   11611 <write_eflags>
   11ee5:	83 c4 04             	add    $0x4,%esp
   11ee8:	90                   	nop
   11ee9:	c9                   	leave  
   11eea:	c3                   	ret    

00011eeb <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11eeb:	55                   	push   %ebp
   11eec:	89 e5                	mov    %esp,%ebp
   11eee:	83 ec 08             	sub    $0x8,%esp
   11ef1:	8b 55 08             	mov    0x8(%ebp),%edx
   11ef4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ef7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11efb:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11efe:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f02:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f06:	ee                   	out    %al,(%dx)
}
   11f07:	90                   	nop
   11f08:	c9                   	leave  
   11f09:	c3                   	ret    

00011f0a <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11f0a:	55                   	push   %ebp
   11f0b:	89 e5                	mov    %esp,%ebp
   11f0d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11f10:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11f15:	83 c0 01             	add    $0x1,%eax
   11f18:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11f1d:	83 ec 0c             	sub    $0xc,%esp
   11f20:	6a 20                	push   $0x20
   11f22:	e8 70 ff ff ff       	call   11e97 <pic_send_eoi>
   11f27:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11f2a:	e8 69 f2 ff ff       	call   11198 <task_time_tick>
}
   11f2f:	90                   	nop
   11f30:	c9                   	leave  
   11f31:	c3                   	ret    

00011f32 <init_pit>:


static void init_pit(void) {
   11f32:	55                   	push   %ebp
   11f33:	89 e5                	mov    %esp,%ebp
   11f35:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11f38:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11f3f:	6a 36                	push   $0x36
   11f41:	6a 43                	push   $0x43
   11f43:	e8 a3 ff ff ff       	call   11eeb <outb>
   11f48:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f4e:	0f b6 c0             	movzbl %al,%eax
   11f51:	50                   	push   %eax
   11f52:	6a 40                	push   $0x40
   11f54:	e8 92 ff ff ff       	call   11eeb <outb>
   11f59:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f5f:	c1 e8 08             	shr    $0x8,%eax
   11f62:	0f b6 c0             	movzbl %al,%eax
   11f65:	50                   	push   %eax
   11f66:	6a 40                	push   $0x40
   11f68:	e8 7e ff ff ff       	call   11eeb <outb>
   11f6d:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11f70:	83 ec 08             	sub    $0x8,%esp
   11f73:	68 a8 02 01 00       	push   $0x102a8
   11f78:	6a 20                	push   $0x20
   11f7a:	e8 bb fd ff ff       	call   11d3a <irq_install>
   11f7f:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11f82:	83 ec 0c             	sub    $0xc,%esp
   11f85:	6a 20                	push   $0x20
   11f87:	e8 e3 fd ff ff       	call   11d6f <irq_enable>
   11f8c:	83 c4 10             	add    $0x10,%esp
}
   11f8f:	90                   	nop
   11f90:	c9                   	leave  
   11f91:	c3                   	ret    

00011f92 <timer_init>:

void timer_init(void) {
   11f92:	55                   	push   %ebp
   11f93:	89 e5                	mov    %esp,%ebp
   11f95:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11f98:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   11f9f:	00 00 00 
    init_pit();
   11fa2:	e8 8b ff ff ff       	call   11f32 <init_pit>
   11fa7:	90                   	nop
   11fa8:	c9                   	leave  
   11fa9:	c3                   	ret    

00011faa <list_size>:
static inline int list_size(list_t* list) {
   11faa:	55                   	push   %ebp
   11fab:	89 e5                	mov    %esp,%ebp
    return list->count;
   11fad:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb0:	8b 40 08             	mov    0x8(%eax),%eax
}
   11fb3:	5d                   	pop    %ebp
   11fb4:	c3                   	ret    

00011fb5 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11fb5:	55                   	push   %ebp
   11fb6:	89 e5                	mov    %esp,%ebp
    return list->first;
   11fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbb:	8b 00                	mov    (%eax),%eax
}
   11fbd:	5d                   	pop    %ebp
   11fbe:	c3                   	ret    

00011fbf <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11fbf:	55                   	push   %ebp
   11fc0:	89 e5                	mov    %esp,%ebp
    return list->last;
   11fc2:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc5:	8b 40 04             	mov    0x4(%eax),%eax
}
   11fc8:	5d                   	pop    %ebp
   11fc9:	c3                   	ret    

00011fca <kernel_init>:
#include "tools/list.h"
#include "ipc/sem.h"
#include "core/memory.h"


void kernel_init(boot_info_t* boot_info) {
   11fca:	55                   	push   %ebp
   11fcb:	89 e5                	mov    %esp,%ebp
   11fcd:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd3:	8b 40 50             	mov    0x50(%eax),%eax
   11fd6:	85 c0                	test   %eax,%eax
   11fd8:	75 19                	jne    11ff3 <kernel_init+0x29>
   11fda:	68 b8 38 01 00       	push   $0x138b8
   11fdf:	68 a8 39 01 00       	push   $0x139a8
   11fe4:	6a 12                	push   $0x12
   11fe6:	68 dc 38 01 00       	push   $0x138dc
   11feb:	e8 d3 0c 00 00       	call   12cc3 <pannic>
   11ff0:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11ff3:	90                   	nop


    log_init();
   11ff4:	e8 32 0f 00 00       	call   12f2b <log_init>

    memory_init(boot_info);
   11ff9:	83 ec 0c             	sub    $0xc,%esp
   11ffc:	ff 75 08             	pushl  0x8(%ebp)
   11fff:	e8 7f e8 ff ff       	call   10883 <memory_init>
   12004:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   12007:	e8 86 f4 ff ff       	call   11492 <cpu_init>


    irq_init();
   1200c:	e8 69 fb ff ff       	call   11b7a <irq_init>
    timer_init();
   12011:	e8 7c ff ff ff       	call   11f92 <timer_init>

    task_manager_init();
   12016:	e8 8d ee ff ff       	call   10ea8 <task_manager_init>
}
   1201b:	90                   	nop
   1201c:	c9                   	leave  
   1201d:	c3                   	ret    

0001201e <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   1201e:	55                   	push   %ebp
   1201f:	89 e5                	mov    %esp,%ebp
   12021:	56                   	push   %esi
   12022:	53                   	push   %ebx
   12023:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   12026:	83 ec 0c             	sub    $0xc,%esp
   12029:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1202c:	50                   	push   %eax
   1202d:	e8 da 0c 00 00       	call   12d0c <list_init>
   12032:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   12035:	83 ec 0c             	sub    $0xc,%esp
   12038:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1203b:	50                   	push   %eax
   1203c:	e8 69 ff ff ff       	call   11faa <list_size>
   12041:	83 c4 10             	add    $0x10,%esp
   12044:	89 c6                	mov    %eax,%esi
   12046:	83 ec 0c             	sub    $0xc,%esp
   12049:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1204c:	50                   	push   %eax
   1204d:	e8 6d ff ff ff       	call   11fbf <list_last>
   12052:	83 c4 10             	add    $0x10,%esp
   12055:	89 c3                	mov    %eax,%ebx
   12057:	83 ec 0c             	sub    $0xc,%esp
   1205a:	8d 45 d0             	lea    -0x30(%ebp),%eax
   1205d:	50                   	push   %eax
   1205e:	e8 52 ff ff ff       	call   11fb5 <list_first>
   12063:	83 c4 10             	add    $0x10,%esp
   12066:	56                   	push   %esi
   12067:	53                   	push   %ebx
   12068:	50                   	push   %eax
   12069:	68 24 39 01 00       	push   $0x13924
   1206e:	e8 5a 0f 00 00       	call   12fcd <log_printf>
   12073:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   12076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1207d:	eb 3b                	jmp    120ba <link_test+0x9c>
        list_node_t* node = &nodes[i];
   1207f:	8d 45 a8             	lea    -0x58(%ebp),%eax
   12082:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12085:	c1 e2 03             	shl    $0x3,%edx
   12088:	01 d0                	add    %edx,%eax
   1208a:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   1208d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12090:	83 ec 04             	sub    $0x4,%esp
   12093:	50                   	push   %eax
   12094:	ff 75 f4             	pushl  -0xc(%ebp)
   12097:	68 4d 39 01 00       	push   $0x1394d
   1209c:	e8 2c 0f 00 00       	call   12fcd <log_printf>
   120a1:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   120a4:	83 ec 08             	sub    $0x8,%esp
   120a7:	ff 75 dc             	pushl  -0x24(%ebp)
   120aa:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120ad:	50                   	push   %eax
   120ae:	e8 7c 0c 00 00       	call   12d2f <list_insert_front>
   120b3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   120b6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   120ba:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   120be:	7e bf                	jle    1207f <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   120c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   120c7:	eb 33                	jmp    120fc <link_test+0xde>
        list_remove_front(&list);
   120c9:	83 ec 0c             	sub    $0xc,%esp
   120cc:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120cf:	50                   	push   %eax
   120d0:	e8 1c 0d 00 00       	call   12df1 <list_remove_front>
   120d5:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   120d8:	83 ec 0c             	sub    $0xc,%esp
   120db:	8d 45 d0             	lea    -0x30(%ebp),%eax
   120de:	50                   	push   %eax
   120df:	e8 c6 fe ff ff       	call   11faa <list_size>
   120e4:	83 c4 10             	add    $0x10,%esp
   120e7:	83 ec 08             	sub    $0x8,%esp
   120ea:	50                   	push   %eax
   120eb:	68 55 39 01 00       	push   $0x13955
   120f0:	e8 d8 0e 00 00       	call   12fcd <log_printf>
   120f5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   120f8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   120fc:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   12100:	7e c7                	jle    120c9 <link_test+0xab>
    }

    list_init(&list);
   12102:	83 ec 0c             	sub    $0xc,%esp
   12105:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12108:	50                   	push   %eax
   12109:	e8 fe 0b 00 00       	call   12d0c <list_init>
   1210e:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   12111:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12118:	eb 3b                	jmp    12155 <link_test+0x137>
        list_node_t* node = &nodes[i];
   1211a:	8d 45 a8             	lea    -0x58(%ebp),%eax
   1211d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12120:	c1 e2 03             	shl    $0x3,%edx
   12123:	01 d0                	add    %edx,%eax
   12125:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   12128:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1212b:	83 ec 04             	sub    $0x4,%esp
   1212e:	50                   	push   %eax
   1212f:	ff 75 ec             	pushl  -0x14(%ebp)
   12132:	68 4d 39 01 00       	push   $0x1394d
   12137:	e8 91 0e 00 00       	call   12fcd <log_printf>
   1213c:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   1213f:	83 ec 08             	sub    $0x8,%esp
   12142:	ff 75 e0             	pushl  -0x20(%ebp)
   12145:	8d 45 d0             	lea    -0x30(%ebp),%eax
   12148:	50                   	push   %eax
   12149:	e8 40 0c 00 00       	call   12d8e <list_insert_back>
   1214e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   12151:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12155:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   12159:	7e bf                	jle    1211a <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   1215b:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   12162:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   12169:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   12170:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   12177:	8d 45 9c             	lea    -0x64(%ebp),%eax
   1217a:	83 c0 04             	add    $0x4,%eax
   1217d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   12180:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12184:	74 08                	je     1218e <link_test+0x170>
   12186:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12189:	83 e8 04             	sub    $0x4,%eax
   1218c:	eb 05                	jmp    12193 <link_test+0x175>
   1218e:	b8 00 00 00 00       	mov    $0x0,%eax
   12193:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   12196:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12199:	8b 00                	mov    (%eax),%eax
   1219b:	3d 56 34 12 00       	cmp    $0x123456,%eax
   121a0:	74 10                	je     121b2 <link_test+0x194>
        log_printf("error!");
   121a2:	83 ec 0c             	sub    $0xc,%esp
   121a5:	68 5a 39 01 00       	push   $0x1395a
   121aa:	e8 1e 0e 00 00       	call   12fcd <log_printf>
   121af:	83 c4 10             	add    $0x10,%esp
    }

}
   121b2:	90                   	nop
   121b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
   121b6:	5b                   	pop    %ebx
   121b7:	5e                   	pop    %esi
   121b8:	5d                   	pop    %ebp
   121b9:	c3                   	ret    

000121ba <move_to_first_task>:


void move_to_first_task(void) {
   121ba:	55                   	push   %ebp
   121bb:	89 e5                	mov    %esp,%ebp
   121bd:	56                   	push   %esi
   121be:	53                   	push   %ebx
   121bf:	83 ec 10             	sub    $0x10,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   121c2:	e8 0b ef ff ff       	call   110d2 <task_current>
   121c7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   121ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   121ce:	75 19                	jne    121e9 <move_to_first_task+0x2f>
   121d0:	68 61 39 01 00       	push   $0x13961
   121d5:	68 b4 39 01 00       	push   $0x139b4
   121da:	6a 68                	push   $0x68
   121dc:	68 dc 38 01 00       	push   $0x138dc
   121e1:	e8 dd 0a 00 00       	call   12cc3 <pannic>
   121e6:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   121e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121ec:	83 c0 48             	add    $0x48,%eax
   121ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   121f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121f5:	8b 40 50             	mov    0x50(%eax),%eax
   121f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   121fb:	8b 52 38             	mov    0x38(%edx),%edx
   121fe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   12201:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip)
   12204:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   12207:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1220a:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1220d:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   12210:	50                   	push   %eax
   12211:	52                   	push   %edx
   12212:	51                   	push   %ecx
   12213:	53                   	push   %ebx
   12214:	56                   	push   %esi
   12215:	cf                   	iret   
    );

    // far_jump((uint32_t)tss, 0);
}
   12216:	90                   	nop
   12217:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1221a:	5b                   	pop    %ebx
   1221b:	5e                   	pop    %esi
   1221c:	5d                   	pop    %ebp
   1221d:	c3                   	ret    

0001221e <init_main>:


void init_main(void) {
   1221e:	55                   	push   %ebp
   1221f:	89 e5                	mov    %esp,%ebp
   12221:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   12224:	83 ec 0c             	sub    $0xc,%esp
   12227:	68 6b 39 01 00       	push   $0x1396b
   1222c:	e8 9c 0d 00 00       	call   12fcd <log_printf>
   12231:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   12234:	83 ec 04             	sub    $0x4,%esp
   12237:	68 81 39 01 00       	push   $0x13981
   1223c:	68 86 39 01 00       	push   $0x13986
   12241:	68 8c 39 01 00       	push   $0x1398c
   12246:	e8 82 0d 00 00       	call   12fcd <log_printf>
   1224b:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   1224e:	83 ec 0c             	sub    $0xc,%esp
   12251:	6a 61                	push   $0x61
   12253:	68 56 34 12 00       	push   $0x123456
   12258:	6a 85                	push   $0xffffff85
   1225a:	68 39 30 00 00       	push   $0x3039
   1225f:	68 9b 39 01 00       	push   $0x1399b
   12264:	e8 64 0d 00 00       	call   12fcd <log_printf>
   12269:	83 c4 20             	add    $0x20,%esp

    //
    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
    //

    task_first_init();
   1226c:	e8 ea ec ff ff       	call   10f5b <task_first_init>
    move_to_first_task();
   12271:	e8 44 ff ff ff       	call   121ba <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   12276:	90                   	nop
   12277:	c9                   	leave  
   12278:	c3                   	ret    

00012279 <list_size>:
static inline int list_size(list_t* list) {
   12279:	55                   	push   %ebp
   1227a:	89 e5                	mov    %esp,%ebp
    return list->count;
   1227c:	8b 45 08             	mov    0x8(%ebp),%eax
   1227f:	8b 40 08             	mov    0x8(%eax),%eax
}
   12282:	5d                   	pop    %ebp
   12283:	c3                   	ret    

00012284 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   12284:	55                   	push   %ebp
   12285:	89 e5                	mov    %esp,%ebp
   12287:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   1228a:	8b 45 08             	mov    0x8(%ebp),%eax
   1228d:	83 ec 08             	sub    $0x8,%esp
   12290:	ff 75 0c             	pushl  0xc(%ebp)
   12293:	50                   	push   %eax
   12294:	e8 0a 05 00 00       	call   127a3 <kstrcpy>
   12299:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   1229c:	8b 45 08             	mov    0x8(%ebp),%eax
   1229f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   122a6:	8b 45 08             	mov    0x8(%ebp),%eax
   122a9:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   122b0:	8b 45 08             	mov    0x8(%ebp),%eax
   122b3:	83 c0 48             	add    $0x48,%eax
   122b6:	83 ec 0c             	sub    $0xc,%esp
   122b9:	50                   	push   %eax
   122ba:	e8 4d 0a 00 00       	call   12d0c <list_init>
   122bf:	83 c4 10             	add    $0x10,%esp
}
   122c2:	90                   	nop
   122c3:	c9                   	leave  
   122c4:	c3                   	ret    

000122c5 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   122c5:	55                   	push   %ebp
   122c6:	89 e5                	mov    %esp,%ebp
   122c8:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   122cb:	e8 f2 fb ff ff       	call   11ec2 <irq_enter_protection>
   122d0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   122d3:	e8 fa ed ff ff       	call   110d2 <task_current>
   122d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   122db:	8b 45 08             	mov    0x8(%ebp),%eax
   122de:	8b 40 44             	mov    0x44(%eax),%eax
   122e1:	85 c0                	test   %eax,%eax
   122e3:	75 15                	jne    122fa <mutex_acquire+0x35>
        mutex->locked_count = 1;
   122e5:	8b 45 08             	mov    0x8(%ebp),%eax
   122e8:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   122ef:	8b 45 08             	mov    0x8(%ebp),%eax
   122f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122f5:	89 50 40             	mov    %edx,0x40(%eax)
   122f8:	eb 48                	jmp    12342 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   122fa:	8b 45 08             	mov    0x8(%ebp),%eax
   122fd:	8b 40 40             	mov    0x40(%eax),%eax
   12300:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12303:	75 11                	jne    12316 <mutex_acquire+0x51>
        mutex->locked_count++;
   12305:	8b 45 08             	mov    0x8(%ebp),%eax
   12308:	8b 40 44             	mov    0x44(%eax),%eax
   1230b:	8d 50 01             	lea    0x1(%eax),%edx
   1230e:	8b 45 08             	mov    0x8(%ebp),%eax
   12311:	89 50 44             	mov    %edx,0x44(%eax)
   12314:	eb 2c                	jmp    12342 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   12316:	83 ec 0c             	sub    $0xc,%esp
   12319:	ff 75 f0             	pushl  -0x10(%ebp)
   1231c:	e8 43 ed ff ff       	call   11064 <task_set_blocked>
   12321:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   12324:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12327:	8d 50 34             	lea    0x34(%eax),%edx
   1232a:	8b 45 08             	mov    0x8(%ebp),%eax
   1232d:	83 c0 48             	add    $0x48,%eax
   12330:	83 ec 08             	sub    $0x8,%esp
   12333:	52                   	push   %edx
   12334:	50                   	push   %eax
   12335:	e8 54 0a 00 00       	call   12d8e <list_insert_back>
   1233a:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1233d:	e8 fb ed ff ff       	call   1113d <task_dispatch>
    }

    irq_leave_protection(state);
   12342:	83 ec 0c             	sub    $0xc,%esp
   12345:	ff 75 f4             	pushl  -0xc(%ebp)
   12348:	e8 8d fb ff ff       	call   11eda <irq_leave_protection>
   1234d:	83 c4 10             	add    $0x10,%esp
}
   12350:	90                   	nop
   12351:	c9                   	leave  
   12352:	c3                   	ret    

00012353 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   12353:	55                   	push   %ebp
   12354:	89 e5                	mov    %esp,%ebp
   12356:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12359:	e8 64 fb ff ff       	call   11ec2 <irq_enter_protection>
   1235e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12361:	e8 6c ed ff ff       	call   110d2 <task_current>
   12366:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   12369:	8b 45 08             	mov    0x8(%ebp),%eax
   1236c:	8b 40 40             	mov    0x40(%eax),%eax
   1236f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12372:	0f 85 8a 00 00 00    	jne    12402 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   12378:	8b 45 08             	mov    0x8(%ebp),%eax
   1237b:	8b 40 44             	mov    0x44(%eax),%eax
   1237e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12381:	8b 45 08             	mov    0x8(%ebp),%eax
   12384:	89 50 44             	mov    %edx,0x44(%eax)
   12387:	8b 45 08             	mov    0x8(%ebp),%eax
   1238a:	8b 40 44             	mov    0x44(%eax),%eax
   1238d:	85 c0                	test   %eax,%eax
   1238f:	75 71                	jne    12402 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   12391:	8b 45 08             	mov    0x8(%ebp),%eax
   12394:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   1239b:	8b 45 08             	mov    0x8(%ebp),%eax
   1239e:	83 c0 48             	add    $0x48,%eax
   123a1:	83 ec 0c             	sub    $0xc,%esp
   123a4:	50                   	push   %eax
   123a5:	e8 cf fe ff ff       	call   12279 <list_size>
   123aa:	83 c4 10             	add    $0x10,%esp
   123ad:	85 c0                	test   %eax,%eax
   123af:	74 51                	je     12402 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   123b1:	8b 45 08             	mov    0x8(%ebp),%eax
   123b4:	83 c0 48             	add    $0x48,%eax
   123b7:	83 ec 0c             	sub    $0xc,%esp
   123ba:	50                   	push   %eax
   123bb:	e8 31 0a 00 00       	call   12df1 <list_remove_front>
   123c0:	83 c4 10             	add    $0x10,%esp
   123c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   123c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   123ca:	74 08                	je     123d4 <mutex_release+0x81>
   123cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   123cf:	83 e8 34             	sub    $0x34,%eax
   123d2:	eb 05                	jmp    123d9 <mutex_release+0x86>
   123d4:	b8 00 00 00 00       	mov    $0x0,%eax
   123d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   123dc:	83 ec 0c             	sub    $0xc,%esp
   123df:	ff 75 e8             	pushl  -0x18(%ebp)
   123e2:	e8 49 ec ff ff       	call   11030 <task_set_ready>
   123e7:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   123ea:	8b 45 08             	mov    0x8(%ebp),%eax
   123ed:	8b 55 e8             	mov    -0x18(%ebp),%edx
   123f0:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   123f3:	8b 45 08             	mov    0x8(%ebp),%eax
   123f6:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   123fd:	e8 3b ed ff ff       	call   1113d <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   12402:	83 ec 0c             	sub    $0xc,%esp
   12405:	ff 75 f4             	pushl  -0xc(%ebp)
   12408:	e8 cd fa ff ff       	call   11eda <irq_leave_protection>
   1240d:	83 c4 10             	add    $0x10,%esp
   12410:	90                   	nop
   12411:	c9                   	leave  
   12412:	c3                   	ret    

00012413 <list_size>:
static inline int list_size(list_t* list) {
   12413:	55                   	push   %ebp
   12414:	89 e5                	mov    %esp,%ebp
    return list->count;
   12416:	8b 45 08             	mov    0x8(%ebp),%eax
   12419:	8b 40 08             	mov    0x8(%eax),%eax
}
   1241c:	5d                   	pop    %ebp
   1241d:	c3                   	ret    

0001241e <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   1241e:	55                   	push   %ebp
   1241f:	89 e5                	mov    %esp,%ebp
   12421:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12424:	8b 45 08             	mov    0x8(%ebp),%eax
   12427:	8b 55 0c             	mov    0xc(%ebp),%edx
   1242a:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1242c:	8b 45 08             	mov    0x8(%ebp),%eax
   1242f:	83 c0 04             	add    $0x4,%eax
   12432:	83 ec 0c             	sub    $0xc,%esp
   12435:	50                   	push   %eax
   12436:	e8 d1 08 00 00       	call   12d0c <list_init>
   1243b:	83 c4 10             	add    $0x10,%esp
}
   1243e:	90                   	nop
   1243f:	c9                   	leave  
   12440:	c3                   	ret    

00012441 <sem_wait>:


void sem_wait(sem_t* sem) {
   12441:	55                   	push   %ebp
   12442:	89 e5                	mov    %esp,%ebp
   12444:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   12447:	e8 76 fa ff ff       	call   11ec2 <irq_enter_protection>
   1244c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   1244f:	8b 45 08             	mov    0x8(%ebp),%eax
   12452:	8b 00                	mov    (%eax),%eax
   12454:	85 c0                	test   %eax,%eax
   12456:	7e 0f                	jle    12467 <sem_wait+0x26>
        sem->count--;
   12458:	8b 45 08             	mov    0x8(%ebp),%eax
   1245b:	8b 00                	mov    (%eax),%eax
   1245d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12460:	8b 45 08             	mov    0x8(%ebp),%eax
   12463:	89 10                	mov    %edx,(%eax)
   12465:	eb 34                	jmp    1249b <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   12467:	e8 66 ec ff ff       	call   110d2 <task_current>
   1246c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   1246f:	83 ec 0c             	sub    $0xc,%esp
   12472:	ff 75 f0             	pushl  -0x10(%ebp)
   12475:	e8 ea eb ff ff       	call   11064 <task_set_blocked>
   1247a:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   1247d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12480:	8d 50 34             	lea    0x34(%eax),%edx
   12483:	8b 45 08             	mov    0x8(%ebp),%eax
   12486:	83 c0 04             	add    $0x4,%eax
   12489:	83 ec 08             	sub    $0x8,%esp
   1248c:	52                   	push   %edx
   1248d:	50                   	push   %eax
   1248e:	e8 fb 08 00 00       	call   12d8e <list_insert_back>
   12493:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12496:	e8 a2 ec ff ff       	call   1113d <task_dispatch>
    }

    irq_leave_protection(state);
   1249b:	83 ec 0c             	sub    $0xc,%esp
   1249e:	ff 75 f4             	pushl  -0xc(%ebp)
   124a1:	e8 34 fa ff ff       	call   11eda <irq_leave_protection>
   124a6:	83 c4 10             	add    $0x10,%esp
}
   124a9:	90                   	nop
   124aa:	c9                   	leave  
   124ab:	c3                   	ret    

000124ac <sem_notify>:


void sem_notify(sem_t* sem) {
   124ac:	55                   	push   %ebp
   124ad:	89 e5                	mov    %esp,%ebp
   124af:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   124b2:	e8 0b fa ff ff       	call   11ec2 <irq_enter_protection>
   124b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   124ba:	8b 45 08             	mov    0x8(%ebp),%eax
   124bd:	83 c0 04             	add    $0x4,%eax
   124c0:	83 ec 0c             	sub    $0xc,%esp
   124c3:	50                   	push   %eax
   124c4:	e8 4a ff ff ff       	call   12413 <list_size>
   124c9:	83 c4 10             	add    $0x10,%esp
   124cc:	85 c0                	test   %eax,%eax
   124ce:	74 40                	je     12510 <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   124d0:	8b 45 08             	mov    0x8(%ebp),%eax
   124d3:	83 c0 04             	add    $0x4,%eax
   124d6:	83 ec 0c             	sub    $0xc,%esp
   124d9:	50                   	push   %eax
   124da:	e8 12 09 00 00       	call   12df1 <list_remove_front>
   124df:	83 c4 10             	add    $0x10,%esp
   124e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   124e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124e9:	74 08                	je     124f3 <sem_notify+0x47>
   124eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124ee:	83 e8 34             	sub    $0x34,%eax
   124f1:	eb 05                	jmp    124f8 <sem_notify+0x4c>
   124f3:	b8 00 00 00 00       	mov    $0x0,%eax
   124f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   124fb:	83 ec 0c             	sub    $0xc,%esp
   124fe:	ff 75 ec             	pushl  -0x14(%ebp)
   12501:	e8 2a eb ff ff       	call   11030 <task_set_ready>
   12506:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12509:	e8 2f ec ff ff       	call   1113d <task_dispatch>
   1250e:	eb 0d                	jmp    1251d <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   12510:	8b 45 08             	mov    0x8(%ebp),%eax
   12513:	8b 00                	mov    (%eax),%eax
   12515:	8d 50 01             	lea    0x1(%eax),%edx
   12518:	8b 45 08             	mov    0x8(%ebp),%eax
   1251b:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   1251d:	83 ec 0c             	sub    $0xc,%esp
   12520:	ff 75 f4             	pushl  -0xc(%ebp)
   12523:	e8 b2 f9 ff ff       	call   11eda <irq_leave_protection>
   12528:	83 c4 10             	add    $0x10,%esp
}
   1252b:	90                   	nop
   1252c:	c9                   	leave  
   1252d:	c3                   	ret    

0001252e <sem_count>:

int sem_count(sem_t* sem) {
   1252e:	55                   	push   %ebp
   1252f:	89 e5                	mov    %esp,%ebp
   12531:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12534:	e8 89 f9 ff ff       	call   11ec2 <irq_enter_protection>
   12539:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   1253c:	8b 45 08             	mov    0x8(%ebp),%eax
   1253f:	8b 00                	mov    (%eax),%eax
   12541:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   12544:	83 ec 0c             	sub    $0xc,%esp
   12547:	ff 75 f4             	pushl  -0xc(%ebp)
   1254a:	e8 8b f9 ff ff       	call   11eda <irq_leave_protection>
   1254f:	83 c4 10             	add    $0x10,%esp

    return count;
   12552:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12555:	c9                   	leave  
   12556:	c3                   	ret    

00012557 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   12557:	55                   	push   %ebp
   12558:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   1255a:	8b 45 08             	mov    0x8(%ebp),%eax
   1255d:	83 c0 07             	add    $0x7,%eax
   12560:	8d 50 07             	lea    0x7(%eax),%edx
   12563:	85 c0                	test   %eax,%eax
   12565:	0f 48 c2             	cmovs  %edx,%eax
   12568:	c1 f8 03             	sar    $0x3,%eax
}
   1256b:	5d                   	pop    %ebp
   1256c:	c3                   	ret    

0001256d <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   1256d:	55                   	push   %ebp
   1256e:	89 e5                	mov    %esp,%ebp
   12570:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   12573:	8b 45 08             	mov    0x8(%ebp),%eax
   12576:	8b 55 10             	mov    0x10(%ebp),%edx
   12579:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1257b:	8b 45 08             	mov    0x8(%ebp),%eax
   1257e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12581:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   12584:	8b 45 08             	mov    0x8(%ebp),%eax
   12587:	8b 00                	mov    (%eax),%eax
   12589:	50                   	push   %eax
   1258a:	e8 c8 ff ff ff       	call   12557 <bitmap_byte_count>
   1258f:	83 c4 04             	add    $0x4,%esp
   12592:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   12595:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12599:	74 07                	je     125a2 <bitmap_init+0x35>
   1259b:	ba ff 00 00 00       	mov    $0xff,%edx
   125a0:	eb 05                	jmp    125a7 <bitmap_init+0x3a>
   125a2:	ba 00 00 00 00       	mov    $0x0,%edx
   125a7:	8b 45 08             	mov    0x8(%ebp),%eax
   125aa:	8b 40 04             	mov    0x4(%eax),%eax
   125ad:	83 ec 04             	sub    $0x4,%esp
   125b0:	ff 75 f4             	pushl  -0xc(%ebp)
   125b3:	52                   	push   %edx
   125b4:	50                   	push   %eax
   125b5:	e8 a4 03 00 00       	call   1295e <kmemset>
   125ba:	83 c4 10             	add    $0x10,%esp
}
   125bd:	90                   	nop
   125be:	c9                   	leave  
   125bf:	c3                   	ret    

000125c0 <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   125c0:	55                   	push   %ebp
   125c1:	89 e5                	mov    %esp,%ebp
   125c3:	56                   	push   %esi
   125c4:	53                   	push   %ebx
   125c5:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   125c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   125cf:	e9 a2 00 00 00       	jmp    12676 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   125d4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   125d8:	74 4a                	je     12624 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   125da:	8b 45 08             	mov    0x8(%ebp),%eax
   125dd:	8b 50 04             	mov    0x4(%eax),%edx
   125e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   125e3:	8d 48 07             	lea    0x7(%eax),%ecx
   125e6:	85 c0                	test   %eax,%eax
   125e8:	0f 48 c1             	cmovs  %ecx,%eax
   125eb:	c1 f8 03             	sar    $0x3,%eax
   125ee:	89 c3                	mov    %eax,%ebx
   125f0:	89 d8                	mov    %ebx,%eax
   125f2:	01 d0                	add    %edx,%eax
   125f4:	0f b6 00             	movzbl (%eax),%eax
   125f7:	89 c6                	mov    %eax,%esi
   125f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   125fc:	99                   	cltd   
   125fd:	c1 ea 1d             	shr    $0x1d,%edx
   12600:	01 d0                	add    %edx,%eax
   12602:	83 e0 07             	and    $0x7,%eax
   12605:	29 d0                	sub    %edx,%eax
   12607:	ba 01 00 00 00       	mov    $0x1,%edx
   1260c:	89 c1                	mov    %eax,%ecx
   1260e:	d3 e2                	shl    %cl,%edx
   12610:	89 d0                	mov    %edx,%eax
   12612:	89 f2                	mov    %esi,%edx
   12614:	09 c2                	or     %eax,%edx
   12616:	8b 45 08             	mov    0x8(%ebp),%eax
   12619:	8b 40 04             	mov    0x4(%eax),%eax
   1261c:	89 d9                	mov    %ebx,%ecx
   1261e:	01 c8                	add    %ecx,%eax
   12620:	88 10                	mov    %dl,(%eax)
   12622:	eb 4a                	jmp    1266e <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12624:	8b 45 08             	mov    0x8(%ebp),%eax
   12627:	8b 50 04             	mov    0x4(%eax),%edx
   1262a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1262d:	8d 48 07             	lea    0x7(%eax),%ecx
   12630:	85 c0                	test   %eax,%eax
   12632:	0f 48 c1             	cmovs  %ecx,%eax
   12635:	c1 f8 03             	sar    $0x3,%eax
   12638:	89 c3                	mov    %eax,%ebx
   1263a:	89 d8                	mov    %ebx,%eax
   1263c:	01 d0                	add    %edx,%eax
   1263e:	0f b6 00             	movzbl (%eax),%eax
   12641:	89 c6                	mov    %eax,%esi
   12643:	8b 45 0c             	mov    0xc(%ebp),%eax
   12646:	99                   	cltd   
   12647:	c1 ea 1d             	shr    $0x1d,%edx
   1264a:	01 d0                	add    %edx,%eax
   1264c:	83 e0 07             	and    $0x7,%eax
   1264f:	29 d0                	sub    %edx,%eax
   12651:	ba 01 00 00 00       	mov    $0x1,%edx
   12656:	89 c1                	mov    %eax,%ecx
   12658:	d3 e2                	shl    %cl,%edx
   1265a:	89 d0                	mov    %edx,%eax
   1265c:	f7 d0                	not    %eax
   1265e:	89 f2                	mov    %esi,%edx
   12660:	21 c2                	and    %eax,%edx
   12662:	8b 45 08             	mov    0x8(%ebp),%eax
   12665:	8b 40 04             	mov    0x4(%eax),%eax
   12668:	89 d9                	mov    %ebx,%ecx
   1266a:	01 c8                	add    %ecx,%eax
   1266c:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1266e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12672:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12676:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12679:	3b 45 10             	cmp    0x10(%ebp),%eax
   1267c:	7d 0e                	jge    1268c <bitmap_set_bit+0xcc>
   1267e:	8b 45 08             	mov    0x8(%ebp),%eax
   12681:	8b 00                	mov    (%eax),%eax
   12683:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12686:	0f 8c 48 ff ff ff    	jl     125d4 <bitmap_set_bit+0x14>
        }
    }
}
   1268c:	90                   	nop
   1268d:	83 c4 10             	add    $0x10,%esp
   12690:	5b                   	pop    %ebx
   12691:	5e                   	pop    %esi
   12692:	5d                   	pop    %ebp
   12693:	c3                   	ret    

00012694 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   12694:	55                   	push   %ebp
   12695:	89 e5                	mov    %esp,%ebp
   12697:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   12698:	8b 45 08             	mov    0x8(%ebp),%eax
   1269b:	8b 50 04             	mov    0x4(%eax),%edx
   1269e:	8b 45 0c             	mov    0xc(%ebp),%eax
   126a1:	8d 48 07             	lea    0x7(%eax),%ecx
   126a4:	85 c0                	test   %eax,%eax
   126a6:	0f 48 c1             	cmovs  %ecx,%eax
   126a9:	c1 f8 03             	sar    $0x3,%eax
   126ac:	01 d0                	add    %edx,%eax
   126ae:	0f b6 00             	movzbl (%eax),%eax
   126b1:	0f b6 d8             	movzbl %al,%ebx
   126b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   126b7:	99                   	cltd   
   126b8:	c1 ea 1d             	shr    $0x1d,%edx
   126bb:	01 d0                	add    %edx,%eax
   126bd:	83 e0 07             	and    $0x7,%eax
   126c0:	29 d0                	sub    %edx,%eax
   126c2:	89 c1                	mov    %eax,%ecx
   126c4:	d3 fb                	sar    %cl,%ebx
   126c6:	89 d8                	mov    %ebx,%eax
   126c8:	83 e0 01             	and    $0x1,%eax
}
   126cb:	5b                   	pop    %ebx
   126cc:	5d                   	pop    %ebp
   126cd:	c3                   	ret    

000126ce <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   126ce:	55                   	push   %ebp
   126cf:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   126d1:	ff 75 0c             	pushl  0xc(%ebp)
   126d4:	ff 75 08             	pushl  0x8(%ebp)
   126d7:	e8 b8 ff ff ff       	call   12694 <bitmap_get_bit>
   126dc:	83 c4 08             	add    $0x8,%esp
   126df:	85 c0                	test   %eax,%eax
   126e1:	0f 95 c0             	setne  %al
   126e4:	0f b6 c0             	movzbl %al,%eax
}
   126e7:	c9                   	leave  
   126e8:	c3                   	ret    

000126e9 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   126e9:	55                   	push   %ebp
   126ea:	89 e5                	mov    %esp,%ebp
   126ec:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   126ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   126f6:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   126fd:	e9 85 00 00 00       	jmp    12787 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12702:	ff 75 fc             	pushl  -0x4(%ebp)
   12705:	ff 75 08             	pushl  0x8(%ebp)
   12708:	e8 87 ff ff ff       	call   12694 <bitmap_get_bit>
   1270d:	83 c4 08             	add    $0x8,%esp
   12710:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12713:	74 06                	je     1271b <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   12715:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12719:	eb 6c                	jmp    12787 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1271b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1271e:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12721:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12728:	eb 27                	jmp    12751 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   1272a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1272d:	8d 50 01             	lea    0x1(%eax),%edx
   12730:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12733:	50                   	push   %eax
   12734:	ff 75 08             	pushl  0x8(%ebp)
   12737:	e8 58 ff ff ff       	call   12694 <bitmap_get_bit>
   1273c:	83 c4 08             	add    $0x8,%esp
   1273f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12742:	74 09                	je     1274d <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12744:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1274b:	eb 16                	jmp    12763 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1274d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12751:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12754:	3b 45 10             	cmp    0x10(%ebp),%eax
   12757:	7d 0a                	jge    12763 <bitmap_alloc_nbits+0x7a>
   12759:	8b 45 08             	mov    0x8(%ebp),%eax
   1275c:	8b 00                	mov    (%eax),%eax
   1275e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12761:	7c c7                	jl     1272a <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   12763:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12766:	3b 45 10             	cmp    0x10(%ebp),%eax
   12769:	7c 1c                	jl     12787 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1276b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1276e:	f7 d0                	not    %eax
   12770:	50                   	push   %eax
   12771:	ff 75 10             	pushl  0x10(%ebp)
   12774:	ff 75 f8             	pushl  -0x8(%ebp)
   12777:	ff 75 08             	pushl  0x8(%ebp)
   1277a:	e8 41 fe ff ff       	call   125c0 <bitmap_set_bit>
   1277f:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   12782:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12785:	eb 13                	jmp    1279a <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   12787:	8b 45 08             	mov    0x8(%ebp),%eax
   1278a:	8b 00                	mov    (%eax),%eax
   1278c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1278f:	0f 8c 6d ff ff ff    	jl     12702 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   12795:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1279a:	c9                   	leave  
   1279b:	c3                   	ret    

0001279c <hlt>:
static inline void hlt(void) {
   1279c:	55                   	push   %ebp
   1279d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1279f:	f4                   	hlt    
}
   127a0:	90                   	nop
   127a1:	5d                   	pop    %ebp
   127a2:	c3                   	ret    

000127a3 <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   127a3:	55                   	push   %ebp
   127a4:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   127a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127aa:	74 3b                	je     127e7 <kstrcpy+0x44>
   127ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127b0:	74 35                	je     127e7 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   127b2:	eb 17                	jmp    127cb <kstrcpy+0x28>
        *dest++ = *src++;
   127b4:	8b 55 0c             	mov    0xc(%ebp),%edx
   127b7:	8d 42 01             	lea    0x1(%edx),%eax
   127ba:	89 45 0c             	mov    %eax,0xc(%ebp)
   127bd:	8b 45 08             	mov    0x8(%ebp),%eax
   127c0:	8d 48 01             	lea    0x1(%eax),%ecx
   127c3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   127c6:	0f b6 12             	movzbl (%edx),%edx
   127c9:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   127cb:	8b 45 08             	mov    0x8(%ebp),%eax
   127ce:	0f b6 00             	movzbl (%eax),%eax
   127d1:	84 c0                	test   %al,%al
   127d3:	74 0a                	je     127df <kstrcpy+0x3c>
   127d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   127d8:	0f b6 00             	movzbl (%eax),%eax
   127db:	84 c0                	test   %al,%al
   127dd:	75 d5                	jne    127b4 <kstrcpy+0x11>
    }
    *dest = '\0';
   127df:	8b 45 08             	mov    0x8(%ebp),%eax
   127e2:	c6 00 00             	movb   $0x0,(%eax)
   127e5:	eb 01                	jmp    127e8 <kstrcpy+0x45>
        return;
   127e7:	90                   	nop
}
   127e8:	5d                   	pop    %ebp
   127e9:	c3                   	ret    

000127ea <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   127ea:	55                   	push   %ebp
   127eb:	89 e5                	mov    %esp,%ebp
   127ed:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   127f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127f4:	74 61                	je     12857 <kstrncpy+0x6d>
   127f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127fa:	74 5b                	je     12857 <kstrncpy+0x6d>
   127fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12800:	74 55                	je     12857 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   12802:	8b 45 08             	mov    0x8(%ebp),%eax
   12805:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12808:	8b 45 0c             	mov    0xc(%ebp),%eax
   1280b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   1280e:	eb 17                	jmp    12827 <kstrncpy+0x3d>
        *d++ = *s++;
   12810:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12813:	8d 42 01             	lea    0x1(%edx),%eax
   12816:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12819:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1281c:	8d 48 01             	lea    0x1(%eax),%ecx
   1281f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12822:	0f b6 12             	movzbl (%edx),%edx
   12825:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   12827:	8b 45 10             	mov    0x10(%ebp),%eax
   1282a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1282d:	89 55 10             	mov    %edx,0x10(%ebp)
   12830:	85 c0                	test   %eax,%eax
   12832:	7e 0a                	jle    1283e <kstrncpy+0x54>
   12834:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12837:	0f b6 00             	movzbl (%eax),%eax
   1283a:	84 c0                	test   %al,%al
   1283c:	75 d2                	jne    12810 <kstrncpy+0x26>
    }
    if (size == 0) {
   1283e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12842:	75 0b                	jne    1284f <kstrncpy+0x65>
        *(d - 1) = '\0';
   12844:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12847:	83 e8 01             	sub    $0x1,%eax
   1284a:	c6 00 00             	movb   $0x0,(%eax)
   1284d:	eb 09                	jmp    12858 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   1284f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12852:	c6 00 00             	movb   $0x0,(%eax)
   12855:	eb 01                	jmp    12858 <kstrncpy+0x6e>
        return;
   12857:	90                   	nop
    }
}
   12858:	c9                   	leave  
   12859:	c3                   	ret    

0001285a <kstrlen>:


int kstrlen(const char *str) {
   1285a:	55                   	push   %ebp
   1285b:	89 e5                	mov    %esp,%ebp
   1285d:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   12860:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12864:	75 07                	jne    1286d <kstrlen+0x13>
        return 0;
   12866:	b8 00 00 00 00       	mov    $0x0,%eax
   1286b:	eb 26                	jmp    12893 <kstrlen+0x39>
    }

    const char *c = str;
   1286d:	8b 45 08             	mov    0x8(%ebp),%eax
   12870:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   12873:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   1287a:	eb 04                	jmp    12880 <kstrlen+0x26>
        len++;
   1287c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   12880:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12883:	8d 50 01             	lea    0x1(%eax),%edx
   12886:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12889:	0f b6 00             	movzbl (%eax),%eax
   1288c:	84 c0                	test   %al,%al
   1288e:	75 ec                	jne    1287c <kstrlen+0x22>
    }

    return len;
   12890:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12893:	c9                   	leave  
   12894:	c3                   	ret    

00012895 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   12895:	55                   	push   %ebp
   12896:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   12898:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1289c:	74 06                	je     128a4 <kstrncmp+0xf>
   1289e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128a2:	75 0f                	jne    128b3 <kstrncmp+0x1e>
        return -1;
   128a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   128a9:	eb 62                	jmp    1290d <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   128ab:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   128af:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   128b3:	8b 45 08             	mov    0x8(%ebp),%eax
   128b6:	0f b6 00             	movzbl (%eax),%eax
   128b9:	84 c0                	test   %al,%al
   128bb:	74 20                	je     128dd <kstrncmp+0x48>
   128bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   128c0:	0f b6 00             	movzbl (%eax),%eax
   128c3:	84 c0                	test   %al,%al
   128c5:	74 16                	je     128dd <kstrncmp+0x48>
   128c7:	8b 45 08             	mov    0x8(%ebp),%eax
   128ca:	0f b6 10             	movzbl (%eax),%edx
   128cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   128d0:	0f b6 00             	movzbl (%eax),%eax
   128d3:	38 c2                	cmp    %al,%dl
   128d5:	75 06                	jne    128dd <kstrncmp+0x48>
   128d7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   128db:	75 ce                	jne    128ab <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   128dd:	8b 45 08             	mov    0x8(%ebp),%eax
   128e0:	0f b6 00             	movzbl (%eax),%eax
   128e3:	84 c0                	test   %al,%al
   128e5:	74 21                	je     12908 <kstrncmp+0x73>
   128e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ea:	0f b6 00             	movzbl (%eax),%eax
   128ed:	84 c0                	test   %al,%al
   128ef:	74 17                	je     12908 <kstrncmp+0x73>
   128f1:	8b 45 08             	mov    0x8(%ebp),%eax
   128f4:	0f b6 10             	movzbl (%eax),%edx
   128f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   128fa:	0f b6 00             	movzbl (%eax),%eax
   128fd:	38 c2                	cmp    %al,%dl
   128ff:	74 07                	je     12908 <kstrncmp+0x73>
   12901:	b8 01 00 00 00       	mov    $0x1,%eax
   12906:	eb 05                	jmp    1290d <kstrncmp+0x78>
   12908:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1290d:	5d                   	pop    %ebp
   1290e:	c3                   	ret    

0001290f <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   1290f:	55                   	push   %ebp
   12910:	89 e5                	mov    %esp,%ebp
   12912:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12915:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12919:	74 40                	je     1295b <kmemcpy+0x4c>
   1291b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1291f:	74 3a                	je     1295b <kmemcpy+0x4c>
   12921:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12925:	74 34                	je     1295b <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12927:	8b 45 0c             	mov    0xc(%ebp),%eax
   1292a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   1292d:	8b 45 08             	mov    0x8(%ebp),%eax
   12930:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12933:	eb 17                	jmp    1294c <kmemcpy+0x3d>
        *d++ = *s++;
   12935:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12938:	8d 42 01             	lea    0x1(%edx),%eax
   1293b:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1293e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12941:	8d 48 01             	lea    0x1(%eax),%ecx
   12944:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12947:	0f b6 12             	movzbl (%edx),%edx
   1294a:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1294c:	8b 45 10             	mov    0x10(%ebp),%eax
   1294f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12952:	89 55 10             	mov    %edx,0x10(%ebp)
   12955:	85 c0                	test   %eax,%eax
   12957:	75 dc                	jne    12935 <kmemcpy+0x26>
   12959:	eb 01                	jmp    1295c <kmemcpy+0x4d>
        return;
   1295b:	90                   	nop
    }
}
   1295c:	c9                   	leave  
   1295d:	c3                   	ret    

0001295e <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   1295e:	55                   	push   %ebp
   1295f:	89 e5                	mov    %esp,%ebp
   12961:	83 ec 14             	sub    $0x14,%esp
   12964:	8b 45 0c             	mov    0xc(%ebp),%eax
   12967:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1296a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1296e:	74 2c                	je     1299c <kmemset+0x3e>
   12970:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12974:	74 26                	je     1299c <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   12976:	8b 45 08             	mov    0x8(%ebp),%eax
   12979:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   1297c:	eb 0f                	jmp    1298d <kmemset+0x2f>
        *d++ = v;
   1297e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12981:	8d 50 01             	lea    0x1(%eax),%edx
   12984:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12987:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1298b:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1298d:	8b 45 10             	mov    0x10(%ebp),%eax
   12990:	8d 50 ff             	lea    -0x1(%eax),%edx
   12993:	89 55 10             	mov    %edx,0x10(%ebp)
   12996:	85 c0                	test   %eax,%eax
   12998:	75 e4                	jne    1297e <kmemset+0x20>
   1299a:	eb 01                	jmp    1299d <kmemset+0x3f>
        return;
   1299c:	90                   	nop
    }
}
   1299d:	c9                   	leave  
   1299e:	c3                   	ret    

0001299f <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   1299f:	55                   	push   %ebp
   129a0:	89 e5                	mov    %esp,%ebp
   129a2:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   129a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   129a9:	74 06                	je     129b1 <kmemcmp+0x12>
   129ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   129af:	75 07                	jne    129b8 <kmemcmp+0x19>
        return 1;
   129b1:	b8 01 00 00 00       	mov    $0x1,%eax
   129b6:	eb 43                	jmp    129fb <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   129b8:	8b 45 08             	mov    0x8(%ebp),%eax
   129bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   129be:	8b 45 0c             	mov    0xc(%ebp),%eax
   129c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   129c4:	eb 23                	jmp    129e9 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   129c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129c9:	8d 50 01             	lea    0x1(%eax),%edx
   129cc:	89 55 fc             	mov    %edx,-0x4(%ebp)
   129cf:	0f b6 08             	movzbl (%eax),%ecx
   129d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129d5:	8d 50 01             	lea    0x1(%eax),%edx
   129d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129db:	0f b6 00             	movzbl (%eax),%eax
   129de:	38 c1                	cmp    %al,%cl
   129e0:	74 07                	je     129e9 <kmemcmp+0x4a>
            return 1;
   129e2:	b8 01 00 00 00       	mov    $0x1,%eax
   129e7:	eb 12                	jmp    129fb <kmemcmp+0x5c>
    while (size--) {
   129e9:	8b 45 10             	mov    0x10(%ebp),%eax
   129ec:	8d 50 ff             	lea    -0x1(%eax),%edx
   129ef:	89 55 10             	mov    %edx,0x10(%ebp)
   129f2:	85 c0                	test   %eax,%eax
   129f4:	75 d0                	jne    129c6 <kmemcmp+0x27>
        }
    }

    return 0;
   129f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   129fb:	c9                   	leave  
   129fc:	c3                   	ret    

000129fd <kitoa>:


void kitoa(char *buf, int num, int base) {
   129fd:	55                   	push   %ebp
   129fe:	89 e5                	mov    %esp,%ebp
   12a00:	53                   	push   %ebx
   12a01:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   12a04:	8b 45 08             	mov    0x8(%ebp),%eax
   12a07:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a0d:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   12a10:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12a14:	74 1d                	je     12a33 <kitoa+0x36>
   12a16:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12a1a:	74 17                	je     12a33 <kitoa+0x36>
   12a1c:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12a20:	74 11                	je     12a33 <kitoa+0x36>
   12a22:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12a26:	74 0b                	je     12a33 <kitoa+0x36>
        *p = '\0';
   12a28:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a2b:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12a2e:	e9 03 01 00 00       	jmp    12b36 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12a33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12a3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a3e:	79 19                	jns    12a59 <kitoa+0x5c>
   12a40:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12a44:	75 13                	jne    12a59 <kitoa+0x5c>
        *p++ = '-';
   12a46:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a49:	8d 50 01             	lea    0x1(%eax),%edx
   12a4c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a4f:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12a52:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12a59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12a5d:	74 3b                	je     12a9a <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   12a5f:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12a65:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a68:	99                   	cltd   
   12a69:	f7 7d 10             	idivl  0x10(%ebp)
   12a6c:	89 d0                	mov    %edx,%eax
   12a6e:	83 c0 0f             	add    $0xf,%eax
   12a71:	01 c8                	add    %ecx,%eax
   12a73:	0f b6 00             	movzbl (%eax),%eax
   12a76:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12a79:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a7c:	8d 50 01             	lea    0x1(%eax),%edx
   12a7f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a82:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   12a86:	88 10                	mov    %dl,(%eax)
            num /= base;
   12a88:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a8b:	99                   	cltd   
   12a8c:	f7 7d 10             	idivl  0x10(%ebp)
   12a8f:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12a92:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12a96:	75 c7                	jne    12a5f <kitoa+0x62>
   12a98:	eb 4b                	jmp    12ae5 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   12a9a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12aa0:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12aa6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12aa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12aac:	ba 00 00 00 00       	mov    $0x0,%edx
   12ab1:	f7 f3                	div    %ebx
   12ab3:	89 d0                	mov    %edx,%eax
   12ab5:	83 c0 0f             	add    $0xf,%eax
   12ab8:	01 c8                	add    %ecx,%eax
   12aba:	0f b6 00             	movzbl (%eax),%eax
   12abd:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12ac0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ac3:	8d 50 01             	lea    0x1(%eax),%edx
   12ac6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ac9:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12acd:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12acf:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12ad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12ad5:	ba 00 00 00 00       	mov    $0x0,%edx
   12ada:	f7 f3                	div    %ebx
   12adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12adf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12ae3:	75 bb                	jne    12aa0 <kitoa+0xa3>
    }
    *p-- = '\0';
   12ae5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ae8:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aeb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12aee:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12af1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12af5:	74 08                	je     12aff <kitoa+0x102>
   12af7:	8b 45 08             	mov    0x8(%ebp),%eax
   12afa:	83 c0 01             	add    $0x1,%eax
   12afd:	eb 03                	jmp    12b02 <kitoa+0x105>
   12aff:	8b 45 08             	mov    0x8(%ebp),%eax
   12b02:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12b05:	eb 27                	jmp    12b2e <kitoa+0x131>
        char ch = *start;
   12b07:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12b0a:	0f b6 00             	movzbl (%eax),%eax
   12b0d:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12b10:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b13:	0f b6 10             	movzbl (%eax),%edx
   12b16:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12b19:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   12b1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b1e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b21:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12b24:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12b28:	88 10                	mov    %dl,(%eax)
        start++;
   12b2a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   12b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12b31:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12b34:	72 d1                	jb     12b07 <kitoa+0x10a>
    }
}
   12b36:	83 c4 20             	add    $0x20,%esp
   12b39:	5b                   	pop    %ebx
   12b3a:	5d                   	pop    %ebp
   12b3b:	c3                   	ret    

00012b3c <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   12b3c:	55                   	push   %ebp
   12b3d:	89 e5                	mov    %esp,%ebp
   12b3f:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12b42:	8d 45 10             	lea    0x10(%ebp),%eax
   12b45:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b4b:	83 ec 04             	sub    $0x4,%esp
   12b4e:	50                   	push   %eax
   12b4f:	ff 75 0c             	pushl  0xc(%ebp)
   12b52:	ff 75 08             	pushl  0x8(%ebp)
   12b55:	e8 06 00 00 00       	call   12b60 <kvsprintf>
   12b5a:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   12b5d:	90                   	nop
   12b5e:	c9                   	leave  
   12b5f:	c3                   	ret    

00012b60 <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   12b60:	55                   	push   %ebp
   12b61:	89 e5                	mov    %esp,%ebp
   12b63:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12b66:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   12b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b70:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   12b73:	e9 2f 01 00 00       	jmp    12ca7 <kvsprintf+0x147>
        switch (state) {
   12b78:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b7b:	85 c0                	test   %eax,%eax
   12b7d:	74 0a                	je     12b89 <kvsprintf+0x29>
   12b7f:	83 f8 01             	cmp    $0x1,%eax
   12b82:	74 2b                	je     12baf <kvsprintf+0x4f>
   12b84:	e9 1e 01 00 00       	jmp    12ca7 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   12b89:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12b8d:	75 0c                	jne    12b9b <kvsprintf+0x3b>
                state = READ_FMT;
   12b8f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12b96:	e9 0c 01 00 00       	jmp    12ca7 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   12b9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12b9e:	8d 50 01             	lea    0x1(%eax),%edx
   12ba1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12ba4:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12ba8:	88 10                	mov    %dl,(%eax)
            }
            break;
   12baa:	e9 f8 00 00 00       	jmp    12ca7 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   12baf:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12bb3:	75 31                	jne    12be6 <kvsprintf+0x86>
                int num = va_arg(args, int);
   12bb5:	8b 45 10             	mov    0x10(%ebp),%eax
   12bb8:	8d 50 04             	lea    0x4(%eax),%edx
   12bbb:	89 55 10             	mov    %edx,0x10(%ebp)
   12bbe:	8b 00                	mov    (%eax),%eax
   12bc0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   12bc3:	6a 0a                	push   $0xa
   12bc5:	ff 75 e4             	pushl  -0x1c(%ebp)
   12bc8:	ff 75 f8             	pushl  -0x8(%ebp)
   12bcb:	e8 2d fe ff ff       	call   129fd <kitoa>
   12bd0:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12bd3:	ff 75 f8             	pushl  -0x8(%ebp)
   12bd6:	e8 7f fc ff ff       	call   1285a <kstrlen>
   12bdb:	83 c4 04             	add    $0x4,%esp
   12bde:	01 45 f8             	add    %eax,-0x8(%ebp)
   12be1:	e9 b9 00 00 00       	jmp    12c9f <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12be6:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12bea:	75 46                	jne    12c32 <kvsprintf+0xd2>
                *curr++ = '0';
   12bec:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bef:	8d 50 01             	lea    0x1(%eax),%edx
   12bf2:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12bf5:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12bf8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12bfb:	8d 50 01             	lea    0x1(%eax),%edx
   12bfe:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c01:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12c04:	8b 45 10             	mov    0x10(%ebp),%eax
   12c07:	8d 50 04             	lea    0x4(%eax),%edx
   12c0a:	89 55 10             	mov    %edx,0x10(%ebp)
   12c0d:	8b 00                	mov    (%eax),%eax
   12c0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12c12:	6a 10                	push   $0x10
   12c14:	ff 75 e8             	pushl  -0x18(%ebp)
   12c17:	ff 75 f8             	pushl  -0x8(%ebp)
   12c1a:	e8 de fd ff ff       	call   129fd <kitoa>
   12c1f:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12c22:	ff 75 f8             	pushl  -0x8(%ebp)
   12c25:	e8 30 fc ff ff       	call   1285a <kstrlen>
   12c2a:	83 c4 04             	add    $0x4,%esp
   12c2d:	01 45 f8             	add    %eax,-0x8(%ebp)
   12c30:	eb 6d                	jmp    12c9f <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12c32:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12c36:	75 1f                	jne    12c57 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12c38:	8b 45 10             	mov    0x10(%ebp),%eax
   12c3b:	8d 50 04             	lea    0x4(%eax),%edx
   12c3e:	89 55 10             	mov    %edx,0x10(%ebp)
   12c41:	8b 00                	mov    (%eax),%eax
   12c43:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12c46:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c49:	8d 50 01             	lea    0x1(%eax),%edx
   12c4c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12c4f:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12c53:	88 10                	mov    %dl,(%eax)
   12c55:	eb 48                	jmp    12c9f <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12c57:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12c5b:	75 42                	jne    12c9f <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   12c5d:	8b 45 10             	mov    0x10(%ebp),%eax
   12c60:	8d 50 04             	lea    0x4(%eax),%edx
   12c63:	89 55 10             	mov    %edx,0x10(%ebp)
   12c66:	8b 00                	mov    (%eax),%eax
   12c68:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   12c6b:	ff 75 f4             	pushl  -0xc(%ebp)
   12c6e:	e8 e7 fb ff ff       	call   1285a <kstrlen>
   12c73:	83 c4 04             	add    $0x4,%esp
   12c76:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   12c79:	eb 17                	jmp    12c92 <kvsprintf+0x132>
                    *curr++ = *str++;
   12c7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12c7e:	8d 42 01             	lea    0x1(%edx),%eax
   12c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12c84:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12c87:	8d 48 01             	lea    0x1(%eax),%ecx
   12c8a:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12c8d:	0f b6 12             	movzbl (%edx),%edx
   12c90:	88 10                	mov    %dl,(%eax)
                while (len--) {
   12c92:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c95:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c98:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12c9b:	85 c0                	test   %eax,%eax
   12c9d:	75 dc                	jne    12c7b <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   12c9f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12ca6:	90                   	nop
    while ((ch = *fmt++)) {
   12ca7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12caa:	8d 50 01             	lea    0x1(%eax),%edx
   12cad:	89 55 0c             	mov    %edx,0xc(%ebp)
   12cb0:	0f b6 00             	movzbl (%eax),%eax
   12cb3:	88 45 ef             	mov    %al,-0x11(%ebp)
   12cb6:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12cba:	0f 85 b8 fe ff ff    	jne    12b78 <kvsprintf+0x18>
        }
    }
}
   12cc0:	90                   	nop
   12cc1:	c9                   	leave  
   12cc2:	c3                   	ret    

00012cc3 <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   12cc3:	55                   	push   %ebp
   12cc4:	89 e5                	mov    %esp,%ebp
   12cc6:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12cc9:	83 ec 08             	sub    $0x8,%esp
   12ccc:	ff 75 14             	pushl  0x14(%ebp)
   12ccf:	68 c8 39 01 00       	push   $0x139c8
   12cd4:	e8 f4 02 00 00       	call   12fcd <log_printf>
   12cd9:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   12cdc:	ff 75 10             	pushl  0x10(%ebp)
   12cdf:	ff 75 0c             	pushl  0xc(%ebp)
   12ce2:	ff 75 08             	pushl  0x8(%ebp)
   12ce5:	68 da 39 01 00       	push   $0x139da
   12cea:	e8 de 02 00 00       	call   12fcd <log_printf>
   12cef:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12cf2:	e8 a5 fa ff ff       	call   1279c <hlt>
   12cf7:	eb f9                	jmp    12cf2 <pannic+0x2f>

00012cf9 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12cf9:	55                   	push   %ebp
   12cfa:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   12cff:	8b 40 08             	mov    0x8(%eax),%eax
   12d02:	85 c0                	test   %eax,%eax
   12d04:	0f 94 c0             	sete   %al
   12d07:	0f b6 c0             	movzbl %al,%eax
}
   12d0a:	5d                   	pop    %ebp
   12d0b:	c3                   	ret    

00012d0c <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   12d0c:	55                   	push   %ebp
   12d0d:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   12d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d12:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12d18:	8b 45 08             	mov    0x8(%ebp),%eax
   12d1b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12d22:	8b 45 08             	mov    0x8(%ebp),%eax
   12d25:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12d2c:	90                   	nop
   12d2d:	5d                   	pop    %ebp
   12d2e:	c3                   	ret    

00012d2f <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   12d2f:	55                   	push   %ebp
   12d30:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12d32:	8b 45 08             	mov    0x8(%ebp),%eax
   12d35:	8b 10                	mov    (%eax),%edx
   12d37:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d3a:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   12d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12d46:	ff 75 08             	pushl  0x8(%ebp)
   12d49:	e8 ab ff ff ff       	call   12cf9 <list_is_empty>
   12d4e:	83 c4 04             	add    $0x4,%esp
   12d51:	85 c0                	test   %eax,%eax
   12d53:	74 15                	je     12d6a <list_insert_front+0x3b>
        list->last = list->first = node;
   12d55:	8b 45 08             	mov    0x8(%ebp),%eax
   12d58:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d5b:	89 10                	mov    %edx,(%eax)
   12d5d:	8b 45 08             	mov    0x8(%ebp),%eax
   12d60:	8b 10                	mov    (%eax),%edx
   12d62:	8b 45 08             	mov    0x8(%ebp),%eax
   12d65:	89 50 04             	mov    %edx,0x4(%eax)
   12d68:	eb 12                	jmp    12d7c <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   12d6d:	8b 00                	mov    (%eax),%eax
   12d6f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d72:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12d74:	8b 45 08             	mov    0x8(%ebp),%eax
   12d77:	8b 55 0c             	mov    0xc(%ebp),%edx
   12d7a:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d7f:	8b 40 08             	mov    0x8(%eax),%eax
   12d82:	8d 50 01             	lea    0x1(%eax),%edx
   12d85:	8b 45 08             	mov    0x8(%ebp),%eax
   12d88:	89 50 08             	mov    %edx,0x8(%eax)
}
   12d8b:	90                   	nop
   12d8c:	c9                   	leave  
   12d8d:	c3                   	ret    

00012d8e <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   12d8e:	55                   	push   %ebp
   12d8f:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12d91:	8b 45 08             	mov    0x8(%ebp),%eax
   12d94:	8b 50 04             	mov    0x4(%eax),%edx
   12d97:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d9a:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12d9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d9f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   12da6:	ff 75 08             	pushl  0x8(%ebp)
   12da9:	e8 4b ff ff ff       	call   12cf9 <list_is_empty>
   12dae:	83 c4 04             	add    $0x4,%esp
   12db1:	85 c0                	test   %eax,%eax
   12db3:	74 15                	je     12dca <list_insert_back+0x3c>
        list->last = list->first = node;
   12db5:	8b 45 08             	mov    0x8(%ebp),%eax
   12db8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12dbb:	89 10                	mov    %edx,(%eax)
   12dbd:	8b 45 08             	mov    0x8(%ebp),%eax
   12dc0:	8b 10                	mov    (%eax),%edx
   12dc2:	8b 45 08             	mov    0x8(%ebp),%eax
   12dc5:	89 50 04             	mov    %edx,0x4(%eax)
   12dc8:	eb 15                	jmp    12ddf <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   12dca:	8b 45 08             	mov    0x8(%ebp),%eax
   12dcd:	8b 40 04             	mov    0x4(%eax),%eax
   12dd0:	8b 55 0c             	mov    0xc(%ebp),%edx
   12dd3:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ddc:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   12de2:	8b 40 08             	mov    0x8(%eax),%eax
   12de5:	8d 50 01             	lea    0x1(%eax),%edx
   12de8:	8b 45 08             	mov    0x8(%ebp),%eax
   12deb:	89 50 08             	mov    %edx,0x8(%eax)
}
   12dee:	90                   	nop
   12def:	c9                   	leave  
   12df0:	c3                   	ret    

00012df1 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12df1:	55                   	push   %ebp
   12df2:	89 e5                	mov    %esp,%ebp
   12df4:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12df7:	ff 75 08             	pushl  0x8(%ebp)
   12dfa:	e8 fa fe ff ff       	call   12cf9 <list_is_empty>
   12dff:	83 c4 04             	add    $0x4,%esp
   12e02:	85 c0                	test   %eax,%eax
   12e04:	74 07                	je     12e0d <list_remove_front+0x1c>
        return (list_node_t*)0;
   12e06:	b8 00 00 00 00       	mov    $0x0,%eax
   12e0b:	eb 5b                	jmp    12e68 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12e0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e10:	8b 00                	mov    (%eax),%eax
   12e12:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12e15:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e18:	8b 50 04             	mov    0x4(%eax),%edx
   12e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12e1e:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12e20:	8b 45 08             	mov    0x8(%ebp),%eax
   12e23:	8b 00                	mov    (%eax),%eax
   12e25:	85 c0                	test   %eax,%eax
   12e27:	75 0c                	jne    12e35 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12e29:	8b 45 08             	mov    0x8(%ebp),%eax
   12e2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e33:	eb 0c                	jmp    12e41 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12e35:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e38:	8b 40 04             	mov    0x4(%eax),%eax
   12e3b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12e41:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e44:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12e4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e4e:	8b 50 04             	mov    0x4(%eax),%edx
   12e51:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12e54:	89 10                	mov    %edx,(%eax)
    list->count--;
   12e56:	8b 45 08             	mov    0x8(%ebp),%eax
   12e59:	8b 40 08             	mov    0x8(%eax),%eax
   12e5c:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12e62:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12e65:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12e68:	c9                   	leave  
   12e69:	c3                   	ret    

00012e6a <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12e6a:	55                   	push   %ebp
   12e6b:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e70:	8b 00                	mov    (%eax),%eax
   12e72:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12e75:	75 0b                	jne    12e82 <list_remove+0x18>
        list->first = node->next;
   12e77:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e7a:	8b 50 04             	mov    0x4(%eax),%edx
   12e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   12e80:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12e82:	8b 45 08             	mov    0x8(%ebp),%eax
   12e85:	8b 40 04             	mov    0x4(%eax),%eax
   12e88:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12e8b:	75 0b                	jne    12e98 <list_remove+0x2e>
        list->last = node->pre;
   12e8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e90:	8b 10                	mov    (%eax),%edx
   12e92:	8b 45 08             	mov    0x8(%ebp),%eax
   12e95:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12e98:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e9b:	8b 00                	mov    (%eax),%eax
   12e9d:	85 c0                	test   %eax,%eax
   12e9f:	74 0e                	je     12eaf <list_remove+0x45>
        node->pre->next = node->next;
   12ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ea4:	8b 00                	mov    (%eax),%eax
   12ea6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ea9:	8b 52 04             	mov    0x4(%edx),%edx
   12eac:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12eaf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12eb2:	8b 40 04             	mov    0x4(%eax),%eax
   12eb5:	85 c0                	test   %eax,%eax
   12eb7:	74 0d                	je     12ec6 <list_remove+0x5c>
        node->next->pre = node->pre;
   12eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ebc:	8b 40 04             	mov    0x4(%eax),%eax
   12ebf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ec2:	8b 12                	mov    (%edx),%edx
   12ec4:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ec9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ed0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ed3:	8b 50 04             	mov    0x4(%eax),%edx
   12ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ed9:	89 10                	mov    %edx,(%eax)
    --list->count;
   12edb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ede:	8b 40 08             	mov    0x8(%eax),%eax
   12ee1:	8d 50 ff             	lea    -0x1(%eax),%edx
   12ee4:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee7:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12eea:	8b 45 0c             	mov    0xc(%ebp),%eax
   12eed:	5d                   	pop    %ebp
   12eee:	c3                   	ret    

00012eef <inb>:
static inline uint8_t inb(uint16_t port) {
   12eef:	55                   	push   %ebp
   12ef0:	89 e5                	mov    %esp,%ebp
   12ef2:	83 ec 14             	sub    $0x14,%esp
   12ef5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12efc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12f00:	89 c2                	mov    %eax,%edx
   12f02:	ec                   	in     (%dx),%al
   12f03:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12f06:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12f0a:	c9                   	leave  
   12f0b:	c3                   	ret    

00012f0c <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12f0c:	55                   	push   %ebp
   12f0d:	89 e5                	mov    %esp,%ebp
   12f0f:	83 ec 08             	sub    $0x8,%esp
   12f12:	8b 55 08             	mov    0x8(%ebp),%edx
   12f15:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f18:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12f1c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12f1f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12f23:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12f27:	ee                   	out    %al,(%dx)
}
   12f28:	90                   	nop
   12f29:	c9                   	leave  
   12f2a:	c3                   	ret    

00012f2b <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12f2b:	55                   	push   %ebp
   12f2c:	89 e5                	mov    %esp,%ebp
   12f2e:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   12f31:	83 ec 08             	sub    $0x8,%esp
   12f34:	68 18 3a 01 00       	push   $0x13a18
   12f39:	68 e0 8e 01 00       	push   $0x18ee0
   12f3e:	e8 41 f3 ff ff       	call   12284 <mutex_init>
   12f43:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12f46:	83 ec 08             	sub    $0x8,%esp
   12f49:	6a 00                	push   $0x0
   12f4b:	68 f9 03 00 00       	push   $0x3f9
   12f50:	e8 b7 ff ff ff       	call   12f0c <outb>
   12f55:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12f58:	83 ec 08             	sub    $0x8,%esp
   12f5b:	68 80 00 00 00       	push   $0x80
   12f60:	68 fb 03 00 00       	push   $0x3fb
   12f65:	e8 a2 ff ff ff       	call   12f0c <outb>
   12f6a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12f6d:	83 ec 08             	sub    $0x8,%esp
   12f70:	6a 03                	push   $0x3
   12f72:	68 f8 03 00 00       	push   $0x3f8
   12f77:	e8 90 ff ff ff       	call   12f0c <outb>
   12f7c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12f7f:	83 ec 08             	sub    $0x8,%esp
   12f82:	6a 00                	push   $0x0
   12f84:	68 f9 03 00 00       	push   $0x3f9
   12f89:	e8 7e ff ff ff       	call   12f0c <outb>
   12f8e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12f91:	83 ec 08             	sub    $0x8,%esp
   12f94:	6a 03                	push   $0x3
   12f96:	68 fb 03 00 00       	push   $0x3fb
   12f9b:	e8 6c ff ff ff       	call   12f0c <outb>
   12fa0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12fa3:	83 ec 08             	sub    $0x8,%esp
   12fa6:	68 c7 00 00 00       	push   $0xc7
   12fab:	68 fa 03 00 00       	push   $0x3fa
   12fb0:	e8 57 ff ff ff       	call   12f0c <outb>
   12fb5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12fb8:	83 ec 08             	sub    $0x8,%esp
   12fbb:	6a 0f                	push   $0xf
   12fbd:	68 fc 03 00 00       	push   $0x3fc
   12fc2:	e8 45 ff ff ff       	call   12f0c <outb>
   12fc7:	83 c4 10             	add    $0x10,%esp
}
   12fca:	90                   	nop
   12fcb:	c9                   	leave  
   12fcc:	c3                   	ret    

00012fcd <log_printf>:


void log_printf(const char* fmt, ...) {
   12fcd:	55                   	push   %ebp
   12fce:	89 e5                	mov    %esp,%ebp
   12fd0:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12fd6:	83 ec 04             	sub    $0x4,%esp
   12fd9:	68 80 00 00 00       	push   $0x80
   12fde:	6a 00                	push   $0x0
   12fe0:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12fe6:	50                   	push   %eax
   12fe7:	e8 72 f9 ff ff       	call   1295e <kmemset>
   12fec:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12fef:	8d 45 0c             	lea    0xc(%ebp),%eax
   12ff2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12ff8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12ffe:	83 ec 04             	sub    $0x4,%esp
   13001:	50                   	push   %eax
   13002:	ff 75 08             	pushl  0x8(%ebp)
   13005:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1300b:	50                   	push   %eax
   1300c:	e8 4f fb ff ff       	call   12b60 <kvsprintf>
   13011:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   13014:	83 ec 0c             	sub    $0xc,%esp
   13017:	68 e0 8e 01 00       	push   $0x18ee0
   1301c:	e8 a4 f2 ff ff       	call   122c5 <mutex_acquire>
   13021:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   13024:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1302a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   1302d:	eb 3b                	jmp    1306a <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   1302f:	90                   	nop
   13030:	83 ec 0c             	sub    $0xc,%esp
   13033:	68 fd 03 00 00       	push   $0x3fd
   13038:	e8 b2 fe ff ff       	call   12eef <inb>
   1303d:	83 c4 10             	add    $0x10,%esp
   13040:	0f b6 c0             	movzbl %al,%eax
   13043:	83 e0 40             	and    $0x40,%eax
   13046:	85 c0                	test   %eax,%eax
   13048:	74 e6                	je     13030 <log_printf+0x63>
        outb(COM1_PORT, *p++);
   1304a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1304d:	8d 50 01             	lea    0x1(%eax),%edx
   13050:	89 55 f4             	mov    %edx,-0xc(%ebp)
   13053:	0f b6 00             	movzbl (%eax),%eax
   13056:	0f b6 c0             	movzbl %al,%eax
   13059:	83 ec 08             	sub    $0x8,%esp
   1305c:	50                   	push   %eax
   1305d:	68 f8 03 00 00       	push   $0x3f8
   13062:	e8 a5 fe ff ff       	call   12f0c <outb>
   13067:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   1306a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1306d:	0f b6 00             	movzbl (%eax),%eax
   13070:	84 c0                	test   %al,%al
   13072:	75 bb                	jne    1302f <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   13074:	83 ec 08             	sub    $0x8,%esp
   13077:	6a 0d                	push   $0xd
   13079:	68 f8 03 00 00       	push   $0x3f8
   1307e:	e8 89 fe ff ff       	call   12f0c <outb>
   13083:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   13086:	83 ec 08             	sub    $0x8,%esp
   13089:	6a 0a                	push   $0xa
   1308b:	68 f8 03 00 00       	push   $0x3f8
   13090:	e8 77 fe ff ff       	call   12f0c <outb>
   13095:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   13098:	83 ec 0c             	sub    $0xc,%esp
   1309b:	68 e0 8e 01 00       	push   $0x18ee0
   130a0:	e8 ae f2 ff ff       	call   12353 <mutex_release>
   130a5:	83 c4 10             	add    $0x10,%esp
   130a8:	90                   	nop
   130a9:	c9                   	leave  
   130aa:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 00 00 00 00       	jmp    80000012 <first_task_main>

80000012 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"

int first_task_main(void) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        log_printf("first task.");
80000018:	83 ec 0c             	sub    $0xc,%esp
8000001b:	68 3a 00 00 80       	push   $0x8000003a
80000020:	e8 a8 2f 01 80       	call   12fcd <log_printf>
80000025:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000028:	83 ec 0c             	sub    $0xc,%esp
8000002b:	68 e8 03 00 00       	push   $0x3e8
80000030:	e8 8d 12 01 80       	call   112c2 <sys_sleep>
80000035:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000038:	eb de                	jmp    80000018 <first_task_main+0x6>
8000003a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000040:	74 61                	je     800000a3 <first_task_main+0x91>
80000042:	73 6b                	jae    800000af <first_task_main+0x9d>
80000044:	2e                   	cs
	...
