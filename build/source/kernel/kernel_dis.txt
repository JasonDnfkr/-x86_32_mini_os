
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
E:/Data/Work/Job/Cpp/diy-x86os/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003378 memsz 0x00003378 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006f40 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001af40 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cda  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000069c  00012cdc  00012cdc  00003cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005f40  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000046  80000000  0001af40  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001cb0  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044a9  00000000  00000000  00007cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000121a  00000000  00000000  0000c19f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011c9  00000000  00000000  0000d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000e769  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000012f4  00000000  00000000  0000e77c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012cdc l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start_kernel.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102dc l     F .text	00000017 up2
000102f3 l     F .text	0000000d down2
00010300 l     F .text	0000000c write_cr3
0001030c l     F .text	00000014 pde_index
00010320 l     F .text	00000027 pde_paddr
00010347 l     F .text	00000010 pte_index
00010357 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000068 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010368 l     F .text	0000005d addr_alloc_init
000103c5 l     F .text	00000067 addr_alloc_page
0001042c l     F .text	00000062 addr_free_page
0001048e l     F .text	00000066 show_mem_info
000104f4 l     F .text	0000003c total_mem_size
00010530 l     F .text	000000a0 test_alloc
00012e10 l     O .rodata	00000012 __func__.2206
00014000 l     O .data	00000040 kernel_map.2218
00012e24 l     O .rodata	0000000c __func__.2248
00000000 l    df *ABS*	00000000 task.c
00010a30 l     F .text	00000019 list_node_init
00010a49 l     F .text	0000000b list_node_next
00010a54 l     F .text	0000000b list_size
00010a5f l     F .text	0000000a list_first
00010a69 l     F .text	0000000c write_cr3
00010a75 l     F .text	00000017 write_tr
00010a8c l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000190 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010a9d l     F .text	0000012d tss_init
00012ecc l     O .rodata	0000000a __func__.2236
00010cd9 l     F .text	00000005 idle_task_entry
00012ed8 l     O .rodata	00000010 __func__.2261
00000000 l    df *ABS*	00000000 cpu.c
000110f3 l     F .text	00000028 lgdt
0001111b l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 irq.c
00011351 l     F .text	0000001d inb
0001136e l     F .text	0000001f outb
0001138d l     F .text	00000007 cli
00011394 l     F .text	00000007 sti
0001139b l     F .text	00000028 lidt
000113c3 l     F .text	00000007 hlt
000113ca l     F .text	00000010 read_eflags
000113da l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
000113e5 l     F .text	000000ca dump_core_regs
000114af l     F .text	0000003e do_default_handler
00011739 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 timer.c
00011b3d l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011b84 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00011bfc l     F .text	0000000b list_size
00011c07 l     F .text	0000000a list_first
00011c11 l     F .text	0000000b list_last
00013304 l     O .rodata	0000000c __func__.2192
00018e20 l     O .bss	000000b4 first_task
00013310 l     O .rodata	00000013 __func__.2225
00000000 l    df *ABS*	00000000 mutex.c
00011ea8 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 sem.c
00012042 l     F .text	0000000b list_size
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000123cb l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1928
00000000 l    df *ABS*	00000000 list.c
00012928 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012b1e l     F .text	0000001d inb
00012b3b l     F .text	0000001f outb
00018ee0 l     O .bss	00000054 mutex
00000000 l    df *ABS*	00000000 first_task.c
0001171d g     F .text	0000001c do_handler_control_protection_exception
000122c3 g     F .text	0000003a bitmap_get_bit
00010eac g     F .text	0000000a task_current
00011525 g     F .text	0000001c do_handler_debug_exception
00011701 g     F .text	0000001c do_handler_virtualization_exception
00011ade g     F .text	0000000b irq_enable_global
00011621 g     F .text	0000001c do_handler_segment_not_present
00010e0a g     F .text	00000034 task_set_ready
00012419 g     F .text	00000070 kstrncpy
000122fd g     F .text	0000001b bitmap_is_set
00011c70 g     F .text	0000019c link_test
00011541 g     F .text	0000001c do_handler_nmi_interrupt
0001126c g     F .text	00000023 cpu_init
00012b5a g     F .text	000000a2 log_init
00011e4d g     F .text	0000005b init_main
0001258d g     F .text	00000041 kmemset
00011318 g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
000119c1 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00012489 g     F .text	0000003b kstrlen
00011579 g     F .text	0000001c do_handler_overflow
00010680 g     F .text	00000087 memory_create_map
000101b8 g       .text	00000000 exception_handler_general_protection
00011659 g     F .text	0000001c do_handler_general_protection
0001215d g     F .text	00000029 sem_count
80000012 g     F .first_task	00000028 first_task_main
00011595 g     F .text	0000001c do_handler_bound_range_exceed
000121ef g     F .text	000000d4 bitmap_set_bit
000115e9 g     F .text	0000001c do_handler_double_fault
00011675 g     F .text	0000001c do_handler_page_fault
0001026c g       .text	00000000 exception_handler_virtualization_exception
00010142 g       .text	00000000 exception_handler_double_fault
00011ae9 g     F .text	0000002b pic_send_eoi
00010e00 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107d7 g     F .text	00000085 memory_create_uvm
00012070 g     F .text	0000006b sem_wait
00010a0e g     F .text	00000022 memory_alloc_page_for
00011b5c g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c7 g       .text	00000000 simple_switch
0001295e g     F .text	0000005f list_insert_front
00018f40 g     O .bss	00002000 stack
0001109c g     F .text	00000057 sys_sleep
0001278f g     F .text	00000163 kvsprintf
0001af40 g       *ABS*	00000000 s_first_task
00010940 g     F .text	000000ce memory_alloc_for_page_dir
000120db g     F .text	00000082 sem_notify
000115b1 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011be4 g     F .text	00000018 timer_init
00010d44 g     F .text	000000bc task_first_init
000116c9 g     F .text	0000001c do_handler_machine_check
000115cd g     F .text	0000001c do_handler_device_not_found
0001107c g     F .text	00000020 task_set_wakeup
000129bd g     F .text	00000063 list_insert_back
00011ad3 g     F .text	0000000b irq_disable_global
00010eb6 g     F .text	00000061 sys_sched_yield
0001af86 g       *ABS*	00000000 mem_free_start
00011c1c g     F .text	00000054 kernel_init
0001204d g     F .text	00000023 sem_init
0001276b g     F .text	00000024 ksprintf
00010000 g       .text	00000000 _start
00010e3e g     F .text	0000002b task_set_blocked
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001af40 g       .bss	00000000 e_data
0001262c g     F .text	0000013f kitoa
000123d2 g     F .text	00000047 kstrcpy
000124c4 g     F .text	0000007a kstrncmp
000116ad g     F .text	0000001c do_handler_aligment_check
000125ce g     F .text	0000005e kmemcmp
000101f2 g       .text	00000000 exception_handler_floating_point_error
0001022e g       .text	00000000 exception_handler_machine_check
00011605 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001af86 g       *ABS*	00000000 e_first_task
0001104b g     F .text	00000031 task_set_sleep
000102a8 g       .text	00000000 exception_handler_timer
0001198c g     F .text	00000035 irq_install
000111ff g     F .text	0000006d init_gdt
00011b14 g     F .text	00000018 irq_enter_protection
00011eb3 g     F .text	00000041 mutex_init
00011a4c g     F .text	00000087 irq_disable
0001004a g       .text	00000000 exception_handler_divide_error
00011509 g     F .text	0000001c do_handler_divide_error
00012186 g     F .text	00000016 bitmap_byte_count
00010f17 g     F .text	0000005b task_dispatch
00011e0c g     F .text	00000041 move_to_first_task
00010e69 g     F .text	00000043 task_next_run
00010707 g     F .text	000000d0 create_kernel_table
0001293b g     F .text	00000023 list_init
000101d5 g       .text	00000000 exception_handler_page_fault
000114ed g     F .text	0000001c do_handler_unknown
00010cbb g     F .text	0000001e task_switch_from_to
000117cc g     F .text	000001c0 irq_init
00011b2c g     F .text	00000011 irq_leave_protection
00010088 g       .text	00000000 exception_handler_nmi_interrupt
00011135 g     F .text	00000083 segment_desc_set
00013378 g       .rodata	00000000 e_text
00010211 g       .text	00000000 exception_handler_aligment_check
0001028b g       .text	00000000 exception_handler_control_protection_exception
0001219c g     F .text	00000053 bitmap_init
000116e5 g     F .text	0000001c do_handler_simd_floating_point_exception
0001253e g     F .text	0000004f kmemcpy
0001017c g       .text	00000000 exception_handler_segment_not_present
00012318 g     F .text	000000b3 bitmap_alloc_nbits
00010cde g     F .text	00000066 task_manager_init
000100e5 g       .text	00000000 exception_handler_bound_range_exceed
00010f72 g     F .text	000000d9 task_time_tick
0001085c g     F .text	000000e4 memory_init
00010123 g       .text	00000000 exception_handler_device_not_found
000128f2 g     F .text	00000036 pannic
0001163d g     F .text	0000001c do_handler_stack_segment_fault
0001155d g     F .text	0000001c do_handler_breakpoint
00010069 g       .text	00000000 exception_handler_debug_exception
00011691 g     F .text	0000001c do_handler_floating_point_error
00012bfc g     F .text	000000de log_printf
00010bca g     F .text	000000f1 task_init
00012a20 g     F .text	00000079 list_remove_front
000112a3 g     F .text	00000075 gdt_alloc_desc
00011f82 g     F .text	000000c0 mutex_release
00012a99 g     F .text	00000085 list_remove
0001128f g     F .text	00000014 swtch_to_tss
000111b8 g     F .text	00000047 gate_desc_set
00011ef4 g     F .text	0000008e mutex_acquire
0001024d g       .text	00000000 exception_handler_simd_floating_point_exception
000105d0 g     F .text	000000b0 find_pte



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax # 取传入的参数 boot_info_t* boot_info
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax # 这条语句 可以代替上面三条指令。没有按照gcc的C语言函数调用约定来做事，因为_start不会返回

    push %eax # 手动压入下一个要执行的函数的参数，相当于 kernel_init(&boot_info)
   10006:	50                   	push   %eax
    # kernel_init(&boof_info);
    call kernel_init
   10007:	e8 10 1c 00 00       	call   11c1c <kernel_init>

    # jmp 语法格式：偏移量, 地址
    # 因为 KERNEL_SELECTOR_CS 为 1 * 8，所以会直接跳转到 gdt表的 CS所在的项，
    # 那里设置的地址范围是 0~4G，因此实际读取的地址就是 0 + gdt_reload 地址
    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

# 将段寄存器全部设置为 DS 指向的内容
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 af 01 00       	mov    $0x1af40,%esp
    jmp init_main
   10026:	e9 22 1e 00 00       	jmp    11e4d <init_main>

0001002b <exception_handler_unknown>:
    add $(2 * 4), %esp

    iret
.endm

exception_handler unknown,                      -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 b1 14 00 00       	call   114ed <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divide_error>:
exception_handler divide_error,                  0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 ae 14 00 00       	call   11509 <do_handler_divide_error>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_debug_exception>:
exception_handler debug_exception,               1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 ab 14 00 00       	call   11525 <do_handler_debug_exception>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_nmi_interrupt>:
exception_handler nmi_interrupt,                 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 a8 14 00 00       	call   11541 <do_handler_nmi_interrupt>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint,                    3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 a5 14 00 00       	call   1155d <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow,                      4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 a2 14 00 00       	call   11579 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceed>:
exception_handler bound_range_exceed,            5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 9f 14 00 00       	call   11595 <do_handler_bound_range_exceed>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode,                6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 9c 14 00 00       	call   115b1 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_found>:
exception_handler device_not_found,              7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 99 14 00 00       	call   115cd <do_handler_device_not_found>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault,                  8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 98 14 00 00       	call   115e9 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss,                   10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 97 14 00 00       	call   11605 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,           11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 96 14 00 00       	call   11621 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,           12, 0
   10199:	6a 00                	push   $0x0
   1019b:	6a 0c                	push   $0xc
   1019d:	60                   	pusha  
   1019e:	1e                   	push   %ds
   1019f:	06                   	push   %es
   101a0:	0f a0                	push   %fs
   101a2:	0f a8                	push   %gs
   101a4:	54                   	push   %esp
   101a5:	e8 93 14 00 00       	call   1163d <do_handler_stack_segment_fault>
   101aa:	83 c4 04             	add    $0x4,%esp
   101ad:	0f a9                	pop    %gs
   101af:	0f a1                	pop    %fs
   101b1:	07                   	pop    %es
   101b2:	1f                   	pop    %ds
   101b3:	61                   	popa   
   101b4:	83 c4 08             	add    $0x8,%esp
   101b7:	cf                   	iret   

000101b8 <exception_handler_general_protection>:
exception_handler general_protection,            13, 1
   101b8:	6a 0d                	push   $0xd
   101ba:	60                   	pusha  
   101bb:	1e                   	push   %ds
   101bc:	06                   	push   %es
   101bd:	0f a0                	push   %fs
   101bf:	0f a8                	push   %gs
   101c1:	54                   	push   %esp
   101c2:	e8 92 14 00 00       	call   11659 <do_handler_general_protection>
   101c7:	83 c4 04             	add    $0x4,%esp
   101ca:	0f a9                	pop    %gs
   101cc:	0f a1                	pop    %fs
   101ce:	07                   	pop    %es
   101cf:	1f                   	pop    %ds
   101d0:	61                   	popa   
   101d1:	83 c4 08             	add    $0x8,%esp
   101d4:	cf                   	iret   

000101d5 <exception_handler_page_fault>:
exception_handler page_fault,                    14, 1
   101d5:	6a 0e                	push   $0xe
   101d7:	60                   	pusha  
   101d8:	1e                   	push   %ds
   101d9:	06                   	push   %es
   101da:	0f a0                	push   %fs
   101dc:	0f a8                	push   %gs
   101de:	54                   	push   %esp
   101df:	e8 91 14 00 00       	call   11675 <do_handler_page_fault>
   101e4:	83 c4 04             	add    $0x4,%esp
   101e7:	0f a9                	pop    %gs
   101e9:	0f a1                	pop    %fs
   101eb:	07                   	pop    %es
   101ec:	1f                   	pop    %ds
   101ed:	61                   	popa   
   101ee:	83 c4 08             	add    $0x8,%esp
   101f1:	cf                   	iret   

000101f2 <exception_handler_floating_point_error>:
exception_handler floating_point_error,          16, 0
   101f2:	6a 00                	push   $0x0
   101f4:	6a 10                	push   $0x10
   101f6:	60                   	pusha  
   101f7:	1e                   	push   %ds
   101f8:	06                   	push   %es
   101f9:	0f a0                	push   %fs
   101fb:	0f a8                	push   %gs
   101fd:	54                   	push   %esp
   101fe:	e8 8e 14 00 00       	call   11691 <do_handler_floating_point_error>
   10203:	83 c4 04             	add    $0x4,%esp
   10206:	0f a9                	pop    %gs
   10208:	0f a1                	pop    %fs
   1020a:	07                   	pop    %es
   1020b:	1f                   	pop    %ds
   1020c:	61                   	popa   
   1020d:	83 c4 08             	add    $0x8,%esp
   10210:	cf                   	iret   

00010211 <exception_handler_aligment_check>:
exception_handler aligment_check,                17, 1
   10211:	6a 11                	push   $0x11
   10213:	60                   	pusha  
   10214:	1e                   	push   %ds
   10215:	06                   	push   %es
   10216:	0f a0                	push   %fs
   10218:	0f a8                	push   %gs
   1021a:	54                   	push   %esp
   1021b:	e8 8d 14 00 00       	call   116ad <do_handler_aligment_check>
   10220:	83 c4 04             	add    $0x4,%esp
   10223:	0f a9                	pop    %gs
   10225:	0f a1                	pop    %fs
   10227:	07                   	pop    %es
   10228:	1f                   	pop    %ds
   10229:	61                   	popa   
   1022a:	83 c4 08             	add    $0x8,%esp
   1022d:	cf                   	iret   

0001022e <exception_handler_machine_check>:
exception_handler machine_check                  18, 0
   1022e:	6a 00                	push   $0x0
   10230:	6a 12                	push   $0x12
   10232:	60                   	pusha  
   10233:	1e                   	push   %ds
   10234:	06                   	push   %es
   10235:	0f a0                	push   %fs
   10237:	0f a8                	push   %gs
   10239:	54                   	push   %esp
   1023a:	e8 8a 14 00 00       	call   116c9 <do_handler_machine_check>
   1023f:	83 c4 04             	add    $0x4,%esp
   10242:	0f a9                	pop    %gs
   10244:	0f a1                	pop    %fs
   10246:	07                   	pop    %es
   10247:	1f                   	pop    %ds
   10248:	61                   	popa   
   10249:	83 c4 08             	add    $0x8,%esp
   1024c:	cf                   	iret   

0001024d <exception_handler_simd_floating_point_exception>:
exception_handler simd_floating_point_exception, 19, 0
   1024d:	6a 00                	push   $0x0
   1024f:	6a 13                	push   $0x13
   10251:	60                   	pusha  
   10252:	1e                   	push   %ds
   10253:	06                   	push   %es
   10254:	0f a0                	push   %fs
   10256:	0f a8                	push   %gs
   10258:	54                   	push   %esp
   10259:	e8 87 14 00 00       	call   116e5 <do_handler_simd_floating_point_exception>
   1025e:	83 c4 04             	add    $0x4,%esp
   10261:	0f a9                	pop    %gs
   10263:	0f a1                	pop    %fs
   10265:	07                   	pop    %es
   10266:	1f                   	pop    %ds
   10267:	61                   	popa   
   10268:	83 c4 08             	add    $0x8,%esp
   1026b:	cf                   	iret   

0001026c <exception_handler_virtualization_exception>:
exception_handler virtualization_exception,      20, 0
   1026c:	6a 00                	push   $0x0
   1026e:	6a 14                	push   $0x14
   10270:	60                   	pusha  
   10271:	1e                   	push   %ds
   10272:	06                   	push   %es
   10273:	0f a0                	push   %fs
   10275:	0f a8                	push   %gs
   10277:	54                   	push   %esp
   10278:	e8 84 14 00 00       	call   11701 <do_handler_virtualization_exception>
   1027d:	83 c4 04             	add    $0x4,%esp
   10280:	0f a9                	pop    %gs
   10282:	0f a1                	pop    %fs
   10284:	07                   	pop    %es
   10285:	1f                   	pop    %ds
   10286:	61                   	popa   
   10287:	83 c4 08             	add    $0x8,%esp
   1028a:	cf                   	iret   

0001028b <exception_handler_control_protection_exception>:
exception_handler control_protection_exception,  21, 1
   1028b:	6a 15                	push   $0x15
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 83 14 00 00       	call   1171d <do_handler_control_protection_exception>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <exception_handler_timer>:

exception_handler timer,  0x20, 0
   102a8:	6a 00                	push   $0x0
   102aa:	6a 20                	push   $0x20
   102ac:	60                   	pusha  
   102ad:	1e                   	push   %ds
   102ae:	06                   	push   %es
   102af:	0f a0                	push   %fs
   102b1:	0f a8                	push   %gs
   102b3:	54                   	push   %esp
   102b4:	e8 a3 18 00 00       	call   11b5c <do_handler_timer>
   102b9:	83 c4 04             	add    $0x4,%esp
   102bc:	0f a9                	pop    %gs
   102be:	0f a1                	pop    %fs
   102c0:	07                   	pop    %es
   102c1:	1f                   	pop    %ds
   102c2:	61                   	popa   
   102c3:	83 c4 08             	add    $0x8,%esp
   102c6:	cf                   	iret   

000102c7 <simple_switch>:


    .text
    .global simple_switch
simple_switch:  # simple_switch(&from->stack, to->stack)
    mov 4(%esp), %eax   # 取出 from 的 stack 字段
   102c7:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx   # 取出 to 的 stack 字段
   102cb:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102cf:	55                   	push   %ebp
    push %ebx
   102d0:	53                   	push   %ebx
    push %esi
   102d1:	56                   	push   %esi
    push %edi
   102d2:	57                   	push   %edi

    mov %esp, (%eax)   # 将现在的 esp 写入 from 的 stack 字段
   102d3:	89 20                	mov    %esp,(%eax)

    # 这里要从另外一个任务出栈, 切换栈
    # 把另一个任务的栈地址给了esp
    mov %edx, %esp
   102d5:	89 d4                	mov    %edx,%esp

    pop %edi
   102d7:	5f                   	pop    %edi
    pop %esi
   102d8:	5e                   	pop    %esi
    pop %ebx
   102d9:	5b                   	pop    %ebx
    pop %ebp
   102da:	5d                   	pop    %ebp

   102db:	c3                   	ret    

000102dc <up2>:
#include "comm/types.h"

#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102dc:	55                   	push   %ebp
   102dd:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	01 d0                	add    %edx,%eax
   102e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   102ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   102ed:	f7 d8                	neg    %eax
   102ef:	21 d0                	and    %edx,%eax
}
   102f1:	5d                   	pop    %ebp
   102f2:	c3                   	ret    

000102f3 <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102f3:	55                   	push   %ebp
   102f4:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	23 45 08             	and    0x8(%ebp),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	0f 22 d8             	mov    %eax,%cr3
}
   10309:	90                   	nop
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 * // 只取高10位
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
   1030f:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10312:	8b 45 08             	mov    0x8(%ebp),%eax
   10315:	c1 e8 16             	shr    $0x16,%eax
   10318:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1031b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pde_paddr>:

/**
 * @brief 获取pde中的地址字段
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1032a:	c0 ea 04             	shr    $0x4,%dl
   1032d:	0f b6 d2             	movzbl %dl,%edx
   10330:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10334:	c1 e1 04             	shl    $0x4,%ecx
   10337:	09 ca                	or     %ecx,%edx
   10339:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1033d:	c1 e0 0c             	shl    $0xc,%eax
   10340:	09 d0                	or     %edx,%eax
   10342:	c1 e0 0c             	shl    $0xc,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 * // 取中间10位
 */
static inline int pte_index (uint32_t vaddr) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	c1 e8 0c             	shr    $0xc,%eax
   10350:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10355:	5d                   	pop    %ebp
   10356:	c3                   	ret    

00010357 <mmu_set_page_dir>:
 */
static inline uint32_t pte_paddr (pte_t * pte) {
    return pte->phy_page_addr << 12;
}

static inline void mmu_set_page_dir(uint32_t paddr) {
   10357:	55                   	push   %ebp
   10358:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1035a:	ff 75 08             	pushl  0x8(%ebp)
   1035d:	e8 9e ff ff ff       	call   10300 <write_cr3>
   10362:	83 c4 04             	add    $0x4,%esp
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <addr_alloc_init>:
// 本质上是用内存块记录该起始地址的内存块内的可用信息
// 给分配器准备一个位图
// start: 起始地址
// size: 需要分配的内存大小
// page_size: 分配的页大小 (4096等)
static void addr_alloc_init(addr_alloc_t* alloc, uint8_t* bits, uint32_t start, uint32_t size, uint32_t page_size) {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex, "addr_alloc_t");
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	83 ec 08             	sub    $0x8,%esp
   10374:	68 dc 2c 01 00       	push   $0x12cdc
   10379:	50                   	push   %eax
   1037a:	e8 34 1b 00 00       	call   11eb3 <mutex_init>
   1037f:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	8b 55 10             	mov    0x10(%ebp),%edx
   10388:	89 50 5c             	mov    %edx,0x5c(%eax)
    alloc->size = size;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	8b 55 14             	mov    0x14(%ebp),%edx
   10391:	89 50 60             	mov    %edx,0x60(%eax)
    alloc->page_size = page_size;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 55 18             	mov    0x18(%ebp),%edx
   1039a:	89 50 64             	mov    %edx,0x64(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   1039d:	8b 45 08             	mov    0x8(%ebp),%eax
   103a0:	8b 40 60             	mov    0x60(%eax),%eax
   103a3:	ba 00 00 00 00       	mov    $0x0,%edx
   103a8:	f7 75 18             	divl   0x18(%ebp)
   103ab:	89 c2                	mov    %eax,%edx
   103ad:	8b 45 08             	mov    0x8(%ebp),%eax
   103b0:	83 c0 54             	add    $0x54,%eax
   103b3:	6a 00                	push   $0x0
   103b5:	52                   	push   %edx
   103b6:	ff 75 0c             	pushl  0xc(%ebp)
   103b9:	50                   	push   %eax
   103ba:	e8 dd 1d 00 00       	call   1219c <bitmap_init>
   103bf:	83 c4 10             	add    $0x10,%esp
}
   103c2:	90                   	nop
   103c3:	c9                   	leave  
   103c4:	c3                   	ret    

000103c5 <addr_alloc_page>:

// 申请内存页
// 根据内存分配器中的信息，（起始页，该内存块可用大小，该块中分配的页大小）
// 来申请内存
// int page_count: 页数
static uint32_t addr_alloc_page(addr_alloc_t* alloc, int page_count) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
   103c8:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_acquire(&alloc->mutex);
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	83 ec 0c             	sub    $0xc,%esp
   103d8:	50                   	push   %eax
   103d9:	e8 16 1b 00 00       	call   11ef4 <mutex_acquire>
   103de:	83 c4 10             	add    $0x10,%esp

    // 从位图视角中，找到一个连续的可以分配的储存空间，
    // 将起始下标返回给 page_index
    // 
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	83 c0 54             	add    $0x54,%eax
   103e7:	83 ec 04             	sub    $0x4,%esp
   103ea:	ff 75 0c             	pushl  0xc(%ebp)
   103ed:	6a 00                	push   $0x0
   103ef:	50                   	push   %eax
   103f0:	e8 23 1f 00 00       	call   12318 <bitmap_alloc_nbits>
   103f5:	83 c4 10             	add    $0x10,%esp
   103f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   103fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103ff:	78 17                	js     10418 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	8b 50 5c             	mov    0x5c(%eax),%edx
   10407:	8b 45 08             	mov    0x8(%ebp),%eax
   1040a:	8b 48 64             	mov    0x64(%eax),%ecx
   1040d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10410:	0f af c1             	imul   %ecx,%eax
   10413:	01 d0                	add    %edx,%eax
   10415:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_release(&alloc->mutex);
   10418:	8b 45 08             	mov    0x8(%ebp),%eax
   1041b:	83 ec 0c             	sub    $0xc,%esp
   1041e:	50                   	push   %eax
   1041f:	e8 5e 1b 00 00       	call   11f82 <mutex_release>
   10424:	83 c4 10             	add    $0x10,%esp

    return addr;
   10427:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1042a:	c9                   	leave  
   1042b:	c3                   	ret    

0001042c <addr_free_page>:

// 释放内存页
// 内存分配器
// uint32_t addr: 释放的内存页的起始地址
// int page_count: 需要释放的页数
static void addr_free_page(addr_alloc_t* alloc, uint32_t addr, int page_count) {
   1042c:	55                   	push   %ebp
   1042d:	89 e5                	mov    %esp,%ebp
   1042f:	53                   	push   %ebx
   10430:	83 ec 14             	sub    $0x14,%esp
    mutex_acquire(&alloc->mutex);
   10433:	8b 45 08             	mov    0x8(%ebp),%eax
   10436:	83 ec 0c             	sub    $0xc,%esp
   10439:	50                   	push   %eax
   1043a:	e8 b5 1a 00 00       	call   11ef4 <mutex_acquire>
   1043f:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10442:	8b 45 08             	mov    0x8(%ebp),%eax
   10445:	8b 40 5c             	mov    0x5c(%eax),%eax
   10448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044b:	89 d1                	mov    %edx,%ecx
   1044d:	29 c1                	sub    %eax,%ecx
   1044f:	8b 45 08             	mov    0x8(%ebp),%eax
   10452:	8b 58 64             	mov    0x64(%eax),%ebx
   10455:	89 c8                	mov    %ecx,%eax
   10457:	ba 00 00 00 00       	mov    $0x0,%edx
   1045c:	f7 f3                	div    %ebx
   1045e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   10461:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10464:	8b 55 08             	mov    0x8(%ebp),%edx
   10467:	83 c2 54             	add    $0x54,%edx
   1046a:	6a 00                	push   $0x0
   1046c:	ff 75 10             	pushl  0x10(%ebp)
   1046f:	50                   	push   %eax
   10470:	52                   	push   %edx
   10471:	e8 79 1d 00 00       	call   121ef <bitmap_set_bit>
   10476:	83 c4 10             	add    $0x10,%esp

    mutex_release(&alloc->mutex);
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	83 ec 0c             	sub    $0xc,%esp
   1047f:	50                   	push   %eax
   10480:	e8 fd 1a 00 00       	call   11f82 <mutex_release>
   10485:	83 c4 10             	add    $0x10,%esp
}
   10488:	90                   	nop
   10489:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1048c:	c9                   	leave  
   1048d:	c3                   	ret    

0001048e <show_mem_info>:


static void show_mem_info (boot_info_t * boot_info) {
   1048e:	55                   	push   %ebp
   1048f:	89 e5                	mov    %esp,%ebp
   10491:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   10494:	83 ec 0c             	sub    $0xc,%esp
   10497:	68 e9 2c 01 00       	push   $0x12ce9
   1049c:	e8 5b 27 00 00       	call   12bfc <log_printf>
   104a1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104ab:	eb 29                	jmp    104d6 <show_mem_info+0x48>
        log_printf("[%d]: %x - %x", i,
   104ad:	8b 45 08             	mov    0x8(%ebp),%eax
   104b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104b3:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104bd:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104c0:	52                   	push   %edx
   104c1:	50                   	push   %eax
   104c2:	ff 75 f4             	pushl  -0xc(%ebp)
   104c5:	68 f5 2c 01 00       	push   $0x12cf5
   104ca:	e8 2d 27 00 00       	call   12bfc <log_printf>
   104cf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   104d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d6:	8b 45 08             	mov    0x8(%ebp),%eax
   104d9:	8b 40 50             	mov    0x50(%eax),%eax
   104dc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104df:	7c cc                	jl     104ad <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104e1:	83 ec 0c             	sub    $0xc,%esp
   104e4:	68 03 2d 01 00       	push   $0x12d03
   104e9:	e8 0e 27 00 00       	call   12bfc <log_printf>
   104ee:	83 c4 10             	add    $0x10,%esp
}
   104f1:	90                   	nop
   104f2:	c9                   	leave  
   104f3:	c3                   	ret    

000104f4 <total_mem_size>:


// 获取可用的物理内存大小
static uint32_t total_mem_size(boot_info_t * boot_info) {
   104f4:	55                   	push   %ebp
   104f5:	89 e5                	mov    %esp,%ebp
   104f7:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   10501:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10508:	eb 16                	jmp    10520 <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   1050a:	8b 45 08             	mov    0x8(%ebp),%eax
   1050d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10510:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10514:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10517:	01 d0                	add    %edx,%eax
   10519:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1051c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10520:	8b 45 08             	mov    0x8(%ebp),%eax
   10523:	8b 40 50             	mov    0x50(%eax),%eax
   10526:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10529:	7c df                	jl     1050a <total_mem_size+0x16>
    }
    return mem_size;
   1052b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1052e:	c9                   	leave  
   1052f:	c3                   	ret    

00010530 <test_alloc>:


static void test_alloc(void) {
   10530:	55                   	push   %ebp
   10531:	89 e5                	mov    %esp,%ebp
   10533:	81 ec 88 00 00 00    	sub    $0x88,%esp
    addr_alloc_t addr_alloc;

    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64 * 4096, 4096);
   10539:	83 ec 0c             	sub    $0xc,%esp
   1053c:	68 00 10 00 00       	push   $0x1000
   10541:	68 00 00 04 00       	push   $0x40000
   10546:	68 00 10 00 00       	push   $0x1000
   1054b:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   10551:	50                   	push   %eax
   10552:	8d 45 80             	lea    -0x80(%ebp),%eax
   10555:	50                   	push   %eax
   10556:	e8 0d fe ff ff       	call   10368 <addr_alloc_init>
   1055b:	83 c4 20             	add    $0x20,%esp

    for (int i = 0; i < 32; i++) {
   1055e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10565:	eb 2b                	jmp    10592 <test_alloc+0x62>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   10567:	83 ec 08             	sub    $0x8,%esp
   1056a:	6a 02                	push   $0x2
   1056c:	8d 45 80             	lea    -0x80(%ebp),%eax
   1056f:	50                   	push   %eax
   10570:	e8 50 fe ff ff       	call   103c5 <addr_alloc_page>
   10575:	83 c4 10             	add    $0x10,%esp
   10578:	89 45 e8             	mov    %eax,-0x18(%ebp)
        log_printf("alloc addr: %x\n", addr);
   1057b:	83 ec 08             	sub    $0x8,%esp
   1057e:	ff 75 e8             	pushl  -0x18(%ebp)
   10581:	68 05 2d 01 00       	push   $0x12d05
   10586:	e8 71 26 00 00       	call   12bfc <log_printf>
   1058b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   1058e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10592:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10596:	7e cf                	jle    10567 <test_alloc+0x37>
    }
    uint32_t addr = 0x1000;
   10598:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++) {
   1059f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   105a6:	eb 1f                	jmp    105c7 <test_alloc+0x97>
        addr += 4096 * 2;
   105a8:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        addr_free_page(&addr_alloc, addr, 2);
   105af:	83 ec 04             	sub    $0x4,%esp
   105b2:	6a 02                	push   $0x2
   105b4:	ff 75 f0             	pushl  -0x10(%ebp)
   105b7:	8d 45 80             	lea    -0x80(%ebp),%eax
   105ba:	50                   	push   %eax
   105bb:	e8 6c fe ff ff       	call   1042c <addr_free_page>
   105c0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 32; i++) {
   105c3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   105c7:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   105cb:	7e db                	jle    105a8 <test_alloc+0x78>
    }
}
   105cd:	90                   	nop
   105ce:	c9                   	leave  
   105cf:	c3                   	ret    

000105d0 <find_pte>:
// 建立PDE到PTE的映射关系，如果 alloc 为1，则创建这个PTE
// 并返回这个PTE表项
// pde_t* page_dir: 需要建立的页表，PDE
// uint32_t vaddr： 需要建立映射的虚拟地址
// int alloc:       如果为1，则创建这个PTE
pte_t* find_pte(pde_t* page_dir, uint32_t vaddr, int alloc) {
   105d0:	55                   	push   %ebp
   105d1:	89 e5                	mov    %esp,%ebp
   105d3:	83 ec 18             	sub    $0x18,%esp
    // 这个是二级页表的地址
    pte_t * page_table;

    pde_t *pde = &page_dir[pde_index(vaddr)];
   105d6:	ff 75 0c             	pushl  0xc(%ebp)
   105d9:	e8 2e fd ff ff       	call   1030c <pde_index>
   105de:	83 c4 04             	add    $0x4,%esp
   105e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105e8:	8b 45 08             	mov    0x8(%ebp),%eax
   105eb:	01 d0                	add    %edx,%eax
   105ed:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 如果这个一级页表对应的二级页表，
    // 它已经存在了
    if (pde->present) {
   105f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105f3:	0f b6 00             	movzbl (%eax),%eax
   105f6:	83 e0 01             	and    $0x1,%eax
   105f9:	84 c0                	test   %al,%al
   105fb:	74 10                	je     1060d <find_pte+0x3d>
        // 拿到二级页表的地址
        page_table = (pte_t*)pde_paddr(pde);
   105fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10600:	e8 1b fd ff ff       	call   10320 <pde_paddr>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1060b:	eb 57                	jmp    10664 <find_pte+0x94>
    }
    else {  // 这个一级页表对应的二级页表是不存在的，
            // 也就是说还没有建立映射关系
        if (alloc == 0) {
   1060d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10611:	75 07                	jne    1061a <find_pte+0x4a>
            return (pte_t*)0;
   10613:	b8 00 00 00 00       	mov    $0x0,%eax
   10618:	eb 64                	jmp    1067e <find_pte+0xae>
        }

        // alloc = 1, 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   1061a:	83 ec 08             	sub    $0x8,%esp
   1061d:	6a 01                	push   $0x1
   1061f:	68 00 50 01 00       	push   $0x15000
   10624:	e8 9c fd ff ff       	call   103c5 <addr_alloc_page>
   10629:	83 c4 10             	add    $0x10,%esp
   1062c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1062f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10633:	75 07                	jne    1063c <find_pte+0x6c>
            return (pte_t*)0;
   10635:	b8 00 00 00 00       	mov    $0x0,%eax
   1063a:	eb 42                	jmp    1067e <find_pte+0xae>
        }

        // 在一级页表中，设置为用户可读写，
        // 将被pte中设置所覆盖
        pde->v = pg_paddr | PDE_P | PTE_W | PTE_U;
   1063c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1063f:	83 c8 07             	or     $0x7,%eax
   10642:	89 c2                	mov    %eax,%edx
   10644:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10647:	89 10                	mov    %edx,(%eax)

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t*)(pg_paddr);
   10649:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1064c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kmemset(page_table, 0, MEM_PAGE_SIZE);
   1064f:	83 ec 04             	sub    $0x4,%esp
   10652:	68 00 10 00 00       	push   $0x1000
   10657:	6a 00                	push   $0x0
   10659:	ff 75 f4             	pushl  -0xc(%ebp)
   1065c:	e8 2c 1f 00 00       	call   1258d <kmemset>
   10661:	83 c4 10             	add    $0x10,%esp
    }

    return &page_table[pte_index(vaddr)];
   10664:	83 ec 0c             	sub    $0xc,%esp
   10667:	ff 75 0c             	pushl  0xc(%ebp)
   1066a:	e8 d8 fc ff ff       	call   10347 <pte_index>
   1066f:	83 c4 10             	add    $0x10,%esp
   10672:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10679:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067c:	01 d0                	add    %edx,%eax
}
   1067e:	c9                   	leave  
   1067f:	c3                   	ret    

00010680 <memory_create_map>:

// 建立内存映射
int memory_create_map(pde_t* page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   10680:	55                   	push   %ebp
   10681:	89 e5                	mov    %esp,%ebp
   10683:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1068d:	eb 6e                	jmp    106fd <memory_create_map+0x7d>
        // log_printf("create map: v-%x p-%x, perm: %x", vaddr, paddr, perm);

        // 在页表中找 vaddr 对应的 PTE (二级页表表项)
        pte_t* pte = find_pte(page_dir, vaddr, 1);
   1068f:	83 ec 04             	sub    $0x4,%esp
   10692:	6a 01                	push   $0x1
   10694:	ff 75 0c             	pushl  0xc(%ebp)
   10697:	ff 75 08             	pushl  0x8(%ebp)
   1069a:	e8 31 ff ff ff       	call   105d0 <find_pte>
   1069f:	83 c4 10             	add    $0x10,%esp
   106a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        
        // 没有找到
        if (pte == (pte_t*)0) {
   106a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106a9:	75 07                	jne    106b2 <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   106ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106b0:	eb 53                	jmp    10705 <memory_create_map+0x85>
        }
        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: %x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b5:	0f b6 00             	movzbl (%eax),%eax
   106b8:	83 e0 01             	and    $0x1,%eax
   106bb:	84 c0                	test   %al,%al
   106bd:	74 1c                	je     106db <memory_create_map+0x5b>
   106bf:	68 15 2d 01 00       	push   $0x12d15
   106c4:	68 10 2e 01 00       	push   $0x12e10
   106c9:	68 a2 00 00 00       	push   $0xa2
   106ce:	68 28 2d 01 00       	push   $0x12d28
   106d3:	e8 1a 22 00 00       	call   128f2 <pannic>
   106d8:	83 c4 10             	add    $0x10,%esp

        // 物理页(三级)的地址，和属性，加入进去
        pte->v = paddr | perm | PTE_P;
   106db:	8b 45 10             	mov    0x10(%ebp),%eax
   106de:	0b 45 18             	or     0x18(%ebp),%eax
   106e1:	83 c8 01             	or     $0x1,%eax
   106e4:	89 c2                	mov    %eax,%edx
   106e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e9:	89 10                	mov    %edx,(%eax)
        

        vaddr += MEM_PAGE_SIZE;
   106eb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106f2:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106f9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10700:	3b 45 14             	cmp    0x14(%ebp),%eax
   10703:	7c 8a                	jl     1068f <memory_create_map+0xf>
    }
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <create_kernel_table>:


void create_kernel_table(void) {
   10707:	55                   	push   %ebp
   10708:	89 e5                	mov    %esp,%ebp
   1070a:	83 ec 28             	sub    $0x28,%esp
        { s_data,        (void *)(MEM_EBDA_START - 1),   s_data,         PTE_W },     // 内核数据区
        // 扩展存储空间一一映射，方便直接操作
        { (void *)MEM_EXT_START, (void *)MEM_EXT_END,    (void *)MEM_EXT_START, PTE_W },
    };

    kmemset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1070d:	83 ec 04             	sub    $0x4,%esp
   10710:	68 00 10 00 00       	push   $0x1000
   10715:	6a 00                	push   $0x0
   10717:	68 00 60 01 00       	push   $0x16000
   1071c:	e8 6c 1e 00 00       	call   1258d <kmemset>
   10721:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10724:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1072b:	e9 98 00 00 00       	jmp    107c8 <create_kernel_table+0xc1>
        memory_map_t * map = kernel_map + i;
   10730:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10733:	c1 e0 04             	shl    $0x4,%eax
   10736:	05 00 40 01 00       	add    $0x14000,%eax
   1073b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1073e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10741:	8b 00                	mov    (%eax),%eax
   10743:	83 ec 08             	sub    $0x8,%esp
   10746:	68 00 10 00 00       	push   $0x1000
   1074b:	50                   	push   %eax
   1074c:	e8 a2 fb ff ff       	call   102f3 <down2>
   10751:	83 c4 10             	add    $0x10,%esp
   10754:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10757:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1075a:	8b 40 04             	mov    0x4(%eax),%eax
   1075d:	83 ec 08             	sub    $0x8,%esp
   10760:	68 00 10 00 00       	push   $0x1000
   10765:	50                   	push   %eax
   10766:	e8 71 fb ff ff       	call   102dc <up2>
   1076b:	83 c4 10             	add    $0x10,%esp
   1076e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   10771:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10774:	8b 40 08             	mov    0x8(%eax),%eax
   10777:	83 ec 08             	sub    $0x8,%esp
   1077a:	68 00 10 00 00       	push   $0x1000
   1077f:	50                   	push   %eax
   10780:	e8 6e fb ff ff       	call   102f3 <down2>
   10785:	83 c4 10             	add    $0x10,%esp
   10788:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;   // 计算有多少个页
   1078b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1078e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10791:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   10797:	85 c0                	test   %eax,%eax
   10799:	0f 48 c2             	cmovs  %edx,%eax
   1079c:	c1 f8 0c             	sar    $0xc,%eax
   1079f:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   107a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a5:	8b 48 0c             	mov    0xc(%eax),%ecx
   107a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   107ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107ae:	83 ec 0c             	sub    $0xc,%esp
   107b1:	51                   	push   %ecx
   107b2:	ff 75 e0             	pushl  -0x20(%ebp)
   107b5:	52                   	push   %edx
   107b6:	50                   	push   %eax
   107b7:	68 00 60 01 00       	push   $0x16000
   107bc:	e8 bf fe ff ff       	call   10680 <memory_create_map>
   107c1:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   107c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107cb:	83 f8 03             	cmp    $0x3,%eax
   107ce:	0f 86 5c ff ff ff    	jbe    10730 <create_kernel_table+0x29>
    }
}
   107d4:	90                   	nop
   107d5:	c9                   	leave  
   107d6:	c3                   	ret    

000107d7 <memory_create_uvm>:

// 创建用户页表
uint32_t memory_create_uvm(void) {
   107d7:	55                   	push   %ebp
   107d8:	89 e5                	mov    %esp,%ebp
   107da:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&paddr_alloc, 1);
   107dd:	83 ec 08             	sub    $0x8,%esp
   107e0:	6a 01                	push   $0x1
   107e2:	68 00 50 01 00       	push   $0x15000
   107e7:	e8 d9 fb ff ff       	call   103c5 <addr_alloc_page>
   107ec:	83 c4 10             	add    $0x10,%esp
   107ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107f6:	75 07                	jne    107ff <memory_create_uvm+0x28>
        return 0;
   107f8:	b8 00 00 00 00       	mov    $0x0,%eax
   107fd:	eb 5b                	jmp    1085a <memory_create_uvm+0x83>
    }

    kmemset(page_dir, 0, MEM_PAGE_SIZE);
   107ff:	83 ec 04             	sub    $0x4,%esp
   10802:	68 00 10 00 00       	push   $0x1000
   10807:	6a 00                	push   $0x0
   10809:	ff 75 f0             	pushl  -0x10(%ebp)
   1080c:	e8 7c 1d 00 00       	call   1258d <kmemset>
   10811:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10814:	83 ec 0c             	sub    $0xc,%esp
   10817:	68 00 00 00 80       	push   $0x80000000
   1081c:	e8 eb fa ff ff       	call   1030c <pde_index>
   10821:	83 c4 10             	add    $0x10,%esp
   10824:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10827:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1082e:	eb 1f                	jmp    1084f <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10830:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10833:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1083a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083d:	01 c2                	add    %eax,%edx
   1083f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10842:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10849:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   1084b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1084f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10852:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10855:	77 d9                	ja     10830 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10857:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1085a:	c9                   	leave  
   1085b:	c3                   	ret    

0001085c <memory_init>:


// 对整个操作系统的内存管理
// 初始化
void memory_init(boot_info_t* boot_info) {
   1085c:	55                   	push   %ebp
   1085d:	89 e5                	mov    %esp,%ebp
   1085f:	83 ec 18             	sub    $0x18,%esp
    // test_alloc();

    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10862:	83 ec 0c             	sub    $0xc,%esp
   10865:	68 6f 2d 01 00       	push   $0x12d6f
   1086a:	e8 8d 23 00 00       	call   12bfc <log_printf>
   1086f:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10872:	83 ec 0c             	sub    $0xc,%esp
   10875:	ff 75 08             	pushl  0x8(%ebp)
   10878:	e8 11 fc ff ff       	call   1048e <show_mem_info>
   1087d:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   10880:	c7 45 f4 86 af 01 00 	movl   $0x1af86,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10887:	83 ec 0c             	sub    $0xc,%esp
   1088a:	ff 75 08             	pushl  0x8(%ebp)
   1088d:	e8 62 fc ff ff       	call   104f4 <total_mem_size>
   10892:	83 c4 10             	add    $0x10,%esp
   10895:	2d 00 00 10 00       	sub    $0x100000,%eax
   1089a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   1089d:	83 ec 08             	sub    $0x8,%esp
   108a0:	68 00 10 00 00       	push   $0x1000
   108a5:	ff 75 f0             	pushl  -0x10(%ebp)
   108a8:	e8 46 fa ff ff       	call   102f3 <down2>
   108ad:	83 c4 10             	add    $0x10,%esp
   108b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: %x, size: %x", MEM_EXT_START, mem_up1MB_free);
   108b3:	83 ec 04             	sub    $0x4,%esp
   108b6:	ff 75 f0             	pushl  -0x10(%ebp)
   108b9:	68 00 00 10 00       	push   $0x100000
   108be:	68 79 2d 01 00       	push   $0x12d79
   108c3:	e8 34 23 00 00       	call   12bfc <log_printf>
   108c8:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存紧跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   108cb:	83 ec 0c             	sub    $0xc,%esp
   108ce:	68 00 10 00 00       	push   $0x1000
   108d3:	ff 75 f0             	pushl  -0x10(%ebp)
   108d6:	68 00 00 10 00       	push   $0x100000
   108db:	ff 75 f4             	pushl  -0xc(%ebp)
   108de:	68 00 50 01 00       	push   $0x15000
   108e3:	e8 80 fa ff ff       	call   10368 <addr_alloc_init>
   108e8:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   108eb:	a1 60 50 01 00       	mov    0x15060,%eax
   108f0:	c1 e8 0c             	shr    $0xc,%eax
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	50                   	push   %eax
   108f7:	e8 8a 18 00 00       	call   12186 <bitmap_byte_count>
   108fc:	83 c4 10             	add    $0x10,%esp
   108ff:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10902:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10909:	76 1c                	jbe    10927 <memory_init+0xcb>
   1090b:	68 94 2d 01 00       	push   $0x12d94
   10910:	68 24 2e 01 00       	push   $0x12e24
   10915:	68 fa 00 00 00       	push   $0xfa
   1091a:	68 28 2d 01 00       	push   $0x12d28
   1091f:	e8 ce 1f 00 00       	call   128f2 <pannic>
   10924:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10927:	e8 db fd ff ff       	call   10707 <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1092c:	b8 00 60 01 00       	mov    $0x16000,%eax
   10931:	83 ec 0c             	sub    $0xc,%esp
   10934:	50                   	push   %eax
   10935:	e8 1d fa ff ff       	call   10357 <mmu_set_page_dir>
   1093a:	83 c4 10             	add    $0x10,%esp
}
   1093d:	90                   	nop
   1093e:	c9                   	leave  
   1093f:	c3                   	ret    

00010940 <memory_alloc_for_page_dir>:


int memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, uint32_t perm) {
   10940:	55                   	push   %ebp
   10941:	89 e5                	mov    %esp,%ebp
   10943:	83 ec 28             	sub    $0x28,%esp
    // 当前分配到哪个地址了？
    uint32_t curr_vaddr = vaddr;
   10946:	8b 45 0c             	mov    0xc(%ebp),%eax
   10949:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   1094c:	68 00 10 00 00       	push   $0x1000
   10951:	ff 75 10             	pushl  0x10(%ebp)
   10954:	e8 83 f9 ff ff       	call   102dc <up2>
   10959:	83 c4 08             	add    $0x8,%esp
   1095c:	c1 e8 0c             	shr    $0xc,%eax
   1095f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for (int i = 0; i < page_count; i++) {
   10962:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10969:	e9 8d 00 00 00       	jmp    109fb <memory_alloc_for_page_dir+0xbb>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   1096e:	83 ec 08             	sub    $0x8,%esp
   10971:	6a 01                	push   $0x1
   10973:	68 00 50 01 00       	push   $0x15000
   10978:	e8 48 fa ff ff       	call   103c5 <addr_alloc_page>
   1097d:	83 c4 10             	add    $0x10,%esp
   10980:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10983:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10987:	75 17                	jne    109a0 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. out of memory");
   10989:	83 ec 0c             	sub    $0xc,%esp
   1098c:	68 bc 2d 01 00       	push   $0x12dbc
   10991:	e8 66 22 00 00       	call   12bfc <log_printf>
   10996:	83 c4 10             	add    $0x10,%esp
            return 0;
   10999:	b8 00 00 00 00       	mov    $0x0,%eax
   1099e:	eb 6c                	jmp    10a0c <memory_alloc_for_page_dir+0xcc>
        }

        int err = memory_create_map((pde_t* )page_dir, curr_vaddr, paddr, 1, perm);
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	83 ec 0c             	sub    $0xc,%esp
   109a6:	ff 75 14             	pushl  0x14(%ebp)
   109a9:	6a 01                	push   $0x1
   109ab:	ff 75 e8             	pushl  -0x18(%ebp)
   109ae:	ff 75 f4             	pushl  -0xc(%ebp)
   109b1:	50                   	push   %eax
   109b2:	e8 c9 fc ff ff       	call   10680 <memory_create_map>
   109b7:	83 c4 20             	add    $0x20,%esp
   109ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   109bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   109c1:	79 2d                	jns    109f0 <memory_alloc_for_page_dir+0xb0>
            log_printf("mem alloc failed in mem_create_map(), out of memory");
   109c3:	83 ec 0c             	sub    $0xc,%esp
   109c6:	68 dc 2d 01 00       	push   $0x12ddc
   109cb:	e8 2c 22 00 00       	call   12bfc <log_printf>
   109d0:	83 c4 10             	add    $0x10,%esp

            // 需要取消之前建立的映射, 2023-03-21
            addr_free_page(&paddr_alloc, vaddr, i);
   109d3:	83 ec 04             	sub    $0x4,%esp
   109d6:	ff 75 f0             	pushl  -0x10(%ebp)
   109d9:	ff 75 0c             	pushl  0xc(%ebp)
   109dc:	68 00 50 01 00       	push   $0x15000
   109e1:	e8 46 fa ff ff       	call   1042c <addr_free_page>
   109e6:	83 c4 10             	add    $0x10,%esp

            return 0;
   109e9:	b8 00 00 00 00       	mov    $0x0,%eax
   109ee:	eb 1c                	jmp    10a0c <memory_alloc_for_page_dir+0xcc>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   109f0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   109f7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   109fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109fe:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a01:	0f 8c 67 ff ff ff    	jl     1096e <memory_alloc_for_page_dir+0x2e>
    }

    return 0;
   10a07:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a0c:	c9                   	leave  
   10a0d:	c3                   	ret    

00010a0e <memory_alloc_page_for>:


int memory_alloc_page_for(uint32_t addr, uint32_t size, uint32_t perm) {
   10a0e:	55                   	push   %ebp
   10a0f:	89 e5                	mov    %esp,%ebp
   10a11:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10a14:	e8 93 04 00 00       	call   10eac <task_current>
   10a19:	8b 40 64             	mov    0x64(%eax),%eax
   10a1c:	ff 75 10             	pushl  0x10(%ebp)
   10a1f:	ff 75 0c             	pushl  0xc(%ebp)
   10a22:	ff 75 08             	pushl  0x8(%ebp)
   10a25:	50                   	push   %eax
   10a26:	e8 15 ff ff ff       	call   10940 <memory_alloc_for_page_dir>
   10a2b:	83 c4 10             	add    $0x10,%esp
   10a2e:	c9                   	leave  
   10a2f:	c3                   	ret    

00010a30 <list_node_init>:
    struct _list_node_t* pre;
    struct _list_node_t* next;
} list_node_t;


static inline void list_node_init(list_node_t* node) {
   10a30:	55                   	push   %ebp
   10a31:	89 e5                	mov    %esp,%ebp
    node->pre = (list_node_t*)0;
   10a33:	8b 45 08             	mov    0x8(%ebp),%eax
   10a36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    node->next = (list_node_t*)0;
   10a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
}
   10a46:	90                   	nop
   10a47:	5d                   	pop    %ebp
   10a48:	c3                   	ret    

00010a49 <list_node_next>:

static inline list_node_t* list_node_pre(list_node_t* node) {
    return node->pre;
}

static inline list_node_t* list_node_next(list_node_t* node) {
   10a49:	55                   	push   %ebp
   10a4a:	89 e5                	mov    %esp,%ebp
    return node->next;
   10a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a4f:	8b 40 04             	mov    0x4(%eax),%eax
}
   10a52:	5d                   	pop    %ebp
   10a53:	c3                   	ret    

00010a54 <list_size>:

static inline int list_is_empty(list_t* list) {
    return list->count == 0;
}

static inline int list_size(list_t* list) {
   10a54:	55                   	push   %ebp
   10a55:	89 e5                	mov    %esp,%ebp
    return list->count;
   10a57:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5a:	8b 40 08             	mov    0x8(%eax),%eax
}
   10a5d:	5d                   	pop    %ebp
   10a5e:	c3                   	ret    

00010a5f <list_first>:

static inline list_node_t* list_first(list_t* list) {
   10a5f:	55                   	push   %ebp
   10a60:	89 e5                	mov    %esp,%ebp
    return list->first;
   10a62:	8b 45 08             	mov    0x8(%ebp),%eax
   10a65:	8b 00                	mov    (%eax),%eax
}
   10a67:	5d                   	pop    %ebp
   10a68:	c3                   	ret    

00010a69 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10a69:	55                   	push   %ebp
   10a6a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6f:	0f 22 d8             	mov    %eax,%cr3
}
   10a72:	90                   	nop
   10a73:	5d                   	pop    %ebp
   10a74:	c3                   	ret    

00010a75 <write_tr>:
    __asm__ __volatile__("hlt");
}


// write_tr
static inline void write_tr(uint16_t tss_sel) {
   10a75:	55                   	push   %ebp
   10a76:	89 e5                	mov    %esp,%ebp
   10a78:	83 ec 04             	sub    $0x4,%esp
   10a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10a82:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10a86:	0f 00 d8             	ltr    %ax
}
   10a89:	90                   	nop
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10a8f:	ff 75 08             	pushl  0x8(%ebp)
   10a92:	e8 d2 ff ff ff       	call   10a69 <write_cr3>
   10a97:	83 c4 04             	add    $0x4,%esp
}
   10a9a:	90                   	nop
   10a9b:	c9                   	leave  
   10a9c:	c3                   	ret    

00010a9d <tss_init>:
static task_manager_t task_manager;

static uint32_t idle_task_stack[IDLE_TASK_SIZE];


static int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   10a9d:	55                   	push   %ebp
   10a9e:	89 e5                	mov    %esp,%ebp
   10aa0:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   10aa3:	e8 fb 07 00 00       	call   112a3 <gdt_alloc_desc>
   10aa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   10aab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aaf:	79 1a                	jns    10acb <tss_init+0x2e>
        log_printf("alloc tss failed\n");
   10ab1:	83 ec 0c             	sub    $0xc,%esp
   10ab4:	68 30 2e 01 00       	push   $0x12e30
   10ab9:	e8 3e 21 00 00       	call   12bfc <log_printf>
   10abe:	83 c4 10             	add    $0x10,%esp
        return -1;
   10ac1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ac6:	e9 fd 00 00 00       	jmp    10bc8 <tss_init+0x12b>
    } 

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   10acb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ace:	83 c0 48             	add    $0x48,%eax
   10ad1:	68 89 00 00 00       	push   $0x89
   10ad6:	6a 68                	push   $0x68
   10ad8:	50                   	push   %eax
   10ad9:	ff 75 f4             	pushl  -0xc(%ebp)
   10adc:	e8 54 06 00 00       	call   11135 <segment_desc_set>
   10ae1:	83 c4 10             	add    $0x10,%esp

    kmemset(&task->tss, 0, sizeof(tss_t));
   10ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae7:	83 c0 48             	add    $0x48,%eax
   10aea:	83 ec 04             	sub    $0x4,%esp
   10aed:	6a 68                	push   $0x68
   10aef:	6a 00                	push   $0x0
   10af1:	50                   	push   %eax
   10af2:	e8 96 1a 00 00       	call   1258d <kmemset>
   10af7:	83 c4 10             	add    $0x10,%esp
    task->tss.eip    = entry;
   10afa:	8b 45 08             	mov    0x8(%ebp),%eax
   10afd:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b00:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp    = esp;
   10b03:	8b 45 08             	mov    0x8(%ebp),%eax
   10b06:	8b 55 10             	mov    0x10(%ebp),%edx
   10b09:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0   = esp;
   10b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b12:	8b 55 10             	mov    0x10(%ebp),%edx
   10b15:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss     = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10b18:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1b:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   10b22:	8b 45 08             	mov    0x8(%ebp),%eax
   10b25:	8b 50 50             	mov    0x50(%eax),%edx
   10b28:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es     = task->tss.ds  = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10b31:	8b 45 08             	mov    0x8(%ebp),%eax
   10b34:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10b3b:	00 00 00 
   10b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b41:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10b47:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4a:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10b50:	8b 45 08             	mov    0x8(%ebp),%eax
   10b53:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10b59:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5c:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10b6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6e:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs     = KERNEL_SELECTOR_CS;
   10b74:	8b 45 08             	mov    0x8(%ebp),%eax
   10b77:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   10b7e:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10b81:	8b 45 08             	mov    0x8(%ebp),%eax
   10b84:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    // CR3 页表
    uint32_t uvm_pgtbl = memory_create_uvm();
   10b8b:	e8 47 fc ff ff       	call   107d7 <memory_create_uvm>
   10b90:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (uvm_pgtbl == 0) {
   10b93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b97:	75 15                	jne    10bae <tss_init+0x111>
        gdt_free_sel(tss_sel);
   10b99:	83 ec 0c             	sub    $0xc,%esp
   10b9c:	ff 75 f4             	pushl  -0xc(%ebp)
   10b9f:	e8 74 07 00 00       	call   11318 <gdt_free_sel>
   10ba4:	83 c4 10             	add    $0x10,%esp
        return -1;
   10ba7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bac:	eb 1a                	jmp    10bc8 <tss_init+0x12b>
    }
    task->tss.cr3    = uvm_pgtbl;
   10bae:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10bb4:	89 50 64             	mov    %edx,0x64(%eax)

    task->tss_sel    = tss_sel;
   10bb7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bba:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10bbd:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10bc3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10bc8:	c9                   	leave  
   10bc9:	c3                   	ret    

00010bca <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   10bca:	55                   	push   %ebp
   10bcb:	89 e5                	mov    %esp,%ebp
   10bcd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t*)0);
   10bd0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10bd4:	75 19                	jne    10bef <task_init+0x25>
   10bd6:	68 42 2e 01 00       	push   $0x12e42
   10bdb:	68 cc 2e 01 00       	push   $0x12ecc
   10be0:	6a 31                	push   $0x31
   10be2:	68 58 2e 01 00       	push   $0x12e58
   10be7:	e8 06 1d 00 00       	call   128f2 <pannic>
   10bec:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   10bef:	83 ec 04             	sub    $0x4,%esp
   10bf2:	ff 75 14             	pushl  0x14(%ebp)
   10bf5:	ff 75 10             	pushl  0x10(%ebp)
   10bf8:	ff 75 08             	pushl  0x8(%ebp)
   10bfb:	e8 9d fe ff ff       	call   10a9d <tss_init>
   10c00:	83 c4 10             	add    $0x10,%esp

    kstrncpy(task->name, name, TASK_NAME_SIZE);
   10c03:	8b 45 08             	mov    0x8(%ebp),%eax
   10c06:	83 c0 04             	add    $0x4,%eax
   10c09:	83 ec 04             	sub    $0x4,%esp
   10c0c:	6a 20                	push   $0x20
   10c0e:	ff 75 0c             	pushl  0xc(%ebp)
   10c11:	50                   	push   %eax
   10c12:	e8 02 18 00 00       	call   12419 <kstrncpy>
   10c17:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10c1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->sleep_ticks = 0;
   10c23:	8b 45 08             	mov    0x8(%ebp),%eax
   10c26:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10c2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c30:	c7 40 40 0a 00 00 00 	movl   $0xa,0x40(%eax)
    task->slice_ticks = task->time_ticks;
   10c37:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3a:	8b 50 40             	mov    0x40(%eax),%edx
   10c3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c40:	89 50 44             	mov    %edx,0x44(%eax)

    list_node_init(&task->all_node);
   10c43:	8b 45 08             	mov    0x8(%ebp),%eax
   10c46:	83 c0 2c             	add    $0x2c,%eax
   10c49:	83 ec 0c             	sub    $0xc,%esp
   10c4c:	50                   	push   %eax
   10c4d:	e8 de fd ff ff       	call   10a30 <list_node_init>
   10c52:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10c55:	8b 45 08             	mov    0x8(%ebp),%eax
   10c58:	83 c0 24             	add    $0x24,%eax
   10c5b:	83 ec 0c             	sub    $0xc,%esp
   10c5e:	50                   	push   %eax
   10c5f:	e8 cc fd ff ff       	call   10a30 <list_node_init>
   10c64:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10c67:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6a:	83 c0 34             	add    $0x34,%eax
   10c6d:	83 ec 0c             	sub    $0xc,%esp
   10c70:	50                   	push   %eax
   10c71:	e8 ba fd ff ff       	call   10a30 <list_node_init>
   10c76:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10c79:	e8 96 0e 00 00       	call   11b14 <irq_enter_protection>
   10c7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task);
   10c81:	83 ec 0c             	sub    $0xc,%esp
   10c84:	ff 75 08             	pushl  0x8(%ebp)
   10c87:	e8 7e 01 00 00       	call   10e0a <task_set_ready>
   10c8c:	83 c4 10             	add    $0x10,%esp

    list_insert_back(&task_manager.task_list, &task->all_node);
   10c8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c92:	83 c0 2c             	add    $0x2c,%eax
   10c95:	83 ec 08             	sub    $0x8,%esp
   10c98:	50                   	push   %eax
   10c99:	68 10 70 01 00       	push   $0x17010
   10c9e:	e8 1a 1d 00 00       	call   129bd <list_insert_back>
   10ca3:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10ca6:	83 ec 0c             	sub    $0xc,%esp
   10ca9:	ff 75 f4             	pushl  -0xc(%ebp)
   10cac:	e8 7b 0e 00 00       	call   11b2c <irq_leave_protection>
   10cb1:	83 c4 10             	add    $0x10,%esp

    return 0;
   10cb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10cb9:	c9                   	leave  
   10cba:	c3                   	ret    

00010cbb <task_switch_from_to>:


void simple_switch(uint32_t** from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   10cbb:	55                   	push   %ebp
   10cbc:	89 e5                	mov    %esp,%ebp
   10cbe:	83 ec 08             	sub    $0x8,%esp
    swtch_to_tss(to->tss_sel);
   10cc1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cc4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10cca:	83 ec 0c             	sub    $0xc,%esp
   10ccd:	50                   	push   %eax
   10cce:	e8 bc 05 00 00       	call   1128f <swtch_to_tss>
   10cd3:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10cd6:	90                   	nop
   10cd7:	c9                   	leave  
   10cd8:	c3                   	ret    

00010cd9 <idle_task_entry>:


// 空闲进程的执行代码
static void idle_task_entry(void) {
   10cd9:	55                   	push   %ebp
   10cda:	89 e5                	mov    %esp,%ebp
    while (1) {
   10cdc:	eb fe                	jmp    10cdc <idle_task_entry+0x3>

00010cde <task_manager_init>:
        // hlt();
    }
}


void task_manager_init(void) {
   10cde:	55                   	push   %ebp
   10cdf:	89 e5                	mov    %esp,%ebp
   10ce1:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10ce4:	83 ec 0c             	sub    $0xc,%esp
   10ce7:	68 04 70 01 00       	push   $0x17004
   10cec:	e8 4a 1c 00 00       	call   1293b <list_init>
   10cf1:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10cf4:	83 ec 0c             	sub    $0xc,%esp
   10cf7:	68 10 70 01 00       	push   $0x17010
   10cfc:	e8 3a 1c 00 00       	call   1293b <list_init>
   10d01:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10d04:	83 ec 0c             	sub    $0xc,%esp
   10d07:	68 1c 70 01 00       	push   $0x1701c
   10d0c:	e8 2a 1c 00 00       	call   1293b <list_init>
   10d11:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t*)0;
   10d14:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10d1b:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + IDLE_TASK_SIZE);
   10d1e:	b8 a0 71 01 00       	mov    $0x171a0,%eax
   10d23:	05 00 04 00 00       	add    $0x400,%eax
   10d28:	ba d9 0c 01 00       	mov    $0x10cd9,%edx
   10d2d:	50                   	push   %eax
   10d2e:	52                   	push   %edx
   10d2f:	68 9d 2e 01 00       	push   $0x12e9d
   10d34:	68 dc 70 01 00       	push   $0x170dc
   10d39:	e8 8c fe ff ff       	call   10bca <task_init>
   10d3e:	83 c4 10             	add    $0x10,%esp
}
   10d41:	90                   	nop
   10d42:	c9                   	leave  
   10d43:	c3                   	ret    

00010d44 <task_first_init>:

// 初始化程序的第一个进程，是操作系统一直连贯的
// 等切换走的时候，会自动保存进去的
void task_first_init(void) {
   10d44:	55                   	push   %ebp
   10d45:	89 e5                	mov    %esp,%ebp
   10d47:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[], e_first_task[];

    uint8_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10d4a:	ba 86 af 01 00       	mov    $0x1af86,%edx
   10d4f:	b8 40 af 01 00       	mov    $0x1af40,%eax
   10d54:	29 c2                	sub    %eax,%edx
   10d56:	89 d0                	mov    %edx,%eax
   10d58:	88 45 f7             	mov    %al,-0x9(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10d5b:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10d62:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   10d66:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10d69:	77 19                	ja     10d84 <task_first_init+0x40>
   10d6b:	68 a7 2e 01 00       	push   $0x12ea7
   10d70:	68 d8 2e 01 00       	push   $0x12ed8
   10d75:	6a 6e                	push   $0x6e
   10d77:	68 58 2e 01 00       	push   $0x12e58
   10d7c:	e8 71 1b 00 00       	call   128f2 <pannic>
   10d81:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10d84:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    task_init(&task_manager.first_task, "first task", (uint32_t)first_start, 0);
   10d8b:	6a 00                	push   $0x0
   10d8d:	ff 75 ec             	pushl  -0x14(%ebp)
   10d90:	68 be 2e 01 00       	push   $0x12ebe
   10d95:	68 28 70 01 00       	push   $0x17028
   10d9a:	e8 2b fe ff ff       	call   10bca <task_init>
   10d9f:	83 c4 10             	add    $0x10,%esp

    // 初始化第一个任务的TR寄存器，表示当前运行的任务是tss_sel参数中指向的任务
    write_tr(task_manager.first_task.tss_sel);
   10da2:	a1 d8 70 01 00       	mov    0x170d8,%eax
   10da7:	0f b7 c0             	movzwl %ax,%eax
   10daa:	83 ec 0c             	sub    $0xc,%esp
   10dad:	50                   	push   %eax
   10dae:	e8 c2 fc ff ff       	call   10a75 <write_tr>
   10db3:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10db6:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10dbd:	70 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10dc0:	a1 8c 70 01 00       	mov    0x1708c,%eax
   10dc5:	83 ec 0c             	sub    $0xc,%esp
   10dc8:	50                   	push   %eax
   10dc9:	e8 be fc ff ff       	call   10a8c <mmu_set_page_dir>
   10dce:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W);
   10dd1:	83 ec 04             	sub    $0x4,%esp
   10dd4:	6a 03                	push   $0x3
   10dd6:	ff 75 f0             	pushl  -0x10(%ebp)
   10dd9:	ff 75 ec             	pushl  -0x14(%ebp)
   10ddc:	e8 2d fc ff ff       	call   10a0e <memory_alloc_page_for>
   10de1:	83 c4 10             	add    $0x10,%esp

    kmemcpy((void*)first_start, s_first_task, copy_size);
   10de4:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   10de8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10deb:	83 ec 04             	sub    $0x4,%esp
   10dee:	52                   	push   %edx
   10def:	68 40 af 01 00       	push   $0x1af40
   10df4:	50                   	push   %eax
   10df5:	e8 44 17 00 00       	call   1253e <kmemcpy>
   10dfa:	83 c4 10             	add    $0x10,%esp
}
   10dfd:	90                   	nop
   10dfe:	c9                   	leave  
   10dff:	c3                   	ret    

00010e00 <task_first_task>:

// 获取程序的第一个进程，是操作系统一直连贯的
task_t* task_first_task(void) {
   10e00:	55                   	push   %ebp
   10e01:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10e03:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10e08:	5d                   	pop    %ebp
   10e09:	c3                   	ret    

00010e0a <task_set_ready>:


// 设置进程就绪。
// 将进程加入就绪队列的尾部
void task_set_ready(task_t* task) {
   10e0a:	55                   	push   %ebp
   10e0b:	89 e5                	mov    %esp,%ebp
   10e0d:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10e10:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10e17:	74 22                	je     10e3b <task_set_ready+0x31>
        return;
    }

    list_insert_back(&task_manager.ready_list, &task->run_node);
   10e19:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1c:	83 c0 24             	add    $0x24,%eax
   10e1f:	83 ec 08             	sub    $0x8,%esp
   10e22:	50                   	push   %eax
   10e23:	68 04 70 01 00       	push   $0x17004
   10e28:	e8 90 1b 00 00       	call   129bd <list_insert_back>
   10e2d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10e30:	8b 45 08             	mov    0x8(%ebp),%eax
   10e33:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   10e39:	eb 01                	jmp    10e3c <task_set_ready+0x32>
        return;
   10e3b:	90                   	nop
}
   10e3c:	c9                   	leave  
   10e3d:	c3                   	ret    

00010e3e <task_set_blocked>:

// 设置进程阻塞。
// 将进程移出就绪队列
void task_set_blocked(task_t* task) {
   10e3e:	55                   	push   %ebp
   10e3f:	89 e5                	mov    %esp,%ebp
   10e41:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {
   10e44:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10e4b:	74 19                	je     10e66 <task_set_blocked+0x28>
        return;
    }

    list_remove(&task_manager.ready_list, &task->run_node);
   10e4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e50:	83 c0 24             	add    $0x24,%eax
   10e53:	83 ec 08             	sub    $0x8,%esp
   10e56:	50                   	push   %eax
   10e57:	68 04 70 01 00       	push   $0x17004
   10e5c:	e8 38 1c 00 00       	call   12a99 <list_remove>
   10e61:	83 c4 10             	add    $0x10,%esp
   10e64:	eb 01                	jmp    10e67 <task_set_blocked+0x29>
        return;
   10e66:	90                   	nop
}
   10e67:	c9                   	leave  
   10e68:	c3                   	ret    

00010e69 <task_next_run>:

// 获得队列头部的进程
task_t* task_next_run(void) {
   10e69:	55                   	push   %ebp
   10e6a:	89 e5                	mov    %esp,%ebp
   10e6c:	83 ec 10             	sub    $0x10,%esp
    // 队列中没有进程时，运行空闲进程
    if (list_size(&task_manager.ready_list) == 0) {
   10e6f:	68 04 70 01 00       	push   $0x17004
   10e74:	e8 db fb ff ff       	call   10a54 <list_size>
   10e79:	83 c4 04             	add    $0x4,%esp
   10e7c:	85 c0                	test   %eax,%eax
   10e7e:	75 07                	jne    10e87 <task_next_run+0x1e>
        return &task_manager.idle_task;
   10e80:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10e85:	eb 23                	jmp    10eaa <task_next_run+0x41>
    }
    list_node_t* task_node = list_first(&task_manager.ready_list);
   10e87:	68 04 70 01 00       	push   $0x17004
   10e8c:	e8 ce fb ff ff       	call   10a5f <list_first>
   10e91:	83 c4 04             	add    $0x4,%esp
   10e94:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10e97:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10e9b:	74 08                	je     10ea5 <task_next_run+0x3c>
   10e9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ea0:	83 e8 24             	sub    $0x24,%eax
   10ea3:	eb 05                	jmp    10eaa <task_next_run+0x41>
   10ea5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10eaa:	c9                   	leave  
   10eab:	c3                   	ret    

00010eac <task_current>:

// 获取当前正在运行的进程
task_t* task_current(void) {
   10eac:	55                   	push   %ebp
   10ead:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10eaf:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10eb4:	5d                   	pop    %ebp
   10eb5:	c3                   	ret    

00010eb6 <sys_sched_yield>:


int sys_sched_yield(void) {
   10eb6:	55                   	push   %ebp
   10eb7:	89 e5                	mov    %esp,%ebp
   10eb9:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10ebc:	e8 53 0c 00 00       	call   11b14 <irq_enter_protection>
   10ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 读取就绪队列中头部的进程
    if (list_size(&task_manager.ready_list) > 1) {
   10ec4:	83 ec 0c             	sub    $0xc,%esp
   10ec7:	68 04 70 01 00       	push   $0x17004
   10ecc:	e8 83 fb ff ff       	call   10a54 <list_size>
   10ed1:	83 c4 10             	add    $0x10,%esp
   10ed4:	83 f8 01             	cmp    $0x1,%eax
   10ed7:	7e 29                	jle    10f02 <sys_sched_yield+0x4c>
        task_t* curr_task = task_current();
   10ed9:	e8 ce ff ff ff       	call   10eac <task_current>
   10ede:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_blocked(curr_task);
   10ee1:	83 ec 0c             	sub    $0xc,%esp
   10ee4:	ff 75 f0             	pushl  -0x10(%ebp)
   10ee7:	e8 52 ff ff ff       	call   10e3e <task_set_blocked>
   10eec:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10eef:	83 ec 0c             	sub    $0xc,%esp
   10ef2:	ff 75 f0             	pushl  -0x10(%ebp)
   10ef5:	e8 10 ff ff ff       	call   10e0a <task_set_ready>
   10efa:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10efd:	e8 15 00 00 00       	call   10f17 <task_dispatch>
    }

    irq_leave_protection(state);
   10f02:	83 ec 0c             	sub    $0xc,%esp
   10f05:	ff 75 f4             	pushl  -0xc(%ebp)
   10f08:	e8 1f 0c 00 00       	call   11b2c <irq_leave_protection>
   10f0d:	83 c4 10             	add    $0x10,%esp

    return 0;
   10f10:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f15:	c9                   	leave  
   10f16:	c3                   	ret    

00010f17 <task_dispatch>:

// 分配下一个要运行的进程
void task_dispatch(void) {
   10f17:	55                   	push   %ebp
   10f18:	89 e5                	mov    %esp,%ebp
   10f1a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10f1d:	e8 f2 0b 00 00       	call   11b14 <irq_enter_protection>
   10f22:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* to = task_next_run();
   10f25:	e8 3f ff ff ff       	call   10e69 <task_next_run>
   10f2a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (to != task_manager.curr_task) {
   10f2d:	a1 00 70 01 00       	mov    0x17000,%eax
   10f32:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10f35:	74 2a                	je     10f61 <task_dispatch+0x4a>
        task_t* from = task_current();
   10f37:	e8 70 ff ff ff       	call   10eac <task_current>
   10f3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10f3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f42:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;
   10f47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f4a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

        task_switch_from_to(from, to);
   10f50:	83 ec 08             	sub    $0x8,%esp
   10f53:	ff 75 f0             	pushl  -0x10(%ebp)
   10f56:	ff 75 ec             	pushl  -0x14(%ebp)
   10f59:	e8 5d fd ff ff       	call   10cbb <task_switch_from_to>
   10f5e:	83 c4 10             	add    $0x10,%esp
    }

    irq_leave_protection(state);    
   10f61:	83 ec 0c             	sub    $0xc,%esp
   10f64:	ff 75 f4             	pushl  -0xc(%ebp)
   10f67:	e8 c0 0b 00 00       	call   11b2c <irq_leave_protection>
   10f6c:	83 c4 10             	add    $0x10,%esp
}
   10f6f:	90                   	nop
   10f70:	c9                   	leave  
   10f71:	c3                   	ret    

00010f72 <task_time_tick>:


// 当定时器中断触发时，进行一些有关进程的操作
// a. 当前进程时间片 -1
// b. 延时队列中各个进程sleeping时间 -1
void task_time_tick(void) {
   10f72:	55                   	push   %ebp
   10f73:	89 e5                	mov    %esp,%ebp
   10f75:	83 ec 18             	sub    $0x18,%esp
    // 当前进程时间片-1，当前进程是否时间片用完？
    task_t* curr_task = task_current();
   10f78:	e8 2f ff ff ff       	call   10eac <task_current>
   10f7d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) {
   10f80:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f83:	8b 40 44             	mov    0x44(%eax),%eax
   10f86:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f89:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f8c:	89 50 44             	mov    %edx,0x44(%eax)
   10f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f92:	8b 40 44             	mov    0x44(%eax),%eax
   10f95:	85 c0                	test   %eax,%eax
   10f97:	75 2d                	jne    10fc6 <task_time_tick+0x54>
        curr_task->slice_ticks = curr_task->time_ticks;
   10f99:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f9c:	8b 50 40             	mov    0x40(%eax),%edx
   10f9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fa2:	89 50 44             	mov    %edx,0x44(%eax)

        task_set_blocked(curr_task);
   10fa5:	83 ec 0c             	sub    $0xc,%esp
   10fa8:	ff 75 f0             	pushl  -0x10(%ebp)
   10fab:	e8 8e fe ff ff       	call   10e3e <task_set_blocked>
   10fb0:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10fb3:	83 ec 0c             	sub    $0xc,%esp
   10fb6:	ff 75 f0             	pushl  -0x10(%ebp)
   10fb9:	e8 4c fe ff ff       	call   10e0a <task_set_ready>
   10fbe:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   10fc1:	e8 51 ff ff ff       	call   10f17 <task_dispatch>
    }

    // 遍历延时队列
    list_node_t* curr = list_first(&task_manager.sleep_list);
   10fc6:	83 ec 0c             	sub    $0xc,%esp
   10fc9:	68 1c 70 01 00       	push   $0x1701c
   10fce:	e8 8c fa ff ff       	call   10a5f <list_first>
   10fd3:	83 c4 10             	add    $0x10,%esp
   10fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   10fd9:	eb 62                	jmp    1103d <task_time_tick+0xcb>
        list_node_t* next = list_node_next(curr);
   10fdb:	83 ec 0c             	sub    $0xc,%esp
   10fde:	ff 75 f4             	pushl  -0xc(%ebp)
   10fe1:	e8 63 fa ff ff       	call   10a49 <list_node_next>
   10fe6:	83 c4 10             	add    $0x10,%esp
   10fe9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t* task = list_node_parent(curr, task_t, run_node);
   10fec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ff0:	74 08                	je     10ffa <task_time_tick+0x88>
   10ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ff5:	83 e8 24             	sub    $0x24,%eax
   10ff8:	eb 05                	jmp    10fff <task_time_tick+0x8d>
   10ffa:	b8 00 00 00 00       	mov    $0x0,%eax
   10fff:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) { // 这个进程睡够了吗？
   11002:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11005:	8b 40 3c             	mov    0x3c(%eax),%eax
   11008:	8d 50 ff             	lea    -0x1(%eax),%edx
   1100b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1100e:	89 50 3c             	mov    %edx,0x3c(%eax)
   11011:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11014:	8b 40 3c             	mov    0x3c(%eax),%eax
   11017:	85 c0                	test   %eax,%eax
   11019:	75 1c                	jne    11037 <task_time_tick+0xc5>
            task_set_wakeup(task);
   1101b:	83 ec 0c             	sub    $0xc,%esp
   1101e:	ff 75 e8             	pushl  -0x18(%ebp)
   11021:	e8 56 00 00 00       	call   1107c <task_set_wakeup>
   11026:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11029:	83 ec 0c             	sub    $0xc,%esp
   1102c:	ff 75 e8             	pushl  -0x18(%ebp)
   1102f:	e8 d6 fd ff ff       	call   10e0a <task_set_ready>
   11034:	83 c4 10             	add    $0x10,%esp
        }
        
        curr = next;
   11037:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1103a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   1103d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11041:	75 98                	jne    10fdb <task_time_tick+0x69>
    }

    task_dispatch();
   11043:	e8 cf fe ff ff       	call   10f17 <task_dispatch>
}
   11048:	90                   	nop
   11049:	c9                   	leave  
   1104a:	c3                   	ret    

0001104b <task_set_sleep>:



void task_set_sleep(task_t* task, uint32_t ticks) {
   1104b:	55                   	push   %ebp
   1104c:	89 e5                	mov    %esp,%ebp
   1104e:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0) {
   11051:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11055:	74 22                	je     11079 <task_set_sleep+0x2e>
        return;
    }

    task->sleep_ticks = ticks;
   11057:	8b 55 0c             	mov    0xc(%ebp),%edx
   1105a:	8b 45 08             	mov    0x8(%ebp),%eax
   1105d:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->state == TASK_SLEEP;
    list_insert_back(&task_manager.sleep_list, &task->run_node);
   11060:	8b 45 08             	mov    0x8(%ebp),%eax
   11063:	83 c0 24             	add    $0x24,%eax
   11066:	83 ec 08             	sub    $0x8,%esp
   11069:	50                   	push   %eax
   1106a:	68 1c 70 01 00       	push   $0x1701c
   1106f:	e8 49 19 00 00       	call   129bd <list_insert_back>
   11074:	83 c4 10             	add    $0x10,%esp
   11077:	eb 01                	jmp    1107a <task_set_sleep+0x2f>
        return;
   11079:	90                   	nop
}
   1107a:	c9                   	leave  
   1107b:	c3                   	ret    

0001107c <task_set_wakeup>:


void task_set_wakeup(task_t* task) {
   1107c:	55                   	push   %ebp
   1107d:	89 e5                	mov    %esp,%ebp
   1107f:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11082:	8b 45 08             	mov    0x8(%ebp),%eax
   11085:	83 c0 24             	add    $0x24,%eax
   11088:	83 ec 08             	sub    $0x8,%esp
   1108b:	50                   	push   %eax
   1108c:	68 1c 70 01 00       	push   $0x1701c
   11091:	e8 03 1a 00 00       	call   12a99 <list_remove>
   11096:	83 c4 10             	add    $0x10,%esp
}
   11099:	90                   	nop
   1109a:	c9                   	leave  
   1109b:	c3                   	ret    

0001109c <sys_sleep>:


void sys_sleep(uint32_t ms) {
   1109c:	55                   	push   %ebp
   1109d:	89 e5                	mov    %esp,%ebp
   1109f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   110a2:	e8 6d 0a 00 00       	call   11b14 <irq_enter_protection>
   110a7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_blocked(task_manager.curr_task);  
   110aa:	a1 00 70 01 00       	mov    0x17000,%eax
   110af:	83 ec 0c             	sub    $0xc,%esp
   110b2:	50                   	push   %eax
   110b3:	e8 86 fd ff ff       	call   10e3e <task_set_blocked>
   110b8:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 向上取整
   110bb:	8b 45 08             	mov    0x8(%ebp),%eax
   110be:	83 c0 09             	add    $0x9,%eax
   110c1:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   110c6:	f7 e2                	mul    %edx
   110c8:	c1 ea 03             	shr    $0x3,%edx
   110cb:	a1 00 70 01 00       	mov    0x17000,%eax
   110d0:	83 ec 08             	sub    $0x8,%esp
   110d3:	52                   	push   %edx
   110d4:	50                   	push   %eax
   110d5:	e8 71 ff ff ff       	call   1104b <task_set_sleep>
   110da:	83 c4 10             	add    $0x10,%esp

    // 现在这个进程已睡，进程开始切换！
    task_dispatch();
   110dd:	e8 35 fe ff ff       	call   10f17 <task_dispatch>

    irq_leave_protection(state);
   110e2:	83 ec 0c             	sub    $0xc,%esp
   110e5:	ff 75 f4             	pushl  -0xc(%ebp)
   110e8:	e8 3f 0a 00 00       	call   11b2c <irq_leave_protection>
   110ed:	83 c4 10             	add    $0x10,%esp
   110f0:	90                   	nop
   110f1:	c9                   	leave  
   110f2:	c3                   	ret    

000110f3 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   110f3:	55                   	push   %ebp
   110f4:	89 e5                	mov    %esp,%ebp
   110f6:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   110f9:	8b 45 08             	mov    0x8(%ebp),%eax
   110fc:	c1 e8 10             	shr    $0x10,%eax
   110ff:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0  = start & 0xffff;
   11103:	8b 45 08             	mov    0x8(%ebp),%eax
   11106:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1; 
   1110a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110d:	83 e8 01             	sub    $0x1,%eax
   11110:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   11114:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11118:	90                   	nop
   11119:	c9                   	leave  
   1111a:	c3                   	ret    

0001111b <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1111b:	55                   	push   %ebp
   1111c:	89 e5                	mov    %esp,%ebp
   1111e:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset, selector };
   11121:	8b 45 0c             	mov    0xc(%ebp),%eax
   11124:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11127:	8b 45 08             	mov    0x8(%ebp),%eax
   1112a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1112d:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11130:	ff 28                	ljmp   *(%eax)
}
   11132:	90                   	nop
   11133:	c9                   	leave  
   11134:	c3                   	ret    

00011135 <segment_desc_set>:
// base:     基地址
// limit:    这段内存的大小
// attr:     属性值
// 根据所给的 selector (也就是下标所指向的地址)，
// 激活这个GDT字段。
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   11135:	55                   	push   %ebp
   11136:	89 e5                	mov    %esp,%ebp
   11138:	83 ec 14             	sub    $0x14,%esp
   1113b:	8b 45 14             	mov    0x14(%ebp),%eax
   1113e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t* desc = gdt_table + selector / sizeof(segment_desc_t);
   11142:	8b 45 08             	mov    0x8(%ebp),%eax
   11145:	83 e0 f8             	and    $0xfffffff8,%eax
   11148:	05 a0 81 01 00       	add    $0x181a0,%eax
   1114d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 判断传入的 limit 是否大于 16 位
    // 若大于，则需要将单位转换为 KiB
    // limit 单位是 KiB 还是 B
    if (limit > 0xfffff) {
   11150:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11157:	76 0f                	jbe    11168 <segment_desc_set+0x33>
        attr |= SEG_G;     // 开启G位
   11159:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1115f:	8b 45 10             	mov    0x10(%ebp),%eax
   11162:	c1 e8 0c             	shr    $0xc,%eax
   11165:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    
    desc->limit15_0 = limit & 0xffff;
   11168:	8b 45 10             	mov    0x10(%ebp),%eax
   1116b:	89 c2                	mov    %eax,%edx
   1116d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11170:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0  = base & 0xffff;
   11173:	8b 45 0c             	mov    0xc(%ebp),%eax
   11176:	89 c2                	mov    %eax,%edx
   11178:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1117b:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1117f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11182:	c1 e8 10             	shr    $0x10,%eax
   11185:	89 c2                	mov    %eax,%edx
   11187:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1118a:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr      = attr | (((limit >> 16) & 0xf) << 8);
   1118d:	8b 45 10             	mov    0x10(%ebp),%eax
   11190:	c1 e8 10             	shr    $0x10,%eax
   11193:	c1 e0 08             	shl    $0x8,%eax
   11196:	66 25 00 0f          	and    $0xf00,%ax
   1119a:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1119e:	89 c2                	mov    %eax,%edx
   111a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111a3:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   111a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   111aa:	c1 e8 18             	shr    $0x18,%eax
   111ad:	89 c2                	mov    %eax,%edx
   111af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111b2:	88 50 07             	mov    %dl,0x7(%eax)
}
   111b5:	90                   	nop
   111b6:	c9                   	leave  
   111b7:	c3                   	ret    

000111b8 <gate_desc_set>:


void gate_desc_set(gate_desc_t* desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   111b8:	55                   	push   %ebp
   111b9:	89 e5                	mov    %esp,%ebp
   111bb:	83 ec 08             	sub    $0x8,%esp
   111be:	8b 55 0c             	mov    0xc(%ebp),%edx
   111c1:	8b 45 14             	mov    0x14(%ebp),%eax
   111c4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   111c8:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   111cc:	8b 45 10             	mov    0x10(%ebp),%eax
   111cf:	89 c2                	mov    %eax,%edx
   111d1:	8b 45 08             	mov    0x8(%ebp),%eax
   111d4:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   111d7:	8b 45 08             	mov    0x8(%ebp),%eax
   111da:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   111de:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   111e2:	8b 45 08             	mov    0x8(%ebp),%eax
   111e5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   111e9:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   111ed:	8b 45 10             	mov    0x10(%ebp),%eax
   111f0:	c1 e8 10             	shr    $0x10,%eax
   111f3:	89 c2                	mov    %eax,%edx
   111f5:	8b 45 08             	mov    0x8(%ebp),%eax
   111f8:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   111fc:	90                   	nop
   111fd:	c9                   	leave  
   111fe:	c3                   	ret    

000111ff <init_gdt>:


void init_gdt(void) {
   111ff:	55                   	push   %ebp
   11200:	89 e5                	mov    %esp,%ebp
   11202:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11205:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1120c:	eb 19                	jmp    11227 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1120e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11211:	c1 e0 03             	shl    $0x3,%eax
   11214:	6a 00                	push   $0x0
   11216:	6a 00                	push   $0x0
   11218:	6a 00                	push   $0x0
   1121a:	50                   	push   %eax
   1121b:	e8 15 ff ff ff       	call   11135 <segment_desc_set>
   11220:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   11223:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11227:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1122e:	7e de                	jle    1120e <init_gdt+0xf>
    }
    
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   11230:	68 92 40 00 00       	push   $0x4092
   11235:	6a ff                	push   $0xffffffff
   11237:	6a 00                	push   $0x0
   11239:	6a 10                	push   $0x10
   1123b:	e8 f5 fe ff ff       	call   11135 <segment_desc_set>
   11240:	83 c4 10             	add    $0x10,%esp

    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xffffffff, SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   11243:	68 9a 40 00 00       	push   $0x409a
   11248:	6a ff                	push   $0xffffffff
   1124a:	6a 00                	push   $0x0
   1124c:	6a 08                	push   $0x8
   1124e:	e8 e2 fe ff ff       	call   11135 <segment_desc_set>
   11253:	83 c4 10             	add    $0x10,%esp

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11256:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   1125b:	68 00 08 00 00       	push   $0x800
   11260:	50                   	push   %eax
   11261:	e8 8d fe ff ff       	call   110f3 <lgdt>
   11266:	83 c4 08             	add    $0x8,%esp
}
   11269:	90                   	nop
   1126a:	c9                   	leave  
   1126b:	c3                   	ret    

0001126c <cpu_init>:


void cpu_init(void) {
   1126c:	55                   	push   %ebp
   1126d:	89 e5                	mov    %esp,%ebp
   1126f:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "cpu: gdt");
   11272:	83 ec 08             	sub    $0x8,%esp
   11275:	68 e8 2e 01 00       	push   $0x12ee8
   1127a:	68 a0 89 01 00       	push   $0x189a0
   1127f:	e8 2f 0c 00 00       	call   11eb3 <mutex_init>
   11284:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11287:	e8 73 ff ff ff       	call   111ff <init_gdt>
}
   1128c:	90                   	nop
   1128d:	c9                   	leave  
   1128e:	c3                   	ret    

0001128f <swtch_to_tss>:


void swtch_to_tss(int tss_sel) {
   1128f:	55                   	push   %ebp
   11290:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);   // 起始地址，没有偏移
   11292:	8b 45 08             	mov    0x8(%ebp),%eax
   11295:	6a 00                	push   $0x0
   11297:	50                   	push   %eax
   11298:	e8 7e fe ff ff       	call   1111b <far_jump>
   1129d:	83 c4 08             	add    $0x8,%esp
}
   112a0:	90                   	nop
   112a1:	c9                   	leave  
   112a2:	c3                   	ret    

000112a3 <gdt_alloc_desc>:

// 返回gdt表中一个空闲的下标所指的地址
int gdt_alloc_desc(void) {
   112a3:	55                   	push   %ebp
   112a4:	89 e5                	mov    %esp,%ebp
   112a6:	83 ec 18             	sub    $0x18,%esp
    mutex_acquire(&mutex);
   112a9:	83 ec 0c             	sub    $0xc,%esp
   112ac:	68 a0 89 01 00       	push   $0x189a0
   112b1:	e8 3e 0c 00 00       	call   11ef4 <mutex_acquire>
   112b6:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   112b9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   112c0:	eb 36                	jmp    112f8 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = gdt_table + i;
   112c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112c5:	c1 e0 03             	shl    $0x3,%eax
   112c8:	05 a0 81 01 00       	add    $0x181a0,%eax
   112cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   112d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112d3:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   112d7:	66 85 c0             	test   %ax,%ax
   112da:	75 18                	jne    112f4 <gdt_alloc_desc+0x51>

            mutex_release(&mutex);
   112dc:	83 ec 0c             	sub    $0xc,%esp
   112df:	68 a0 89 01 00       	push   $0x189a0
   112e4:	e8 99 0c 00 00       	call   11f82 <mutex_release>
   112e9:	83 c4 10             	add    $0x10,%esp
            
            return i * sizeof(segment_desc_t);
   112ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112ef:	c1 e0 03             	shl    $0x3,%eax
   112f2:	eb 22                	jmp    11316 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   112f4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   112f8:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   112ff:	7e c1                	jle    112c2 <gdt_alloc_desc+0x1f>
        }
    }

    mutex_release(&mutex);
   11301:	83 ec 0c             	sub    $0xc,%esp
   11304:	68 a0 89 01 00       	push   $0x189a0
   11309:	e8 74 0c 00 00       	call   11f82 <mutex_release>
   1130e:	83 c4 10             	add    $0x10,%esp

    return -1;
   11311:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11316:	c9                   	leave  
   11317:	c3                   	ret    

00011318 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   11318:	55                   	push   %ebp
   11319:	89 e5                	mov    %esp,%ebp
   1131b:	83 ec 08             	sub    $0x8,%esp
    mutex_acquire(&mutex);
   1131e:	83 ec 0c             	sub    $0xc,%esp
   11321:	68 a0 89 01 00       	push   $0x189a0
   11326:	e8 c9 0b 00 00       	call   11ef4 <mutex_acquire>
   1132b:	83 c4 10             	add    $0x10,%esp

    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	c1 e8 03             	shr    $0x3,%eax
   11334:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   1133b:	00 00 00 

    mutex_release(&mutex);
   1133e:	83 ec 0c             	sub    $0xc,%esp
   11341:	68 a0 89 01 00       	push   $0x189a0
   11346:	e8 37 0c 00 00       	call   11f82 <mutex_release>
   1134b:	83 c4 10             	add    $0x10,%esp
   1134e:	90                   	nop
   1134f:	c9                   	leave  
   11350:	c3                   	ret    

00011351 <inb>:
static inline uint8_t inb(uint16_t port) {
   11351:	55                   	push   %ebp
   11352:	89 e5                	mov    %esp,%ebp
   11354:	83 ec 14             	sub    $0x14,%esp
   11357:	8b 45 08             	mov    0x8(%ebp),%eax
   1135a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   1135e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11362:	89 c2                	mov    %eax,%edx
   11364:	ec                   	in     (%dx),%al
   11365:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11368:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1136c:	c9                   	leave  
   1136d:	c3                   	ret    

0001136e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1136e:	55                   	push   %ebp
   1136f:	89 e5                	mov    %esp,%ebp
   11371:	83 ec 08             	sub    $0x8,%esp
   11374:	8b 55 08             	mov    0x8(%ebp),%edx
   11377:	8b 45 0c             	mov    0xc(%ebp),%eax
   1137a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1137e:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11381:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11385:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11389:	ee                   	out    %al,(%dx)
}
   1138a:	90                   	nop
   1138b:	c9                   	leave  
   1138c:	c3                   	ret    

0001138d <cli>:
static inline void cli(void) {
   1138d:	55                   	push   %ebp
   1138e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("cli");
   11390:	fa                   	cli    
}
   11391:	90                   	nop
   11392:	5d                   	pop    %ebp
   11393:	c3                   	ret    

00011394 <sti>:
static inline void sti(void) {
   11394:	55                   	push   %ebp
   11395:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile("sti");
   11397:	fb                   	sti    
}
   11398:	90                   	nop
   11399:	5d                   	pop    %ebp
   1139a:	c3                   	ret    

0001139b <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1139b:	55                   	push   %ebp
   1139c:	89 e5                	mov    %esp,%ebp
   1139e:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   113a1:	8b 45 08             	mov    0x8(%ebp),%eax
   113a4:	c1 e8 10             	shr    $0x10,%eax
   113a7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0  = start & 0xffff;
   113ab:	8b 45 08             	mov    0x8(%ebp),%eax
   113ae:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1; 
   113b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   113b5:	83 e8 01             	sub    $0x1,%eax
   113b8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   113bc:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   113c0:	90                   	nop
   113c1:	c9                   	leave  
   113c2:	c3                   	ret    

000113c3 <hlt>:
static inline void hlt(void) {
   113c3:	55                   	push   %ebp
   113c4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   113c6:	f4                   	hlt    
}
   113c7:	90                   	nop
   113c8:	5d                   	pop    %ebp
   113c9:	c3                   	ret    

000113ca <read_eflags>:

// read_eflags
static inline uint32_t read_eflags(void) {
   113ca:	55                   	push   %ebp
   113cb:	89 e5                	mov    %esp,%ebp
   113cd:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;
    __asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   113d0:	9c                   	pushf  
   113d1:	58                   	pop    %eax
   113d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   113d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   113d8:	c9                   	leave  
   113d9:	c3                   	ret    

000113da <write_eflags>:


// write_eflags
static inline void write_eflags(uint32_t eflags) {
   113da:	55                   	push   %ebp
   113db:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   113dd:	8b 45 08             	mov    0x8(%ebp),%eax
   113e0:	50                   	push   %eax
   113e1:	9d                   	popf   
}
   113e2:	90                   	nop
   113e3:	5d                   	pop    %ebp
   113e4:	c3                   	ret    

000113e5 <dump_core_regs>:
#define IDT_TABLE_NO           128

static gate_desc_t idt_table[IDT_TABLE_NO];


static void dump_core_regs(exception_frame_t* frame) {
   113e5:	55                   	push   %ebp
   113e6:	89 e5                	mov    %esp,%ebp
   113e8:	57                   	push   %edi
   113e9:	56                   	push   %esi
   113ea:	53                   	push   %ebx
   113eb:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, Error Code: %d", frame->num, frame->error_code);
   113ee:	8b 45 08             	mov    0x8(%ebp),%eax
   113f1:	8b 50 34             	mov    0x34(%eax),%edx
   113f4:	8b 45 08             	mov    0x8(%ebp),%eax
   113f7:	8b 40 30             	mov    0x30(%eax),%eax
   113fa:	83 ec 04             	sub    $0x4,%esp
   113fd:	52                   	push   %edx
   113fe:	50                   	push   %eax
   113ff:	68 f4 2e 01 00       	push   $0x12ef4
   11404:	e8 f3 17 00 00       	call   12bfc <log_printf>
   11409:	83 c4 10             	add    $0x10,%esp
    log_printf("cs: %d\nds: %d\nes: %d\nss: %d\nfs: %d\ngs: %d\n", frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
   1140c:	8b 45 08             	mov    0x8(%ebp),%eax
   1140f:	8b 38                	mov    (%eax),%edi
   11411:	8b 45 08             	mov    0x8(%ebp),%eax
   11414:	8b 70 04             	mov    0x4(%eax),%esi
   11417:	8b 45 08             	mov    0x8(%ebp),%eax
   1141a:	8b 58 0c             	mov    0xc(%eax),%ebx
   1141d:	8b 45 08             	mov    0x8(%ebp),%eax
   11420:	8b 48 08             	mov    0x8(%eax),%ecx
   11423:	8b 45 08             	mov    0x8(%ebp),%eax
   11426:	8b 50 0c             	mov    0xc(%eax),%edx
   11429:	8b 45 08             	mov    0x8(%ebp),%eax
   1142c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1142f:	83 ec 04             	sub    $0x4,%esp
   11432:	57                   	push   %edi
   11433:	56                   	push   %esi
   11434:	53                   	push   %ebx
   11435:	51                   	push   %ecx
   11436:	52                   	push   %edx
   11437:	50                   	push   %eax
   11438:	68 0c 2f 01 00       	push   $0x12f0c
   1143d:	e8 ba 17 00 00       	call   12bfc <log_printf>
   11442:	83 c4 20             	add    $0x20,%esp
    log_printf("eax: %x\nebx: %x\nedx: %x\nedi: %x\nesi: %x\nebp: %x\nesp: %x\n", frame->eax, frame->ebx, frame->edx, frame->edi, frame->esi, frame->ebp, frame->esp);
   11445:	8b 45 08             	mov    0x8(%ebp),%eax
   11448:	8b 40 1c             	mov    0x1c(%eax),%eax
   1144b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1144e:	8b 45 08             	mov    0x8(%ebp),%eax
   11451:	8b 78 18             	mov    0x18(%eax),%edi
   11454:	8b 45 08             	mov    0x8(%ebp),%eax
   11457:	8b 70 14             	mov    0x14(%eax),%esi
   1145a:	8b 45 08             	mov    0x8(%ebp),%eax
   1145d:	8b 58 10             	mov    0x10(%eax),%ebx
   11460:	8b 45 08             	mov    0x8(%ebp),%eax
   11463:	8b 48 24             	mov    0x24(%eax),%ecx
   11466:	8b 45 08             	mov    0x8(%ebp),%eax
   11469:	8b 50 20             	mov    0x20(%eax),%edx
   1146c:	8b 45 08             	mov    0x8(%ebp),%eax
   1146f:	8b 40 2c             	mov    0x2c(%eax),%eax
   11472:	ff 75 e4             	pushl  -0x1c(%ebp)
   11475:	57                   	push   %edi
   11476:	56                   	push   %esi
   11477:	53                   	push   %ebx
   11478:	51                   	push   %ecx
   11479:	52                   	push   %edx
   1147a:	50                   	push   %eax
   1147b:	68 38 2f 01 00       	push   $0x12f38
   11480:	e8 77 17 00 00       	call   12bfc <log_printf>
   11485:	83 c4 20             	add    $0x20,%esp
    log_printf("eip: %x\neflags: %x\n", frame->eip, frame->eflags);
   11488:	8b 45 08             	mov    0x8(%ebp),%eax
   1148b:	8b 50 40             	mov    0x40(%eax),%edx
   1148e:	8b 45 08             	mov    0x8(%ebp),%eax
   11491:	8b 40 38             	mov    0x38(%eax),%eax
   11494:	83 ec 04             	sub    $0x4,%esp
   11497:	52                   	push   %edx
   11498:	50                   	push   %eax
   11499:	68 71 2f 01 00       	push   $0x12f71
   1149e:	e8 59 17 00 00       	call   12bfc <log_printf>
   114a3:	83 c4 10             	add    $0x10,%esp
}
   114a6:	90                   	nop
   114a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
   114aa:	5b                   	pop    %ebx
   114ab:	5e                   	pop    %esi
   114ac:	5f                   	pop    %edi
   114ad:	5d                   	pop    %ebp
   114ae:	c3                   	ret    

000114af <do_default_handler>:


static void do_default_handler(exception_frame_t* frame, const char* message) {
   114af:	55                   	push   %ebp
   114b0:	89 e5                	mov    %esp,%ebp
   114b2:	83 ec 08             	sub    $0x8,%esp
    log_printf("------------------------------------------");
   114b5:	83 ec 0c             	sub    $0xc,%esp
   114b8:	68 88 2f 01 00       	push   $0x12f88
   114bd:	e8 3a 17 00 00       	call   12bfc <log_printf>
   114c2:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception: %s", message);
   114c5:	83 ec 08             	sub    $0x8,%esp
   114c8:	ff 75 0c             	pushl  0xc(%ebp)
   114cb:	68 b3 2f 01 00       	push   $0x12fb3
   114d0:	e8 27 17 00 00       	call   12bfc <log_printf>
   114d5:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   114d8:	83 ec 0c             	sub    $0xc,%esp
   114db:	ff 75 08             	pushl  0x8(%ebp)
   114de:	e8 02 ff ff ff       	call   113e5 <dump_core_regs>
   114e3:	83 c4 10             	add    $0x10,%esp

    while (1) {
        hlt();
   114e6:	e8 d8 fe ff ff       	call   113c3 <hlt>
   114eb:	eb f9                	jmp    114e6 <do_default_handler+0x37>

000114ed <do_handler_unknown>:
    }
}

// 默认缺省中断
void do_handler_unknown(exception_frame_t* frame) {
   114ed:	55                   	push   %ebp
   114ee:	89 e5                	mov    %esp,%ebp
   114f0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   114f3:	83 ec 08             	sub    $0x8,%esp
   114f6:	68 c5 2f 01 00       	push   $0x12fc5
   114fb:	ff 75 08             	pushl  0x8(%ebp)
   114fe:	e8 ac ff ff ff       	call   114af <do_default_handler>
   11503:	83 c4 10             	add    $0x10,%esp
}
   11506:	90                   	nop
   11507:	c9                   	leave  
   11508:	c3                   	ret    

00011509 <do_handler_divide_error>:


// Exception: divide by zero
void do_handler_divide_error(exception_frame_t* frame) {
   11509:	55                   	push   %ebp
   1150a:	89 e5                	mov    %esp,%ebp
   1150c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Divide by zero");
   1150f:	83 ec 08             	sub    $0x8,%esp
   11512:	68 d7 2f 01 00       	push   $0x12fd7
   11517:	ff 75 08             	pushl  0x8(%ebp)
   1151a:	e8 90 ff ff ff       	call   114af <do_default_handler>
   1151f:	83 c4 10             	add    $0x10,%esp
}
   11522:	90                   	nop
   11523:	c9                   	leave  
   11524:	c3                   	ret    

00011525 <do_handler_debug_exception>:


// Exception: 
void do_handler_debug_exception(exception_frame_t* frame) {
   11525:	55                   	push   %ebp
   11526:	89 e5                	mov    %esp,%ebp
   11528:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Debug exception");
   1152b:	83 ec 08             	sub    $0x8,%esp
   1152e:	68 f1 2f 01 00       	push   $0x12ff1
   11533:	ff 75 08             	pushl  0x8(%ebp)
   11536:	e8 74 ff ff ff       	call   114af <do_default_handler>
   1153b:	83 c4 10             	add    $0x10,%esp
}   
   1153e:	90                   	nop
   1153f:	c9                   	leave  
   11540:	c3                   	ret    

00011541 <do_handler_nmi_interrupt>:


// Exception: 
void do_handler_nmi_interrupt(exception_frame_t* frame) {
   11541:	55                   	push   %ebp
   11542:	89 e5                	mov    %esp,%ebp
   11544:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: NMI interrupt");
   11547:	83 ec 08             	sub    $0x8,%esp
   1154a:	68 0c 30 01 00       	push   $0x1300c
   1154f:	ff 75 08             	pushl  0x8(%ebp)
   11552:	e8 58 ff ff ff       	call   114af <do_default_handler>
   11557:	83 c4 10             	add    $0x10,%esp
}   
   1155a:	90                   	nop
   1155b:	c9                   	leave  
   1155c:	c3                   	ret    

0001155d <do_handler_breakpoint>:


// Exception: 
void do_handler_breakpoint(exception_frame_t* frame) {
   1155d:	55                   	push   %ebp
   1155e:	89 e5                	mov    %esp,%ebp
   11560:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Breakpoint");
   11563:	83 ec 08             	sub    $0x8,%esp
   11566:	68 25 30 01 00       	push   $0x13025
   1156b:	ff 75 08             	pushl  0x8(%ebp)
   1156e:	e8 3c ff ff ff       	call   114af <do_default_handler>
   11573:	83 c4 10             	add    $0x10,%esp
}   
   11576:	90                   	nop
   11577:	c9                   	leave  
   11578:	c3                   	ret    

00011579 <do_handler_overflow>:


// Exception: 
void do_handler_overflow(exception_frame_t* frame) {
   11579:	55                   	push   %ebp
   1157a:	89 e5                	mov    %esp,%ebp
   1157c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Overflow");
   1157f:	83 ec 08             	sub    $0x8,%esp
   11582:	68 3b 30 01 00       	push   $0x1303b
   11587:	ff 75 08             	pushl  0x8(%ebp)
   1158a:	e8 20 ff ff ff       	call   114af <do_default_handler>
   1158f:	83 c4 10             	add    $0x10,%esp
}   
   11592:	90                   	nop
   11593:	c9                   	leave  
   11594:	c3                   	ret    

00011595 <do_handler_bound_range_exceed>:


// Exception: 
void do_handler_bound_range_exceed(exception_frame_t* frame) {
   11595:	55                   	push   %ebp
   11596:	89 e5                	mov    %esp,%ebp
   11598:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Bound range exceed");
   1159b:	83 ec 08             	sub    $0x8,%esp
   1159e:	68 4f 30 01 00       	push   $0x1304f
   115a3:	ff 75 08             	pushl  0x8(%ebp)
   115a6:	e8 04 ff ff ff       	call   114af <do_default_handler>
   115ab:	83 c4 10             	add    $0x10,%esp
}   
   115ae:	90                   	nop
   115af:	c9                   	leave  
   115b0:	c3                   	ret    

000115b1 <do_handler_invalid_opcode>:


// Exception: 
void do_handler_invalid_opcode(exception_frame_t* frame) {
   115b1:	55                   	push   %ebp
   115b2:	89 e5                	mov    %esp,%ebp
   115b4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid opcode");
   115b7:	83 ec 08             	sub    $0x8,%esp
   115ba:	68 6d 30 01 00       	push   $0x1306d
   115bf:	ff 75 08             	pushl  0x8(%ebp)
   115c2:	e8 e8 fe ff ff       	call   114af <do_default_handler>
   115c7:	83 c4 10             	add    $0x10,%esp
}   
   115ca:	90                   	nop
   115cb:	c9                   	leave  
   115cc:	c3                   	ret    

000115cd <do_handler_device_not_found>:


// Exception: 
void do_handler_device_not_found(exception_frame_t* frame) {
   115cd:	55                   	push   %ebp
   115ce:	89 e5                	mov    %esp,%ebp
   115d0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Device not found");
   115d3:	83 ec 08             	sub    $0x8,%esp
   115d6:	68 87 30 01 00       	push   $0x13087
   115db:	ff 75 08             	pushl  0x8(%ebp)
   115de:	e8 cc fe ff ff       	call   114af <do_default_handler>
   115e3:	83 c4 10             	add    $0x10,%esp
}   
   115e6:	90                   	nop
   115e7:	c9                   	leave  
   115e8:	c3                   	ret    

000115e9 <do_handler_double_fault>:


// Exception: 
void do_handler_double_fault(exception_frame_t* frame) {
   115e9:	55                   	push   %ebp
   115ea:	89 e5                	mov    %esp,%ebp
   115ec:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Double fault");
   115ef:	83 ec 08             	sub    $0x8,%esp
   115f2:	68 a3 30 01 00       	push   $0x130a3
   115f7:	ff 75 08             	pushl  0x8(%ebp)
   115fa:	e8 b0 fe ff ff       	call   114af <do_default_handler>
   115ff:	83 c4 10             	add    $0x10,%esp
}   
   11602:	90                   	nop
   11603:	c9                   	leave  
   11604:	c3                   	ret    

00011605 <do_handler_invalid_tss>:


// Exception: 
void do_handler_invalid_tss(exception_frame_t* frame) {
   11605:	55                   	push   %ebp
   11606:	89 e5                	mov    %esp,%ebp
   11608:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Invalid tss");
   1160b:	83 ec 08             	sub    $0x8,%esp
   1160e:	68 bb 30 01 00       	push   $0x130bb
   11613:	ff 75 08             	pushl  0x8(%ebp)
   11616:	e8 94 fe ff ff       	call   114af <do_default_handler>
   1161b:	83 c4 10             	add    $0x10,%esp
}   
   1161e:	90                   	nop
   1161f:	c9                   	leave  
   11620:	c3                   	ret    

00011621 <do_handler_segment_not_present>:


// Exception: 
void do_handler_segment_not_present(exception_frame_t* frame) {
   11621:	55                   	push   %ebp
   11622:	89 e5                	mov    %esp,%ebp
   11624:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Segment not present");
   11627:	83 ec 08             	sub    $0x8,%esp
   1162a:	68 d4 30 01 00       	push   $0x130d4
   1162f:	ff 75 08             	pushl  0x8(%ebp)
   11632:	e8 78 fe ff ff       	call   114af <do_default_handler>
   11637:	83 c4 10             	add    $0x10,%esp
}   
   1163a:	90                   	nop
   1163b:	c9                   	leave  
   1163c:	c3                   	ret    

0001163d <do_handler_stack_segment_fault>:


// Exception: 
void do_handler_stack_segment_fault(exception_frame_t* frame) {
   1163d:	55                   	push   %ebp
   1163e:	89 e5                	mov    %esp,%ebp
   11640:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Stack segment fault");
   11643:	83 ec 08             	sub    $0x8,%esp
   11646:	68 f4 30 01 00       	push   $0x130f4
   1164b:	ff 75 08             	pushl  0x8(%ebp)
   1164e:	e8 5c fe ff ff       	call   114af <do_default_handler>
   11653:	83 c4 10             	add    $0x10,%esp
}   
   11656:	90                   	nop
   11657:	c9                   	leave  
   11658:	c3                   	ret    

00011659 <do_handler_general_protection>:


// Exception: 
void do_handler_general_protection(exception_frame_t* frame) {
   11659:	55                   	push   %ebp
   1165a:	89 e5                	mov    %esp,%ebp
   1165c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: General protection");
   1165f:	83 ec 08             	sub    $0x8,%esp
   11662:	68 13 31 01 00       	push   $0x13113
   11667:	ff 75 08             	pushl  0x8(%ebp)
   1166a:	e8 40 fe ff ff       	call   114af <do_default_handler>
   1166f:	83 c4 10             	add    $0x10,%esp
}   
   11672:	90                   	nop
   11673:	c9                   	leave  
   11674:	c3                   	ret    

00011675 <do_handler_page_fault>:


// Exception: 
void do_handler_page_fault(exception_frame_t* frame) {
   11675:	55                   	push   %ebp
   11676:	89 e5                	mov    %esp,%ebp
   11678:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Page fault");
   1167b:	83 ec 08             	sub    $0x8,%esp
   1167e:	68 31 31 01 00       	push   $0x13131
   11683:	ff 75 08             	pushl  0x8(%ebp)
   11686:	e8 24 fe ff ff       	call   114af <do_default_handler>
   1168b:	83 c4 10             	add    $0x10,%esp
}   
   1168e:	90                   	nop
   1168f:	c9                   	leave  
   11690:	c3                   	ret    

00011691 <do_handler_floating_point_error>:


// Exception: 
void do_handler_floating_point_error(exception_frame_t* frame) {
   11691:	55                   	push   %ebp
   11692:	89 e5                	mov    %esp,%ebp
   11694:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Floating point error");
   11697:	83 ec 08             	sub    $0x8,%esp
   1169a:	68 48 31 01 00       	push   $0x13148
   1169f:	ff 75 08             	pushl  0x8(%ebp)
   116a2:	e8 08 fe ff ff       	call   114af <do_default_handler>
   116a7:	83 c4 10             	add    $0x10,%esp
}   
   116aa:	90                   	nop
   116ab:	c9                   	leave  
   116ac:	c3                   	ret    

000116ad <do_handler_aligment_check>:


// Exception: 
void do_handler_aligment_check(exception_frame_t* frame) {
   116ad:	55                   	push   %ebp
   116ae:	89 e5                	mov    %esp,%ebp
   116b0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Aligment check");
   116b3:	83 ec 08             	sub    $0x8,%esp
   116b6:	68 68 31 01 00       	push   $0x13168
   116bb:	ff 75 08             	pushl  0x8(%ebp)
   116be:	e8 ec fd ff ff       	call   114af <do_default_handler>
   116c3:	83 c4 10             	add    $0x10,%esp
}   
   116c6:	90                   	nop
   116c7:	c9                   	leave  
   116c8:	c3                   	ret    

000116c9 <do_handler_machine_check>:


// Exception: 
void do_handler_machine_check(exception_frame_t* frame) {
   116c9:	55                   	push   %ebp
   116ca:	89 e5                	mov    %esp,%ebp
   116cc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Machine check");
   116cf:	83 ec 08             	sub    $0x8,%esp
   116d2:	68 82 31 01 00       	push   $0x13182
   116d7:	ff 75 08             	pushl  0x8(%ebp)
   116da:	e8 d0 fd ff ff       	call   114af <do_default_handler>
   116df:	83 c4 10             	add    $0x10,%esp
}   
   116e2:	90                   	nop
   116e3:	c9                   	leave  
   116e4:	c3                   	ret    

000116e5 <do_handler_simd_floating_point_exception>:


// Exception: 
void do_handler_simd_floating_point_exception(exception_frame_t* frame) {
   116e5:	55                   	push   %ebp
   116e6:	89 e5                	mov    %esp,%ebp
   116e8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: SIMD floating point exception");
   116eb:	83 ec 08             	sub    $0x8,%esp
   116ee:	68 9c 31 01 00       	push   $0x1319c
   116f3:	ff 75 08             	pushl  0x8(%ebp)
   116f6:	e8 b4 fd ff ff       	call   114af <do_default_handler>
   116fb:	83 c4 10             	add    $0x10,%esp
}
   116fe:	90                   	nop
   116ff:	c9                   	leave  
   11700:	c3                   	ret    

00011701 <do_handler_virtualization_exception>:


// Exception: 
void do_handler_virtualization_exception(exception_frame_t* frame) {
   11701:	55                   	push   %ebp
   11702:	89 e5                	mov    %esp,%ebp
   11704:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Virtualization exception");
   11707:	83 ec 08             	sub    $0x8,%esp
   1170a:	68 c8 31 01 00       	push   $0x131c8
   1170f:	ff 75 08             	pushl  0x8(%ebp)
   11712:	e8 98 fd ff ff       	call   114af <do_default_handler>
   11717:	83 c4 10             	add    $0x10,%esp
}
   1171a:	90                   	nop
   1171b:	c9                   	leave  
   1171c:	c3                   	ret    

0001171d <do_handler_control_protection_exception>:


// Exception: 
void do_handler_control_protection_exception(exception_frame_t* frame) {
   1171d:	55                   	push   %ebp
   1171e:	89 e5                	mov    %esp,%ebp
   11720:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Exception: Control protection exception");
   11723:	83 ec 08             	sub    $0x8,%esp
   11726:	68 ec 31 01 00       	push   $0x131ec
   1172b:	ff 75 08             	pushl  0x8(%ebp)
   1172e:	e8 7c fd ff ff       	call   114af <do_default_handler>
   11733:	83 c4 10             	add    $0x10,%esp
}
   11736:	90                   	nop
   11737:	c9                   	leave  
   11738:	c3                   	ret    

00011739 <init_pic>:


// 初始化 8259 中断芯片
static void init_pic(void) {
   11739:	55                   	push   %ebp
   1173a:	89 e5                	mov    %esp,%ebp
    // 对第一个 8259 芯片初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1173c:	6a 11                	push   $0x11
   1173e:	6a 20                	push   $0x20
   11740:	e8 29 fc ff ff       	call   1136e <outb>
   11745:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11748:	6a 20                	push   $0x20
   1174a:	6a 21                	push   $0x21
   1174c:	e8 1d fc ff ff       	call   1136e <outb>
   11751:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   11754:	6a 04                	push   $0x4
   11756:	6a 21                	push   $0x21
   11758:	e8 11 fc ff ff       	call   1136e <outb>
   1175d:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11760:	6a 01                	push   $0x1
   11762:	6a 21                	push   $0x21
   11764:	e8 05 fc ff ff       	call   1136e <outb>
   11769:	83 c4 08             	add    $0x8,%esp

    // 对第二个 8259 芯片初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1176c:	6a 11                	push   $0x11
   1176e:	68 a0 00 00 00       	push   $0xa0
   11773:	e8 f6 fb ff ff       	call   1136e <outb>
   11778:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1177b:	6a 28                	push   $0x28
   1177d:	68 a1 00 00 00       	push   $0xa1
   11782:	e8 e7 fb ff ff       	call   1136e <outb>
   11787:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   1178a:	6a 02                	push   $0x2
   1178c:	68 a1 00 00 00       	push   $0xa1
   11791:	e8 d8 fb ff ff       	call   1136e <outb>
   11796:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11799:	6a 01                	push   $0x1
   1179b:	68 a1 00 00 00       	push   $0xa1
   117a0:	e8 c9 fb ff ff       	call   1136e <outb>
   117a5:	83 c4 08             	add    $0x8,%esp

    // 此时还没有给外部设备设置好寄存器，（还没初始化好外部设备）
    // 所以此时应该屏蔽所有的中断
    outb(PIC0_IMR, 0xff & ~(1 << 2));
   117a8:	68 fb 00 00 00       	push   $0xfb
   117ad:	6a 21                	push   $0x21
   117af:	e8 ba fb ff ff       	call   1136e <outb>
   117b4:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   117b7:	68 ff 00 00 00       	push   $0xff
   117bc:	68 a1 00 00 00       	push   $0xa1
   117c1:	e8 a8 fb ff ff       	call   1136e <outb>
   117c6:	83 c4 08             	add    $0x8,%esp
}
   117c9:	90                   	nop
   117ca:	c9                   	leave  
   117cb:	c3                   	ret    

000117cc <irq_init>:


// 初始化中断
// 初始化IDT表
// lgdt 加载IDT表
void irq_init(void) {
   117cc:	55                   	push   %ebp
   117cd:	89 e5                	mov    %esp,%ebp
   117cf:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   117d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   117d9:	eb 25                	jmp    11800 <irq_init+0x34>
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   117db:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   117e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117e3:	c1 e0 03             	shl    $0x3,%eax
   117e6:	05 00 8a 01 00       	add    $0x18a00,%eax
   117eb:	68 00 8e 00 00       	push   $0x8e00
   117f0:	52                   	push   %edx
   117f1:	6a 08                	push   $0x8
   117f3:	50                   	push   %eax
   117f4:	e8 bf f9 ff ff       	call   111b8 <gate_desc_set>
   117f9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NO; i++) {
   117fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11800:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11804:	7e d5                	jle    117db <irq_init+0xf>
    }

    irq_install(IRQ0_DE_DIVIDE_ERROR, (irq_handler_t)exception_handler_divide_error);
   11806:	83 ec 08             	sub    $0x8,%esp
   11809:	68 4a 00 01 00       	push   $0x1004a
   1180e:	6a 00                	push   $0x0
   11810:	e8 77 01 00 00       	call   1198c <irq_install>
   11815:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB_DEBUG_EXCEPTION, (irq_handler_t)exception_handler_debug_exception);
   11818:	83 ec 08             	sub    $0x8,%esp
   1181b:	68 69 00 01 00       	push   $0x10069
   11820:	6a 01                	push   $0x1
   11822:	e8 65 01 00 00       	call   1198c <irq_install>
   11827:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI_INTERRUPT, (irq_handler_t)exception_handler_nmi_interrupt);
   1182a:	83 ec 08             	sub    $0x8,%esp
   1182d:	68 88 00 01 00       	push   $0x10088
   11832:	6a 02                	push   $0x2
   11834:	e8 53 01 00 00       	call   1198c <irq_install>
   11839:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP_BREAKPOINT, (irq_handler_t)exception_handler_breakpoint);
   1183c:	83 ec 08             	sub    $0x8,%esp
   1183f:	68 a7 00 01 00       	push   $0x100a7
   11844:	6a 03                	push   $0x3
   11846:	e8 41 01 00 00       	call   1198c <irq_install>
   1184b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF_OVERFLOW, (irq_handler_t)exception_handler_overflow);
   1184e:	83 ec 08             	sub    $0x8,%esp
   11851:	68 c6 00 01 00       	push   $0x100c6
   11856:	6a 04                	push   $0x4
   11858:	e8 2f 01 00 00       	call   1198c <irq_install>
   1185d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR_BOUND_RANGE_EXCEEDED, (irq_handler_t)exception_handler_bound_range_exceed);
   11860:	83 ec 08             	sub    $0x8,%esp
   11863:	68 e5 00 01 00       	push   $0x100e5
   11868:	6a 05                	push   $0x5
   1186a:	e8 1d 01 00 00       	call   1198c <irq_install>
   1186f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD_INVALID_OPCODE, (irq_handler_t)exception_handler_invalid_opcode);
   11872:	83 ec 08             	sub    $0x8,%esp
   11875:	68 04 01 01 00       	push   $0x10104
   1187a:	6a 06                	push   $0x6
   1187c:	e8 0b 01 00 00       	call   1198c <irq_install>
   11881:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM_DEVICE_NOT_AVAILABLE, (irq_handler_t)exception_handler_device_not_found);
   11884:	83 ec 08             	sub    $0x8,%esp
   11887:	68 23 01 01 00       	push   $0x10123
   1188c:	6a 07                	push   $0x7
   1188e:	e8 f9 00 00 00       	call   1198c <irq_install>
   11893:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF_DOUBLE_FAULT, (irq_handler_t)exception_handler_double_fault);
   11896:	83 ec 08             	sub    $0x8,%esp
   11899:	68 42 01 01 00       	push   $0x10142
   1189e:	6a 08                	push   $0x8
   118a0:	e8 e7 00 00 00       	call   1198c <irq_install>
   118a5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS_INVALID_TSS, (irq_handler_t)exception_handler_invalid_tss);
   118a8:	83 ec 08             	sub    $0x8,%esp
   118ab:	68 5f 01 01 00       	push   $0x1015f
   118b0:	6a 0a                	push   $0xa
   118b2:	e8 d5 00 00 00       	call   1198c <irq_install>
   118b7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP_SEGMENT_NOT_PRESENT, (irq_handler_t)exception_handler_segment_not_present);
   118ba:	83 ec 08             	sub    $0x8,%esp
   118bd:	68 7c 01 01 00       	push   $0x1017c
   118c2:	6a 0b                	push   $0xb
   118c4:	e8 c3 00 00 00       	call   1198c <irq_install>
   118c9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS_STACK_SEGMENT_FAULT, (irq_handler_t)exception_handler_stack_segment_fault);
   118cc:	83 ec 08             	sub    $0x8,%esp
   118cf:	68 99 01 01 00       	push   $0x10199
   118d4:	6a 0c                	push   $0xc
   118d6:	e8 b1 00 00 00       	call   1198c <irq_install>
   118db:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP_GENERAL_PROTECTION, (irq_handler_t)exception_handler_general_protection);
   118de:	83 ec 08             	sub    $0x8,%esp
   118e1:	68 b8 01 01 00       	push   $0x101b8
   118e6:	6a 0d                	push   $0xd
   118e8:	e8 9f 00 00 00       	call   1198c <irq_install>
   118ed:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF_PAGE_FAULT, (irq_handler_t)exception_handler_page_fault);
   118f0:	83 ec 08             	sub    $0x8,%esp
   118f3:	68 d5 01 01 00       	push   $0x101d5
   118f8:	6a 0e                	push   $0xe
   118fa:	e8 8d 00 00 00       	call   1198c <irq_install>
   118ff:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF_FLOATING_POINT_ERR, (irq_handler_t)exception_handler_floating_point_error);
   11902:	83 ec 08             	sub    $0x8,%esp
   11905:	68 f2 01 01 00       	push   $0x101f2
   1190a:	6a 10                	push   $0x10
   1190c:	e8 7b 00 00 00       	call   1198c <irq_install>
   11911:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC_ALIGNMENT_CHECK, (irq_handler_t)exception_handler_aligment_check);
   11914:	83 ec 08             	sub    $0x8,%esp
   11917:	68 11 02 01 00       	push   $0x10211
   1191c:	6a 11                	push   $0x11
   1191e:	e8 69 00 00 00       	call   1198c <irq_install>
   11923:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC_MACHINE_CHECK, (irq_handler_t)exception_handler_machine_check);
   11926:	83 ec 08             	sub    $0x8,%esp
   11929:	68 2e 02 01 00       	push   $0x1022e
   1192e:	6a 12                	push   $0x12
   11930:	e8 57 00 00 00       	call   1198c <irq_install>
   11935:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM_SIMD_FLOATING_POINT_EXCEPTION, (irq_handler_t)exception_handler_simd_floating_point_exception);
   11938:	83 ec 08             	sub    $0x8,%esp
   1193b:	68 4d 02 01 00       	push   $0x1024d
   11940:	6a 13                	push   $0x13
   11942:	e8 45 00 00 00       	call   1198c <irq_install>
   11947:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE_VITUALIZATION_EXCEPTION, (irq_handler_t)exception_handler_virtualization_exception);
   1194a:	83 ec 08             	sub    $0x8,%esp
   1194d:	68 6c 02 01 00       	push   $0x1026c
   11952:	6a 14                	push   $0x14
   11954:	e8 33 00 00 00       	call   1198c <irq_install>
   11959:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ21_CP_CONTROL_PROTECTION_EXCEPITON, (irq_handler_t)exception_handler_control_protection_exception);
   1195c:	83 ec 08             	sub    $0x8,%esp
   1195f:	68 8b 02 01 00       	push   $0x1028b
   11964:	6a 15                	push   $0x15
   11966:	e8 21 00 00 00       	call   1198c <irq_install>
   1196b:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   1196e:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11973:	83 ec 08             	sub    $0x8,%esp
   11976:	68 00 04 00 00       	push   $0x400
   1197b:	50                   	push   %eax
   1197c:	e8 1a fa ff ff       	call   1139b <lidt>
   11981:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11984:	e8 b0 fd ff ff       	call   11739 <init_pic>
}
   11989:	90                   	nop
   1198a:	c9                   	leave  
   1198b:	c3                   	ret    

0001198c <irq_install>:


// 将中断编号加载至IDT表
int irq_install(int irq_num, irq_handler_t handler) {
   1198c:	55                   	push   %ebp
   1198d:	89 e5                	mov    %esp,%ebp
   1198f:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NO) {
   11992:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11996:	7e 07                	jle    1199f <irq_install+0x13>
        return -1;
   11998:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1199d:	eb 20                	jmp    119bf <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   1199f:	8b 45 0c             	mov    0xc(%ebp),%eax
   119a2:	8b 55 08             	mov    0x8(%ebp),%edx
   119a5:	c1 e2 03             	shl    $0x3,%edx
   119a8:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   119ae:	68 00 8e 00 00       	push   $0x8e00
   119b3:	50                   	push   %eax
   119b4:	6a 08                	push   $0x8
   119b6:	52                   	push   %edx
   119b7:	e8 fc f7 ff ff       	call   111b8 <gate_desc_set>
   119bc:	83 c4 10             	add    $0x10,%esp
}
   119bf:	c9                   	leave  
   119c0:	c3                   	ret    

000119c1 <irq_enable>:

// 开启 8259 特定的中断
void irq_enable(int irq_num) {
   119c1:	55                   	push   %ebp
   119c2:	89 e5                	mov    %esp,%ebp
   119c4:	53                   	push   %ebx
   119c5:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   119c8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   119cc:	7e 78                	jle    11a46 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   119ce:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   119d2:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   119d6:	7f 32                	jg     11a0a <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num); // 清0
   119d8:	6a 21                	push   $0x21
   119da:	e8 72 f9 ff ff       	call   11351 <inb>
   119df:	83 c4 04             	add    $0x4,%esp
   119e2:	89 c2                	mov    %eax,%edx
   119e4:	8b 45 08             	mov    0x8(%ebp),%eax
   119e7:	bb 01 00 00 00       	mov    $0x1,%ebx
   119ec:	89 c1                	mov    %eax,%ecx
   119ee:	d3 e3                	shl    %cl,%ebx
   119f0:	89 d8                	mov    %ebx,%eax
   119f2:	f7 d0                	not    %eax
   119f4:	21 d0                	and    %edx,%eax
   119f6:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   119f9:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   119fd:	50                   	push   %eax
   119fe:	6a 21                	push   $0x21
   11a00:	e8 69 f9 ff ff       	call   1136e <outb>
   11a05:	83 c4 08             	add    $0x8,%esp
   11a08:	eb 3d                	jmp    11a47 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   11a0a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num); // 清0
   11a0e:	68 a1 00 00 00       	push   $0xa1
   11a13:	e8 39 f9 ff ff       	call   11351 <inb>
   11a18:	83 c4 04             	add    $0x4,%esp
   11a1b:	89 c2                	mov    %eax,%edx
   11a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a20:	bb 01 00 00 00       	mov    $0x1,%ebx
   11a25:	89 c1                	mov    %eax,%ecx
   11a27:	d3 e3                	shl    %cl,%ebx
   11a29:	89 d8                	mov    %ebx,%eax
   11a2b:	f7 d0                	not    %eax
   11a2d:	21 d0                	and    %edx,%eax
   11a2f:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11a32:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11a36:	50                   	push   %eax
   11a37:	68 a1 00 00 00       	push   $0xa1
   11a3c:	e8 2d f9 ff ff       	call   1136e <outb>
   11a41:	83 c4 08             	add    $0x8,%esp
   11a44:	eb 01                	jmp    11a47 <irq_enable+0x86>
        return;
   11a46:	90                   	nop
    }
}
   11a47:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11a4a:	c9                   	leave  
   11a4b:	c3                   	ret    

00011a4c <irq_disable>:

// 关闭 8259 特定的中断
void irq_disable(int irq_num) {
   11a4c:	55                   	push   %ebp
   11a4d:	89 e5                	mov    %esp,%ebp
   11a4f:	53                   	push   %ebx
   11a50:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11a53:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11a57:	7e 74                	jle    11acd <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START; // 将值转换为 8259 对应的从0开始的内部值
   11a59:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11a5d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a61:	7f 30                	jg     11a93 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num); // 清0
   11a63:	6a 21                	push   $0x21
   11a65:	e8 e7 f8 ff ff       	call   11351 <inb>
   11a6a:	83 c4 04             	add    $0x4,%esp
   11a6d:	89 c3                	mov    %eax,%ebx
   11a6f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a72:	ba 01 00 00 00       	mov    $0x1,%edx
   11a77:	89 c1                	mov    %eax,%ecx
   11a79:	d3 e2                	shl    %cl,%edx
   11a7b:	89 d0                	mov    %edx,%eax
   11a7d:	09 d8                	or     %ebx,%eax
   11a7f:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);   // 回写
   11a82:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11a86:	50                   	push   %eax
   11a87:	6a 21                	push   $0x21
   11a89:	e8 e0 f8 ff ff       	call   1136e <outb>
   11a8e:	83 c4 08             	add    $0x8,%esp
   11a91:	eb 3b                	jmp    11ace <irq_disable+0x82>
    } else {
        irq_num -= 8;
   11a93:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num); // 清0
   11a97:	68 a1 00 00 00       	push   $0xa1
   11a9c:	e8 b0 f8 ff ff       	call   11351 <inb>
   11aa1:	83 c4 04             	add    $0x4,%esp
   11aa4:	89 c3                	mov    %eax,%ebx
   11aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa9:	ba 01 00 00 00       	mov    $0x1,%edx
   11aae:	89 c1                	mov    %eax,%ecx
   11ab0:	d3 e2                	shl    %cl,%edx
   11ab2:	89 d0                	mov    %edx,%eax
   11ab4:	09 d8                	or     %ebx,%eax
   11ab6:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);   // 回写
   11ab9:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11abd:	50                   	push   %eax
   11abe:	68 a1 00 00 00       	push   $0xa1
   11ac3:	e8 a6 f8 ff ff       	call   1136e <outb>
   11ac8:	83 c4 08             	add    $0x8,%esp
   11acb:	eb 01                	jmp    11ace <irq_disable+0x82>
        return;
   11acd:	90                   	nop
    }
}
   11ace:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11ad1:	c9                   	leave  
   11ad2:	c3                   	ret    

00011ad3 <irq_disable_global>:


// 关闭全局中断
void irq_disable_global(void) {
   11ad3:	55                   	push   %ebp
   11ad4:	89 e5                	mov    %esp,%ebp
    cli();
   11ad6:	e8 b2 f8 ff ff       	call   1138d <cli>
}
   11adb:	90                   	nop
   11adc:	5d                   	pop    %ebp
   11add:	c3                   	ret    

00011ade <irq_enable_global>:

// 开启全局中断
void irq_enable_global(void) {
   11ade:	55                   	push   %ebp
   11adf:	89 e5                	mov    %esp,%ebp
    sti();
   11ae1:	e8 ae f8 ff ff       	call   11394 <sti>
}
   11ae6:	90                   	nop
   11ae7:	5d                   	pop    %ebp
   11ae8:	c3                   	ret    

00011ae9 <pic_send_eoi>:

// 通知定时器继续响应下一次中断
void pic_send_eoi(int irq_num) {
   11ae9:	55                   	push   %ebp
   11aea:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11aec:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   11af0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11af4:	7e 0f                	jle    11b05 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11af6:	6a 20                	push   $0x20
   11af8:	68 a0 00 00 00       	push   $0xa0
   11afd:	e8 6c f8 ff ff       	call   1136e <outb>
   11b02:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11b05:	6a 20                	push   $0x20
   11b07:	6a 20                	push   $0x20
   11b09:	e8 60 f8 ff ff       	call   1136e <outb>
   11b0e:	83 c4 08             	add    $0x8,%esp
}
   11b11:	90                   	nop
   11b12:	c9                   	leave  
   11b13:	c3                   	ret    

00011b14 <irq_enter_protection>:

// 进入临界区保护状态
irq_state_t irq_enter_protection(void) {
   11b14:	55                   	push   %ebp
   11b15:	89 e5                	mov    %esp,%ebp
   11b17:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11b1a:	e8 ab f8 ff ff       	call   113ca <read_eflags>
   11b1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11b22:	e8 ac ff ff ff       	call   11ad3 <irq_disable_global>
    return state;
   11b27:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11b2a:	c9                   	leave  
   11b2b:	c3                   	ret    

00011b2c <irq_leave_protection>:

// 退出临界区保护状态
irq_state_t irq_leave_protection(irq_state_t state) {
   11b2c:	55                   	push   %ebp
   11b2d:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11b2f:	ff 75 08             	pushl  0x8(%ebp)
   11b32:	e8 a3 f8 ff ff       	call   113da <write_eflags>
   11b37:	83 c4 04             	add    $0x4,%esp
   11b3a:	90                   	nop
   11b3b:	c9                   	leave  
   11b3c:	c3                   	ret    

00011b3d <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11b3d:	55                   	push   %ebp
   11b3e:	89 e5                	mov    %esp,%ebp
   11b40:	83 ec 08             	sub    $0x8,%esp
   11b43:	8b 55 08             	mov    0x8(%ebp),%edx
   11b46:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b49:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11b4d:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   11b50:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11b54:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11b58:	ee                   	out    %al,(%dx)
}
   11b59:	90                   	nop
   11b5a:	c9                   	leave  
   11b5b:	c3                   	ret    

00011b5c <do_handler_timer>:

// 系统运行时间
static uint32_t sys_tick;

// 定时中断到达后增加计时
void do_handler_timer(exception_frame_t* frame) {
   11b5c:	55                   	push   %ebp
   11b5d:	89 e5                	mov    %esp,%ebp
   11b5f:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11b62:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11b67:	83 c0 01             	add    $0x1,%eax
   11b6a:	a3 00 8e 01 00       	mov    %eax,0x18e00

    // 中断达到后，需要通知 8259 芯片，当前的中断已经处理完毕
    // 需要发个命令给它，这样 8259 才能响应后面的中断
    pic_send_eoi(IRQ0_TIMER);
   11b6f:	83 ec 0c             	sub    $0xc,%esp
   11b72:	6a 20                	push   $0x20
   11b74:	e8 70 ff ff ff       	call   11ae9 <pic_send_eoi>
   11b79:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11b7c:	e8 f1 f3 ff ff       	call   10f72 <task_time_tick>
}
   11b81:	90                   	nop
   11b82:	c9                   	leave  
   11b83:	c3                   	ret    

00011b84 <init_pit>:


static void init_pit(void) {
   11b84:	55                   	push   %ebp
   11b85:	89 e5                	mov    %esp,%ebp
   11b87:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11b8a:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 端口，对定时器0进行配置
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11b91:	6a 36                	push   $0x36
   11b93:	6a 43                	push   $0x43
   11b95:	e8 a3 ff ff ff       	call   11b3d <outb>
   11b9a:	83 c4 08             	add    $0x8,%esp

    // 设置的时间值是 reload_count，
    // 定时器周期，reload_count 减到 0 后，把这个值重设
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xff);
   11b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ba0:	0f b6 c0             	movzbl %al,%eax
   11ba3:	50                   	push   %eax
   11ba4:	6a 40                	push   $0x40
   11ba6:	e8 92 ff ff ff       	call   11b3d <outb>
   11bab:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xff);
   11bae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bb1:	c1 e8 08             	shr    $0x8,%eax
   11bb4:	0f b6 c0             	movzbl %al,%eax
   11bb7:	50                   	push   %eax
   11bb8:	6a 40                	push   $0x40
   11bba:	e8 7e ff ff ff       	call   11b3d <outb>
   11bbf:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11bc2:	83 ec 08             	sub    $0x8,%esp
   11bc5:	68 a8 02 01 00       	push   $0x102a8
   11bca:	6a 20                	push   $0x20
   11bcc:	e8 bb fd ff ff       	call   1198c <irq_install>
   11bd1:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11bd4:	83 ec 0c             	sub    $0xc,%esp
   11bd7:	6a 20                	push   $0x20
   11bd9:	e8 e3 fd ff ff       	call   119c1 <irq_enable>
   11bde:	83 c4 10             	add    $0x10,%esp
}
   11be1:	90                   	nop
   11be2:	c9                   	leave  
   11be3:	c3                   	ret    

00011be4 <timer_init>:

void timer_init(void) {
   11be4:	55                   	push   %ebp
   11be5:	89 e5                	mov    %esp,%ebp
   11be7:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11bea:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   11bf1:	00 00 00 
    init_pit();
   11bf4:	e8 8b ff ff ff       	call   11b84 <init_pit>
   11bf9:	90                   	nop
   11bfa:	c9                   	leave  
   11bfb:	c3                   	ret    

00011bfc <list_size>:
static inline int list_size(list_t* list) {
   11bfc:	55                   	push   %ebp
   11bfd:	89 e5                	mov    %esp,%ebp
    return list->count;
   11bff:	8b 45 08             	mov    0x8(%ebp),%eax
   11c02:	8b 40 08             	mov    0x8(%eax),%eax
}
   11c05:	5d                   	pop    %ebp
   11c06:	c3                   	ret    

00011c07 <list_first>:
static inline list_node_t* list_first(list_t* list) {
   11c07:	55                   	push   %ebp
   11c08:	89 e5                	mov    %esp,%ebp
    return list->first;
   11c0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11c0d:	8b 00                	mov    (%eax),%eax
}
   11c0f:	5d                   	pop    %ebp
   11c10:	c3                   	ret    

00011c11 <list_last>:

static inline list_node_t* list_last(list_t* list) {
   11c11:	55                   	push   %ebp
   11c12:	89 e5                	mov    %esp,%ebp
    return list->last;
   11c14:	8b 45 08             	mov    0x8(%ebp),%eax
   11c17:	8b 40 04             	mov    0x4(%eax),%eax
}
   11c1a:	5d                   	pop    %ebp
   11c1b:	c3                   	ret    

00011c1c <kernel_init>:

// int test_data = 4;
// const int test_rodata = 4;
// static int test_bss;

void kernel_init(boot_info_t* boot_info) {
   11c1c:	55                   	push   %ebp
   11c1d:	89 e5                	mov    %esp,%ebp
   11c1f:	83 ec 08             	sub    $0x8,%esp
    // while (1) { }
    ASSERT(boot_info->ram_region_count != 0);
   11c22:	8b 45 08             	mov    0x8(%ebp),%eax
   11c25:	8b 40 50             	mov    0x50(%eax),%eax
   11c28:	85 c0                	test   %eax,%eax
   11c2a:	75 19                	jne    11c45 <kernel_init+0x29>
   11c2c:	68 14 32 01 00       	push   $0x13214
   11c31:	68 04 33 01 00       	push   $0x13304
   11c36:	6a 1a                	push   $0x1a
   11c38:	68 38 32 01 00       	push   $0x13238
   11c3d:	e8 b0 0c 00 00       	call   128f2 <pannic>
   11c42:	83 c4 10             	add    $0x10,%esp
    // ASSERT(3 < 2);
    __asm__ __volatile__("nop");
   11c45:	90                   	nop


    log_init();
   11c46:	e8 0f 0f 00 00       	call   12b5a <log_init>

    memory_init(boot_info);
   11c4b:	83 ec 0c             	sub    $0xc,%esp
   11c4e:	ff 75 08             	pushl  0x8(%ebp)
   11c51:	e8 06 ec ff ff       	call   1085c <memory_init>
   11c56:	83 c4 10             	add    $0x10,%esp

    cpu_init();
   11c59:	e8 0e f6 ff ff       	call   1126c <cpu_init>


    irq_init();
   11c5e:	e8 69 fb ff ff       	call   117cc <irq_init>
    timer_init();
   11c63:	e8 7c ff ff ff       	call   11be4 <timer_init>

    task_manager_init();
   11c68:	e8 71 f0 ff ff       	call   10cde <task_manager_init>
}
   11c6d:	90                   	nop
   11c6e:	c9                   	leave  
   11c6f:	c3                   	ret    

00011c70 <link_test>:
//         sys_sleep(1000);
//     }
// }


void link_test(void) {
   11c70:	55                   	push   %ebp
   11c71:	89 e5                	mov    %esp,%ebp
   11c73:	56                   	push   %esi
   11c74:	53                   	push   %ebx
   11c75:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_node_t nodes[5];


    list_init(&list);
   11c78:	83 ec 0c             	sub    $0xc,%esp
   11c7b:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c7e:	50                   	push   %eax
   11c7f:	e8 b7 0c 00 00       	call   1293b <list_init>
   11c84:	83 c4 10             	add    $0x10,%esp
    log_printf("list: first = %x, last = %x, count = %d\n", list_first(&list), list_last(&list), list_size(&list));
   11c87:	83 ec 0c             	sub    $0xc,%esp
   11c8a:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c8d:	50                   	push   %eax
   11c8e:	e8 69 ff ff ff       	call   11bfc <list_size>
   11c93:	83 c4 10             	add    $0x10,%esp
   11c96:	89 c6                	mov    %eax,%esi
   11c98:	83 ec 0c             	sub    $0xc,%esp
   11c9b:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11c9e:	50                   	push   %eax
   11c9f:	e8 6d ff ff ff       	call   11c11 <list_last>
   11ca4:	83 c4 10             	add    $0x10,%esp
   11ca7:	89 c3                	mov    %eax,%ebx
   11ca9:	83 ec 0c             	sub    $0xc,%esp
   11cac:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11caf:	50                   	push   %eax
   11cb0:	e8 52 ff ff ff       	call   11c07 <list_first>
   11cb5:	83 c4 10             	add    $0x10,%esp
   11cb8:	56                   	push   %esi
   11cb9:	53                   	push   %ebx
   11cba:	50                   	push   %eax
   11cbb:	68 80 32 01 00       	push   $0x13280
   11cc0:	e8 37 0f 00 00       	call   12bfc <log_printf>
   11cc5:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11cc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ccf:	eb 3b                	jmp    11d0c <link_test+0x9c>
        list_node_t* node = &nodes[i];
   11cd1:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11cd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cd7:	c1 e2 03             	shl    $0x3,%edx
   11cda:	01 d0                	add    %edx,%eax
   11cdc:	89 45 dc             	mov    %eax,-0x24(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11cdf:	8b 45 dc             	mov    -0x24(%ebp),%eax
   11ce2:	83 ec 04             	sub    $0x4,%esp
   11ce5:	50                   	push   %eax
   11ce6:	ff 75 f4             	pushl  -0xc(%ebp)
   11ce9:	68 a9 32 01 00       	push   $0x132a9
   11cee:	e8 09 0f 00 00       	call   12bfc <log_printf>
   11cf3:	83 c4 10             	add    $0x10,%esp
        list_insert_front(&list, node);
   11cf6:	83 ec 08             	sub    $0x8,%esp
   11cf9:	ff 75 dc             	pushl  -0x24(%ebp)
   11cfc:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11cff:	50                   	push   %eax
   11d00:	e8 59 0c 00 00       	call   1295e <list_insert_front>
   11d05:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11d08:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d0c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11d10:	7e bf                	jle    11cd1 <link_test+0x61>
    }

    for (int i = 0; i < 5; i++) {
   11d12:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11d19:	eb 33                	jmp    11d4e <link_test+0xde>
        list_remove_front(&list);
   11d1b:	83 ec 0c             	sub    $0xc,%esp
   11d1e:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d21:	50                   	push   %eax
   11d22:	e8 f9 0c 00 00       	call   12a20 <list_remove_front>
   11d27:	83 c4 10             	add    $0x10,%esp
        log_printf("[%d]", list_size(&list));
   11d2a:	83 ec 0c             	sub    $0xc,%esp
   11d2d:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d30:	50                   	push   %eax
   11d31:	e8 c6 fe ff ff       	call   11bfc <list_size>
   11d36:	83 c4 10             	add    $0x10,%esp
   11d39:	83 ec 08             	sub    $0x8,%esp
   11d3c:	50                   	push   %eax
   11d3d:	68 b1 32 01 00       	push   $0x132b1
   11d42:	e8 b5 0e 00 00       	call   12bfc <log_printf>
   11d47:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11d4a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11d4e:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11d52:	7e c7                	jle    11d1b <link_test+0xab>
    }

    list_init(&list);
   11d54:	83 ec 0c             	sub    $0xc,%esp
   11d57:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d5a:	50                   	push   %eax
   11d5b:	e8 db 0b 00 00       	call   1293b <list_init>
   11d60:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < 5; i++) {
   11d63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11d6a:	eb 3b                	jmp    11da7 <link_test+0x137>
        list_node_t* node = &nodes[i];
   11d6c:	8d 45 a8             	lea    -0x58(%ebp),%eax
   11d6f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11d72:	c1 e2 03             	shl    $0x3,%edx
   11d75:	01 d0                	add    %edx,%eax
   11d77:	89 45 e0             	mov    %eax,-0x20(%ebp)

        log_printf("%d, %x\n", i, (uint32_t)node);
   11d7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11d7d:	83 ec 04             	sub    $0x4,%esp
   11d80:	50                   	push   %eax
   11d81:	ff 75 ec             	pushl  -0x14(%ebp)
   11d84:	68 a9 32 01 00       	push   $0x132a9
   11d89:	e8 6e 0e 00 00       	call   12bfc <log_printf>
   11d8e:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&list, node);
   11d91:	83 ec 08             	sub    $0x8,%esp
   11d94:	ff 75 e0             	pushl  -0x20(%ebp)
   11d97:	8d 45 d0             	lea    -0x30(%ebp),%eax
   11d9a:	50                   	push   %eax
   11d9b:	e8 1d 0c 00 00       	call   129bd <list_insert_back>
   11da0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++) {
   11da3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11da7:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11dab:	7e bf                	jle    11d6c <link_test+0xfc>
    }

    struct type_t {
        int i;
        list_node_t node;
    } v = { 0x123456 };
   11dad:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
   11db4:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
   11dbb:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
   11dc2:	c7 45 9c 56 34 12 00 	movl   $0x123456,-0x64(%ebp)

    list_node_t* v_node = &v.node;
   11dc9:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11dcc:	83 c0 04             	add    $0x4,%eax
   11dcf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   11dd2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11dd6:	74 08                	je     11de0 <link_test+0x170>
   11dd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ddb:	83 e8 04             	sub    $0x4,%eax
   11dde:	eb 05                	jmp    11de5 <link_test+0x175>
   11de0:	b8 00 00 00 00       	mov    $0x0,%eax
   11de5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if (p->i != 0x123456) {
   11de8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11deb:	8b 00                	mov    (%eax),%eax
   11ded:	3d 56 34 12 00       	cmp    $0x123456,%eax
   11df2:	74 10                	je     11e04 <link_test+0x194>
        log_printf("error!");
   11df4:	83 ec 0c             	sub    $0xc,%esp
   11df7:	68 b6 32 01 00       	push   $0x132b6
   11dfc:	e8 fb 0d 00 00       	call   12bfc <log_printf>
   11e01:	83 c4 10             	add    $0x10,%esp
    }

}
   11e04:	90                   	nop
   11e05:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11e08:	5b                   	pop    %ebx
   11e09:	5e                   	pop    %esi
   11e0a:	5d                   	pop    %ebp
   11e0b:	c3                   	ret    

00011e0c <move_to_first_task>:


void move_to_first_task(void) {
   11e0c:	55                   	push   %ebp
   11e0d:	89 e5                	mov    %esp,%ebp
   11e0f:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    task_t* curr = task_current();
   11e12:	e8 95 f0 ff ff       	call   10eac <task_current>
   11e17:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(curr != 0);
   11e1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e1e:	75 19                	jne    11e39 <move_to_first_task+0x2d>
   11e20:	68 bd 32 01 00       	push   $0x132bd
   11e25:	68 10 33 01 00       	push   $0x13310
   11e2a:	6a 70                	push   $0x70
   11e2c:	68 38 32 01 00       	push   $0x13238
   11e31:	e8 bc 0a 00 00       	call   128f2 <pannic>
   11e36:	83 c4 10             	add    $0x10,%esp

    tss_t* tss = &(curr->tss);
   11e39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e3c:	83 c0 48             	add    $0x48,%eax
   11e3f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    __asm__ __volatile__(
        "jmp *%[ip]"::[ip]"r"(tss->eip)
   11e42:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e45:	8b 40 20             	mov    0x20(%eax),%eax
    __asm__ __volatile__(
   11e48:	ff e0                	jmp    *%eax
    );

    // far_jump((uint32_t)tss, 0);
}
   11e4a:	90                   	nop
   11e4b:	c9                   	leave  
   11e4c:	c3                   	ret    

00011e4d <init_main>:


void init_main(void) {
   11e4d:	55                   	push   %ebp
   11e4e:	89 e5                	mov    %esp,%ebp
   11e50:	83 ec 08             	sub    $0x8,%esp
    // int a = 3 / 0;
    // irq_enable_global();
    log_printf("Kernel is running ...");
   11e53:	83 ec 0c             	sub    $0xc,%esp
   11e56:	68 c7 32 01 00       	push   $0x132c7
   11e5b:	e8 9c 0d 00 00       	call   12bfc <log_printf>
   11e60:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s %s", OS_VERSION, "test");
   11e63:	83 ec 04             	sub    $0x4,%esp
   11e66:	68 dd 32 01 00       	push   $0x132dd
   11e6b:	68 e2 32 01 00       	push   $0x132e2
   11e70:	68 e8 32 01 00       	push   $0x132e8
   11e75:	e8 82 0d 00 00       	call   12bfc <log_printf>
   11e7a:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 12345, -123, 0x123456, 'a');
   11e7d:	83 ec 0c             	sub    $0xc,%esp
   11e80:	6a 61                	push   $0x61
   11e82:	68 56 34 12 00       	push   $0x123456
   11e87:	6a 85                	push   $0xffffff85
   11e89:	68 39 30 00 00       	push   $0x3039
   11e8e:	68 f7 32 01 00       	push   $0x132f7
   11e93:	e8 64 0d 00 00       	call   12bfc <log_printf>
   11e98:	83 c4 20             	add    $0x20,%esp

    //
    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
    //

    task_first_init();
   11e9b:	e8 a4 ee ff ff       	call   10d44 <task_first_init>
    move_to_first_task();
   11ea0:	e8 67 ff ff ff       	call   11e0c <move_to_first_task>
        // sem_notify(&sem);
        sys_sleep(1000);
    }

    */
   11ea5:	90                   	nop
   11ea6:	c9                   	leave  
   11ea7:	c3                   	ret    

00011ea8 <list_size>:
static inline int list_size(list_t* list) {
   11ea8:	55                   	push   %ebp
   11ea9:	89 e5                	mov    %esp,%ebp
    return list->count;
   11eab:	8b 45 08             	mov    0x8(%ebp),%eax
   11eae:	8b 40 08             	mov    0x8(%eax),%eax
}
   11eb1:	5d                   	pop    %ebp
   11eb2:	c3                   	ret    

00011eb3 <mutex_init>:
#include "ipc/mutex.h"
#include "cpu/irq.h"
#include "tools/klib.h"

void mutex_init(mutex_t* mutex, const char* name) {
   11eb3:	55                   	push   %ebp
   11eb4:	89 e5                	mov    %esp,%ebp
   11eb6:	83 ec 08             	sub    $0x8,%esp
    kstrcpy(mutex->name, name);
   11eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11ebc:	83 ec 08             	sub    $0x8,%esp
   11ebf:	ff 75 0c             	pushl  0xc(%ebp)
   11ec2:	50                   	push   %eax
   11ec3:	e8 0a 05 00 00       	call   123d2 <kstrcpy>
   11ec8:	83 c4 10             	add    $0x10,%esp
    mutex->locked_count = 0;
   11ecb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ece:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    mutex->owner = (task_t*) 0;
   11ed5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed8:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    list_init(&mutex->wait_list);
   11edf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee2:	83 c0 48             	add    $0x48,%eax
   11ee5:	83 ec 0c             	sub    $0xc,%esp
   11ee8:	50                   	push   %eax
   11ee9:	e8 4d 0a 00 00       	call   1293b <list_init>
   11eee:	83 c4 10             	add    $0x10,%esp
}
   11ef1:	90                   	nop
   11ef2:	c9                   	leave  
   11ef3:	c3                   	ret    

00011ef4 <mutex_acquire>:

void mutex_acquire(mutex_t* mutex) {
   11ef4:	55                   	push   %ebp
   11ef5:	89 e5                	mov    %esp,%ebp
   11ef7:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11efa:	e8 15 fc ff ff       	call   11b14 <irq_enter_protection>
   11eff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11f02:	e8 a5 ef ff ff       	call   10eac <task_current>
   11f07:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11f0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0d:	8b 40 44             	mov    0x44(%eax),%eax
   11f10:	85 c0                	test   %eax,%eax
   11f12:	75 15                	jne    11f29 <mutex_acquire+0x35>
        mutex->locked_count = 1;
   11f14:	8b 45 08             	mov    0x8(%ebp),%eax
   11f17:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)
        mutex->owner = curr;
   11f1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f21:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11f24:	89 50 40             	mov    %edx,0x40(%eax)
   11f27:	eb 48                	jmp    11f71 <mutex_acquire+0x7d>
    }
    else if (mutex->owner == curr) {
   11f29:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2c:	8b 40 40             	mov    0x40(%eax),%eax
   11f2f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f32:	75 11                	jne    11f45 <mutex_acquire+0x51>
        mutex->locked_count++;
   11f34:	8b 45 08             	mov    0x8(%ebp),%eax
   11f37:	8b 40 44             	mov    0x44(%eax),%eax
   11f3a:	8d 50 01             	lea    0x1(%eax),%edx
   11f3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f40:	89 50 44             	mov    %edx,0x44(%eax)
   11f43:	eb 2c                	jmp    11f71 <mutex_acquire+0x7d>
    }
    else {
        task_set_blocked(curr);
   11f45:	83 ec 0c             	sub    $0xc,%esp
   11f48:	ff 75 f0             	pushl  -0x10(%ebp)
   11f4b:	e8 ee ee ff ff       	call   10e3e <task_set_blocked>
   11f50:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&mutex->wait_list, &curr->wait_node);  // 把当前进程（自己）放入mutex的等待队列
   11f53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f56:	8d 50 34             	lea    0x34(%eax),%edx
   11f59:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5c:	83 c0 48             	add    $0x48,%eax
   11f5f:	83 ec 08             	sub    $0x8,%esp
   11f62:	52                   	push   %edx
   11f63:	50                   	push   %eax
   11f64:	e8 54 0a 00 00       	call   129bd <list_insert_back>
   11f69:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11f6c:	e8 a6 ef ff ff       	call   10f17 <task_dispatch>
    }

    irq_leave_protection(state);
   11f71:	83 ec 0c             	sub    $0xc,%esp
   11f74:	ff 75 f4             	pushl  -0xc(%ebp)
   11f77:	e8 b0 fb ff ff       	call   11b2c <irq_leave_protection>
   11f7c:	83 c4 10             	add    $0x10,%esp
}
   11f7f:	90                   	nop
   11f80:	c9                   	leave  
   11f81:	c3                   	ret    

00011f82 <mutex_release>:

void mutex_release(mutex_t* mutex) {
   11f82:	55                   	push   %ebp
   11f83:	89 e5                	mov    %esp,%ebp
   11f85:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11f88:	e8 87 fb ff ff       	call   11b14 <irq_enter_protection>
   11f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11f90:	e8 17 ef ff ff       	call   10eac <task_current>
   11f95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11f98:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9b:	8b 40 40             	mov    0x40(%eax),%eax
   11f9e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11fa1:	0f 85 8a 00 00 00    	jne    12031 <mutex_release+0xaf>
        if (--mutex->locked_count == 0) {
   11fa7:	8b 45 08             	mov    0x8(%ebp),%eax
   11faa:	8b 40 44             	mov    0x44(%eax),%eax
   11fad:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fb0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb3:	89 50 44             	mov    %edx,0x44(%eax)
   11fb6:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb9:	8b 40 44             	mov    0x44(%eax),%eax
   11fbc:	85 c0                	test   %eax,%eax
   11fbe:	75 71                	jne    12031 <mutex_release+0xaf>
            mutex->owner = (task_t*)0;
   11fc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc3:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)

            if (list_size(&mutex->wait_list)) {
   11fca:	8b 45 08             	mov    0x8(%ebp),%eax
   11fcd:	83 c0 48             	add    $0x48,%eax
   11fd0:	83 ec 0c             	sub    $0xc,%esp
   11fd3:	50                   	push   %eax
   11fd4:	e8 cf fe ff ff       	call   11ea8 <list_size>
   11fd9:	83 c4 10             	add    $0x10,%esp
   11fdc:	85 c0                	test   %eax,%eax
   11fde:	74 51                	je     12031 <mutex_release+0xaf>
                list_node_t* node = list_remove_front(&mutex->wait_list);
   11fe0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe3:	83 c0 48             	add    $0x48,%eax
   11fe6:	83 ec 0c             	sub    $0xc,%esp
   11fe9:	50                   	push   %eax
   11fea:	e8 31 0a 00 00       	call   12a20 <list_remove_front>
   11fef:	83 c4 10             	add    $0x10,%esp
   11ff2:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t* task = list_node_parent(node, task_t, wait_node);
   11ff5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ff9:	74 08                	je     12003 <mutex_release+0x81>
   11ffb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ffe:	83 e8 34             	sub    $0x34,%eax
   12001:	eb 05                	jmp    12008 <mutex_release+0x86>
   12003:	b8 00 00 00 00       	mov    $0x0,%eax
   12008:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1200b:	83 ec 0c             	sub    $0xc,%esp
   1200e:	ff 75 e8             	pushl  -0x18(%ebp)
   12011:	e8 f4 ed ff ff       	call   10e0a <task_set_ready>
   12016:	83 c4 10             	add    $0x10,%esp

                mutex->owner = task;
   12019:	8b 45 08             	mov    0x8(%ebp),%eax
   1201c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1201f:	89 50 40             	mov    %edx,0x40(%eax)
                mutex->locked_count = 1;
   12022:	8b 45 08             	mov    0x8(%ebp),%eax
   12025:	c7 40 44 01 00 00 00 	movl   $0x1,0x44(%eax)

                task_dispatch();
   1202c:	e8 e6 ee ff ff       	call   10f17 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   12031:	83 ec 0c             	sub    $0xc,%esp
   12034:	ff 75 f4             	pushl  -0xc(%ebp)
   12037:	e8 f0 fa ff ff       	call   11b2c <irq_leave_protection>
   1203c:	83 c4 10             	add    $0x10,%esp
   1203f:	90                   	nop
   12040:	c9                   	leave  
   12041:	c3                   	ret    

00012042 <list_size>:
static inline int list_size(list_t* list) {
   12042:	55                   	push   %ebp
   12043:	89 e5                	mov    %esp,%ebp
    return list->count;
   12045:	8b 45 08             	mov    0x8(%ebp),%eax
   12048:	8b 40 08             	mov    0x8(%eax),%eax
}
   1204b:	5d                   	pop    %ebp
   1204c:	c3                   	ret    

0001204d <sem_init>:
#include "ipc/sem.h"
#include "core/task.h"
#include "cpu/irq.h"

void sem_init(sem_t* sem, int init_count) {
   1204d:	55                   	push   %ebp
   1204e:	89 e5                	mov    %esp,%ebp
   12050:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12053:	8b 45 08             	mov    0x8(%ebp),%eax
   12056:	8b 55 0c             	mov    0xc(%ebp),%edx
   12059:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1205b:	8b 45 08             	mov    0x8(%ebp),%eax
   1205e:	83 c0 04             	add    $0x4,%eax
   12061:	83 ec 0c             	sub    $0xc,%esp
   12064:	50                   	push   %eax
   12065:	e8 d1 08 00 00       	call   1293b <list_init>
   1206a:	83 c4 10             	add    $0x10,%esp
}
   1206d:	90                   	nop
   1206e:	c9                   	leave  
   1206f:	c3                   	ret    

00012070 <sem_wait>:


void sem_wait(sem_t* sem) {
   12070:	55                   	push   %ebp
   12071:	89 e5                	mov    %esp,%ebp
   12073:	83 ec 18             	sub    $0x18,%esp
    // 进程获得了一个信号，且不为0
    irq_state_t state = irq_enter_protection();
   12076:	e8 99 fa ff ff       	call   11b14 <irq_enter_protection>
   1207b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   1207e:	8b 45 08             	mov    0x8(%ebp),%eax
   12081:	8b 00                	mov    (%eax),%eax
   12083:	85 c0                	test   %eax,%eax
   12085:	7e 0f                	jle    12096 <sem_wait+0x26>
        sem->count--;
   12087:	8b 45 08             	mov    0x8(%ebp),%eax
   1208a:	8b 00                	mov    (%eax),%eax
   1208c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1208f:	8b 45 08             	mov    0x8(%ebp),%eax
   12092:	89 10                	mov    %edx,(%eax)
   12094:	eb 34                	jmp    120ca <sem_wait+0x5a>
    }
    else {
        task_t* curr = task_current();
   12096:	e8 11 ee ff ff       	call   10eac <task_current>
   1209b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_blocked(curr);
   1209e:	83 ec 0c             	sub    $0xc,%esp
   120a1:	ff 75 f0             	pushl  -0x10(%ebp)
   120a4:	e8 95 ed ff ff       	call   10e3e <task_set_blocked>
   120a9:	83 c4 10             	add    $0x10,%esp
        list_insert_back(&sem->wait_list, &curr->wait_node);
   120ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120af:	8d 50 34             	lea    0x34(%eax),%edx
   120b2:	8b 45 08             	mov    0x8(%ebp),%eax
   120b5:	83 c0 04             	add    $0x4,%eax
   120b8:	83 ec 08             	sub    $0x8,%esp
   120bb:	52                   	push   %edx
   120bc:	50                   	push   %eax
   120bd:	e8 fb 08 00 00       	call   129bd <list_insert_back>
   120c2:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   120c5:	e8 4d ee ff ff       	call   10f17 <task_dispatch>
    }

    irq_leave_protection(state);
   120ca:	83 ec 0c             	sub    $0xc,%esp
   120cd:	ff 75 f4             	pushl  -0xc(%ebp)
   120d0:	e8 57 fa ff ff       	call   11b2c <irq_leave_protection>
   120d5:	83 c4 10             	add    $0x10,%esp
}
   120d8:	90                   	nop
   120d9:	c9                   	leave  
   120da:	c3                   	ret    

000120db <sem_notify>:


void sem_notify(sem_t* sem) {
   120db:	55                   	push   %ebp
   120dc:	89 e5                	mov    %esp,%ebp
   120de:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   120e1:	e8 2e fa ff ff       	call   11b14 <irq_enter_protection>
   120e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 如果有进程在等待队列中
    if (list_size(&sem->wait_list)) {
   120e9:	8b 45 08             	mov    0x8(%ebp),%eax
   120ec:	83 c0 04             	add    $0x4,%eax
   120ef:	83 ec 0c             	sub    $0xc,%esp
   120f2:	50                   	push   %eax
   120f3:	e8 4a ff ff ff       	call   12042 <list_size>
   120f8:	83 c4 10             	add    $0x10,%esp
   120fb:	85 c0                	test   %eax,%eax
   120fd:	74 40                	je     1213f <sem_notify+0x64>
        list_node_t* node = list_remove_front(&sem->wait_list);
   120ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12102:	83 c0 04             	add    $0x4,%eax
   12105:	83 ec 0c             	sub    $0xc,%esp
   12108:	50                   	push   %eax
   12109:	e8 12 09 00 00       	call   12a20 <list_remove_front>
   1210e:	83 c4 10             	add    $0x10,%esp
   12111:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t* task = list_node_parent(node, task_t, wait_node);
   12114:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12118:	74 08                	je     12122 <sem_notify+0x47>
   1211a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1211d:	83 e8 34             	sub    $0x34,%eax
   12120:	eb 05                	jmp    12127 <sem_notify+0x4c>
   12122:	b8 00 00 00 00       	mov    $0x0,%eax
   12127:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1212a:	83 ec 0c             	sub    $0xc,%esp
   1212d:	ff 75 ec             	pushl  -0x14(%ebp)
   12130:	e8 d5 ec ff ff       	call   10e0a <task_set_ready>
   12135:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12138:	e8 da ed ff ff       	call   10f17 <task_dispatch>
   1213d:	eb 0d                	jmp    1214c <sem_notify+0x71>
    }
    else {  // 发了一个信号，但没有人接收，先增加
        sem->count++;
   1213f:	8b 45 08             	mov    0x8(%ebp),%eax
   12142:	8b 00                	mov    (%eax),%eax
   12144:	8d 50 01             	lea    0x1(%eax),%edx
   12147:	8b 45 08             	mov    0x8(%ebp),%eax
   1214a:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(state);
   1214c:	83 ec 0c             	sub    $0xc,%esp
   1214f:	ff 75 f4             	pushl  -0xc(%ebp)
   12152:	e8 d5 f9 ff ff       	call   11b2c <irq_leave_protection>
   12157:	83 c4 10             	add    $0x10,%esp
}
   1215a:	90                   	nop
   1215b:	c9                   	leave  
   1215c:	c3                   	ret    

0001215d <sem_count>:

int sem_count(sem_t* sem) {
   1215d:	55                   	push   %ebp
   1215e:	89 e5                	mov    %esp,%ebp
   12160:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12163:	e8 ac f9 ff ff       	call   11b14 <irq_enter_protection>
   12168:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int count = sem->count;
   1216b:	8b 45 08             	mov    0x8(%ebp),%eax
   1216e:	8b 00                	mov    (%eax),%eax
   12170:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    irq_leave_protection(state);
   12173:	83 ec 0c             	sub    $0xc,%esp
   12176:	ff 75 f4             	pushl  -0xc(%ebp)
   12179:	e8 ae f9 ff ff       	call   11b2c <irq_leave_protection>
   1217e:	83 c4 10             	add    $0x10,%esp

    return count;
   12181:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12184:	c9                   	leave  
   12185:	c3                   	ret    

00012186 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count) {
   12186:	55                   	push   %ebp
   12187:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   12189:	8b 45 08             	mov    0x8(%ebp),%eax
   1218c:	83 c0 07             	add    $0x7,%eax
   1218f:	8d 50 07             	lea    0x7(%eax),%edx
   12192:	85 c0                	test   %eax,%eax
   12194:	0f 48 c2             	cmovs  %edx,%eax
   12197:	c1 f8 03             	sar    $0x3,%eax
}
   1219a:	5d                   	pop    %ebp
   1219b:	c3                   	ret    

0001219c <bitmap_init>:

// bitmap
// bits: 位图数据位置
// count: 位图数据位置占用空间大小
// init_bit: 初始bit值
void bitmap_init(bitmap_t* bitmap, uint8_t* bits, int count, int init_bit) {
   1219c:	55                   	push   %ebp
   1219d:	89 e5                	mov    %esp,%ebp
   1219f:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   121a2:	8b 45 08             	mov    0x8(%ebp),%eax
   121a5:	8b 55 10             	mov    0x10(%ebp),%edx
   121a8:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   121aa:	8b 45 08             	mov    0x8(%ebp),%eax
   121ad:	8b 55 0c             	mov    0xc(%ebp),%edx
   121b0:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   121b3:	8b 45 08             	mov    0x8(%ebp),%eax
   121b6:	8b 00                	mov    (%eax),%eax
   121b8:	50                   	push   %eax
   121b9:	e8 c8 ff ff ff       	call   12186 <bitmap_byte_count>
   121be:	83 c4 04             	add    $0x4,%esp
   121c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kmemset(bitmap->bits, init_bit ? 0xff : 0, bytes);
   121c4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   121c8:	74 07                	je     121d1 <bitmap_init+0x35>
   121ca:	ba ff 00 00 00       	mov    $0xff,%edx
   121cf:	eb 05                	jmp    121d6 <bitmap_init+0x3a>
   121d1:	ba 00 00 00 00       	mov    $0x0,%edx
   121d6:	8b 45 08             	mov    0x8(%ebp),%eax
   121d9:	8b 40 04             	mov    0x4(%eax),%eax
   121dc:	83 ec 04             	sub    $0x4,%esp
   121df:	ff 75 f4             	pushl  -0xc(%ebp)
   121e2:	52                   	push   %edx
   121e3:	50                   	push   %eax
   121e4:	e8 a4 03 00 00       	call   1258d <kmemset>
   121e9:	83 c4 10             	add    $0x10,%esp
}
   121ec:	90                   	nop
   121ed:	c9                   	leave  
   121ee:	c3                   	ret    

000121ef <bitmap_set_bit>:


// 对某一个位设置
// index 开头，连续 count 位设置成 bit_value
void bitmap_set_bit(bitmap_t* bitmap, int index, int count, int bit_value) {
   121ef:	55                   	push   %ebp
   121f0:	89 e5                	mov    %esp,%ebp
   121f2:	56                   	push   %esi
   121f3:	53                   	push   %ebx
   121f4:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   121f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   121fe:	e9 a2 00 00 00       	jmp    122a5 <bitmap_set_bit+0xb6>
        if (bit_value != 0) {
   12203:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12207:	74 4a                	je     12253 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12209:	8b 45 08             	mov    0x8(%ebp),%eax
   1220c:	8b 50 04             	mov    0x4(%eax),%edx
   1220f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12212:	8d 48 07             	lea    0x7(%eax),%ecx
   12215:	85 c0                	test   %eax,%eax
   12217:	0f 48 c1             	cmovs  %ecx,%eax
   1221a:	c1 f8 03             	sar    $0x3,%eax
   1221d:	89 c3                	mov    %eax,%ebx
   1221f:	89 d8                	mov    %ebx,%eax
   12221:	01 d0                	add    %edx,%eax
   12223:	0f b6 00             	movzbl (%eax),%eax
   12226:	89 c6                	mov    %eax,%esi
   12228:	8b 45 0c             	mov    0xc(%ebp),%eax
   1222b:	99                   	cltd   
   1222c:	c1 ea 1d             	shr    $0x1d,%edx
   1222f:	01 d0                	add    %edx,%eax
   12231:	83 e0 07             	and    $0x7,%eax
   12234:	29 d0                	sub    %edx,%eax
   12236:	ba 01 00 00 00       	mov    $0x1,%edx
   1223b:	89 c1                	mov    %eax,%ecx
   1223d:	d3 e2                	shl    %cl,%edx
   1223f:	89 d0                	mov    %edx,%eax
   12241:	89 f2                	mov    %esi,%edx
   12243:	09 c2                	or     %eax,%edx
   12245:	8b 45 08             	mov    0x8(%ebp),%eax
   12248:	8b 40 04             	mov    0x4(%eax),%eax
   1224b:	89 d9                	mov    %ebx,%ecx
   1224d:	01 c8                	add    %ecx,%eax
   1224f:	88 10                	mov    %dl,(%eax)
   12251:	eb 4a                	jmp    1229d <bitmap_set_bit+0xae>
        }
        else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12253:	8b 45 08             	mov    0x8(%ebp),%eax
   12256:	8b 50 04             	mov    0x4(%eax),%edx
   12259:	8b 45 0c             	mov    0xc(%ebp),%eax
   1225c:	8d 48 07             	lea    0x7(%eax),%ecx
   1225f:	85 c0                	test   %eax,%eax
   12261:	0f 48 c1             	cmovs  %ecx,%eax
   12264:	c1 f8 03             	sar    $0x3,%eax
   12267:	89 c3                	mov    %eax,%ebx
   12269:	89 d8                	mov    %ebx,%eax
   1226b:	01 d0                	add    %edx,%eax
   1226d:	0f b6 00             	movzbl (%eax),%eax
   12270:	89 c6                	mov    %eax,%esi
   12272:	8b 45 0c             	mov    0xc(%ebp),%eax
   12275:	99                   	cltd   
   12276:	c1 ea 1d             	shr    $0x1d,%edx
   12279:	01 d0                	add    %edx,%eax
   1227b:	83 e0 07             	and    $0x7,%eax
   1227e:	29 d0                	sub    %edx,%eax
   12280:	ba 01 00 00 00       	mov    $0x1,%edx
   12285:	89 c1                	mov    %eax,%ecx
   12287:	d3 e2                	shl    %cl,%edx
   12289:	89 d0                	mov    %edx,%eax
   1228b:	f7 d0                	not    %eax
   1228d:	89 f2                	mov    %esi,%edx
   1228f:	21 c2                	and    %eax,%edx
   12291:	8b 45 08             	mov    0x8(%ebp),%eax
   12294:	8b 40 04             	mov    0x4(%eax),%eax
   12297:	89 d9                	mov    %ebx,%ecx
   12299:	01 c8                	add    %ecx,%eax
   1229b:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1229d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122a1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   122a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122a8:	3b 45 10             	cmp    0x10(%ebp),%eax
   122ab:	7d 0e                	jge    122bb <bitmap_set_bit+0xcc>
   122ad:	8b 45 08             	mov    0x8(%ebp),%eax
   122b0:	8b 00                	mov    (%eax),%eax
   122b2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   122b5:	0f 8c 48 ff ff ff    	jl     12203 <bitmap_set_bit+0x14>
        }
    }
}
   122bb:	90                   	nop
   122bc:	83 c4 10             	add    $0x10,%esp
   122bf:	5b                   	pop    %ebx
   122c0:	5e                   	pop    %esi
   122c1:	5d                   	pop    %ebp
   122c2:	c3                   	ret    

000122c3 <bitmap_get_bit>:


// 获取状态值
int bitmap_get_bit(bitmap_t* bitmap, int index) {
   122c3:	55                   	push   %ebp
   122c4:	89 e5                	mov    %esp,%ebp
   122c6:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   122c7:	8b 45 08             	mov    0x8(%ebp),%eax
   122ca:	8b 50 04             	mov    0x4(%eax),%edx
   122cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   122d0:	8d 48 07             	lea    0x7(%eax),%ecx
   122d3:	85 c0                	test   %eax,%eax
   122d5:	0f 48 c1             	cmovs  %ecx,%eax
   122d8:	c1 f8 03             	sar    $0x3,%eax
   122db:	01 d0                	add    %edx,%eax
   122dd:	0f b6 00             	movzbl (%eax),%eax
   122e0:	0f b6 d8             	movzbl %al,%ebx
   122e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   122e6:	99                   	cltd   
   122e7:	c1 ea 1d             	shr    $0x1d,%edx
   122ea:	01 d0                	add    %edx,%eax
   122ec:	83 e0 07             	and    $0x7,%eax
   122ef:	29 d0                	sub    %edx,%eax
   122f1:	89 c1                	mov    %eax,%ecx
   122f3:	d3 fb                	sar    %cl,%ebx
   122f5:	89 d8                	mov    %ebx,%eax
   122f7:	83 e0 01             	and    $0x1,%eax
}
   122fa:	5b                   	pop    %ebx
   122fb:	5d                   	pop    %ebp
   122fc:	c3                   	ret    

000122fd <bitmap_is_set>:



// 判断该位是否已设置为1
int bitmap_is_set(bitmap_t* bitmap, int index) {
   122fd:	55                   	push   %ebp
   122fe:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12300:	ff 75 0c             	pushl  0xc(%ebp)
   12303:	ff 75 08             	pushl  0x8(%ebp)
   12306:	e8 b8 ff ff ff       	call   122c3 <bitmap_get_bit>
   1230b:	83 c4 08             	add    $0x8,%esp
   1230e:	85 c0                	test   %eax,%eax
   12310:	0f 95 c0             	setne  %al
   12313:	0f b6 c0             	movzbl %al,%eax
}
   12316:	c9                   	leave  
   12317:	c3                   	ret    

00012318 <bitmap_alloc_nbits>:


// 寻找一个连续的位空间，该空间长度为count，值全部为bit
// 返回值是第一个可用的位空间的索引
int bitmap_alloc_nbits(bitmap_t * bitmap, int bit, int count) {
   12318:	55                   	push   %ebp
   12319:	89 e5                	mov    %esp,%ebp
   1231b:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1231e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   12325:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1232c:	e9 85 00 00 00       	jmp    123b6 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12331:	ff 75 fc             	pushl  -0x4(%ebp)
   12334:	ff 75 08             	pushl  0x8(%ebp)
   12337:	e8 87 ff ff ff       	call   122c3 <bitmap_get_bit>
   1233c:	83 c4 08             	add    $0x8,%esp
   1233f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12342:	74 06                	je     1234a <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   12344:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12348:	eb 6c                	jmp    123b6 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1234a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1234d:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12350:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12357:	eb 27                	jmp    12380 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   12359:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1235c:	8d 50 01             	lea    0x1(%eax),%edx
   1235f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12362:	50                   	push   %eax
   12363:	ff 75 08             	pushl  0x8(%ebp)
   12366:	e8 58 ff ff ff       	call   122c3 <bitmap_get_bit>
   1236b:	83 c4 08             	add    $0x8,%esp
   1236e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12371:	74 09                	je     1237c <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12373:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1237a:	eb 16                	jmp    12392 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1237c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12380:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12383:	3b 45 10             	cmp    0x10(%ebp),%eax
   12386:	7d 0a                	jge    12392 <bitmap_alloc_nbits+0x7a>
   12388:	8b 45 08             	mov    0x8(%ebp),%eax
   1238b:	8b 00                	mov    (%eax),%eax
   1238d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12390:	7c c7                	jl     12359 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   12392:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12395:	3b 45 10             	cmp    0x10(%ebp),%eax
   12398:	7c 1c                	jl     123b6 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1239a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1239d:	f7 d0                	not    %eax
   1239f:	50                   	push   %eax
   123a0:	ff 75 10             	pushl  0x10(%ebp)
   123a3:	ff 75 f8             	pushl  -0x8(%ebp)
   123a6:	ff 75 08             	pushl  0x8(%ebp)
   123a9:	e8 41 fe ff ff       	call   121ef <bitmap_set_bit>
   123ae:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   123b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   123b4:	eb 13                	jmp    123c9 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   123b6:	8b 45 08             	mov    0x8(%ebp),%eax
   123b9:	8b 00                	mov    (%eax),%eax
   123bb:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   123be:	0f 8c 6d ff ff ff    	jl     12331 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   123c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   123c9:	c9                   	leave  
   123ca:	c3                   	ret    

000123cb <hlt>:
static inline void hlt(void) {
   123cb:	55                   	push   %ebp
   123cc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   123ce:	f4                   	hlt    
}
   123cf:	90                   	nop
   123d0:	5d                   	pop    %ebp
   123d1:	c3                   	ret    

000123d2 <kstrcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"

void kstrcpy(char *dest, const char *src) {
   123d2:	55                   	push   %ebp
   123d3:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   123d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123d9:	74 3b                	je     12416 <kstrcpy+0x44>
   123db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123df:	74 35                	je     12416 <kstrcpy+0x44>
        return;
    }

    while (*dest && *src) {
   123e1:	eb 17                	jmp    123fa <kstrcpy+0x28>
        *dest++ = *src++;
   123e3:	8b 55 0c             	mov    0xc(%ebp),%edx
   123e6:	8d 42 01             	lea    0x1(%edx),%eax
   123e9:	89 45 0c             	mov    %eax,0xc(%ebp)
   123ec:	8b 45 08             	mov    0x8(%ebp),%eax
   123ef:	8d 48 01             	lea    0x1(%eax),%ecx
   123f2:	89 4d 08             	mov    %ecx,0x8(%ebp)
   123f5:	0f b6 12             	movzbl (%edx),%edx
   123f8:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   123fa:	8b 45 08             	mov    0x8(%ebp),%eax
   123fd:	0f b6 00             	movzbl (%eax),%eax
   12400:	84 c0                	test   %al,%al
   12402:	74 0a                	je     1240e <kstrcpy+0x3c>
   12404:	8b 45 0c             	mov    0xc(%ebp),%eax
   12407:	0f b6 00             	movzbl (%eax),%eax
   1240a:	84 c0                	test   %al,%al
   1240c:	75 d5                	jne    123e3 <kstrcpy+0x11>
    }
    *dest = '\0';
   1240e:	8b 45 08             	mov    0x8(%ebp),%eax
   12411:	c6 00 00             	movb   $0x0,(%eax)
   12414:	eb 01                	jmp    12417 <kstrcpy+0x45>
        return;
   12416:	90                   	nop
}
   12417:	5d                   	pop    %ebp
   12418:	c3                   	ret    

00012419 <kstrncpy>:


void kstrncpy(char *dest, const char *src, int size) {
   12419:	55                   	push   %ebp
   1241a:	89 e5                	mov    %esp,%ebp
   1241c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1241f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12423:	74 61                	je     12486 <kstrncpy+0x6d>
   12425:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12429:	74 5b                	je     12486 <kstrncpy+0x6d>
   1242b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1242f:	74 55                	je     12486 <kstrncpy+0x6d>
        return;
    }

    char *d = dest;
   12431:	8b 45 08             	mov    0x8(%ebp),%eax
   12434:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12437:	8b 45 0c             	mov    0xc(%ebp),%eax
   1243a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   1243d:	eb 17                	jmp    12456 <kstrncpy+0x3d>
        *d++ = *s++;
   1243f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12442:	8d 42 01             	lea    0x1(%edx),%eax
   12445:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12448:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1244b:	8d 48 01             	lea    0x1(%eax),%ecx
   1244e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12451:	0f b6 12             	movzbl (%edx),%edx
   12454:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   12456:	8b 45 10             	mov    0x10(%ebp),%eax
   12459:	8d 50 ff             	lea    -0x1(%eax),%edx
   1245c:	89 55 10             	mov    %edx,0x10(%ebp)
   1245f:	85 c0                	test   %eax,%eax
   12461:	7e 0a                	jle    1246d <kstrncpy+0x54>
   12463:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12466:	0f b6 00             	movzbl (%eax),%eax
   12469:	84 c0                	test   %al,%al
   1246b:	75 d2                	jne    1243f <kstrncpy+0x26>
    }
    if (size == 0) {
   1246d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12471:	75 0b                	jne    1247e <kstrncpy+0x65>
        *(d - 1) = '\0';
   12473:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12476:	83 e8 01             	sub    $0x1,%eax
   12479:	c6 00 00             	movb   $0x0,(%eax)
   1247c:	eb 09                	jmp    12487 <kstrncpy+0x6e>
    } else {
        *d = '\0';
   1247e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12481:	c6 00 00             	movb   $0x0,(%eax)
   12484:	eb 01                	jmp    12487 <kstrncpy+0x6e>
        return;
   12486:	90                   	nop
    }
}
   12487:	c9                   	leave  
   12488:	c3                   	ret    

00012489 <kstrlen>:


int kstrlen(const char *str) {
   12489:	55                   	push   %ebp
   1248a:	89 e5                	mov    %esp,%ebp
   1248c:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   1248f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12493:	75 07                	jne    1249c <kstrlen+0x13>
        return 0;
   12495:	b8 00 00 00 00       	mov    $0x0,%eax
   1249a:	eb 26                	jmp    124c2 <kstrlen+0x39>
    }

    const char *c = str;
   1249c:	8b 45 08             	mov    0x8(%ebp),%eax
   1249f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   124a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++) {
   124a9:	eb 04                	jmp    124af <kstrlen+0x26>
        len++;
   124ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++) {
   124af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124b2:	8d 50 01             	lea    0x1(%eax),%edx
   124b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   124b8:	0f b6 00             	movzbl (%eax),%eax
   124bb:	84 c0                	test   %al,%al
   124bd:	75 ec                	jne    124ab <kstrlen+0x22>
    }

    return len;
   124bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   124c2:	c9                   	leave  
   124c3:	c3                   	ret    

000124c4 <kstrncmp>:


int kstrncmp(const char *s1, const char *s2, int size) {
   124c4:	55                   	push   %ebp
   124c5:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   124c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124cb:	74 06                	je     124d3 <kstrncmp+0xf>
   124cd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124d1:	75 0f                	jne    124e2 <kstrncmp+0x1e>
        return -1;
   124d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   124d8:	eb 62                	jmp    1253c <kstrncmp+0x78>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size) {
        s1++;
   124da:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   124de:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   124e2:	8b 45 08             	mov    0x8(%ebp),%eax
   124e5:	0f b6 00             	movzbl (%eax),%eax
   124e8:	84 c0                	test   %al,%al
   124ea:	74 20                	je     1250c <kstrncmp+0x48>
   124ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ef:	0f b6 00             	movzbl (%eax),%eax
   124f2:	84 c0                	test   %al,%al
   124f4:	74 16                	je     1250c <kstrncmp+0x48>
   124f6:	8b 45 08             	mov    0x8(%ebp),%eax
   124f9:	0f b6 10             	movzbl (%eax),%edx
   124fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ff:	0f b6 00             	movzbl (%eax),%eax
   12502:	38 c2                	cmp    %al,%dl
   12504:	75 06                	jne    1250c <kstrncmp+0x48>
   12506:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1250a:	75 ce                	jne    124da <kstrncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1250c:	8b 45 08             	mov    0x8(%ebp),%eax
   1250f:	0f b6 00             	movzbl (%eax),%eax
   12512:	84 c0                	test   %al,%al
   12514:	74 21                	je     12537 <kstrncmp+0x73>
   12516:	8b 45 0c             	mov    0xc(%ebp),%eax
   12519:	0f b6 00             	movzbl (%eax),%eax
   1251c:	84 c0                	test   %al,%al
   1251e:	74 17                	je     12537 <kstrncmp+0x73>
   12520:	8b 45 08             	mov    0x8(%ebp),%eax
   12523:	0f b6 10             	movzbl (%eax),%edx
   12526:	8b 45 0c             	mov    0xc(%ebp),%eax
   12529:	0f b6 00             	movzbl (%eax),%eax
   1252c:	38 c2                	cmp    %al,%dl
   1252e:	74 07                	je     12537 <kstrncmp+0x73>
   12530:	b8 01 00 00 00       	mov    $0x1,%eax
   12535:	eb 05                	jmp    1253c <kstrncmp+0x78>
   12537:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1253c:	5d                   	pop    %ebp
   1253d:	c3                   	ret    

0001253e <kmemcpy>:


void kmemcpy(void *dest, void *src, int size) {
   1253e:	55                   	push   %ebp
   1253f:	89 e5                	mov    %esp,%ebp
   12541:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   12544:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12548:	74 40                	je     1258a <kmemcpy+0x4c>
   1254a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1254e:	74 3a                	je     1258a <kmemcpy+0x4c>
   12550:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12554:	74 34                	je     1258a <kmemcpy+0x4c>
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12556:	8b 45 0c             	mov    0xc(%ebp),%eax
   12559:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   1255c:	8b 45 08             	mov    0x8(%ebp),%eax
   1255f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   12562:	eb 17                	jmp    1257b <kmemcpy+0x3d>
        *d++ = *s++;
   12564:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12567:	8d 42 01             	lea    0x1(%edx),%eax
   1256a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1256d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12570:	8d 48 01             	lea    0x1(%eax),%ecx
   12573:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12576:	0f b6 12             	movzbl (%edx),%edx
   12579:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1257b:	8b 45 10             	mov    0x10(%ebp),%eax
   1257e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12581:	89 55 10             	mov    %edx,0x10(%ebp)
   12584:	85 c0                	test   %eax,%eax
   12586:	75 dc                	jne    12564 <kmemcpy+0x26>
   12588:	eb 01                	jmp    1258b <kmemcpy+0x4d>
        return;
   1258a:	90                   	nop
    }
}
   1258b:	c9                   	leave  
   1258c:	c3                   	ret    

0001258d <kmemset>:


void kmemset(void *dest, uint8_t v, int size) {
   1258d:	55                   	push   %ebp
   1258e:	89 e5                	mov    %esp,%ebp
   12590:	83 ec 14             	sub    $0x14,%esp
   12593:	8b 45 0c             	mov    0xc(%ebp),%eax
   12596:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   12599:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1259d:	74 2c                	je     125cb <kmemset+0x3e>
   1259f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   125a3:	74 26                	je     125cb <kmemset+0x3e>
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   125a5:	8b 45 08             	mov    0x8(%ebp),%eax
   125a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   125ab:	eb 0f                	jmp    125bc <kmemset+0x2f>
        *d++ = v;
   125ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125b0:	8d 50 01             	lea    0x1(%eax),%edx
   125b3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   125b6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   125ba:	88 10                	mov    %dl,(%eax)
    while (size--) {
   125bc:	8b 45 10             	mov    0x10(%ebp),%eax
   125bf:	8d 50 ff             	lea    -0x1(%eax),%edx
   125c2:	89 55 10             	mov    %edx,0x10(%ebp)
   125c5:	85 c0                	test   %eax,%eax
   125c7:	75 e4                	jne    125ad <kmemset+0x20>
   125c9:	eb 01                	jmp    125cc <kmemset+0x3f>
        return;
   125cb:	90                   	nop
    }
}
   125cc:	c9                   	leave  
   125cd:	c3                   	ret    

000125ce <kmemcmp>:


int kmemcmp(void *d1, void *d2, int size) {
   125ce:	55                   	push   %ebp
   125cf:	89 e5                	mov    %esp,%ebp
   125d1:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   125d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125d8:	74 06                	je     125e0 <kmemcmp+0x12>
   125da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125de:	75 07                	jne    125e7 <kmemcmp+0x19>
        return 1;
   125e0:	b8 01 00 00 00       	mov    $0x1,%eax
   125e5:	eb 43                	jmp    1262a <kmemcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   125e7:	8b 45 08             	mov    0x8(%ebp),%eax
   125ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   125ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   125f3:	eb 23                	jmp    12618 <kmemcmp+0x4a>
        if (*p_d1++ != *p_d2++) {
   125f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125f8:	8d 50 01             	lea    0x1(%eax),%edx
   125fb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   125fe:	0f b6 08             	movzbl (%eax),%ecx
   12601:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12604:	8d 50 01             	lea    0x1(%eax),%edx
   12607:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1260a:	0f b6 00             	movzbl (%eax),%eax
   1260d:	38 c1                	cmp    %al,%cl
   1260f:	74 07                	je     12618 <kmemcmp+0x4a>
            return 1;
   12611:	b8 01 00 00 00       	mov    $0x1,%eax
   12616:	eb 12                	jmp    1262a <kmemcmp+0x5c>
    while (size--) {
   12618:	8b 45 10             	mov    0x10(%ebp),%eax
   1261b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1261e:	89 55 10             	mov    %edx,0x10(%ebp)
   12621:	85 c0                	test   %eax,%eax
   12623:	75 d0                	jne    125f5 <kmemcmp+0x27>
        }
    }

    return 0;
   12625:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1262a:	c9                   	leave  
   1262b:	c3                   	ret    

0001262c <kitoa>:


void kitoa(char *buf, int num, int base) {
   1262c:	55                   	push   %ebp
   1262d:	89 e5                	mov    %esp,%ebp
   1262f:	53                   	push   %ebx
   12630:	83 ec 20             	sub    $0x20,%esp
    static const char* num2ch = { "FEDCBA9876543210123456789ABCDEF" };
    char* p = buf;
   12633:	8b 45 08             	mov    0x8(%ebp),%eax
   12636:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12639:	8b 45 0c             	mov    0xc(%ebp),%eax
   1263c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1263f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12643:	74 1d                	je     12662 <kitoa+0x36>
   12645:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   12649:	74 17                	je     12662 <kitoa+0x36>
   1264b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1264f:	74 11                	je     12662 <kitoa+0x36>
   12651:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12655:	74 0b                	je     12662 <kitoa+0x36>
        *p = '\0';
   12657:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1265a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1265d:	e9 03 01 00 00       	jmp    12765 <kitoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12662:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   12669:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1266d:	79 19                	jns    12688 <kitoa+0x5c>
   1266f:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12673:	75 13                	jne    12688 <kitoa+0x5c>
        *p++ = '-';
   12675:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12678:	8d 50 01             	lea    0x1(%eax),%edx
   1267b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1267e:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12681:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   12688:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1268c:	74 3b                	je     126c9 <kitoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1268e:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12694:	8b 45 0c             	mov    0xc(%ebp),%eax
   12697:	99                   	cltd   
   12698:	f7 7d 10             	idivl  0x10(%ebp)
   1269b:	89 d0                	mov    %edx,%eax
   1269d:	83 c0 0f             	add    $0xf,%eax
   126a0:	01 c8                	add    %ecx,%eax
   126a2:	0f b6 00             	movzbl (%eax),%eax
   126a5:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   126a8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126ab:	8d 50 01             	lea    0x1(%eax),%edx
   126ae:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126b1:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   126b5:	88 10                	mov    %dl,(%eax)
            num /= base;
   126b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   126ba:	99                   	cltd   
   126bb:	f7 7d 10             	idivl  0x10(%ebp)
   126be:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   126c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126c5:	75 c7                	jne    1268e <kitoa+0x62>
   126c7:	eb 4b                	jmp    12714 <kitoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   126c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   126cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   126cf:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   126d5:	8b 5d 10             	mov    0x10(%ebp),%ebx
   126d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126db:	ba 00 00 00 00       	mov    $0x0,%edx
   126e0:	f7 f3                	div    %ebx
   126e2:	89 d0                	mov    %edx,%eax
   126e4:	83 c0 0f             	add    $0xf,%eax
   126e7:	01 c8                	add    %ecx,%eax
   126e9:	0f b6 00             	movzbl (%eax),%eax
   126ec:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   126ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126f2:	8d 50 01             	lea    0x1(%eax),%edx
   126f5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126f8:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   126fc:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   126fe:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12701:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12704:	ba 00 00 00 00       	mov    $0x0,%edx
   12709:	f7 f3                	div    %ebx
   1270b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1270e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12712:	75 bb                	jne    126cf <kitoa+0xa3>
    }
    *p-- = '\0';
   12714:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12717:	8d 50 ff             	lea    -0x1(%eax),%edx
   1271a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1271d:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12720:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12724:	74 08                	je     1272e <kitoa+0x102>
   12726:	8b 45 08             	mov    0x8(%ebp),%eax
   12729:	83 c0 01             	add    $0x1,%eax
   1272c:	eb 03                	jmp    12731 <kitoa+0x105>
   1272e:	8b 45 08             	mov    0x8(%ebp),%eax
   12731:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   12734:	eb 27                	jmp    1275d <kitoa+0x131>
        char ch = *start;
   12736:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12739:	0f b6 00             	movzbl (%eax),%eax
   1273c:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1273f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12742:	0f b6 10             	movzbl (%eax),%edx
   12745:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12748:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   1274a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1274d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12750:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12753:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   12757:	88 10                	mov    %dl,(%eax)
        start++;
   12759:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1275d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12760:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12763:	72 d1                	jb     12736 <kitoa+0x10a>
    }
}
   12765:	83 c4 20             	add    $0x20,%esp
   12768:	5b                   	pop    %ebx
   12769:	5d                   	pop    %ebp
   1276a:	c3                   	ret    

0001276b <ksprintf>:


void ksprintf(char *buf, const char *fmt, ...) {
   1276b:	55                   	push   %ebp
   1276c:	89 e5                	mov    %esp,%ebp
   1276e:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   12771:	8d 45 10             	lea    0x10(%ebp),%eax
   12774:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kvsprintf(buf, fmt, args);
   12777:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1277a:	83 ec 04             	sub    $0x4,%esp
   1277d:	50                   	push   %eax
   1277e:	ff 75 0c             	pushl  0xc(%ebp)
   12781:	ff 75 08             	pushl  0x8(%ebp)
   12784:	e8 06 00 00 00       	call   1278f <kvsprintf>
   12789:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1278c:	90                   	nop
   1278d:	c9                   	leave  
   1278e:	c3                   	ret    

0001278f <kvsprintf>:


void kvsprintf(char *buffer, const char *fmt, va_list args) {
   1278f:	55                   	push   %ebp
   12790:	89 e5                	mov    %esp,%ebp
   12792:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL,
           READ_FMT } state = NORMAL;
   12795:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1279c:	8b 45 08             	mov    0x8(%ebp),%eax
   1279f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   127a2:	e9 2f 01 00 00       	jmp    128d6 <kvsprintf+0x147>
        switch (state) {
   127a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127aa:	85 c0                	test   %eax,%eax
   127ac:	74 0a                	je     127b8 <kvsprintf+0x29>
   127ae:	83 f8 01             	cmp    $0x1,%eax
   127b1:	74 2b                	je     127de <kvsprintf+0x4f>
   127b3:	e9 1e 01 00 00       	jmp    128d6 <kvsprintf+0x147>
        // 普通字符
        case NORMAL:
            if (ch == '%') {
   127b8:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   127bc:	75 0c                	jne    127ca <kvsprintf+0x3b>
                state = READ_FMT;
   127be:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   127c5:	e9 0c 01 00 00       	jmp    128d6 <kvsprintf+0x147>
            } else {
                *curr++ = ch;
   127ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127cd:	8d 50 01             	lea    0x1(%eax),%edx
   127d0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   127d3:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   127d7:	88 10                	mov    %dl,(%eax)
            }
            break;
   127d9:	e9 f8 00 00 00       	jmp    128d6 <kvsprintf+0x147>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd') {
   127de:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   127e2:	75 31                	jne    12815 <kvsprintf+0x86>
                int num = va_arg(args, int);
   127e4:	8b 45 10             	mov    0x10(%ebp),%eax
   127e7:	8d 50 04             	lea    0x4(%eax),%edx
   127ea:	89 55 10             	mov    %edx,0x10(%ebp)
   127ed:	8b 00                	mov    (%eax),%eax
   127ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kitoa(curr, num, 10);
   127f2:	6a 0a                	push   $0xa
   127f4:	ff 75 e4             	pushl  -0x1c(%ebp)
   127f7:	ff 75 f8             	pushl  -0x8(%ebp)
   127fa:	e8 2d fe ff ff       	call   1262c <kitoa>
   127ff:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12802:	ff 75 f8             	pushl  -0x8(%ebp)
   12805:	e8 7f fc ff ff       	call   12489 <kstrlen>
   1280a:	83 c4 04             	add    $0x4,%esp
   1280d:	01 45 f8             	add    %eax,-0x8(%ebp)
   12810:	e9 b9 00 00 00       	jmp    128ce <kvsprintf+0x13f>
            } 
            else if (ch == 'x') {
   12815:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12819:	75 46                	jne    12861 <kvsprintf+0xd2>
                *curr++ = '0';
   1281b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1281e:	8d 50 01             	lea    0x1(%eax),%edx
   12821:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12824:	c6 00 30             	movb   $0x30,(%eax)
                *curr++ = 'x';
   12827:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1282a:	8d 50 01             	lea    0x1(%eax),%edx
   1282d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12830:	c6 00 78             	movb   $0x78,(%eax)
                int num = va_arg(args, int);
   12833:	8b 45 10             	mov    0x10(%ebp),%eax
   12836:	8d 50 04             	lea    0x4(%eax),%edx
   12839:	89 55 10             	mov    %edx,0x10(%ebp)
   1283c:	8b 00                	mov    (%eax),%eax
   1283e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kitoa(curr, num, 16);
   12841:	6a 10                	push   $0x10
   12843:	ff 75 e8             	pushl  -0x18(%ebp)
   12846:	ff 75 f8             	pushl  -0x8(%ebp)
   12849:	e8 de fd ff ff       	call   1262c <kitoa>
   1284e:	83 c4 0c             	add    $0xc,%esp
                curr += kstrlen(curr);
   12851:	ff 75 f8             	pushl  -0x8(%ebp)
   12854:	e8 30 fc ff ff       	call   12489 <kstrlen>
   12859:	83 c4 04             	add    $0x4,%esp
   1285c:	01 45 f8             	add    %eax,-0x8(%ebp)
   1285f:	eb 6d                	jmp    128ce <kvsprintf+0x13f>
            } 
            else if (ch == 'c') {
   12861:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12865:	75 1f                	jne    12886 <kvsprintf+0xf7>
                char c = va_arg(args, int);
   12867:	8b 45 10             	mov    0x10(%ebp),%eax
   1286a:	8d 50 04             	lea    0x4(%eax),%edx
   1286d:	89 55 10             	mov    %edx,0x10(%ebp)
   12870:	8b 00                	mov    (%eax),%eax
   12872:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12875:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12878:	8d 50 01             	lea    0x1(%eax),%edx
   1287b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1287e:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12882:	88 10                	mov    %dl,(%eax)
   12884:	eb 48                	jmp    128ce <kvsprintf+0x13f>
            } 
            else if (ch == 's') {
   12886:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1288a:	75 42                	jne    128ce <kvsprintf+0x13f>
                const char *str = va_arg(args, char *);
   1288c:	8b 45 10             	mov    0x10(%ebp),%eax
   1288f:	8d 50 04             	lea    0x4(%eax),%edx
   12892:	89 55 10             	mov    %edx,0x10(%ebp)
   12895:	8b 00                	mov    (%eax),%eax
   12897:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kstrlen(str);
   1289a:	ff 75 f4             	pushl  -0xc(%ebp)
   1289d:	e8 e7 fb ff ff       	call   12489 <kstrlen>
   128a2:	83 c4 04             	add    $0x4,%esp
   128a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--) {
   128a8:	eb 17                	jmp    128c1 <kvsprintf+0x132>
                    *curr++ = *str++;
   128aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   128ad:	8d 42 01             	lea    0x1(%edx),%eax
   128b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   128b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128b6:	8d 48 01             	lea    0x1(%eax),%ecx
   128b9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   128bc:	0f b6 12             	movzbl (%edx),%edx
   128bf:	88 10                	mov    %dl,(%eax)
                while (len--) {
   128c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   128c4:	8d 50 ff             	lea    -0x1(%eax),%edx
   128c7:	89 55 f0             	mov    %edx,-0x10(%ebp)
   128ca:	85 c0                	test   %eax,%eax
   128cc:	75 dc                	jne    128aa <kvsprintf+0x11b>
                }
            }
            state = NORMAL;
   128ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   128d5:	90                   	nop
    while ((ch = *fmt++)) {
   128d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   128d9:	8d 50 01             	lea    0x1(%eax),%edx
   128dc:	89 55 0c             	mov    %edx,0xc(%ebp)
   128df:	0f b6 00             	movzbl (%eax),%eax
   128e2:	88 45 ef             	mov    %al,-0x11(%ebp)
   128e5:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   128e9:	0f 85 b8 fe ff ff    	jne    127a7 <kvsprintf+0x18>
        }
    }
}
   128ef:	90                   	nop
   128f0:	c9                   	leave  
   128f1:	c3                   	ret    

000128f2 <pannic>:

void pannic(const char* file, int line, const char* func, const char* cond) {
   128f2:	55                   	push   %ebp
   128f3:	89 e5                	mov    %esp,%ebp
   128f5:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   128f8:	83 ec 08             	sub    $0x8,%esp
   128fb:	ff 75 14             	pushl  0x14(%ebp)
   128fe:	68 24 33 01 00       	push   $0x13324
   12903:	e8 f4 02 00 00       	call   12bfc <log_printf>
   12908:	83 c4 10             	add    $0x10,%esp
    log_printf("file %s\nline: %d\nfunc: %s\n", file, line, func);
   1290b:	ff 75 10             	pushl  0x10(%ebp)
   1290e:	ff 75 0c             	pushl  0xc(%ebp)
   12911:	ff 75 08             	pushl  0x8(%ebp)
   12914:	68 36 33 01 00       	push   $0x13336
   12919:	e8 de 02 00 00       	call   12bfc <log_printf>
   1291e:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   12921:	e8 a5 fa ff ff       	call   123cb <hlt>
   12926:	eb f9                	jmp    12921 <pannic+0x2f>

00012928 <list_is_empty>:
static inline int list_is_empty(list_t* list) {
   12928:	55                   	push   %ebp
   12929:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   1292b:	8b 45 08             	mov    0x8(%ebp),%eax
   1292e:	8b 40 08             	mov    0x8(%eax),%eax
   12931:	85 c0                	test   %eax,%eax
   12933:	0f 94 c0             	sete   %al
   12936:	0f b6 c0             	movzbl %al,%eax
}
   12939:	5d                   	pop    %ebp
   1293a:	c3                   	ret    

0001293b <list_init>:
#include "tools/list.h"

void list_init(list_t* list) {
   1293b:	55                   	push   %ebp
   1293c:	89 e5                	mov    %esp,%ebp
    list->first = (list_node_t*)0;
   1293e:	8b 45 08             	mov    0x8(%ebp),%eax
   12941:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list->last = (list_node_t*)0;
   12947:	8b 45 08             	mov    0x8(%ebp),%eax
   1294a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    list->count = 0;
   12951:	8b 45 08             	mov    0x8(%ebp),%eax
   12954:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1295b:	90                   	nop
   1295c:	5d                   	pop    %ebp
   1295d:	c3                   	ret    

0001295e <list_insert_front>:

void list_insert_front(list_t* list, list_node_t* node) {
   1295e:	55                   	push   %ebp
   1295f:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12961:	8b 45 08             	mov    0x8(%ebp),%eax
   12964:	8b 10                	mov    (%eax),%edx
   12966:	8b 45 0c             	mov    0xc(%ebp),%eax
   12969:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1296c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1296f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if (list_is_empty(list)) {
   12975:	ff 75 08             	pushl  0x8(%ebp)
   12978:	e8 ab ff ff ff       	call   12928 <list_is_empty>
   1297d:	83 c4 04             	add    $0x4,%esp
   12980:	85 c0                	test   %eax,%eax
   12982:	74 15                	je     12999 <list_insert_front+0x3b>
        list->last = list->first = node;
   12984:	8b 45 08             	mov    0x8(%ebp),%eax
   12987:	8b 55 0c             	mov    0xc(%ebp),%edx
   1298a:	89 10                	mov    %edx,(%eax)
   1298c:	8b 45 08             	mov    0x8(%ebp),%eax
   1298f:	8b 10                	mov    (%eax),%edx
   12991:	8b 45 08             	mov    0x8(%ebp),%eax
   12994:	89 50 04             	mov    %edx,0x4(%eax)
   12997:	eb 12                	jmp    129ab <list_insert_front+0x4d>
    }
    else {
        list->first->pre = node;
   12999:	8b 45 08             	mov    0x8(%ebp),%eax
   1299c:	8b 00                	mov    (%eax),%eax
   1299e:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a1:	89 10                	mov    %edx,(%eax)
        list->first = node;
   129a3:	8b 45 08             	mov    0x8(%ebp),%eax
   129a6:	8b 55 0c             	mov    0xc(%ebp),%edx
   129a9:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   129ab:	8b 45 08             	mov    0x8(%ebp),%eax
   129ae:	8b 40 08             	mov    0x8(%eax),%eax
   129b1:	8d 50 01             	lea    0x1(%eax),%edx
   129b4:	8b 45 08             	mov    0x8(%ebp),%eax
   129b7:	89 50 08             	mov    %edx,0x8(%eax)
}
   129ba:	90                   	nop
   129bb:	c9                   	leave  
   129bc:	c3                   	ret    

000129bd <list_insert_back>:



void list_insert_back(list_t* list, list_node_t* node) {
   129bd:	55                   	push   %ebp
   129be:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   129c0:	8b 45 08             	mov    0x8(%ebp),%eax
   129c3:	8b 50 04             	mov    0x4(%eax),%edx
   129c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   129c9:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   129cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   129ce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list)) {
   129d5:	ff 75 08             	pushl  0x8(%ebp)
   129d8:	e8 4b ff ff ff       	call   12928 <list_is_empty>
   129dd:	83 c4 04             	add    $0x4,%esp
   129e0:	85 c0                	test   %eax,%eax
   129e2:	74 15                	je     129f9 <list_insert_back+0x3c>
        list->last = list->first = node;
   129e4:	8b 45 08             	mov    0x8(%ebp),%eax
   129e7:	8b 55 0c             	mov    0xc(%ebp),%edx
   129ea:	89 10                	mov    %edx,(%eax)
   129ec:	8b 45 08             	mov    0x8(%ebp),%eax
   129ef:	8b 10                	mov    (%eax),%edx
   129f1:	8b 45 08             	mov    0x8(%ebp),%eax
   129f4:	89 50 04             	mov    %edx,0x4(%eax)
   129f7:	eb 15                	jmp    12a0e <list_insert_back+0x51>
    }
    else {
        list->last->next = node;
   129f9:	8b 45 08             	mov    0x8(%ebp),%eax
   129fc:	8b 40 04             	mov    0x4(%eax),%eax
   129ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a02:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12a05:	8b 45 08             	mov    0x8(%ebp),%eax
   12a08:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a0b:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a11:	8b 40 08             	mov    0x8(%eax),%eax
   12a14:	8d 50 01             	lea    0x1(%eax),%edx
   12a17:	8b 45 08             	mov    0x8(%ebp),%eax
   12a1a:	89 50 08             	mov    %edx,0x8(%eax)
}
   12a1d:	90                   	nop
   12a1e:	c9                   	leave  
   12a1f:	c3                   	ret    

00012a20 <list_remove_front>:




list_node_t* list_remove_front(list_t* list) {
   12a20:	55                   	push   %ebp
   12a21:	89 e5                	mov    %esp,%ebp
   12a23:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   12a26:	ff 75 08             	pushl  0x8(%ebp)
   12a29:	e8 fa fe ff ff       	call   12928 <list_is_empty>
   12a2e:	83 c4 04             	add    $0x4,%esp
   12a31:	85 c0                	test   %eax,%eax
   12a33:	74 07                	je     12a3c <list_remove_front+0x1c>
        return (list_node_t*)0;
   12a35:	b8 00 00 00 00       	mov    $0x0,%eax
   12a3a:	eb 5b                	jmp    12a97 <list_remove_front+0x77>
    }

    list_node_t* removed_node = list->first;
   12a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a3f:	8b 00                	mov    (%eax),%eax
   12a41:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = removed_node->next;
   12a44:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a47:	8b 50 04             	mov    0x4(%eax),%edx
   12a4a:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4d:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t*)0) {
   12a4f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a52:	8b 00                	mov    (%eax),%eax
   12a54:	85 c0                	test   %eax,%eax
   12a56:	75 0c                	jne    12a64 <list_remove_front+0x44>
        list->last = (list_node_t*)0;
   12a58:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a62:	eb 0c                	jmp    12a70 <list_remove_front+0x50>
    }
    else {
        removed_node->next->pre = (list_node_t*)0;
   12a64:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a67:	8b 40 04             	mov    0x4(%eax),%eax
   12a6a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    removed_node->pre = removed_node->next = (list_node_t*)0;
   12a70:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a73:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a7d:	8b 50 04             	mov    0x4(%eax),%edx
   12a80:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a83:	89 10                	mov    %edx,(%eax)
    list->count--;
   12a85:	8b 45 08             	mov    0x8(%ebp),%eax
   12a88:	8b 40 08             	mov    0x8(%eax),%eax
   12a8b:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a8e:	8b 45 08             	mov    0x8(%ebp),%eax
   12a91:	89 50 08             	mov    %edx,0x8(%eax)

    return removed_node;
   12a94:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12a97:	c9                   	leave  
   12a98:	c3                   	ret    

00012a99 <list_remove>:



list_node_t* list_remove(list_t* list, list_node_t* node) {
   12a99:	55                   	push   %ebp
   12a9a:	89 e5                	mov    %esp,%ebp
    if (node == list->first) {
   12a9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9f:	8b 00                	mov    (%eax),%eax
   12aa1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12aa4:	75 0b                	jne    12ab1 <list_remove+0x18>
        list->first = node->next;
   12aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12aa9:	8b 50 04             	mov    0x4(%eax),%edx
   12aac:	8b 45 08             	mov    0x8(%ebp),%eax
   12aaf:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last) {
   12ab1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab4:	8b 40 04             	mov    0x4(%eax),%eax
   12ab7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12aba:	75 0b                	jne    12ac7 <list_remove+0x2e>
        list->last = node->pre;
   12abc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12abf:	8b 10                	mov    (%eax),%edx
   12ac1:	8b 45 08             	mov    0x8(%ebp),%eax
   12ac4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre) {
   12ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12aca:	8b 00                	mov    (%eax),%eax
   12acc:	85 c0                	test   %eax,%eax
   12ace:	74 0e                	je     12ade <list_remove+0x45>
        node->pre->next = node->next;
   12ad0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ad3:	8b 00                	mov    (%eax),%eax
   12ad5:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ad8:	8b 52 04             	mov    0x4(%edx),%edx
   12adb:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next) {
   12ade:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ae1:	8b 40 04             	mov    0x4(%eax),%eax
   12ae4:	85 c0                	test   %eax,%eax
   12ae6:	74 0d                	je     12af5 <list_remove+0x5c>
        node->next->pre = node->pre;
   12ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12aeb:	8b 40 04             	mov    0x4(%eax),%eax
   12aee:	8b 55 0c             	mov    0xc(%ebp),%edx
   12af1:	8b 12                	mov    (%edx),%edx
   12af3:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   12af5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12af8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12aff:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b02:	8b 50 04             	mov    0x4(%eax),%edx
   12b05:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b08:	89 10                	mov    %edx,(%eax)
    --list->count;
   12b0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0d:	8b 40 08             	mov    0x8(%eax),%eax
   12b10:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b13:	8b 45 08             	mov    0x8(%ebp),%eax
   12b16:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12b19:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b1c:	5d                   	pop    %ebp
   12b1d:	c3                   	ret    

00012b1e <inb>:
static inline uint8_t inb(uint16_t port) {
   12b1e:	55                   	push   %ebp
   12b1f:	89 e5                	mov    %esp,%ebp
   12b21:	83 ec 14             	sub    $0x14,%esp
   12b24:	8b 45 08             	mov    0x8(%ebp),%eax
   12b27:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
   12b2b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12b2f:	89 c2                	mov    %eax,%edx
   12b31:	ec                   	in     (%dx),%al
   12b32:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12b35:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12b39:	c9                   	leave  
   12b3a:	c3                   	ret    

00012b3b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12b3b:	55                   	push   %ebp
   12b3c:	89 e5                	mov    %esp,%ebp
   12b3e:	83 ec 08             	sub    $0x8,%esp
   12b41:	8b 55 08             	mov    0x8(%ebp),%edx
   12b44:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b47:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12b4b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
   12b4e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12b52:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12b56:	ee                   	out    %al,(%dx)
}
   12b57:	90                   	nop
   12b58:	c9                   	leave  
   12b59:	c3                   	ret    

00012b5a <log_init>:
static mutex_t mutex;

#define COM1_PORT           0x3f8


void log_init(void) {
   12b5a:	55                   	push   %ebp
   12b5b:	89 e5                	mov    %esp,%ebp
   12b5d:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex, "log");
   12b60:	83 ec 08             	sub    $0x8,%esp
   12b63:	68 74 33 01 00       	push   $0x13374
   12b68:	68 e0 8e 01 00       	push   $0x18ee0
   12b6d:	e8 41 f3 ff ff       	call   11eb3 <mutex_init>
   12b72:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12b75:	83 ec 08             	sub    $0x8,%esp
   12b78:	6a 00                	push   $0x0
   12b7a:	68 f9 03 00 00       	push   $0x3f9
   12b7f:	e8 b7 ff ff ff       	call   12b3b <outb>
   12b84:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12b87:	83 ec 08             	sub    $0x8,%esp
   12b8a:	68 80 00 00 00       	push   $0x80
   12b8f:	68 fb 03 00 00       	push   $0x3fb
   12b94:	e8 a2 ff ff ff       	call   12b3b <outb>
   12b99:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x03);
   12b9c:	83 ec 08             	sub    $0x8,%esp
   12b9f:	6a 03                	push   $0x3
   12ba1:	68 f8 03 00 00       	push   $0x3f8
   12ba6:	e8 90 ff ff ff       	call   12b3b <outb>
   12bab:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12bae:	83 ec 08             	sub    $0x8,%esp
   12bb1:	6a 00                	push   $0x0
   12bb3:	68 f9 03 00 00       	push   $0x3f9
   12bb8:	e8 7e ff ff ff       	call   12b3b <outb>
   12bbd:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12bc0:	83 ec 08             	sub    $0x8,%esp
   12bc3:	6a 03                	push   $0x3
   12bc5:	68 fb 03 00 00       	push   $0x3fb
   12bca:	e8 6c ff ff ff       	call   12b3b <outb>
   12bcf:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   12bd2:	83 ec 08             	sub    $0x8,%esp
   12bd5:	68 c7 00 00 00       	push   $0xc7
   12bda:	68 fa 03 00 00       	push   $0x3fa
   12bdf:	e8 57 ff ff ff       	call   12b3b <outb>
   12be4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   12be7:	83 ec 08             	sub    $0x8,%esp
   12bea:	6a 0f                	push   $0xf
   12bec:	68 fc 03 00 00       	push   $0x3fc
   12bf1:	e8 45 ff ff ff       	call   12b3b <outb>
   12bf6:	83 c4 10             	add    $0x10,%esp
}
   12bf9:	90                   	nop
   12bfa:	c9                   	leave  
   12bfb:	c3                   	ret    

00012bfc <log_printf>:


void log_printf(const char* fmt, ...) {
   12bfc:	55                   	push   %ebp
   12bfd:	89 e5                	mov    %esp,%ebp
   12bff:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    kmemset(str_buf, '\0', sizeof(str_buf));
   12c05:	83 ec 04             	sub    $0x4,%esp
   12c08:	68 80 00 00 00       	push   $0x80
   12c0d:	6a 00                	push   $0x0
   12c0f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c15:	50                   	push   %eax
   12c16:	e8 72 f9 ff ff       	call   1258d <kmemset>
   12c1b:	83 c4 10             	add    $0x10,%esp

    va_list args;
    va_start(args, fmt);
   12c1e:	8d 45 0c             	lea    0xc(%ebp),%eax
   12c21:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kvsprintf(str_buf, fmt, args);
   12c27:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12c2d:	83 ec 04             	sub    $0x4,%esp
   12c30:	50                   	push   %eax
   12c31:	ff 75 08             	pushl  0x8(%ebp)
   12c34:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c3a:	50                   	push   %eax
   12c3b:	e8 4f fb ff ff       	call   1278f <kvsprintf>
   12c40:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_acquire(&mutex);
   12c43:	83 ec 0c             	sub    $0xc,%esp
   12c46:	68 e0 8e 01 00       	push   $0x18ee0
   12c4b:	e8 a4 f2 ff ff       	call   11ef4 <mutex_acquire>
   12c50:	83 c4 10             	add    $0x10,%esp

    const char* p = str_buf;
   12c53:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12c59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12c5c:	eb 3b                	jmp    12c99 <log_printf+0x9d>
        // 串行接口忙，不要发送
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) {  }
   12c5e:	90                   	nop
   12c5f:	83 ec 0c             	sub    $0xc,%esp
   12c62:	68 fd 03 00 00       	push   $0x3fd
   12c67:	e8 b2 fe ff ff       	call   12b1e <inb>
   12c6c:	83 c4 10             	add    $0x10,%esp
   12c6f:	0f b6 c0             	movzbl %al,%eax
   12c72:	83 e0 40             	and    $0x40,%eax
   12c75:	85 c0                	test   %eax,%eax
   12c77:	74 e6                	je     12c5f <log_printf+0x63>
        outb(COM1_PORT, *p++);
   12c79:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c7c:	8d 50 01             	lea    0x1(%eax),%edx
   12c7f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12c82:	0f b6 00             	movzbl (%eax),%eax
   12c85:	0f b6 c0             	movzbl %al,%eax
   12c88:	83 ec 08             	sub    $0x8,%esp
   12c8b:	50                   	push   %eax
   12c8c:	68 f8 03 00 00       	push   $0x3f8
   12c91:	e8 a5 fe ff ff       	call   12b3b <outb>
   12c96:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12c99:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12c9c:	0f b6 00             	movzbl (%eax),%eax
   12c9f:	84 c0                	test   %al,%al
   12ca1:	75 bb                	jne    12c5e <log_printf+0x62>
    }

    outb(COM1_PORT, '\r');
   12ca3:	83 ec 08             	sub    $0x8,%esp
   12ca6:	6a 0d                	push   $0xd
   12ca8:	68 f8 03 00 00       	push   $0x3f8
   12cad:	e8 89 fe ff ff       	call   12b3b <outb>
   12cb2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12cb5:	83 ec 08             	sub    $0x8,%esp
   12cb8:	6a 0a                	push   $0xa
   12cba:	68 f8 03 00 00       	push   $0x3f8
   12cbf:	e8 77 fe ff ff       	call   12b3b <outb>
   12cc4:	83 c4 10             	add    $0x10,%esp

    mutex_release(&mutex);
   12cc7:	83 ec 0c             	sub    $0xc,%esp
   12cca:	68 e0 8e 01 00       	push   $0x18ee0
   12ccf:	e8 ae f2 ff ff       	call   11f82 <mutex_release>
   12cd4:	83 c4 10             	add    $0x10,%esp
   12cd7:	90                   	nop
   12cd8:	c9                   	leave  
   12cd9:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.global first_task_entry
	.extern first_task_main

    # ds, cs 寄存器会在进程创建前设置好
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax, %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax, %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
8000000b:	8e e8                	mov    %eax,%gs

8000000d:	e9 00 00 00 00       	jmp    80000012 <first_task_main>

80000012 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"

int first_task_main(void) {
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        log_printf("first task.");
80000018:	83 ec 0c             	sub    $0xc,%esp
8000001b:	68 3a 00 00 80       	push   $0x8000003a
80000020:	e8 d7 2b 01 80       	call   12bfc <log_printf>
80000025:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000028:	83 ec 0c             	sub    $0xc,%esp
8000002b:	68 e8 03 00 00       	push   $0x3e8
80000030:	e8 67 10 01 80       	call   1109c <sys_sleep>
80000035:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
80000038:	eb de                	jmp    80000018 <first_task_main+0x6>
8000003a:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
80000040:	74 61                	je     800000a3 <first_task_main+0x91>
80000042:	73 6b                	jae    800000af <first_task_main+0x9d>
80000044:	2e                   	cs
	...
